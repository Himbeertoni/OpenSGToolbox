/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2002 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact: dirk@opensg.org, gerrit.voss@vossg.org, jbehr@zgdv.de          *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class GeometryAnimation!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#define OSG_COMPILEGEOMETRYANIMATIONINST

#include <stdlib.h>
#include <stdio.h>

#include <OpenSG/OSGConfig.h>

#include "OSGGeometryAnimationBase.h"
#include "OSGGeometryAnimation.h"


OSG_BEGIN_NAMESPACE

const OSG::BitVector  GeometryAnimationBase::AnimatorFieldMask = 
    (TypeTraits<BitVector>::One << GeometryAnimationBase::AnimatorFieldId);

const OSG::BitVector  GeometryAnimationBase::GeometryCoreFieldMask = 
    (TypeTraits<BitVector>::One << GeometryAnimationBase::GeometryCoreFieldId);

const OSG::BitVector  GeometryAnimationBase::FieldNameFieldMask = 
    (TypeTraits<BitVector>::One << GeometryAnimationBase::FieldNameFieldId);

const OSG::BitVector  GeometryAnimationBase::FieldIdFieldMask = 
    (TypeTraits<BitVector>::One << GeometryAnimationBase::FieldIdFieldId);

const OSG::BitVector  GeometryAnimationBase::InterpolationTypeFieldMask = 
    (TypeTraits<BitVector>::One << GeometryAnimationBase::InterpolationTypeFieldId);

const OSG::BitVector  GeometryAnimationBase::ReplacementPolicyFieldMask = 
    (TypeTraits<BitVector>::One << GeometryAnimationBase::ReplacementPolicyFieldId);

const OSG::BitVector GeometryAnimationBase::MTInfluenceMask = 
    (Inherited::MTInfluenceMask) | 
    (static_cast<BitVector>(0x0) << Inherited::NextFieldId); 


// Field descriptions

/*! \var AnimatorPtr     GeometryAnimationBase::_sfAnimator
    
*/
/*! \var GeometryPtr     GeometryAnimationBase::_sfGeometryCore
    
*/
/*! \var std::string     GeometryAnimationBase::_sfFieldName
    
*/
/*! \var UInt32          GeometryAnimationBase::_sfFieldId
    
*/
/*! \var UInt32          GeometryAnimationBase::_sfInterpolationType
    
*/
/*! \var UInt32          GeometryAnimationBase::_sfReplacementPolicy
    
*/

//! GeometryAnimation description

FieldDescription *GeometryAnimationBase::_desc[] = 
{
    new FieldDescription(SFAnimatorPtr::getClassType(), 
                     "Animator", 
                     AnimatorFieldId, AnimatorFieldMask,
                     false,
                     (FieldAccessMethod) &GeometryAnimationBase::getSFAnimator),
    new FieldDescription(SFGeometryPtr::getClassType(), 
                     "GeometryCore", 
                     GeometryCoreFieldId, GeometryCoreFieldMask,
                     false,
                     (FieldAccessMethod) &GeometryAnimationBase::getSFGeometryCore),
    new FieldDescription(SFString::getClassType(), 
                     "FieldName", 
                     FieldNameFieldId, FieldNameFieldMask,
                     false,
                     (FieldAccessMethod) &GeometryAnimationBase::getSFFieldName),
    new FieldDescription(SFUInt32::getClassType(), 
                     "FieldId", 
                     FieldIdFieldId, FieldIdFieldMask,
                     false,
                     (FieldAccessMethod) &GeometryAnimationBase::getSFFieldId),
    new FieldDescription(SFUInt32::getClassType(), 
                     "InterpolationType", 
                     InterpolationTypeFieldId, InterpolationTypeFieldMask,
                     false,
                     (FieldAccessMethod) &GeometryAnimationBase::getSFInterpolationType),
    new FieldDescription(SFUInt32::getClassType(), 
                     "ReplacementPolicy", 
                     ReplacementPolicyFieldId, ReplacementPolicyFieldMask,
                     false,
                     (FieldAccessMethod) &GeometryAnimationBase::getSFReplacementPolicy)
};


FieldContainerType GeometryAnimationBase::_type(
    "GeometryAnimation",
    "Animation",
    NULL,
    (PrototypeCreateF) &GeometryAnimationBase::createEmpty,
    GeometryAnimation::initMethod,
    _desc,
    sizeof(_desc));

//OSG_FIELD_CONTAINER_DEF(GeometryAnimationBase, GeometryAnimationPtr)

/*------------------------------ get -----------------------------------*/

FieldContainerType &GeometryAnimationBase::getType(void) 
{
    return _type; 
} 

const FieldContainerType &GeometryAnimationBase::getType(void) const 
{
    return _type;
} 


FieldContainerPtr GeometryAnimationBase::shallowCopy(void) const 
{ 
    GeometryAnimationPtr returnValue; 

    newPtr(returnValue, dynamic_cast<const GeometryAnimation *>(this)); 

    return returnValue; 
}

UInt32 GeometryAnimationBase::getContainerSize(void) const 
{ 
    return sizeof(GeometryAnimation); 
}


#if !defined(OSG_FIXED_MFIELDSYNC)
void GeometryAnimationBase::executeSync(      FieldContainer &other,
                                    const BitVector      &whichField)
{
    this->executeSyncImpl((GeometryAnimationBase *) &other, whichField);
}
#else
void GeometryAnimationBase::executeSync(      FieldContainer &other,
                                    const BitVector      &whichField,                                    const SyncInfo       &sInfo     )
{
    this->executeSyncImpl((GeometryAnimationBase *) &other, whichField, sInfo);
}
void GeometryAnimationBase::execBeginEdit(const BitVector &whichField, 
                                            UInt32     uiAspect,
                                            UInt32     uiContainerSize) 
{
    this->execBeginEditImpl(whichField, uiAspect, uiContainerSize);
}

void GeometryAnimationBase::onDestroyAspect(UInt32 uiId, UInt32 uiAspect)
{
    Inherited::onDestroyAspect(uiId, uiAspect);

}
#endif

/*------------------------- constructors ----------------------------------*/

#ifdef OSG_WIN32_ICL
#pragma warning (disable : 383)
#endif

GeometryAnimationBase::GeometryAnimationBase(void) :
    _sfAnimator               (), 
    _sfGeometryCore           (), 
    _sfFieldName              (), 
    _sfFieldId                (), 
    _sfInterpolationType      (), 
    _sfReplacementPolicy      (), 
    Inherited() 
{
}

#ifdef OSG_WIN32_ICL
#pragma warning (default : 383)
#endif

GeometryAnimationBase::GeometryAnimationBase(const GeometryAnimationBase &source) :
    _sfAnimator               (source._sfAnimator               ), 
    _sfGeometryCore           (source._sfGeometryCore           ), 
    _sfFieldName              (source._sfFieldName              ), 
    _sfFieldId                (source._sfFieldId                ), 
    _sfInterpolationType      (source._sfInterpolationType      ), 
    _sfReplacementPolicy      (source._sfReplacementPolicy      ), 
    Inherited                 (source)
{
}

/*-------------------------- destructors ----------------------------------*/

GeometryAnimationBase::~GeometryAnimationBase(void)
{
}

/*------------------------------ access -----------------------------------*/

UInt32 GeometryAnimationBase::getBinSize(const BitVector &whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (AnimatorFieldMask & whichField))
    {
        returnValue += _sfAnimator.getBinSize();
    }

    if(FieldBits::NoField != (GeometryCoreFieldMask & whichField))
    {
        returnValue += _sfGeometryCore.getBinSize();
    }

    if(FieldBits::NoField != (FieldNameFieldMask & whichField))
    {
        returnValue += _sfFieldName.getBinSize();
    }

    if(FieldBits::NoField != (FieldIdFieldMask & whichField))
    {
        returnValue += _sfFieldId.getBinSize();
    }

    if(FieldBits::NoField != (InterpolationTypeFieldMask & whichField))
    {
        returnValue += _sfInterpolationType.getBinSize();
    }

    if(FieldBits::NoField != (ReplacementPolicyFieldMask & whichField))
    {
        returnValue += _sfReplacementPolicy.getBinSize();
    }


    return returnValue;
}

void GeometryAnimationBase::copyToBin(      BinaryDataHandler &pMem,
                                  const BitVector         &whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (AnimatorFieldMask & whichField))
    {
        _sfAnimator.copyToBin(pMem);
    }

    if(FieldBits::NoField != (GeometryCoreFieldMask & whichField))
    {
        _sfGeometryCore.copyToBin(pMem);
    }

    if(FieldBits::NoField != (FieldNameFieldMask & whichField))
    {
        _sfFieldName.copyToBin(pMem);
    }

    if(FieldBits::NoField != (FieldIdFieldMask & whichField))
    {
        _sfFieldId.copyToBin(pMem);
    }

    if(FieldBits::NoField != (InterpolationTypeFieldMask & whichField))
    {
        _sfInterpolationType.copyToBin(pMem);
    }

    if(FieldBits::NoField != (ReplacementPolicyFieldMask & whichField))
    {
        _sfReplacementPolicy.copyToBin(pMem);
    }


}

void GeometryAnimationBase::copyFromBin(      BinaryDataHandler &pMem,
                                    const BitVector    &whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (AnimatorFieldMask & whichField))
    {
        _sfAnimator.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (GeometryCoreFieldMask & whichField))
    {
        _sfGeometryCore.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (FieldNameFieldMask & whichField))
    {
        _sfFieldName.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (FieldIdFieldMask & whichField))
    {
        _sfFieldId.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (InterpolationTypeFieldMask & whichField))
    {
        _sfInterpolationType.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (ReplacementPolicyFieldMask & whichField))
    {
        _sfReplacementPolicy.copyFromBin(pMem);
    }


}

#if !defined(OSG_FIXED_MFIELDSYNC)
void GeometryAnimationBase::executeSyncImpl(      GeometryAnimationBase *pOther,
                                        const BitVector         &whichField)
{

    Inherited::executeSyncImpl(pOther, whichField);

    if(FieldBits::NoField != (AnimatorFieldMask & whichField))
        _sfAnimator.syncWith(pOther->_sfAnimator);

    if(FieldBits::NoField != (GeometryCoreFieldMask & whichField))
        _sfGeometryCore.syncWith(pOther->_sfGeometryCore);

    if(FieldBits::NoField != (FieldNameFieldMask & whichField))
        _sfFieldName.syncWith(pOther->_sfFieldName);

    if(FieldBits::NoField != (FieldIdFieldMask & whichField))
        _sfFieldId.syncWith(pOther->_sfFieldId);

    if(FieldBits::NoField != (InterpolationTypeFieldMask & whichField))
        _sfInterpolationType.syncWith(pOther->_sfInterpolationType);

    if(FieldBits::NoField != (ReplacementPolicyFieldMask & whichField))
        _sfReplacementPolicy.syncWith(pOther->_sfReplacementPolicy);


}
#else
void GeometryAnimationBase::executeSyncImpl(      GeometryAnimationBase *pOther,
                                        const BitVector         &whichField,
                                        const SyncInfo          &sInfo      )
{

    Inherited::executeSyncImpl(pOther, whichField, sInfo);

    if(FieldBits::NoField != (AnimatorFieldMask & whichField))
        _sfAnimator.syncWith(pOther->_sfAnimator);

    if(FieldBits::NoField != (GeometryCoreFieldMask & whichField))
        _sfGeometryCore.syncWith(pOther->_sfGeometryCore);

    if(FieldBits::NoField != (FieldNameFieldMask & whichField))
        _sfFieldName.syncWith(pOther->_sfFieldName);

    if(FieldBits::NoField != (FieldIdFieldMask & whichField))
        _sfFieldId.syncWith(pOther->_sfFieldId);

    if(FieldBits::NoField != (InterpolationTypeFieldMask & whichField))
        _sfInterpolationType.syncWith(pOther->_sfInterpolationType);

    if(FieldBits::NoField != (ReplacementPolicyFieldMask & whichField))
        _sfReplacementPolicy.syncWith(pOther->_sfReplacementPolicy);



}

void GeometryAnimationBase::execBeginEditImpl (const BitVector &whichField, 
                                                 UInt32     uiAspect,
                                                 UInt32     uiContainerSize)
{
    Inherited::execBeginEditImpl(whichField, uiAspect, uiContainerSize);

}
#endif



OSG_END_NAMESPACE

#include <OpenSG/OSGSFieldTypeDef.inl>
#include <OpenSG/OSGMFieldTypeDef.inl>

OSG_BEGIN_NAMESPACE

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldDataTraits<GeometryAnimationPtr>::_type("GeometryAnimationPtr", "AnimationPtr");
#endif

OSG_DLLEXPORT_SFIELD_DEF1(GeometryAnimationPtr, OSG_ANIMATIONLIB_DLLTMPLMAPPING);
OSG_DLLEXPORT_MFIELD_DEF1(GeometryAnimationPtr, OSG_ANIMATIONLIB_DLLTMPLMAPPING);


/*------------------------------------------------------------------------*/
/*                              cvs id's                                  */

#ifdef OSG_SGI_CC
#pragma set woff 1174
#endif

#ifdef OSG_LINUX_ICC
#pragma warning( disable : 177 )
#endif

namespace
{
    static Char8 cvsid_cpp       [] = "@(#)$Id: FCBaseTemplate_cpp.h,v 1.47 2006/03/17 17:03:19 pdaehne Exp $";
    static Char8 cvsid_hpp       [] = OSGGEOMETRYANIMATIONBASE_HEADER_CVSID;
    static Char8 cvsid_inl       [] = OSGGEOMETRYANIMATIONBASE_INLINE_CVSID;

    static Char8 cvsid_fields_hpp[] = OSGGEOMETRYANIMATIONFIELDS_HEADER_CVSID;
}

OSG_END_NAMESPACE

