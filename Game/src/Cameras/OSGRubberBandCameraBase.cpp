/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2002 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact: dirk@opensg.org, gerrit.voss@vossg.org, jbehr@zgdv.de          *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class RubberBandCamera!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#define OSG_COMPILERUBBERBANDCAMERAINST

#include <stdlib.h>
#include <stdio.h>

#include <OpenSG/OSGConfig.h>

#include "OSGRubberBandCameraBase.h"
#include "OSGRubberBandCamera.h"


OSG_BEGIN_NAMESPACE

const OSG::BitVector  RubberBandCameraBase::PositionConstantFieldMask = 
    (TypeTraits<BitVector>::One << RubberBandCameraBase::PositionConstantFieldId);

const OSG::BitVector  RubberBandCameraBase::PositionLinearFieldMask = 
    (TypeTraits<BitVector>::One << RubberBandCameraBase::PositionLinearFieldId);

const OSG::BitVector  RubberBandCameraBase::PositionQuadraticFieldMask = 
    (TypeTraits<BitVector>::One << RubberBandCameraBase::PositionQuadraticFieldId);

const OSG::BitVector  RubberBandCameraBase::OrientationConstantFieldMask = 
    (TypeTraits<BitVector>::One << RubberBandCameraBase::OrientationConstantFieldId);

const OSG::BitVector  RubberBandCameraBase::OrientationLinearFieldMask = 
    (TypeTraits<BitVector>::One << RubberBandCameraBase::OrientationLinearFieldId);

const OSG::BitVector  RubberBandCameraBase::OrientationQuadraticFieldMask = 
    (TypeTraits<BitVector>::One << RubberBandCameraBase::OrientationQuadraticFieldId);

const OSG::BitVector RubberBandCameraBase::MTInfluenceMask = 
    (Inherited::MTInfluenceMask) | 
    (static_cast<BitVector>(0x0) << Inherited::NextFieldId); 


// Field descriptions

/*! \var Real32          RubberBandCameraBase::_sfPositionConstant
    
*/
/*! \var Real32          RubberBandCameraBase::_sfPositionLinear
    
*/
/*! \var Real32          RubberBandCameraBase::_sfPositionQuadratic
    
*/
/*! \var Real32          RubberBandCameraBase::_sfOrientationConstant
    
*/
/*! \var Real32          RubberBandCameraBase::_sfOrientationLinear
    
*/
/*! \var Real32          RubberBandCameraBase::_sfOrientationQuadratic
    
*/

//! RubberBandCamera description

FieldDescription *RubberBandCameraBase::_desc[] = 
{
    new FieldDescription(SFReal32::getClassType(), 
                     "PositionConstant", 
                     PositionConstantFieldId, PositionConstantFieldMask,
                     false,
                     (FieldAccessMethod) &RubberBandCameraBase::getSFPositionConstant),
    new FieldDescription(SFReal32::getClassType(), 
                     "PositionLinear", 
                     PositionLinearFieldId, PositionLinearFieldMask,
                     false,
                     (FieldAccessMethod) &RubberBandCameraBase::getSFPositionLinear),
    new FieldDescription(SFReal32::getClassType(), 
                     "PositionQuadratic", 
                     PositionQuadraticFieldId, PositionQuadraticFieldMask,
                     false,
                     (FieldAccessMethod) &RubberBandCameraBase::getSFPositionQuadratic),
    new FieldDescription(SFReal32::getClassType(), 
                     "OrientationConstant", 
                     OrientationConstantFieldId, OrientationConstantFieldMask,
                     false,
                     (FieldAccessMethod) &RubberBandCameraBase::getSFOrientationConstant),
    new FieldDescription(SFReal32::getClassType(), 
                     "OrientationLinear", 
                     OrientationLinearFieldId, OrientationLinearFieldMask,
                     false,
                     (FieldAccessMethod) &RubberBandCameraBase::getSFOrientationLinear),
    new FieldDescription(SFReal32::getClassType(), 
                     "OrientationQuadratic", 
                     OrientationQuadraticFieldId, OrientationQuadraticFieldMask,
                     false,
                     (FieldAccessMethod) &RubberBandCameraBase::getSFOrientationQuadratic)
};


FieldContainerType RubberBandCameraBase::_type(
    "RubberBandCamera",
    "CameraDecorator",
    NULL,
    (PrototypeCreateF) &RubberBandCameraBase::createEmpty,
    RubberBandCamera::initMethod,
    _desc,
    sizeof(_desc));

//OSG_FIELD_CONTAINER_DEF(RubberBandCameraBase, RubberBandCameraPtr)

/*------------------------------ get -----------------------------------*/

FieldContainerType &RubberBandCameraBase::getType(void) 
{
    return _type; 
} 

const FieldContainerType &RubberBandCameraBase::getType(void) const 
{
    return _type;
} 


FieldContainerPtr RubberBandCameraBase::shallowCopy(void) const 
{ 
    RubberBandCameraPtr returnValue; 

    newPtr(returnValue, dynamic_cast<const RubberBandCamera *>(this)); 

    return returnValue; 
}

UInt32 RubberBandCameraBase::getContainerSize(void) const 
{ 
    return sizeof(RubberBandCamera); 
}


#if !defined(OSG_FIXED_MFIELDSYNC)
void RubberBandCameraBase::executeSync(      FieldContainer &other,
                                    const BitVector      &whichField)
{
    this->executeSyncImpl((RubberBandCameraBase *) &other, whichField);
}
#else
void RubberBandCameraBase::executeSync(      FieldContainer &other,
                                    const BitVector      &whichField,                                    const SyncInfo       &sInfo     )
{
    this->executeSyncImpl((RubberBandCameraBase *) &other, whichField, sInfo);
}
void RubberBandCameraBase::execBeginEdit(const BitVector &whichField, 
                                            UInt32     uiAspect,
                                            UInt32     uiContainerSize) 
{
    this->execBeginEditImpl(whichField, uiAspect, uiContainerSize);
}

void RubberBandCameraBase::onDestroyAspect(UInt32 uiId, UInt32 uiAspect)
{
    Inherited::onDestroyAspect(uiId, uiAspect);

}
#endif

/*------------------------- constructors ----------------------------------*/

#ifdef OSG_WIN32_ICL
#pragma warning (disable : 383)
#endif

RubberBandCameraBase::RubberBandCameraBase(void) :
    _sfPositionConstant       (), 
    _sfPositionLinear         (), 
    _sfPositionQuadratic      (), 
    _sfOrientationConstant    (), 
    _sfOrientationLinear      (), 
    _sfOrientationQuadratic   (), 
    Inherited() 
{
}

#ifdef OSG_WIN32_ICL
#pragma warning (default : 383)
#endif

RubberBandCameraBase::RubberBandCameraBase(const RubberBandCameraBase &source) :
    _sfPositionConstant       (source._sfPositionConstant       ), 
    _sfPositionLinear         (source._sfPositionLinear         ), 
    _sfPositionQuadratic      (source._sfPositionQuadratic      ), 
    _sfOrientationConstant    (source._sfOrientationConstant    ), 
    _sfOrientationLinear      (source._sfOrientationLinear      ), 
    _sfOrientationQuadratic   (source._sfOrientationQuadratic   ), 
    Inherited                 (source)
{
}

/*-------------------------- destructors ----------------------------------*/

RubberBandCameraBase::~RubberBandCameraBase(void)
{
}

/*------------------------------ access -----------------------------------*/

UInt32 RubberBandCameraBase::getBinSize(const BitVector &whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (PositionConstantFieldMask & whichField))
    {
        returnValue += _sfPositionConstant.getBinSize();
    }

    if(FieldBits::NoField != (PositionLinearFieldMask & whichField))
    {
        returnValue += _sfPositionLinear.getBinSize();
    }

    if(FieldBits::NoField != (PositionQuadraticFieldMask & whichField))
    {
        returnValue += _sfPositionQuadratic.getBinSize();
    }

    if(FieldBits::NoField != (OrientationConstantFieldMask & whichField))
    {
        returnValue += _sfOrientationConstant.getBinSize();
    }

    if(FieldBits::NoField != (OrientationLinearFieldMask & whichField))
    {
        returnValue += _sfOrientationLinear.getBinSize();
    }

    if(FieldBits::NoField != (OrientationQuadraticFieldMask & whichField))
    {
        returnValue += _sfOrientationQuadratic.getBinSize();
    }


    return returnValue;
}

void RubberBandCameraBase::copyToBin(      BinaryDataHandler &pMem,
                                  const BitVector         &whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (PositionConstantFieldMask & whichField))
    {
        _sfPositionConstant.copyToBin(pMem);
    }

    if(FieldBits::NoField != (PositionLinearFieldMask & whichField))
    {
        _sfPositionLinear.copyToBin(pMem);
    }

    if(FieldBits::NoField != (PositionQuadraticFieldMask & whichField))
    {
        _sfPositionQuadratic.copyToBin(pMem);
    }

    if(FieldBits::NoField != (OrientationConstantFieldMask & whichField))
    {
        _sfOrientationConstant.copyToBin(pMem);
    }

    if(FieldBits::NoField != (OrientationLinearFieldMask & whichField))
    {
        _sfOrientationLinear.copyToBin(pMem);
    }

    if(FieldBits::NoField != (OrientationQuadraticFieldMask & whichField))
    {
        _sfOrientationQuadratic.copyToBin(pMem);
    }


}

void RubberBandCameraBase::copyFromBin(      BinaryDataHandler &pMem,
                                    const BitVector    &whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (PositionConstantFieldMask & whichField))
    {
        _sfPositionConstant.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (PositionLinearFieldMask & whichField))
    {
        _sfPositionLinear.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (PositionQuadraticFieldMask & whichField))
    {
        _sfPositionQuadratic.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (OrientationConstantFieldMask & whichField))
    {
        _sfOrientationConstant.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (OrientationLinearFieldMask & whichField))
    {
        _sfOrientationLinear.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (OrientationQuadraticFieldMask & whichField))
    {
        _sfOrientationQuadratic.copyFromBin(pMem);
    }


}

#if !defined(OSG_FIXED_MFIELDSYNC)
void RubberBandCameraBase::executeSyncImpl(      RubberBandCameraBase *pOther,
                                        const BitVector         &whichField)
{

    Inherited::executeSyncImpl(pOther, whichField);

    if(FieldBits::NoField != (PositionConstantFieldMask & whichField))
        _sfPositionConstant.syncWith(pOther->_sfPositionConstant);

    if(FieldBits::NoField != (PositionLinearFieldMask & whichField))
        _sfPositionLinear.syncWith(pOther->_sfPositionLinear);

    if(FieldBits::NoField != (PositionQuadraticFieldMask & whichField))
        _sfPositionQuadratic.syncWith(pOther->_sfPositionQuadratic);

    if(FieldBits::NoField != (OrientationConstantFieldMask & whichField))
        _sfOrientationConstant.syncWith(pOther->_sfOrientationConstant);

    if(FieldBits::NoField != (OrientationLinearFieldMask & whichField))
        _sfOrientationLinear.syncWith(pOther->_sfOrientationLinear);

    if(FieldBits::NoField != (OrientationQuadraticFieldMask & whichField))
        _sfOrientationQuadratic.syncWith(pOther->_sfOrientationQuadratic);


}
#else
void RubberBandCameraBase::executeSyncImpl(      RubberBandCameraBase *pOther,
                                        const BitVector         &whichField,
                                        const SyncInfo          &sInfo      )
{

    Inherited::executeSyncImpl(pOther, whichField, sInfo);

    if(FieldBits::NoField != (PositionConstantFieldMask & whichField))
        _sfPositionConstant.syncWith(pOther->_sfPositionConstant);

    if(FieldBits::NoField != (PositionLinearFieldMask & whichField))
        _sfPositionLinear.syncWith(pOther->_sfPositionLinear);

    if(FieldBits::NoField != (PositionQuadraticFieldMask & whichField))
        _sfPositionQuadratic.syncWith(pOther->_sfPositionQuadratic);

    if(FieldBits::NoField != (OrientationConstantFieldMask & whichField))
        _sfOrientationConstant.syncWith(pOther->_sfOrientationConstant);

    if(FieldBits::NoField != (OrientationLinearFieldMask & whichField))
        _sfOrientationLinear.syncWith(pOther->_sfOrientationLinear);

    if(FieldBits::NoField != (OrientationQuadraticFieldMask & whichField))
        _sfOrientationQuadratic.syncWith(pOther->_sfOrientationQuadratic);



}

void RubberBandCameraBase::execBeginEditImpl (const BitVector &whichField, 
                                                 UInt32     uiAspect,
                                                 UInt32     uiContainerSize)
{
    Inherited::execBeginEditImpl(whichField, uiAspect, uiContainerSize);

}
#endif

/*------------------------------ get -----------------------------------*/

OSG_GAMELIB_DLLMAPPING
SFReal32 *RubberBandCameraBase::getSFPositionConstant(void)
{
    return &_sfPositionConstant;
}

OSG_GAMELIB_DLLMAPPING
SFReal32 *RubberBandCameraBase::getSFPositionLinear(void)
{
    return &_sfPositionLinear;
}

OSG_GAMELIB_DLLMAPPING
SFReal32 *RubberBandCameraBase::getSFPositionQuadratic(void)
{
    return &_sfPositionQuadratic;
}

OSG_GAMELIB_DLLMAPPING
SFReal32 *RubberBandCameraBase::getSFOrientationConstant(void)
{
    return &_sfOrientationConstant;
}

OSG_GAMELIB_DLLMAPPING
SFReal32 *RubberBandCameraBase::getSFOrientationLinear(void)
{
    return &_sfOrientationLinear;
}

OSG_GAMELIB_DLLMAPPING
SFReal32 *RubberBandCameraBase::getSFOrientationQuadratic(void)
{
    return &_sfOrientationQuadratic;
}


OSG_GAMELIB_DLLMAPPING
Real32 &RubberBandCameraBase::getPositionConstant(void)
{
    return _sfPositionConstant.getValue();
}

OSG_GAMELIB_DLLMAPPING
const Real32 &RubberBandCameraBase::getPositionConstant(void) const
{
    return _sfPositionConstant.getValue();
}

OSG_GAMELIB_DLLMAPPING
void RubberBandCameraBase::setPositionConstant(const Real32 &value)
{
    _sfPositionConstant.setValue(value);
}

OSG_GAMELIB_DLLMAPPING
Real32 &RubberBandCameraBase::getPositionLinear(void)
{
    return _sfPositionLinear.getValue();
}

OSG_GAMELIB_DLLMAPPING
const Real32 &RubberBandCameraBase::getPositionLinear(void) const
{
    return _sfPositionLinear.getValue();
}

OSG_GAMELIB_DLLMAPPING
void RubberBandCameraBase::setPositionLinear(const Real32 &value)
{
    _sfPositionLinear.setValue(value);
}

OSG_GAMELIB_DLLMAPPING
Real32 &RubberBandCameraBase::getPositionQuadratic(void)
{
    return _sfPositionQuadratic.getValue();
}

OSG_GAMELIB_DLLMAPPING
const Real32 &RubberBandCameraBase::getPositionQuadratic(void) const
{
    return _sfPositionQuadratic.getValue();
}

OSG_GAMELIB_DLLMAPPING
void RubberBandCameraBase::setPositionQuadratic(const Real32 &value)
{
    _sfPositionQuadratic.setValue(value);
}

OSG_GAMELIB_DLLMAPPING
Real32 &RubberBandCameraBase::getOrientationConstant(void)
{
    return _sfOrientationConstant.getValue();
}

OSG_GAMELIB_DLLMAPPING
const Real32 &RubberBandCameraBase::getOrientationConstant(void) const
{
    return _sfOrientationConstant.getValue();
}

OSG_GAMELIB_DLLMAPPING
void RubberBandCameraBase::setOrientationConstant(const Real32 &value)
{
    _sfOrientationConstant.setValue(value);
}

OSG_GAMELIB_DLLMAPPING
Real32 &RubberBandCameraBase::getOrientationLinear(void)
{
    return _sfOrientationLinear.getValue();
}

OSG_GAMELIB_DLLMAPPING
const Real32 &RubberBandCameraBase::getOrientationLinear(void) const
{
    return _sfOrientationLinear.getValue();
}

OSG_GAMELIB_DLLMAPPING
void RubberBandCameraBase::setOrientationLinear(const Real32 &value)
{
    _sfOrientationLinear.setValue(value);
}

OSG_GAMELIB_DLLMAPPING
Real32 &RubberBandCameraBase::getOrientationQuadratic(void)
{
    return _sfOrientationQuadratic.getValue();
}

OSG_GAMELIB_DLLMAPPING
const Real32 &RubberBandCameraBase::getOrientationQuadratic(void) const
{
    return _sfOrientationQuadratic.getValue();
}

OSG_GAMELIB_DLLMAPPING
void RubberBandCameraBase::setOrientationQuadratic(const Real32 &value)
{
    _sfOrientationQuadratic.setValue(value);
}




OSG_END_NAMESPACE

#include <OpenSG/OSGSFieldTypeDef.inl>
#include <OpenSG/OSGMFieldTypeDef.inl>

OSG_BEGIN_NAMESPACE

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldDataTraits<RubberBandCameraPtr>::_type("RubberBandCameraPtr", "CameraDecoratorPtr");
#endif

OSG_DLLEXPORT_SFIELD_DEF1(RubberBandCameraPtr, OSG_GAMELIB_DLLTMPLMAPPING);
OSG_DLLEXPORT_MFIELD_DEF1(RubberBandCameraPtr, OSG_GAMELIB_DLLTMPLMAPPING);


/*------------------------------------------------------------------------*/
/*                              cvs id's                                  */

#ifdef OSG_SGI_CC
#pragma set woff 1174
#endif

#ifdef OSG_LINUX_ICC
#pragma warning( disable : 177 )
#endif

namespace
{
    static Char8 cvsid_cpp       [] = "@(#)$Id: FCBaseTemplate_cpp.h,v 1.47 2006/03/17 17:03:19 pdaehne Exp $";
    static Char8 cvsid_hpp       [] = OSGRUBBERBANDCAMERABASE_HEADER_CVSID;
    static Char8 cvsid_inl       [] = OSGRUBBERBANDCAMERABASE_INLINE_CVSID;

    static Char8 cvsid_fields_hpp[] = OSGRUBBERBANDCAMERAFIELDS_HEADER_CVSID;
}

OSG_END_NAMESPACE

