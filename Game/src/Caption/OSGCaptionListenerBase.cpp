/*---------------------------------------------------------------------------*\
 *                     OpenSG ToolBox UserInterface                          *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                         www.vrac.iastate.edu                              *
 *                                                                           *
 *   Authors: David Kabala, Alden Peterson, Lee Zaniewski, Jonathan Flory    *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class CaptionListener!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#define OSG_COMPILECAPTIONLISTENERINST

#include <stdlib.h>
#include <stdio.h>

#include <OpenSG/OSGConfig.h>

#include "OSGCaptionListenerBase.h"
#include "OSGCaptionListener.h"


OSG_BEGIN_NAMESPACE

const OSG::BitVector  CaptionListenerBase::StartStampFieldMask = 
    (TypeTraits<BitVector>::One << CaptionListenerBase::StartStampFieldId);

const OSG::BitVector  CaptionListenerBase::EndStampFieldMask = 
    (TypeTraits<BitVector>::One << CaptionListenerBase::EndStampFieldId);

const OSG::BitVector  CaptionListenerBase::CurrentSegmentIndexFieldMask = 
    (TypeTraits<BitVector>::One << CaptionListenerBase::CurrentSegmentIndexFieldId);

const OSG::BitVector  CaptionListenerBase::CurrentSegmentEndStampFieldMask = 
    (TypeTraits<BitVector>::One << CaptionListenerBase::CurrentSegmentEndStampFieldId);

const OSG::BitVector  CaptionListenerBase::CaptionDialogSoundFieldMask = 
    (TypeTraits<BitVector>::One << CaptionListenerBase::CaptionDialogSoundFieldId);

const OSG::BitVector CaptionListenerBase::MTInfluenceMask = 
    (Inherited::MTInfluenceMask) | 
    (static_cast<BitVector>(0x0) << Inherited::NextFieldId); 


// Field descriptions

/*! \var Real32          CaptionListenerBase::_mfStartStamp
    
*/
/*! \var Real32          CaptionListenerBase::_mfEndStamp
    
*/
/*! \var UInt32          CaptionListenerBase::_sfCurrentSegmentIndex
    
*/
/*! \var Real32          CaptionListenerBase::_sfCurrentSegmentEndStamp
    
*/
/*! \var SoundPtr        CaptionListenerBase::_sfCaptionDialogSound
    
*/

//! CaptionListener description

FieldDescription *CaptionListenerBase::_desc[] = 
{
    new FieldDescription(MFReal32::getClassType(), 
                     "StartStamp", 
                     StartStampFieldId, StartStampFieldMask,
                     false,
                     (FieldAccessMethod) &CaptionListenerBase::getMFStartStamp),
    new FieldDescription(MFReal32::getClassType(), 
                     "EndStamp", 
                     EndStampFieldId, EndStampFieldMask,
                     false,
                     (FieldAccessMethod) &CaptionListenerBase::getMFEndStamp),
    new FieldDescription(SFUInt32::getClassType(), 
                     "CurrentSegmentIndex", 
                     CurrentSegmentIndexFieldId, CurrentSegmentIndexFieldMask,
                     false,
                     (FieldAccessMethod) &CaptionListenerBase::getSFCurrentSegmentIndex),
    new FieldDescription(SFReal32::getClassType(), 
                     "CurrentSegmentEndStamp", 
                     CurrentSegmentEndStampFieldId, CurrentSegmentEndStampFieldMask,
                     false,
                     (FieldAccessMethod) &CaptionListenerBase::getSFCurrentSegmentEndStamp),
    new FieldDescription(SFSoundPtr::getClassType(), 
                     "CaptionDialogSound", 
                     CaptionDialogSoundFieldId, CaptionDialogSoundFieldMask,
                     false,
                     (FieldAccessMethod) &CaptionListenerBase::getSFCaptionDialogSound)
};


FieldContainerType CaptionListenerBase::_type(
    "CaptionListener",
    "Caption",
    NULL,
    NULL, 
    CaptionListener::initMethod,
    _desc,
    sizeof(_desc));

//OSG_FIELD_CONTAINER_DEF(CaptionListenerBase, CaptionListenerPtr)

/*------------------------------ get -----------------------------------*/

FieldContainerType &CaptionListenerBase::getType(void) 
{
    return _type; 
} 

const FieldContainerType &CaptionListenerBase::getType(void) const 
{
    return _type;
} 


UInt32 CaptionListenerBase::getContainerSize(void) const 
{ 
    return sizeof(CaptionListener); 
}


#if !defined(OSG_FIXED_MFIELDSYNC)
void CaptionListenerBase::executeSync(      FieldContainer &other,
                                    const BitVector      &whichField)
{
    this->executeSyncImpl((CaptionListenerBase *) &other, whichField);
}
#else
void CaptionListenerBase::executeSync(      FieldContainer &other,
                                    const BitVector      &whichField,                                    const SyncInfo       &sInfo     )
{
    this->executeSyncImpl((CaptionListenerBase *) &other, whichField, sInfo);
}
void CaptionListenerBase::execBeginEdit(const BitVector &whichField, 
                                            UInt32     uiAspect,
                                            UInt32     uiContainerSize) 
{
    this->execBeginEditImpl(whichField, uiAspect, uiContainerSize);
}

void CaptionListenerBase::onDestroyAspect(UInt32 uiId, UInt32 uiAspect)
{
    Inherited::onDestroyAspect(uiId, uiAspect);

    _mfStartStamp.terminateShare(uiAspect, this->getContainerSize());
    _mfEndStamp.terminateShare(uiAspect, this->getContainerSize());
}
#endif

/*------------------------- constructors ----------------------------------*/

#ifdef OSG_WIN32_ICL
#pragma warning (disable : 383)
#endif

CaptionListenerBase::CaptionListenerBase(void) :
    _mfStartStamp             (), 
    _mfEndStamp               (), 
    _sfCurrentSegmentIndex    (), 
    _sfCurrentSegmentEndStamp (), 
    _sfCaptionDialogSound     (), 
    Inherited() 
{
}

#ifdef OSG_WIN32_ICL
#pragma warning (default : 383)
#endif

CaptionListenerBase::CaptionListenerBase(const CaptionListenerBase &source) :
    _mfStartStamp             (source._mfStartStamp             ), 
    _mfEndStamp               (source._mfEndStamp               ), 
    _sfCurrentSegmentIndex    (source._sfCurrentSegmentIndex    ), 
    _sfCurrentSegmentEndStamp (source._sfCurrentSegmentEndStamp ), 
    _sfCaptionDialogSound     (source._sfCaptionDialogSound     ), 
    Inherited                 (source)
{
}

/*-------------------------- destructors ----------------------------------*/

CaptionListenerBase::~CaptionListenerBase(void)
{
}

/*------------------------------ access -----------------------------------*/

UInt32 CaptionListenerBase::getBinSize(const BitVector &whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (StartStampFieldMask & whichField))
    {
        returnValue += _mfStartStamp.getBinSize();
    }

    if(FieldBits::NoField != (EndStampFieldMask & whichField))
    {
        returnValue += _mfEndStamp.getBinSize();
    }

    if(FieldBits::NoField != (CurrentSegmentIndexFieldMask & whichField))
    {
        returnValue += _sfCurrentSegmentIndex.getBinSize();
    }

    if(FieldBits::NoField != (CurrentSegmentEndStampFieldMask & whichField))
    {
        returnValue += _sfCurrentSegmentEndStamp.getBinSize();
    }

    if(FieldBits::NoField != (CaptionDialogSoundFieldMask & whichField))
    {
        returnValue += _sfCaptionDialogSound.getBinSize();
    }


    return returnValue;
}

void CaptionListenerBase::copyToBin(      BinaryDataHandler &pMem,
                                  const BitVector         &whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (StartStampFieldMask & whichField))
    {
        _mfStartStamp.copyToBin(pMem);
    }

    if(FieldBits::NoField != (EndStampFieldMask & whichField))
    {
        _mfEndStamp.copyToBin(pMem);
    }

    if(FieldBits::NoField != (CurrentSegmentIndexFieldMask & whichField))
    {
        _sfCurrentSegmentIndex.copyToBin(pMem);
    }

    if(FieldBits::NoField != (CurrentSegmentEndStampFieldMask & whichField))
    {
        _sfCurrentSegmentEndStamp.copyToBin(pMem);
    }

    if(FieldBits::NoField != (CaptionDialogSoundFieldMask & whichField))
    {
        _sfCaptionDialogSound.copyToBin(pMem);
    }


}

void CaptionListenerBase::copyFromBin(      BinaryDataHandler &pMem,
                                    const BitVector    &whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (StartStampFieldMask & whichField))
    {
        _mfStartStamp.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (EndStampFieldMask & whichField))
    {
        _mfEndStamp.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (CurrentSegmentIndexFieldMask & whichField))
    {
        _sfCurrentSegmentIndex.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (CurrentSegmentEndStampFieldMask & whichField))
    {
        _sfCurrentSegmentEndStamp.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (CaptionDialogSoundFieldMask & whichField))
    {
        _sfCaptionDialogSound.copyFromBin(pMem);
    }


}

#if !defined(OSG_FIXED_MFIELDSYNC)
void CaptionListenerBase::executeSyncImpl(      CaptionListenerBase *pOther,
                                        const BitVector         &whichField)
{

    Inherited::executeSyncImpl(pOther, whichField);

    if(FieldBits::NoField != (StartStampFieldMask & whichField))
        _mfStartStamp.syncWith(pOther->_mfStartStamp);

    if(FieldBits::NoField != (EndStampFieldMask & whichField))
        _mfEndStamp.syncWith(pOther->_mfEndStamp);

    if(FieldBits::NoField != (CurrentSegmentIndexFieldMask & whichField))
        _sfCurrentSegmentIndex.syncWith(pOther->_sfCurrentSegmentIndex);

    if(FieldBits::NoField != (CurrentSegmentEndStampFieldMask & whichField))
        _sfCurrentSegmentEndStamp.syncWith(pOther->_sfCurrentSegmentEndStamp);

    if(FieldBits::NoField != (CaptionDialogSoundFieldMask & whichField))
        _sfCaptionDialogSound.syncWith(pOther->_sfCaptionDialogSound);


}
#else
void CaptionListenerBase::executeSyncImpl(      CaptionListenerBase *pOther,
                                        const BitVector         &whichField,
                                        const SyncInfo          &sInfo      )
{

    Inherited::executeSyncImpl(pOther, whichField, sInfo);

    if(FieldBits::NoField != (CurrentSegmentIndexFieldMask & whichField))
        _sfCurrentSegmentIndex.syncWith(pOther->_sfCurrentSegmentIndex);

    if(FieldBits::NoField != (CurrentSegmentEndStampFieldMask & whichField))
        _sfCurrentSegmentEndStamp.syncWith(pOther->_sfCurrentSegmentEndStamp);

    if(FieldBits::NoField != (CaptionDialogSoundFieldMask & whichField))
        _sfCaptionDialogSound.syncWith(pOther->_sfCaptionDialogSound);


    if(FieldBits::NoField != (StartStampFieldMask & whichField))
        _mfStartStamp.syncWith(pOther->_mfStartStamp, sInfo);

    if(FieldBits::NoField != (EndStampFieldMask & whichField))
        _mfEndStamp.syncWith(pOther->_mfEndStamp, sInfo);


}

void CaptionListenerBase::execBeginEditImpl (const BitVector &whichField, 
                                                 UInt32     uiAspect,
                                                 UInt32     uiContainerSize)
{
    Inherited::execBeginEditImpl(whichField, uiAspect, uiContainerSize);

    if(FieldBits::NoField != (StartStampFieldMask & whichField))
        _mfStartStamp.beginEdit(uiAspect, uiContainerSize);

    if(FieldBits::NoField != (EndStampFieldMask & whichField))
        _mfEndStamp.beginEdit(uiAspect, uiContainerSize);

}
#endif



OSG_END_NAMESPACE

#include <OpenSG/OSGSFieldTypeDef.inl>
#include <OpenSG/OSGMFieldTypeDef.inl>

OSG_BEGIN_NAMESPACE

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldDataTraits<CaptionListenerPtr>::_type("CaptionListenerPtr", "CaptionPtr");
#endif

OSG_DLLEXPORT_SFIELD_DEF1(CaptionListenerPtr, OSG_GAMELIB_DLLTMPLMAPPING);
OSG_DLLEXPORT_MFIELD_DEF1(CaptionListenerPtr, OSG_GAMELIB_DLLTMPLMAPPING);


/*------------------------------------------------------------------------*/
/*                              cvs id's                                  */

#ifdef OSG_SGI_CC
#pragma set woff 1174
#endif

#ifdef OSG_LINUX_ICC
#pragma warning( disable : 177 )
#endif

namespace
{
    static Char8 cvsid_cpp       [] = "@(#)$Id: FCBaseTemplate_cpp.h,v 1.47 2006/03/17 17:03:19 pdaehne Exp $";
    static Char8 cvsid_hpp       [] = OSGCAPTIONLISTENERBASE_HEADER_CVSID;
    static Char8 cvsid_inl       [] = OSGCAPTIONLISTENERBASE_INLINE_CVSID;

    static Char8 cvsid_fields_hpp[] = OSGCAPTIONLISTENERFIELDS_HEADER_CVSID;
}

OSG_END_NAMESPACE

