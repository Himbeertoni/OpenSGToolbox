/*---------------------------------------------------------------------------*\
 *                     OpenSG ToolBox UserInterface                          *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                         www.vrac.iastate.edu                              *
 *                                                                           *
 *   Authors: David Kabala, Alden Peterson, Lee Zaniewski, Jonathan Flory    *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class MiniMap
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#ifndef _OSGMINIMAPBASE_H_
#define _OSGMINIMAPBASE_H_
#ifdef __sgi
#pragma once
#endif


#include <OpenSG/OSGConfig.h>
#include "OSGGameDef.h"

#include <OpenSG/OSGBaseTypes.h>
#include <OpenSG/OSGRefPtr.h>
#include <OpenSG/OSGCoredNodePtr.h>

#include <OpenSG/UserInterface/OSGContainer.h> // Parent

#include "MiniMap/OSGMiniMapTransformation.h" // Transformation type
#include "MiniMap/Indicators/OSGMiniMapIndicator.h" // Indicators type
#include "MiniMap/Indicators/OSGMiniMapIndicator.h" // ViewPointIndicator type
#include <OpenSG/OSGQuaternionFields.h> // MapOrientation type
#include <OpenSG/OSGBoolFields.h> // LockMapOrientation type
#include <OpenSG/OSGUInt32Fields.h> // MapScale type
#include <OpenSG/OSGVec3fFields.h> // MapScaleParameter type
#include <OpenSG/OSGNodeFields.h> // MapScene type
#include <OpenSG/OSGVec2fFields.h> // UnlockedMapSize type

#include "OSGMiniMapFields.h"

OSG_BEGIN_NAMESPACE

class MiniMap;
class BinaryDataHandler;

//! \brief MiniMap Base Class.

class OSG_GAMELIB_DLLMAPPING MiniMapBase : public Container
{
  private:

    typedef Container    Inherited;

    /*==========================  PUBLIC  =================================*/
  public:

    typedef MiniMapPtr  Ptr;

    enum
    {
        TransformationFieldId     = Inherited::NextFieldId,
        IndicatorsFieldId         = TransformationFieldId     + 1,
        ViewPointIndicatorFieldId = IndicatorsFieldId         + 1,
        MapOrientationFieldId     = ViewPointIndicatorFieldId + 1,
        LockMapOrientationFieldId = MapOrientationFieldId     + 1,
        MapScaleFieldId           = LockMapOrientationFieldId + 1,
        MapScaleParameterFieldId  = MapScaleFieldId           + 1,
        MapSceneFieldId           = MapScaleParameterFieldId  + 1,
        UnlockedMapSizeFieldId    = MapSceneFieldId           + 1,
        NextFieldId               = UnlockedMapSizeFieldId    + 1
    };

    static const OSG::BitVector TransformationFieldMask;
    static const OSG::BitVector IndicatorsFieldMask;
    static const OSG::BitVector ViewPointIndicatorFieldMask;
    static const OSG::BitVector MapOrientationFieldMask;
    static const OSG::BitVector LockMapOrientationFieldMask;
    static const OSG::BitVector MapScaleFieldMask;
    static const OSG::BitVector MapScaleParameterFieldMask;
    static const OSG::BitVector MapSceneFieldMask;
    static const OSG::BitVector UnlockedMapSizeFieldMask;


    static const OSG::BitVector MTInfluenceMask;

    /*---------------------------------------------------------------------*/
    /*! \name                    Class Get                                 */
    /*! \{                                                                 */

    static        FieldContainerType &getClassType    (void); 
    static        UInt32              getClassTypeId  (void); 

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                FieldContainer Get                            */
    /*! \{                                                                 */

    virtual       FieldContainerType &getType  (void); 
    virtual const FieldContainerType &getType  (void) const; 

    virtual       UInt32              getContainerSize(void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Get                                 */
    /*! \{                                                                 */

           SFMiniMapTransformationPtr *getSFTransformation (void);
           MFMiniMapIndicatorPtr *getMFIndicators     (void);
           SFMiniMapIndicatorPtr *getSFViewPointIndicator(void);
           SFQuaternion        *getSFMapOrientation (void);
           SFBool              *getSFLockMapOrientation(void);
           SFUInt32            *getSFMapScale       (void);
           SFVec3f             *getSFMapScaleParameter(void);
           SFNodePtr           *getSFMapScene       (void);
           SFVec2f             *getSFUnlockedMapSize(void);

           MiniMapTransformationPtr &getTransformation (void);
     const MiniMapTransformationPtr &getTransformation (void) const;
           MiniMapIndicatorPtr &getViewPointIndicator(void);
     const MiniMapIndicatorPtr &getViewPointIndicator(void) const;
           Quaternion          &getMapOrientation (void);
     const Quaternion          &getMapOrientation (void) const;
           bool                &getLockMapOrientation(void);
     const bool                &getLockMapOrientation(void) const;
           UInt32              &getMapScale       (void);
     const UInt32              &getMapScale       (void) const;
           Vec3f               &getMapScaleParameter(void);
     const Vec3f               &getMapScaleParameter(void) const;
           NodePtr             &getMapScene       (void);
     const NodePtr             &getMapScene       (void) const;
           Vec2f               &getUnlockedMapSize(void);
     const Vec2f               &getUnlockedMapSize(void) const;
           MiniMapIndicatorPtr &getIndicators     (const UInt32 index);
           MFMiniMapIndicatorPtr &getIndicators     (void);
     const MFMiniMapIndicatorPtr &getIndicators     (void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Set                                 */
    /*! \{                                                                 */

     void setTransformation ( const MiniMapTransformationPtr &value );
     void setViewPointIndicator( const MiniMapIndicatorPtr &value );
     void setMapOrientation ( const Quaternion &value );
     void setLockMapOrientation( const bool &value );
     void setMapScale       ( const UInt32 &value );
     void setMapScaleParameter( const Vec3f &value );
     void setMapScene       ( const NodePtr &value );
     void setUnlockedMapSize( const Vec2f &value );

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Binary Access                              */
    /*! \{                                                                 */

    virtual UInt32 getBinSize (const BitVector         &whichField);
    virtual void   copyToBin  (      BinaryDataHandler &pMem,
                               const BitVector         &whichField);
    virtual void   copyFromBin(      BinaryDataHandler &pMem,
                               const BitVector         &whichField);


    /*! \}                                                                 */
    /*=========================  PROTECTED  ===============================*/
  protected:

    /*---------------------------------------------------------------------*/
    /*! \name                      Fields                                  */
    /*! \{                                                                 */

    SFMiniMapTransformationPtr   _sfTransformation;
    MFMiniMapIndicatorPtr   _mfIndicators;
    SFMiniMapIndicatorPtr   _sfViewPointIndicator;
    SFQuaternion        _sfMapOrientation;
    SFBool              _sfLockMapOrientation;
    SFUInt32            _sfMapScale;
    SFVec3f             _sfMapScaleParameter;
    SFNodePtr           _sfMapScene;
    SFVec2f             _sfUnlockedMapSize;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Constructors                               */
    /*! \{                                                                 */

    MiniMapBase(void);
    MiniMapBase(const MiniMapBase &source);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Destructors                                */
    /*! \{                                                                 */

    virtual ~MiniMapBase(void); 

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

#if !defined(OSG_FIXED_MFIELDSYNC)
    void executeSyncImpl(      MiniMapBase *pOther,
                         const BitVector         &whichField);

    virtual void   executeSync(      FieldContainer    &other,
                               const BitVector         &whichField);
#else
    void executeSyncImpl(      MiniMapBase *pOther,
                         const BitVector         &whichField,
                         const SyncInfo          &sInfo     );

    virtual void   executeSync(      FieldContainer    &other,
                               const BitVector         &whichField,
                               const SyncInfo          &sInfo);

    virtual void execBeginEdit     (const BitVector &whichField,
                                          UInt32     uiAspect,
                                          UInt32     uiContainerSize);

            void execBeginEditImpl (const BitVector &whichField,
                                          UInt32     uiAspect,
                                          UInt32     uiContainerSize);

    virtual void onDestroyAspect(UInt32 uiId, UInt32 uiAspect);
#endif

    /*! \}                                                                 */
    /*==========================  PRIVATE  ================================*/
  private:

    friend class FieldContainer;

    static FieldDescription   *_desc[];
    static FieldContainerType  _type;


    // prohibit default functions (move to 'public' if you need one)
    void operator =(const MiniMapBase &source);
};

//---------------------------------------------------------------------------
//   Exported Types
//---------------------------------------------------------------------------


typedef MiniMapBase *MiniMapBaseP;

typedef osgIF<MiniMapBase::isNodeCore,
              CoredNodePtr<MiniMap>,
              FieldContainer::attempt_to_create_CoredNodePtr_on_non_NodeCore_FC
              >::_IRet MiniMapNodePtr;

typedef RefPtr<MiniMapPtr> MiniMapRefPtr;

OSG_END_NAMESPACE

#define OSGMINIMAPBASE_HEADER_CVSID "@(#)$Id: FCBaseTemplate_h.h,v 1.40 2005/07/20 00:10:14 vossg Exp $"

#endif /* _OSGMINIMAPBASE_H_ */
