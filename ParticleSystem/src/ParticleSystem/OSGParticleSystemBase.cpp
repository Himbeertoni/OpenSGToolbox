/*---------------------------------------------------------------------------*\
 *                     OpenSG ToolBox UserInterface                          *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                         www.vrac.iastate.edu                              *
 *                                                                           *
 *   Authors: David Kabala, Alden Peterson, Lee Zaniewski, Jonathan Flory    *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class ParticleSystem!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#define OSG_COMPILEPARTICLESYSTEMINST

#include <stdlib.h>
#include <stdio.h>

#include <OpenSG/OSGConfig.h>

#include "OSGParticleSystemBase.h"
#include "OSGParticleSystem.h"


OSG_BEGIN_NAMESPACE

const OSG::BitVector  ParticleSystemBase::PositionsFieldMask = 
    (TypeTraits<BitVector>::One << ParticleSystemBase::PositionsFieldId);

const OSG::BitVector  ParticleSystemBase::SecPositionsFieldMask = 
    (TypeTraits<BitVector>::One << ParticleSystemBase::SecPositionsFieldId);

const OSG::BitVector  ParticleSystemBase::NormalsFieldMask = 
    (TypeTraits<BitVector>::One << ParticleSystemBase::NormalsFieldId);

const OSG::BitVector  ParticleSystemBase::ColorsFieldMask = 
    (TypeTraits<BitVector>::One << ParticleSystemBase::ColorsFieldId);

const OSG::BitVector  ParticleSystemBase::SizesFieldMask = 
    (TypeTraits<BitVector>::One << ParticleSystemBase::SizesFieldId);

const OSG::BitVector  ParticleSystemBase::LifespansFieldMask = 
    (TypeTraits<BitVector>::One << ParticleSystemBase::LifespansFieldId);

const OSG::BitVector  ParticleSystemBase::AgesFieldMask = 
    (TypeTraits<BitVector>::One << ParticleSystemBase::AgesFieldId);

const OSG::BitVector  ParticleSystemBase::VelocitiesFieldMask = 
    (TypeTraits<BitVector>::One << ParticleSystemBase::VelocitiesFieldId);

const OSG::BitVector  ParticleSystemBase::SecVelocitiesFieldMask = 
    (TypeTraits<BitVector>::One << ParticleSystemBase::SecVelocitiesFieldId);

const OSG::BitVector  ParticleSystemBase::AccelerationsFieldMask = 
    (TypeTraits<BitVector>::One << ParticleSystemBase::AccelerationsFieldId);

const OSG::BitVector  ParticleSystemBase::PropertiesFieldMask = 
    (TypeTraits<BitVector>::One << ParticleSystemBase::PropertiesFieldId);

const OSG::BitVector  ParticleSystemBase::DynamicFieldMask = 
    (TypeTraits<BitVector>::One << ParticleSystemBase::DynamicFieldId);

const OSG::BitVector  ParticleSystemBase::GeneratorsFieldMask = 
    (TypeTraits<BitVector>::One << ParticleSystemBase::GeneratorsFieldId);

const OSG::BitVector  ParticleSystemBase::EffectorsFieldMask = 
    (TypeTraits<BitVector>::One << ParticleSystemBase::EffectorsFieldId);

const OSG::BitVector  ParticleSystemBase::SystemEffectorsFieldMask = 
    (TypeTraits<BitVector>::One << ParticleSystemBase::SystemEffectorsFieldId);

const OSG::BitVector ParticleSystemBase::MTInfluenceMask = 
    (Inherited::MTInfluenceMask) | 
    (static_cast<BitVector>(0x0) << Inherited::NextFieldId); 


// Field descriptions

/*! \var Pnt3fList       ParticleSystemBase::_sfPositions
    The positions of the particles. This is the primary defining         information for a particle.
*/
/*! \var Pnt3fList       ParticleSystemBase::_sfSecPositions
    The secondary position of the particle. This information is only used         by a few rendering modes, e.g. the streak mode. Usually it represents         the particle's last position.
*/
/*! \var Vec3fList       ParticleSystemBase::_sfNormals
    Most particles will be automatically aligned to the view         direction. If normals are set they will be used to define the         direction the particles are facing.
*/
/*! \var Color4fList     ParticleSystemBase::_sfColors
    The particle colors (optional).
*/
/*! \var Vec3fList       ParticleSystemBase::_sfSizes
    The particle sizes. If not set (1,1,1) will be used, if only one entry         is set, it will be used for all particles. If the number of sizes if         equal to the number of positions every particle will get its own size.         Most modes only use the X coordinate of the vector. Particles with size 0         are ignored.
*/
/*! \var Real32List      ParticleSystemBase::_sfLifespans
    The particle lifespan. If set to less than 0, then the particle is considered eternal.
*/
/*! \var Real32List      ParticleSystemBase::_sfAges
    The particle age.
*/
/*! \var Vec3fList       ParticleSystemBase::_sfVelocities
    The particle velocities. If not set (0,0,0) will be used, if only one entry         is set, it will be used for all particles. If the number of velocities is         equal to the number of positions every particle will get its own velocity.         If no velocities are present, then the position will not be updated regarding velocity.
*/
/*! \var Vec3fList       ParticleSystemBase::_sfSecVelocities
    The particle secVelocities. This is the velocity of the particle last update.  This is used         for the VelocityDirQuads draw mode.
*/
/*! \var Vec3fList       ParticleSystemBase::_sfAccelerations
    The particle accelerations If not set (0,0,0) will be used, if only one entry         is set, it will be used for all particles. If the number of accelerations is         equal to the number of positions every particle will get its own acceleration.         If no accelerations are present, then the position will not be updated regarding acceleration.
*/
/*! \var UInt64List      ParticleSystemBase::_sfProperties
    
*/
/*! \var bool            ParticleSystemBase::_sfDynamic
    Hint to tell the system whether particles are expected to change position or         not. Is used to speed up sorting.
*/
/*! \var ParticleGeneratorPtr ParticleSystemBase::_mfGenerators
    List of Particle Generators.
*/
/*! \var ParticleEffectorPtr ParticleSystemBase::_mfEffectors
    List of Particle Effectors.  These are applied on a per particle basis.
*/
/*! \var ParticleSystemEffectorPtr ParticleSystemBase::_mfSystemEffectors
    List of Particle System Effectors.  These are applied to the entire system of particles and can allow for particle-to-particle interaction.
*/

//! ParticleSystem description

FieldDescription *ParticleSystemBase::_desc[] = 
{
    new FieldDescription(SFPnt3fList::getClassType(), 
                     "Positions", 
                     PositionsFieldId, PositionsFieldMask,
                     false,
                     (FieldAccessMethod) &ParticleSystemBase::getSFPositions),
    new FieldDescription(SFPnt3fList::getClassType(), 
                     "SecPositions", 
                     SecPositionsFieldId, SecPositionsFieldMask,
                     false,
                     (FieldAccessMethod) &ParticleSystemBase::getSFSecPositions),
    new FieldDescription(SFVec3fList::getClassType(), 
                     "Normals", 
                     NormalsFieldId, NormalsFieldMask,
                     false,
                     (FieldAccessMethod) &ParticleSystemBase::getSFNormals),
    new FieldDescription(SFColor4fList::getClassType(), 
                     "Colors", 
                     ColorsFieldId, ColorsFieldMask,
                     false,
                     (FieldAccessMethod) &ParticleSystemBase::getSFColors),
    new FieldDescription(SFVec3fList::getClassType(), 
                     "Sizes", 
                     SizesFieldId, SizesFieldMask,
                     false,
                     (FieldAccessMethod) &ParticleSystemBase::getSFSizes),
    new FieldDescription(SFReal32List::getClassType(), 
                     "Lifespans", 
                     LifespansFieldId, LifespansFieldMask,
                     false,
                     (FieldAccessMethod) &ParticleSystemBase::getSFLifespans),
    new FieldDescription(SFReal32List::getClassType(), 
                     "Ages", 
                     AgesFieldId, AgesFieldMask,
                     false,
                     (FieldAccessMethod) &ParticleSystemBase::getSFAges),
    new FieldDescription(SFVec3fList::getClassType(), 
                     "Velocities", 
                     VelocitiesFieldId, VelocitiesFieldMask,
                     false,
                     (FieldAccessMethod) &ParticleSystemBase::getSFVelocities),
    new FieldDescription(SFVec3fList::getClassType(), 
                     "SecVelocities", 
                     SecVelocitiesFieldId, SecVelocitiesFieldMask,
                     false,
                     (FieldAccessMethod) &ParticleSystemBase::getSFSecVelocities),
    new FieldDescription(SFVec3fList::getClassType(), 
                     "Accelerations", 
                     AccelerationsFieldId, AccelerationsFieldMask,
                     false,
                     (FieldAccessMethod) &ParticleSystemBase::getSFAccelerations),
    new FieldDescription(SFUInt64List::getClassType(), 
                     "Properties", 
                     PropertiesFieldId, PropertiesFieldMask,
                     false,
                     (FieldAccessMethod) &ParticleSystemBase::getSFProperties),
    new FieldDescription(SFBool::getClassType(), 
                     "Dynamic", 
                     DynamicFieldId, DynamicFieldMask,
                     false,
                     (FieldAccessMethod) &ParticleSystemBase::getSFDynamic),
    new FieldDescription(MFParticleGeneratorPtr::getClassType(), 
                     "Generators", 
                     GeneratorsFieldId, GeneratorsFieldMask,
                     false,
                     (FieldAccessMethod) &ParticleSystemBase::getMFGenerators),
    new FieldDescription(MFParticleEffectorPtr::getClassType(), 
                     "Effectors", 
                     EffectorsFieldId, EffectorsFieldMask,
                     false,
                     (FieldAccessMethod) &ParticleSystemBase::getMFEffectors),
    new FieldDescription(MFParticleSystemEffectorPtr::getClassType(), 
                     "SystemEffectors", 
                     SystemEffectorsFieldId, SystemEffectorsFieldMask,
                     false,
                     (FieldAccessMethod) &ParticleSystemBase::getMFSystemEffectors)
};


FieldContainerType ParticleSystemBase::_type(
    "ParticleSystem",
    "AttachmentContainer",
    NULL,
    (PrototypeCreateF) &ParticleSystemBase::createEmpty,
    ParticleSystem::initMethod,
    _desc,
    sizeof(_desc));

//OSG_FIELD_CONTAINER_DEF(ParticleSystemBase, ParticleSystemPtr)

/*------------------------------ get -----------------------------------*/

FieldContainerType &ParticleSystemBase::getType(void) 
{
    return _type; 
} 

const FieldContainerType &ParticleSystemBase::getType(void) const 
{
    return _type;
} 


FieldContainerPtr ParticleSystemBase::shallowCopy(void) const 
{ 
    ParticleSystemPtr returnValue; 

    newPtr(returnValue, dynamic_cast<const ParticleSystem *>(this)); 

    return returnValue; 
}

UInt32 ParticleSystemBase::getContainerSize(void) const 
{ 
    return sizeof(ParticleSystem); 
}


#if !defined(OSG_FIXED_MFIELDSYNC)
void ParticleSystemBase::executeSync(      FieldContainer &other,
                                    const BitVector      &whichField)
{
    this->executeSyncImpl((ParticleSystemBase *) &other, whichField);
}
#else
void ParticleSystemBase::executeSync(      FieldContainer &other,
                                    const BitVector      &whichField,                                    const SyncInfo       &sInfo     )
{
    this->executeSyncImpl((ParticleSystemBase *) &other, whichField, sInfo);
}
void ParticleSystemBase::execBeginEdit(const BitVector &whichField, 
                                            UInt32     uiAspect,
                                            UInt32     uiContainerSize) 
{
    this->execBeginEditImpl(whichField, uiAspect, uiContainerSize);
}

void ParticleSystemBase::onDestroyAspect(UInt32 uiId, UInt32 uiAspect)
{
    Inherited::onDestroyAspect(uiId, uiAspect);

    _mfGenerators.terminateShare(uiAspect, this->getContainerSize());
    _mfEffectors.terminateShare(uiAspect, this->getContainerSize());
    _mfSystemEffectors.terminateShare(uiAspect, this->getContainerSize());
}
#endif

/*------------------------- constructors ----------------------------------*/

#ifdef OSG_WIN32_ICL
#pragma warning (disable : 383)
#endif

ParticleSystemBase::ParticleSystemBase(void) :
    _sfPositions              (), 
    _sfSecPositions           (), 
    _sfNormals                (), 
    _sfColors                 (), 
    _sfSizes                  (), 
    _sfLifespans              (), 
    _sfAges                   (), 
    _sfVelocities             (), 
    _sfSecVelocities          (), 
    _sfAccelerations          (), 
    _sfProperties             (), 
    _sfDynamic                (bool(true)), 
    _mfGenerators             (), 
    _mfEffectors              (), 
    _mfSystemEffectors        (), 
    Inherited() 
{
}

#ifdef OSG_WIN32_ICL
#pragma warning (default : 383)
#endif

ParticleSystemBase::ParticleSystemBase(const ParticleSystemBase &source) :
    _sfPositions              (source._sfPositions              ), 
    _sfSecPositions           (source._sfSecPositions           ), 
    _sfNormals                (source._sfNormals                ), 
    _sfColors                 (source._sfColors                 ), 
    _sfSizes                  (source._sfSizes                  ), 
    _sfLifespans              (source._sfLifespans              ), 
    _sfAges                   (source._sfAges                   ), 
    _sfVelocities             (source._sfVelocities             ), 
    _sfSecVelocities          (source._sfSecVelocities          ), 
    _sfAccelerations          (source._sfAccelerations          ), 
    _sfProperties             (source._sfProperties             ), 
    _sfDynamic                (source._sfDynamic                ), 
    _mfGenerators             (source._mfGenerators             ), 
    _mfEffectors              (source._mfEffectors              ), 
    _mfSystemEffectors        (source._mfSystemEffectors        ), 
    Inherited                 (source)
{
}

/*-------------------------- destructors ----------------------------------*/

ParticleSystemBase::~ParticleSystemBase(void)
{
}

/*------------------------------ access -----------------------------------*/

UInt32 ParticleSystemBase::getBinSize(const BitVector &whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (PositionsFieldMask & whichField))
    {
        returnValue += _sfPositions.getBinSize();
    }

    if(FieldBits::NoField != (SecPositionsFieldMask & whichField))
    {
        returnValue += _sfSecPositions.getBinSize();
    }

    if(FieldBits::NoField != (NormalsFieldMask & whichField))
    {
        returnValue += _sfNormals.getBinSize();
    }

    if(FieldBits::NoField != (ColorsFieldMask & whichField))
    {
        returnValue += _sfColors.getBinSize();
    }

    if(FieldBits::NoField != (SizesFieldMask & whichField))
    {
        returnValue += _sfSizes.getBinSize();
    }

    if(FieldBits::NoField != (LifespansFieldMask & whichField))
    {
        returnValue += _sfLifespans.getBinSize();
    }

    if(FieldBits::NoField != (AgesFieldMask & whichField))
    {
        returnValue += _sfAges.getBinSize();
    }

    if(FieldBits::NoField != (VelocitiesFieldMask & whichField))
    {
        returnValue += _sfVelocities.getBinSize();
    }

    if(FieldBits::NoField != (SecVelocitiesFieldMask & whichField))
    {
        returnValue += _sfSecVelocities.getBinSize();
    }

    if(FieldBits::NoField != (AccelerationsFieldMask & whichField))
    {
        returnValue += _sfAccelerations.getBinSize();
    }

    if(FieldBits::NoField != (PropertiesFieldMask & whichField))
    {
        returnValue += _sfProperties.getBinSize();
    }

    if(FieldBits::NoField != (DynamicFieldMask & whichField))
    {
        returnValue += _sfDynamic.getBinSize();
    }

    if(FieldBits::NoField != (GeneratorsFieldMask & whichField))
    {
        returnValue += _mfGenerators.getBinSize();
    }

    if(FieldBits::NoField != (EffectorsFieldMask & whichField))
    {
        returnValue += _mfEffectors.getBinSize();
    }

    if(FieldBits::NoField != (SystemEffectorsFieldMask & whichField))
    {
        returnValue += _mfSystemEffectors.getBinSize();
    }


    return returnValue;
}

void ParticleSystemBase::copyToBin(      BinaryDataHandler &pMem,
                                  const BitVector         &whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (PositionsFieldMask & whichField))
    {
        _sfPositions.copyToBin(pMem);
    }

    if(FieldBits::NoField != (SecPositionsFieldMask & whichField))
    {
        _sfSecPositions.copyToBin(pMem);
    }

    if(FieldBits::NoField != (NormalsFieldMask & whichField))
    {
        _sfNormals.copyToBin(pMem);
    }

    if(FieldBits::NoField != (ColorsFieldMask & whichField))
    {
        _sfColors.copyToBin(pMem);
    }

    if(FieldBits::NoField != (SizesFieldMask & whichField))
    {
        _sfSizes.copyToBin(pMem);
    }

    if(FieldBits::NoField != (LifespansFieldMask & whichField))
    {
        _sfLifespans.copyToBin(pMem);
    }

    if(FieldBits::NoField != (AgesFieldMask & whichField))
    {
        _sfAges.copyToBin(pMem);
    }

    if(FieldBits::NoField != (VelocitiesFieldMask & whichField))
    {
        _sfVelocities.copyToBin(pMem);
    }

    if(FieldBits::NoField != (SecVelocitiesFieldMask & whichField))
    {
        _sfSecVelocities.copyToBin(pMem);
    }

    if(FieldBits::NoField != (AccelerationsFieldMask & whichField))
    {
        _sfAccelerations.copyToBin(pMem);
    }

    if(FieldBits::NoField != (PropertiesFieldMask & whichField))
    {
        _sfProperties.copyToBin(pMem);
    }

    if(FieldBits::NoField != (DynamicFieldMask & whichField))
    {
        _sfDynamic.copyToBin(pMem);
    }

    if(FieldBits::NoField != (GeneratorsFieldMask & whichField))
    {
        _mfGenerators.copyToBin(pMem);
    }

    if(FieldBits::NoField != (EffectorsFieldMask & whichField))
    {
        _mfEffectors.copyToBin(pMem);
    }

    if(FieldBits::NoField != (SystemEffectorsFieldMask & whichField))
    {
        _mfSystemEffectors.copyToBin(pMem);
    }


}

void ParticleSystemBase::copyFromBin(      BinaryDataHandler &pMem,
                                    const BitVector    &whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (PositionsFieldMask & whichField))
    {
        _sfPositions.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (SecPositionsFieldMask & whichField))
    {
        _sfSecPositions.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (NormalsFieldMask & whichField))
    {
        _sfNormals.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (ColorsFieldMask & whichField))
    {
        _sfColors.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (SizesFieldMask & whichField))
    {
        _sfSizes.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (LifespansFieldMask & whichField))
    {
        _sfLifespans.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (AgesFieldMask & whichField))
    {
        _sfAges.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (VelocitiesFieldMask & whichField))
    {
        _sfVelocities.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (SecVelocitiesFieldMask & whichField))
    {
        _sfSecVelocities.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (AccelerationsFieldMask & whichField))
    {
        _sfAccelerations.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (PropertiesFieldMask & whichField))
    {
        _sfProperties.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (DynamicFieldMask & whichField))
    {
        _sfDynamic.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (GeneratorsFieldMask & whichField))
    {
        _mfGenerators.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (EffectorsFieldMask & whichField))
    {
        _mfEffectors.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (SystemEffectorsFieldMask & whichField))
    {
        _mfSystemEffectors.copyFromBin(pMem);
    }


}

#if !defined(OSG_FIXED_MFIELDSYNC)
void ParticleSystemBase::executeSyncImpl(      ParticleSystemBase *pOther,
                                        const BitVector         &whichField)
{

    Inherited::executeSyncImpl(pOther, whichField);

    if(FieldBits::NoField != (PositionsFieldMask & whichField))
        _sfPositions.syncWith(pOther->_sfPositions);

    if(FieldBits::NoField != (SecPositionsFieldMask & whichField))
        _sfSecPositions.syncWith(pOther->_sfSecPositions);

    if(FieldBits::NoField != (NormalsFieldMask & whichField))
        _sfNormals.syncWith(pOther->_sfNormals);

    if(FieldBits::NoField != (ColorsFieldMask & whichField))
        _sfColors.syncWith(pOther->_sfColors);

    if(FieldBits::NoField != (SizesFieldMask & whichField))
        _sfSizes.syncWith(pOther->_sfSizes);

    if(FieldBits::NoField != (LifespansFieldMask & whichField))
        _sfLifespans.syncWith(pOther->_sfLifespans);

    if(FieldBits::NoField != (AgesFieldMask & whichField))
        _sfAges.syncWith(pOther->_sfAges);

    if(FieldBits::NoField != (VelocitiesFieldMask & whichField))
        _sfVelocities.syncWith(pOther->_sfVelocities);

    if(FieldBits::NoField != (SecVelocitiesFieldMask & whichField))
        _sfSecVelocities.syncWith(pOther->_sfSecVelocities);

    if(FieldBits::NoField != (AccelerationsFieldMask & whichField))
        _sfAccelerations.syncWith(pOther->_sfAccelerations);

    if(FieldBits::NoField != (PropertiesFieldMask & whichField))
        _sfProperties.syncWith(pOther->_sfProperties);

    if(FieldBits::NoField != (DynamicFieldMask & whichField))
        _sfDynamic.syncWith(pOther->_sfDynamic);

    if(FieldBits::NoField != (GeneratorsFieldMask & whichField))
        _mfGenerators.syncWith(pOther->_mfGenerators);

    if(FieldBits::NoField != (EffectorsFieldMask & whichField))
        _mfEffectors.syncWith(pOther->_mfEffectors);

    if(FieldBits::NoField != (SystemEffectorsFieldMask & whichField))
        _mfSystemEffectors.syncWith(pOther->_mfSystemEffectors);


}
#else
void ParticleSystemBase::executeSyncImpl(      ParticleSystemBase *pOther,
                                        const BitVector         &whichField,
                                        const SyncInfo          &sInfo      )
{

    Inherited::executeSyncImpl(pOther, whichField, sInfo);

    if(FieldBits::NoField != (PositionsFieldMask & whichField))
        _sfPositions.syncWith(pOther->_sfPositions);

    if(FieldBits::NoField != (SecPositionsFieldMask & whichField))
        _sfSecPositions.syncWith(pOther->_sfSecPositions);

    if(FieldBits::NoField != (NormalsFieldMask & whichField))
        _sfNormals.syncWith(pOther->_sfNormals);

    if(FieldBits::NoField != (ColorsFieldMask & whichField))
        _sfColors.syncWith(pOther->_sfColors);

    if(FieldBits::NoField != (SizesFieldMask & whichField))
        _sfSizes.syncWith(pOther->_sfSizes);

    if(FieldBits::NoField != (LifespansFieldMask & whichField))
        _sfLifespans.syncWith(pOther->_sfLifespans);

    if(FieldBits::NoField != (AgesFieldMask & whichField))
        _sfAges.syncWith(pOther->_sfAges);

    if(FieldBits::NoField != (VelocitiesFieldMask & whichField))
        _sfVelocities.syncWith(pOther->_sfVelocities);

    if(FieldBits::NoField != (SecVelocitiesFieldMask & whichField))
        _sfSecVelocities.syncWith(pOther->_sfSecVelocities);

    if(FieldBits::NoField != (AccelerationsFieldMask & whichField))
        _sfAccelerations.syncWith(pOther->_sfAccelerations);

    if(FieldBits::NoField != (PropertiesFieldMask & whichField))
        _sfProperties.syncWith(pOther->_sfProperties);

    if(FieldBits::NoField != (DynamicFieldMask & whichField))
        _sfDynamic.syncWith(pOther->_sfDynamic);


    if(FieldBits::NoField != (GeneratorsFieldMask & whichField))
        _mfGenerators.syncWith(pOther->_mfGenerators, sInfo);

    if(FieldBits::NoField != (EffectorsFieldMask & whichField))
        _mfEffectors.syncWith(pOther->_mfEffectors, sInfo);

    if(FieldBits::NoField != (SystemEffectorsFieldMask & whichField))
        _mfSystemEffectors.syncWith(pOther->_mfSystemEffectors, sInfo);


}

void ParticleSystemBase::execBeginEditImpl (const BitVector &whichField, 
                                                 UInt32     uiAspect,
                                                 UInt32     uiContainerSize)
{
    Inherited::execBeginEditImpl(whichField, uiAspect, uiContainerSize);

    if(FieldBits::NoField != (GeneratorsFieldMask & whichField))
        _mfGenerators.beginEdit(uiAspect, uiContainerSize);

    if(FieldBits::NoField != (EffectorsFieldMask & whichField))
        _mfEffectors.beginEdit(uiAspect, uiContainerSize);

    if(FieldBits::NoField != (SystemEffectorsFieldMask & whichField))
        _mfSystemEffectors.beginEdit(uiAspect, uiContainerSize);

}
#endif



OSG_END_NAMESPACE

#include <OpenSG/OSGSFieldTypeDef.inl>
#include <OpenSG/OSGMFieldTypeDef.inl>

OSG_BEGIN_NAMESPACE

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldDataTraits<ParticleSystemPtr>::_type("ParticleSystemPtr", "AttachmentContainerPtr");
#endif

OSG_DLLEXPORT_SFIELD_DEF1(ParticleSystemPtr, OSG_PARTICLESYSTEMLIB_DLLTMPLMAPPING);
OSG_DLLEXPORT_MFIELD_DEF1(ParticleSystemPtr, OSG_PARTICLESYSTEMLIB_DLLTMPLMAPPING);


/*------------------------------------------------------------------------*/
/*                              cvs id's                                  */

#ifdef OSG_SGI_CC
#pragma set woff 1174
#endif

#ifdef OSG_LINUX_ICC
#pragma warning( disable : 177 )
#endif

namespace
{
    static Char8 cvsid_cpp       [] = "@(#)$Id: FCBaseTemplate_cpp.h,v 1.47 2006/03/17 17:03:19 pdaehne Exp $";
    static Char8 cvsid_hpp       [] = OSGPARTICLESYSTEMBASE_HEADER_CVSID;
    static Char8 cvsid_inl       [] = OSGPARTICLESYSTEMBASE_INLINE_CVSID;

    static Char8 cvsid_fields_hpp[] = OSGPARTICLESYSTEMFIELDS_HEADER_CVSID;
}

OSG_END_NAMESPACE

