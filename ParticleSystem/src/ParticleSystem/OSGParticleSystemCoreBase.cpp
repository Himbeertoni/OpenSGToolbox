/*---------------------------------------------------------------------------*\
 *                     OpenSG ToolBox UserInterface                          *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                         www.vrac.iastate.edu                              *
 *                                                                           *
 *   Authors: David Kabala, Alden Peterson, Lee Zaniewski, Jonathan Flory    *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class ParticleSystemCore!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#define OSG_COMPILEPARTICLESYSTEMCOREINST

#include <stdlib.h>
#include <stdio.h>

#include <OpenSG/OSGConfig.h>

#include "OSGParticleSystemCoreBase.h"
#include "OSGParticleSystemCore.h"


OSG_BEGIN_NAMESPACE

const OSG::BitVector  ParticleSystemCoreBase::SortingModeFieldMask = 
    (TypeTraits<BitVector>::One << ParticleSystemCoreBase::SortingModeFieldId);

const OSG::BitVector  ParticleSystemCoreBase::SystemFieldMask = 
    (TypeTraits<BitVector>::One << ParticleSystemCoreBase::SystemFieldId);

const OSG::BitVector  ParticleSystemCoreBase::DrawerFieldMask = 
    (TypeTraits<BitVector>::One << ParticleSystemCoreBase::DrawerFieldId);

const OSG::BitVector ParticleSystemCoreBase::MTInfluenceMask = 
    (Inherited::MTInfluenceMask) | 
    (static_cast<BitVector>(0x0) << Inherited::NextFieldId); 


// Field descriptions

/*! \var UInt32          ParticleSystemCoreBase::_sfSortingMode
    The method used to sort particles.    NONE - no particle sorting.    FRONT_TO_BACK - particles will be sorted from closest to the view point to the furthest.    BACK_TO_FRON - particles will be sorted from furthest to the view point to the closest.
*/
/*! \var ParticleSystemPtr ParticleSystemCoreBase::_sfSystem
    
*/
/*! \var ParticleSystemDrawerPtr ParticleSystemCoreBase::_sfDrawer
    
*/

//! ParticleSystemCore description

FieldDescription *ParticleSystemCoreBase::_desc[] = 
{
    new FieldDescription(SFUInt32::getClassType(), 
                     "SortingMode", 
                     SortingModeFieldId, SortingModeFieldMask,
                     false,
                     (FieldAccessMethod) &ParticleSystemCoreBase::getSFSortingMode),
    new FieldDescription(SFParticleSystemPtr::getClassType(), 
                     "System", 
                     SystemFieldId, SystemFieldMask,
                     false,
                     (FieldAccessMethod) &ParticleSystemCoreBase::getSFSystem),
    new FieldDescription(SFParticleSystemDrawerPtr::getClassType(), 
                     "Drawer", 
                     DrawerFieldId, DrawerFieldMask,
                     false,
                     (FieldAccessMethod) &ParticleSystemCoreBase::getSFDrawer)
};


FieldContainerType ParticleSystemCoreBase::_type(
    "ParticleSystemCore",
    "MaterialDrawable",
    NULL,
    (PrototypeCreateF) &ParticleSystemCoreBase::createEmpty,
    ParticleSystemCore::initMethod,
    _desc,
    sizeof(_desc));

//OSG_FIELD_CONTAINER_DEF(ParticleSystemCoreBase, ParticleSystemCorePtr)

/*------------------------------ get -----------------------------------*/

FieldContainerType &ParticleSystemCoreBase::getType(void) 
{
    return _type; 
} 

const FieldContainerType &ParticleSystemCoreBase::getType(void) const 
{
    return _type;
} 


FieldContainerPtr ParticleSystemCoreBase::shallowCopy(void) const 
{ 
    ParticleSystemCorePtr returnValue; 

    newPtr(returnValue, dynamic_cast<const ParticleSystemCore *>(this)); 

    return returnValue; 
}

UInt32 ParticleSystemCoreBase::getContainerSize(void) const 
{ 
    return sizeof(ParticleSystemCore); 
}


#if !defined(OSG_FIXED_MFIELDSYNC)
void ParticleSystemCoreBase::executeSync(      FieldContainer &other,
                                    const BitVector      &whichField)
{
    this->executeSyncImpl((ParticleSystemCoreBase *) &other, whichField);
}
#else
void ParticleSystemCoreBase::executeSync(      FieldContainer &other,
                                    const BitVector      &whichField,                                    const SyncInfo       &sInfo     )
{
    this->executeSyncImpl((ParticleSystemCoreBase *) &other, whichField, sInfo);
}
void ParticleSystemCoreBase::execBeginEdit(const BitVector &whichField, 
                                            UInt32     uiAspect,
                                            UInt32     uiContainerSize) 
{
    this->execBeginEditImpl(whichField, uiAspect, uiContainerSize);
}

void ParticleSystemCoreBase::onDestroyAspect(UInt32 uiId, UInt32 uiAspect)
{
    Inherited::onDestroyAspect(uiId, uiAspect);

}
#endif

/*------------------------- constructors ----------------------------------*/

#ifdef OSG_WIN32_ICL
#pragma warning (disable : 383)
#endif

ParticleSystemCoreBase::ParticleSystemCoreBase(void) :
    _sfSortingMode            (UInt32(ParticleSystemCore::NONE)), 
    _sfSystem                 (ParticleSystemPtr(NullFC)), 
    _sfDrawer                 (ParticleSystemDrawerPtr(NullFC)), 
    Inherited() 
{
}

#ifdef OSG_WIN32_ICL
#pragma warning (default : 383)
#endif

ParticleSystemCoreBase::ParticleSystemCoreBase(const ParticleSystemCoreBase &source) :
    _sfSortingMode            (source._sfSortingMode            ), 
    _sfSystem                 (source._sfSystem                 ), 
    _sfDrawer                 (source._sfDrawer                 ), 
    Inherited                 (source)
{
}

/*-------------------------- destructors ----------------------------------*/

ParticleSystemCoreBase::~ParticleSystemCoreBase(void)
{
}

/*------------------------------ access -----------------------------------*/

UInt32 ParticleSystemCoreBase::getBinSize(const BitVector &whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (SortingModeFieldMask & whichField))
    {
        returnValue += _sfSortingMode.getBinSize();
    }

    if(FieldBits::NoField != (SystemFieldMask & whichField))
    {
        returnValue += _sfSystem.getBinSize();
    }

    if(FieldBits::NoField != (DrawerFieldMask & whichField))
    {
        returnValue += _sfDrawer.getBinSize();
    }


    return returnValue;
}

void ParticleSystemCoreBase::copyToBin(      BinaryDataHandler &pMem,
                                  const BitVector         &whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (SortingModeFieldMask & whichField))
    {
        _sfSortingMode.copyToBin(pMem);
    }

    if(FieldBits::NoField != (SystemFieldMask & whichField))
    {
        _sfSystem.copyToBin(pMem);
    }

    if(FieldBits::NoField != (DrawerFieldMask & whichField))
    {
        _sfDrawer.copyToBin(pMem);
    }


}

void ParticleSystemCoreBase::copyFromBin(      BinaryDataHandler &pMem,
                                    const BitVector    &whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (SortingModeFieldMask & whichField))
    {
        _sfSortingMode.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (SystemFieldMask & whichField))
    {
        _sfSystem.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (DrawerFieldMask & whichField))
    {
        _sfDrawer.copyFromBin(pMem);
    }


}

#if !defined(OSG_FIXED_MFIELDSYNC)
void ParticleSystemCoreBase::executeSyncImpl(      ParticleSystemCoreBase *pOther,
                                        const BitVector         &whichField)
{

    Inherited::executeSyncImpl(pOther, whichField);

    if(FieldBits::NoField != (SortingModeFieldMask & whichField))
        _sfSortingMode.syncWith(pOther->_sfSortingMode);

    if(FieldBits::NoField != (SystemFieldMask & whichField))
        _sfSystem.syncWith(pOther->_sfSystem);

    if(FieldBits::NoField != (DrawerFieldMask & whichField))
        _sfDrawer.syncWith(pOther->_sfDrawer);


}
#else
void ParticleSystemCoreBase::executeSyncImpl(      ParticleSystemCoreBase *pOther,
                                        const BitVector         &whichField,
                                        const SyncInfo          &sInfo      )
{

    Inherited::executeSyncImpl(pOther, whichField, sInfo);

    if(FieldBits::NoField != (SortingModeFieldMask & whichField))
        _sfSortingMode.syncWith(pOther->_sfSortingMode);

    if(FieldBits::NoField != (SystemFieldMask & whichField))
        _sfSystem.syncWith(pOther->_sfSystem);

    if(FieldBits::NoField != (DrawerFieldMask & whichField))
        _sfDrawer.syncWith(pOther->_sfDrawer);



}

void ParticleSystemCoreBase::execBeginEditImpl (const BitVector &whichField, 
                                                 UInt32     uiAspect,
                                                 UInt32     uiContainerSize)
{
    Inherited::execBeginEditImpl(whichField, uiAspect, uiContainerSize);

}
#endif



OSG_END_NAMESPACE

#include <OpenSG/OSGSFieldTypeDef.inl>
#include <OpenSG/OSGMFieldTypeDef.inl>

OSG_BEGIN_NAMESPACE

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldDataTraits<ParticleSystemCorePtr>::_type("ParticleSystemCorePtr", "MaterialDrawablePtr");
#endif

OSG_DLLEXPORT_SFIELD_DEF1(ParticleSystemCorePtr, OSG_PARTICLESYSTEMLIB_DLLTMPLMAPPING);
OSG_DLLEXPORT_MFIELD_DEF1(ParticleSystemCorePtr, OSG_PARTICLESYSTEMLIB_DLLTMPLMAPPING);


/*------------------------------------------------------------------------*/
/*                              cvs id's                                  */

#ifdef OSG_SGI_CC
#pragma set woff 1174
#endif

#ifdef OSG_LINUX_ICC
#pragma warning( disable : 177 )
#endif

namespace
{
    static Char8 cvsid_cpp       [] = "@(#)$Id: FCBaseTemplate_cpp.h,v 1.47 2006/03/17 17:03:19 pdaehne Exp $";
    static Char8 cvsid_hpp       [] = OSGPARTICLESYSTEMCOREBASE_HEADER_CVSID;
    static Char8 cvsid_inl       [] = OSGPARTICLESYSTEMCOREBASE_INLINE_CVSID;

    static Char8 cvsid_fields_hpp[] = OSGPARTICLESYSTEMCOREFIELDS_HEADER_CVSID;
}

OSG_END_NAMESPACE

