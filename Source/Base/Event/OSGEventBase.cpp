/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact:  David Kabala (djkabala@gmail.com)                             *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class Event!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>
#include <boost/assign/list_of.hpp>

#include "OSGConfig.h"



#include "OSGFieldContainer.h"          // Source Class

#include "OSGEventBase.h"
#include "OSGEvent.h"

#include <boost/bind.hpp>

#ifdef WIN32 // turn off 'this' : used in base member initializer list warning
#pragma warning(disable:4355)
#endif

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::Event
    Abstract Base class for Event Objects.  Event containers have onle read-only fields.  They are used to pass the state information for EventProducers.
 */

/***************************************************************************\
 *                        Field Documentation                              *
\***************************************************************************/

/*! \var FieldContainer * EventBase::_sfSource
    The Field Container that this event was produced on.
*/

/*! \var Time            EventBase::_sfTimeStamp
    The Timestamp of when this Event was produced.
*/


/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldTraits<Event *>::_type("EventPtr", "FieldContainerPtr");
#endif

OSG_FIELDTRAITS_GETTYPE(Event *)

OSG_EXPORT_PTR_SFIELD_FULL(PointerSField,
                           Event *,
                           0);


/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

void EventBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new SFUnrecFieldContainerPtr::Description(
        SFUnrecFieldContainerPtr::getClassType(),
        "Source",
        "The Field Container that this event was produced on.\n",
        SourceFieldId, SourceFieldMask,
        true,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&Event::editHandleSource),
        static_cast<FieldGetMethodSig >(&Event::getHandleSource));

    oType.addInitialDesc(pDesc);

    pDesc = new SFTime::Description(
        SFTime::getClassType(),
        "TimeStamp",
        "The Timestamp of when this Event was produced.\n",
        TimeStampFieldId, TimeStampFieldMask,
        true,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&Event::editHandleTimeStamp),
        static_cast<FieldGetMethodSig >(&Event::getHandleTimeStamp));

    oType.addInitialDesc(pDesc);
}


EventBase::TypeObject EventBase::_type(
    EventBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    0,
    NULL,
    Event::initMethod,
    Event::exitMethod,
    reinterpret_cast<InitalInsertDescFunc>(&Event::classDescInserter),
    false,
    0,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "\tname=\"Event\"\n"
    "\tparent=\"FieldContainer\"\n"
    "    library=\"Base\"\n"
    "\tpointerfieldtypes=\"single\"\n"
    "\tstructure=\"abstract\"\n"
    "\tsystemcomponent=\"true\"\n"
    "\tparentsystemcomponent=\"true\"\n"
    "\tdecoratable=\"false\"\n"
    "    isNodeCore=\"false\"\n"
    "    authors=\"David Kabala (djkabala@gmail.com)                             \"\n"
    ">\n"
    "Abstract Base class for Event Objects.  Event containers have onle read-only fields.  They are used to pass the state information for EventProducers.\n"
    "\t<Field\n"
    "        name=\"Source\"\n"
    "        type=\"FieldContainer\"\n"
    "        category=\"pointer\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"internal\"\n"
    "        access=\"protected\"\n"
    "        defaultValue=\"NULL\"\n"
    "        publicRead=\"true\"\n"
    "        >\n"
    "        The Field Container that this event was produced on.\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"TimeStamp\"\n"
    "\t\ttype=\"Time\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"internal\"\n"
    "\t\taccess=\"protected\"\n"
    "\t\tdefaultValue=\"0\"\n"
    "        publicRead=\"true\"\n"
    "\t>\n"
    "    The Timestamp of when this Event was produced.\n"
    "\t</Field>\n"
    "</FieldContainer>\n",
    "Abstract Base class for Event Objects.  Event containers have onle read-only fields.  They are used to pass the state information for EventProducers.\n"
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &EventBase::getType(void)
{
    return _type;
}

const FieldContainerType &EventBase::getType(void) const
{
    return _type;
}

UInt32 EventBase::getContainerSize(void) const
{
    return sizeof(Event);
}

/*------------------------- decorator get ------------------------------*/


//! Get the Event::_sfSource field.
const SFUnrecFieldContainerPtr *EventBase::getSFSource(void) const
{
    return &_sfSource;
}

SFUnrecFieldContainerPtr *EventBase::editSFSource         (void)
{
    editSField(SourceFieldMask);

    return &_sfSource;
}

SFTime *EventBase::editSFTimeStamp(void)
{
    editSField(TimeStampFieldMask);

    return &_sfTimeStamp;
}

const SFTime *EventBase::getSFTimeStamp(void) const
{
    return &_sfTimeStamp;
}






/*------------------------------ access -----------------------------------*/

UInt32 EventBase::getBinSize(ConstFieldMaskArg whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (SourceFieldMask & whichField))
    {
        returnValue += _sfSource.getBinSize();
    }
    if(FieldBits::NoField != (TimeStampFieldMask & whichField))
    {
        returnValue += _sfTimeStamp.getBinSize();
    }

    return returnValue;
}

void EventBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (SourceFieldMask & whichField))
    {
        _sfSource.copyToBin(pMem);
    }
    if(FieldBits::NoField != (TimeStampFieldMask & whichField))
    {
        _sfTimeStamp.copyToBin(pMem);
    }
}

void EventBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (SourceFieldMask & whichField))
    {
        _sfSource.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (TimeStampFieldMask & whichField))
    {
        _sfTimeStamp.copyFromBin(pMem);
    }
}




/*------------------------- constructors ----------------------------------*/

EventBase::EventBase(void) :
    Inherited(),
    _sfSource                 (NULL),
    _sfTimeStamp              (Time(0))
{
}

EventBase::EventBase(const EventBase &source) :
    Inherited(source),
    _sfSource                 (NULL),
    _sfTimeStamp              (source._sfTimeStamp              )
{
}


/*-------------------------- destructors ----------------------------------*/

EventBase::~EventBase(void)
{
}

void EventBase::onCreate(const Event *source)
{
    Inherited::onCreate(source);

    if(source != NULL)
    {
        Event *pThis = static_cast<Event *>(this);

        pThis->setSource(source->getSource());
    }
}

GetFieldHandlePtr EventBase::getHandleSource          (void) const
{
    SFUnrecFieldContainerPtr::GetHandlePtr returnValue(
        new  SFUnrecFieldContainerPtr::GetHandle(
             &_sfSource,
             this->getType().getFieldDesc(SourceFieldId),
             const_cast<EventBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr EventBase::editHandleSource         (void)
{
    SFUnrecFieldContainerPtr::EditHandlePtr returnValue(
        new  SFUnrecFieldContainerPtr::EditHandle(
             &_sfSource,
             this->getType().getFieldDesc(SourceFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&Event::setSource,
                    static_cast<Event *>(this), _1));

    editSField(SourceFieldMask);

    return returnValue;
}

GetFieldHandlePtr EventBase::getHandleTimeStamp       (void) const
{
    SFTime::GetHandlePtr returnValue(
        new  SFTime::GetHandle(
             &_sfTimeStamp,
             this->getType().getFieldDesc(TimeStampFieldId),
             const_cast<EventBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr EventBase::editHandleTimeStamp      (void)
{
    SFTime::EditHandlePtr returnValue(
        new  SFTime::EditHandle(
             &_sfTimeStamp,
             this->getType().getFieldDesc(TimeStampFieldId),
             this));


    editSField(TimeStampFieldMask);

    return returnValue;
}


#ifdef OSG_MT_CPTR_ASPECT
void EventBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    Event *pThis = static_cast<Event *>(this);

    pThis->execSync(static_cast<Event *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif



void EventBase::resolveLinks(void)
{
    Inherited::resolveLinks();

    static_cast<Event *>(this)->setSource(NULL);


}


OSG_END_NAMESPACE
