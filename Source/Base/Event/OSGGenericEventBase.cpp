/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact:  Robert Goetz                                                  *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class GenericEvent!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>
#include <boost/assign/list_of.hpp>

#include "OSGConfig.h"




#include "OSGGenericEventBase.h"
#include "OSGGenericEvent.h"

#include <boost/bind.hpp>

#ifdef WIN32 // turn off 'this' : used in base member initializer list warning
#pragma warning(disable:4355)
#endif

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::GenericEvent
    
 */

/***************************************************************************\
 *                        Field Documentation                              *
\***************************************************************************/

/*! \var StringToUInt32Map GenericEventBase::_sfNumberMap
    
*/

/*! \var FieldContainerMap GenericEventBase::_sfContainerMap
    
*/


/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldTraits<GenericEvent *>::_type("GenericEventPtr", "EventPtr");
#endif

OSG_FIELDTRAITS_GETTYPE(GenericEvent *)

OSG_EXPORT_PTR_SFIELD_FULL(PointerSField,
                           GenericEvent *,
                           0);


/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

void GenericEventBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new SFStringToUInt32Map::Description(
        SFStringToUInt32Map::getClassType(),
        "NumberMap",
        "",
        NumberMapFieldId, NumberMapFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&GenericEvent::editHandleNumberMap),
        static_cast<FieldGetMethodSig >(&GenericEvent::getHandleNumberMap));

    oType.addInitialDesc(pDesc);

    pDesc = new SFFieldContainerMap::Description(
        SFFieldContainerMap::getClassType(),
        "ContainerMap",
        "",
        ContainerMapFieldId, ContainerMapFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&GenericEvent::editHandleContainerMap),
        static_cast<FieldGetMethodSig >(&GenericEvent::getHandleContainerMap));

    oType.addInitialDesc(pDesc);
}


GenericEventBase::TypeObject GenericEventBase::_type(
    GenericEventBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    0,
    reinterpret_cast<PrototypeCreateF>(&GenericEventBase::createEmptyLocal),
    GenericEvent::initMethod,
    GenericEvent::exitMethod,
    reinterpret_cast<InitalInsertDescFunc>(&GenericEvent::classDescInserter),
    false,
    0,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "\tname=\"GenericEvent\"\n"
    "\tparent=\"Event\"\n"
    "    library=\"Base\"\n"
    "\tpointerfieldtypes=\"single\"\n"
    "\tstructure=\"concrete\"\n"
    "\tsystemcomponent=\"true\"\n"
    "\tparentsystemcomponent=\"true\"\n"
    "\tdecoratable=\"false\"\n"
    "\tuseLocalIncludes=\"true\"\n"
    "    authors=\"Robert Goetz                                                  \"\n"
    ">\n"
    "\t<Field\n"
    "\t\tname=\"NumberMap\"\n"
    "\t\ttype=\"StringToUInt32Map\"\n"
    "\t\tcategory=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"protected\"\n"
    "        publicRead=\"true\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"ContainerMap\"\n"
    "\t\ttype=\"FieldContainerMap\"\n"
    "\t\tcategory=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"protected\"\n"
    "        publicRead=\"true\"\n"
    "\t>\n"
    "\t</Field>\n"
    "</FieldContainer>\n",
    ""
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &GenericEventBase::getType(void)
{
    return _type;
}

const FieldContainerType &GenericEventBase::getType(void) const
{
    return _type;
}

UInt32 GenericEventBase::getContainerSize(void) const
{
    return sizeof(GenericEvent);
}

/*------------------------- decorator get ------------------------------*/


SFStringToUInt32Map *GenericEventBase::editSFNumberMap(void)
{
    editSField(NumberMapFieldMask);

    return &_sfNumberMap;
}

const SFStringToUInt32Map *GenericEventBase::getSFNumberMap(void) const
{
    return &_sfNumberMap;
}


SFFieldContainerMap *GenericEventBase::editSFContainerMap(void)
{
    editSField(ContainerMapFieldMask);

    return &_sfContainerMap;
}

const SFFieldContainerMap *GenericEventBase::getSFContainerMap(void) const
{
    return &_sfContainerMap;
}






/*------------------------------ access -----------------------------------*/

UInt32 GenericEventBase::getBinSize(ConstFieldMaskArg whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (NumberMapFieldMask & whichField))
    {
        returnValue += _sfNumberMap.getBinSize();
    }
    if(FieldBits::NoField != (ContainerMapFieldMask & whichField))
    {
        returnValue += _sfContainerMap.getBinSize();
    }

    return returnValue;
}

void GenericEventBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (NumberMapFieldMask & whichField))
    {
        _sfNumberMap.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ContainerMapFieldMask & whichField))
    {
        _sfContainerMap.copyToBin(pMem);
    }
}

void GenericEventBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (NumberMapFieldMask & whichField))
    {
        _sfNumberMap.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ContainerMapFieldMask & whichField))
    {
        _sfContainerMap.copyFromBin(pMem);
    }
}

//! create a new instance of the class
GenericEventTransitPtr GenericEventBase::createLocal(BitVector bFlags)
{
    GenericEventTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyLocal(bFlags);

        fc = dynamic_pointer_cast<GenericEvent>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class, copy the container flags
GenericEventTransitPtr GenericEventBase::createDependent(BitVector bFlags)
{
    GenericEventTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyDependent(bFlags);

        fc = dynamic_pointer_cast<GenericEvent>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class
GenericEventTransitPtr GenericEventBase::create(void)
{
    GenericEventTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopy();

        fc = dynamic_pointer_cast<GenericEvent>(tmpPtr);
    }

    return fc;
}

GenericEvent *GenericEventBase::createEmptyLocal(BitVector bFlags)
{
    GenericEvent *returnValue;

    newPtr<GenericEvent>(returnValue, bFlags);

    returnValue->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

//! create an empty new instance of the class, do not copy the prototype
GenericEvent *GenericEventBase::createEmpty(void)
{
    GenericEvent *returnValue;

    newPtr<GenericEvent>(returnValue, Thread::getCurrentLocalFlags());

    returnValue->_pFieldFlags->_bNamespaceMask &=
        ~Thread::getCurrentLocalFlags();

    return returnValue;
}


FieldContainerTransitPtr GenericEventBase::shallowCopyLocal(
    BitVector bFlags) const
{
    GenericEvent *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const GenericEvent *>(this), bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

FieldContainerTransitPtr GenericEventBase::shallowCopyDependent(
    BitVector bFlags) const
{
    GenericEvent *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const GenericEvent *>(this), ~bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask = bFlags;

    return returnValue;
}

FieldContainerTransitPtr GenericEventBase::shallowCopy(void) const
{
    GenericEvent *tmpPtr;

    newPtr(tmpPtr,
           dynamic_cast<const GenericEvent *>(this),
           Thread::getCurrentLocalFlags());

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~Thread::getCurrentLocalFlags();

    FieldContainerTransitPtr returnValue(tmpPtr);

    return returnValue;
}




/*------------------------- constructors ----------------------------------*/

GenericEventBase::GenericEventBase(void) :
    Inherited(),
    _sfNumberMap              (),
    _sfContainerMap           ()
{
}

GenericEventBase::GenericEventBase(const GenericEventBase &source) :
    Inherited(source),
    _sfNumberMap              (source._sfNumberMap              ),
    _sfContainerMap           (source._sfContainerMap           )
{
}


/*-------------------------- destructors ----------------------------------*/

GenericEventBase::~GenericEventBase(void)
{
}


GetFieldHandlePtr GenericEventBase::getHandleNumberMap       (void) const
{
    SFStringToUInt32Map::GetHandlePtr returnValue(
        new  SFStringToUInt32Map::GetHandle(
             &_sfNumberMap,
             this->getType().getFieldDesc(NumberMapFieldId),
             const_cast<GenericEventBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr GenericEventBase::editHandleNumberMap      (void)
{
    SFStringToUInt32Map::EditHandlePtr returnValue(
        new  SFStringToUInt32Map::EditHandle(
             &_sfNumberMap,
             this->getType().getFieldDesc(NumberMapFieldId),
             this));


    editSField(NumberMapFieldMask);

    return returnValue;
}

GetFieldHandlePtr GenericEventBase::getHandleContainerMap    (void) const
{
    SFFieldContainerMap::GetHandlePtr returnValue(
        new  SFFieldContainerMap::GetHandle(
             &_sfContainerMap,
             this->getType().getFieldDesc(ContainerMapFieldId),
             const_cast<GenericEventBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr GenericEventBase::editHandleContainerMap   (void)
{
    SFFieldContainerMap::EditHandlePtr returnValue(
        new  SFFieldContainerMap::EditHandle(
             &_sfContainerMap,
             this->getType().getFieldDesc(ContainerMapFieldId),
             this));


    editSField(ContainerMapFieldMask);

    return returnValue;
}


#ifdef OSG_MT_CPTR_ASPECT
void GenericEventBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    GenericEvent *pThis = static_cast<GenericEvent *>(this);

    pThis->execSync(static_cast<GenericEvent *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif


#ifdef OSG_MT_CPTR_ASPECT
FieldContainer *GenericEventBase::createAspectCopy(
    const FieldContainer *pRefAspect) const
{
    GenericEvent *returnValue;

    newAspectCopy(returnValue,
                  dynamic_cast<const GenericEvent *>(pRefAspect),
                  dynamic_cast<const GenericEvent *>(this));

    return returnValue;
}
#endif

void GenericEventBase::resolveLinks(void)
{
    Inherited::resolveLinks();


}


OSG_END_NAMESPACE
