/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 * contact: David Kabala (djkabala@gmail.com)                                *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class BulletBroadphaseInterface!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>
#include <boost/assign/list_of.hpp>

#include "OSGConfig.h"



#include "OSGFieldContainer.h"          // ParentWorld Class

#include "OSGBulletBroadphaseInterfaceBase.h"
#include "OSGBulletBroadphaseInterface.h"

#include <boost/bind.hpp>

#ifdef WIN32 // turn off 'this' : used in base member initializer list warning
#pragma warning(disable:4355)
#endif

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::BulletBroadphaseInterface
    This core is a wrapper around the bullet btBroadphaseInterface.
 */

/***************************************************************************\
 *                        Field Documentation                              *
\***************************************************************************/

/*! \var BoxVolume       BulletBroadphaseInterfaceBase::_sfAabb
    Passthrough value to btBroadphaseInterface.
*/

/*! \var FieldContainer * BulletBroadphaseInterfaceBase::_sfParentWorld
    
*/


/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldTraits<BulletBroadphaseInterface *>::_type("BulletBroadphaseInterfacePtr", "AttachmentContainerPtr");
#endif

OSG_FIELDTRAITS_GETTYPE(BulletBroadphaseInterface *)

OSG_EXPORT_PTR_SFIELD_FULL(PointerSField,
                           BulletBroadphaseInterface *,
                           0);

OSG_EXPORT_PTR_MFIELD_FULL(PointerMField,
                           BulletBroadphaseInterface *,
                           0);

DataType &FieldTraits< BulletBroadphaseInterface *, 1 >::getType(void)
{
    return FieldTraits<BulletBroadphaseInterface *, 0>::getType();
}


OSG_EXPORT_PTR_SFIELD(ChildPointerSField,
                      BulletBroadphaseInterface *,
                      UnrecordedRefCountPolicy,
                      1);


/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

void BulletBroadphaseInterfaceBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new BridgeSFBoxVolume::Description(
        BridgeSFBoxVolume::getClassType(),
        "Aabb",
        "Passthrough value to btBroadphaseInterface.\n",
        AabbFieldId, AabbFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&BulletBroadphaseInterface::editHandleAabb),
        static_cast<FieldGetMethodSig >(&BulletBroadphaseInterface::getHandleAabb));

    oType.addInitialDesc(pDesc);

    pDesc = new SFParentFieldContainerPtr::Description(
        SFParentFieldContainerPtr::getClassType(),
        "ParentWorld",
        "",
        ParentWorldFieldId, ParentWorldFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast     <FieldEditMethodSig>(&BulletBroadphaseInterface::invalidEditField),
        static_cast     <FieldGetMethodSig >(&BulletBroadphaseInterface::invalidGetField));

    oType.addInitialDesc(pDesc);
}


BulletBroadphaseInterfaceBase::TypeObject BulletBroadphaseInterfaceBase::_type(
    BulletBroadphaseInterfaceBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    0,
    NULL,
    BulletBroadphaseInterface::initMethod,
    BulletBroadphaseInterface::exitMethod,
    reinterpret_cast<InitalInsertDescFunc>(&BulletBroadphaseInterface::classDescInserter),
    false,
    0,
    "<?xml version=\"1.0\" ?>\n"
    "\n"
    "<FieldContainer\n"
    "    name=\"BulletBroadphaseInterface\"\n"
    "    parent=\"AttachmentContainer\"\n"
    "    library=\"ContribBullet\"\n"
    "    structure=\"abstract\"\n"
    "    pointerfieldtypes=\"both\"\n"
    "    systemcomponent=\"true\"\n"
    "    parentsystemcomponent=\"true\"\n"
    "    decoratable=\"false\"\n"
    "    useLocalIncludes=\"false\"\n"
    "    isNodeCore=\"false\"\n"
    "    childFields=\"single\"\n"
    "    authors=\"David Kabala (djkabala@gmail.com)\"\n"
    "    >\n"
    "    This core is a wrapper around the bullet btBroadphaseInterface.\n"
    "    <Field\n"
    "        name=\"Aabb\"\n"
    "        type=\"BoxVolume\"\n"
    "        category=\"data\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        access=\"public\"\n"
    "        bridge=\"true\"\n"
    "        >\n"
    "        Passthrough value to btBroadphaseInterface.\n"
    "    </Field>\n"
    "    <Field\n"
    "       name=\"ParentWorld\"\n"
    "       type=\"FieldContainer\"\n"
    "       cardinality=\"single\"\n"
    "       access=\"none\"\n"
    "       category=\"parentpointer\"\n"
    "       >\n"
    "    </Field>\n"
    "</FieldContainer>\n",
    "This core is a wrapper around the bullet btBroadphaseInterface.\n"
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &BulletBroadphaseInterfaceBase::getType(void)
{
    return _type;
}

const FieldContainerType &BulletBroadphaseInterfaceBase::getType(void) const
{
    return _type;
}

UInt32 BulletBroadphaseInterfaceBase::getContainerSize(void) const
{
    return sizeof(BulletBroadphaseInterface);
}

/*------------------------- decorator get ------------------------------*/


BridgeSFBoxVolume *BulletBroadphaseInterfaceBase::editSFAabb(void)
{
    editSField(AabbFieldMask);

    return &_sfAabb;
}

const BridgeSFBoxVolume *BulletBroadphaseInterfaceBase::getSFAabb(void) const
{
    return &_sfAabb;
}







/*------------------------------ access -----------------------------------*/

UInt32 BulletBroadphaseInterfaceBase::getBinSize(ConstFieldMaskArg whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (AabbFieldMask & whichField))
    {
        returnValue += _sfAabb.getBinSize();
    }
    if(FieldBits::NoField != (ParentWorldFieldMask & whichField))
    {
        returnValue += _sfParentWorld.getBinSize();
    }

    return returnValue;
}

void BulletBroadphaseInterfaceBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (AabbFieldMask & whichField))
    {
        _sfAabb.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ParentWorldFieldMask & whichField))
    {
        _sfParentWorld.copyToBin(pMem);
    }
}

void BulletBroadphaseInterfaceBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (AabbFieldMask & whichField))
    {
        editSField(AabbFieldMask);
        _sfAabb.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ParentWorldFieldMask & whichField))
    {
        editSField(ParentWorldFieldMask);
        _sfParentWorld.copyFromBin(pMem);
    }
}



/*------------------------- constructors ----------------------------------*/

BulletBroadphaseInterfaceBase::BulletBroadphaseInterfaceBase(void) :
    Inherited(),
    _sfAabb                   (boost::bind(&BulletBroadphaseInterface::getExternalAabb, static_cast<BulletBroadphaseInterface*>(this)),boost::bind(&BulletBroadphaseInterface::setExternalAabb, static_cast<BulletBroadphaseInterface*>(this), _1)),
    _sfParentWorld            (NULL)
{
}

BulletBroadphaseInterfaceBase::BulletBroadphaseInterfaceBase(const BulletBroadphaseInterfaceBase &source) :
    Inherited(source),
    _sfAabb                   (boost::bind(&BulletBroadphaseInterface::getExternalAabb, static_cast<BulletBroadphaseInterface*>(this)),boost::bind(&BulletBroadphaseInterface::setExternalAabb, static_cast<BulletBroadphaseInterface*>(this), _1)),
    _sfParentWorld            (NULL)
{
}


/*-------------------------- destructors ----------------------------------*/

BulletBroadphaseInterfaceBase::~BulletBroadphaseInterfaceBase(void)
{
}
/*-------------------------------------------------------------------------*/
/* Parent linking                                                          */

bool BulletBroadphaseInterfaceBase::linkParent(
    FieldContainer * const pParent,
    UInt16           const childFieldId,
    UInt16           const parentFieldId )
{
    if(parentFieldId == ParentWorldFieldId)
    {
        FieldContainer * pTypedParent =
            dynamic_cast< FieldContainer * >(pParent);

        if(pTypedParent != NULL)
        {
            FieldContainer *pOldParent =
                _sfParentWorld.getValue         ();

            UInt16 oldChildFieldId =
                _sfParentWorld.getParentFieldPos();

            if(pOldParent != NULL)
            {
                pOldParent->unlinkChild(this, oldChildFieldId);
            }

            editSField(ParentWorldFieldMask);

            _sfParentWorld.setValue(static_cast<FieldContainer *>(pParent), childFieldId);

            return true;
        }

        return false;
    }

    return Inherited::linkParent(pParent, childFieldId, parentFieldId);
}

bool BulletBroadphaseInterfaceBase::unlinkParent(
    FieldContainer * const pParent,
    UInt16           const parentFieldId)
{
    if(parentFieldId == ParentWorldFieldId)
    {
        FieldContainer * pTypedParent =
            dynamic_cast< FieldContainer * >(pParent);

        if(pTypedParent != NULL)
        {
            if(_sfParentWorld.getValue() == pTypedParent)
            {
                editSField(ParentWorldFieldMask);

                _sfParentWorld.setValue(NULL, 0xFFFF);

                return true;
            }

            SWARNING << "Child (["          << this
                     << "] id ["            << this->getId()
                     << "] type ["          << this->getType().getCName()
                     << "] parentFieldId [" << parentFieldId
                     << "]) - Parent (["    << pParent
                     << "] id ["            << pParent->getId()
                     << "] type ["          << pParent->getType().getCName()
                     << "]): link inconsistent!"
                     << std::endl;

            return false;
        }

        return false;
    }

    return Inherited::unlinkParent(pParent, parentFieldId);
}



GetFieldHandlePtr BulletBroadphaseInterfaceBase::getHandleAabb            (void) const
{
    BridgeSFBoxVolume::GetHandlePtr returnValue(
        new  BridgeSFBoxVolume::GetHandle(
             &_sfAabb,
             this->getType().getFieldDesc(AabbFieldId),
             const_cast<BulletBroadphaseInterfaceBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr BulletBroadphaseInterfaceBase::editHandleAabb           (void)
{
    BridgeSFBoxVolume::EditHandlePtr returnValue(
        new  BridgeSFBoxVolume::EditHandle(
             &_sfAabb,
             this->getType().getFieldDesc(AabbFieldId),
             this));


    editSField(AabbFieldMask);

    return returnValue;
}

GetFieldHandlePtr BulletBroadphaseInterfaceBase::getHandleParentWorld     (void) const
{
    SFParentFieldContainerPtr::GetHandlePtr returnValue;

    return returnValue;
}

EditFieldHandlePtr BulletBroadphaseInterfaceBase::editHandleParentWorld    (void)
{
    EditFieldHandlePtr returnValue;

    return returnValue;
}



#ifdef OSG_MT_CPTR_ASPECT
void BulletBroadphaseInterfaceBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    BulletBroadphaseInterface *pThis = static_cast<BulletBroadphaseInterface *>(this);

    pThis->execSync(static_cast<BulletBroadphaseInterface *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif



void BulletBroadphaseInterfaceBase::resolveLinks(void)
{
    Inherited::resolveLinks();


}


OSG_END_NAMESPACE
