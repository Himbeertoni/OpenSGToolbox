/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 * contact: David Kabala (djkabala@gmail.com)                                *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class BulletCollisionShape!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>
#include <boost/assign/list_of.hpp>

#include "OSGConfig.h"



#include "OSGFieldContainer.h"          // ParentObject Class

#include "OSGBulletCollisionShapeBase.h"
#include "OSGBulletCollisionShape.h"

#include <boost/bind.hpp>

#ifdef WIN32 // turn off 'this' : used in base member initializer list warning
#pragma warning(disable:4355)
#endif

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::BulletCollisionShape
    Shapes to Support:
    Compound

    HeightFieldTerrain
    SoftBodyCollision
    PlaneShape
    ScaledBvhTriangleMesh
    BvhTriangleMesh
    MaterialTriangleMesh

    Convex2d
    Capsule
    Cone
    Cylinder
    MultiSphere
    MindowskiSum
    Box2d
    Box
    ConvexHull
    ConvexPointCloud
    ConvexTriangleMesh
    Triangle
    Sphere
    UniformScaling

    This core is a wrapper around the bullet btCollisionShape.
 */

/***************************************************************************\
 *                        Field Documentation                              *
\***************************************************************************/

/*! \var FieldContainer * BulletCollisionShapeBase::_sfParentObject
    
*/

/*! \var Vec3f           BulletCollisionShapeBase::_sfLocalScaling
    Passthrough value to btCollisionShape.
*/

/*! \var Real32          BulletCollisionShapeBase::_sfMargin
    Passthrough value to btCollisionShape.
*/


/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldTraits<BulletCollisionShape *>::_type("BulletCollisionShapePtr", "AttachmentContainerPtr");
#endif

OSG_FIELDTRAITS_GETTYPE(BulletCollisionShape *)

OSG_EXPORT_PTR_SFIELD_FULL(PointerSField,
                           BulletCollisionShape *,
                           0);

OSG_EXPORT_PTR_MFIELD_FULL(PointerMField,
                           BulletCollisionShape *,
                           0);

DataType &FieldTraits< BulletCollisionShape *, 1 >::getType(void)
{
    return FieldTraits<BulletCollisionShape *, 0>::getType();
}


OSG_EXPORT_PTR_SFIELD(ChildPointerSField,
                      BulletCollisionShape *,
                      UnrecordedRefCountPolicy,
                      1);


/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

void BulletCollisionShapeBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new SFParentFieldContainerPtr::Description(
        SFParentFieldContainerPtr::getClassType(),
        "ParentObject",
        "",
        ParentObjectFieldId, ParentObjectFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast     <FieldEditMethodSig>(&BulletCollisionShape::invalidEditField),
        static_cast     <FieldGetMethodSig >(&BulletCollisionShape::invalidGetField));

    oType.addInitialDesc(pDesc);

    pDesc = new BridgeSFVec3f::Description(
        BridgeSFVec3f::getClassType(),
        "LocalScaling",
        "Passthrough value to btCollisionShape.\n",
        LocalScalingFieldId, LocalScalingFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&BulletCollisionShape::editHandleLocalScaling),
        static_cast<FieldGetMethodSig >(&BulletCollisionShape::getHandleLocalScaling));

    oType.addInitialDesc(pDesc);

    pDesc = new BridgeSFReal32::Description(
        BridgeSFReal32::getClassType(),
        "Margin",
        "Passthrough value to btCollisionShape.\n",
        MarginFieldId, MarginFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&BulletCollisionShape::editHandleMargin),
        static_cast<FieldGetMethodSig >(&BulletCollisionShape::getHandleMargin));

    oType.addInitialDesc(pDesc);
}


BulletCollisionShapeBase::TypeObject BulletCollisionShapeBase::_type(
    BulletCollisionShapeBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    0,
    NULL,
    BulletCollisionShape::initMethod,
    BulletCollisionShape::exitMethod,
    reinterpret_cast<InitalInsertDescFunc>(&BulletCollisionShape::classDescInserter),
    false,
    0,
    "<?xml version=\"1.0\" ?>\n"
    "\n"
    "<FieldContainer\n"
    "    name=\"BulletCollisionShape\"\n"
    "    parent=\"AttachmentContainer\"\n"
    "    library=\"ContribBullet\"\n"
    "    structure=\"abstract\"\n"
    "    pointerfieldtypes=\"both\"\n"
    "    systemcomponent=\"true\"\n"
    "    parentsystemcomponent=\"true\"\n"
    "    decoratable=\"false\"\n"
    "    useLocalIncludes=\"false\"\n"
    "    isNodeCore=\"false\"\n"
    "    childFields=\"single\"\n"
    "    authors=\"David Kabala (djkabala@gmail.com)\"\n"
    "    >\n"
    "    Shapes to Support:\n"
    "        Compound\n"
    "\n"
    "        HeightFieldTerrain\n"
    "        SoftBodyCollision\n"
    "        PlaneShape\n"
    "        ScaledBvhTriangleMesh\n"
    "        BvhTriangleMesh\n"
    "        MaterialTriangleMesh\n"
    "\n"
    "        Convex2d\n"
    "        Capsule\n"
    "        Cone\n"
    "        Cylinder\n"
    "        MultiSphere\n"
    "        MindowskiSum\n"
    "        Box2d\n"
    "        Box\n"
    "        ConvexHull\n"
    "        ConvexPointCloud\n"
    "        ConvexTriangleMesh\n"
    "        Triangle\n"
    "        Sphere\n"
    "        UniformScaling\n"
    "\n"
    "    This core is a wrapper around the bullet btCollisionShape.\n"
    "    <Field\n"
    "       name=\"ParentObject\"\n"
    "       type=\"FieldContainer\"\n"
    "       cardinality=\"single\"\n"
    "       access=\"none\"\n"
    "       category=\"parentpointer\"\n"
    "       >\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"LocalScaling\"\n"
    "        type=\"Vec3f\"\n"
    "        category=\"data\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        access=\"public\"\n"
    "        bridge=\"true\"\n"
    "        >\n"
    "        Passthrough value to btCollisionShape.\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"Margin\"\n"
    "        type=\"Real32\"\n"
    "        category=\"data\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        access=\"public\"\n"
    "        bridge=\"true\"\n"
    "        >\n"
    "        Passthrough value to btCollisionShape.\n"
    "    </Field>\n"
    "</FieldContainer>\n",
    "Shapes to Support:\n"
    "Compound\n"
    "\n"
    "HeightFieldTerrain\n"
    "SoftBodyCollision\n"
    "PlaneShape\n"
    "ScaledBvhTriangleMesh\n"
    "BvhTriangleMesh\n"
    "MaterialTriangleMesh\n"
    "\n"
    "Convex2d\n"
    "Capsule\n"
    "Cone\n"
    "Cylinder\n"
    "MultiSphere\n"
    "MindowskiSum\n"
    "Box2d\n"
    "Box\n"
    "ConvexHull\n"
    "ConvexPointCloud\n"
    "ConvexTriangleMesh\n"
    "Triangle\n"
    "Sphere\n"
    "UniformScaling\n"
    "\n"
    "This core is a wrapper around the bullet btCollisionShape.\n"
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &BulletCollisionShapeBase::getType(void)
{
    return _type;
}

const FieldContainerType &BulletCollisionShapeBase::getType(void) const
{
    return _type;
}

UInt32 BulletCollisionShapeBase::getContainerSize(void) const
{
    return sizeof(BulletCollisionShape);
}

/*------------------------- decorator get ------------------------------*/



BridgeSFVec3f *BulletCollisionShapeBase::editSFLocalScaling(void)
{
    editSField(LocalScalingFieldMask);

    return &_sfLocalScaling;
}

const BridgeSFVec3f *BulletCollisionShapeBase::getSFLocalScaling(void) const
{
    return &_sfLocalScaling;
}


BridgeSFReal32 *BulletCollisionShapeBase::editSFMargin(void)
{
    editSField(MarginFieldMask);

    return &_sfMargin;
}

const BridgeSFReal32 *BulletCollisionShapeBase::getSFMargin(void) const
{
    return &_sfMargin;
}






/*------------------------------ access -----------------------------------*/

UInt32 BulletCollisionShapeBase::getBinSize(ConstFieldMaskArg whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (ParentObjectFieldMask & whichField))
    {
        returnValue += _sfParentObject.getBinSize();
    }
    if(FieldBits::NoField != (LocalScalingFieldMask & whichField))
    {
        returnValue += _sfLocalScaling.getBinSize();
    }
    if(FieldBits::NoField != (MarginFieldMask & whichField))
    {
        returnValue += _sfMargin.getBinSize();
    }

    return returnValue;
}

void BulletCollisionShapeBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (ParentObjectFieldMask & whichField))
    {
        _sfParentObject.copyToBin(pMem);
    }
    if(FieldBits::NoField != (LocalScalingFieldMask & whichField))
    {
        _sfLocalScaling.copyToBin(pMem);
    }
    if(FieldBits::NoField != (MarginFieldMask & whichField))
    {
        _sfMargin.copyToBin(pMem);
    }
}

void BulletCollisionShapeBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (ParentObjectFieldMask & whichField))
    {
        editSField(ParentObjectFieldMask);
        _sfParentObject.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (LocalScalingFieldMask & whichField))
    {
        editSField(LocalScalingFieldMask);
        _sfLocalScaling.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (MarginFieldMask & whichField))
    {
        editSField(MarginFieldMask);
        _sfMargin.copyFromBin(pMem);
    }
}



/*------------------------- constructors ----------------------------------*/

BulletCollisionShapeBase::BulletCollisionShapeBase(void) :
    Inherited(),
    _sfParentObject           (NULL),
    _sfLocalScaling           (boost::bind(&BulletCollisionShape::getExternalLocalScaling, static_cast<BulletCollisionShape*>(this)),boost::bind(&BulletCollisionShape::setExternalLocalScaling, static_cast<BulletCollisionShape*>(this), _1)),
    _sfMargin                 (boost::bind(&BulletCollisionShape::getExternalMargin, static_cast<BulletCollisionShape*>(this)),boost::bind(&BulletCollisionShape::setExternalMargin, static_cast<BulletCollisionShape*>(this), _1))
{
}

BulletCollisionShapeBase::BulletCollisionShapeBase(const BulletCollisionShapeBase &source) :
    Inherited(source),
    _sfParentObject           (NULL),
    _sfLocalScaling           (boost::bind(&BulletCollisionShape::getExternalLocalScaling, static_cast<BulletCollisionShape*>(this)),boost::bind(&BulletCollisionShape::setExternalLocalScaling, static_cast<BulletCollisionShape*>(this), _1)),
    _sfMargin                 (boost::bind(&BulletCollisionShape::getExternalMargin, static_cast<BulletCollisionShape*>(this)),boost::bind(&BulletCollisionShape::setExternalMargin, static_cast<BulletCollisionShape*>(this), _1))
{
}


/*-------------------------- destructors ----------------------------------*/

BulletCollisionShapeBase::~BulletCollisionShapeBase(void)
{
}
/*-------------------------------------------------------------------------*/
/* Parent linking                                                          */

bool BulletCollisionShapeBase::linkParent(
    FieldContainer * const pParent,
    UInt16           const childFieldId,
    UInt16           const parentFieldId )
{
    if(parentFieldId == ParentObjectFieldId)
    {
        FieldContainer * pTypedParent =
            dynamic_cast< FieldContainer * >(pParent);

        if(pTypedParent != NULL)
        {
            FieldContainer *pOldParent =
                _sfParentObject.getValue         ();

            UInt16 oldChildFieldId =
                _sfParentObject.getParentFieldPos();

            if(pOldParent != NULL)
            {
                pOldParent->unlinkChild(this, oldChildFieldId);
            }

            editSField(ParentObjectFieldMask);

            _sfParentObject.setValue(static_cast<FieldContainer *>(pParent), childFieldId);

            return true;
        }

        return false;
    }

    return Inherited::linkParent(pParent, childFieldId, parentFieldId);
}

bool BulletCollisionShapeBase::unlinkParent(
    FieldContainer * const pParent,
    UInt16           const parentFieldId)
{
    if(parentFieldId == ParentObjectFieldId)
    {
        FieldContainer * pTypedParent =
            dynamic_cast< FieldContainer * >(pParent);

        if(pTypedParent != NULL)
        {
            if(_sfParentObject.getValue() == pTypedParent)
            {
                editSField(ParentObjectFieldMask);

                _sfParentObject.setValue(NULL, 0xFFFF);

                return true;
            }

            SWARNING << "Child (["          << this
                     << "] id ["            << this->getId()
                     << "] type ["          << this->getType().getCName()
                     << "] parentFieldId [" << parentFieldId
                     << "]) - Parent (["    << pParent
                     << "] id ["            << pParent->getId()
                     << "] type ["          << pParent->getType().getCName()
                     << "]): link inconsistent!"
                     << std::endl;

            return false;
        }

        return false;
    }

    return Inherited::unlinkParent(pParent, parentFieldId);
}



GetFieldHandlePtr BulletCollisionShapeBase::getHandleParentObject    (void) const
{
    SFParentFieldContainerPtr::GetHandlePtr returnValue;

    return returnValue;
}

EditFieldHandlePtr BulletCollisionShapeBase::editHandleParentObject   (void)
{
    EditFieldHandlePtr returnValue;

    return returnValue;
}

GetFieldHandlePtr BulletCollisionShapeBase::getHandleLocalScaling    (void) const
{
    BridgeSFVec3f::GetHandlePtr returnValue(
        new  BridgeSFVec3f::GetHandle(
             &_sfLocalScaling,
             this->getType().getFieldDesc(LocalScalingFieldId),
             const_cast<BulletCollisionShapeBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr BulletCollisionShapeBase::editHandleLocalScaling   (void)
{
    BridgeSFVec3f::EditHandlePtr returnValue(
        new  BridgeSFVec3f::EditHandle(
             &_sfLocalScaling,
             this->getType().getFieldDesc(LocalScalingFieldId),
             this));


    editSField(LocalScalingFieldMask);

    return returnValue;
}

GetFieldHandlePtr BulletCollisionShapeBase::getHandleMargin          (void) const
{
    BridgeSFReal32::GetHandlePtr returnValue(
        new  BridgeSFReal32::GetHandle(
             &_sfMargin,
             this->getType().getFieldDesc(MarginFieldId),
             const_cast<BulletCollisionShapeBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr BulletCollisionShapeBase::editHandleMargin         (void)
{
    BridgeSFReal32::EditHandlePtr returnValue(
        new  BridgeSFReal32::EditHandle(
             &_sfMargin,
             this->getType().getFieldDesc(MarginFieldId),
             this));


    editSField(MarginFieldMask);

    return returnValue;
}



#ifdef OSG_MT_CPTR_ASPECT
void BulletCollisionShapeBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    BulletCollisionShape *pThis = static_cast<BulletCollisionShape *>(this);

    pThis->execSync(static_cast<BulletCollisionShape *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif



void BulletCollisionShapeBase::resolveLinks(void)
{
    Inherited::resolveLinks();


}


OSG_END_NAMESPACE
