/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 * contact: David Kabala (djkabala@gmail.com)                                *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class BulletDebugForeground!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>
#include <boost/assign/list_of.hpp>

#include "OSGConfig.h"



#include "OSGBulletCollisionWorld.h"    // World Class

#include "OSGBulletDebugForegroundBase.h"
#include "OSGBulletDebugForeground.h"

#include <boost/bind.hpp>

#ifdef WIN32 // turn off 'this' : used in base member initializer list warning
#pragma warning(disable:4355)
#endif

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::BulletDebugForeground
    A Foreground wrapper around the Bullet btIDebugDraw interface. 
 */

/***************************************************************************\
 *                        Field Documentation                              *
\***************************************************************************/

/*! \var BulletCollisionWorld * BulletDebugForegroundBase::_sfWorld
    
*/

/*! \var Int32           BulletDebugForegroundBase::_sfMode
    
*/

/*! \var bool            BulletDebugForegroundBase::_sfDrawOccluded
    
*/

/*! \var Real32          BulletDebugForegroundBase::_sfOccludedAlpha
    
*/

/*! \var Real32          BulletDebugForegroundBase::_sfLineWidth
    
*/


/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldTraits<BulletDebugForeground *>::_type("BulletDebugForegroundPtr", "ForegroundPtr");
#endif

OSG_FIELDTRAITS_GETTYPE(BulletDebugForeground *)

OSG_EXPORT_PTR_SFIELD_FULL(PointerSField,
                           BulletDebugForeground *,
                           0);

OSG_EXPORT_PTR_MFIELD_FULL(PointerMField,
                           BulletDebugForeground *,
                           0);

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

void BulletDebugForegroundBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new SFUnrecBulletCollisionWorldPtr::Description(
        SFUnrecBulletCollisionWorldPtr::getClassType(),
        "World",
        "",
        WorldFieldId, WorldFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&BulletDebugForeground::editHandleWorld),
        static_cast<FieldGetMethodSig >(&BulletDebugForeground::getHandleWorld));

    oType.addInitialDesc(pDesc);

    pDesc = new SFInt32::Description(
        SFInt32::getClassType(),
        "Mode",
        "",
        ModeFieldId, ModeFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&BulletDebugForeground::editHandleMode),
        static_cast<FieldGetMethodSig >(&BulletDebugForeground::getHandleMode));

    oType.addInitialDesc(pDesc);

    pDesc = new SFBool::Description(
        SFBool::getClassType(),
        "DrawOccluded",
        "",
        DrawOccludedFieldId, DrawOccludedFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&BulletDebugForeground::editHandleDrawOccluded),
        static_cast<FieldGetMethodSig >(&BulletDebugForeground::getHandleDrawOccluded));

    oType.addInitialDesc(pDesc);

    pDesc = new SFReal32::Description(
        SFReal32::getClassType(),
        "OccludedAlpha",
        "",
        OccludedAlphaFieldId, OccludedAlphaFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&BulletDebugForeground::editHandleOccludedAlpha),
        static_cast<FieldGetMethodSig >(&BulletDebugForeground::getHandleOccludedAlpha));

    oType.addInitialDesc(pDesc);

    pDesc = new SFReal32::Description(
        SFReal32::getClassType(),
        "LineWidth",
        "",
        LineWidthFieldId, LineWidthFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&BulletDebugForeground::editHandleLineWidth),
        static_cast<FieldGetMethodSig >(&BulletDebugForeground::getHandleLineWidth));

    oType.addInitialDesc(pDesc);
}


BulletDebugForegroundBase::TypeObject BulletDebugForegroundBase::_type(
    BulletDebugForegroundBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    0,
    reinterpret_cast<PrototypeCreateF>(&BulletDebugForegroundBase::createEmptyLocal),
    BulletDebugForeground::initMethod,
    BulletDebugForeground::exitMethod,
    reinterpret_cast<InitalInsertDescFunc>(&BulletDebugForeground::classDescInserter),
    false,
    0,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "    name=\"BulletDebugForeground\"\n"
    "    parent=\"Foreground\"\n"
    "    library=\"ContribBullet\"\n"
    "    pointerfieldtypes=\"both\"\n"
    "    structure=\"concrete\"\n"
    "    systemcomponent=\"true\"\n"
    "    parentsystemcomponent=\"true\"\n"
    "    docGroupBase=\"GrpBullet\"\n"
    "    authors=\"David Kabala (djkabala@gmail.com)\"\n"
    "    >\n"
    "    A Foreground wrapper around the Bullet btIDebugDraw interface. \n"
    "    <Field\n"
    "        name=\"World\"\n"
    "        type=\"BulletCollisionWorld\"\n"
    "        category=\"pointer\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        defaultValue=\"NULL\"\n"
    "        access=\"public\"\n"
    "        >\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"Mode\"\n"
    "        type=\"Int32\"\n"
    "        category=\"data\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        defaultValue=\"0\"\n"
    "        access=\"public\"\n"
    "        >\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"DrawOccluded\"\n"
    "        type=\"bool\"\n"
    "        category=\"data\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        defaultValue=\"true\"\n"
    "        access=\"public\"\n"
    "        >\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"OccludedAlpha\"\n"
    "        type=\"Real32\"\n"
    "        category=\"data\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        defaultValue=\"0.5\"\n"
    "        access=\"public\"\n"
    "        >\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"LineWidth\"\n"
    "        type=\"Real32\"\n"
    "        category=\"data\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        defaultValue=\"1.0\"\n"
    "        access=\"public\"\n"
    "        >\n"
    "    </Field>\n"
    "</FieldContainer>\n",
    "A Foreground wrapper around the Bullet btIDebugDraw interface. \n"
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &BulletDebugForegroundBase::getType(void)
{
    return _type;
}

const FieldContainerType &BulletDebugForegroundBase::getType(void) const
{
    return _type;
}

UInt32 BulletDebugForegroundBase::getContainerSize(void) const
{
    return sizeof(BulletDebugForeground);
}

/*------------------------- decorator get ------------------------------*/


//! Get the BulletDebugForeground::_sfWorld field.
const SFUnrecBulletCollisionWorldPtr *BulletDebugForegroundBase::getSFWorld(void) const
{
    return &_sfWorld;
}

SFUnrecBulletCollisionWorldPtr *BulletDebugForegroundBase::editSFWorld          (void)
{
    editSField(WorldFieldMask);

    return &_sfWorld;
}

SFInt32 *BulletDebugForegroundBase::editSFMode(void)
{
    editSField(ModeFieldMask);

    return &_sfMode;
}

const SFInt32 *BulletDebugForegroundBase::getSFMode(void) const
{
    return &_sfMode;
}


SFBool *BulletDebugForegroundBase::editSFDrawOccluded(void)
{
    editSField(DrawOccludedFieldMask);

    return &_sfDrawOccluded;
}

const SFBool *BulletDebugForegroundBase::getSFDrawOccluded(void) const
{
    return &_sfDrawOccluded;
}


SFReal32 *BulletDebugForegroundBase::editSFOccludedAlpha(void)
{
    editSField(OccludedAlphaFieldMask);

    return &_sfOccludedAlpha;
}

const SFReal32 *BulletDebugForegroundBase::getSFOccludedAlpha(void) const
{
    return &_sfOccludedAlpha;
}


SFReal32 *BulletDebugForegroundBase::editSFLineWidth(void)
{
    editSField(LineWidthFieldMask);

    return &_sfLineWidth;
}

const SFReal32 *BulletDebugForegroundBase::getSFLineWidth(void) const
{
    return &_sfLineWidth;
}






/*------------------------------ access -----------------------------------*/

UInt32 BulletDebugForegroundBase::getBinSize(ConstFieldMaskArg whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (WorldFieldMask & whichField))
    {
        returnValue += _sfWorld.getBinSize();
    }
    if(FieldBits::NoField != (ModeFieldMask & whichField))
    {
        returnValue += _sfMode.getBinSize();
    }
    if(FieldBits::NoField != (DrawOccludedFieldMask & whichField))
    {
        returnValue += _sfDrawOccluded.getBinSize();
    }
    if(FieldBits::NoField != (OccludedAlphaFieldMask & whichField))
    {
        returnValue += _sfOccludedAlpha.getBinSize();
    }
    if(FieldBits::NoField != (LineWidthFieldMask & whichField))
    {
        returnValue += _sfLineWidth.getBinSize();
    }

    return returnValue;
}

void BulletDebugForegroundBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (WorldFieldMask & whichField))
    {
        _sfWorld.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ModeFieldMask & whichField))
    {
        _sfMode.copyToBin(pMem);
    }
    if(FieldBits::NoField != (DrawOccludedFieldMask & whichField))
    {
        _sfDrawOccluded.copyToBin(pMem);
    }
    if(FieldBits::NoField != (OccludedAlphaFieldMask & whichField))
    {
        _sfOccludedAlpha.copyToBin(pMem);
    }
    if(FieldBits::NoField != (LineWidthFieldMask & whichField))
    {
        _sfLineWidth.copyToBin(pMem);
    }
}

void BulletDebugForegroundBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (WorldFieldMask & whichField))
    {
        editSField(WorldFieldMask);
        _sfWorld.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ModeFieldMask & whichField))
    {
        editSField(ModeFieldMask);
        _sfMode.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (DrawOccludedFieldMask & whichField))
    {
        editSField(DrawOccludedFieldMask);
        _sfDrawOccluded.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (OccludedAlphaFieldMask & whichField))
    {
        editSField(OccludedAlphaFieldMask);
        _sfOccludedAlpha.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (LineWidthFieldMask & whichField))
    {
        editSField(LineWidthFieldMask);
        _sfLineWidth.copyFromBin(pMem);
    }
}

//! create a new instance of the class
BulletDebugForegroundTransitPtr BulletDebugForegroundBase::createLocal(BitVector bFlags)
{
    BulletDebugForegroundTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyLocal(bFlags);

        fc = dynamic_pointer_cast<BulletDebugForeground>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class, copy the container flags
BulletDebugForegroundTransitPtr BulletDebugForegroundBase::createDependent(BitVector bFlags)
{
    BulletDebugForegroundTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyDependent(bFlags);

        fc = dynamic_pointer_cast<BulletDebugForeground>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class
BulletDebugForegroundTransitPtr BulletDebugForegroundBase::create(void)
{
    BulletDebugForegroundTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopy();

        fc = dynamic_pointer_cast<BulletDebugForeground>(tmpPtr);
    }

    return fc;
}

BulletDebugForeground *BulletDebugForegroundBase::createEmptyLocal(BitVector bFlags)
{
    BulletDebugForeground *returnValue;

    newPtr<BulletDebugForeground>(returnValue, bFlags);

    returnValue->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

//! create an empty new instance of the class, do not copy the prototype
BulletDebugForeground *BulletDebugForegroundBase::createEmpty(void)
{
    BulletDebugForeground *returnValue;

    newPtr<BulletDebugForeground>(returnValue, Thread::getCurrentLocalFlags());

    returnValue->_pFieldFlags->_bNamespaceMask &=
        ~Thread::getCurrentLocalFlags();

    return returnValue;
}

FieldContainerTransitPtr BulletDebugForegroundBase::shallowCopyLocal(
    BitVector bFlags) const
{
    BulletDebugForeground *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const BulletDebugForeground *>(this), bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

FieldContainerTransitPtr BulletDebugForegroundBase::shallowCopyDependent(
    BitVector bFlags) const
{
    BulletDebugForeground *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const BulletDebugForeground *>(this), ~bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask = bFlags;

    return returnValue;
}

FieldContainerTransitPtr BulletDebugForegroundBase::shallowCopy(void) const
{
    BulletDebugForeground *tmpPtr;

    newPtr(tmpPtr,
           dynamic_cast<const BulletDebugForeground *>(this),
           Thread::getCurrentLocalFlags());

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~Thread::getCurrentLocalFlags();

    FieldContainerTransitPtr returnValue(tmpPtr);

    return returnValue;
}



/*------------------------- constructors ----------------------------------*/

BulletDebugForegroundBase::BulletDebugForegroundBase(void) :
    Inherited(),
    _sfWorld                  (NULL),
    _sfMode                   (Int32(0)),
    _sfDrawOccluded           (bool(true)),
    _sfOccludedAlpha          (Real32(0.5)),
    _sfLineWidth              (Real32(1.0))
{
}

BulletDebugForegroundBase::BulletDebugForegroundBase(const BulletDebugForegroundBase &source) :
    Inherited(source),
    _sfWorld                  (NULL),
    _sfMode                   (source._sfMode                   ),
    _sfDrawOccluded           (source._sfDrawOccluded           ),
    _sfOccludedAlpha          (source._sfOccludedAlpha          ),
    _sfLineWidth              (source._sfLineWidth              )
{
}


/*-------------------------- destructors ----------------------------------*/

BulletDebugForegroundBase::~BulletDebugForegroundBase(void)
{
}

void BulletDebugForegroundBase::onCreate(const BulletDebugForeground *source)
{
    Inherited::onCreate(source);

    if(source != NULL)
    {
        BulletDebugForeground *pThis = static_cast<BulletDebugForeground *>(this);

        pThis->setWorld(source->getWorld());
    }
}

GetFieldHandlePtr BulletDebugForegroundBase::getHandleWorld           (void) const
{
    SFUnrecBulletCollisionWorldPtr::GetHandlePtr returnValue(
        new  SFUnrecBulletCollisionWorldPtr::GetHandle(
             &_sfWorld,
             this->getType().getFieldDesc(WorldFieldId),
             const_cast<BulletDebugForegroundBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr BulletDebugForegroundBase::editHandleWorld          (void)
{
    SFUnrecBulletCollisionWorldPtr::EditHandlePtr returnValue(
        new  SFUnrecBulletCollisionWorldPtr::EditHandle(
             &_sfWorld,
             this->getType().getFieldDesc(WorldFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&BulletDebugForeground::setWorld,
                    static_cast<BulletDebugForeground *>(this), _1));

    editSField(WorldFieldMask);

    return returnValue;
}

GetFieldHandlePtr BulletDebugForegroundBase::getHandleMode            (void) const
{
    SFInt32::GetHandlePtr returnValue(
        new  SFInt32::GetHandle(
             &_sfMode,
             this->getType().getFieldDesc(ModeFieldId),
             const_cast<BulletDebugForegroundBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr BulletDebugForegroundBase::editHandleMode           (void)
{
    SFInt32::EditHandlePtr returnValue(
        new  SFInt32::EditHandle(
             &_sfMode,
             this->getType().getFieldDesc(ModeFieldId),
             this));


    editSField(ModeFieldMask);

    return returnValue;
}

GetFieldHandlePtr BulletDebugForegroundBase::getHandleDrawOccluded    (void) const
{
    SFBool::GetHandlePtr returnValue(
        new  SFBool::GetHandle(
             &_sfDrawOccluded,
             this->getType().getFieldDesc(DrawOccludedFieldId),
             const_cast<BulletDebugForegroundBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr BulletDebugForegroundBase::editHandleDrawOccluded   (void)
{
    SFBool::EditHandlePtr returnValue(
        new  SFBool::EditHandle(
             &_sfDrawOccluded,
             this->getType().getFieldDesc(DrawOccludedFieldId),
             this));


    editSField(DrawOccludedFieldMask);

    return returnValue;
}

GetFieldHandlePtr BulletDebugForegroundBase::getHandleOccludedAlpha   (void) const
{
    SFReal32::GetHandlePtr returnValue(
        new  SFReal32::GetHandle(
             &_sfOccludedAlpha,
             this->getType().getFieldDesc(OccludedAlphaFieldId),
             const_cast<BulletDebugForegroundBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr BulletDebugForegroundBase::editHandleOccludedAlpha  (void)
{
    SFReal32::EditHandlePtr returnValue(
        new  SFReal32::EditHandle(
             &_sfOccludedAlpha,
             this->getType().getFieldDesc(OccludedAlphaFieldId),
             this));


    editSField(OccludedAlphaFieldMask);

    return returnValue;
}

GetFieldHandlePtr BulletDebugForegroundBase::getHandleLineWidth       (void) const
{
    SFReal32::GetHandlePtr returnValue(
        new  SFReal32::GetHandle(
             &_sfLineWidth,
             this->getType().getFieldDesc(LineWidthFieldId),
             const_cast<BulletDebugForegroundBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr BulletDebugForegroundBase::editHandleLineWidth      (void)
{
    SFReal32::EditHandlePtr returnValue(
        new  SFReal32::EditHandle(
             &_sfLineWidth,
             this->getType().getFieldDesc(LineWidthFieldId),
             this));


    editSField(LineWidthFieldMask);

    return returnValue;
}



#ifdef OSG_MT_CPTR_ASPECT
void BulletDebugForegroundBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    BulletDebugForeground *pThis = static_cast<BulletDebugForeground *>(this);

    pThis->execSync(static_cast<BulletDebugForeground *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif


#ifdef OSG_MT_CPTR_ASPECT
FieldContainer *BulletDebugForegroundBase::createAspectCopy(
    const FieldContainer *pRefAspect) const
{
    BulletDebugForeground *returnValue;

    newAspectCopy(returnValue,
                  dynamic_cast<const BulletDebugForeground *>(pRefAspect),
                  dynamic_cast<const BulletDebugForeground *>(this));

    return returnValue;
}
#endif

void BulletDebugForegroundBase::resolveLinks(void)
{
    Inherited::resolveLinks();

    static_cast<BulletDebugForeground *>(this)->setWorld(NULL);


}


OSG_END_NAMESPACE
