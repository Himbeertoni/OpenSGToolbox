/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 * contact: David Kabala (djkabala@gmail.com)                                *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class BulletCollisionWorld!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>
#include <boost/assign/list_of.hpp>

#include "OSGConfig.h"



#include "OSGBulletBroadphaseInterface.h" // InternalBroadphase Class

#include "OSGBulletCollisionWorldBase.h"
#include "OSGBulletCollisionWorld.h"

#include <boost/bind.hpp>

#ifdef WIN32 // turn off 'this' : used in base member initializer list warning
#pragma warning(disable:4355)
#endif

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::BulletCollisionWorld
    This core is a wrapper around the bullet btCollisionWorld.
 */

/***************************************************************************\
 *                        Field Documentation                              *
\***************************************************************************/

/*! \var BulletBroadphaseInterface * BulletCollisionWorldBase::_sfInternalBroadphase
    
*/

/*! \var bool            BulletCollisionWorldBase::_sfForceUpdateAllAabbs
    Passthrough value to btCollisionWorld.
*/


/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldTraits<BulletCollisionWorld *>::_type("BulletCollisionWorldPtr", "AttachmentContainerPtr");
#endif

OSG_FIELDTRAITS_GETTYPE(BulletCollisionWorld *)

OSG_EXPORT_PTR_SFIELD_FULL(PointerSField,
                           BulletCollisionWorld *,
                           0);

OSG_EXPORT_PTR_MFIELD_FULL(PointerMField,
                           BulletCollisionWorld *,
                           0);

DataType &FieldTraits< BulletCollisionWorld *, 1 >::getType(void)
{
    return FieldTraits<BulletCollisionWorld *, 0>::getType();
}


OSG_EXPORT_PTR_SFIELD(ChildPointerSField,
                      BulletCollisionWorld *,
                      UnrecordedRefCountPolicy,
                      1);


/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

void BulletCollisionWorldBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new SFUnrecChildBulletBroadphaseInterfacePtr::Description(
        SFUnrecChildBulletBroadphaseInterfacePtr::getClassType(),
        "InternalBroadphase",
        "",
        InternalBroadphaseFieldId, InternalBroadphaseFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FNullCheckAccess),
        static_cast<FieldEditMethodSig>(&BulletCollisionWorld::editHandleInternalBroadphase),
        static_cast<FieldGetMethodSig >(&BulletCollisionWorld::getHandleInternalBroadphase));

    oType.addInitialDesc(pDesc);

    pDesc = new BridgeSFBool::Description(
        BridgeSFBool::getClassType(),
        "ForceUpdateAllAabbs",
        "Passthrough value to btCollisionWorld.\n",
        ForceUpdateAllAabbsFieldId, ForceUpdateAllAabbsFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&BulletCollisionWorld::editHandleForceUpdateAllAabbs),
        static_cast<FieldGetMethodSig >(&BulletCollisionWorld::getHandleForceUpdateAllAabbs));

    oType.addInitialDesc(pDesc);
}


BulletCollisionWorldBase::TypeObject BulletCollisionWorldBase::_type(
    BulletCollisionWorldBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    0,
    NULL,
    BulletCollisionWorld::initMethod,
    BulletCollisionWorld::exitMethod,
    reinterpret_cast<InitalInsertDescFunc>(&BulletCollisionWorld::classDescInserter),
    false,
    0,
    "<?xml version=\"1.0\" ?>\n"
    "\n"
    "<FieldContainer\n"
    "    name=\"BulletCollisionWorld\"\n"
    "    parent=\"AttachmentContainer\"\n"
    "    library=\"ContribBullet\"\n"
    "    structure=\"abstract\"\n"
    "    pointerfieldtypes=\"both\"\n"
    "    systemcomponent=\"true\"\n"
    "    parentsystemcomponent=\"true\"\n"
    "    decoratable=\"false\"\n"
    "    useLocalIncludes=\"false\"\n"
    "    isNodeCore=\"false\"\n"
    "    childFields=\"single\"\n"
    "    authors=\"David Kabala (djkabala@gmail.com)\"\n"
    "    >\n"
    "    This core is a wrapper around the bullet btCollisionWorld.\n"
    "\n"
    "    <Field\n"
    "        name=\"InternalBroadphase\"\n"
    "        type=\"BulletBroadphaseInterface\"\n"
    "        cardinality=\"single\"\n"
    "        category=\"childpointer\"\n"
    "        childParentType=\"FieldContainer\"\n"
    "        visibility=\"external\"\n"
    "        access=\"protected\"\n"
    "        ptrFieldAccess = \"nullCheck\"\n"
    "        linkParentField=\"ParentWorld\"\n"
    "        defaultValue=\"NULL\"\n"
    "        >\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"ForceUpdateAllAabbs\"\n"
    "        type=\"bool\"\n"
    "        category=\"data\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        access=\"public\"\n"
    "        bridge=\"true\"\n"
    "        >\n"
    "        Passthrough value to btCollisionWorld.\n"
    "    </Field>\n"
    "\n"
    "</FieldContainer>\n",
    "This core is a wrapper around the bullet btCollisionWorld.\n"
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &BulletCollisionWorldBase::getType(void)
{
    return _type;
}

const FieldContainerType &BulletCollisionWorldBase::getType(void) const
{
    return _type;
}

UInt32 BulletCollisionWorldBase::getContainerSize(void) const
{
    return sizeof(BulletCollisionWorld);
}

/*------------------------- decorator get ------------------------------*/


//! Get the BulletCollisionWorld::_sfInternalBroadphase field.
const SFUnrecChildBulletBroadphaseInterfacePtr *BulletCollisionWorldBase::getSFInternalBroadphase(void) const
{
    return &_sfInternalBroadphase;
}

SFUnrecChildBulletBroadphaseInterfacePtr *BulletCollisionWorldBase::editSFInternalBroadphase(void)
{
    editSField(InternalBroadphaseFieldMask);

    return &_sfInternalBroadphase;
}

BridgeSFBool *BulletCollisionWorldBase::editSFForceUpdateAllAabbs(void)
{
    editSField(ForceUpdateAllAabbsFieldMask);

    return &_sfForceUpdateAllAabbs;
}

const BridgeSFBool *BulletCollisionWorldBase::getSFForceUpdateAllAabbs(void) const
{
    return &_sfForceUpdateAllAabbs;
}






/*------------------------------ access -----------------------------------*/

UInt32 BulletCollisionWorldBase::getBinSize(ConstFieldMaskArg whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (InternalBroadphaseFieldMask & whichField))
    {
        returnValue += _sfInternalBroadphase.getBinSize();
    }
    if(FieldBits::NoField != (ForceUpdateAllAabbsFieldMask & whichField))
    {
        returnValue += _sfForceUpdateAllAabbs.getBinSize();
    }

    return returnValue;
}

void BulletCollisionWorldBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (InternalBroadphaseFieldMask & whichField))
    {
        _sfInternalBroadphase.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ForceUpdateAllAabbsFieldMask & whichField))
    {
        _sfForceUpdateAllAabbs.copyToBin(pMem);
    }
}

void BulletCollisionWorldBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (InternalBroadphaseFieldMask & whichField))
    {
        editSField(InternalBroadphaseFieldMask);
        _sfInternalBroadphase.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ForceUpdateAllAabbsFieldMask & whichField))
    {
        editSField(ForceUpdateAllAabbsFieldMask);
        _sfForceUpdateAllAabbs.copyFromBin(pMem);
    }
}



/*------------------------- constructors ----------------------------------*/

BulletCollisionWorldBase::BulletCollisionWorldBase(void) :
    Inherited(),
    _sfInternalBroadphase     (this,
                          InternalBroadphaseFieldId,
                          BulletBroadphaseInterface::ParentWorldFieldId),
    _sfForceUpdateAllAabbs    (boost::bind(&BulletCollisionWorld::getExternalForceUpdateAllAabbs, static_cast<BulletCollisionWorld*>(this)),boost::bind(&BulletCollisionWorld::setExternalForceUpdateAllAabbs, static_cast<BulletCollisionWorld*>(this), _1))
{
}

BulletCollisionWorldBase::BulletCollisionWorldBase(const BulletCollisionWorldBase &source) :
    Inherited(source),
    _sfInternalBroadphase     (this,
                          InternalBroadphaseFieldId,
                          BulletBroadphaseInterface::ParentWorldFieldId),
    _sfForceUpdateAllAabbs    (boost::bind(&BulletCollisionWorld::getExternalForceUpdateAllAabbs, static_cast<BulletCollisionWorld*>(this)),boost::bind(&BulletCollisionWorld::setExternalForceUpdateAllAabbs, static_cast<BulletCollisionWorld*>(this), _1))
{
}


/*-------------------------- destructors ----------------------------------*/

BulletCollisionWorldBase::~BulletCollisionWorldBase(void)
{
}

/*-------------------------------------------------------------------------*/
/* Child linking                                                           */

bool BulletCollisionWorldBase::unlinkChild(
    FieldContainer * const pChild,
    UInt16           const childFieldId)
{
    if(childFieldId == InternalBroadphaseFieldId)
    {
        BulletBroadphaseInterface * pTypedChild =
            dynamic_cast<BulletBroadphaseInterface *>(pChild);

        if(pTypedChild != NULL)
        {
            if(_sfInternalBroadphase.getValue() == pTypedChild)
            {
                editSField(InternalBroadphaseFieldMask);

                _sfInternalBroadphase.setValue(NULL);

                return true;
            }

            SWARNING << "Parent (["        << this
                     << "] id ["           << this->getId()
                     << "] type ["         << this->getType().getCName()
                     << "] childFieldId [" << childFieldId
                     << "]) - Child (["    << pChild
                     << "] id ["           << pChild->getId()
                     << "] type ["         << pChild->getType().getCName()
                     << "]): link inconsistent!"
                     << std::endl;

            return false;
        }

        return false;
    }


    return Inherited::unlinkChild(pChild, childFieldId);
}

void BulletCollisionWorldBase::onCreate(const BulletCollisionWorld *source)
{
    Inherited::onCreate(source);

    if(source != NULL)
    {
        BulletCollisionWorld *pThis = static_cast<BulletCollisionWorld *>(this);

        pThis->setInternalBroadphase(source->getInternalBroadphase());
    }
}

GetFieldHandlePtr BulletCollisionWorldBase::getHandleInternalBroadphase (void) const
{
    SFUnrecChildBulletBroadphaseInterfacePtr::GetHandlePtr returnValue(
        new  SFUnrecChildBulletBroadphaseInterfacePtr::GetHandle(
             &_sfInternalBroadphase,
             this->getType().getFieldDesc(InternalBroadphaseFieldId),
             const_cast<BulletCollisionWorldBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr BulletCollisionWorldBase::editHandleInternalBroadphase(void)
{
    SFUnrecChildBulletBroadphaseInterfacePtr::EditHandlePtr returnValue(
        new  SFUnrecChildBulletBroadphaseInterfacePtr::EditHandle(
             &_sfInternalBroadphase,
             this->getType().getFieldDesc(InternalBroadphaseFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&BulletCollisionWorld::setInternalBroadphase,
                    static_cast<BulletCollisionWorld *>(this), _1));

    editSField(InternalBroadphaseFieldMask);

    return returnValue;
}

GetFieldHandlePtr BulletCollisionWorldBase::getHandleForceUpdateAllAabbs (void) const
{
    BridgeSFBool::GetHandlePtr returnValue(
        new  BridgeSFBool::GetHandle(
             &_sfForceUpdateAllAabbs,
             this->getType().getFieldDesc(ForceUpdateAllAabbsFieldId),
             const_cast<BulletCollisionWorldBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr BulletCollisionWorldBase::editHandleForceUpdateAllAabbs(void)
{
    BridgeSFBool::EditHandlePtr returnValue(
        new  BridgeSFBool::EditHandle(
             &_sfForceUpdateAllAabbs,
             this->getType().getFieldDesc(ForceUpdateAllAabbsFieldId),
             this));


    editSField(ForceUpdateAllAabbsFieldMask);

    return returnValue;
}



#ifdef OSG_MT_CPTR_ASPECT
void BulletCollisionWorldBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    BulletCollisionWorld *pThis = static_cast<BulletCollisionWorld *>(this);

    pThis->execSync(static_cast<BulletCollisionWorld *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif



void BulletCollisionWorldBase::resolveLinks(void)
{
    Inherited::resolveLinks();

    static_cast<BulletCollisionWorld *>(this)->setInternalBroadphase(NULL);


}


OSG_END_NAMESPACE
