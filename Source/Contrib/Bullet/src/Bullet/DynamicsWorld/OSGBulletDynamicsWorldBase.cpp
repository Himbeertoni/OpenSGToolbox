/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 * contact: David Kabala (djkabala@gmail.com)                                *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class BulletDynamicsWorld!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>
#include <boost/assign/list_of.hpp>

#include "OSGConfig.h"



#include "OSGFieldContainer.h"          // ParentHandler Class
#include "OSGBulletRigidBody.h"         // RigidBodies Class
#include "OSGBulletTypedConstraint.h"   // Constraints Class

#include "OSGBulletDynamicsWorldBase.h"
#include "OSGBulletDynamicsWorld.h"

#include <boost/bind.hpp>

#ifdef WIN32 // turn off 'this' : used in base member initializer list warning
#pragma warning(disable:4355)
#endif

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::BulletDynamicsWorld
    This core is a wrapper around the bullet btDynamicsWorld.
 */

/***************************************************************************\
 *                        Field Documentation                              *
\***************************************************************************/

/*! \var FieldContainer * BulletDynamicsWorldBase::_sfParentHandler
    
*/

/*! \var Vec3f           BulletDynamicsWorldBase::_sfGravity
    Passthrough value to btDynamicsWorld.
*/

/*! \var BulletRigidBody * BulletDynamicsWorldBase::_mfRigidBodies
    
*/

/*! \var BulletTypedConstraint * BulletDynamicsWorldBase::_mfConstraints
    
*/


/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldTraits<BulletDynamicsWorld *>::_type("BulletDynamicsWorldPtr", "BulletCollisionWorldPtr");
#endif

OSG_FIELDTRAITS_GETTYPE(BulletDynamicsWorld *)

OSG_EXPORT_PTR_SFIELD_FULL(PointerSField,
                           BulletDynamicsWorld *,
                           0);

OSG_EXPORT_PTR_MFIELD_FULL(PointerMField,
                           BulletDynamicsWorld *,
                           0);

DataType &FieldTraits< BulletDynamicsWorld *, 1 >::getType(void)
{
    return FieldTraits<BulletDynamicsWorld *, 0>::getType();
}


OSG_EXPORT_PTR_SFIELD(ChildPointerSField,
                      BulletDynamicsWorld *,
                      UnrecordedRefCountPolicy,
                      1);


/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

void BulletDynamicsWorldBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new SFParentFieldContainerPtr::Description(
        SFParentFieldContainerPtr::getClassType(),
        "ParentHandler",
        "",
        ParentHandlerFieldId, ParentHandlerFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast     <FieldEditMethodSig>(&BulletDynamicsWorld::invalidEditField),
        static_cast     <FieldGetMethodSig >(&BulletDynamicsWorld::invalidGetField));

    oType.addInitialDesc(pDesc);

    pDesc = new BridgeSFVec3f::Description(
        BridgeSFVec3f::getClassType(),
        "Gravity",
        "Passthrough value to btDynamicsWorld.\n",
        GravityFieldId, GravityFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&BulletDynamicsWorld::editHandleGravity),
        static_cast<FieldGetMethodSig >(&BulletDynamicsWorld::getHandleGravity));

    oType.addInitialDesc(pDesc);

    pDesc = new MFUnrecChildBulletRigidBodyPtr::Description(
        MFUnrecChildBulletRigidBodyPtr::getClassType(),
        "RigidBodies",
        "",
        RigidBodiesFieldId, RigidBodiesFieldMask,
        false,
        (Field::MFDefaultFlags | Field::FNullCheckAccess),
        static_cast<FieldEditMethodSig>(&BulletDynamicsWorld::editHandleRigidBodies),
        static_cast<FieldGetMethodSig >(&BulletDynamicsWorld::getHandleRigidBodies));

    oType.addInitialDesc(pDesc);

    pDesc = new MFUnrecChildBulletTypedConstraintPtr::Description(
        MFUnrecChildBulletTypedConstraintPtr::getClassType(),
        "Constraints",
        "",
        ConstraintsFieldId, ConstraintsFieldMask,
        false,
        (Field::MFDefaultFlags | Field::FNullCheckAccess),
        static_cast<FieldEditMethodSig>(&BulletDynamicsWorld::editHandleConstraints),
        static_cast<FieldGetMethodSig >(&BulletDynamicsWorld::getHandleConstraints));

    oType.addInitialDesc(pDesc);
}


BulletDynamicsWorldBase::TypeObject BulletDynamicsWorldBase::_type(
    BulletDynamicsWorldBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    0,
    NULL,
    BulletDynamicsWorld::initMethod,
    BulletDynamicsWorld::exitMethod,
    reinterpret_cast<InitalInsertDescFunc>(&BulletDynamicsWorld::classDescInserter),
    false,
    0,
    "<?xml version=\"1.0\" ?>\n"
    "\n"
    "<FieldContainer\n"
    "    name=\"BulletDynamicsWorld\"\n"
    "    parent=\"BulletCollisionWorld\"\n"
    "    library=\"ContribBullet\"\n"
    "    structure=\"abstract\"\n"
    "    pointerfieldtypes=\"both\"\n"
    "    systemcomponent=\"true\"\n"
    "    parentsystemcomponent=\"true\"\n"
    "    decoratable=\"false\"\n"
    "    useLocalIncludes=\"false\"\n"
    "    isNodeCore=\"false\"\n"
    "    childFields=\"single\"\n"
    "    authors=\"David Kabala (djkabala@gmail.com)\"\n"
    "    >\n"
    "    This core is a wrapper around the bullet btDynamicsWorld.\n"
    "    <Field\n"
    "       name=\"ParentHandler\"\n"
    "       type=\"FieldContainer\"\n"
    "       cardinality=\"single\"\n"
    "       access=\"none\"\n"
    "       category=\"parentpointer\"\n"
    "       >\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"Gravity\"\n"
    "        type=\"Vec3f\"\n"
    "        category=\"data\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        access=\"public\"\n"
    "        bridge=\"true\"\n"
    "        >\n"
    "        Passthrough value to btDynamicsWorld.\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"RigidBodies\"\n"
    "        type=\"BulletRigidBody\"\n"
    "        cardinality=\"multi\"\n"
    "        category=\"childpointer\"\n"
    "        childParentType=\"FieldContainer\"\n"
    "        visibility=\"external\"\n"
    "        access=\"public\"\n"
    "        ptrFieldAccess = \"nullCheck\"\n"
    "        linkParentField=\"ParentWorld\"\n"
    "        >\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"Constraints\"\n"
    "        type=\"BulletTypedConstraint\"\n"
    "        cardinality=\"multi\"\n"
    "        category=\"childpointer\"\n"
    "        childParentType=\"FieldContainer\"\n"
    "        visibility=\"external\"\n"
    "        access=\"public\"\n"
    "        ptrFieldAccess = \"nullCheck\"\n"
    "        linkParentField=\"ParentWorld\"\n"
    "        >\n"
    "    </Field>\n"
    "    <!--<Field-->\n"
    "        <!--name=\"Constraints\"-->\n"
    "        <!--type=\"\"-->\n"
    "        <!--category=\"pointer\"-->\n"
    "        <!--cardinality=\"single\"-->\n"
    "        <!--visibility=\"external\"-->\n"
    "        <!--access=\"public\"-->\n"
    "        <!--bridge=\"true\"-->\n"
    "        <!-->-->\n"
    "        <!--Passthrough value to btDynamicsWorld.-->\n"
    "    <!--</Field>-->\n"
    "    <!--<Field-->\n"
    "        <!--name=\"Actions\"-->\n"
    "        <!--type=\"\"-->\n"
    "        <!--category=\"pointer\"-->\n"
    "        <!--cardinality=\"single\"-->\n"
    "        <!--visibility=\"external\"-->\n"
    "        <!--access=\"public\"-->\n"
    "        <!--bridge=\"true\"-->\n"
    "        <!-->-->\n"
    "        <!--Passthrough value to btDynamicsWorld.-->\n"
    "    <!--</Field>-->\n"
    "</FieldContainer>\n",
    "This core is a wrapper around the bullet btDynamicsWorld.\n"
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &BulletDynamicsWorldBase::getType(void)
{
    return _type;
}

const FieldContainerType &BulletDynamicsWorldBase::getType(void) const
{
    return _type;
}

UInt32 BulletDynamicsWorldBase::getContainerSize(void) const
{
    return sizeof(BulletDynamicsWorld);
}

/*------------------------- decorator get ------------------------------*/



BridgeSFVec3f *BulletDynamicsWorldBase::editSFGravity(void)
{
    editSField(GravityFieldMask);

    return &_sfGravity;
}

const BridgeSFVec3f *BulletDynamicsWorldBase::getSFGravity(void) const
{
    return &_sfGravity;
}


//! Get the BulletDynamicsWorld::_mfRigidBodies field.
const MFUnrecChildBulletRigidBodyPtr *BulletDynamicsWorldBase::getMFRigidBodies(void) const
{
    return &_mfRigidBodies;
}

//! Get the BulletDynamicsWorld::_mfConstraints field.
const MFUnrecChildBulletTypedConstraintPtr *BulletDynamicsWorldBase::getMFConstraints(void) const
{
    return &_mfConstraints;
}



void BulletDynamicsWorldBase::pushToRigidBodies(BulletRigidBody * const value)
{
    if(value == NULL)
        return;

    editMField(RigidBodiesFieldMask, _mfRigidBodies);

    _mfRigidBodies.push_back(value);
}

void BulletDynamicsWorldBase::assignRigidBodies(const MFUnrecChildBulletRigidBodyPtr &value)
{
    MFUnrecChildBulletRigidBodyPtr::const_iterator elemIt  =
        value.begin();
    MFUnrecChildBulletRigidBodyPtr::const_iterator elemEnd =
        value.end  ();

    static_cast<BulletDynamicsWorld *>(this)->clearRigidBodies();

    while(elemIt != elemEnd)
    {
        this->pushToRigidBodies(*elemIt);

        ++elemIt;
    }
}

void BulletDynamicsWorldBase::insertIntoRigidBodies(UInt32               uiIndex,
                                                   BulletRigidBody * const value   )
{
    if(value == NULL)
        return;

    editMField(RigidBodiesFieldMask, _mfRigidBodies);

    MFUnrecChildBulletRigidBodyPtr::iterator fieldIt = _mfRigidBodies.begin_nc();

    fieldIt += uiIndex;

    _mfRigidBodies.insert(fieldIt, value);
}

void BulletDynamicsWorldBase::replaceInRigidBodies(UInt32               uiIndex,
                                                       BulletRigidBody * const value   )
{
    if(value == NULL)
        return;

    if(uiIndex >= _mfRigidBodies.size())
        return;

    editMField(RigidBodiesFieldMask, _mfRigidBodies);

    _mfRigidBodies.replace(uiIndex, value);
}

void BulletDynamicsWorldBase::replaceObjInRigidBodies(BulletRigidBody * const pOldElem,
                                                        BulletRigidBody * const pNewElem)
{
    if(pNewElem == NULL)
        return;

    Int32  elemIdx = _mfRigidBodies.findIndex(pOldElem);

    if(elemIdx != -1)
    {
        editMField(RigidBodiesFieldMask, _mfRigidBodies);

        _mfRigidBodies.replace(elemIdx, pNewElem);
    }
}

void BulletDynamicsWorldBase::removeFromRigidBodies(UInt32 uiIndex)
{
    if(uiIndex < _mfRigidBodies.size())
    {
        editMField(RigidBodiesFieldMask, _mfRigidBodies);

        _mfRigidBodies.erase(uiIndex);
    }
}

void BulletDynamicsWorldBase::removeObjFromRigidBodies(BulletRigidBody * const value)
{
    Int32 iElemIdx = _mfRigidBodies.findIndex(value);

    if(iElemIdx != -1)
    {
        editMField(RigidBodiesFieldMask, _mfRigidBodies);

        _mfRigidBodies.erase(iElemIdx);
    }
}
void BulletDynamicsWorldBase::clearRigidBodies(void)
{
    editMField(RigidBodiesFieldMask, _mfRigidBodies);


    _mfRigidBodies.clear();
}

void BulletDynamicsWorldBase::pushToConstraints(BulletTypedConstraint * const value)
{
    if(value == NULL)
        return;

    editMField(ConstraintsFieldMask, _mfConstraints);

    _mfConstraints.push_back(value);
}

void BulletDynamicsWorldBase::assignConstraints(const MFUnrecChildBulletTypedConstraintPtr &value)
{
    MFUnrecChildBulletTypedConstraintPtr::const_iterator elemIt  =
        value.begin();
    MFUnrecChildBulletTypedConstraintPtr::const_iterator elemEnd =
        value.end  ();

    static_cast<BulletDynamicsWorld *>(this)->clearConstraints();

    while(elemIt != elemEnd)
    {
        this->pushToConstraints(*elemIt);

        ++elemIt;
    }
}

void BulletDynamicsWorldBase::insertIntoConstraints(UInt32               uiIndex,
                                                   BulletTypedConstraint * const value   )
{
    if(value == NULL)
        return;

    editMField(ConstraintsFieldMask, _mfConstraints);

    MFUnrecChildBulletTypedConstraintPtr::iterator fieldIt = _mfConstraints.begin_nc();

    fieldIt += uiIndex;

    _mfConstraints.insert(fieldIt, value);
}

void BulletDynamicsWorldBase::replaceInConstraints(UInt32               uiIndex,
                                                       BulletTypedConstraint * const value   )
{
    if(value == NULL)
        return;

    if(uiIndex >= _mfConstraints.size())
        return;

    editMField(ConstraintsFieldMask, _mfConstraints);

    _mfConstraints.replace(uiIndex, value);
}

void BulletDynamicsWorldBase::replaceObjInConstraints(BulletTypedConstraint * const pOldElem,
                                                        BulletTypedConstraint * const pNewElem)
{
    if(pNewElem == NULL)
        return;

    Int32  elemIdx = _mfConstraints.findIndex(pOldElem);

    if(elemIdx != -1)
    {
        editMField(ConstraintsFieldMask, _mfConstraints);

        _mfConstraints.replace(elemIdx, pNewElem);
    }
}

void BulletDynamicsWorldBase::removeFromConstraints(UInt32 uiIndex)
{
    if(uiIndex < _mfConstraints.size())
    {
        editMField(ConstraintsFieldMask, _mfConstraints);

        _mfConstraints.erase(uiIndex);
    }
}

void BulletDynamicsWorldBase::removeObjFromConstraints(BulletTypedConstraint * const value)
{
    Int32 iElemIdx = _mfConstraints.findIndex(value);

    if(iElemIdx != -1)
    {
        editMField(ConstraintsFieldMask, _mfConstraints);

        _mfConstraints.erase(iElemIdx);
    }
}
void BulletDynamicsWorldBase::clearConstraints(void)
{
    editMField(ConstraintsFieldMask, _mfConstraints);


    _mfConstraints.clear();
}



/*------------------------------ access -----------------------------------*/

UInt32 BulletDynamicsWorldBase::getBinSize(ConstFieldMaskArg whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (ParentHandlerFieldMask & whichField))
    {
        returnValue += _sfParentHandler.getBinSize();
    }
    if(FieldBits::NoField != (GravityFieldMask & whichField))
    {
        returnValue += _sfGravity.getBinSize();
    }
    if(FieldBits::NoField != (RigidBodiesFieldMask & whichField))
    {
        returnValue += _mfRigidBodies.getBinSize();
    }
    if(FieldBits::NoField != (ConstraintsFieldMask & whichField))
    {
        returnValue += _mfConstraints.getBinSize();
    }

    return returnValue;
}

void BulletDynamicsWorldBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (ParentHandlerFieldMask & whichField))
    {
        _sfParentHandler.copyToBin(pMem);
    }
    if(FieldBits::NoField != (GravityFieldMask & whichField))
    {
        _sfGravity.copyToBin(pMem);
    }
    if(FieldBits::NoField != (RigidBodiesFieldMask & whichField))
    {
        _mfRigidBodies.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ConstraintsFieldMask & whichField))
    {
        _mfConstraints.copyToBin(pMem);
    }
}

void BulletDynamicsWorldBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (ParentHandlerFieldMask & whichField))
    {
        editSField(ParentHandlerFieldMask);
        _sfParentHandler.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (GravityFieldMask & whichField))
    {
        editSField(GravityFieldMask);
        _sfGravity.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (RigidBodiesFieldMask & whichField))
    {
        editMField(RigidBodiesFieldMask, _mfRigidBodies);
        _mfRigidBodies.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ConstraintsFieldMask & whichField))
    {
        editMField(ConstraintsFieldMask, _mfConstraints);
        _mfConstraints.copyFromBin(pMem);
    }
}



/*------------------------- constructors ----------------------------------*/

BulletDynamicsWorldBase::BulletDynamicsWorldBase(void) :
    Inherited(),
    _sfParentHandler          (NULL),
    _sfGravity                (boost::bind(&BulletDynamicsWorld::getExternalGravity, static_cast<BulletDynamicsWorld*>(this)),boost::bind(&BulletDynamicsWorld::setExternalGravity, static_cast<BulletDynamicsWorld*>(this), _1)),
    _mfRigidBodies            (this,
                          RigidBodiesFieldId,
                          BulletRigidBody::ParentWorldFieldId),
    _mfConstraints            (this,
                          ConstraintsFieldId,
                          BulletTypedConstraint::ParentWorldFieldId)
{
}

BulletDynamicsWorldBase::BulletDynamicsWorldBase(const BulletDynamicsWorldBase &source) :
    Inherited(source),
    _sfParentHandler          (NULL),
    _sfGravity                (boost::bind(&BulletDynamicsWorld::getExternalGravity, static_cast<BulletDynamicsWorld*>(this)),boost::bind(&BulletDynamicsWorld::setExternalGravity, static_cast<BulletDynamicsWorld*>(this), _1)),
    _mfRigidBodies            (this,
                          RigidBodiesFieldId,
                          BulletRigidBody::ParentWorldFieldId),
    _mfConstraints            (this,
                          ConstraintsFieldId,
                          BulletTypedConstraint::ParentWorldFieldId)
{
}


/*-------------------------- destructors ----------------------------------*/

BulletDynamicsWorldBase::~BulletDynamicsWorldBase(void)
{
}
/*-------------------------------------------------------------------------*/
/* Parent linking                                                          */

bool BulletDynamicsWorldBase::linkParent(
    FieldContainer * const pParent,
    UInt16           const childFieldId,
    UInt16           const parentFieldId )
{
    if(parentFieldId == ParentHandlerFieldId)
    {
        FieldContainer * pTypedParent =
            dynamic_cast< FieldContainer * >(pParent);

        if(pTypedParent != NULL)
        {
            FieldContainer *pOldParent =
                _sfParentHandler.getValue         ();

            UInt16 oldChildFieldId =
                _sfParentHandler.getParentFieldPos();

            if(pOldParent != NULL)
            {
                pOldParent->unlinkChild(this, oldChildFieldId);
            }

            editSField(ParentHandlerFieldMask);

            _sfParentHandler.setValue(static_cast<FieldContainer *>(pParent), childFieldId);

            return true;
        }

        return false;
    }

    return Inherited::linkParent(pParent, childFieldId, parentFieldId);
}

bool BulletDynamicsWorldBase::unlinkParent(
    FieldContainer * const pParent,
    UInt16           const parentFieldId)
{
    if(parentFieldId == ParentHandlerFieldId)
    {
        FieldContainer * pTypedParent =
            dynamic_cast< FieldContainer * >(pParent);

        if(pTypedParent != NULL)
        {
            if(_sfParentHandler.getValue() == pTypedParent)
            {
                editSField(ParentHandlerFieldMask);

                _sfParentHandler.setValue(NULL, 0xFFFF);

                return true;
            }

            SWARNING << "Child (["          << this
                     << "] id ["            << this->getId()
                     << "] type ["          << this->getType().getCName()
                     << "] parentFieldId [" << parentFieldId
                     << "]) - Parent (["    << pParent
                     << "] id ["            << pParent->getId()
                     << "] type ["          << pParent->getType().getCName()
                     << "]): link inconsistent!"
                     << std::endl;

            return false;
        }

        return false;
    }

    return Inherited::unlinkParent(pParent, parentFieldId);
}


/*-------------------------------------------------------------------------*/
/* Child linking                                                           */

bool BulletDynamicsWorldBase::unlinkChild(
    FieldContainer * const pChild,
    UInt16           const childFieldId)
{
    if(childFieldId == RigidBodiesFieldId)
    {
        BulletRigidBody * pTypedChild =
            dynamic_cast<BulletRigidBody *>(pChild);

        if(pTypedChild != NULL)
        {
            Int32 iChildIdx = _mfRigidBodies.findIndex(pTypedChild);

            if(iChildIdx != -1)
            {
                editMField(RigidBodiesFieldMask, _mfRigidBodies);

                _mfRigidBodies.erase(iChildIdx);

                return true;
            }

            SWARNING << "Parent (["        << this
                     << "] id ["           << this->getId()
                     << "] type ["         << this->getType().getCName()
                     << "] childFieldId [" << childFieldId
                     << "]) - Child (["    << pChild
                     << "] id ["           << pChild->getId()
                     << "] type ["         << pChild->getType().getCName()
                     << "]): link inconsistent!"
                     << std::endl;

            return false;
        }

        return false;
    }

    if(childFieldId == ConstraintsFieldId)
    {
        BulletTypedConstraint * pTypedChild =
            dynamic_cast<BulletTypedConstraint *>(pChild);

        if(pTypedChild != NULL)
        {
            Int32 iChildIdx = _mfConstraints.findIndex(pTypedChild);

            if(iChildIdx != -1)
            {
                editMField(ConstraintsFieldMask, _mfConstraints);

                _mfConstraints.erase(iChildIdx);

                return true;
            }

            SWARNING << "Parent (["        << this
                     << "] id ["           << this->getId()
                     << "] type ["         << this->getType().getCName()
                     << "] childFieldId [" << childFieldId
                     << "]) - Child (["    << pChild
                     << "] id ["           << pChild->getId()
                     << "] type ["         << pChild->getType().getCName()
                     << "]): link inconsistent!"
                     << std::endl;

            return false;
        }

        return false;
    }


    return Inherited::unlinkChild(pChild, childFieldId);
}

void BulletDynamicsWorldBase::onCreate(const BulletDynamicsWorld *source)
{
    Inherited::onCreate(source);

    if(source != NULL)
    {
        BulletDynamicsWorld *pThis = static_cast<BulletDynamicsWorld *>(this);

        MFUnrecChildBulletRigidBodyPtr::const_iterator RigidBodiesIt  =
            source->_mfRigidBodies.begin();
        MFUnrecChildBulletRigidBodyPtr::const_iterator RigidBodiesEnd =
            source->_mfRigidBodies.end  ();

        while(RigidBodiesIt != RigidBodiesEnd)
        {
            pThis->pushToRigidBodies(*RigidBodiesIt);

            ++RigidBodiesIt;
        }

        MFUnrecChildBulletTypedConstraintPtr::const_iterator ConstraintsIt  =
            source->_mfConstraints.begin();
        MFUnrecChildBulletTypedConstraintPtr::const_iterator ConstraintsEnd =
            source->_mfConstraints.end  ();

        while(ConstraintsIt != ConstraintsEnd)
        {
            pThis->pushToConstraints(*ConstraintsIt);

            ++ConstraintsIt;
        }
    }
}

GetFieldHandlePtr BulletDynamicsWorldBase::getHandleParentHandler   (void) const
{
    SFParentFieldContainerPtr::GetHandlePtr returnValue;

    return returnValue;
}

EditFieldHandlePtr BulletDynamicsWorldBase::editHandleParentHandler  (void)
{
    EditFieldHandlePtr returnValue;

    return returnValue;
}

GetFieldHandlePtr BulletDynamicsWorldBase::getHandleGravity         (void) const
{
    BridgeSFVec3f::GetHandlePtr returnValue(
        new  BridgeSFVec3f::GetHandle(
             &_sfGravity,
             this->getType().getFieldDesc(GravityFieldId),
             const_cast<BulletDynamicsWorldBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr BulletDynamicsWorldBase::editHandleGravity        (void)
{
    BridgeSFVec3f::EditHandlePtr returnValue(
        new  BridgeSFVec3f::EditHandle(
             &_sfGravity,
             this->getType().getFieldDesc(GravityFieldId),
             this));


    editSField(GravityFieldMask);

    return returnValue;
}

GetFieldHandlePtr BulletDynamicsWorldBase::getHandleRigidBodies     (void) const
{
    MFUnrecChildBulletRigidBodyPtr::GetHandlePtr returnValue(
        new  MFUnrecChildBulletRigidBodyPtr::GetHandle(
             &_mfRigidBodies,
             this->getType().getFieldDesc(RigidBodiesFieldId),
             const_cast<BulletDynamicsWorldBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr BulletDynamicsWorldBase::editHandleRigidBodies    (void)
{
    MFUnrecChildBulletRigidBodyPtr::EditHandlePtr returnValue(
        new  MFUnrecChildBulletRigidBodyPtr::EditHandle(
             &_mfRigidBodies,
             this->getType().getFieldDesc(RigidBodiesFieldId),
             this));

    returnValue->setAddMethod(
        boost::bind(&BulletDynamicsWorld::pushToRigidBodies,
                    static_cast<BulletDynamicsWorld *>(this), _1));
    returnValue->setInsertMethod(
        boost::bind(&BulletDynamicsWorld::insertIntoRigidBodies,
                    static_cast<BulletDynamicsWorld *>(this), _1, _2));
    returnValue->setReplaceMethod(
        boost::bind(&BulletDynamicsWorld::replaceInRigidBodies,
                    static_cast<BulletDynamicsWorld *>(this), _1, _2));
    returnValue->setReplaceObjMethod(
        boost::bind(&BulletDynamicsWorld::replaceObjInRigidBodies,
                    static_cast<BulletDynamicsWorld *>(this), _1, _2));
    returnValue->setRemoveMethod(
        boost::bind(&BulletDynamicsWorld::removeFromRigidBodies,
                    static_cast<BulletDynamicsWorld *>(this), _1));
    returnValue->setRemoveObjMethod(
        boost::bind(&BulletDynamicsWorld::removeObjFromRigidBodies,
                    static_cast<BulletDynamicsWorld *>(this), _1));
    returnValue->setClearMethod(
        boost::bind(&BulletDynamicsWorld::clearRigidBodies,
                    static_cast<BulletDynamicsWorld *>(this)));

    editMField(RigidBodiesFieldMask, _mfRigidBodies);

    return returnValue;
}

GetFieldHandlePtr BulletDynamicsWorldBase::getHandleConstraints     (void) const
{
    MFUnrecChildBulletTypedConstraintPtr::GetHandlePtr returnValue(
        new  MFUnrecChildBulletTypedConstraintPtr::GetHandle(
             &_mfConstraints,
             this->getType().getFieldDesc(ConstraintsFieldId),
             const_cast<BulletDynamicsWorldBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr BulletDynamicsWorldBase::editHandleConstraints    (void)
{
    MFUnrecChildBulletTypedConstraintPtr::EditHandlePtr returnValue(
        new  MFUnrecChildBulletTypedConstraintPtr::EditHandle(
             &_mfConstraints,
             this->getType().getFieldDesc(ConstraintsFieldId),
             this));

    returnValue->setAddMethod(
        boost::bind(&BulletDynamicsWorld::pushToConstraints,
                    static_cast<BulletDynamicsWorld *>(this), _1));
    returnValue->setInsertMethod(
        boost::bind(&BulletDynamicsWorld::insertIntoConstraints,
                    static_cast<BulletDynamicsWorld *>(this), _1, _2));
    returnValue->setReplaceMethod(
        boost::bind(&BulletDynamicsWorld::replaceInConstraints,
                    static_cast<BulletDynamicsWorld *>(this), _1, _2));
    returnValue->setReplaceObjMethod(
        boost::bind(&BulletDynamicsWorld::replaceObjInConstraints,
                    static_cast<BulletDynamicsWorld *>(this), _1, _2));
    returnValue->setRemoveMethod(
        boost::bind(&BulletDynamicsWorld::removeFromConstraints,
                    static_cast<BulletDynamicsWorld *>(this), _1));
    returnValue->setRemoveObjMethod(
        boost::bind(&BulletDynamicsWorld::removeObjFromConstraints,
                    static_cast<BulletDynamicsWorld *>(this), _1));
    returnValue->setClearMethod(
        boost::bind(&BulletDynamicsWorld::clearConstraints,
                    static_cast<BulletDynamicsWorld *>(this)));

    editMField(ConstraintsFieldMask, _mfConstraints);

    return returnValue;
}



#ifdef OSG_MT_CPTR_ASPECT
void BulletDynamicsWorldBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    BulletDynamicsWorld *pThis = static_cast<BulletDynamicsWorld *>(this);

    pThis->execSync(static_cast<BulletDynamicsWorld *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif



void BulletDynamicsWorldBase::resolveLinks(void)
{
    Inherited::resolveLinks();

    static_cast<BulletDynamicsWorld *>(this)->clearRigidBodies();

    static_cast<BulletDynamicsWorld *>(this)->clearConstraints();


}


OSG_END_NAMESPACE
