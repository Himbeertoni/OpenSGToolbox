/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 * contact: David Kabala (djkabala@gmail.com)                                *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class BulletHandler!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>
#include <boost/assign/list_of.hpp>

#include "OSGConfig.h"



#include "OSGBulletDynamicsWorld.h"     // DynamicsWorld Class

#include "OSGBulletHandlerBase.h"
#include "OSGBulletHandler.h"
#include "OSGBulletTypedConstraint.h"

#include <boost/bind.hpp>

#include "OSGEventDetails.h"

#ifdef WIN32 // turn off 'this' : used in base member initializer list warning
#pragma warning(disable:4355)
#endif

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::BulletHandler
    
 */

/***************************************************************************\
 *                        Field Documentation                              *
\***************************************************************************/

/*! \var Real32          BulletHandlerBase::_sfStepSize
    
*/

/*! \var UInt32          BulletHandlerBase::_sfMaxStepsPerUpdate
    
*/

/*! \var BulletDynamicsWorld * BulletHandlerBase::_sfDynamicsWorld
    
*/


/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldTraits<BulletHandler *>::_type("BulletHandlerPtr", "AttachmentContainerPtr");
#endif

OSG_FIELDTRAITS_GETTYPE(BulletHandler *)

OSG_EXPORT_PTR_SFIELD_FULL(PointerSField,
                           BulletHandler *,
                           0);

OSG_EXPORT_PTR_MFIELD_FULL(PointerMField,
                           BulletHandler *,
                           0);

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

void BulletHandlerBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new SFReal32::Description(
        SFReal32::getClassType(),
        "StepSize",
        "",
        StepSizeFieldId, StepSizeFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&BulletHandler::editHandleStepSize),
        static_cast<FieldGetMethodSig >(&BulletHandler::getHandleStepSize));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUInt32::Description(
        SFUInt32::getClassType(),
        "MaxStepsPerUpdate",
        "",
        MaxStepsPerUpdateFieldId, MaxStepsPerUpdateFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&BulletHandler::editHandleMaxStepsPerUpdate),
        static_cast<FieldGetMethodSig >(&BulletHandler::getHandleMaxStepsPerUpdate));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecChildBulletDynamicsWorldPtr::Description(
        SFUnrecChildBulletDynamicsWorldPtr::getClassType(),
        "DynamicsWorld",
        "",
        DynamicsWorldFieldId, DynamicsWorldFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FNullCheckAccess),
        static_cast<FieldEditMethodSig>(&BulletHandler::editHandleDynamicsWorld),
        static_cast<FieldGetMethodSig >(&BulletHandler::getHandleDynamicsWorld));

    oType.addInitialDesc(pDesc);
}


BulletHandlerBase::TypeObject BulletHandlerBase::_type(
    BulletHandlerBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    0,
    reinterpret_cast<PrototypeCreateF>(&BulletHandlerBase::createEmptyLocal),
    BulletHandler::initMethod,
    BulletHandler::exitMethod,
    reinterpret_cast<InitalInsertDescFunc>(&BulletHandler::classDescInserter),
    false,
    0,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "    name=\"BulletHandler\"\n"
    "    parent=\"AttachmentContainer\"\n"
    "    library=\"ContribBullet\"\n"
    "    pointerfieldtypes=\"both\"\n"
    "    structure=\"concrete\"\n"
    "    systemcomponent=\"true\"\n"
    "    parentsystemcomponent=\"true\"\n"
    "    decoratable=\"false\"\n"
    "    useLocalIncludes=\"false\"\n"
    "    isNodeCore=\"false\"\n"
    "    authors=\"David Kabala (djkabala@gmail.com)\"\n"
    "    >\n"
    "    <Field\n"
    "        name=\"StepSize\"\n"
    "        type=\"Real32\"\n"
    "        category=\"data\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        defaultValue=\"0.0167f\"\n"
    "        access=\"public\"\n"
    "        >\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"MaxStepsPerUpdate\"\n"
    "        type=\"UInt32\"\n"
    "        category=\"data\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        defaultValue=\"10\"\n"
    "        access=\"public\"\n"
    "        >\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"DynamicsWorld\"\n"
    "        type=\"BulletDynamicsWorld\"\n"
    "        cardinality=\"single\"\n"
    "        category=\"childpointer\"\n"
    "        childParentType=\"FieldContainer\"\n"
    "        visibility=\"external\"\n"
    "        access=\"public\"\n"
    "        ptrFieldAccess = \"nullCheck\"\n"
    "        linkParentField=\"ParentHandler\"\n"
    "        defaultValue=\"NULL\"\n"
    "        >\n"
    "    </Field>\n"
    "    <ProducedEvent\n"
    "        name=\"SimulationUpdated\"\n"
    "        detailsType=\"BulletSimulationEventDetails\"\n"
    "        consumable=\"true\"\n"
    "        >\n"
    "    </ProducedEvent>\n"
    "</FieldContainer>\n",
    ""
    );

//! BulletHandler Produced Events

EventDescription *BulletHandlerBase::_eventDesc[] =
{
    new EventDescription("SimulationUpdated", 
                          "",
                          SimulationUpdatedEventId, 
                          FieldTraits<BulletSimulationEventDetails *>::getType(),
                          true,
                          static_cast<EventGetMethod>(&BulletHandlerBase::getHandleSimulationUpdatedSignal))

};

EventProducerType BulletHandlerBase::_producerType(
    "BulletHandlerProducerType",
    "EventProducerType",
    "",
    InitEventProducerFunctor(),
    _eventDesc,
    sizeof(_eventDesc));

/*------------------------------ get -----------------------------------*/

FieldContainerType &BulletHandlerBase::getType(void)
{
    return _type;
}

const FieldContainerType &BulletHandlerBase::getType(void) const
{
    return _type;
}

const EventProducerType &BulletHandlerBase::getProducerType(void) const
{
    return _producerType;
}

UInt32 BulletHandlerBase::getContainerSize(void) const
{
    return sizeof(BulletHandler);
}

/*------------------------- decorator get ------------------------------*/


SFReal32 *BulletHandlerBase::editSFStepSize(void)
{
    editSField(StepSizeFieldMask);

    return &_sfStepSize;
}

const SFReal32 *BulletHandlerBase::getSFStepSize(void) const
{
    return &_sfStepSize;
}


SFUInt32 *BulletHandlerBase::editSFMaxStepsPerUpdate(void)
{
    editSField(MaxStepsPerUpdateFieldMask);

    return &_sfMaxStepsPerUpdate;
}

const SFUInt32 *BulletHandlerBase::getSFMaxStepsPerUpdate(void) const
{
    return &_sfMaxStepsPerUpdate;
}


//! Get the BulletHandler::_sfDynamicsWorld field.
const SFUnrecChildBulletDynamicsWorldPtr *BulletHandlerBase::getSFDynamicsWorld(void) const
{
    return &_sfDynamicsWorld;
}

SFUnrecChildBulletDynamicsWorldPtr *BulletHandlerBase::editSFDynamicsWorld  (void)
{
    editSField(DynamicsWorldFieldMask);

    return &_sfDynamicsWorld;
}





/*------------------------------ access -----------------------------------*/

UInt32 BulletHandlerBase::getBinSize(ConstFieldMaskArg whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (StepSizeFieldMask & whichField))
    {
        returnValue += _sfStepSize.getBinSize();
    }
    if(FieldBits::NoField != (MaxStepsPerUpdateFieldMask & whichField))
    {
        returnValue += _sfMaxStepsPerUpdate.getBinSize();
    }
    if(FieldBits::NoField != (DynamicsWorldFieldMask & whichField))
    {
        returnValue += _sfDynamicsWorld.getBinSize();
    }

    return returnValue;
}

void BulletHandlerBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (StepSizeFieldMask & whichField))
    {
        _sfStepSize.copyToBin(pMem);
    }
    if(FieldBits::NoField != (MaxStepsPerUpdateFieldMask & whichField))
    {
        _sfMaxStepsPerUpdate.copyToBin(pMem);
    }
    if(FieldBits::NoField != (DynamicsWorldFieldMask & whichField))
    {
        _sfDynamicsWorld.copyToBin(pMem);
    }
}

void BulletHandlerBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (StepSizeFieldMask & whichField))
    {
        editSField(StepSizeFieldMask);
        _sfStepSize.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (MaxStepsPerUpdateFieldMask & whichField))
    {
        editSField(MaxStepsPerUpdateFieldMask);
        _sfMaxStepsPerUpdate.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (DynamicsWorldFieldMask & whichField))
    {
        editSField(DynamicsWorldFieldMask);
        _sfDynamicsWorld.copyFromBin(pMem);
    }
}

//! create a new instance of the class
BulletHandlerTransitPtr BulletHandlerBase::createLocal(BitVector bFlags)
{
    BulletHandlerTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyLocal(bFlags);

        fc = dynamic_pointer_cast<BulletHandler>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class, copy the container flags
BulletHandlerTransitPtr BulletHandlerBase::createDependent(BitVector bFlags)
{
    BulletHandlerTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyDependent(bFlags);

        fc = dynamic_pointer_cast<BulletHandler>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class
BulletHandlerTransitPtr BulletHandlerBase::create(void)
{
    BulletHandlerTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopy();

        fc = dynamic_pointer_cast<BulletHandler>(tmpPtr);
    }

    return fc;
}

BulletHandler *BulletHandlerBase::createEmptyLocal(BitVector bFlags)
{
    BulletHandler *returnValue;

    newPtr<BulletHandler>(returnValue, bFlags);

    returnValue->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

//! create an empty new instance of the class, do not copy the prototype
BulletHandler *BulletHandlerBase::createEmpty(void)
{
    BulletHandler *returnValue;

    newPtr<BulletHandler>(returnValue, Thread::getCurrentLocalFlags());

    returnValue->_pFieldFlags->_bNamespaceMask &=
        ~Thread::getCurrentLocalFlags();

    return returnValue;
}

FieldContainerTransitPtr BulletHandlerBase::shallowCopyLocal(
    BitVector bFlags) const
{
    BulletHandler *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const BulletHandler *>(this), bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

FieldContainerTransitPtr BulletHandlerBase::shallowCopyDependent(
    BitVector bFlags) const
{
    BulletHandler *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const BulletHandler *>(this), ~bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask = bFlags;

    return returnValue;
}

FieldContainerTransitPtr BulletHandlerBase::shallowCopy(void) const
{
    BulletHandler *tmpPtr;

    newPtr(tmpPtr,
           dynamic_cast<const BulletHandler *>(this),
           Thread::getCurrentLocalFlags());

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~Thread::getCurrentLocalFlags();

    FieldContainerTransitPtr returnValue(tmpPtr);

    return returnValue;
}



/*------------------------- event producers ----------------------------------*/
void BulletHandlerBase::produceEvent(UInt32 eventId, EventDetails* const e)
{
    switch(eventId)
    {
    case SimulationUpdatedEventId:
        OSG_ASSERT(dynamic_cast<SimulationUpdatedEventDetailsType* const>(e));

        _SimulationUpdatedEvent.set_combiner(ConsumableEventCombiner(e));
        _SimulationUpdatedEvent(dynamic_cast<SimulationUpdatedEventDetailsType* const>(e), SimulationUpdatedEventId);
        break;
    default:
        SWARNING << "No event defined with ID " << eventId << std::endl;
        break;
    }
}

boost::signals2::connection BulletHandlerBase::connectEvent(UInt32 eventId, 
                                                             const BaseEventType::slot_type &listener, 
                                                             boost::signals2::connect_position at)
{
    switch(eventId)
    {
    case SimulationUpdatedEventId:
        return _SimulationUpdatedEvent.connect(listener, at);
        break;
    default:
        SWARNING << "No event defined with ID " << eventId << std::endl;
        return boost::signals2::connection();
        break;
    }

    return boost::signals2::connection();
}

boost::signals2::connection  BulletHandlerBase::connectEvent(UInt32 eventId, 
                                                              const BaseEventType::group_type &group,
                                                              const BaseEventType::slot_type &listener,
                                                              boost::signals2::connect_position at)
{
    switch(eventId)
    {
    case SimulationUpdatedEventId:
        return _SimulationUpdatedEvent.connect(group, listener, at);
        break;
    default:
        SWARNING << "No event defined with ID " << eventId << std::endl;
        return boost::signals2::connection();
        break;
    }

    return boost::signals2::connection();
}
    
void  BulletHandlerBase::disconnectEvent(UInt32 eventId, const BaseEventType::group_type &group)
{
    switch(eventId)
    {
    case SimulationUpdatedEventId:
        _SimulationUpdatedEvent.disconnect(group);
        break;
    default:
        SWARNING << "No event defined with ID " << eventId << std::endl;
        break;
    }
}

void  BulletHandlerBase::disconnectAllSlotsEvent(UInt32 eventId)
{
    switch(eventId)
    {
    case SimulationUpdatedEventId:
        _SimulationUpdatedEvent.disconnect_all_slots();
        break;
    default:
        SWARNING << "No event defined with ID " << eventId << std::endl;
        break;
    }
}

bool  BulletHandlerBase::isEmptyEvent(UInt32 eventId) const
{
    switch(eventId)
    {
    case SimulationUpdatedEventId:
        return _SimulationUpdatedEvent.empty();
        break;
    default:
        SWARNING << "No event defined with ID " << eventId << std::endl;
        return true;
        break;
    }
}

UInt32  BulletHandlerBase::numSlotsEvent(UInt32 eventId) const
{
    switch(eventId)
    {
    case SimulationUpdatedEventId:
        return _SimulationUpdatedEvent.num_slots();
        break;
    default:
        SWARNING << "No event defined with ID " << eventId << std::endl;
        return 0;
        break;
    }
}


/*------------------------- constructors ----------------------------------*/

BulletHandlerBase::BulletHandlerBase(void) :
    Inherited(),
    _sfStepSize               (Real32(0.0167f)),
    _sfMaxStepsPerUpdate      (UInt32(10)),
    _sfDynamicsWorld          (this,
                          DynamicsWorldFieldId,
                          BulletDynamicsWorld::ParentHandlerFieldId)
{
}

BulletHandlerBase::BulletHandlerBase(const BulletHandlerBase &source) :
    Inherited(source),
    _sfStepSize               (source._sfStepSize               ),
    _sfMaxStepsPerUpdate      (source._sfMaxStepsPerUpdate      ),
    _sfDynamicsWorld          (this,
                          DynamicsWorldFieldId,
                          BulletDynamicsWorld::ParentHandlerFieldId)
{
}


/*-------------------------- destructors ----------------------------------*/

BulletHandlerBase::~BulletHandlerBase(void)
{
}

/*-------------------------------------------------------------------------*/
/* Child linking                                                           */

bool BulletHandlerBase::unlinkChild(
    FieldContainer * const pChild,
    UInt16           const childFieldId)
{
    if(childFieldId == DynamicsWorldFieldId)
    {
        BulletDynamicsWorld * pTypedChild =
            dynamic_cast<BulletDynamicsWorld *>(pChild);

        if(pTypedChild != NULL)
        {
            if(_sfDynamicsWorld.getValue() == pTypedChild)
            {
                editSField(DynamicsWorldFieldMask);

                _sfDynamicsWorld.setValue(NULL);

                return true;
            }

            SWARNING << "Parent (["        << this
                     << "] id ["           << this->getId()
                     << "] type ["         << this->getType().getCName()
                     << "] childFieldId [" << childFieldId
                     << "]) - Child (["    << pChild
                     << "] id ["           << pChild->getId()
                     << "] type ["         << pChild->getType().getCName()
                     << "]): link inconsistent!"
                     << std::endl;

            return false;
        }

        return false;
    }


    return Inherited::unlinkChild(pChild, childFieldId);
}

void BulletHandlerBase::onCreate(const BulletHandler *source)
{
    Inherited::onCreate(source);

    if(source != NULL)
    {
        BulletHandler *pThis = static_cast<BulletHandler *>(this);

        pThis->setDynamicsWorld(source->getDynamicsWorld());
    }
}

GetFieldHandlePtr BulletHandlerBase::getHandleStepSize        (void) const
{
    SFReal32::GetHandlePtr returnValue(
        new  SFReal32::GetHandle(
             &_sfStepSize,
             this->getType().getFieldDesc(StepSizeFieldId),
             const_cast<BulletHandlerBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr BulletHandlerBase::editHandleStepSize       (void)
{
    SFReal32::EditHandlePtr returnValue(
        new  SFReal32::EditHandle(
             &_sfStepSize,
             this->getType().getFieldDesc(StepSizeFieldId),
             this));


    editSField(StepSizeFieldMask);

    return returnValue;
}

GetFieldHandlePtr BulletHandlerBase::getHandleMaxStepsPerUpdate (void) const
{
    SFUInt32::GetHandlePtr returnValue(
        new  SFUInt32::GetHandle(
             &_sfMaxStepsPerUpdate,
             this->getType().getFieldDesc(MaxStepsPerUpdateFieldId),
             const_cast<BulletHandlerBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr BulletHandlerBase::editHandleMaxStepsPerUpdate(void)
{
    SFUInt32::EditHandlePtr returnValue(
        new  SFUInt32::EditHandle(
             &_sfMaxStepsPerUpdate,
             this->getType().getFieldDesc(MaxStepsPerUpdateFieldId),
             this));


    editSField(MaxStepsPerUpdateFieldMask);

    return returnValue;
}

GetFieldHandlePtr BulletHandlerBase::getHandleDynamicsWorld   (void) const
{
    SFUnrecChildBulletDynamicsWorldPtr::GetHandlePtr returnValue(
        new  SFUnrecChildBulletDynamicsWorldPtr::GetHandle(
             &_sfDynamicsWorld,
             this->getType().getFieldDesc(DynamicsWorldFieldId),
             const_cast<BulletHandlerBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr BulletHandlerBase::editHandleDynamicsWorld  (void)
{
    SFUnrecChildBulletDynamicsWorldPtr::EditHandlePtr returnValue(
        new  SFUnrecChildBulletDynamicsWorldPtr::EditHandle(
             &_sfDynamicsWorld,
             this->getType().getFieldDesc(DynamicsWorldFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&BulletHandler::setDynamicsWorld,
                    static_cast<BulletHandler *>(this), _1));

    editSField(DynamicsWorldFieldMask);

    return returnValue;
}


GetEventHandlePtr BulletHandlerBase::getHandleSimulationUpdatedSignal(void) const
{
    GetEventHandlePtr returnValue(
        new  GetTypedEventHandle<SimulationUpdatedEventType>(
             const_cast<SimulationUpdatedEventType *>(&_SimulationUpdatedEvent),
             _producerType.getEventDescription(SimulationUpdatedEventId),
             const_cast<BulletHandlerBase *>(this)));

    return returnValue;
}


#ifdef OSG_MT_CPTR_ASPECT
void BulletHandlerBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    BulletHandler *pThis = static_cast<BulletHandler *>(this);

    pThis->execSync(static_cast<BulletHandler *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif


#ifdef OSG_MT_CPTR_ASPECT
FieldContainer *BulletHandlerBase::createAspectCopy(
    const FieldContainer *pRefAspect) const
{
    BulletHandler *returnValue;

    newAspectCopy(returnValue,
                  dynamic_cast<const BulletHandler *>(pRefAspect),
                  dynamic_cast<const BulletHandler *>(this));

    return returnValue;
}
#endif

void BulletHandlerBase::resolveLinks(void)
{
    Inherited::resolveLinks();

    static_cast<BulletHandler *>(this)->setDynamicsWorld(NULL);


}


OSG_END_NAMESPACE
