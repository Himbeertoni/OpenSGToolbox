/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 * contact: David Kabala (djkabala@gmail.com)                                *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class BulletHandler!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include "OSGBulletSimulationEventDetails.h"

OSG_BEGIN_NAMESPACE


//! access the type of the class
inline
OSG::FieldContainerType &BulletHandlerBase::getClassType(void)
{
    return _type;
}

//! access the numerical type of the class
inline
OSG::UInt32 BulletHandlerBase::getClassTypeId(void)
{
    return _type.getId();
}
//! access the producer type of the class
inline
const EventProducerType &BulletHandlerBase::getProducerClassType(void)
{
    return _producerType;
}

//! access the producer type id of the class
inline
UInt32 BulletHandlerBase::getProducerClassTypeId(void)
{
    return _producerType.getId();
}

inline
OSG::UInt16 BulletHandlerBase::getClassGroupId(void)
{
    return _type.getGroupId();
}

/*------------------------------ get -----------------------------------*/

//! Get the value of the BulletHandler::_sfStepSize field.

inline
Real32 &BulletHandlerBase::editStepSize(void)
{
    editSField(StepSizeFieldMask);

    return _sfStepSize.getValue();
}

//! Get the value of the BulletHandler::_sfStepSize field.
inline
      Real32  BulletHandlerBase::getStepSize(void) const
{
    return _sfStepSize.getValue();
}

//! Set the value of the BulletHandler::_sfStepSize field.
inline
void BulletHandlerBase::setStepSize(const Real32 value)
{
    editSField(StepSizeFieldMask);

    _sfStepSize.setValue(value);
}
//! Get the value of the BulletHandler::_sfMaxStepsPerUpdate field.

inline
UInt32 &BulletHandlerBase::editMaxStepsPerUpdate(void)
{
    editSField(MaxStepsPerUpdateFieldMask);

    return _sfMaxStepsPerUpdate.getValue();
}

//! Get the value of the BulletHandler::_sfMaxStepsPerUpdate field.
inline
      UInt32  BulletHandlerBase::getMaxStepsPerUpdate(void) const
{
    return _sfMaxStepsPerUpdate.getValue();
}

//! Set the value of the BulletHandler::_sfMaxStepsPerUpdate field.
inline
void BulletHandlerBase::setMaxStepsPerUpdate(const UInt32 value)
{
    editSField(MaxStepsPerUpdateFieldMask);

    _sfMaxStepsPerUpdate.setValue(value);
}

//! Get the value of the BulletHandler::_sfDynamicsWorld field.
inline
BulletDynamicsWorld * BulletHandlerBase::getDynamicsWorld(void) const
{
    return _sfDynamicsWorld.getValue();
}

//! Set the value of the BulletHandler::_sfDynamicsWorld field.
inline
void BulletHandlerBase::setDynamicsWorld(BulletDynamicsWorld * const value)
{
    editSField(DynamicsWorldFieldMask);

    _sfDynamicsWorld.setValue(value);
}


#ifdef OSG_MT_CPTR_ASPECT
inline
void BulletHandlerBase::execSync (      BulletHandlerBase *pFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    Inherited::execSync(pFrom, whichField, oOffsets, syncMode, uiSyncInfo);

    if(FieldBits::NoField != (StepSizeFieldMask & whichField))
        _sfStepSize.syncWith(pFrom->_sfStepSize);

    if(FieldBits::NoField != (MaxStepsPerUpdateFieldMask & whichField))
        _sfMaxStepsPerUpdate.syncWith(pFrom->_sfMaxStepsPerUpdate);

    if(FieldBits::NoField != (DynamicsWorldFieldMask & whichField))
        _sfDynamicsWorld.syncWith(pFrom->_sfDynamicsWorld);
}
#endif


inline
const Char8 *BulletHandlerBase::getClassname(void)
{
    return "BulletHandler";
}

inline
UInt32 BulletHandlerBase::getNumProducedEvents(void) const
{
    return getProducerType().getNumEventDescs();
}

inline
const EventDescription *BulletHandlerBase::getProducedEventDescription(const std::string &ProducedEventName) const
{
    return getProducerType().findEventDescription(ProducedEventName);
}

inline
const EventDescription *BulletHandlerBase::getProducedEventDescription(UInt32 ProducedEventId) const
{
    return getProducerType().getEventDescription(ProducedEventId);
}

inline
UInt32 BulletHandlerBase::getProducedEventId(const std::string &ProducedEventName) const
{
    return getProducerType().getProducedEventId(ProducedEventName);
}

inline
boost::signals2::connection  BulletHandlerBase::connectSimulationUpdated(const SimulationUpdatedEventType::slot_type &listener, 
                                                                               boost::signals2::connect_position at)
{
    return _SimulationUpdatedEvent.connect(listener, at);
}

inline
boost::signals2::connection  BulletHandlerBase::connectSimulationUpdated(const SimulationUpdatedEventType::group_type &group,
                                                    const SimulationUpdatedEventType::slot_type &listener, boost::signals2::connect_position at)
{
    return _SimulationUpdatedEvent.connect(group, listener, at);
}

inline
void  BulletHandlerBase::disconnectSimulationUpdated(const SimulationUpdatedEventType::group_type &group)
{
    _SimulationUpdatedEvent.disconnect(group);
}

inline
void  BulletHandlerBase::disconnectAllSlotsSimulationUpdated(void)
{
    _SimulationUpdatedEvent.disconnect_all_slots();
}

inline
bool  BulletHandlerBase::isEmptySimulationUpdated(void) const
{
    return _SimulationUpdatedEvent.empty();
}

inline
UInt32  BulletHandlerBase::numSlotsSimulationUpdated(void) const
{
    return _SimulationUpdatedEvent.num_slots();
}

inline
void BulletHandlerBase::produceSimulationUpdated(SimulationUpdatedEventDetailsType* const e)
{
    produceEvent(SimulationUpdatedEventId, e);
}

OSG_GEN_CONTAINERPTR(BulletHandler);

OSG_END_NAMESPACE

