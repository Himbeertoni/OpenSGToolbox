/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 * contact: David Kabala (djkabala@gmail.com)                                *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class BulletRigidBody!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>
#include <boost/assign/list_of.hpp>

#include "OSGConfig.h"



#include "OSGFieldContainer.h"          // ParentWorld Class
#include "OSGBulletCollisionShape.h"    // CollisionShape Class

#include "OSGBulletRigidBodyBase.h"
#include "OSGBulletRigidBody.h"

#include <boost/bind.hpp>

#ifdef WIN32 // turn off 'this' : used in base member initializer list warning
#pragma warning(disable:4355)
#endif

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::BulletRigidBody
    This core is a wrapper around the bullet btRigidBody.  This core uses the world transformation of the
    btRigidBody as the transformation for the node this core is connected to.  This is done by first applying
    an inverse transformation and then applying the to world transfromation of the btRigidBody.  This means that the 
    transformations of parent nodes will not influence a BulletRigidBody.
 */

/***************************************************************************\
 *                        Field Documentation                              *
\***************************************************************************/

/*! \var FieldContainer * BulletRigidBodyBase::_sfParentWorld
    
*/

/*! \var Matrix          BulletRigidBodyBase::_sfToWorld
    
*/

/*! \var Int16           BulletRigidBodyBase::_sfGroupMask
    
*/

/*! \var Int16           BulletRigidBodyBase::_sfCollisionMask
    
*/

/*! \var BulletCollisionShape * BulletRigidBodyBase::_sfCollisionShape
    
*/

/*! \var Vec3f           BulletRigidBodyBase::_sfAnisotropicFriction
    Passthrough value to btCollisionObject.
*/

/*! \var Real32          BulletRigidBodyBase::_sfContactProcessingThreashold
    Passthrough value to btCollisionObject.
*/

/*! \var Int32           BulletRigidBodyBase::_sfActivation
    Passthrough value to btCollisionObject
*/

/*! \var Real32          BulletRigidBodyBase::_sfDeactivationTime
    Passthrough value to btCollisionObject.
*/

/*! \var Real32          BulletRigidBodyBase::_sfRestitution
    Passthrough value to btCollisionObject.
*/

/*! \var Real32          BulletRigidBodyBase::_sfFriction
    Passthrough value to btCollisionObject.
*/

/*! \var Matrix          BulletRigidBodyBase::_sfWorldTransform
    Passthrough value to btCollisionObject.
*/

/*! \var Matrix          BulletRigidBodyBase::_sfInterpolationWorldTransform
    Passthrough value to btCollisionObject.
*/

/*! \var Vec3f           BulletRigidBodyBase::_sfInterpolationLinearVelocity
    Passthrough value to btCollisionObject.
*/

/*! \var Vec3f           BulletRigidBodyBase::_sfInterpolationAngularVelocity
    Passthrough value to btCollisionObject.
*/

/*! \var Int32           BulletRigidBodyBase::_sfIslandTag
    Passthrough value to btCollisionObject.
*/

/*! \var Int32           BulletRigidBodyBase::_sfCompanionId
    Passthrough value to btCollisionObject.
*/

/*! \var Real32          BulletRigidBodyBase::_sfHitFraction
    Passthrough value to btCollisionObject.
*/

/*! \var Int32           BulletRigidBodyBase::_sfCollisionFlags
    Passthrough value to btCollisionObject.
*/

/*! \var Real32          BulletRigidBodyBase::_sfCcdSweptSphereRadius
    Passthrough value to btCollisionObject.
*/

/*! \var Real32          BulletRigidBodyBase::_sfCcdMotionThreashold
    Passthrough value to btCollisionObject.
*/

/*! \var Vec3f           BulletRigidBodyBase::_sfGravity
    Passthrough value to btRigidBody.
*/

/*! \var Vec2f           BulletRigidBodyBase::_sfDamping
    Passthrough value to btRigidBody.
*/

/*! \var Real32          BulletRigidBodyBase::_sfMass
    Passthrough value to btRigidBody.
*/

/*! \var Vec3f           BulletRigidBodyBase::_sfInertia
    Passthrough value to btRigidBody.
*/

/*! \var Vec3f           BulletRigidBodyBase::_sfLinearFactor
    Passthrough value to btRigidBody.
*/

/*! \var Matrix          BulletRigidBodyBase::_sfCenterOfMassTransform
    Passthrough value to btRigidBody.
*/

/*! \var Vec3f           BulletRigidBodyBase::_sfLinearVelocity
    Passthrough value to btRigidBody.
*/

/*! \var Vec3f           BulletRigidBodyBase::_sfAngularVelocity
    Passthrough value to btRigidBody.
*/

/*! \var Vec3f           BulletRigidBodyBase::_sfAngularFactor
    Passthrough value to btRigidBody.
*/

/*! \var Int32           BulletRigidBodyBase::_sfFlags
    Passthrough value to btRigidBody.
*/

/*! \var Vec2f           BulletRigidBodyBase::_sfSleepingThresholds
    Passthrough value to btRigidBody.
*/


/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldTraits<BulletRigidBody *>::_type("BulletRigidBodyPtr", "GroupPtr");
#endif

OSG_FIELDTRAITS_GETTYPE(BulletRigidBody *)

OSG_EXPORT_PTR_SFIELD_FULL(PointerSField,
                           BulletRigidBody *,
                           0);

OSG_EXPORT_PTR_MFIELD_FULL(PointerMField,
                           BulletRigidBody *,
                           0);

DataType &FieldTraits< BulletRigidBody *, 1 >::getType(void)
{
    return FieldTraits<BulletRigidBody *, 0>::getType();
}


OSG_EXPORT_PTR_MFIELD(ChildPointerMField,
                      BulletRigidBody *,
                      UnrecordedRefCountPolicy,
                      1);


/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

void BulletRigidBodyBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new SFParentFieldContainerPtr::Description(
        SFParentFieldContainerPtr::getClassType(),
        "ParentWorld",
        "",
        ParentWorldFieldId, ParentWorldFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast     <FieldEditMethodSig>(&BulletRigidBody::invalidEditField),
        static_cast     <FieldGetMethodSig >(&BulletRigidBody::invalidGetField));

    oType.addInitialDesc(pDesc);

    pDesc = new SFMatrix::Description(
        SFMatrix::getClassType(),
        "ToWorld",
        "",
        ToWorldFieldId, ToWorldFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&BulletRigidBody::editHandleToWorld),
        static_cast<FieldGetMethodSig >(&BulletRigidBody::getHandleToWorld));

    oType.addInitialDesc(pDesc);

    pDesc = new SFInt16::Description(
        SFInt16::getClassType(),
        "GroupMask",
        "",
        GroupMaskFieldId, GroupMaskFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&BulletRigidBody::editHandleGroupMask),
        static_cast<FieldGetMethodSig >(&BulletRigidBody::getHandleGroupMask));

    oType.addInitialDesc(pDesc);

    pDesc = new SFInt16::Description(
        SFInt16::getClassType(),
        "CollisionMask",
        "",
        CollisionMaskFieldId, CollisionMaskFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&BulletRigidBody::editHandleCollisionMask),
        static_cast<FieldGetMethodSig >(&BulletRigidBody::getHandleCollisionMask));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecChildBulletCollisionShapePtr::Description(
        SFUnrecChildBulletCollisionShapePtr::getClassType(),
        "CollisionShape",
        "",
        CollisionShapeFieldId, CollisionShapeFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FNullCheckAccess),
        static_cast<FieldEditMethodSig>(&BulletRigidBody::editHandleCollisionShape),
        static_cast<FieldGetMethodSig >(&BulletRigidBody::getHandleCollisionShape));

    oType.addInitialDesc(pDesc);

    pDesc = new BridgeSFVec3f::Description(
        BridgeSFVec3f::getClassType(),
        "AnisotropicFriction",
        "Passthrough value to btCollisionObject.\n",
        AnisotropicFrictionFieldId, AnisotropicFrictionFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&BulletRigidBody::editHandleAnisotropicFriction),
        static_cast<FieldGetMethodSig >(&BulletRigidBody::getHandleAnisotropicFriction));

    oType.addInitialDesc(pDesc);

    pDesc = new BridgeSFReal32::Description(
        BridgeSFReal32::getClassType(),
        "ContactProcessingThreashold",
        "Passthrough value to btCollisionObject.\n",
        ContactProcessingThreasholdFieldId, ContactProcessingThreasholdFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&BulletRigidBody::editHandleContactProcessingThreashold),
        static_cast<FieldGetMethodSig >(&BulletRigidBody::getHandleContactProcessingThreashold));

    oType.addInitialDesc(pDesc);

    pDesc = new BridgeSFInt32::Description(
        BridgeSFInt32::getClassType(),
        "Activation",
        "Passthrough value to btCollisionObject\n",
        ActivationFieldId, ActivationFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&BulletRigidBody::editHandleActivation),
        static_cast<FieldGetMethodSig >(&BulletRigidBody::getHandleActivation));

    oType.addInitialDesc(pDesc);

    pDesc = new BridgeSFReal32::Description(
        BridgeSFReal32::getClassType(),
        "DeactivationTime",
        "Passthrough value to btCollisionObject.\n",
        DeactivationTimeFieldId, DeactivationTimeFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&BulletRigidBody::editHandleDeactivationTime),
        static_cast<FieldGetMethodSig >(&BulletRigidBody::getHandleDeactivationTime));

    oType.addInitialDesc(pDesc);

    pDesc = new BridgeSFReal32::Description(
        BridgeSFReal32::getClassType(),
        "Restitution",
        "Passthrough value to btCollisionObject.\n",
        RestitutionFieldId, RestitutionFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&BulletRigidBody::editHandleRestitution),
        static_cast<FieldGetMethodSig >(&BulletRigidBody::getHandleRestitution));

    oType.addInitialDesc(pDesc);

    pDesc = new BridgeSFReal32::Description(
        BridgeSFReal32::getClassType(),
        "Friction",
        "Passthrough value to btCollisionObject.\n",
        FrictionFieldId, FrictionFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&BulletRigidBody::editHandleFriction),
        static_cast<FieldGetMethodSig >(&BulletRigidBody::getHandleFriction));

    oType.addInitialDesc(pDesc);

    pDesc = new BridgeSFMatrix::Description(
        BridgeSFMatrix::getClassType(),
        "WorldTransform",
        "Passthrough value to btCollisionObject.\n",
        WorldTransformFieldId, WorldTransformFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&BulletRigidBody::editHandleWorldTransform),
        static_cast<FieldGetMethodSig >(&BulletRigidBody::getHandleWorldTransform));

    oType.addInitialDesc(pDesc);

    pDesc = new BridgeSFMatrix::Description(
        BridgeSFMatrix::getClassType(),
        "InterpolationWorldTransform",
        "Passthrough value to btCollisionObject.\n",
        InterpolationWorldTransformFieldId, InterpolationWorldTransformFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&BulletRigidBody::editHandleInterpolationWorldTransform),
        static_cast<FieldGetMethodSig >(&BulletRigidBody::getHandleInterpolationWorldTransform));

    oType.addInitialDesc(pDesc);

    pDesc = new BridgeSFVec3f::Description(
        BridgeSFVec3f::getClassType(),
        "InterpolationLinearVelocity",
        "Passthrough value to btCollisionObject.\n",
        InterpolationLinearVelocityFieldId, InterpolationLinearVelocityFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&BulletRigidBody::editHandleInterpolationLinearVelocity),
        static_cast<FieldGetMethodSig >(&BulletRigidBody::getHandleInterpolationLinearVelocity));

    oType.addInitialDesc(pDesc);

    pDesc = new BridgeSFVec3f::Description(
        BridgeSFVec3f::getClassType(),
        "InterpolationAngularVelocity",
        "Passthrough value to btCollisionObject.\n",
        InterpolationAngularVelocityFieldId, InterpolationAngularVelocityFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&BulletRigidBody::editHandleInterpolationAngularVelocity),
        static_cast<FieldGetMethodSig >(&BulletRigidBody::getHandleInterpolationAngularVelocity));

    oType.addInitialDesc(pDesc);

    pDesc = new BridgeSFInt32::Description(
        BridgeSFInt32::getClassType(),
        "IslandTag",
        "Passthrough value to btCollisionObject.\n",
        IslandTagFieldId, IslandTagFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&BulletRigidBody::editHandleIslandTag),
        static_cast<FieldGetMethodSig >(&BulletRigidBody::getHandleIslandTag));

    oType.addInitialDesc(pDesc);

    pDesc = new BridgeSFInt32::Description(
        BridgeSFInt32::getClassType(),
        "CompanionId",
        "Passthrough value to btCollisionObject.\n",
        CompanionIdFieldId, CompanionIdFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&BulletRigidBody::editHandleCompanionId),
        static_cast<FieldGetMethodSig >(&BulletRigidBody::getHandleCompanionId));

    oType.addInitialDesc(pDesc);

    pDesc = new BridgeSFReal32::Description(
        BridgeSFReal32::getClassType(),
        "HitFraction",
        "Passthrough value to btCollisionObject.\n",
        HitFractionFieldId, HitFractionFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&BulletRigidBody::editHandleHitFraction),
        static_cast<FieldGetMethodSig >(&BulletRigidBody::getHandleHitFraction));

    oType.addInitialDesc(pDesc);

    pDesc = new BridgeSFInt32::Description(
        BridgeSFInt32::getClassType(),
        "CollisionFlags",
        "Passthrough value to btCollisionObject.\n",
        CollisionFlagsFieldId, CollisionFlagsFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&BulletRigidBody::editHandleCollisionFlags),
        static_cast<FieldGetMethodSig >(&BulletRigidBody::getHandleCollisionFlags));

    oType.addInitialDesc(pDesc);

    pDesc = new BridgeSFReal32::Description(
        BridgeSFReal32::getClassType(),
        "CcdSweptSphereRadius",
        "Passthrough value to btCollisionObject.\n",
        CcdSweptSphereRadiusFieldId, CcdSweptSphereRadiusFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&BulletRigidBody::editHandleCcdSweptSphereRadius),
        static_cast<FieldGetMethodSig >(&BulletRigidBody::getHandleCcdSweptSphereRadius));

    oType.addInitialDesc(pDesc);

    pDesc = new BridgeSFReal32::Description(
        BridgeSFReal32::getClassType(),
        "CcdMotionThreashold",
        "Passthrough value to btCollisionObject.\n",
        CcdMotionThreasholdFieldId, CcdMotionThreasholdFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&BulletRigidBody::editHandleCcdMotionThreashold),
        static_cast<FieldGetMethodSig >(&BulletRigidBody::getHandleCcdMotionThreashold));

    oType.addInitialDesc(pDesc);

    pDesc = new BridgeSFVec3f::Description(
        BridgeSFVec3f::getClassType(),
        "Gravity",
        "Passthrough value to btRigidBody.\n",
        GravityFieldId, GravityFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&BulletRigidBody::editHandleGravity),
        static_cast<FieldGetMethodSig >(&BulletRigidBody::getHandleGravity));

    oType.addInitialDesc(pDesc);

    pDesc = new BridgeSFVec2f::Description(
        BridgeSFVec2f::getClassType(),
        "Damping",
        "Passthrough value to btRigidBody.\n",
        DampingFieldId, DampingFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&BulletRigidBody::editHandleDamping),
        static_cast<FieldGetMethodSig >(&BulletRigidBody::getHandleDamping));

    oType.addInitialDesc(pDesc);

    pDesc = new BridgeSFReal32::Description(
        BridgeSFReal32::getClassType(),
        "Mass",
        "Passthrough value to btRigidBody.\n",
        MassFieldId, MassFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&BulletRigidBody::editHandleMass),
        static_cast<FieldGetMethodSig >(&BulletRigidBody::getHandleMass));

    oType.addInitialDesc(pDesc);

    pDesc = new BridgeSFVec3f::Description(
        BridgeSFVec3f::getClassType(),
        "Inertia",
        "Passthrough value to btRigidBody.\n",
        InertiaFieldId, InertiaFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&BulletRigidBody::editHandleInertia),
        static_cast<FieldGetMethodSig >(&BulletRigidBody::getHandleInertia));

    oType.addInitialDesc(pDesc);

    pDesc = new BridgeSFVec3f::Description(
        BridgeSFVec3f::getClassType(),
        "LinearFactor",
        "Passthrough value to btRigidBody.\n",
        LinearFactorFieldId, LinearFactorFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&BulletRigidBody::editHandleLinearFactor),
        static_cast<FieldGetMethodSig >(&BulletRigidBody::getHandleLinearFactor));

    oType.addInitialDesc(pDesc);

    pDesc = new BridgeSFMatrix::Description(
        BridgeSFMatrix::getClassType(),
        "CenterOfMassTransform",
        "Passthrough value to btRigidBody.\n",
        CenterOfMassTransformFieldId, CenterOfMassTransformFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&BulletRigidBody::editHandleCenterOfMassTransform),
        static_cast<FieldGetMethodSig >(&BulletRigidBody::getHandleCenterOfMassTransform));

    oType.addInitialDesc(pDesc);

    pDesc = new BridgeSFVec3f::Description(
        BridgeSFVec3f::getClassType(),
        "LinearVelocity",
        "Passthrough value to btRigidBody.\n",
        LinearVelocityFieldId, LinearVelocityFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&BulletRigidBody::editHandleLinearVelocity),
        static_cast<FieldGetMethodSig >(&BulletRigidBody::getHandleLinearVelocity));

    oType.addInitialDesc(pDesc);

    pDesc = new BridgeSFVec3f::Description(
        BridgeSFVec3f::getClassType(),
        "AngularVelocity",
        "Passthrough value to btRigidBody.\n",
        AngularVelocityFieldId, AngularVelocityFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&BulletRigidBody::editHandleAngularVelocity),
        static_cast<FieldGetMethodSig >(&BulletRigidBody::getHandleAngularVelocity));

    oType.addInitialDesc(pDesc);

    pDesc = new BridgeSFVec3f::Description(
        BridgeSFVec3f::getClassType(),
        "AngularFactor",
        "Passthrough value to btRigidBody.\n",
        AngularFactorFieldId, AngularFactorFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&BulletRigidBody::editHandleAngularFactor),
        static_cast<FieldGetMethodSig >(&BulletRigidBody::getHandleAngularFactor));

    oType.addInitialDesc(pDesc);

    pDesc = new BridgeSFInt32::Description(
        BridgeSFInt32::getClassType(),
        "Flags",
        "Passthrough value to btRigidBody.\n",
        FlagsFieldId, FlagsFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&BulletRigidBody::editHandleFlags),
        static_cast<FieldGetMethodSig >(&BulletRigidBody::getHandleFlags));

    oType.addInitialDesc(pDesc);

    pDesc = new BridgeSFVec2f::Description(
        BridgeSFVec2f::getClassType(),
        "SleepingThresholds",
        "Passthrough value to btRigidBody.\n",
        SleepingThresholdsFieldId, SleepingThresholdsFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&BulletRigidBody::editHandleSleepingThresholds),
        static_cast<FieldGetMethodSig >(&BulletRigidBody::getHandleSleepingThresholds));

    oType.addInitialDesc(pDesc);
}


BulletRigidBodyBase::TypeObject BulletRigidBodyBase::_type(
    BulletRigidBodyBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    0,
    reinterpret_cast<PrototypeCreateF>(&BulletRigidBodyBase::createEmptyLocal),
    BulletRigidBody::initMethod,
    BulletRigidBody::exitMethod,
    reinterpret_cast<InitalInsertDescFunc>(&BulletRigidBody::classDescInserter),
    false,
    0,
    "<?xml version=\"1.0\" ?>\n"
    "\n"
    "<FieldContainer\n"
    "    name=\"BulletRigidBody\"\n"
    "    parent=\"Group\"\n"
    "    library=\"ContribBullet\"\n"
    "    structure=\"concrete\"\n"
    "    pointerfieldtypes=\"both\"\n"
    "    systemcomponent=\"true\"\n"
    "    parentsystemcomponent=\"true\"\n"
    "    decoratable=\"false\"\n"
    "    useLocalIncludes=\"false\"\n"
    "    isNodeCore=\"false\"\n"
    "    childFields=\"multi\"\n"
    "    authors=\"David Kabala (djkabala@gmail.com)\"\n"
    "    >\n"
    "    This core is a wrapper around the bullet btRigidBody.  This core uses the world transformation of the\n"
    "    btRigidBody as the transformation for the node this core is connected to.  This is done by first applying\n"
    "    an inverse transformation and then applying the to world transfromation of the btRigidBody.  This means that the \n"
    "    transformations of parent nodes will not influence a BulletRigidBody.\n"
    "    <Field\n"
    "       name=\"ParentWorld\"\n"
    "       type=\"FieldContainer\"\n"
    "       cardinality=\"single\"\n"
    "       access=\"none\"\n"
    "       category=\"parentpointer\"\n"
    "       >\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"ToWorld\"\n"
    "        type=\"Matrix\"\n"
    "        category=\"data\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        access=\"protected\"\n"
    "        >\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"GroupMask\"\n"
    "        type=\"Int16\"\n"
    "        category=\"data\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        access=\"public\"\n"
    "        defaultValue=\"TypeTraits&lt;Int16&gt;::getMax()\"\n"
    "        >\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"CollisionMask\"\n"
    "        type=\"Int16\"\n"
    "        category=\"data\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        access=\"public\"\n"
    "        defaultValue=\"TypeTraits&lt;Int16&gt;::getMax()\"\n"
    "        >\n"
    "    </Field>\n"
    "\n"
    "    <!--                   btCollisionObject                    -->\n"
    "\n"
    "    <Field\n"
    "        name=\"CollisionShape\"\n"
    "        type=\"BulletCollisionShape\"\n"
    "        cardinality=\"single\"\n"
    "        category=\"childpointer\"\n"
    "        childParentType=\"FieldContainer\"\n"
    "        visibility=\"external\"\n"
    "        access=\"public\"\n"
    "        ptrFieldAccess = \"nullCheck\"\n"
    "        linkParentField=\"ParentObject\"\n"
    "        >\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"AnisotropicFriction\"\n"
    "        type=\"Vec3f\"\n"
    "        category=\"data\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        access=\"public\"\n"
    "        bridge=\"true\"\n"
    "        >\n"
    "        Passthrough value to btCollisionObject.\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"ContactProcessingThreashold\"\n"
    "        type=\"Real32\"\n"
    "        category=\"data\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        access=\"public\"\n"
    "        bridge=\"true\"\n"
    "        >\n"
    "        Passthrough value to btCollisionObject.\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"Activation\"\n"
    "        type=\"Int32\"\n"
    "        category=\"data\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        access=\"public\"\n"
    "        bridge=\"true\"\n"
    "        >\n"
    "        Passthrough value to btCollisionObject\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"DeactivationTime\"\n"
    "        type=\"Real32\"\n"
    "        category=\"data\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        access=\"public\"\n"
    "        bridge=\"true\"\n"
    "        >\n"
    "        Passthrough value to btCollisionObject.\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"Restitution\"\n"
    "        type=\"Real32\"\n"
    "        category=\"data\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        access=\"public\"\n"
    "        bridge=\"true\"\n"
    "        >\n"
    "        Passthrough value to btCollisionObject.\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"Friction\"\n"
    "        type=\"Real32\"\n"
    "        category=\"data\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        access=\"public\"\n"
    "        bridge=\"true\"\n"
    "        >\n"
    "        Passthrough value to btCollisionObject.\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"WorldTransform\"\n"
    "        type=\"Matrix\"\n"
    "        category=\"data\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        access=\"public\"\n"
    "        bridge=\"true\"\n"
    "        >\n"
    "        Passthrough value to btCollisionObject.\n"
    "    </Field>\n"
    "    <!--<Field-->\n"
    "        <!--name=\"BroadphaseHandle\"-->\n"
    "        <!--type=\"\"-->\n"
    "        <!--category=\"data\"-->\n"
    "        <!--cardinality=\"single\"-->\n"
    "        <!--visibility=\"external\"-->\n"
    "        <!--access=\"public\"-->\n"
    "        <!--bridge=\"true\"-->\n"
    "        <!-->-->\n"
    "        <!--Passthrough value to btCollisionObject.-->\n"
    "    <!--</Field>-->\n"
    "    <Field\n"
    "        name=\"InterpolationWorldTransform\"\n"
    "        type=\"Matrix\"\n"
    "        category=\"data\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        access=\"public\"\n"
    "        bridge=\"true\"\n"
    "        >\n"
    "        Passthrough value to btCollisionObject.\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"InterpolationLinearVelocity\"\n"
    "        type=\"Vec3f\"\n"
    "        category=\"data\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        access=\"public\"\n"
    "        bridge=\"true\"\n"
    "        >\n"
    "        Passthrough value to btCollisionObject.\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"InterpolationAngularVelocity\"\n"
    "        type=\"Vec3f\"\n"
    "        category=\"data\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        access=\"public\"\n"
    "        bridge=\"true\"\n"
    "        >\n"
    "        Passthrough value to btCollisionObject.\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"IslandTag\"\n"
    "        type=\"Int32\"\n"
    "        category=\"data\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        access=\"public\"\n"
    "        bridge=\"true\"\n"
    "        >\n"
    "        Passthrough value to btCollisionObject.\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"CompanionId\"\n"
    "        type=\"Int32\"\n"
    "        category=\"data\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        access=\"public\"\n"
    "        bridge=\"true\"\n"
    "        >\n"
    "        Passthrough value to btCollisionObject.\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"HitFraction\"\n"
    "        type=\"Real32\"\n"
    "        category=\"data\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        access=\"public\"\n"
    "        bridge=\"true\"\n"
    "        >\n"
    "        Passthrough value to btCollisionObject.\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"CollisionFlags\"\n"
    "        type=\"Int32\"\n"
    "        category=\"data\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        access=\"public\"\n"
    "        bridge=\"true\"\n"
    "        >\n"
    "        Passthrough value to btCollisionObject.\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"CcdSweptSphereRadius\"\n"
    "        type=\"Real32\"\n"
    "        category=\"data\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        access=\"public\"\n"
    "        bridge=\"true\"\n"
    "        >\n"
    "        Passthrough value to btCollisionObject.\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"CcdMotionThreashold\"\n"
    "        type=\"Real32\"\n"
    "        category=\"data\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        access=\"public\"\n"
    "        bridge=\"true\"\n"
    "        >\n"
    "        Passthrough value to btCollisionObject.\n"
    "    </Field>\n"
    "    <!--                   btRigidBody                    -->\n"
    "\n"
    "    <Field\n"
    "        name=\"Gravity\"\n"
    "        type=\"Vec3f\"\n"
    "        category=\"data\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        access=\"public\"\n"
    "        bridge=\"true\"\n"
    "        >\n"
    "        Passthrough value to btRigidBody.\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"Damping\"\n"
    "        type=\"Vec2f\"\n"
    "        category=\"data\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        access=\"public\"\n"
    "        bridge=\"true\"\n"
    "        >\n"
    "        Passthrough value to btRigidBody.\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"Mass\"\n"
    "        type=\"Real32\"\n"
    "        category=\"data\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        access=\"public\"\n"
    "        bridge=\"true\"\n"
    "        >\n"
    "        Passthrough value to btRigidBody.\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"Inertia\"\n"
    "        type=\"Vec3f\"\n"
    "        category=\"data\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        access=\"public\"\n"
    "        bridge=\"true\"\n"
    "        >\n"
    "        Passthrough value to btRigidBody.\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"LinearFactor\"\n"
    "        type=\"Vec3f\"\n"
    "        category=\"data\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        access=\"public\"\n"
    "        bridge=\"true\"\n"
    "        >\n"
    "        Passthrough value to btRigidBody.\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"CenterOfMassTransform\"\n"
    "        type=\"Matrix\"\n"
    "        category=\"data\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        access=\"public\"\n"
    "        bridge=\"true\"\n"
    "        >\n"
    "        Passthrough value to btRigidBody.\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"LinearVelocity\"\n"
    "        type=\"Vec3f\"\n"
    "        category=\"data\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        access=\"public\"\n"
    "        bridge=\"true\"\n"
    "        >\n"
    "        Passthrough value to btRigidBody.\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"AngularVelocity\"\n"
    "        type=\"Vec3f\"\n"
    "        category=\"data\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        access=\"public\"\n"
    "        bridge=\"true\"\n"
    "        >\n"
    "        Passthrough value to btRigidBody.\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"AngularFactor\"\n"
    "        type=\"Vec3f\"\n"
    "        category=\"data\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        access=\"public\"\n"
    "        bridge=\"true\"\n"
    "        >\n"
    "        Passthrough value to btRigidBody.\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"Flags\"\n"
    "        type=\"Int32\"\n"
    "        category=\"data\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        access=\"public\"\n"
    "        bridge=\"true\"\n"
    "        >\n"
    "        Passthrough value to btRigidBody.\n"
    "    </Field>\n"
    "    <!--<Field-->\n"
    "        <!--name=\"Constraints\"-->\n"
    "        <!--type=\"\"-->\n"
    "        <!--category=\"data\"-->\n"
    "        <!--cardinality=\"single\"-->\n"
    "        <!--visibility=\"external\"-->\n"
    "        <!--access=\"public\"-->\n"
    "        <!--bridge=\"true\"-->\n"
    "        <!-->-->\n"
    "        <!--Passthrough value to btRigidBody.-->\n"
    "    <!--</Field>-->\n"
    "    <Field\n"
    "        name=\"SleepingThresholds\"\n"
    "        type=\"Vec2f\"\n"
    "        category=\"data\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        access=\"public\"\n"
    "        bridge=\"true\"\n"
    "        >\n"
    "        Passthrough value to btRigidBody.\n"
    "    </Field>\n"
    "</FieldContainer>\n",
    "This core is a wrapper around the bullet btRigidBody.  This core uses the world transformation of the\n"
    "btRigidBody as the transformation for the node this core is connected to.  This is done by first applying\n"
    "an inverse transformation and then applying the to world transfromation of the btRigidBody.  This means that the \n"
    "transformations of parent nodes will not influence a BulletRigidBody.\n"
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &BulletRigidBodyBase::getType(void)
{
    return _type;
}

const FieldContainerType &BulletRigidBodyBase::getType(void) const
{
    return _type;
}

UInt32 BulletRigidBodyBase::getContainerSize(void) const
{
    return sizeof(BulletRigidBody);
}

/*------------------------- decorator get ------------------------------*/



SFMatrix *BulletRigidBodyBase::editSFToWorld(void)
{
    editSField(ToWorldFieldMask);

    return &_sfToWorld;
}

const SFMatrix *BulletRigidBodyBase::getSFToWorld(void) const
{
    return &_sfToWorld;
}


SFInt16 *BulletRigidBodyBase::editSFGroupMask(void)
{
    editSField(GroupMaskFieldMask);

    return &_sfGroupMask;
}

const SFInt16 *BulletRigidBodyBase::getSFGroupMask(void) const
{
    return &_sfGroupMask;
}


SFInt16 *BulletRigidBodyBase::editSFCollisionMask(void)
{
    editSField(CollisionMaskFieldMask);

    return &_sfCollisionMask;
}

const SFInt16 *BulletRigidBodyBase::getSFCollisionMask(void) const
{
    return &_sfCollisionMask;
}


//! Get the BulletRigidBody::_sfCollisionShape field.
const SFUnrecChildBulletCollisionShapePtr *BulletRigidBodyBase::getSFCollisionShape(void) const
{
    return &_sfCollisionShape;
}

SFUnrecChildBulletCollisionShapePtr *BulletRigidBodyBase::editSFCollisionShape (void)
{
    editSField(CollisionShapeFieldMask);

    return &_sfCollisionShape;
}

BridgeSFVec3f *BulletRigidBodyBase::editSFAnisotropicFriction(void)
{
    editSField(AnisotropicFrictionFieldMask);

    return &_sfAnisotropicFriction;
}

const BridgeSFVec3f *BulletRigidBodyBase::getSFAnisotropicFriction(void) const
{
    return &_sfAnisotropicFriction;
}


BridgeSFReal32 *BulletRigidBodyBase::editSFContactProcessingThreashold(void)
{
    editSField(ContactProcessingThreasholdFieldMask);

    return &_sfContactProcessingThreashold;
}

const BridgeSFReal32 *BulletRigidBodyBase::getSFContactProcessingThreashold(void) const
{
    return &_sfContactProcessingThreashold;
}


BridgeSFInt32 *BulletRigidBodyBase::editSFActivation(void)
{
    editSField(ActivationFieldMask);

    return &_sfActivation;
}

const BridgeSFInt32 *BulletRigidBodyBase::getSFActivation(void) const
{
    return &_sfActivation;
}


BridgeSFReal32 *BulletRigidBodyBase::editSFDeactivationTime(void)
{
    editSField(DeactivationTimeFieldMask);

    return &_sfDeactivationTime;
}

const BridgeSFReal32 *BulletRigidBodyBase::getSFDeactivationTime(void) const
{
    return &_sfDeactivationTime;
}


BridgeSFReal32 *BulletRigidBodyBase::editSFRestitution(void)
{
    editSField(RestitutionFieldMask);

    return &_sfRestitution;
}

const BridgeSFReal32 *BulletRigidBodyBase::getSFRestitution(void) const
{
    return &_sfRestitution;
}


BridgeSFReal32 *BulletRigidBodyBase::editSFFriction(void)
{
    editSField(FrictionFieldMask);

    return &_sfFriction;
}

const BridgeSFReal32 *BulletRigidBodyBase::getSFFriction(void) const
{
    return &_sfFriction;
}


BridgeSFMatrix *BulletRigidBodyBase::editSFWorldTransform(void)
{
    editSField(WorldTransformFieldMask);

    return &_sfWorldTransform;
}

const BridgeSFMatrix *BulletRigidBodyBase::getSFWorldTransform(void) const
{
    return &_sfWorldTransform;
}


BridgeSFMatrix *BulletRigidBodyBase::editSFInterpolationWorldTransform(void)
{
    editSField(InterpolationWorldTransformFieldMask);

    return &_sfInterpolationWorldTransform;
}

const BridgeSFMatrix *BulletRigidBodyBase::getSFInterpolationWorldTransform(void) const
{
    return &_sfInterpolationWorldTransform;
}


BridgeSFVec3f *BulletRigidBodyBase::editSFInterpolationLinearVelocity(void)
{
    editSField(InterpolationLinearVelocityFieldMask);

    return &_sfInterpolationLinearVelocity;
}

const BridgeSFVec3f *BulletRigidBodyBase::getSFInterpolationLinearVelocity(void) const
{
    return &_sfInterpolationLinearVelocity;
}


BridgeSFVec3f *BulletRigidBodyBase::editSFInterpolationAngularVelocity(void)
{
    editSField(InterpolationAngularVelocityFieldMask);

    return &_sfInterpolationAngularVelocity;
}

const BridgeSFVec3f *BulletRigidBodyBase::getSFInterpolationAngularVelocity(void) const
{
    return &_sfInterpolationAngularVelocity;
}


BridgeSFInt32 *BulletRigidBodyBase::editSFIslandTag(void)
{
    editSField(IslandTagFieldMask);

    return &_sfIslandTag;
}

const BridgeSFInt32 *BulletRigidBodyBase::getSFIslandTag(void) const
{
    return &_sfIslandTag;
}


BridgeSFInt32 *BulletRigidBodyBase::editSFCompanionId(void)
{
    editSField(CompanionIdFieldMask);

    return &_sfCompanionId;
}

const BridgeSFInt32 *BulletRigidBodyBase::getSFCompanionId(void) const
{
    return &_sfCompanionId;
}


BridgeSFReal32 *BulletRigidBodyBase::editSFHitFraction(void)
{
    editSField(HitFractionFieldMask);

    return &_sfHitFraction;
}

const BridgeSFReal32 *BulletRigidBodyBase::getSFHitFraction(void) const
{
    return &_sfHitFraction;
}


BridgeSFInt32 *BulletRigidBodyBase::editSFCollisionFlags(void)
{
    editSField(CollisionFlagsFieldMask);

    return &_sfCollisionFlags;
}

const BridgeSFInt32 *BulletRigidBodyBase::getSFCollisionFlags(void) const
{
    return &_sfCollisionFlags;
}


BridgeSFReal32 *BulletRigidBodyBase::editSFCcdSweptSphereRadius(void)
{
    editSField(CcdSweptSphereRadiusFieldMask);

    return &_sfCcdSweptSphereRadius;
}

const BridgeSFReal32 *BulletRigidBodyBase::getSFCcdSweptSphereRadius(void) const
{
    return &_sfCcdSweptSphereRadius;
}


BridgeSFReal32 *BulletRigidBodyBase::editSFCcdMotionThreashold(void)
{
    editSField(CcdMotionThreasholdFieldMask);

    return &_sfCcdMotionThreashold;
}

const BridgeSFReal32 *BulletRigidBodyBase::getSFCcdMotionThreashold(void) const
{
    return &_sfCcdMotionThreashold;
}


BridgeSFVec3f *BulletRigidBodyBase::editSFGravity(void)
{
    editSField(GravityFieldMask);

    return &_sfGravity;
}

const BridgeSFVec3f *BulletRigidBodyBase::getSFGravity(void) const
{
    return &_sfGravity;
}


BridgeSFVec2f *BulletRigidBodyBase::editSFDamping(void)
{
    editSField(DampingFieldMask);

    return &_sfDamping;
}

const BridgeSFVec2f *BulletRigidBodyBase::getSFDamping(void) const
{
    return &_sfDamping;
}


BridgeSFReal32 *BulletRigidBodyBase::editSFMass(void)
{
    editSField(MassFieldMask);

    return &_sfMass;
}

const BridgeSFReal32 *BulletRigidBodyBase::getSFMass(void) const
{
    return &_sfMass;
}


BridgeSFVec3f *BulletRigidBodyBase::editSFInertia(void)
{
    editSField(InertiaFieldMask);

    return &_sfInertia;
}

const BridgeSFVec3f *BulletRigidBodyBase::getSFInertia(void) const
{
    return &_sfInertia;
}


BridgeSFVec3f *BulletRigidBodyBase::editSFLinearFactor(void)
{
    editSField(LinearFactorFieldMask);

    return &_sfLinearFactor;
}

const BridgeSFVec3f *BulletRigidBodyBase::getSFLinearFactor(void) const
{
    return &_sfLinearFactor;
}


BridgeSFMatrix *BulletRigidBodyBase::editSFCenterOfMassTransform(void)
{
    editSField(CenterOfMassTransformFieldMask);

    return &_sfCenterOfMassTransform;
}

const BridgeSFMatrix *BulletRigidBodyBase::getSFCenterOfMassTransform(void) const
{
    return &_sfCenterOfMassTransform;
}


BridgeSFVec3f *BulletRigidBodyBase::editSFLinearVelocity(void)
{
    editSField(LinearVelocityFieldMask);

    return &_sfLinearVelocity;
}

const BridgeSFVec3f *BulletRigidBodyBase::getSFLinearVelocity(void) const
{
    return &_sfLinearVelocity;
}


BridgeSFVec3f *BulletRigidBodyBase::editSFAngularVelocity(void)
{
    editSField(AngularVelocityFieldMask);

    return &_sfAngularVelocity;
}

const BridgeSFVec3f *BulletRigidBodyBase::getSFAngularVelocity(void) const
{
    return &_sfAngularVelocity;
}


BridgeSFVec3f *BulletRigidBodyBase::editSFAngularFactor(void)
{
    editSField(AngularFactorFieldMask);

    return &_sfAngularFactor;
}

const BridgeSFVec3f *BulletRigidBodyBase::getSFAngularFactor(void) const
{
    return &_sfAngularFactor;
}


BridgeSFInt32 *BulletRigidBodyBase::editSFFlags(void)
{
    editSField(FlagsFieldMask);

    return &_sfFlags;
}

const BridgeSFInt32 *BulletRigidBodyBase::getSFFlags(void) const
{
    return &_sfFlags;
}


BridgeSFVec2f *BulletRigidBodyBase::editSFSleepingThresholds(void)
{
    editSField(SleepingThresholdsFieldMask);

    return &_sfSleepingThresholds;
}

const BridgeSFVec2f *BulletRigidBodyBase::getSFSleepingThresholds(void) const
{
    return &_sfSleepingThresholds;
}






/*------------------------------ access -----------------------------------*/

UInt32 BulletRigidBodyBase::getBinSize(ConstFieldMaskArg whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (ParentWorldFieldMask & whichField))
    {
        returnValue += _sfParentWorld.getBinSize();
    }
    if(FieldBits::NoField != (ToWorldFieldMask & whichField))
    {
        returnValue += _sfToWorld.getBinSize();
    }
    if(FieldBits::NoField != (GroupMaskFieldMask & whichField))
    {
        returnValue += _sfGroupMask.getBinSize();
    }
    if(FieldBits::NoField != (CollisionMaskFieldMask & whichField))
    {
        returnValue += _sfCollisionMask.getBinSize();
    }
    if(FieldBits::NoField != (CollisionShapeFieldMask & whichField))
    {
        returnValue += _sfCollisionShape.getBinSize();
    }
    if(FieldBits::NoField != (AnisotropicFrictionFieldMask & whichField))
    {
        returnValue += _sfAnisotropicFriction.getBinSize();
    }
    if(FieldBits::NoField != (ContactProcessingThreasholdFieldMask & whichField))
    {
        returnValue += _sfContactProcessingThreashold.getBinSize();
    }
    if(FieldBits::NoField != (ActivationFieldMask & whichField))
    {
        returnValue += _sfActivation.getBinSize();
    }
    if(FieldBits::NoField != (DeactivationTimeFieldMask & whichField))
    {
        returnValue += _sfDeactivationTime.getBinSize();
    }
    if(FieldBits::NoField != (RestitutionFieldMask & whichField))
    {
        returnValue += _sfRestitution.getBinSize();
    }
    if(FieldBits::NoField != (FrictionFieldMask & whichField))
    {
        returnValue += _sfFriction.getBinSize();
    }
    if(FieldBits::NoField != (WorldTransformFieldMask & whichField))
    {
        returnValue += _sfWorldTransform.getBinSize();
    }
    if(FieldBits::NoField != (InterpolationWorldTransformFieldMask & whichField))
    {
        returnValue += _sfInterpolationWorldTransform.getBinSize();
    }
    if(FieldBits::NoField != (InterpolationLinearVelocityFieldMask & whichField))
    {
        returnValue += _sfInterpolationLinearVelocity.getBinSize();
    }
    if(FieldBits::NoField != (InterpolationAngularVelocityFieldMask & whichField))
    {
        returnValue += _sfInterpolationAngularVelocity.getBinSize();
    }
    if(FieldBits::NoField != (IslandTagFieldMask & whichField))
    {
        returnValue += _sfIslandTag.getBinSize();
    }
    if(FieldBits::NoField != (CompanionIdFieldMask & whichField))
    {
        returnValue += _sfCompanionId.getBinSize();
    }
    if(FieldBits::NoField != (HitFractionFieldMask & whichField))
    {
        returnValue += _sfHitFraction.getBinSize();
    }
    if(FieldBits::NoField != (CollisionFlagsFieldMask & whichField))
    {
        returnValue += _sfCollisionFlags.getBinSize();
    }
    if(FieldBits::NoField != (CcdSweptSphereRadiusFieldMask & whichField))
    {
        returnValue += _sfCcdSweptSphereRadius.getBinSize();
    }
    if(FieldBits::NoField != (CcdMotionThreasholdFieldMask & whichField))
    {
        returnValue += _sfCcdMotionThreashold.getBinSize();
    }
    if(FieldBits::NoField != (GravityFieldMask & whichField))
    {
        returnValue += _sfGravity.getBinSize();
    }
    if(FieldBits::NoField != (DampingFieldMask & whichField))
    {
        returnValue += _sfDamping.getBinSize();
    }
    if(FieldBits::NoField != (MassFieldMask & whichField))
    {
        returnValue += _sfMass.getBinSize();
    }
    if(FieldBits::NoField != (InertiaFieldMask & whichField))
    {
        returnValue += _sfInertia.getBinSize();
    }
    if(FieldBits::NoField != (LinearFactorFieldMask & whichField))
    {
        returnValue += _sfLinearFactor.getBinSize();
    }
    if(FieldBits::NoField != (CenterOfMassTransformFieldMask & whichField))
    {
        returnValue += _sfCenterOfMassTransform.getBinSize();
    }
    if(FieldBits::NoField != (LinearVelocityFieldMask & whichField))
    {
        returnValue += _sfLinearVelocity.getBinSize();
    }
    if(FieldBits::NoField != (AngularVelocityFieldMask & whichField))
    {
        returnValue += _sfAngularVelocity.getBinSize();
    }
    if(FieldBits::NoField != (AngularFactorFieldMask & whichField))
    {
        returnValue += _sfAngularFactor.getBinSize();
    }
    if(FieldBits::NoField != (FlagsFieldMask & whichField))
    {
        returnValue += _sfFlags.getBinSize();
    }
    if(FieldBits::NoField != (SleepingThresholdsFieldMask & whichField))
    {
        returnValue += _sfSleepingThresholds.getBinSize();
    }

    return returnValue;
}

void BulletRigidBodyBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (ParentWorldFieldMask & whichField))
    {
        _sfParentWorld.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ToWorldFieldMask & whichField))
    {
        _sfToWorld.copyToBin(pMem);
    }
    if(FieldBits::NoField != (GroupMaskFieldMask & whichField))
    {
        _sfGroupMask.copyToBin(pMem);
    }
    if(FieldBits::NoField != (CollisionMaskFieldMask & whichField))
    {
        _sfCollisionMask.copyToBin(pMem);
    }
    if(FieldBits::NoField != (CollisionShapeFieldMask & whichField))
    {
        _sfCollisionShape.copyToBin(pMem);
    }
    if(FieldBits::NoField != (AnisotropicFrictionFieldMask & whichField))
    {
        _sfAnisotropicFriction.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ContactProcessingThreasholdFieldMask & whichField))
    {
        _sfContactProcessingThreashold.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ActivationFieldMask & whichField))
    {
        _sfActivation.copyToBin(pMem);
    }
    if(FieldBits::NoField != (DeactivationTimeFieldMask & whichField))
    {
        _sfDeactivationTime.copyToBin(pMem);
    }
    if(FieldBits::NoField != (RestitutionFieldMask & whichField))
    {
        _sfRestitution.copyToBin(pMem);
    }
    if(FieldBits::NoField != (FrictionFieldMask & whichField))
    {
        _sfFriction.copyToBin(pMem);
    }
    if(FieldBits::NoField != (WorldTransformFieldMask & whichField))
    {
        _sfWorldTransform.copyToBin(pMem);
    }
    if(FieldBits::NoField != (InterpolationWorldTransformFieldMask & whichField))
    {
        _sfInterpolationWorldTransform.copyToBin(pMem);
    }
    if(FieldBits::NoField != (InterpolationLinearVelocityFieldMask & whichField))
    {
        _sfInterpolationLinearVelocity.copyToBin(pMem);
    }
    if(FieldBits::NoField != (InterpolationAngularVelocityFieldMask & whichField))
    {
        _sfInterpolationAngularVelocity.copyToBin(pMem);
    }
    if(FieldBits::NoField != (IslandTagFieldMask & whichField))
    {
        _sfIslandTag.copyToBin(pMem);
    }
    if(FieldBits::NoField != (CompanionIdFieldMask & whichField))
    {
        _sfCompanionId.copyToBin(pMem);
    }
    if(FieldBits::NoField != (HitFractionFieldMask & whichField))
    {
        _sfHitFraction.copyToBin(pMem);
    }
    if(FieldBits::NoField != (CollisionFlagsFieldMask & whichField))
    {
        _sfCollisionFlags.copyToBin(pMem);
    }
    if(FieldBits::NoField != (CcdSweptSphereRadiusFieldMask & whichField))
    {
        _sfCcdSweptSphereRadius.copyToBin(pMem);
    }
    if(FieldBits::NoField != (CcdMotionThreasholdFieldMask & whichField))
    {
        _sfCcdMotionThreashold.copyToBin(pMem);
    }
    if(FieldBits::NoField != (GravityFieldMask & whichField))
    {
        _sfGravity.copyToBin(pMem);
    }
    if(FieldBits::NoField != (DampingFieldMask & whichField))
    {
        _sfDamping.copyToBin(pMem);
    }
    if(FieldBits::NoField != (MassFieldMask & whichField))
    {
        _sfMass.copyToBin(pMem);
    }
    if(FieldBits::NoField != (InertiaFieldMask & whichField))
    {
        _sfInertia.copyToBin(pMem);
    }
    if(FieldBits::NoField != (LinearFactorFieldMask & whichField))
    {
        _sfLinearFactor.copyToBin(pMem);
    }
    if(FieldBits::NoField != (CenterOfMassTransformFieldMask & whichField))
    {
        _sfCenterOfMassTransform.copyToBin(pMem);
    }
    if(FieldBits::NoField != (LinearVelocityFieldMask & whichField))
    {
        _sfLinearVelocity.copyToBin(pMem);
    }
    if(FieldBits::NoField != (AngularVelocityFieldMask & whichField))
    {
        _sfAngularVelocity.copyToBin(pMem);
    }
    if(FieldBits::NoField != (AngularFactorFieldMask & whichField))
    {
        _sfAngularFactor.copyToBin(pMem);
    }
    if(FieldBits::NoField != (FlagsFieldMask & whichField))
    {
        _sfFlags.copyToBin(pMem);
    }
    if(FieldBits::NoField != (SleepingThresholdsFieldMask & whichField))
    {
        _sfSleepingThresholds.copyToBin(pMem);
    }
}

void BulletRigidBodyBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (ParentWorldFieldMask & whichField))
    {
        editSField(ParentWorldFieldMask);
        _sfParentWorld.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ToWorldFieldMask & whichField))
    {
        editSField(ToWorldFieldMask);
        _sfToWorld.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (GroupMaskFieldMask & whichField))
    {
        editSField(GroupMaskFieldMask);
        _sfGroupMask.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (CollisionMaskFieldMask & whichField))
    {
        editSField(CollisionMaskFieldMask);
        _sfCollisionMask.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (CollisionShapeFieldMask & whichField))
    {
        editSField(CollisionShapeFieldMask);
        _sfCollisionShape.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (AnisotropicFrictionFieldMask & whichField))
    {
        editSField(AnisotropicFrictionFieldMask);
        _sfAnisotropicFriction.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ContactProcessingThreasholdFieldMask & whichField))
    {
        editSField(ContactProcessingThreasholdFieldMask);
        _sfContactProcessingThreashold.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ActivationFieldMask & whichField))
    {
        editSField(ActivationFieldMask);
        _sfActivation.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (DeactivationTimeFieldMask & whichField))
    {
        editSField(DeactivationTimeFieldMask);
        _sfDeactivationTime.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (RestitutionFieldMask & whichField))
    {
        editSField(RestitutionFieldMask);
        _sfRestitution.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (FrictionFieldMask & whichField))
    {
        editSField(FrictionFieldMask);
        _sfFriction.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (WorldTransformFieldMask & whichField))
    {
        editSField(WorldTransformFieldMask);
        _sfWorldTransform.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (InterpolationWorldTransformFieldMask & whichField))
    {
        editSField(InterpolationWorldTransformFieldMask);
        _sfInterpolationWorldTransform.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (InterpolationLinearVelocityFieldMask & whichField))
    {
        editSField(InterpolationLinearVelocityFieldMask);
        _sfInterpolationLinearVelocity.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (InterpolationAngularVelocityFieldMask & whichField))
    {
        editSField(InterpolationAngularVelocityFieldMask);
        _sfInterpolationAngularVelocity.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (IslandTagFieldMask & whichField))
    {
        editSField(IslandTagFieldMask);
        _sfIslandTag.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (CompanionIdFieldMask & whichField))
    {
        editSField(CompanionIdFieldMask);
        _sfCompanionId.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (HitFractionFieldMask & whichField))
    {
        editSField(HitFractionFieldMask);
        _sfHitFraction.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (CollisionFlagsFieldMask & whichField))
    {
        editSField(CollisionFlagsFieldMask);
        _sfCollisionFlags.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (CcdSweptSphereRadiusFieldMask & whichField))
    {
        editSField(CcdSweptSphereRadiusFieldMask);
        _sfCcdSweptSphereRadius.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (CcdMotionThreasholdFieldMask & whichField))
    {
        editSField(CcdMotionThreasholdFieldMask);
        _sfCcdMotionThreashold.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (GravityFieldMask & whichField))
    {
        editSField(GravityFieldMask);
        _sfGravity.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (DampingFieldMask & whichField))
    {
        editSField(DampingFieldMask);
        _sfDamping.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (MassFieldMask & whichField))
    {
        editSField(MassFieldMask);
        _sfMass.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (InertiaFieldMask & whichField))
    {
        editSField(InertiaFieldMask);
        _sfInertia.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (LinearFactorFieldMask & whichField))
    {
        editSField(LinearFactorFieldMask);
        _sfLinearFactor.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (CenterOfMassTransformFieldMask & whichField))
    {
        editSField(CenterOfMassTransformFieldMask);
        _sfCenterOfMassTransform.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (LinearVelocityFieldMask & whichField))
    {
        editSField(LinearVelocityFieldMask);
        _sfLinearVelocity.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (AngularVelocityFieldMask & whichField))
    {
        editSField(AngularVelocityFieldMask);
        _sfAngularVelocity.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (AngularFactorFieldMask & whichField))
    {
        editSField(AngularFactorFieldMask);
        _sfAngularFactor.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (FlagsFieldMask & whichField))
    {
        editSField(FlagsFieldMask);
        _sfFlags.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (SleepingThresholdsFieldMask & whichField))
    {
        editSField(SleepingThresholdsFieldMask);
        _sfSleepingThresholds.copyFromBin(pMem);
    }
}

//! create a new instance of the class
BulletRigidBodyTransitPtr BulletRigidBodyBase::createLocal(BitVector bFlags)
{
    BulletRigidBodyTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyLocal(bFlags);

        fc = dynamic_pointer_cast<BulletRigidBody>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class, copy the container flags
BulletRigidBodyTransitPtr BulletRigidBodyBase::createDependent(BitVector bFlags)
{
    BulletRigidBodyTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyDependent(bFlags);

        fc = dynamic_pointer_cast<BulletRigidBody>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class
BulletRigidBodyTransitPtr BulletRigidBodyBase::create(void)
{
    BulletRigidBodyTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopy();

        fc = dynamic_pointer_cast<BulletRigidBody>(tmpPtr);
    }

    return fc;
}

BulletRigidBody *BulletRigidBodyBase::createEmptyLocal(BitVector bFlags)
{
    BulletRigidBody *returnValue;

    newPtr<BulletRigidBody>(returnValue, bFlags);

    returnValue->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

//! create an empty new instance of the class, do not copy the prototype
BulletRigidBody *BulletRigidBodyBase::createEmpty(void)
{
    BulletRigidBody *returnValue;

    newPtr<BulletRigidBody>(returnValue, Thread::getCurrentLocalFlags());

    returnValue->_pFieldFlags->_bNamespaceMask &=
        ~Thread::getCurrentLocalFlags();

    return returnValue;
}

FieldContainerTransitPtr BulletRigidBodyBase::shallowCopyLocal(
    BitVector bFlags) const
{
    BulletRigidBody *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const BulletRigidBody *>(this), bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

FieldContainerTransitPtr BulletRigidBodyBase::shallowCopyDependent(
    BitVector bFlags) const
{
    BulletRigidBody *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const BulletRigidBody *>(this), ~bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask = bFlags;

    return returnValue;
}

FieldContainerTransitPtr BulletRigidBodyBase::shallowCopy(void) const
{
    BulletRigidBody *tmpPtr;

    newPtr(tmpPtr,
           dynamic_cast<const BulletRigidBody *>(this),
           Thread::getCurrentLocalFlags());

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~Thread::getCurrentLocalFlags();

    FieldContainerTransitPtr returnValue(tmpPtr);

    return returnValue;
}



/*------------------------- constructors ----------------------------------*/

BulletRigidBodyBase::BulletRigidBodyBase(void) :
    Inherited(),
    _sfParentWorld            (NULL),
    _sfToWorld                (),
    _sfGroupMask              (Int16(TypeTraits<Int16>::getMax())),
    _sfCollisionMask          (Int16(TypeTraits<Int16>::getMax())),
    _sfCollisionShape         (this,
                          CollisionShapeFieldId,
                          BulletCollisionShape::ParentObjectFieldId),
    _sfAnisotropicFriction    (boost::bind(&BulletRigidBody::getExternalAnisotropicFriction, static_cast<BulletRigidBody*>(this)),boost::bind(&BulletRigidBody::setExternalAnisotropicFriction, static_cast<BulletRigidBody*>(this), _1)),
    _sfContactProcessingThreashold(boost::bind(&BulletRigidBody::getExternalContactProcessingThreashold, static_cast<BulletRigidBody*>(this)),boost::bind(&BulletRigidBody::setExternalContactProcessingThreashold, static_cast<BulletRigidBody*>(this), _1)),
    _sfActivation             (boost::bind(&BulletRigidBody::getExternalActivation, static_cast<BulletRigidBody*>(this)),boost::bind(&BulletRigidBody::setExternalActivation, static_cast<BulletRigidBody*>(this), _1)),
    _sfDeactivationTime       (boost::bind(&BulletRigidBody::getExternalDeactivationTime, static_cast<BulletRigidBody*>(this)),boost::bind(&BulletRigidBody::setExternalDeactivationTime, static_cast<BulletRigidBody*>(this), _1)),
    _sfRestitution            (boost::bind(&BulletRigidBody::getExternalRestitution, static_cast<BulletRigidBody*>(this)),boost::bind(&BulletRigidBody::setExternalRestitution, static_cast<BulletRigidBody*>(this), _1)),
    _sfFriction               (boost::bind(&BulletRigidBody::getExternalFriction, static_cast<BulletRigidBody*>(this)),boost::bind(&BulletRigidBody::setExternalFriction, static_cast<BulletRigidBody*>(this), _1)),
    _sfWorldTransform         (boost::bind(&BulletRigidBody::getExternalWorldTransform, static_cast<BulletRigidBody*>(this)),boost::bind(&BulletRigidBody::setExternalWorldTransform, static_cast<BulletRigidBody*>(this), _1)),
    _sfInterpolationWorldTransform(boost::bind(&BulletRigidBody::getExternalInterpolationWorldTransform, static_cast<BulletRigidBody*>(this)),boost::bind(&BulletRigidBody::setExternalInterpolationWorldTransform, static_cast<BulletRigidBody*>(this), _1)),
    _sfInterpolationLinearVelocity(boost::bind(&BulletRigidBody::getExternalInterpolationLinearVelocity, static_cast<BulletRigidBody*>(this)),boost::bind(&BulletRigidBody::setExternalInterpolationLinearVelocity, static_cast<BulletRigidBody*>(this), _1)),
    _sfInterpolationAngularVelocity(boost::bind(&BulletRigidBody::getExternalInterpolationAngularVelocity, static_cast<BulletRigidBody*>(this)),boost::bind(&BulletRigidBody::setExternalInterpolationAngularVelocity, static_cast<BulletRigidBody*>(this), _1)),
    _sfIslandTag              (boost::bind(&BulletRigidBody::getExternalIslandTag, static_cast<BulletRigidBody*>(this)),boost::bind(&BulletRigidBody::setExternalIslandTag, static_cast<BulletRigidBody*>(this), _1)),
    _sfCompanionId            (boost::bind(&BulletRigidBody::getExternalCompanionId, static_cast<BulletRigidBody*>(this)),boost::bind(&BulletRigidBody::setExternalCompanionId, static_cast<BulletRigidBody*>(this), _1)),
    _sfHitFraction            (boost::bind(&BulletRigidBody::getExternalHitFraction, static_cast<BulletRigidBody*>(this)),boost::bind(&BulletRigidBody::setExternalHitFraction, static_cast<BulletRigidBody*>(this), _1)),
    _sfCollisionFlags         (boost::bind(&BulletRigidBody::getExternalCollisionFlags, static_cast<BulletRigidBody*>(this)),boost::bind(&BulletRigidBody::setExternalCollisionFlags, static_cast<BulletRigidBody*>(this), _1)),
    _sfCcdSweptSphereRadius   (boost::bind(&BulletRigidBody::getExternalCcdSweptSphereRadius, static_cast<BulletRigidBody*>(this)),boost::bind(&BulletRigidBody::setExternalCcdSweptSphereRadius, static_cast<BulletRigidBody*>(this), _1)),
    _sfCcdMotionThreashold    (boost::bind(&BulletRigidBody::getExternalCcdMotionThreashold, static_cast<BulletRigidBody*>(this)),boost::bind(&BulletRigidBody::setExternalCcdMotionThreashold, static_cast<BulletRigidBody*>(this), _1)),
    _sfGravity                (boost::bind(&BulletRigidBody::getExternalGravity, static_cast<BulletRigidBody*>(this)),boost::bind(&BulletRigidBody::setExternalGravity, static_cast<BulletRigidBody*>(this), _1)),
    _sfDamping                (boost::bind(&BulletRigidBody::getExternalDamping, static_cast<BulletRigidBody*>(this)),boost::bind(&BulletRigidBody::setExternalDamping, static_cast<BulletRigidBody*>(this), _1)),
    _sfMass                   (boost::bind(&BulletRigidBody::getExternalMass, static_cast<BulletRigidBody*>(this)),boost::bind(&BulletRigidBody::setExternalMass, static_cast<BulletRigidBody*>(this), _1)),
    _sfInertia                (boost::bind(&BulletRigidBody::getExternalInertia, static_cast<BulletRigidBody*>(this)),boost::bind(&BulletRigidBody::setExternalInertia, static_cast<BulletRigidBody*>(this), _1)),
    _sfLinearFactor           (boost::bind(&BulletRigidBody::getExternalLinearFactor, static_cast<BulletRigidBody*>(this)),boost::bind(&BulletRigidBody::setExternalLinearFactor, static_cast<BulletRigidBody*>(this), _1)),
    _sfCenterOfMassTransform  (boost::bind(&BulletRigidBody::getExternalCenterOfMassTransform, static_cast<BulletRigidBody*>(this)),boost::bind(&BulletRigidBody::setExternalCenterOfMassTransform, static_cast<BulletRigidBody*>(this), _1)),
    _sfLinearVelocity         (boost::bind(&BulletRigidBody::getExternalLinearVelocity, static_cast<BulletRigidBody*>(this)),boost::bind(&BulletRigidBody::setExternalLinearVelocity, static_cast<BulletRigidBody*>(this), _1)),
    _sfAngularVelocity        (boost::bind(&BulletRigidBody::getExternalAngularVelocity, static_cast<BulletRigidBody*>(this)),boost::bind(&BulletRigidBody::setExternalAngularVelocity, static_cast<BulletRigidBody*>(this), _1)),
    _sfAngularFactor          (boost::bind(&BulletRigidBody::getExternalAngularFactor, static_cast<BulletRigidBody*>(this)),boost::bind(&BulletRigidBody::setExternalAngularFactor, static_cast<BulletRigidBody*>(this), _1)),
    _sfFlags                  (boost::bind(&BulletRigidBody::getExternalFlags, static_cast<BulletRigidBody*>(this)),boost::bind(&BulletRigidBody::setExternalFlags, static_cast<BulletRigidBody*>(this), _1)),
    _sfSleepingThresholds     (boost::bind(&BulletRigidBody::getExternalSleepingThresholds, static_cast<BulletRigidBody*>(this)),boost::bind(&BulletRigidBody::setExternalSleepingThresholds, static_cast<BulletRigidBody*>(this), _1))
{
}

BulletRigidBodyBase::BulletRigidBodyBase(const BulletRigidBodyBase &source) :
    Inherited(source),
    _sfParentWorld            (NULL),
    _sfToWorld                (source._sfToWorld                ),
    _sfGroupMask              (source._sfGroupMask              ),
    _sfCollisionMask          (source._sfCollisionMask          ),
    _sfCollisionShape         (this,
                          CollisionShapeFieldId,
                          BulletCollisionShape::ParentObjectFieldId),
    _sfAnisotropicFriction    (boost::bind(&BulletRigidBody::getExternalAnisotropicFriction, static_cast<BulletRigidBody*>(this)),boost::bind(&BulletRigidBody::setExternalAnisotropicFriction, static_cast<BulletRigidBody*>(this), _1)),
    _sfContactProcessingThreashold(boost::bind(&BulletRigidBody::getExternalContactProcessingThreashold, static_cast<BulletRigidBody*>(this)),boost::bind(&BulletRigidBody::setExternalContactProcessingThreashold, static_cast<BulletRigidBody*>(this), _1)),
    _sfActivation             (boost::bind(&BulletRigidBody::getExternalActivation, static_cast<BulletRigidBody*>(this)),boost::bind(&BulletRigidBody::setExternalActivation, static_cast<BulletRigidBody*>(this), _1)),
    _sfDeactivationTime       (boost::bind(&BulletRigidBody::getExternalDeactivationTime, static_cast<BulletRigidBody*>(this)),boost::bind(&BulletRigidBody::setExternalDeactivationTime, static_cast<BulletRigidBody*>(this), _1)),
    _sfRestitution            (boost::bind(&BulletRigidBody::getExternalRestitution, static_cast<BulletRigidBody*>(this)),boost::bind(&BulletRigidBody::setExternalRestitution, static_cast<BulletRigidBody*>(this), _1)),
    _sfFriction               (boost::bind(&BulletRigidBody::getExternalFriction, static_cast<BulletRigidBody*>(this)),boost::bind(&BulletRigidBody::setExternalFriction, static_cast<BulletRigidBody*>(this), _1)),
    _sfWorldTransform         (boost::bind(&BulletRigidBody::getExternalWorldTransform, static_cast<BulletRigidBody*>(this)),boost::bind(&BulletRigidBody::setExternalWorldTransform, static_cast<BulletRigidBody*>(this), _1)),
    _sfInterpolationWorldTransform(boost::bind(&BulletRigidBody::getExternalInterpolationWorldTransform, static_cast<BulletRigidBody*>(this)),boost::bind(&BulletRigidBody::setExternalInterpolationWorldTransform, static_cast<BulletRigidBody*>(this), _1)),
    _sfInterpolationLinearVelocity(boost::bind(&BulletRigidBody::getExternalInterpolationLinearVelocity, static_cast<BulletRigidBody*>(this)),boost::bind(&BulletRigidBody::setExternalInterpolationLinearVelocity, static_cast<BulletRigidBody*>(this), _1)),
    _sfInterpolationAngularVelocity(boost::bind(&BulletRigidBody::getExternalInterpolationAngularVelocity, static_cast<BulletRigidBody*>(this)),boost::bind(&BulletRigidBody::setExternalInterpolationAngularVelocity, static_cast<BulletRigidBody*>(this), _1)),
    _sfIslandTag              (boost::bind(&BulletRigidBody::getExternalIslandTag, static_cast<BulletRigidBody*>(this)),boost::bind(&BulletRigidBody::setExternalIslandTag, static_cast<BulletRigidBody*>(this), _1)),
    _sfCompanionId            (boost::bind(&BulletRigidBody::getExternalCompanionId, static_cast<BulletRigidBody*>(this)),boost::bind(&BulletRigidBody::setExternalCompanionId, static_cast<BulletRigidBody*>(this), _1)),
    _sfHitFraction            (boost::bind(&BulletRigidBody::getExternalHitFraction, static_cast<BulletRigidBody*>(this)),boost::bind(&BulletRigidBody::setExternalHitFraction, static_cast<BulletRigidBody*>(this), _1)),
    _sfCollisionFlags         (boost::bind(&BulletRigidBody::getExternalCollisionFlags, static_cast<BulletRigidBody*>(this)),boost::bind(&BulletRigidBody::setExternalCollisionFlags, static_cast<BulletRigidBody*>(this), _1)),
    _sfCcdSweptSphereRadius   (boost::bind(&BulletRigidBody::getExternalCcdSweptSphereRadius, static_cast<BulletRigidBody*>(this)),boost::bind(&BulletRigidBody::setExternalCcdSweptSphereRadius, static_cast<BulletRigidBody*>(this), _1)),
    _sfCcdMotionThreashold    (boost::bind(&BulletRigidBody::getExternalCcdMotionThreashold, static_cast<BulletRigidBody*>(this)),boost::bind(&BulletRigidBody::setExternalCcdMotionThreashold, static_cast<BulletRigidBody*>(this), _1)),
    _sfGravity                (boost::bind(&BulletRigidBody::getExternalGravity, static_cast<BulletRigidBody*>(this)),boost::bind(&BulletRigidBody::setExternalGravity, static_cast<BulletRigidBody*>(this), _1)),
    _sfDamping                (boost::bind(&BulletRigidBody::getExternalDamping, static_cast<BulletRigidBody*>(this)),boost::bind(&BulletRigidBody::setExternalDamping, static_cast<BulletRigidBody*>(this), _1)),
    _sfMass                   (boost::bind(&BulletRigidBody::getExternalMass, static_cast<BulletRigidBody*>(this)),boost::bind(&BulletRigidBody::setExternalMass, static_cast<BulletRigidBody*>(this), _1)),
    _sfInertia                (boost::bind(&BulletRigidBody::getExternalInertia, static_cast<BulletRigidBody*>(this)),boost::bind(&BulletRigidBody::setExternalInertia, static_cast<BulletRigidBody*>(this), _1)),
    _sfLinearFactor           (boost::bind(&BulletRigidBody::getExternalLinearFactor, static_cast<BulletRigidBody*>(this)),boost::bind(&BulletRigidBody::setExternalLinearFactor, static_cast<BulletRigidBody*>(this), _1)),
    _sfCenterOfMassTransform  (boost::bind(&BulletRigidBody::getExternalCenterOfMassTransform, static_cast<BulletRigidBody*>(this)),boost::bind(&BulletRigidBody::setExternalCenterOfMassTransform, static_cast<BulletRigidBody*>(this), _1)),
    _sfLinearVelocity         (boost::bind(&BulletRigidBody::getExternalLinearVelocity, static_cast<BulletRigidBody*>(this)),boost::bind(&BulletRigidBody::setExternalLinearVelocity, static_cast<BulletRigidBody*>(this), _1)),
    _sfAngularVelocity        (boost::bind(&BulletRigidBody::getExternalAngularVelocity, static_cast<BulletRigidBody*>(this)),boost::bind(&BulletRigidBody::setExternalAngularVelocity, static_cast<BulletRigidBody*>(this), _1)),
    _sfAngularFactor          (boost::bind(&BulletRigidBody::getExternalAngularFactor, static_cast<BulletRigidBody*>(this)),boost::bind(&BulletRigidBody::setExternalAngularFactor, static_cast<BulletRigidBody*>(this), _1)),
    _sfFlags                  (boost::bind(&BulletRigidBody::getExternalFlags, static_cast<BulletRigidBody*>(this)),boost::bind(&BulletRigidBody::setExternalFlags, static_cast<BulletRigidBody*>(this), _1)),
    _sfSleepingThresholds     (boost::bind(&BulletRigidBody::getExternalSleepingThresholds, static_cast<BulletRigidBody*>(this)),boost::bind(&BulletRigidBody::setExternalSleepingThresholds, static_cast<BulletRigidBody*>(this), _1))
{
}


/*-------------------------- destructors ----------------------------------*/

BulletRigidBodyBase::~BulletRigidBodyBase(void)
{
}
/*-------------------------------------------------------------------------*/
/* Parent linking                                                          */

bool BulletRigidBodyBase::linkParent(
    FieldContainer * const pParent,
    UInt16           const childFieldId,
    UInt16           const parentFieldId )
{
    if(parentFieldId == ParentWorldFieldId)
    {
        FieldContainer * pTypedParent =
            dynamic_cast< FieldContainer * >(pParent);

        if(pTypedParent != NULL)
        {
            FieldContainer *pOldParent =
                _sfParentWorld.getValue         ();

            UInt16 oldChildFieldId =
                _sfParentWorld.getParentFieldPos();

            if(pOldParent != NULL)
            {
                pOldParent->unlinkChild(this, oldChildFieldId);
            }

            editSField(ParentWorldFieldMask);

            _sfParentWorld.setValue(static_cast<FieldContainer *>(pParent), childFieldId);

            return true;
        }

        return false;
    }

    return Inherited::linkParent(pParent, childFieldId, parentFieldId);
}

bool BulletRigidBodyBase::unlinkParent(
    FieldContainer * const pParent,
    UInt16           const parentFieldId)
{
    if(parentFieldId == ParentWorldFieldId)
    {
        FieldContainer * pTypedParent =
            dynamic_cast< FieldContainer * >(pParent);

        if(pTypedParent != NULL)
        {
            if(_sfParentWorld.getValue() == pTypedParent)
            {
                editSField(ParentWorldFieldMask);

                _sfParentWorld.setValue(NULL, 0xFFFF);

                return true;
            }

            SWARNING << "Child (["          << this
                     << "] id ["            << this->getId()
                     << "] type ["          << this->getType().getCName()
                     << "] parentFieldId [" << parentFieldId
                     << "]) - Parent (["    << pParent
                     << "] id ["            << pParent->getId()
                     << "] type ["          << pParent->getType().getCName()
                     << "]): link inconsistent!"
                     << std::endl;

            return false;
        }

        return false;
    }

    return Inherited::unlinkParent(pParent, parentFieldId);
}


/*-------------------------------------------------------------------------*/
/* Child linking                                                           */

bool BulletRigidBodyBase::unlinkChild(
    FieldContainer * const pChild,
    UInt16           const childFieldId)
{
    if(childFieldId == CollisionShapeFieldId)
    {
        BulletCollisionShape * pTypedChild =
            dynamic_cast<BulletCollisionShape *>(pChild);

        if(pTypedChild != NULL)
        {
            if(_sfCollisionShape.getValue() == pTypedChild)
            {
                editSField(CollisionShapeFieldMask);

                _sfCollisionShape.setValue(NULL);

                return true;
            }

            SWARNING << "Parent (["        << this
                     << "] id ["           << this->getId()
                     << "] type ["         << this->getType().getCName()
                     << "] childFieldId [" << childFieldId
                     << "]) - Child (["    << pChild
                     << "] id ["           << pChild->getId()
                     << "] type ["         << pChild->getType().getCName()
                     << "]): link inconsistent!"
                     << std::endl;

            return false;
        }

        return false;
    }


    return Inherited::unlinkChild(pChild, childFieldId);
}

void BulletRigidBodyBase::onCreate(const BulletRigidBody *source)
{
    Inherited::onCreate(source);

    if(source != NULL)
    {
        BulletRigidBody *pThis = static_cast<BulletRigidBody *>(this);

        pThis->setCollisionShape(source->getCollisionShape());
    }
}

GetFieldHandlePtr BulletRigidBodyBase::getHandleParentWorld     (void) const
{
    SFParentFieldContainerPtr::GetHandlePtr returnValue;

    return returnValue;
}

EditFieldHandlePtr BulletRigidBodyBase::editHandleParentWorld    (void)
{
    EditFieldHandlePtr returnValue;

    return returnValue;
}

GetFieldHandlePtr BulletRigidBodyBase::getHandleToWorld         (void) const
{
    SFMatrix::GetHandlePtr returnValue(
        new  SFMatrix::GetHandle(
             &_sfToWorld,
             this->getType().getFieldDesc(ToWorldFieldId),
             const_cast<BulletRigidBodyBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr BulletRigidBodyBase::editHandleToWorld        (void)
{
    SFMatrix::EditHandlePtr returnValue(
        new  SFMatrix::EditHandle(
             &_sfToWorld,
             this->getType().getFieldDesc(ToWorldFieldId),
             this));


    editSField(ToWorldFieldMask);

    return returnValue;
}

GetFieldHandlePtr BulletRigidBodyBase::getHandleGroupMask       (void) const
{
    SFInt16::GetHandlePtr returnValue(
        new  SFInt16::GetHandle(
             &_sfGroupMask,
             this->getType().getFieldDesc(GroupMaskFieldId),
             const_cast<BulletRigidBodyBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr BulletRigidBodyBase::editHandleGroupMask      (void)
{
    SFInt16::EditHandlePtr returnValue(
        new  SFInt16::EditHandle(
             &_sfGroupMask,
             this->getType().getFieldDesc(GroupMaskFieldId),
             this));


    editSField(GroupMaskFieldMask);

    return returnValue;
}

GetFieldHandlePtr BulletRigidBodyBase::getHandleCollisionMask   (void) const
{
    SFInt16::GetHandlePtr returnValue(
        new  SFInt16::GetHandle(
             &_sfCollisionMask,
             this->getType().getFieldDesc(CollisionMaskFieldId),
             const_cast<BulletRigidBodyBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr BulletRigidBodyBase::editHandleCollisionMask  (void)
{
    SFInt16::EditHandlePtr returnValue(
        new  SFInt16::EditHandle(
             &_sfCollisionMask,
             this->getType().getFieldDesc(CollisionMaskFieldId),
             this));


    editSField(CollisionMaskFieldMask);

    return returnValue;
}

GetFieldHandlePtr BulletRigidBodyBase::getHandleCollisionShape  (void) const
{
    SFUnrecChildBulletCollisionShapePtr::GetHandlePtr returnValue(
        new  SFUnrecChildBulletCollisionShapePtr::GetHandle(
             &_sfCollisionShape,
             this->getType().getFieldDesc(CollisionShapeFieldId),
             const_cast<BulletRigidBodyBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr BulletRigidBodyBase::editHandleCollisionShape (void)
{
    SFUnrecChildBulletCollisionShapePtr::EditHandlePtr returnValue(
        new  SFUnrecChildBulletCollisionShapePtr::EditHandle(
             &_sfCollisionShape,
             this->getType().getFieldDesc(CollisionShapeFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&BulletRigidBody::setCollisionShape,
                    static_cast<BulletRigidBody *>(this), _1));

    editSField(CollisionShapeFieldMask);

    return returnValue;
}

GetFieldHandlePtr BulletRigidBodyBase::getHandleAnisotropicFriction (void) const
{
    BridgeSFVec3f::GetHandlePtr returnValue(
        new  BridgeSFVec3f::GetHandle(
             &_sfAnisotropicFriction,
             this->getType().getFieldDesc(AnisotropicFrictionFieldId),
             const_cast<BulletRigidBodyBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr BulletRigidBodyBase::editHandleAnisotropicFriction(void)
{
    BridgeSFVec3f::EditHandlePtr returnValue(
        new  BridgeSFVec3f::EditHandle(
             &_sfAnisotropicFriction,
             this->getType().getFieldDesc(AnisotropicFrictionFieldId),
             this));


    editSField(AnisotropicFrictionFieldMask);

    return returnValue;
}

GetFieldHandlePtr BulletRigidBodyBase::getHandleContactProcessingThreashold (void) const
{
    BridgeSFReal32::GetHandlePtr returnValue(
        new  BridgeSFReal32::GetHandle(
             &_sfContactProcessingThreashold,
             this->getType().getFieldDesc(ContactProcessingThreasholdFieldId),
             const_cast<BulletRigidBodyBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr BulletRigidBodyBase::editHandleContactProcessingThreashold(void)
{
    BridgeSFReal32::EditHandlePtr returnValue(
        new  BridgeSFReal32::EditHandle(
             &_sfContactProcessingThreashold,
             this->getType().getFieldDesc(ContactProcessingThreasholdFieldId),
             this));


    editSField(ContactProcessingThreasholdFieldMask);

    return returnValue;
}

GetFieldHandlePtr BulletRigidBodyBase::getHandleActivation      (void) const
{
    BridgeSFInt32::GetHandlePtr returnValue(
        new  BridgeSFInt32::GetHandle(
             &_sfActivation,
             this->getType().getFieldDesc(ActivationFieldId),
             const_cast<BulletRigidBodyBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr BulletRigidBodyBase::editHandleActivation     (void)
{
    BridgeSFInt32::EditHandlePtr returnValue(
        new  BridgeSFInt32::EditHandle(
             &_sfActivation,
             this->getType().getFieldDesc(ActivationFieldId),
             this));


    editSField(ActivationFieldMask);

    return returnValue;
}

GetFieldHandlePtr BulletRigidBodyBase::getHandleDeactivationTime (void) const
{
    BridgeSFReal32::GetHandlePtr returnValue(
        new  BridgeSFReal32::GetHandle(
             &_sfDeactivationTime,
             this->getType().getFieldDesc(DeactivationTimeFieldId),
             const_cast<BulletRigidBodyBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr BulletRigidBodyBase::editHandleDeactivationTime(void)
{
    BridgeSFReal32::EditHandlePtr returnValue(
        new  BridgeSFReal32::EditHandle(
             &_sfDeactivationTime,
             this->getType().getFieldDesc(DeactivationTimeFieldId),
             this));


    editSField(DeactivationTimeFieldMask);

    return returnValue;
}

GetFieldHandlePtr BulletRigidBodyBase::getHandleRestitution     (void) const
{
    BridgeSFReal32::GetHandlePtr returnValue(
        new  BridgeSFReal32::GetHandle(
             &_sfRestitution,
             this->getType().getFieldDesc(RestitutionFieldId),
             const_cast<BulletRigidBodyBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr BulletRigidBodyBase::editHandleRestitution    (void)
{
    BridgeSFReal32::EditHandlePtr returnValue(
        new  BridgeSFReal32::EditHandle(
             &_sfRestitution,
             this->getType().getFieldDesc(RestitutionFieldId),
             this));


    editSField(RestitutionFieldMask);

    return returnValue;
}

GetFieldHandlePtr BulletRigidBodyBase::getHandleFriction        (void) const
{
    BridgeSFReal32::GetHandlePtr returnValue(
        new  BridgeSFReal32::GetHandle(
             &_sfFriction,
             this->getType().getFieldDesc(FrictionFieldId),
             const_cast<BulletRigidBodyBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr BulletRigidBodyBase::editHandleFriction       (void)
{
    BridgeSFReal32::EditHandlePtr returnValue(
        new  BridgeSFReal32::EditHandle(
             &_sfFriction,
             this->getType().getFieldDesc(FrictionFieldId),
             this));


    editSField(FrictionFieldMask);

    return returnValue;
}

GetFieldHandlePtr BulletRigidBodyBase::getHandleWorldTransform  (void) const
{
    BridgeSFMatrix::GetHandlePtr returnValue(
        new  BridgeSFMatrix::GetHandle(
             &_sfWorldTransform,
             this->getType().getFieldDesc(WorldTransformFieldId),
             const_cast<BulletRigidBodyBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr BulletRigidBodyBase::editHandleWorldTransform (void)
{
    BridgeSFMatrix::EditHandlePtr returnValue(
        new  BridgeSFMatrix::EditHandle(
             &_sfWorldTransform,
             this->getType().getFieldDesc(WorldTransformFieldId),
             this));


    editSField(WorldTransformFieldMask);

    return returnValue;
}

GetFieldHandlePtr BulletRigidBodyBase::getHandleInterpolationWorldTransform (void) const
{
    BridgeSFMatrix::GetHandlePtr returnValue(
        new  BridgeSFMatrix::GetHandle(
             &_sfInterpolationWorldTransform,
             this->getType().getFieldDesc(InterpolationWorldTransformFieldId),
             const_cast<BulletRigidBodyBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr BulletRigidBodyBase::editHandleInterpolationWorldTransform(void)
{
    BridgeSFMatrix::EditHandlePtr returnValue(
        new  BridgeSFMatrix::EditHandle(
             &_sfInterpolationWorldTransform,
             this->getType().getFieldDesc(InterpolationWorldTransformFieldId),
             this));


    editSField(InterpolationWorldTransformFieldMask);

    return returnValue;
}

GetFieldHandlePtr BulletRigidBodyBase::getHandleInterpolationLinearVelocity (void) const
{
    BridgeSFVec3f::GetHandlePtr returnValue(
        new  BridgeSFVec3f::GetHandle(
             &_sfInterpolationLinearVelocity,
             this->getType().getFieldDesc(InterpolationLinearVelocityFieldId),
             const_cast<BulletRigidBodyBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr BulletRigidBodyBase::editHandleInterpolationLinearVelocity(void)
{
    BridgeSFVec3f::EditHandlePtr returnValue(
        new  BridgeSFVec3f::EditHandle(
             &_sfInterpolationLinearVelocity,
             this->getType().getFieldDesc(InterpolationLinearVelocityFieldId),
             this));


    editSField(InterpolationLinearVelocityFieldMask);

    return returnValue;
}

GetFieldHandlePtr BulletRigidBodyBase::getHandleInterpolationAngularVelocity (void) const
{
    BridgeSFVec3f::GetHandlePtr returnValue(
        new  BridgeSFVec3f::GetHandle(
             &_sfInterpolationAngularVelocity,
             this->getType().getFieldDesc(InterpolationAngularVelocityFieldId),
             const_cast<BulletRigidBodyBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr BulletRigidBodyBase::editHandleInterpolationAngularVelocity(void)
{
    BridgeSFVec3f::EditHandlePtr returnValue(
        new  BridgeSFVec3f::EditHandle(
             &_sfInterpolationAngularVelocity,
             this->getType().getFieldDesc(InterpolationAngularVelocityFieldId),
             this));


    editSField(InterpolationAngularVelocityFieldMask);

    return returnValue;
}

GetFieldHandlePtr BulletRigidBodyBase::getHandleIslandTag       (void) const
{
    BridgeSFInt32::GetHandlePtr returnValue(
        new  BridgeSFInt32::GetHandle(
             &_sfIslandTag,
             this->getType().getFieldDesc(IslandTagFieldId),
             const_cast<BulletRigidBodyBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr BulletRigidBodyBase::editHandleIslandTag      (void)
{
    BridgeSFInt32::EditHandlePtr returnValue(
        new  BridgeSFInt32::EditHandle(
             &_sfIslandTag,
             this->getType().getFieldDesc(IslandTagFieldId),
             this));


    editSField(IslandTagFieldMask);

    return returnValue;
}

GetFieldHandlePtr BulletRigidBodyBase::getHandleCompanionId     (void) const
{
    BridgeSFInt32::GetHandlePtr returnValue(
        new  BridgeSFInt32::GetHandle(
             &_sfCompanionId,
             this->getType().getFieldDesc(CompanionIdFieldId),
             const_cast<BulletRigidBodyBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr BulletRigidBodyBase::editHandleCompanionId    (void)
{
    BridgeSFInt32::EditHandlePtr returnValue(
        new  BridgeSFInt32::EditHandle(
             &_sfCompanionId,
             this->getType().getFieldDesc(CompanionIdFieldId),
             this));


    editSField(CompanionIdFieldMask);

    return returnValue;
}

GetFieldHandlePtr BulletRigidBodyBase::getHandleHitFraction     (void) const
{
    BridgeSFReal32::GetHandlePtr returnValue(
        new  BridgeSFReal32::GetHandle(
             &_sfHitFraction,
             this->getType().getFieldDesc(HitFractionFieldId),
             const_cast<BulletRigidBodyBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr BulletRigidBodyBase::editHandleHitFraction    (void)
{
    BridgeSFReal32::EditHandlePtr returnValue(
        new  BridgeSFReal32::EditHandle(
             &_sfHitFraction,
             this->getType().getFieldDesc(HitFractionFieldId),
             this));


    editSField(HitFractionFieldMask);

    return returnValue;
}

GetFieldHandlePtr BulletRigidBodyBase::getHandleCollisionFlags  (void) const
{
    BridgeSFInt32::GetHandlePtr returnValue(
        new  BridgeSFInt32::GetHandle(
             &_sfCollisionFlags,
             this->getType().getFieldDesc(CollisionFlagsFieldId),
             const_cast<BulletRigidBodyBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr BulletRigidBodyBase::editHandleCollisionFlags (void)
{
    BridgeSFInt32::EditHandlePtr returnValue(
        new  BridgeSFInt32::EditHandle(
             &_sfCollisionFlags,
             this->getType().getFieldDesc(CollisionFlagsFieldId),
             this));


    editSField(CollisionFlagsFieldMask);

    return returnValue;
}

GetFieldHandlePtr BulletRigidBodyBase::getHandleCcdSweptSphereRadius (void) const
{
    BridgeSFReal32::GetHandlePtr returnValue(
        new  BridgeSFReal32::GetHandle(
             &_sfCcdSweptSphereRadius,
             this->getType().getFieldDesc(CcdSweptSphereRadiusFieldId),
             const_cast<BulletRigidBodyBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr BulletRigidBodyBase::editHandleCcdSweptSphereRadius(void)
{
    BridgeSFReal32::EditHandlePtr returnValue(
        new  BridgeSFReal32::EditHandle(
             &_sfCcdSweptSphereRadius,
             this->getType().getFieldDesc(CcdSweptSphereRadiusFieldId),
             this));


    editSField(CcdSweptSphereRadiusFieldMask);

    return returnValue;
}

GetFieldHandlePtr BulletRigidBodyBase::getHandleCcdMotionThreashold (void) const
{
    BridgeSFReal32::GetHandlePtr returnValue(
        new  BridgeSFReal32::GetHandle(
             &_sfCcdMotionThreashold,
             this->getType().getFieldDesc(CcdMotionThreasholdFieldId),
             const_cast<BulletRigidBodyBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr BulletRigidBodyBase::editHandleCcdMotionThreashold(void)
{
    BridgeSFReal32::EditHandlePtr returnValue(
        new  BridgeSFReal32::EditHandle(
             &_sfCcdMotionThreashold,
             this->getType().getFieldDesc(CcdMotionThreasholdFieldId),
             this));


    editSField(CcdMotionThreasholdFieldMask);

    return returnValue;
}

GetFieldHandlePtr BulletRigidBodyBase::getHandleGravity         (void) const
{
    BridgeSFVec3f::GetHandlePtr returnValue(
        new  BridgeSFVec3f::GetHandle(
             &_sfGravity,
             this->getType().getFieldDesc(GravityFieldId),
             const_cast<BulletRigidBodyBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr BulletRigidBodyBase::editHandleGravity        (void)
{
    BridgeSFVec3f::EditHandlePtr returnValue(
        new  BridgeSFVec3f::EditHandle(
             &_sfGravity,
             this->getType().getFieldDesc(GravityFieldId),
             this));


    editSField(GravityFieldMask);

    return returnValue;
}

GetFieldHandlePtr BulletRigidBodyBase::getHandleDamping         (void) const
{
    BridgeSFVec2f::GetHandlePtr returnValue(
        new  BridgeSFVec2f::GetHandle(
             &_sfDamping,
             this->getType().getFieldDesc(DampingFieldId),
             const_cast<BulletRigidBodyBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr BulletRigidBodyBase::editHandleDamping        (void)
{
    BridgeSFVec2f::EditHandlePtr returnValue(
        new  BridgeSFVec2f::EditHandle(
             &_sfDamping,
             this->getType().getFieldDesc(DampingFieldId),
             this));


    editSField(DampingFieldMask);

    return returnValue;
}

GetFieldHandlePtr BulletRigidBodyBase::getHandleMass            (void) const
{
    BridgeSFReal32::GetHandlePtr returnValue(
        new  BridgeSFReal32::GetHandle(
             &_sfMass,
             this->getType().getFieldDesc(MassFieldId),
             const_cast<BulletRigidBodyBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr BulletRigidBodyBase::editHandleMass           (void)
{
    BridgeSFReal32::EditHandlePtr returnValue(
        new  BridgeSFReal32::EditHandle(
             &_sfMass,
             this->getType().getFieldDesc(MassFieldId),
             this));


    editSField(MassFieldMask);

    return returnValue;
}

GetFieldHandlePtr BulletRigidBodyBase::getHandleInertia         (void) const
{
    BridgeSFVec3f::GetHandlePtr returnValue(
        new  BridgeSFVec3f::GetHandle(
             &_sfInertia,
             this->getType().getFieldDesc(InertiaFieldId),
             const_cast<BulletRigidBodyBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr BulletRigidBodyBase::editHandleInertia        (void)
{
    BridgeSFVec3f::EditHandlePtr returnValue(
        new  BridgeSFVec3f::EditHandle(
             &_sfInertia,
             this->getType().getFieldDesc(InertiaFieldId),
             this));


    editSField(InertiaFieldMask);

    return returnValue;
}

GetFieldHandlePtr BulletRigidBodyBase::getHandleLinearFactor    (void) const
{
    BridgeSFVec3f::GetHandlePtr returnValue(
        new  BridgeSFVec3f::GetHandle(
             &_sfLinearFactor,
             this->getType().getFieldDesc(LinearFactorFieldId),
             const_cast<BulletRigidBodyBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr BulletRigidBodyBase::editHandleLinearFactor   (void)
{
    BridgeSFVec3f::EditHandlePtr returnValue(
        new  BridgeSFVec3f::EditHandle(
             &_sfLinearFactor,
             this->getType().getFieldDesc(LinearFactorFieldId),
             this));


    editSField(LinearFactorFieldMask);

    return returnValue;
}

GetFieldHandlePtr BulletRigidBodyBase::getHandleCenterOfMassTransform (void) const
{
    BridgeSFMatrix::GetHandlePtr returnValue(
        new  BridgeSFMatrix::GetHandle(
             &_sfCenterOfMassTransform,
             this->getType().getFieldDesc(CenterOfMassTransformFieldId),
             const_cast<BulletRigidBodyBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr BulletRigidBodyBase::editHandleCenterOfMassTransform(void)
{
    BridgeSFMatrix::EditHandlePtr returnValue(
        new  BridgeSFMatrix::EditHandle(
             &_sfCenterOfMassTransform,
             this->getType().getFieldDesc(CenterOfMassTransformFieldId),
             this));


    editSField(CenterOfMassTransformFieldMask);

    return returnValue;
}

GetFieldHandlePtr BulletRigidBodyBase::getHandleLinearVelocity  (void) const
{
    BridgeSFVec3f::GetHandlePtr returnValue(
        new  BridgeSFVec3f::GetHandle(
             &_sfLinearVelocity,
             this->getType().getFieldDesc(LinearVelocityFieldId),
             const_cast<BulletRigidBodyBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr BulletRigidBodyBase::editHandleLinearVelocity (void)
{
    BridgeSFVec3f::EditHandlePtr returnValue(
        new  BridgeSFVec3f::EditHandle(
             &_sfLinearVelocity,
             this->getType().getFieldDesc(LinearVelocityFieldId),
             this));


    editSField(LinearVelocityFieldMask);

    return returnValue;
}

GetFieldHandlePtr BulletRigidBodyBase::getHandleAngularVelocity (void) const
{
    BridgeSFVec3f::GetHandlePtr returnValue(
        new  BridgeSFVec3f::GetHandle(
             &_sfAngularVelocity,
             this->getType().getFieldDesc(AngularVelocityFieldId),
             const_cast<BulletRigidBodyBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr BulletRigidBodyBase::editHandleAngularVelocity(void)
{
    BridgeSFVec3f::EditHandlePtr returnValue(
        new  BridgeSFVec3f::EditHandle(
             &_sfAngularVelocity,
             this->getType().getFieldDesc(AngularVelocityFieldId),
             this));


    editSField(AngularVelocityFieldMask);

    return returnValue;
}

GetFieldHandlePtr BulletRigidBodyBase::getHandleAngularFactor   (void) const
{
    BridgeSFVec3f::GetHandlePtr returnValue(
        new  BridgeSFVec3f::GetHandle(
             &_sfAngularFactor,
             this->getType().getFieldDesc(AngularFactorFieldId),
             const_cast<BulletRigidBodyBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr BulletRigidBodyBase::editHandleAngularFactor  (void)
{
    BridgeSFVec3f::EditHandlePtr returnValue(
        new  BridgeSFVec3f::EditHandle(
             &_sfAngularFactor,
             this->getType().getFieldDesc(AngularFactorFieldId),
             this));


    editSField(AngularFactorFieldMask);

    return returnValue;
}

GetFieldHandlePtr BulletRigidBodyBase::getHandleFlags           (void) const
{
    BridgeSFInt32::GetHandlePtr returnValue(
        new  BridgeSFInt32::GetHandle(
             &_sfFlags,
             this->getType().getFieldDesc(FlagsFieldId),
             const_cast<BulletRigidBodyBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr BulletRigidBodyBase::editHandleFlags          (void)
{
    BridgeSFInt32::EditHandlePtr returnValue(
        new  BridgeSFInt32::EditHandle(
             &_sfFlags,
             this->getType().getFieldDesc(FlagsFieldId),
             this));


    editSField(FlagsFieldMask);

    return returnValue;
}

GetFieldHandlePtr BulletRigidBodyBase::getHandleSleepingThresholds (void) const
{
    BridgeSFVec2f::GetHandlePtr returnValue(
        new  BridgeSFVec2f::GetHandle(
             &_sfSleepingThresholds,
             this->getType().getFieldDesc(SleepingThresholdsFieldId),
             const_cast<BulletRigidBodyBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr BulletRigidBodyBase::editHandleSleepingThresholds(void)
{
    BridgeSFVec2f::EditHandlePtr returnValue(
        new  BridgeSFVec2f::EditHandle(
             &_sfSleepingThresholds,
             this->getType().getFieldDesc(SleepingThresholdsFieldId),
             this));


    editSField(SleepingThresholdsFieldMask);

    return returnValue;
}



#ifdef OSG_MT_CPTR_ASPECT
void BulletRigidBodyBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    BulletRigidBody *pThis = static_cast<BulletRigidBody *>(this);

    pThis->execSync(static_cast<BulletRigidBody *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif


#ifdef OSG_MT_CPTR_ASPECT
FieldContainer *BulletRigidBodyBase::createAspectCopy(
    const FieldContainer *pRefAspect) const
{
    BulletRigidBody *returnValue;

    newAspectCopy(returnValue,
                  dynamic_cast<const BulletRigidBody *>(pRefAspect),
                  dynamic_cast<const BulletRigidBody *>(this));

    return returnValue;
}
#endif

void BulletRigidBodyBase::resolveLinks(void)
{
    Inherited::resolveLinks();

    static_cast<BulletRigidBody *>(this)->setCollisionShape(NULL);


}


OSG_END_NAMESPACE
