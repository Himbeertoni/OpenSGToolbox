/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 * contact: David Kabala (djkabala@gmail.com)                                *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class BulletRigidBody
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#ifndef _OSGBULLETRIGIDBODYBASE_H_
#define _OSGBULLETRIGIDBODYBASE_H_
#ifdef __sgi
#pragma once
#endif


#include "OSGConfig.h"
#include "OSGContribBulletDef.h"

//#include "OSGBaseTypes.h"

#include "OSGGroup.h" // Parent

#include "OSGFieldContainerFields.h"    // ParentWorld type
#include "OSGMathFields.h"              // ToWorld type
#include "OSGSysFields.h"               // GroupMask type
#include "OSGBulletCollisionShapeFields.h" // CollisionShape type
#include "OSGVecBridgeFields.h"         // AnisotropicFriction type
#include "OSGSysBridgeFields.h"         // ContactProcessingThreashold type
#include "OSGMathBridgeFields.h"        // WorldTransform type

#include "OSGBulletRigidBodyFields.h"

OSG_BEGIN_NAMESPACE

class BulletRigidBody;

//! \brief BulletRigidBody Base Class.

class OSG_CONTRIBBULLET_DLLMAPPING BulletRigidBodyBase : public Group
{
  public:

    typedef Group Inherited;
    typedef Group ParentContainer;

    typedef Inherited::TypeObject TypeObject;
    typedef TypeObject::InitPhase InitPhase;

    OSG_GEN_INTERNALPTR(BulletRigidBody);
    
    

    /*==========================  PUBLIC  =================================*/

  public:

    enum
    {
        ParentWorldFieldId = Inherited::NextFieldId,
        ToWorldFieldId = ParentWorldFieldId + 1,
        GroupMaskFieldId = ToWorldFieldId + 1,
        CollisionMaskFieldId = GroupMaskFieldId + 1,
        CollisionShapeFieldId = CollisionMaskFieldId + 1,
        AnisotropicFrictionFieldId = CollisionShapeFieldId + 1,
        ContactProcessingThreasholdFieldId = AnisotropicFrictionFieldId + 1,
        ActivationFieldId = ContactProcessingThreasholdFieldId + 1,
        DeactivationTimeFieldId = ActivationFieldId + 1,
        RestitutionFieldId = DeactivationTimeFieldId + 1,
        FrictionFieldId = RestitutionFieldId + 1,
        WorldTransformFieldId = FrictionFieldId + 1,
        InterpolationWorldTransformFieldId = WorldTransformFieldId + 1,
        InterpolationLinearVelocityFieldId = InterpolationWorldTransformFieldId + 1,
        InterpolationAngularVelocityFieldId = InterpolationLinearVelocityFieldId + 1,
        IslandTagFieldId = InterpolationAngularVelocityFieldId + 1,
        CompanionIdFieldId = IslandTagFieldId + 1,
        HitFractionFieldId = CompanionIdFieldId + 1,
        CollisionFlagsFieldId = HitFractionFieldId + 1,
        CcdSweptSphereRadiusFieldId = CollisionFlagsFieldId + 1,
        CcdMotionThreasholdFieldId = CcdSweptSphereRadiusFieldId + 1,
        GravityFieldId = CcdMotionThreasholdFieldId + 1,
        DampingFieldId = GravityFieldId + 1,
        MassFieldId = DampingFieldId + 1,
        InertiaFieldId = MassFieldId + 1,
        LinearFactorFieldId = InertiaFieldId + 1,
        CenterOfMassTransformFieldId = LinearFactorFieldId + 1,
        LinearVelocityFieldId = CenterOfMassTransformFieldId + 1,
        AngularVelocityFieldId = LinearVelocityFieldId + 1,
        AngularFactorFieldId = AngularVelocityFieldId + 1,
        FlagsFieldId = AngularFactorFieldId + 1,
        SleepingThresholdsFieldId = FlagsFieldId + 1,
        NextFieldId = SleepingThresholdsFieldId + 1
    };

    static const OSG::BitVector ParentWorldFieldMask =
        (TypeTraits<BitVector>::One << ParentWorldFieldId);
    static const OSG::BitVector ToWorldFieldMask =
        (TypeTraits<BitVector>::One << ToWorldFieldId);
    static const OSG::BitVector GroupMaskFieldMask =
        (TypeTraits<BitVector>::One << GroupMaskFieldId);
    static const OSG::BitVector CollisionMaskFieldMask =
        (TypeTraits<BitVector>::One << CollisionMaskFieldId);
    static const OSG::BitVector CollisionShapeFieldMask =
        (TypeTraits<BitVector>::One << CollisionShapeFieldId);
    static const OSG::BitVector AnisotropicFrictionFieldMask =
        (TypeTraits<BitVector>::One << AnisotropicFrictionFieldId);
    static const OSG::BitVector ContactProcessingThreasholdFieldMask =
        (TypeTraits<BitVector>::One << ContactProcessingThreasholdFieldId);
    static const OSG::BitVector ActivationFieldMask =
        (TypeTraits<BitVector>::One << ActivationFieldId);
    static const OSG::BitVector DeactivationTimeFieldMask =
        (TypeTraits<BitVector>::One << DeactivationTimeFieldId);
    static const OSG::BitVector RestitutionFieldMask =
        (TypeTraits<BitVector>::One << RestitutionFieldId);
    static const OSG::BitVector FrictionFieldMask =
        (TypeTraits<BitVector>::One << FrictionFieldId);
    static const OSG::BitVector WorldTransformFieldMask =
        (TypeTraits<BitVector>::One << WorldTransformFieldId);
    static const OSG::BitVector InterpolationWorldTransformFieldMask =
        (TypeTraits<BitVector>::One << InterpolationWorldTransformFieldId);
    static const OSG::BitVector InterpolationLinearVelocityFieldMask =
        (TypeTraits<BitVector>::One << InterpolationLinearVelocityFieldId);
    static const OSG::BitVector InterpolationAngularVelocityFieldMask =
        (TypeTraits<BitVector>::One << InterpolationAngularVelocityFieldId);
    static const OSG::BitVector IslandTagFieldMask =
        (TypeTraits<BitVector>::One << IslandTagFieldId);
    static const OSG::BitVector CompanionIdFieldMask =
        (TypeTraits<BitVector>::One << CompanionIdFieldId);
    static const OSG::BitVector HitFractionFieldMask =
        (TypeTraits<BitVector>::One << HitFractionFieldId);
    static const OSG::BitVector CollisionFlagsFieldMask =
        (TypeTraits<BitVector>::One << CollisionFlagsFieldId);
    static const OSG::BitVector CcdSweptSphereRadiusFieldMask =
        (TypeTraits<BitVector>::One << CcdSweptSphereRadiusFieldId);
    static const OSG::BitVector CcdMotionThreasholdFieldMask =
        (TypeTraits<BitVector>::One << CcdMotionThreasholdFieldId);
    static const OSG::BitVector GravityFieldMask =
        (TypeTraits<BitVector>::One << GravityFieldId);
    static const OSG::BitVector DampingFieldMask =
        (TypeTraits<BitVector>::One << DampingFieldId);
    static const OSG::BitVector MassFieldMask =
        (TypeTraits<BitVector>::One << MassFieldId);
    static const OSG::BitVector InertiaFieldMask =
        (TypeTraits<BitVector>::One << InertiaFieldId);
    static const OSG::BitVector LinearFactorFieldMask =
        (TypeTraits<BitVector>::One << LinearFactorFieldId);
    static const OSG::BitVector CenterOfMassTransformFieldMask =
        (TypeTraits<BitVector>::One << CenterOfMassTransformFieldId);
    static const OSG::BitVector LinearVelocityFieldMask =
        (TypeTraits<BitVector>::One << LinearVelocityFieldId);
    static const OSG::BitVector AngularVelocityFieldMask =
        (TypeTraits<BitVector>::One << AngularVelocityFieldId);
    static const OSG::BitVector AngularFactorFieldMask =
        (TypeTraits<BitVector>::One << AngularFactorFieldId);
    static const OSG::BitVector FlagsFieldMask =
        (TypeTraits<BitVector>::One << FlagsFieldId);
    static const OSG::BitVector SleepingThresholdsFieldMask =
        (TypeTraits<BitVector>::One << SleepingThresholdsFieldId);
    static const OSG::BitVector NextFieldMask =
        (TypeTraits<BitVector>::One << NextFieldId);
        
    typedef SFParentFieldContainerPtr SFParentWorldType;
    typedef SFMatrix          SFToWorldType;
    typedef SFInt16           SFGroupMaskType;
    typedef SFInt16           SFCollisionMaskType;
    typedef SFUnrecChildBulletCollisionShapePtr SFCollisionShapeType;
    typedef BridgeSFVec3f           SFAnisotropicFrictionType;
    typedef BridgeSFReal32          SFContactProcessingThreasholdType;
    typedef BridgeSFInt32           SFActivationType;
    typedef BridgeSFReal32          SFDeactivationTimeType;
    typedef BridgeSFReal32          SFRestitutionType;
    typedef BridgeSFReal32          SFFrictionType;
    typedef BridgeSFMatrix          SFWorldTransformType;
    typedef BridgeSFMatrix          SFInterpolationWorldTransformType;
    typedef BridgeSFVec3f           SFInterpolationLinearVelocityType;
    typedef BridgeSFVec3f           SFInterpolationAngularVelocityType;
    typedef BridgeSFInt32           SFIslandTagType;
    typedef BridgeSFInt32           SFCompanionIdType;
    typedef BridgeSFReal32          SFHitFractionType;
    typedef BridgeSFInt32           SFCollisionFlagsType;
    typedef BridgeSFReal32          SFCcdSweptSphereRadiusType;
    typedef BridgeSFReal32          SFCcdMotionThreasholdType;
    typedef BridgeSFVec3f           SFGravityType;
    typedef BridgeSFVec2f           SFDampingType;
    typedef BridgeSFReal32          SFMassType;
    typedef BridgeSFVec3f           SFInertiaType;
    typedef BridgeSFVec3f           SFLinearFactorType;
    typedef BridgeSFMatrix          SFCenterOfMassTransformType;
    typedef BridgeSFVec3f           SFLinearVelocityType;
    typedef BridgeSFVec3f           SFAngularVelocityType;
    typedef BridgeSFVec3f           SFAngularFactorType;
    typedef BridgeSFInt32           SFFlagsType;
    typedef BridgeSFVec2f           SFSleepingThresholdsType;

    /*---------------------------------------------------------------------*/
    /*! \name                    Class Get                                 */
    /*! \{                                                                 */

    static FieldContainerType &getClassType   (void);
    static UInt32              getClassTypeId (void);
    static UInt16              getClassGroupId(void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                FieldContainer Get                            */
    /*! \{                                                                 */

    virtual       FieldContainerType &getType         (void);
    virtual const FieldContainerType &getType         (void) const;

    virtual       UInt32              getContainerSize(void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Get                                 */
    /*! \{                                                                 */


                  SFInt16             *editSFGroupMask      (void);
            const SFInt16             *getSFGroupMask       (void) const;

                  SFInt16             *editSFCollisionMask  (void);
            const SFInt16             *getSFCollisionMask   (void) const;
            const SFUnrecChildBulletCollisionShapePtr *getSFCollisionShape (void) const;
                  SFUnrecChildBulletCollisionShapePtr *editSFCollisionShape (void);

                  BridgeSFVec3f             *editSFAnisotropicFriction(void);
            const BridgeSFVec3f             *getSFAnisotropicFriction (void) const;

                  BridgeSFReal32            *editSFContactProcessingThreashold(void);
            const BridgeSFReal32            *getSFContactProcessingThreashold (void) const;

                  BridgeSFInt32             *editSFActivation     (void);
            const BridgeSFInt32             *getSFActivation      (void) const;

                  BridgeSFReal32            *editSFDeactivationTime(void);
            const BridgeSFReal32            *getSFDeactivationTime (void) const;

                  BridgeSFReal32            *editSFRestitution    (void);
            const BridgeSFReal32            *getSFRestitution     (void) const;

                  BridgeSFReal32            *editSFFriction       (void);
            const BridgeSFReal32            *getSFFriction        (void) const;

                  BridgeSFMatrix            *editSFWorldTransform (void);
            const BridgeSFMatrix            *getSFWorldTransform  (void) const;

                  BridgeSFMatrix            *editSFInterpolationWorldTransform(void);
            const BridgeSFMatrix            *getSFInterpolationWorldTransform (void) const;

                  BridgeSFVec3f             *editSFInterpolationLinearVelocity(void);
            const BridgeSFVec3f             *getSFInterpolationLinearVelocity (void) const;

                  BridgeSFVec3f             *editSFInterpolationAngularVelocity(void);
            const BridgeSFVec3f             *getSFInterpolationAngularVelocity (void) const;

                  BridgeSFInt32             *editSFIslandTag      (void);
            const BridgeSFInt32             *getSFIslandTag       (void) const;

                  BridgeSFInt32             *editSFCompanionId    (void);
            const BridgeSFInt32             *getSFCompanionId     (void) const;

                  BridgeSFReal32            *editSFHitFraction    (void);
            const BridgeSFReal32            *getSFHitFraction     (void) const;

                  BridgeSFInt32             *editSFCollisionFlags (void);
            const BridgeSFInt32             *getSFCollisionFlags  (void) const;

                  BridgeSFReal32            *editSFCcdSweptSphereRadius(void);
            const BridgeSFReal32            *getSFCcdSweptSphereRadius (void) const;

                  BridgeSFReal32            *editSFCcdMotionThreashold(void);
            const BridgeSFReal32            *getSFCcdMotionThreashold (void) const;

                  BridgeSFVec3f             *editSFGravity        (void);
            const BridgeSFVec3f             *getSFGravity         (void) const;

                  BridgeSFVec2f             *editSFDamping        (void);
            const BridgeSFVec2f             *getSFDamping         (void) const;

                  BridgeSFReal32            *editSFMass           (void);
            const BridgeSFReal32            *getSFMass            (void) const;

                  BridgeSFVec3f             *editSFInertia        (void);
            const BridgeSFVec3f             *getSFInertia         (void) const;

                  BridgeSFVec3f             *editSFLinearFactor   (void);
            const BridgeSFVec3f             *getSFLinearFactor    (void) const;

                  BridgeSFMatrix            *editSFCenterOfMassTransform(void);
            const BridgeSFMatrix            *getSFCenterOfMassTransform (void) const;

                  BridgeSFVec3f             *editSFLinearVelocity (void);
            const BridgeSFVec3f             *getSFLinearVelocity  (void) const;

                  BridgeSFVec3f             *editSFAngularVelocity(void);
            const BridgeSFVec3f             *getSFAngularVelocity (void) const;

                  BridgeSFVec3f             *editSFAngularFactor  (void);
            const BridgeSFVec3f             *getSFAngularFactor   (void) const;

                  BridgeSFInt32             *editSFFlags          (void);
            const BridgeSFInt32             *getSFFlags           (void) const;

                  BridgeSFVec2f             *editSFSleepingThresholds(void);
            const BridgeSFVec2f             *getSFSleepingThresholds (void) const;


                  Int16               &editGroupMask      (void);
                  Int16                getGroupMask       (void) const;

                  Int16               &editCollisionMask  (void);
                  Int16                getCollisionMask   (void) const;

                  BulletCollisionShape * getCollisionShape (void) const;

                  Vec3f                getAnisotropicFriction (void) const;

                  Real32               getContactProcessingThreashold (void) const;

                  Int32                getActivation      (void) const;

                  Real32               getDeactivationTime (void) const;

                  Real32               getRestitution     (void) const;

                  Real32               getFriction        (void) const;

                  Matrix               getWorldTransform  (void) const;

                  Matrix               getInterpolationWorldTransform (void) const;

                  Vec3f                getInterpolationLinearVelocity (void) const;

                  Vec3f                getInterpolationAngularVelocity (void) const;

                  Int32                getIslandTag       (void) const;

                  Int32                getCompanionId     (void) const;

                  Real32               getHitFraction     (void) const;

                  Int32                getCollisionFlags  (void) const;

                  Real32               getCcdSweptSphereRadius (void) const;

                  Real32               getCcdMotionThreashold (void) const;

                  Vec3f                getGravity         (void) const;

                  Vec2f                getDamping         (void) const;

                  Real32               getMass            (void) const;

                  Vec3f                getInertia         (void) const;

                  Vec3f                getLinearFactor    (void) const;

                  Matrix               getCenterOfMassTransform (void) const;

                  Vec3f                getLinearVelocity  (void) const;

                  Vec3f                getAngularVelocity (void) const;

                  Vec3f                getAngularFactor   (void) const;

                  Int32                getFlags           (void) const;

                  Vec2f                getSleepingThresholds (void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Set                                 */
    /*! \{                                                                 */

            void setGroupMask      (const Int16 value);
            void setCollisionMask  (const Int16 value);
            void setCollisionShape (BulletCollisionShape * const value);
            void setAnisotropicFriction(const Vec3f &value);
            void setContactProcessingThreashold(const Real32 value);
            void setActivation     (const Int32 value);
            void setDeactivationTime(const Real32 value);
            void setRestitution    (const Real32 value);
            void setFriction       (const Real32 value);
            void setWorldTransform (const Matrix &value);
            void setInterpolationWorldTransform(const Matrix &value);
            void setInterpolationLinearVelocity(const Vec3f &value);
            void setInterpolationAngularVelocity(const Vec3f &value);
            void setIslandTag      (const Int32 value);
            void setCompanionId    (const Int32 value);
            void setHitFraction    (const Real32 value);
            void setCollisionFlags (const Int32 value);
            void setCcdSweptSphereRadius(const Real32 value);
            void setCcdMotionThreashold(const Real32 value);
            void setGravity        (const Vec3f &value);
            void setDamping        (const Vec2f &value);
            void setMass           (const Real32 value);
            void setInertia        (const Vec3f &value);
            void setLinearFactor   (const Vec3f &value);
            void setCenterOfMassTransform(const Matrix &value);
            void setLinearVelocity (const Vec3f &value);
            void setAngularVelocity(const Vec3f &value);
            void setAngularFactor  (const Vec3f &value);
            void setFlags          (const Int32 value);
            void setSleepingThresholds(const Vec2f &value);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                Ptr Field Set                                 */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                Ptr MField Set                                */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Binary Access                              */
    /*! \{                                                                 */

    virtual UInt32 getBinSize (ConstFieldMaskArg  whichField);
    virtual void   copyToBin  (BinaryDataHandler &pMem,
                               ConstFieldMaskArg  whichField);
    virtual void   copyFromBin(BinaryDataHandler &pMem,
                               ConstFieldMaskArg  whichField);


    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Construction                               */
    /*! \{                                                                 */

    static  BulletRigidBodyTransitPtr  create          (void);
    static  BulletRigidBody           *createEmpty     (void);

    static  BulletRigidBodyTransitPtr  createLocal     (
                                               BitVector bFlags = FCLocal::All);

    static  BulletRigidBody            *createEmptyLocal(
                                              BitVector bFlags = FCLocal::All);

    static  BulletRigidBodyTransitPtr  createDependent  (BitVector bFlags);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Copy                                   */
    /*! \{                                                                 */

    virtual FieldContainerTransitPtr shallowCopy     (void) const;
    virtual FieldContainerTransitPtr shallowCopyLocal(
                                       BitVector bFlags = FCLocal::All) const;
    virtual FieldContainerTransitPtr shallowCopyDependent(
                                                      BitVector bFlags) const;

    /*! \}                                                                 */
    /*=========================  PROTECTED  ===============================*/

  protected:

    static TypeObject _type;

    static       void   classDescInserter(TypeObject &oType);
    static const Char8 *getClassname     (void             );

    /*---------------------------------------------------------------------*/
    /*! \name                      Fields                                  */
    /*! \{                                                                 */

    SFParentFieldContainerPtr _sfParentWorld;
    SFMatrix          _sfToWorld;
    SFInt16           _sfGroupMask;
    SFInt16           _sfCollisionMask;
    SFUnrecChildBulletCollisionShapePtr _sfCollisionShape;
    BridgeSFVec3f           _sfAnisotropicFriction;
    BridgeSFReal32          _sfContactProcessingThreashold;
    BridgeSFInt32           _sfActivation;
    BridgeSFReal32          _sfDeactivationTime;
    BridgeSFReal32          _sfRestitution;
    BridgeSFReal32          _sfFriction;
    BridgeSFMatrix          _sfWorldTransform;
    BridgeSFMatrix          _sfInterpolationWorldTransform;
    BridgeSFVec3f           _sfInterpolationLinearVelocity;
    BridgeSFVec3f           _sfInterpolationAngularVelocity;
    BridgeSFInt32           _sfIslandTag;
    BridgeSFInt32           _sfCompanionId;
    BridgeSFReal32          _sfHitFraction;
    BridgeSFInt32           _sfCollisionFlags;
    BridgeSFReal32          _sfCcdSweptSphereRadius;
    BridgeSFReal32          _sfCcdMotionThreashold;
    BridgeSFVec3f           _sfGravity;
    BridgeSFVec2f           _sfDamping;
    BridgeSFReal32          _sfMass;
    BridgeSFVec3f           _sfInertia;
    BridgeSFVec3f           _sfLinearFactor;
    BridgeSFMatrix          _sfCenterOfMassTransform;
    BridgeSFVec3f           _sfLinearVelocity;
    BridgeSFVec3f           _sfAngularVelocity;
    BridgeSFVec3f           _sfAngularFactor;
    BridgeSFInt32           _sfFlags;
    BridgeSFVec2f           _sfSleepingThresholds;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Constructors                               */
    /*! \{                                                                 */

    BulletRigidBodyBase(void);
    BulletRigidBodyBase(const BulletRigidBodyBase &source);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Destructors                                */
    /*! \{                                                                 */

    virtual ~BulletRigidBodyBase(void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                     onCreate                                */
    /*! \{                                                                 */

    void onCreate(const BulletRigidBody *source = NULL);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name Parent linking                                               */
    /*! \{                                                                 */

    virtual bool linkParent  (FieldContainer * const pParent,
                              UInt16           const childFieldId,
                              UInt16           const parentFieldId);
    virtual bool unlinkParent(FieldContainer * const pParent,
                              UInt16           const parentFieldId);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name Child linking                                                */
    /*! \{                                                                 */

    virtual bool unlinkChild(FieldContainer * const pChild,
                             UInt16           const childFieldId);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Generic Field Access                      */
    /*! \{                                                                 */

    GetFieldHandlePtr  getHandleParentWorld     (void) const;
    EditFieldHandlePtr editHandleParentWorld    (void);
    GetFieldHandlePtr  getHandleToWorld         (void) const;
    EditFieldHandlePtr editHandleToWorld        (void);
    GetFieldHandlePtr  getHandleGroupMask       (void) const;
    EditFieldHandlePtr editHandleGroupMask      (void);
    GetFieldHandlePtr  getHandleCollisionMask   (void) const;
    EditFieldHandlePtr editHandleCollisionMask  (void);
    GetFieldHandlePtr  getHandleCollisionShape  (void) const;
    EditFieldHandlePtr editHandleCollisionShape (void);
    GetFieldHandlePtr  getHandleAnisotropicFriction (void) const;
    EditFieldHandlePtr editHandleAnisotropicFriction(void);
    GetFieldHandlePtr  getHandleContactProcessingThreashold (void) const;
    EditFieldHandlePtr editHandleContactProcessingThreashold(void);
    GetFieldHandlePtr  getHandleActivation      (void) const;
    EditFieldHandlePtr editHandleActivation     (void);
    GetFieldHandlePtr  getHandleDeactivationTime (void) const;
    EditFieldHandlePtr editHandleDeactivationTime(void);
    GetFieldHandlePtr  getHandleRestitution     (void) const;
    EditFieldHandlePtr editHandleRestitution    (void);
    GetFieldHandlePtr  getHandleFriction        (void) const;
    EditFieldHandlePtr editHandleFriction       (void);
    GetFieldHandlePtr  getHandleWorldTransform  (void) const;
    EditFieldHandlePtr editHandleWorldTransform (void);
    GetFieldHandlePtr  getHandleInterpolationWorldTransform (void) const;
    EditFieldHandlePtr editHandleInterpolationWorldTransform(void);
    GetFieldHandlePtr  getHandleInterpolationLinearVelocity (void) const;
    EditFieldHandlePtr editHandleInterpolationLinearVelocity(void);
    GetFieldHandlePtr  getHandleInterpolationAngularVelocity (void) const;
    EditFieldHandlePtr editHandleInterpolationAngularVelocity(void);
    GetFieldHandlePtr  getHandleIslandTag       (void) const;
    EditFieldHandlePtr editHandleIslandTag      (void);
    GetFieldHandlePtr  getHandleCompanionId     (void) const;
    EditFieldHandlePtr editHandleCompanionId    (void);
    GetFieldHandlePtr  getHandleHitFraction     (void) const;
    EditFieldHandlePtr editHandleHitFraction    (void);
    GetFieldHandlePtr  getHandleCollisionFlags  (void) const;
    EditFieldHandlePtr editHandleCollisionFlags (void);
    GetFieldHandlePtr  getHandleCcdSweptSphereRadius (void) const;
    EditFieldHandlePtr editHandleCcdSweptSphereRadius(void);
    GetFieldHandlePtr  getHandleCcdMotionThreashold (void) const;
    EditFieldHandlePtr editHandleCcdMotionThreashold(void);
    GetFieldHandlePtr  getHandleGravity         (void) const;
    EditFieldHandlePtr editHandleGravity        (void);
    GetFieldHandlePtr  getHandleDamping         (void) const;
    EditFieldHandlePtr editHandleDamping        (void);
    GetFieldHandlePtr  getHandleMass            (void) const;
    EditFieldHandlePtr editHandleMass           (void);
    GetFieldHandlePtr  getHandleInertia         (void) const;
    EditFieldHandlePtr editHandleInertia        (void);
    GetFieldHandlePtr  getHandleLinearFactor    (void) const;
    EditFieldHandlePtr editHandleLinearFactor   (void);
    GetFieldHandlePtr  getHandleCenterOfMassTransform (void) const;
    EditFieldHandlePtr editHandleCenterOfMassTransform(void);
    GetFieldHandlePtr  getHandleLinearVelocity  (void) const;
    EditFieldHandlePtr editHandleLinearVelocity (void);
    GetFieldHandlePtr  getHandleAngularVelocity (void) const;
    EditFieldHandlePtr editHandleAngularVelocity(void);
    GetFieldHandlePtr  getHandleAngularFactor   (void) const;
    EditFieldHandlePtr editHandleAngularFactor  (void);
    GetFieldHandlePtr  getHandleFlags           (void) const;
    EditFieldHandlePtr editHandleFlags          (void);
    GetFieldHandlePtr  getHandleSleepingThresholds (void) const;
    EditFieldHandlePtr editHandleSleepingThresholds(void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Get                                 */
    /*! \{                                                                 */


                  SFMatrix            *editSFToWorld        (void);
            const SFMatrix            *getSFToWorld         (void) const;


                  Matrix              &editToWorld        (void);
            const Matrix              &getToWorld         (void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Set                                 */
    /*! \{                                                                 */

            void setToWorld        (const Matrix &value);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                Ptr MField Set                                */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

#ifdef OSG_MT_CPTR_ASPECT
    virtual void execSyncV(      FieldContainer    &oFrom,
                                 ConstFieldMaskArg  whichField,
                                 AspectOffsetStore &oOffsets,
                                 ConstFieldMaskArg  syncMode  ,
                           const UInt32             uiSyncInfo);

            void execSync (      BulletRigidBodyBase *pFrom,
                                 ConstFieldMaskArg  whichField,
                                 AspectOffsetStore &oOffsets,
                                 ConstFieldMaskArg  syncMode  ,
                           const UInt32             uiSyncInfo);
#endif

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Edit                                   */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                     Aspect Create                            */
    /*! \{                                                                 */

#ifdef OSG_MT_CPTR_ASPECT
    virtual FieldContainer *createAspectCopy(
                                    const FieldContainer *pRefAspect) const;
#endif

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Edit                                   */
    /*! \{                                                                 */
    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

    virtual void resolveLinks(void);

    /*! \}                                                                 */
    /*==========================  PRIVATE  ================================*/

  private:
    /*---------------------------------------------------------------------*/

    // prohibit default functions (move to 'public' if you need one)
    void operator =(const BulletRigidBodyBase &source);
};

typedef BulletRigidBodyBase *BulletRigidBodyBaseP;

OSG_END_NAMESPACE

#endif /* _OSGBULLETRIGIDBODYBASE_H_ */
