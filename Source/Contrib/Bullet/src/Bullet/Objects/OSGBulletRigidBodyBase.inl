/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 * contact: David Kabala (djkabala@gmail.com)                                *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class BulletRigidBody!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


OSG_BEGIN_NAMESPACE


//! access the type of the class
inline
OSG::FieldContainerType &BulletRigidBodyBase::getClassType(void)
{
    return _type;
}

//! access the numerical type of the class
inline
OSG::UInt32 BulletRigidBodyBase::getClassTypeId(void)
{
    return _type.getId();
}

inline
OSG::UInt16 BulletRigidBodyBase::getClassGroupId(void)
{
    return _type.getGroupId();
}

/*------------------------------ get -----------------------------------*/

//! Get the value of the BulletRigidBody::_sfToWorld field.

inline
Matrix &BulletRigidBodyBase::editToWorld(void)
{
    editSField(ToWorldFieldMask);

    return _sfToWorld.getValue();
}

//! Get the value of the BulletRigidBody::_sfToWorld field.
inline
const Matrix &BulletRigidBodyBase::getToWorld(void) const
{
    return _sfToWorld.getValue();
}

//! Set the value of the BulletRigidBody::_sfToWorld field.
inline
void BulletRigidBodyBase::setToWorld(const Matrix &value)
{
    editSField(ToWorldFieldMask);

    _sfToWorld.setValue(value);
}
//! Get the value of the BulletRigidBody::_sfGroupMask field.

inline
Int16 &BulletRigidBodyBase::editGroupMask(void)
{
    editSField(GroupMaskFieldMask);

    return _sfGroupMask.getValue();
}

//! Get the value of the BulletRigidBody::_sfGroupMask field.
inline
      Int16  BulletRigidBodyBase::getGroupMask(void) const
{
    return _sfGroupMask.getValue();
}

//! Set the value of the BulletRigidBody::_sfGroupMask field.
inline
void BulletRigidBodyBase::setGroupMask(const Int16 value)
{
    editSField(GroupMaskFieldMask);

    _sfGroupMask.setValue(value);
}
//! Get the value of the BulletRigidBody::_sfCollisionMask field.

inline
Int16 &BulletRigidBodyBase::editCollisionMask(void)
{
    editSField(CollisionMaskFieldMask);

    return _sfCollisionMask.getValue();
}

//! Get the value of the BulletRigidBody::_sfCollisionMask field.
inline
      Int16  BulletRigidBodyBase::getCollisionMask(void) const
{
    return _sfCollisionMask.getValue();
}

//! Set the value of the BulletRigidBody::_sfCollisionMask field.
inline
void BulletRigidBodyBase::setCollisionMask(const Int16 value)
{
    editSField(CollisionMaskFieldMask);

    _sfCollisionMask.setValue(value);
}

//! Get the value of the BulletRigidBody::_sfCollisionShape field.
inline
BulletCollisionShape * BulletRigidBodyBase::getCollisionShape(void) const
{
    return _sfCollisionShape.getValue();
}

//! Set the value of the BulletRigidBody::_sfCollisionShape field.
inline
void BulletRigidBodyBase::setCollisionShape(BulletCollisionShape * const value)
{
    editSField(CollisionShapeFieldMask);

    _sfCollisionShape.setValue(value);
}
//! Get the value of the BulletRigidBody::_sfAnisotropicFriction field.
inline
Vec3f BulletRigidBodyBase::getAnisotropicFriction(void) const
{
    return _sfAnisotropicFriction.getValue();
}

//! Set the value of the BulletRigidBody::_sfAnisotropicFriction field.
inline
void BulletRigidBodyBase::setAnisotropicFriction(const Vec3f &value)
{
    editSField(AnisotropicFrictionFieldMask);

    _sfAnisotropicFriction.setValue(value);
}
//! Get the value of the BulletRigidBody::_sfContactProcessingThreashold field.
inline
Real32 BulletRigidBodyBase::getContactProcessingThreashold(void) const
{
    return _sfContactProcessingThreashold.getValue();
}

//! Set the value of the BulletRigidBody::_sfContactProcessingThreashold field.
inline
void BulletRigidBodyBase::setContactProcessingThreashold(const Real32 value)
{
    editSField(ContactProcessingThreasholdFieldMask);

    _sfContactProcessingThreashold.setValue(value);
}
//! Get the value of the BulletRigidBody::_sfActivation field.
inline
Int32 BulletRigidBodyBase::getActivation(void) const
{
    return _sfActivation.getValue();
}

//! Set the value of the BulletRigidBody::_sfActivation field.
inline
void BulletRigidBodyBase::setActivation(const Int32 value)
{
    editSField(ActivationFieldMask);

    _sfActivation.setValue(value);
}
//! Get the value of the BulletRigidBody::_sfDeactivationTime field.
inline
Real32 BulletRigidBodyBase::getDeactivationTime(void) const
{
    return _sfDeactivationTime.getValue();
}

//! Set the value of the BulletRigidBody::_sfDeactivationTime field.
inline
void BulletRigidBodyBase::setDeactivationTime(const Real32 value)
{
    editSField(DeactivationTimeFieldMask);

    _sfDeactivationTime.setValue(value);
}
//! Get the value of the BulletRigidBody::_sfRestitution field.
inline
Real32 BulletRigidBodyBase::getRestitution(void) const
{
    return _sfRestitution.getValue();
}

//! Set the value of the BulletRigidBody::_sfRestitution field.
inline
void BulletRigidBodyBase::setRestitution(const Real32 value)
{
    editSField(RestitutionFieldMask);

    _sfRestitution.setValue(value);
}
//! Get the value of the BulletRigidBody::_sfFriction field.
inline
Real32 BulletRigidBodyBase::getFriction(void) const
{
    return _sfFriction.getValue();
}

//! Set the value of the BulletRigidBody::_sfFriction field.
inline
void BulletRigidBodyBase::setFriction(const Real32 value)
{
    editSField(FrictionFieldMask);

    _sfFriction.setValue(value);
}
//! Get the value of the BulletRigidBody::_sfWorldTransform field.
inline
Matrix BulletRigidBodyBase::getWorldTransform(void) const
{
    return _sfWorldTransform.getValue();
}

//! Set the value of the BulletRigidBody::_sfWorldTransform field.
inline
void BulletRigidBodyBase::setWorldTransform(const Matrix &value)
{
    editSField(WorldTransformFieldMask);

    _sfWorldTransform.setValue(value);
}
//! Get the value of the BulletRigidBody::_sfInterpolationWorldTransform field.
inline
Matrix BulletRigidBodyBase::getInterpolationWorldTransform(void) const
{
    return _sfInterpolationWorldTransform.getValue();
}

//! Set the value of the BulletRigidBody::_sfInterpolationWorldTransform field.
inline
void BulletRigidBodyBase::setInterpolationWorldTransform(const Matrix &value)
{
    editSField(InterpolationWorldTransformFieldMask);

    _sfInterpolationWorldTransform.setValue(value);
}
//! Get the value of the BulletRigidBody::_sfInterpolationLinearVelocity field.
inline
Vec3f BulletRigidBodyBase::getInterpolationLinearVelocity(void) const
{
    return _sfInterpolationLinearVelocity.getValue();
}

//! Set the value of the BulletRigidBody::_sfInterpolationLinearVelocity field.
inline
void BulletRigidBodyBase::setInterpolationLinearVelocity(const Vec3f &value)
{
    editSField(InterpolationLinearVelocityFieldMask);

    _sfInterpolationLinearVelocity.setValue(value);
}
//! Get the value of the BulletRigidBody::_sfInterpolationAngularVelocity field.
inline
Vec3f BulletRigidBodyBase::getInterpolationAngularVelocity(void) const
{
    return _sfInterpolationAngularVelocity.getValue();
}

//! Set the value of the BulletRigidBody::_sfInterpolationAngularVelocity field.
inline
void BulletRigidBodyBase::setInterpolationAngularVelocity(const Vec3f &value)
{
    editSField(InterpolationAngularVelocityFieldMask);

    _sfInterpolationAngularVelocity.setValue(value);
}
//! Get the value of the BulletRigidBody::_sfIslandTag field.
inline
Int32 BulletRigidBodyBase::getIslandTag(void) const
{
    return _sfIslandTag.getValue();
}

//! Set the value of the BulletRigidBody::_sfIslandTag field.
inline
void BulletRigidBodyBase::setIslandTag(const Int32 value)
{
    editSField(IslandTagFieldMask);

    _sfIslandTag.setValue(value);
}
//! Get the value of the BulletRigidBody::_sfCompanionId field.
inline
Int32 BulletRigidBodyBase::getCompanionId(void) const
{
    return _sfCompanionId.getValue();
}

//! Set the value of the BulletRigidBody::_sfCompanionId field.
inline
void BulletRigidBodyBase::setCompanionId(const Int32 value)
{
    editSField(CompanionIdFieldMask);

    _sfCompanionId.setValue(value);
}
//! Get the value of the BulletRigidBody::_sfHitFraction field.
inline
Real32 BulletRigidBodyBase::getHitFraction(void) const
{
    return _sfHitFraction.getValue();
}

//! Set the value of the BulletRigidBody::_sfHitFraction field.
inline
void BulletRigidBodyBase::setHitFraction(const Real32 value)
{
    editSField(HitFractionFieldMask);

    _sfHitFraction.setValue(value);
}
//! Get the value of the BulletRigidBody::_sfCollisionFlags field.
inline
Int32 BulletRigidBodyBase::getCollisionFlags(void) const
{
    return _sfCollisionFlags.getValue();
}

//! Set the value of the BulletRigidBody::_sfCollisionFlags field.
inline
void BulletRigidBodyBase::setCollisionFlags(const Int32 value)
{
    editSField(CollisionFlagsFieldMask);

    _sfCollisionFlags.setValue(value);
}
//! Get the value of the BulletRigidBody::_sfCcdSweptSphereRadius field.
inline
Real32 BulletRigidBodyBase::getCcdSweptSphereRadius(void) const
{
    return _sfCcdSweptSphereRadius.getValue();
}

//! Set the value of the BulletRigidBody::_sfCcdSweptSphereRadius field.
inline
void BulletRigidBodyBase::setCcdSweptSphereRadius(const Real32 value)
{
    editSField(CcdSweptSphereRadiusFieldMask);

    _sfCcdSweptSphereRadius.setValue(value);
}
//! Get the value of the BulletRigidBody::_sfCcdMotionThreashold field.
inline
Real32 BulletRigidBodyBase::getCcdMotionThreashold(void) const
{
    return _sfCcdMotionThreashold.getValue();
}

//! Set the value of the BulletRigidBody::_sfCcdMotionThreashold field.
inline
void BulletRigidBodyBase::setCcdMotionThreashold(const Real32 value)
{
    editSField(CcdMotionThreasholdFieldMask);

    _sfCcdMotionThreashold.setValue(value);
}
//! Get the value of the BulletRigidBody::_sfGravity field.
inline
Vec3f BulletRigidBodyBase::getGravity(void) const
{
    return _sfGravity.getValue();
}

//! Set the value of the BulletRigidBody::_sfGravity field.
inline
void BulletRigidBodyBase::setGravity(const Vec3f &value)
{
    editSField(GravityFieldMask);

    _sfGravity.setValue(value);
}
//! Get the value of the BulletRigidBody::_sfDamping field.
inline
Vec2f BulletRigidBodyBase::getDamping(void) const
{
    return _sfDamping.getValue();
}

//! Set the value of the BulletRigidBody::_sfDamping field.
inline
void BulletRigidBodyBase::setDamping(const Vec2f &value)
{
    editSField(DampingFieldMask);

    _sfDamping.setValue(value);
}
//! Get the value of the BulletRigidBody::_sfMass field.
inline
Real32 BulletRigidBodyBase::getMass(void) const
{
    return _sfMass.getValue();
}

//! Set the value of the BulletRigidBody::_sfMass field.
inline
void BulletRigidBodyBase::setMass(const Real32 value)
{
    editSField(MassFieldMask);

    _sfMass.setValue(value);
}
//! Get the value of the BulletRigidBody::_sfInertia field.
inline
Vec3f BulletRigidBodyBase::getInertia(void) const
{
    return _sfInertia.getValue();
}

//! Set the value of the BulletRigidBody::_sfInertia field.
inline
void BulletRigidBodyBase::setInertia(const Vec3f &value)
{
    editSField(InertiaFieldMask);

    _sfInertia.setValue(value);
}
//! Get the value of the BulletRigidBody::_sfLinearFactor field.
inline
Vec3f BulletRigidBodyBase::getLinearFactor(void) const
{
    return _sfLinearFactor.getValue();
}

//! Set the value of the BulletRigidBody::_sfLinearFactor field.
inline
void BulletRigidBodyBase::setLinearFactor(const Vec3f &value)
{
    editSField(LinearFactorFieldMask);

    _sfLinearFactor.setValue(value);
}
//! Get the value of the BulletRigidBody::_sfCenterOfMassTransform field.
inline
Matrix BulletRigidBodyBase::getCenterOfMassTransform(void) const
{
    return _sfCenterOfMassTransform.getValue();
}

//! Set the value of the BulletRigidBody::_sfCenterOfMassTransform field.
inline
void BulletRigidBodyBase::setCenterOfMassTransform(const Matrix &value)
{
    editSField(CenterOfMassTransformFieldMask);

    _sfCenterOfMassTransform.setValue(value);
}
//! Get the value of the BulletRigidBody::_sfLinearVelocity field.
inline
Vec3f BulletRigidBodyBase::getLinearVelocity(void) const
{
    return _sfLinearVelocity.getValue();
}

//! Set the value of the BulletRigidBody::_sfLinearVelocity field.
inline
void BulletRigidBodyBase::setLinearVelocity(const Vec3f &value)
{
    editSField(LinearVelocityFieldMask);

    _sfLinearVelocity.setValue(value);
}
//! Get the value of the BulletRigidBody::_sfAngularVelocity field.
inline
Vec3f BulletRigidBodyBase::getAngularVelocity(void) const
{
    return _sfAngularVelocity.getValue();
}

//! Set the value of the BulletRigidBody::_sfAngularVelocity field.
inline
void BulletRigidBodyBase::setAngularVelocity(const Vec3f &value)
{
    editSField(AngularVelocityFieldMask);

    _sfAngularVelocity.setValue(value);
}
//! Get the value of the BulletRigidBody::_sfAngularFactor field.
inline
Vec3f BulletRigidBodyBase::getAngularFactor(void) const
{
    return _sfAngularFactor.getValue();
}

//! Set the value of the BulletRigidBody::_sfAngularFactor field.
inline
void BulletRigidBodyBase::setAngularFactor(const Vec3f &value)
{
    editSField(AngularFactorFieldMask);

    _sfAngularFactor.setValue(value);
}
//! Get the value of the BulletRigidBody::_sfFlags field.
inline
Int32 BulletRigidBodyBase::getFlags(void) const
{
    return _sfFlags.getValue();
}

//! Set the value of the BulletRigidBody::_sfFlags field.
inline
void BulletRigidBodyBase::setFlags(const Int32 value)
{
    editSField(FlagsFieldMask);

    _sfFlags.setValue(value);
}
//! Get the value of the BulletRigidBody::_sfSleepingThresholds field.
inline
Vec2f BulletRigidBodyBase::getSleepingThresholds(void) const
{
    return _sfSleepingThresholds.getValue();
}

//! Set the value of the BulletRigidBody::_sfSleepingThresholds field.
inline
void BulletRigidBodyBase::setSleepingThresholds(const Vec2f &value)
{
    editSField(SleepingThresholdsFieldMask);

    _sfSleepingThresholds.setValue(value);
}


#ifdef OSG_MT_CPTR_ASPECT
inline
void BulletRigidBodyBase::execSync (      BulletRigidBodyBase *pFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    Inherited::execSync(pFrom, whichField, oOffsets, syncMode, uiSyncInfo);

    if(FieldBits::NoField != (ParentWorldFieldMask & whichField))
        _sfParentWorld.syncWith(pFrom->_sfParentWorld);

    if(FieldBits::NoField != (ToWorldFieldMask & whichField))
        _sfToWorld.syncWith(pFrom->_sfToWorld);

    if(FieldBits::NoField != (GroupMaskFieldMask & whichField))
        _sfGroupMask.syncWith(pFrom->_sfGroupMask);

    if(FieldBits::NoField != (CollisionMaskFieldMask & whichField))
        _sfCollisionMask.syncWith(pFrom->_sfCollisionMask);

    if(FieldBits::NoField != (CollisionShapeFieldMask & whichField))
        _sfCollisionShape.syncWith(pFrom->_sfCollisionShape);

    if(FieldBits::NoField != (AnisotropicFrictionFieldMask & whichField))
        _sfAnisotropicFriction.syncWith(pFrom->_sfAnisotropicFriction);

    if(FieldBits::NoField != (ContactProcessingThreasholdFieldMask & whichField))
        _sfContactProcessingThreashold.syncWith(pFrom->_sfContactProcessingThreashold);

    if(FieldBits::NoField != (ActivationFieldMask & whichField))
        _sfActivation.syncWith(pFrom->_sfActivation);

    if(FieldBits::NoField != (DeactivationTimeFieldMask & whichField))
        _sfDeactivationTime.syncWith(pFrom->_sfDeactivationTime);

    if(FieldBits::NoField != (RestitutionFieldMask & whichField))
        _sfRestitution.syncWith(pFrom->_sfRestitution);

    if(FieldBits::NoField != (FrictionFieldMask & whichField))
        _sfFriction.syncWith(pFrom->_sfFriction);

    if(FieldBits::NoField != (WorldTransformFieldMask & whichField))
        _sfWorldTransform.syncWith(pFrom->_sfWorldTransform);

    if(FieldBits::NoField != (InterpolationWorldTransformFieldMask & whichField))
        _sfInterpolationWorldTransform.syncWith(pFrom->_sfInterpolationWorldTransform);

    if(FieldBits::NoField != (InterpolationLinearVelocityFieldMask & whichField))
        _sfInterpolationLinearVelocity.syncWith(pFrom->_sfInterpolationLinearVelocity);

    if(FieldBits::NoField != (InterpolationAngularVelocityFieldMask & whichField))
        _sfInterpolationAngularVelocity.syncWith(pFrom->_sfInterpolationAngularVelocity);

    if(FieldBits::NoField != (IslandTagFieldMask & whichField))
        _sfIslandTag.syncWith(pFrom->_sfIslandTag);

    if(FieldBits::NoField != (CompanionIdFieldMask & whichField))
        _sfCompanionId.syncWith(pFrom->_sfCompanionId);

    if(FieldBits::NoField != (HitFractionFieldMask & whichField))
        _sfHitFraction.syncWith(pFrom->_sfHitFraction);

    if(FieldBits::NoField != (CollisionFlagsFieldMask & whichField))
        _sfCollisionFlags.syncWith(pFrom->_sfCollisionFlags);

    if(FieldBits::NoField != (CcdSweptSphereRadiusFieldMask & whichField))
        _sfCcdSweptSphereRadius.syncWith(pFrom->_sfCcdSweptSphereRadius);

    if(FieldBits::NoField != (CcdMotionThreasholdFieldMask & whichField))
        _sfCcdMotionThreashold.syncWith(pFrom->_sfCcdMotionThreashold);

    if(FieldBits::NoField != (GravityFieldMask & whichField))
        _sfGravity.syncWith(pFrom->_sfGravity);

    if(FieldBits::NoField != (DampingFieldMask & whichField))
        _sfDamping.syncWith(pFrom->_sfDamping);

    if(FieldBits::NoField != (MassFieldMask & whichField))
        _sfMass.syncWith(pFrom->_sfMass);

    if(FieldBits::NoField != (InertiaFieldMask & whichField))
        _sfInertia.syncWith(pFrom->_sfInertia);

    if(FieldBits::NoField != (LinearFactorFieldMask & whichField))
        _sfLinearFactor.syncWith(pFrom->_sfLinearFactor);

    if(FieldBits::NoField != (CenterOfMassTransformFieldMask & whichField))
        _sfCenterOfMassTransform.syncWith(pFrom->_sfCenterOfMassTransform);

    if(FieldBits::NoField != (LinearVelocityFieldMask & whichField))
        _sfLinearVelocity.syncWith(pFrom->_sfLinearVelocity);

    if(FieldBits::NoField != (AngularVelocityFieldMask & whichField))
        _sfAngularVelocity.syncWith(pFrom->_sfAngularVelocity);

    if(FieldBits::NoField != (AngularFactorFieldMask & whichField))
        _sfAngularFactor.syncWith(pFrom->_sfAngularFactor);

    if(FieldBits::NoField != (FlagsFieldMask & whichField))
        _sfFlags.syncWith(pFrom->_sfFlags);

    if(FieldBits::NoField != (SleepingThresholdsFieldMask & whichField))
        _sfSleepingThresholds.syncWith(pFrom->_sfSleepingThresholds);
}
#endif


inline
const Char8 *BulletRigidBodyBase::getClassname(void)
{
    return "BulletRigidBody";
}
OSG_GEN_CONTAINERPTR(BulletRigidBody);

OSG_END_NAMESPACE

