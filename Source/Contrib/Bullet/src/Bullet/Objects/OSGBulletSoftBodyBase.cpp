/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 * contact: David Kabala (djkabala@gmail.com)                                *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class BulletSoftBody!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>
#include <boost/assign/list_of.hpp>

#include "OSGConfig.h"




#include "OSGBulletSoftBodyBase.h"
#include "OSGBulletSoftBody.h"

#include <boost/bind.hpp>

#ifdef WIN32 // turn off 'this' : used in base member initializer list warning
#pragma warning(disable:4355)
#endif

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::BulletSoftBody
    This core is a wrapper around the bullet btSoftBody.  This core treats the geometric properties it contains as
    being in world space.  This is done by first applying an inverse transformation.  This means that the 
    transformations of parent nodes will not influence a BulletSoftBody.
 */

/***************************************************************************\
 *                        Field Documentation                              *
\***************************************************************************/

/*! \var bool            BulletSoftBodyBase::_sfUpdateNormals
    
*/


/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldTraits<BulletSoftBody *>::_type("BulletSoftBodyPtr", "GeometryPtr");
#endif

OSG_FIELDTRAITS_GETTYPE(BulletSoftBody *)

OSG_EXPORT_PTR_SFIELD_FULL(PointerSField,
                           BulletSoftBody *,
                           0);

OSG_EXPORT_PTR_MFIELD_FULL(PointerMField,
                           BulletSoftBody *,
                           0);

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

void BulletSoftBodyBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new SFBool::Description(
        SFBool::getClassType(),
        "UpdateNormals",
        "",
        UpdateNormalsFieldId, UpdateNormalsFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&BulletSoftBody::editHandleUpdateNormals),
        static_cast<FieldGetMethodSig >(&BulletSoftBody::getHandleUpdateNormals));

    oType.addInitialDesc(pDesc);
}


BulletSoftBodyBase::TypeObject BulletSoftBodyBase::_type(
    BulletSoftBodyBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    0,
    reinterpret_cast<PrototypeCreateF>(&BulletSoftBodyBase::createEmptyLocal),
    BulletSoftBody::initMethod,
    BulletSoftBody::exitMethod,
    reinterpret_cast<InitalInsertDescFunc>(&BulletSoftBody::classDescInserter),
    false,
    0,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "\tname=\"BulletSoftBody\"\n"
    "\tparent=\"Geometry\"\n"
    "    library=\"ContribBullet\"\n"
    "    pointerfieldtypes=\"both\"\n"
    "\tstructure=\"concrete\"\n"
    "    systemcomponent=\"true\"\n"
    "    parentsystemcomponent=\"true\"\n"
    "    decoratable=\"false\"\n"
    "    useLocalIncludes=\"false\"\n"
    "    isNodeCore=\"true\"\n"
    "    authors=\"David Kabala (djkabala@gmail.com)\"\n"
    ">\n"
    "This core is a wrapper around the bullet btSoftBody.  This core treats the geometric properties it contains as\n"
    "being in world space.  This is done by first applying an inverse transformation.  This means that the \n"
    "transformations of parent nodes will not influence a BulletSoftBody.\n"
    "\t<Field\n"
    "\t\tname=\"UpdateNormals\"\n"
    "\t\ttype=\"bool\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"true\"\n"
    "\t>\n"
    "\t</Field>\n"
    "</FieldContainer>\n",
    "This core is a wrapper around the bullet btSoftBody.  This core treats the geometric properties it contains as\n"
    "being in world space.  This is done by first applying an inverse transformation.  This means that the \n"
    "transformations of parent nodes will not influence a BulletSoftBody.\n"
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &BulletSoftBodyBase::getType(void)
{
    return _type;
}

const FieldContainerType &BulletSoftBodyBase::getType(void) const
{
    return _type;
}

UInt32 BulletSoftBodyBase::getContainerSize(void) const
{
    return sizeof(BulletSoftBody);
}

/*------------------------- decorator get ------------------------------*/


SFBool *BulletSoftBodyBase::editSFUpdateNormals(void)
{
    editSField(UpdateNormalsFieldMask);

    return &_sfUpdateNormals;
}

const SFBool *BulletSoftBodyBase::getSFUpdateNormals(void) const
{
    return &_sfUpdateNormals;
}






/*------------------------------ access -----------------------------------*/

UInt32 BulletSoftBodyBase::getBinSize(ConstFieldMaskArg whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (UpdateNormalsFieldMask & whichField))
    {
        returnValue += _sfUpdateNormals.getBinSize();
    }

    return returnValue;
}

void BulletSoftBodyBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (UpdateNormalsFieldMask & whichField))
    {
        _sfUpdateNormals.copyToBin(pMem);
    }
}

void BulletSoftBodyBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (UpdateNormalsFieldMask & whichField))
    {
        editSField(UpdateNormalsFieldMask);
        _sfUpdateNormals.copyFromBin(pMem);
    }
}

//! create a new instance of the class
BulletSoftBodyTransitPtr BulletSoftBodyBase::createLocal(BitVector bFlags)
{
    BulletSoftBodyTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyLocal(bFlags);

        fc = dynamic_pointer_cast<BulletSoftBody>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class, copy the container flags
BulletSoftBodyTransitPtr BulletSoftBodyBase::createDependent(BitVector bFlags)
{
    BulletSoftBodyTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyDependent(bFlags);

        fc = dynamic_pointer_cast<BulletSoftBody>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class
BulletSoftBodyTransitPtr BulletSoftBodyBase::create(void)
{
    BulletSoftBodyTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopy();

        fc = dynamic_pointer_cast<BulletSoftBody>(tmpPtr);
    }

    return fc;
}

BulletSoftBody *BulletSoftBodyBase::createEmptyLocal(BitVector bFlags)
{
    BulletSoftBody *returnValue;

    newPtr<BulletSoftBody>(returnValue, bFlags);

    returnValue->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

//! create an empty new instance of the class, do not copy the prototype
BulletSoftBody *BulletSoftBodyBase::createEmpty(void)
{
    BulletSoftBody *returnValue;

    newPtr<BulletSoftBody>(returnValue, Thread::getCurrentLocalFlags());

    returnValue->_pFieldFlags->_bNamespaceMask &=
        ~Thread::getCurrentLocalFlags();

    return returnValue;
}

FieldContainerTransitPtr BulletSoftBodyBase::shallowCopyLocal(
    BitVector bFlags) const
{
    BulletSoftBody *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const BulletSoftBody *>(this), bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

FieldContainerTransitPtr BulletSoftBodyBase::shallowCopyDependent(
    BitVector bFlags) const
{
    BulletSoftBody *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const BulletSoftBody *>(this), ~bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask = bFlags;

    return returnValue;
}

FieldContainerTransitPtr BulletSoftBodyBase::shallowCopy(void) const
{
    BulletSoftBody *tmpPtr;

    newPtr(tmpPtr,
           dynamic_cast<const BulletSoftBody *>(this),
           Thread::getCurrentLocalFlags());

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~Thread::getCurrentLocalFlags();

    FieldContainerTransitPtr returnValue(tmpPtr);

    return returnValue;
}



/*------------------------- constructors ----------------------------------*/

BulletSoftBodyBase::BulletSoftBodyBase(void) :
    Inherited(),
    _sfUpdateNormals          (bool(true))
{
}

BulletSoftBodyBase::BulletSoftBodyBase(const BulletSoftBodyBase &source) :
    Inherited(source),
    _sfUpdateNormals          (source._sfUpdateNormals          )
{
}


/*-------------------------- destructors ----------------------------------*/

BulletSoftBodyBase::~BulletSoftBodyBase(void)
{
}


GetFieldHandlePtr BulletSoftBodyBase::getHandleUpdateNormals   (void) const
{
    SFBool::GetHandlePtr returnValue(
        new  SFBool::GetHandle(
             &_sfUpdateNormals,
             this->getType().getFieldDesc(UpdateNormalsFieldId),
             const_cast<BulletSoftBodyBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr BulletSoftBodyBase::editHandleUpdateNormals  (void)
{
    SFBool::EditHandlePtr returnValue(
        new  SFBool::EditHandle(
             &_sfUpdateNormals,
             this->getType().getFieldDesc(UpdateNormalsFieldId),
             this));


    editSField(UpdateNormalsFieldMask);

    return returnValue;
}



#ifdef OSG_MT_CPTR_ASPECT
void BulletSoftBodyBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    BulletSoftBody *pThis = static_cast<BulletSoftBody *>(this);

    pThis->execSync(static_cast<BulletSoftBody *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif


#ifdef OSG_MT_CPTR_ASPECT
FieldContainer *BulletSoftBodyBase::createAspectCopy(
    const FieldContainer *pRefAspect) const
{
    BulletSoftBody *returnValue;

    newAspectCopy(returnValue,
                  dynamic_cast<const BulletSoftBody *>(pRefAspect),
                  dynamic_cast<const BulletSoftBody *>(this));

    return returnValue;
}
#endif

void BulletSoftBodyBase::resolveLinks(void)
{
    Inherited::resolveLinks();


}


OSG_END_NAMESPACE
