/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact:  David Kabala (djkabala@gmail.com)                             *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class FieldContainerEditorComponent!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>
#include <boost/assign/list_of.hpp>

#include "OSGConfig.h"



#include "OSGFieldContainer.h"          // EditingFC Class
#include "OSGFieldEditorComponent.h"    // Editors Class

#include "OSGFieldContainerEditorComponentBase.h"
#include "OSGFieldContainerEditorComponent.h"

#include <boost/bind.hpp>

#ifdef WIN32 // turn off 'this' : used in base member initializer list warning
#pragma warning(disable:4355)
#endif

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::FieldContainerEditorComponent
    A UI Panel.
 */

/***************************************************************************\
 *                        Field Documentation                              *
\***************************************************************************/

/*! \var FieldContainer * FieldContainerEditorComponentBase::_sfEditingFC
    
*/

/*! \var FieldEditorComponent * FieldContainerEditorComponentBase::_mfEditors
    
*/


/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldTraits<FieldContainerEditorComponent *>::_type("FieldContainerEditorComponentPtr", "ComponentContainerPtr");
#endif

OSG_FIELDTRAITS_GETTYPE(FieldContainerEditorComponent *)

OSG_EXPORT_PTR_SFIELD_FULL(PointerSField,
                           FieldContainerEditorComponent *,
                           0);

OSG_EXPORT_PTR_MFIELD_FULL(PointerMField,
                           FieldContainerEditorComponent *,
                           0);

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

void FieldContainerEditorComponentBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new SFUnrecFieldContainerPtr::Description(
        SFUnrecFieldContainerPtr::getClassType(),
        "EditingFC",
        "",
        EditingFCFieldId, EditingFCFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&FieldContainerEditorComponent::editHandleEditingFC),
        static_cast<FieldGetMethodSig >(&FieldContainerEditorComponent::getHandleEditingFC));

    oType.addInitialDesc(pDesc);

    pDesc = new MFUnrecFieldEditorComponentPtr::Description(
        MFUnrecFieldEditorComponentPtr::getClassType(),
        "Editors",
        "",
        EditorsFieldId, EditorsFieldMask,
        false,
        (Field::MFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&FieldContainerEditorComponent::editHandleEditors),
        static_cast<FieldGetMethodSig >(&FieldContainerEditorComponent::getHandleEditors));

    oType.addInitialDesc(pDesc);
}


FieldContainerEditorComponentBase::TypeObject FieldContainerEditorComponentBase::_type(
    FieldContainerEditorComponentBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    0,
    NULL,
    FieldContainerEditorComponent::initMethod,
    FieldContainerEditorComponent::exitMethod,
    reinterpret_cast<InitalInsertDescFunc>(&FieldContainerEditorComponent::classDescInserter),
    false,
    0,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "\tname=\"FieldContainerEditorComponent\"\n"
    "\tparent=\"ComponentContainer\"\n"
    "    library=\"ContribFieldContainerEditor\"\n"
    "    pointerfieldtypes=\"both\"\n"
    "\tstructure=\"abstract\"\n"
    "    systemcomponent=\"true\"\n"
    "    parentsystemcomponent=\"true\"\n"
    "\tdecoratable=\"false\"\n"
    "    useLocalIncludes=\"false\"\n"
    "    isNodeCore=\"false\"\n"
    "    authors=\"David Kabala (djkabala@gmail.com)                             \"\n"
    ">\n"
    "A UI Panel.\n"
    "\t<Field\n"
    "\t\tname=\"EditingFC\"\n"
    "\t\ttype=\"FieldContainer\"\n"
    "\t\tcategory=\"pointer\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"protected\"\n"
    "\t\tdefaultValue=\"NULL\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"Editors\"\n"
    "\t\ttype=\"FieldEditorComponent\"\n"
    "\t\tcategory=\"pointer\"\n"
    "\t\tcardinality=\"multi\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"protected\"\n"
    "\t>\n"
    "\t</Field>\n"
    "</FieldContainer>\n",
    "A UI Panel.\n"
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &FieldContainerEditorComponentBase::getType(void)
{
    return _type;
}

const FieldContainerType &FieldContainerEditorComponentBase::getType(void) const
{
    return _type;
}

UInt32 FieldContainerEditorComponentBase::getContainerSize(void) const
{
    return sizeof(FieldContainerEditorComponent);
}

/*------------------------- decorator get ------------------------------*/


//! Get the FieldContainerEditorComponent::_sfEditingFC field.
const SFUnrecFieldContainerPtr *FieldContainerEditorComponentBase::getSFEditingFC(void) const
{
    return &_sfEditingFC;
}

SFUnrecFieldContainerPtr *FieldContainerEditorComponentBase::editSFEditingFC      (void)
{
    editSField(EditingFCFieldMask);

    return &_sfEditingFC;
}

//! Get the FieldContainerEditorComponent::_mfEditors field.
const MFUnrecFieldEditorComponentPtr *FieldContainerEditorComponentBase::getMFEditors(void) const
{
    return &_mfEditors;
}

MFUnrecFieldEditorComponentPtr *FieldContainerEditorComponentBase::editMFEditors        (void)
{
    editMField(EditorsFieldMask, _mfEditors);

    return &_mfEditors;
}



void FieldContainerEditorComponentBase::pushToEditors(FieldEditorComponent * const value)
{
    editMField(EditorsFieldMask, _mfEditors);

    _mfEditors.push_back(value);
}

void FieldContainerEditorComponentBase::assignEditors  (const MFUnrecFieldEditorComponentPtr &value)
{
    MFUnrecFieldEditorComponentPtr::const_iterator elemIt  =
        value.begin();
    MFUnrecFieldEditorComponentPtr::const_iterator elemEnd =
        value.end  ();

    static_cast<FieldContainerEditorComponent *>(this)->clearEditors();

    while(elemIt != elemEnd)
    {
        this->pushToEditors(*elemIt);

        ++elemIt;
    }
}

void FieldContainerEditorComponentBase::removeFromEditors(UInt32 uiIndex)
{
    if(uiIndex < _mfEditors.size())
    {
        editMField(EditorsFieldMask, _mfEditors);

        _mfEditors.erase(uiIndex);
    }
}

void FieldContainerEditorComponentBase::removeObjFromEditors(FieldEditorComponent * const value)
{
    Int32 iElemIdx = _mfEditors.findIndex(value);

    if(iElemIdx != -1)
    {
        editMField(EditorsFieldMask, _mfEditors);

        _mfEditors.erase(iElemIdx);
    }
}
void FieldContainerEditorComponentBase::clearEditors(void)
{
    editMField(EditorsFieldMask, _mfEditors);


    _mfEditors.clear();
}



/*------------------------------ access -----------------------------------*/

UInt32 FieldContainerEditorComponentBase::getBinSize(ConstFieldMaskArg whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (EditingFCFieldMask & whichField))
    {
        returnValue += _sfEditingFC.getBinSize();
    }
    if(FieldBits::NoField != (EditorsFieldMask & whichField))
    {
        returnValue += _mfEditors.getBinSize();
    }

    return returnValue;
}

void FieldContainerEditorComponentBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (EditingFCFieldMask & whichField))
    {
        _sfEditingFC.copyToBin(pMem);
    }
    if(FieldBits::NoField != (EditorsFieldMask & whichField))
    {
        _mfEditors.copyToBin(pMem);
    }
}

void FieldContainerEditorComponentBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (EditingFCFieldMask & whichField))
    {
        _sfEditingFC.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (EditorsFieldMask & whichField))
    {
        _mfEditors.copyFromBin(pMem);
    }
}




/*------------------------- constructors ----------------------------------*/

FieldContainerEditorComponentBase::FieldContainerEditorComponentBase(void) :
    Inherited(),
    _sfEditingFC              (NULL),
    _mfEditors                ()
{
}

FieldContainerEditorComponentBase::FieldContainerEditorComponentBase(const FieldContainerEditorComponentBase &source) :
    Inherited(source),
    _sfEditingFC              (NULL),
    _mfEditors                ()
{
}


/*-------------------------- destructors ----------------------------------*/

FieldContainerEditorComponentBase::~FieldContainerEditorComponentBase(void)
{
}

void FieldContainerEditorComponentBase::onCreate(const FieldContainerEditorComponent *source)
{
    Inherited::onCreate(source);

    if(source != NULL)
    {
        FieldContainerEditorComponent *pThis = static_cast<FieldContainerEditorComponent *>(this);

        pThis->setEditingFC(source->getEditingFC());

        MFUnrecFieldEditorComponentPtr::const_iterator EditorsIt  =
            source->_mfEditors.begin();
        MFUnrecFieldEditorComponentPtr::const_iterator EditorsEnd =
            source->_mfEditors.end  ();

        while(EditorsIt != EditorsEnd)
        {
            pThis->pushToEditors(*EditorsIt);

            ++EditorsIt;
        }
    }
}

GetFieldHandlePtr FieldContainerEditorComponentBase::getHandleEditingFC       (void) const
{
    SFUnrecFieldContainerPtr::GetHandlePtr returnValue(
        new  SFUnrecFieldContainerPtr::GetHandle(
             &_sfEditingFC,
             this->getType().getFieldDesc(EditingFCFieldId),
             const_cast<FieldContainerEditorComponentBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr FieldContainerEditorComponentBase::editHandleEditingFC      (void)
{
    SFUnrecFieldContainerPtr::EditHandlePtr returnValue(
        new  SFUnrecFieldContainerPtr::EditHandle(
             &_sfEditingFC,
             this->getType().getFieldDesc(EditingFCFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&FieldContainerEditorComponent::setEditingFC,
                    static_cast<FieldContainerEditorComponent *>(this), _1));

    editSField(EditingFCFieldMask);

    return returnValue;
}

GetFieldHandlePtr FieldContainerEditorComponentBase::getHandleEditors         (void) const
{
    MFUnrecFieldEditorComponentPtr::GetHandlePtr returnValue(
        new  MFUnrecFieldEditorComponentPtr::GetHandle(
             &_mfEditors,
             this->getType().getFieldDesc(EditorsFieldId),
             const_cast<FieldContainerEditorComponentBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr FieldContainerEditorComponentBase::editHandleEditors        (void)
{
    MFUnrecFieldEditorComponentPtr::EditHandlePtr returnValue(
        new  MFUnrecFieldEditorComponentPtr::EditHandle(
             &_mfEditors,
             this->getType().getFieldDesc(EditorsFieldId),
             this));

    returnValue->setAddMethod(
        boost::bind(&FieldContainerEditorComponent::pushToEditors,
                    static_cast<FieldContainerEditorComponent *>(this), _1));
    returnValue->setRemoveMethod(
        boost::bind(&FieldContainerEditorComponent::removeFromEditors,
                    static_cast<FieldContainerEditorComponent *>(this), _1));
    returnValue->setRemoveObjMethod(
        boost::bind(&FieldContainerEditorComponent::removeObjFromEditors,
                    static_cast<FieldContainerEditorComponent *>(this), _1));
    returnValue->setClearMethod(
        boost::bind(&FieldContainerEditorComponent::clearEditors,
                    static_cast<FieldContainerEditorComponent *>(this)));

    editMField(EditorsFieldMask, _mfEditors);

    return returnValue;
}


#ifdef OSG_MT_CPTR_ASPECT
void FieldContainerEditorComponentBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    FieldContainerEditorComponent *pThis = static_cast<FieldContainerEditorComponent *>(this);

    pThis->execSync(static_cast<FieldContainerEditorComponent *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif



void FieldContainerEditorComponentBase::resolveLinks(void)
{
    Inherited::resolveLinks();

    static_cast<FieldContainerEditorComponent *>(this)->setEditingFC(NULL);

    static_cast<FieldContainerEditorComponent *>(this)->clearEditors();


}


OSG_END_NAMESPACE
