/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 * contact: David Kabala (djkabala@gmail.com)                                *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class TextureFilter!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>
#include <boost/assign/list_of.hpp>

#include "OSGConfig.h"




#include "OSGTextureFilterBase.h"
#include "OSGTextureFilter.h"

#include <boost/bind.hpp>

#ifdef WIN32 // turn off 'this' : used in base member initializer list warning
#pragma warning(disable:4355)
#endif

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::TextureFilter
    
 */

/***************************************************************************\
 *                        Field Documentation                              *
\***************************************************************************/

/*! \var bool            TextureFilterBase::_sfInternalDirty
    
*/


/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldTraits<TextureFilter *>::_type("TextureFilterPtr", "AttachmentContainerPtr");
#endif

OSG_FIELDTRAITS_GETTYPE(TextureFilter *)

OSG_EXPORT_PTR_SFIELD_FULL(PointerSField,
                           TextureFilter *,
                           0);

OSG_EXPORT_PTR_MFIELD_FULL(PointerMField,
                           TextureFilter *,
                           0);

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

void TextureFilterBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new SFBool::Description(
        SFBool::getClassType(),
        "InternalDirty",
        "",
        InternalDirtyFieldId, InternalDirtyFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&TextureFilter::editHandleInternalDirty),
        static_cast<FieldGetMethodSig >(&TextureFilter::getHandleInternalDirty));

    oType.addInitialDesc(pDesc);
}


TextureFilterBase::TypeObject TextureFilterBase::_type(
    TextureFilterBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    0,
    NULL,
    TextureFilter::initMethod,
    TextureFilter::exitMethod,
    reinterpret_cast<InitalInsertDescFunc>(&TextureFilter::classDescInserter),
    false,
    0,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "    name=\"TextureFilter\"\n"
    "    parent=\"AttachmentContainer\"\n"
    "    library=\"ContribImageProcessing\"\n"
    "    pointerfieldtypes=\"both\"\n"
    "    structure=\"abstract\"\n"
    "    systemcomponent=\"true\"\n"
    "    parentsystemcomponent=\"true\"\n"
    "    decoratable=\"false\"\n"
    "    useLocalIncludes=\"true\"\n"
    "    authors=\"David Kabala (djkabala@gmail.com)\"\n"
    "    >\n"
    "    <Field\n"
    "        name=\"InternalDirty\"\n"
    "        type=\"bool\"\n"
    "        category=\"data\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        access=\"protected\"\n"
    "        defaultValue=\"true\"\n"
    "        >\n"
    "    </Field>\n"
    "</FieldContainer>\n",
    ""
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &TextureFilterBase::getType(void)
{
    return _type;
}

const FieldContainerType &TextureFilterBase::getType(void) const
{
    return _type;
}

UInt32 TextureFilterBase::getContainerSize(void) const
{
    return sizeof(TextureFilter);
}

/*------------------------- decorator get ------------------------------*/


SFBool *TextureFilterBase::editSFInternalDirty(void)
{
    editSField(InternalDirtyFieldMask);

    return &_sfInternalDirty;
}

const SFBool *TextureFilterBase::getSFInternalDirty(void) const
{
    return &_sfInternalDirty;
}






/*------------------------------ access -----------------------------------*/

UInt32 TextureFilterBase::getBinSize(ConstFieldMaskArg whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (InternalDirtyFieldMask & whichField))
    {
        returnValue += _sfInternalDirty.getBinSize();
    }

    return returnValue;
}

void TextureFilterBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (InternalDirtyFieldMask & whichField))
    {
        _sfInternalDirty.copyToBin(pMem);
    }
}

void TextureFilterBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (InternalDirtyFieldMask & whichField))
    {
        editSField(InternalDirtyFieldMask);
        _sfInternalDirty.copyFromBin(pMem);
    }
}



/*------------------------- constructors ----------------------------------*/

TextureFilterBase::TextureFilterBase(void) :
    Inherited(),
    _sfInternalDirty          (bool(true))
{
}

TextureFilterBase::TextureFilterBase(const TextureFilterBase &source) :
    Inherited(source),
    _sfInternalDirty          (source._sfInternalDirty          )
{
}


/*-------------------------- destructors ----------------------------------*/

TextureFilterBase::~TextureFilterBase(void)
{
}


GetFieldHandlePtr TextureFilterBase::getHandleInternalDirty   (void) const
{
    SFBool::GetHandlePtr returnValue(
        new  SFBool::GetHandle(
             &_sfInternalDirty,
             this->getType().getFieldDesc(InternalDirtyFieldId),
             const_cast<TextureFilterBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr TextureFilterBase::editHandleInternalDirty  (void)
{
    SFBool::EditHandlePtr returnValue(
        new  SFBool::EditHandle(
             &_sfInternalDirty,
             this->getType().getFieldDesc(InternalDirtyFieldId),
             this));


    editSField(InternalDirtyFieldMask);

    return returnValue;
}



#ifdef OSG_MT_CPTR_ASPECT
void TextureFilterBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    TextureFilter *pThis = static_cast<TextureFilter *>(this);

    pThis->execSync(static_cast<TextureFilter *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif



void TextureFilterBase::resolveLinks(void)
{
    Inherited::resolveLinks();


}


OSG_END_NAMESPACE
