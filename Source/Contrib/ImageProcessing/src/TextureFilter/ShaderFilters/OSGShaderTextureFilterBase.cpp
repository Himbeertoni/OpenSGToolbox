/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 * contact: David Kabala (djkabala@gmail.com)                                *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class ShaderTextureFilter!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>
#include <boost/assign/list_of.hpp>

#include "OSGConfig.h"



#include "OSGSimpleSHLVariableChunk.h"  // InternalParameters Class
#include "OSGSimpleSHLChunk.h"          // InternalShader Class
#include "OSGFBOViewport.h"             // InternalFBO Class

#include "OSGShaderTextureFilterBase.h"
#include "OSGShaderTextureFilter.h"

#include <boost/bind.hpp>

#ifdef WIN32 // turn off 'this' : used in base member initializer list warning
#pragma warning(disable:4355)
#endif

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::ShaderTextureFilter
    
 */

/***************************************************************************\
 *                        Field Documentation                              *
\***************************************************************************/

/*! \var SimpleSHLVariableChunk * ShaderTextureFilterBase::_sfInternalParameters
    
*/

/*! \var SimpleSHLChunk * ShaderTextureFilterBase::_sfInternalShader
    
*/

/*! \var FBOViewport *   ShaderTextureFilterBase::_sfInternalFBO
    
*/

/*! \var Vec2f           ShaderTextureFilterBase::_sfFBOSize
    
*/

/*! \var TextureFilterOutputSlot ShaderTextureFilterBase::_sfShaderOutputSlot
    
*/

/*! \var TextureFilterInputSlot ShaderTextureFilterBase::_sfShaderInputSlot
    
*/


/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldTraits<ShaderTextureFilter *>::_type("ShaderTextureFilterPtr", "TextureFilterPtr");
#endif

OSG_FIELDTRAITS_GETTYPE(ShaderTextureFilter *)

OSG_EXPORT_PTR_SFIELD_FULL(PointerSField,
                           ShaderTextureFilter *,
                           0);

OSG_EXPORT_PTR_MFIELD_FULL(PointerMField,
                           ShaderTextureFilter *,
                           0);

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

void ShaderTextureFilterBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new SFUnrecSimpleSHLVariableChunkPtr::Description(
        SFUnrecSimpleSHLVariableChunkPtr::getClassType(),
        "InternalParameters",
        "",
        InternalParametersFieldId, InternalParametersFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&ShaderTextureFilter::editHandleInternalParameters),
        static_cast<FieldGetMethodSig >(&ShaderTextureFilter::getHandleInternalParameters));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecSimpleSHLChunkPtr::Description(
        SFUnrecSimpleSHLChunkPtr::getClassType(),
        "InternalShader",
        "",
        InternalShaderFieldId, InternalShaderFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&ShaderTextureFilter::editHandleInternalShader),
        static_cast<FieldGetMethodSig >(&ShaderTextureFilter::getHandleInternalShader));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecFBOViewportPtr::Description(
        SFUnrecFBOViewportPtr::getClassType(),
        "InternalFBO",
        "",
        InternalFBOFieldId, InternalFBOFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&ShaderTextureFilter::editHandleInternalFBO),
        static_cast<FieldGetMethodSig >(&ShaderTextureFilter::getHandleInternalFBO));

    oType.addInitialDesc(pDesc);

    pDesc = new SFVec2f::Description(
        SFVec2f::getClassType(),
        "FBOSize",
        "",
        FBOSizeFieldId, FBOSizeFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&ShaderTextureFilter::editHandleFBOSize),
        static_cast<FieldGetMethodSig >(&ShaderTextureFilter::getHandleFBOSize));

    oType.addInitialDesc(pDesc);

    pDesc = new SFTextureFilterOutputSlot::Description(
        SFTextureFilterOutputSlot::getClassType(),
        "ShaderOutputSlot",
        "",
        ShaderOutputSlotFieldId, ShaderOutputSlotFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&ShaderTextureFilter::editHandleShaderOutputSlot),
        static_cast<FieldGetMethodSig >(&ShaderTextureFilter::getHandleShaderOutputSlot));

    oType.addInitialDesc(pDesc);

    pDesc = new SFTextureFilterInputSlot::Description(
        SFTextureFilterInputSlot::getClassType(),
        "ShaderInputSlot",
        "",
        ShaderInputSlotFieldId, ShaderInputSlotFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&ShaderTextureFilter::editHandleShaderInputSlot),
        static_cast<FieldGetMethodSig >(&ShaderTextureFilter::getHandleShaderInputSlot));

    oType.addInitialDesc(pDesc);
}


ShaderTextureFilterBase::TypeObject ShaderTextureFilterBase::_type(
    ShaderTextureFilterBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    0,
    reinterpret_cast<PrototypeCreateF>(&ShaderTextureFilterBase::createEmptyLocal),
    ShaderTextureFilter::initMethod,
    ShaderTextureFilter::exitMethod,
    reinterpret_cast<InitalInsertDescFunc>(&ShaderTextureFilter::classDescInserter),
    false,
    0,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "    name=\"ShaderTextureFilter\"\n"
    "    parent=\"TextureFilter\"\n"
    "    library=\"ContribImageProcessing\"\n"
    "    pointerfieldtypes=\"both\"\n"
    "    structure=\"concrete\"\n"
    "    systemcomponent=\"true\"\n"
    "    parentsystemcomponent=\"true\"\n"
    "    decoratable=\"false\"\n"
    "    useLocalIncludes=\"true\"\n"
    "    authors=\"David Kabala (djkabala@gmail.com)\"\n"
    "    >\n"
    "    <Field\n"
    "        name=\"InternalParameters\"\n"
    "        type=\"SimpleSHLVariableChunk\"\n"
    "        category=\"pointer\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        access=\"protected\"\n"
    "        defaultValue=\"NULL\"\n"
    "        >\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"InternalShader\"\n"
    "        type=\"SimpleSHLChunk\"\n"
    "        category=\"pointer\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        access=\"protected\"\n"
    "        defaultValue=\"NULL\"\n"
    "        >\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"InternalFBO\"\n"
    "        type=\"FBOViewport\"\n"
    "        category=\"pointer\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        access=\"protected\"\n"
    "        defaultValue=\"NULL\"\n"
    "        >\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"FBOSize\"\n"
    "        type=\"Vec2f\"\n"
    "        category=\"data\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        access=\"public\"\n"
    "        defaultValue=\"-1,-1\"\n"
    "        >\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"ShaderOutputSlot\"\n"
    "        type=\"TextureFilterOutputSlot\"\n"
    "        category=\"data\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        access=\"protected\"\n"
    "        defaultValue=\"OSG_TEXTURE_INTERNAL_FORMAT_COLOR,OSG_TEXTURE_DATA_TYPE_UINT,std::string()\"\n"
    "        >\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"ShaderInputSlot\"\n"
    "        type=\"TextureFilterInputSlot\"\n"
    "        category=\"data\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        access=\"protected\"\n"
    "        defaultValue=\"OSG_TEXTURE_INTERNAL_FORMAT_COLOR | OSG_TEXTURE_INTERNAL_FORMAT_DEPTH | OSG_TEXTURE_INTERNAL_FORMAT_STENCIL,OSG_TEXTURE_DATA_TYPE_UINT | OSG_TEXTURE_DATA_TYPE_INT | OSG_TEXTURE_DATA_TYPE_FLOAT,std::string()\"\n"
    "        >\n"
    "    </Field>\n"
    "</FieldContainer>\n",
    ""
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &ShaderTextureFilterBase::getType(void)
{
    return _type;
}

const FieldContainerType &ShaderTextureFilterBase::getType(void) const
{
    return _type;
}

UInt32 ShaderTextureFilterBase::getContainerSize(void) const
{
    return sizeof(ShaderTextureFilter);
}

/*------------------------- decorator get ------------------------------*/


//! Get the ShaderTextureFilter::_sfInternalParameters field.
const SFUnrecSimpleSHLVariableChunkPtr *ShaderTextureFilterBase::getSFInternalParameters(void) const
{
    return &_sfInternalParameters;
}

SFUnrecSimpleSHLVariableChunkPtr *ShaderTextureFilterBase::editSFInternalParameters(void)
{
    editSField(InternalParametersFieldMask);

    return &_sfInternalParameters;
}

//! Get the ShaderTextureFilter::_sfInternalShader field.
const SFUnrecSimpleSHLChunkPtr *ShaderTextureFilterBase::getSFInternalShader(void) const
{
    return &_sfInternalShader;
}

SFUnrecSimpleSHLChunkPtr *ShaderTextureFilterBase::editSFInternalShader (void)
{
    editSField(InternalShaderFieldMask);

    return &_sfInternalShader;
}

//! Get the ShaderTextureFilter::_sfInternalFBO field.
const SFUnrecFBOViewportPtr *ShaderTextureFilterBase::getSFInternalFBO(void) const
{
    return &_sfInternalFBO;
}

SFUnrecFBOViewportPtr *ShaderTextureFilterBase::editSFInternalFBO    (void)
{
    editSField(InternalFBOFieldMask);

    return &_sfInternalFBO;
}

SFVec2f *ShaderTextureFilterBase::editSFFBOSize(void)
{
    editSField(FBOSizeFieldMask);

    return &_sfFBOSize;
}

const SFVec2f *ShaderTextureFilterBase::getSFFBOSize(void) const
{
    return &_sfFBOSize;
}


SFTextureFilterOutputSlot *ShaderTextureFilterBase::editSFShaderOutputSlot(void)
{
    editSField(ShaderOutputSlotFieldMask);

    return &_sfShaderOutputSlot;
}

const SFTextureFilterOutputSlot *ShaderTextureFilterBase::getSFShaderOutputSlot(void) const
{
    return &_sfShaderOutputSlot;
}


SFTextureFilterInputSlot *ShaderTextureFilterBase::editSFShaderInputSlot(void)
{
    editSField(ShaderInputSlotFieldMask);

    return &_sfShaderInputSlot;
}

const SFTextureFilterInputSlot *ShaderTextureFilterBase::getSFShaderInputSlot(void) const
{
    return &_sfShaderInputSlot;
}






/*------------------------------ access -----------------------------------*/

UInt32 ShaderTextureFilterBase::getBinSize(ConstFieldMaskArg whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (InternalParametersFieldMask & whichField))
    {
        returnValue += _sfInternalParameters.getBinSize();
    }
    if(FieldBits::NoField != (InternalShaderFieldMask & whichField))
    {
        returnValue += _sfInternalShader.getBinSize();
    }
    if(FieldBits::NoField != (InternalFBOFieldMask & whichField))
    {
        returnValue += _sfInternalFBO.getBinSize();
    }
    if(FieldBits::NoField != (FBOSizeFieldMask & whichField))
    {
        returnValue += _sfFBOSize.getBinSize();
    }
    if(FieldBits::NoField != (ShaderOutputSlotFieldMask & whichField))
    {
        returnValue += _sfShaderOutputSlot.getBinSize();
    }
    if(FieldBits::NoField != (ShaderInputSlotFieldMask & whichField))
    {
        returnValue += _sfShaderInputSlot.getBinSize();
    }

    return returnValue;
}

void ShaderTextureFilterBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (InternalParametersFieldMask & whichField))
    {
        _sfInternalParameters.copyToBin(pMem);
    }
    if(FieldBits::NoField != (InternalShaderFieldMask & whichField))
    {
        _sfInternalShader.copyToBin(pMem);
    }
    if(FieldBits::NoField != (InternalFBOFieldMask & whichField))
    {
        _sfInternalFBO.copyToBin(pMem);
    }
    if(FieldBits::NoField != (FBOSizeFieldMask & whichField))
    {
        _sfFBOSize.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ShaderOutputSlotFieldMask & whichField))
    {
        _sfShaderOutputSlot.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ShaderInputSlotFieldMask & whichField))
    {
        _sfShaderInputSlot.copyToBin(pMem);
    }
}

void ShaderTextureFilterBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (InternalParametersFieldMask & whichField))
    {
        editSField(InternalParametersFieldMask);
        _sfInternalParameters.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (InternalShaderFieldMask & whichField))
    {
        editSField(InternalShaderFieldMask);
        _sfInternalShader.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (InternalFBOFieldMask & whichField))
    {
        editSField(InternalFBOFieldMask);
        _sfInternalFBO.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (FBOSizeFieldMask & whichField))
    {
        editSField(FBOSizeFieldMask);
        _sfFBOSize.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ShaderOutputSlotFieldMask & whichField))
    {
        editSField(ShaderOutputSlotFieldMask);
        _sfShaderOutputSlot.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ShaderInputSlotFieldMask & whichField))
    {
        editSField(ShaderInputSlotFieldMask);
        _sfShaderInputSlot.copyFromBin(pMem);
    }
}

//! create a new instance of the class
ShaderTextureFilterTransitPtr ShaderTextureFilterBase::createLocal(BitVector bFlags)
{
    ShaderTextureFilterTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyLocal(bFlags);

        fc = dynamic_pointer_cast<ShaderTextureFilter>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class, copy the container flags
ShaderTextureFilterTransitPtr ShaderTextureFilterBase::createDependent(BitVector bFlags)
{
    ShaderTextureFilterTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyDependent(bFlags);

        fc = dynamic_pointer_cast<ShaderTextureFilter>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class
ShaderTextureFilterTransitPtr ShaderTextureFilterBase::create(void)
{
    ShaderTextureFilterTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopy();

        fc = dynamic_pointer_cast<ShaderTextureFilter>(tmpPtr);
    }

    return fc;
}

ShaderTextureFilter *ShaderTextureFilterBase::createEmptyLocal(BitVector bFlags)
{
    ShaderTextureFilter *returnValue;

    newPtr<ShaderTextureFilter>(returnValue, bFlags);

    returnValue->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

//! create an empty new instance of the class, do not copy the prototype
ShaderTextureFilter *ShaderTextureFilterBase::createEmpty(void)
{
    ShaderTextureFilter *returnValue;

    newPtr<ShaderTextureFilter>(returnValue, Thread::getCurrentLocalFlags());

    returnValue->_pFieldFlags->_bNamespaceMask &=
        ~Thread::getCurrentLocalFlags();

    return returnValue;
}

FieldContainerTransitPtr ShaderTextureFilterBase::shallowCopyLocal(
    BitVector bFlags) const
{
    ShaderTextureFilter *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const ShaderTextureFilter *>(this), bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

FieldContainerTransitPtr ShaderTextureFilterBase::shallowCopyDependent(
    BitVector bFlags) const
{
    ShaderTextureFilter *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const ShaderTextureFilter *>(this), ~bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask = bFlags;

    return returnValue;
}

FieldContainerTransitPtr ShaderTextureFilterBase::shallowCopy(void) const
{
    ShaderTextureFilter *tmpPtr;

    newPtr(tmpPtr,
           dynamic_cast<const ShaderTextureFilter *>(this),
           Thread::getCurrentLocalFlags());

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~Thread::getCurrentLocalFlags();

    FieldContainerTransitPtr returnValue(tmpPtr);

    return returnValue;
}



/*------------------------- constructors ----------------------------------*/

ShaderTextureFilterBase::ShaderTextureFilterBase(void) :
    Inherited(),
    _sfInternalParameters     (NULL),
    _sfInternalShader         (NULL),
    _sfInternalFBO            (NULL),
    _sfFBOSize                (Vec2f(-1,-1)),
    _sfShaderOutputSlot       (TextureFilterOutputSlot(OSG_TEXTURE_INTERNAL_FORMAT_COLOR,OSG_TEXTURE_DATA_TYPE_UINT,std::string())),
    _sfShaderInputSlot        (TextureFilterInputSlot(OSG_TEXTURE_INTERNAL_FORMAT_COLOR | OSG_TEXTURE_INTERNAL_FORMAT_DEPTH | OSG_TEXTURE_INTERNAL_FORMAT_STENCIL,OSG_TEXTURE_DATA_TYPE_UINT | OSG_TEXTURE_DATA_TYPE_INT | OSG_TEXTURE_DATA_TYPE_FLOAT,std::string()))
{
}

ShaderTextureFilterBase::ShaderTextureFilterBase(const ShaderTextureFilterBase &source) :
    Inherited(source),
    _sfInternalParameters     (NULL),
    _sfInternalShader         (NULL),
    _sfInternalFBO            (NULL),
    _sfFBOSize                (source._sfFBOSize                ),
    _sfShaderOutputSlot       (source._sfShaderOutputSlot       ),
    _sfShaderInputSlot        (source._sfShaderInputSlot        )
{
}


/*-------------------------- destructors ----------------------------------*/

ShaderTextureFilterBase::~ShaderTextureFilterBase(void)
{
}

void ShaderTextureFilterBase::onCreate(const ShaderTextureFilter *source)
{
    Inherited::onCreate(source);

    if(source != NULL)
    {
        ShaderTextureFilter *pThis = static_cast<ShaderTextureFilter *>(this);

        pThis->setInternalParameters(source->getInternalParameters());

        pThis->setInternalShader(source->getInternalShader());

        pThis->setInternalFBO(source->getInternalFBO());
    }
}

GetFieldHandlePtr ShaderTextureFilterBase::getHandleInternalParameters (void) const
{
    SFUnrecSimpleSHLVariableChunkPtr::GetHandlePtr returnValue(
        new  SFUnrecSimpleSHLVariableChunkPtr::GetHandle(
             &_sfInternalParameters,
             this->getType().getFieldDesc(InternalParametersFieldId),
             const_cast<ShaderTextureFilterBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ShaderTextureFilterBase::editHandleInternalParameters(void)
{
    SFUnrecSimpleSHLVariableChunkPtr::EditHandlePtr returnValue(
        new  SFUnrecSimpleSHLVariableChunkPtr::EditHandle(
             &_sfInternalParameters,
             this->getType().getFieldDesc(InternalParametersFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&ShaderTextureFilter::setInternalParameters,
                    static_cast<ShaderTextureFilter *>(this), _1));

    editSField(InternalParametersFieldMask);

    return returnValue;
}

GetFieldHandlePtr ShaderTextureFilterBase::getHandleInternalShader  (void) const
{
    SFUnrecSimpleSHLChunkPtr::GetHandlePtr returnValue(
        new  SFUnrecSimpleSHLChunkPtr::GetHandle(
             &_sfInternalShader,
             this->getType().getFieldDesc(InternalShaderFieldId),
             const_cast<ShaderTextureFilterBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ShaderTextureFilterBase::editHandleInternalShader (void)
{
    SFUnrecSimpleSHLChunkPtr::EditHandlePtr returnValue(
        new  SFUnrecSimpleSHLChunkPtr::EditHandle(
             &_sfInternalShader,
             this->getType().getFieldDesc(InternalShaderFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&ShaderTextureFilter::setInternalShader,
                    static_cast<ShaderTextureFilter *>(this), _1));

    editSField(InternalShaderFieldMask);

    return returnValue;
}

GetFieldHandlePtr ShaderTextureFilterBase::getHandleInternalFBO     (void) const
{
    SFUnrecFBOViewportPtr::GetHandlePtr returnValue(
        new  SFUnrecFBOViewportPtr::GetHandle(
             &_sfInternalFBO,
             this->getType().getFieldDesc(InternalFBOFieldId),
             const_cast<ShaderTextureFilterBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ShaderTextureFilterBase::editHandleInternalFBO    (void)
{
    SFUnrecFBOViewportPtr::EditHandlePtr returnValue(
        new  SFUnrecFBOViewportPtr::EditHandle(
             &_sfInternalFBO,
             this->getType().getFieldDesc(InternalFBOFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&ShaderTextureFilter::setInternalFBO,
                    static_cast<ShaderTextureFilter *>(this), _1));

    editSField(InternalFBOFieldMask);

    return returnValue;
}

GetFieldHandlePtr ShaderTextureFilterBase::getHandleFBOSize         (void) const
{
    SFVec2f::GetHandlePtr returnValue(
        new  SFVec2f::GetHandle(
             &_sfFBOSize,
             this->getType().getFieldDesc(FBOSizeFieldId),
             const_cast<ShaderTextureFilterBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ShaderTextureFilterBase::editHandleFBOSize        (void)
{
    SFVec2f::EditHandlePtr returnValue(
        new  SFVec2f::EditHandle(
             &_sfFBOSize,
             this->getType().getFieldDesc(FBOSizeFieldId),
             this));


    editSField(FBOSizeFieldMask);

    return returnValue;
}

GetFieldHandlePtr ShaderTextureFilterBase::getHandleShaderOutputSlot (void) const
{
    SFTextureFilterOutputSlot::GetHandlePtr returnValue(
        new  SFTextureFilterOutputSlot::GetHandle(
             &_sfShaderOutputSlot,
             this->getType().getFieldDesc(ShaderOutputSlotFieldId),
             const_cast<ShaderTextureFilterBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ShaderTextureFilterBase::editHandleShaderOutputSlot(void)
{
    SFTextureFilterOutputSlot::EditHandlePtr returnValue(
        new  SFTextureFilterOutputSlot::EditHandle(
             &_sfShaderOutputSlot,
             this->getType().getFieldDesc(ShaderOutputSlotFieldId),
             this));


    editSField(ShaderOutputSlotFieldMask);

    return returnValue;
}

GetFieldHandlePtr ShaderTextureFilterBase::getHandleShaderInputSlot (void) const
{
    SFTextureFilterInputSlot::GetHandlePtr returnValue(
        new  SFTextureFilterInputSlot::GetHandle(
             &_sfShaderInputSlot,
             this->getType().getFieldDesc(ShaderInputSlotFieldId),
             const_cast<ShaderTextureFilterBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ShaderTextureFilterBase::editHandleShaderInputSlot(void)
{
    SFTextureFilterInputSlot::EditHandlePtr returnValue(
        new  SFTextureFilterInputSlot::EditHandle(
             &_sfShaderInputSlot,
             this->getType().getFieldDesc(ShaderInputSlotFieldId),
             this));


    editSField(ShaderInputSlotFieldMask);

    return returnValue;
}



#ifdef OSG_MT_CPTR_ASPECT
void ShaderTextureFilterBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    ShaderTextureFilter *pThis = static_cast<ShaderTextureFilter *>(this);

    pThis->execSync(static_cast<ShaderTextureFilter *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif


#ifdef OSG_MT_CPTR_ASPECT
FieldContainer *ShaderTextureFilterBase::createAspectCopy(
    const FieldContainer *pRefAspect) const
{
    ShaderTextureFilter *returnValue;

    newAspectCopy(returnValue,
                  dynamic_cast<const ShaderTextureFilter *>(pRefAspect),
                  dynamic_cast<const ShaderTextureFilter *>(this));

    return returnValue;
}
#endif

void ShaderTextureFilterBase::resolveLinks(void)
{
    Inherited::resolveLinks();

    static_cast<ShaderTextureFilter *>(this)->setInternalParameters(NULL);

    static_cast<ShaderTextureFilter *>(this)->setInternalShader(NULL);

    static_cast<ShaderTextureFilter *>(this)->setInternalFBO(NULL);


}


OSG_END_NAMESPACE
