/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 * contact: David Kabala (djkabala@gmail.com)                                *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class ShaderTextureFilter
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#ifndef _OSGSHADERTEXTUREFILTERBASE_H_
#define _OSGSHADERTEXTUREFILTERBASE_H_
#ifdef __sgi
#pragma once
#endif


#include "OSGConfig.h"
#include "OSGContribImageProcessingDef.h"

//#include "OSGBaseTypes.h"

#include "OSGTextureFilter.h" // Parent

#include "OSGSimpleSHLVariableChunkFields.h" // InternalParameters type
#include "OSGSimpleSHLChunkFields.h"    // InternalShader type
#include "OSGFBOViewportFields.h"       // InternalFBO type
#include "OSGVecFields.h"               // FBOSize type
#include "OSGTextureFilterOutputSlotFields.h" // ShaderOutputSlot type
#include "OSGTextureFilterInputSlotFields.h" // ShaderInputSlot type

#include "OSGShaderTextureFilterFields.h"

OSG_BEGIN_NAMESPACE

class ShaderTextureFilter;

//! \brief ShaderTextureFilter Base Class.

class OSG_CONTRIBIMAGEPROCESSING_DLLMAPPING ShaderTextureFilterBase : public TextureFilter
{
  public:

    typedef TextureFilter Inherited;
    typedef TextureFilter ParentContainer;

    typedef Inherited::TypeObject TypeObject;
    typedef TypeObject::InitPhase InitPhase;

    OSG_GEN_INTERNALPTR(ShaderTextureFilter);
    
    

    /*==========================  PUBLIC  =================================*/

  public:

    enum
    {
        InternalParametersFieldId = Inherited::NextFieldId,
        InternalShaderFieldId = InternalParametersFieldId + 1,
        InternalFBOFieldId = InternalShaderFieldId + 1,
        FBOSizeFieldId = InternalFBOFieldId + 1,
        ShaderOutputSlotFieldId = FBOSizeFieldId + 1,
        ShaderInputSlotFieldId = ShaderOutputSlotFieldId + 1,
        NextFieldId = ShaderInputSlotFieldId + 1
    };

    static const OSG::BitVector InternalParametersFieldMask =
        (TypeTraits<BitVector>::One << InternalParametersFieldId);
    static const OSG::BitVector InternalShaderFieldMask =
        (TypeTraits<BitVector>::One << InternalShaderFieldId);
    static const OSG::BitVector InternalFBOFieldMask =
        (TypeTraits<BitVector>::One << InternalFBOFieldId);
    static const OSG::BitVector FBOSizeFieldMask =
        (TypeTraits<BitVector>::One << FBOSizeFieldId);
    static const OSG::BitVector ShaderOutputSlotFieldMask =
        (TypeTraits<BitVector>::One << ShaderOutputSlotFieldId);
    static const OSG::BitVector ShaderInputSlotFieldMask =
        (TypeTraits<BitVector>::One << ShaderInputSlotFieldId);
    static const OSG::BitVector NextFieldMask =
        (TypeTraits<BitVector>::One << NextFieldId);
        
    typedef SFUnrecSimpleSHLVariableChunkPtr SFInternalParametersType;
    typedef SFUnrecSimpleSHLChunkPtr SFInternalShaderType;
    typedef SFUnrecFBOViewportPtr SFInternalFBOType;
    typedef SFVec2f           SFFBOSizeType;
    typedef SFTextureFilterOutputSlot SFShaderOutputSlotType;
    typedef SFTextureFilterInputSlot SFShaderInputSlotType;

    /*---------------------------------------------------------------------*/
    /*! \name                    Class Get                                 */
    /*! \{                                                                 */

    static FieldContainerType &getClassType   (void);
    static UInt32              getClassTypeId (void);
    static UInt16              getClassGroupId(void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                FieldContainer Get                            */
    /*! \{                                                                 */

    virtual       FieldContainerType &getType         (void);
    virtual const FieldContainerType &getType         (void) const;

    virtual       UInt32              getContainerSize(void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Get                                 */
    /*! \{                                                                 */


                  SFVec2f             *editSFFBOSize        (void);
            const SFVec2f             *getSFFBOSize         (void) const;


                  Vec2f               &editFBOSize        (void);
            const Vec2f               &getFBOSize         (void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Set                                 */
    /*! \{                                                                 */

            void setFBOSize        (const Vec2f &value);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                Ptr Field Set                                 */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                Ptr MField Set                                */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Binary Access                              */
    /*! \{                                                                 */

    virtual UInt32 getBinSize (ConstFieldMaskArg  whichField);
    virtual void   copyToBin  (BinaryDataHandler &pMem,
                               ConstFieldMaskArg  whichField);
    virtual void   copyFromBin(BinaryDataHandler &pMem,
                               ConstFieldMaskArg  whichField);


    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Construction                               */
    /*! \{                                                                 */

    static  ShaderTextureFilterTransitPtr  create          (void);
    static  ShaderTextureFilter           *createEmpty     (void);

    static  ShaderTextureFilterTransitPtr  createLocal     (
                                               BitVector bFlags = FCLocal::All);

    static  ShaderTextureFilter            *createEmptyLocal(
                                              BitVector bFlags = FCLocal::All);

    static  ShaderTextureFilterTransitPtr  createDependent  (BitVector bFlags);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Copy                                   */
    /*! \{                                                                 */

    virtual FieldContainerTransitPtr shallowCopy     (void) const;
    virtual FieldContainerTransitPtr shallowCopyLocal(
                                       BitVector bFlags = FCLocal::All) const;
    virtual FieldContainerTransitPtr shallowCopyDependent(
                                                      BitVector bFlags) const;

    /*! \}                                                                 */
    /*=========================  PROTECTED  ===============================*/

  protected:

    static TypeObject _type;

    static       void   classDescInserter(TypeObject &oType);
    static const Char8 *getClassname     (void             );

    /*---------------------------------------------------------------------*/
    /*! \name                      Fields                                  */
    /*! \{                                                                 */

    SFUnrecSimpleSHLVariableChunkPtr _sfInternalParameters;
    SFUnrecSimpleSHLChunkPtr _sfInternalShader;
    SFUnrecFBOViewportPtr _sfInternalFBO;
    SFVec2f           _sfFBOSize;
    SFTextureFilterOutputSlot _sfShaderOutputSlot;
    SFTextureFilterInputSlot _sfShaderInputSlot;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Constructors                               */
    /*! \{                                                                 */

    ShaderTextureFilterBase(void);
    ShaderTextureFilterBase(const ShaderTextureFilterBase &source);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Destructors                                */
    /*! \{                                                                 */

    virtual ~ShaderTextureFilterBase(void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                     onCreate                                */
    /*! \{                                                                 */

    void onCreate(const ShaderTextureFilter *source = NULL);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Generic Field Access                      */
    /*! \{                                                                 */

    GetFieldHandlePtr  getHandleInternalParameters (void) const;
    EditFieldHandlePtr editHandleInternalParameters(void);
    GetFieldHandlePtr  getHandleInternalShader  (void) const;
    EditFieldHandlePtr editHandleInternalShader (void);
    GetFieldHandlePtr  getHandleInternalFBO     (void) const;
    EditFieldHandlePtr editHandleInternalFBO    (void);
    GetFieldHandlePtr  getHandleFBOSize         (void) const;
    EditFieldHandlePtr editHandleFBOSize        (void);
    GetFieldHandlePtr  getHandleShaderOutputSlot (void) const;
    EditFieldHandlePtr editHandleShaderOutputSlot(void);
    GetFieldHandlePtr  getHandleShaderInputSlot (void) const;
    EditFieldHandlePtr editHandleShaderInputSlot(void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Get                                 */
    /*! \{                                                                 */

            const SFUnrecSimpleSHLVariableChunkPtr *getSFInternalParameters (void) const;
                  SFUnrecSimpleSHLVariableChunkPtr *editSFInternalParameters(void);
            const SFUnrecSimpleSHLChunkPtr *getSFInternalShader  (void) const;
                  SFUnrecSimpleSHLChunkPtr *editSFInternalShader (void);
            const SFUnrecFBOViewportPtr *getSFInternalFBO     (void) const;
                  SFUnrecFBOViewportPtr *editSFInternalFBO    (void);

                  SFTextureFilterOutputSlot *editSFShaderOutputSlot(void);
            const SFTextureFilterOutputSlot *getSFShaderOutputSlot (void) const;

                  SFTextureFilterInputSlot *editSFShaderInputSlot(void);
            const SFTextureFilterInputSlot *getSFShaderInputSlot (void) const;


                  SimpleSHLVariableChunk * getInternalParameters(void) const;

                  SimpleSHLChunk * getInternalShader (void) const;

                  FBOViewport * getInternalFBO    (void) const;

                  TextureFilterOutputSlot &editShaderOutputSlot(void);
            const TextureFilterOutputSlot &getShaderOutputSlot (void) const;

                  TextureFilterInputSlot &editShaderInputSlot(void);
            const TextureFilterInputSlot &getShaderInputSlot (void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Set                                 */
    /*! \{                                                                 */

            void setInternalParameters(SimpleSHLVariableChunk * const value);
            void setInternalShader (SimpleSHLChunk * const value);
            void setInternalFBO    (FBOViewport * const value);
            void setShaderOutputSlot(const TextureFilterOutputSlot &value);
            void setShaderInputSlot(const TextureFilterInputSlot &value);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                Ptr MField Set                                */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

#ifdef OSG_MT_CPTR_ASPECT
    virtual void execSyncV(      FieldContainer    &oFrom,
                                 ConstFieldMaskArg  whichField,
                                 AspectOffsetStore &oOffsets,
                                 ConstFieldMaskArg  syncMode  ,
                           const UInt32             uiSyncInfo);

            void execSync (      ShaderTextureFilterBase *pFrom,
                                 ConstFieldMaskArg  whichField,
                                 AspectOffsetStore &oOffsets,
                                 ConstFieldMaskArg  syncMode  ,
                           const UInt32             uiSyncInfo);
#endif

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Edit                                   */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                     Aspect Create                            */
    /*! \{                                                                 */

#ifdef OSG_MT_CPTR_ASPECT
    virtual FieldContainer *createAspectCopy(
                                    const FieldContainer *pRefAspect) const;
#endif

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Edit                                   */
    /*! \{                                                                 */
    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

    virtual void resolveLinks(void);

    /*! \}                                                                 */
    /*==========================  PRIVATE  ================================*/

  private:
    /*---------------------------------------------------------------------*/

    // prohibit default functions (move to 'public' if you need one)
    void operator =(const ShaderTextureFilterBase &source);
};

typedef ShaderTextureFilterBase *ShaderTextureFilterBaseP;

OSG_END_NAMESPACE

#endif /* _OSGSHADERTEXTUREFILTERBASE_H_ */
