/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 * contact: David Kabala (djkabala@gmail.com)                                *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class ShaderTextureFilter!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


OSG_BEGIN_NAMESPACE


//! access the type of the class
inline
OSG::FieldContainerType &ShaderTextureFilterBase::getClassType(void)
{
    return _type;
}

//! access the numerical type of the class
inline
OSG::UInt32 ShaderTextureFilterBase::getClassTypeId(void)
{
    return _type.getId();
}

inline
OSG::UInt16 ShaderTextureFilterBase::getClassGroupId(void)
{
    return _type.getGroupId();
}

/*------------------------------ get -----------------------------------*/


//! Get the value of the ShaderTextureFilter::_sfInternalParameters field.
inline
SimpleSHLVariableChunk * ShaderTextureFilterBase::getInternalParameters(void) const
{
    return _sfInternalParameters.getValue();
}

//! Set the value of the ShaderTextureFilter::_sfInternalParameters field.
inline
void ShaderTextureFilterBase::setInternalParameters(SimpleSHLVariableChunk * const value)
{
    editSField(InternalParametersFieldMask);

    _sfInternalParameters.setValue(value);
}

//! Get the value of the ShaderTextureFilter::_sfInternalShader field.
inline
SimpleSHLChunk * ShaderTextureFilterBase::getInternalShader(void) const
{
    return _sfInternalShader.getValue();
}

//! Set the value of the ShaderTextureFilter::_sfInternalShader field.
inline
void ShaderTextureFilterBase::setInternalShader(SimpleSHLChunk * const value)
{
    editSField(InternalShaderFieldMask);

    _sfInternalShader.setValue(value);
}

//! Get the value of the ShaderTextureFilter::_sfInternalFBO field.
inline
FBOViewport * ShaderTextureFilterBase::getInternalFBO(void) const
{
    return _sfInternalFBO.getValue();
}

//! Set the value of the ShaderTextureFilter::_sfInternalFBO field.
inline
void ShaderTextureFilterBase::setInternalFBO(FBOViewport * const value)
{
    editSField(InternalFBOFieldMask);

    _sfInternalFBO.setValue(value);
}
//! Get the value of the ShaderTextureFilter::_sfFBOSize field.

inline
Vec2f &ShaderTextureFilterBase::editFBOSize(void)
{
    editSField(FBOSizeFieldMask);

    return _sfFBOSize.getValue();
}

//! Get the value of the ShaderTextureFilter::_sfFBOSize field.
inline
const Vec2f &ShaderTextureFilterBase::getFBOSize(void) const
{
    return _sfFBOSize.getValue();
}

//! Set the value of the ShaderTextureFilter::_sfFBOSize field.
inline
void ShaderTextureFilterBase::setFBOSize(const Vec2f &value)
{
    editSField(FBOSizeFieldMask);

    _sfFBOSize.setValue(value);
}
//! Get the value of the ShaderTextureFilter::_sfShaderOutputSlot field.

inline
TextureFilterOutputSlot &ShaderTextureFilterBase::editShaderOutputSlot(void)
{
    editSField(ShaderOutputSlotFieldMask);

    return _sfShaderOutputSlot.getValue();
}

//! Get the value of the ShaderTextureFilter::_sfShaderOutputSlot field.
inline
const TextureFilterOutputSlot &ShaderTextureFilterBase::getShaderOutputSlot(void) const
{
    return _sfShaderOutputSlot.getValue();
}

//! Set the value of the ShaderTextureFilter::_sfShaderOutputSlot field.
inline
void ShaderTextureFilterBase::setShaderOutputSlot(const TextureFilterOutputSlot &value)
{
    editSField(ShaderOutputSlotFieldMask);

    _sfShaderOutputSlot.setValue(value);
}
//! Get the value of the ShaderTextureFilter::_sfShaderInputSlot field.

inline
TextureFilterInputSlot &ShaderTextureFilterBase::editShaderInputSlot(void)
{
    editSField(ShaderInputSlotFieldMask);

    return _sfShaderInputSlot.getValue();
}

//! Get the value of the ShaderTextureFilter::_sfShaderInputSlot field.
inline
const TextureFilterInputSlot &ShaderTextureFilterBase::getShaderInputSlot(void) const
{
    return _sfShaderInputSlot.getValue();
}

//! Set the value of the ShaderTextureFilter::_sfShaderInputSlot field.
inline
void ShaderTextureFilterBase::setShaderInputSlot(const TextureFilterInputSlot &value)
{
    editSField(ShaderInputSlotFieldMask);

    _sfShaderInputSlot.setValue(value);
}


#ifdef OSG_MT_CPTR_ASPECT
inline
void ShaderTextureFilterBase::execSync (      ShaderTextureFilterBase *pFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    Inherited::execSync(pFrom, whichField, oOffsets, syncMode, uiSyncInfo);

    if(FieldBits::NoField != (InternalParametersFieldMask & whichField))
        _sfInternalParameters.syncWith(pFrom->_sfInternalParameters);

    if(FieldBits::NoField != (InternalShaderFieldMask & whichField))
        _sfInternalShader.syncWith(pFrom->_sfInternalShader);

    if(FieldBits::NoField != (InternalFBOFieldMask & whichField))
        _sfInternalFBO.syncWith(pFrom->_sfInternalFBO);

    if(FieldBits::NoField != (FBOSizeFieldMask & whichField))
        _sfFBOSize.syncWith(pFrom->_sfFBOSize);

    if(FieldBits::NoField != (ShaderOutputSlotFieldMask & whichField))
        _sfShaderOutputSlot.syncWith(pFrom->_sfShaderOutputSlot);

    if(FieldBits::NoField != (ShaderInputSlotFieldMask & whichField))
        _sfShaderInputSlot.syncWith(pFrom->_sfShaderInputSlot);
}
#endif


inline
const Char8 *ShaderTextureFilterBase::getClassname(void)
{
    return "ShaderTextureFilter";
}
OSG_GEN_CONTAINERPTR(ShaderTextureFilter);

OSG_END_NAMESPACE

