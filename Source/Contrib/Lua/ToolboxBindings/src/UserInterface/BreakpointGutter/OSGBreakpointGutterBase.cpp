/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 * contact: David Kabala (djkabala@gmail.com)                                *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class BreakpointGutter!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>
#include <boost/assign/list_of.hpp>

#include "OSGConfig.h"




#include "OSGBreakpointGutterBase.h"
#include "OSGBreakpointGutter.h"

#include <boost/bind.hpp>

#ifdef WIN32 // turn off 'this' : used in base member initializer list warning
#pragma warning(disable:4355)
#endif

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::BreakpointGutter
    TextArea Gutter that connects with a BreakpointManager to display and modify local breakpoints
    in a code file.
 */

/***************************************************************************\
 *                        Field Documentation                              *
\***************************************************************************/

/*! \var Button          BreakpointGutterBase::_mfFileBreakpointPrototype
    Prototype Button used when creating FileBreakpoints.
*/

/*! \var Button          BreakpointGutterBase::_mfConditionalBreakpointPrototype
    Prototype Button used when creating ConditionalBreakpoints.
*/

/*! \var Button          BreakpointGutterBase::_mfCountBreakpointPrototype
    Prototype Button used when creating CountBreakpoints.
*/


/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldTraits<BreakpointGutter *>::_type("BreakpointGutterPtr", "TextAreaGutterPtr");
#endif

OSG_FIELDTRAITS_GETTYPE(BreakpointGutter *)

OSG_EXPORT_PTR_SFIELD_FULL(PointerSField,
                           BreakpointGutter *,
                           0);

OSG_EXPORT_PTR_MFIELD_FULL(PointerMField,
                           BreakpointGutter *,
                           0);

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

void BreakpointGutterBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new MFButton::Description(
        MFButton::getClassType(),
        "FileBreakpointPrototype",
        "Prototype Button used when creating FileBreakpoints.\n",
        FileBreakpointPrototypeFieldId, FileBreakpointPrototypeFieldMask,
        false,
        (Field::MFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&BreakpointGutter::editHandleFileBreakpointPrototype),
        static_cast<FieldGetMethodSig >(&BreakpointGutter::getHandleFileBreakpointPrototype));

    oType.addInitialDesc(pDesc);

    pDesc = new MFButton::Description(
        MFButton::getClassType(),
        "ConditionalBreakpointPrototype",
        "Prototype Button used when creating ConditionalBreakpoints.\n",
        ConditionalBreakpointPrototypeFieldId, ConditionalBreakpointPrototypeFieldMask,
        false,
        (Field::MFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&BreakpointGutter::editHandleConditionalBreakpointPrototype),
        static_cast<FieldGetMethodSig >(&BreakpointGutter::getHandleConditionalBreakpointPrototype));

    oType.addInitialDesc(pDesc);

    pDesc = new MFButton::Description(
        MFButton::getClassType(),
        "CountBreakpointPrototype",
        "Prototype Button used when creating CountBreakpoints.\n",
        CountBreakpointPrototypeFieldId, CountBreakpointPrototypeFieldMask,
        false,
        (Field::MFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&BreakpointGutter::editHandleCountBreakpointPrototype),
        static_cast<FieldGetMethodSig >(&BreakpointGutter::getHandleCountBreakpointPrototype));

    oType.addInitialDesc(pDesc);
}


BreakpointGutterBase::TypeObject BreakpointGutterBase::_type(
    BreakpointGutterBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    0,
    reinterpret_cast<PrototypeCreateF>(&BreakpointGutterBase::createEmptyLocal),
    BreakpointGutter::initMethod,
    BreakpointGutter::exitMethod,
    reinterpret_cast<InitalInsertDescFunc>(&BreakpointGutter::classDescInserter),
    false,
    0,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "\tname=\"BreakpointGutter\"\n"
    "\tparent=\"TextAreaGutter\"\n"
    "\tlibrary=\"ContribLuaToolbox\"\n"
    "\tpointerfieldtypes=\"both\"\n"
    "\tstructure=\"concrete\"\n"
    "\tsystemcomponent=\"true\"\n"
    "\tparentsystemcomponent=\"true\"\n"
    "\tdecoratable=\"false\"\n"
    "\tuseLocalIncludes=\"true\"\n"
    "    isNodeCore=\"false\"\n"
    "\tparentProducer=\"Component\"\n"
    "    authors=\"David Kabala (djkabala@gmail.com)\"\n"
    "    >\n"
    "    TextArea Gutter that connects with a BreakpointManager to display and modify local breakpoints\n"
    "    in a code file.\n"
    "    <Field\n"
    "        name=\"FileBreakpointPrototype\"\n"
    "        type=\"Button\"\n"
    "        category=\"data\"\n"
    "        cardinality=\"multi\"\n"
    "        visibility=\"external\"\n"
    "        defaultValue=\"NULL\"\n"
    "        access=\"public\"\n"
    "        >\n"
    "        Prototype Button used when creating FileBreakpoints.\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"ConditionalBreakpointPrototype\"\n"
    "        type=\"Button\"\n"
    "        category=\"data\"\n"
    "        cardinality=\"multi\"\n"
    "        visibility=\"external\"\n"
    "        defaultValue=\"NULL\"\n"
    "        access=\"public\"\n"
    "        >\n"
    "        Prototype Button used when creating ConditionalBreakpoints.\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"CountBreakpointPrototype\"\n"
    "        type=\"Button\"\n"
    "        category=\"data\"\n"
    "        cardinality=\"multi\"\n"
    "        visibility=\"external\"\n"
    "        defaultValue=\"NULL\"\n"
    "        access=\"public\"\n"
    "        >\n"
    "        Prototype Button used when creating CountBreakpoints.\n"
    "    </Field>\n"
    "</FieldContainer>\n",
    "TextArea Gutter that connects with a BreakpointManager to display and modify local breakpoints\n"
    "in a code file.\n"
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &BreakpointGutterBase::getType(void)
{
    return _type;
}

const FieldContainerType &BreakpointGutterBase::getType(void) const
{
    return _type;
}

UInt32 BreakpointGutterBase::getContainerSize(void) const
{
    return sizeof(BreakpointGutter);
}

/*------------------------- decorator get ------------------------------*/


MFButton *BreakpointGutterBase::editMFFileBreakpointPrototype(void)
{
    editMField(FileBreakpointPrototypeFieldMask, _mfFileBreakpointPrototype);

    return &_mfFileBreakpointPrototype;
}

const MFButton *BreakpointGutterBase::getMFFileBreakpointPrototype(void) const
{
    return &_mfFileBreakpointPrototype;
}


MFButton *BreakpointGutterBase::editMFConditionalBreakpointPrototype(void)
{
    editMField(ConditionalBreakpointPrototypeFieldMask, _mfConditionalBreakpointPrototype);

    return &_mfConditionalBreakpointPrototype;
}

const MFButton *BreakpointGutterBase::getMFConditionalBreakpointPrototype(void) const
{
    return &_mfConditionalBreakpointPrototype;
}


MFButton *BreakpointGutterBase::editMFCountBreakpointPrototype(void)
{
    editMField(CountBreakpointPrototypeFieldMask, _mfCountBreakpointPrototype);

    return &_mfCountBreakpointPrototype;
}

const MFButton *BreakpointGutterBase::getMFCountBreakpointPrototype(void) const
{
    return &_mfCountBreakpointPrototype;
}






/*------------------------------ access -----------------------------------*/

UInt32 BreakpointGutterBase::getBinSize(ConstFieldMaskArg whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (FileBreakpointPrototypeFieldMask & whichField))
    {
        returnValue += _mfFileBreakpointPrototype.getBinSize();
    }
    if(FieldBits::NoField != (ConditionalBreakpointPrototypeFieldMask & whichField))
    {
        returnValue += _mfConditionalBreakpointPrototype.getBinSize();
    }
    if(FieldBits::NoField != (CountBreakpointPrototypeFieldMask & whichField))
    {
        returnValue += _mfCountBreakpointPrototype.getBinSize();
    }

    return returnValue;
}

void BreakpointGutterBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (FileBreakpointPrototypeFieldMask & whichField))
    {
        _mfFileBreakpointPrototype.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ConditionalBreakpointPrototypeFieldMask & whichField))
    {
        _mfConditionalBreakpointPrototype.copyToBin(pMem);
    }
    if(FieldBits::NoField != (CountBreakpointPrototypeFieldMask & whichField))
    {
        _mfCountBreakpointPrototype.copyToBin(pMem);
    }
}

void BreakpointGutterBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (FileBreakpointPrototypeFieldMask & whichField))
    {
        editMField(FileBreakpointPrototypeFieldMask, _mfFileBreakpointPrototype);
        _mfFileBreakpointPrototype.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ConditionalBreakpointPrototypeFieldMask & whichField))
    {
        editMField(ConditionalBreakpointPrototypeFieldMask, _mfConditionalBreakpointPrototype);
        _mfConditionalBreakpointPrototype.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (CountBreakpointPrototypeFieldMask & whichField))
    {
        editMField(CountBreakpointPrototypeFieldMask, _mfCountBreakpointPrototype);
        _mfCountBreakpointPrototype.copyFromBin(pMem);
    }
}

//! create a new instance of the class
BreakpointGutterTransitPtr BreakpointGutterBase::createLocal(BitVector bFlags)
{
    BreakpointGutterTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyLocal(bFlags);

        fc = dynamic_pointer_cast<BreakpointGutter>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class, copy the container flags
BreakpointGutterTransitPtr BreakpointGutterBase::createDependent(BitVector bFlags)
{
    BreakpointGutterTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyDependent(bFlags);

        fc = dynamic_pointer_cast<BreakpointGutter>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class
BreakpointGutterTransitPtr BreakpointGutterBase::create(void)
{
    BreakpointGutterTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopy();

        fc = dynamic_pointer_cast<BreakpointGutter>(tmpPtr);
    }

    return fc;
}

BreakpointGutter *BreakpointGutterBase::createEmptyLocal(BitVector bFlags)
{
    BreakpointGutter *returnValue;

    newPtr<BreakpointGutter>(returnValue, bFlags);

    returnValue->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

//! create an empty new instance of the class, do not copy the prototype
BreakpointGutter *BreakpointGutterBase::createEmpty(void)
{
    BreakpointGutter *returnValue;

    newPtr<BreakpointGutter>(returnValue, Thread::getCurrentLocalFlags());

    returnValue->_pFieldFlags->_bNamespaceMask &=
        ~Thread::getCurrentLocalFlags();

    return returnValue;
}

FieldContainerTransitPtr BreakpointGutterBase::shallowCopyLocal(
    BitVector bFlags) const
{
    BreakpointGutter *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const BreakpointGutter *>(this), bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

FieldContainerTransitPtr BreakpointGutterBase::shallowCopyDependent(
    BitVector bFlags) const
{
    BreakpointGutter *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const BreakpointGutter *>(this), ~bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask = bFlags;

    return returnValue;
}

FieldContainerTransitPtr BreakpointGutterBase::shallowCopy(void) const
{
    BreakpointGutter *tmpPtr;

    newPtr(tmpPtr,
           dynamic_cast<const BreakpointGutter *>(this),
           Thread::getCurrentLocalFlags());

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~Thread::getCurrentLocalFlags();

    FieldContainerTransitPtr returnValue(tmpPtr);

    return returnValue;
}



/*------------------------- constructors ----------------------------------*/

BreakpointGutterBase::BreakpointGutterBase(void) :
    Inherited(),
    _mfFileBreakpointPrototype(Button(NULL)),
    _mfConditionalBreakpointPrototype(Button(NULL)),
    _mfCountBreakpointPrototype(Button(NULL))
{
}

BreakpointGutterBase::BreakpointGutterBase(const BreakpointGutterBase &source) :
    Inherited(source),
    _mfFileBreakpointPrototype(source._mfFileBreakpointPrototype),
    _mfConditionalBreakpointPrototype(source._mfConditionalBreakpointPrototype),
    _mfCountBreakpointPrototype(source._mfCountBreakpointPrototype)
{
}


/*-------------------------- destructors ----------------------------------*/

BreakpointGutterBase::~BreakpointGutterBase(void)
{
}


GetFieldHandlePtr BreakpointGutterBase::getHandleFileBreakpointPrototype (void) const
{
    MFButton::GetHandlePtr returnValue(
        new  MFButton::GetHandle(
             &_mfFileBreakpointPrototype,
             this->getType().getFieldDesc(FileBreakpointPrototypeFieldId),
             const_cast<BreakpointGutterBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr BreakpointGutterBase::editHandleFileBreakpointPrototype(void)
{
    MFButton::EditHandlePtr returnValue(
        new  MFButton::EditHandle(
             &_mfFileBreakpointPrototype,
             this->getType().getFieldDesc(FileBreakpointPrototypeFieldId),
             this));


    editMField(FileBreakpointPrototypeFieldMask, _mfFileBreakpointPrototype);

    return returnValue;
}

GetFieldHandlePtr BreakpointGutterBase::getHandleConditionalBreakpointPrototype (void) const
{
    MFButton::GetHandlePtr returnValue(
        new  MFButton::GetHandle(
             &_mfConditionalBreakpointPrototype,
             this->getType().getFieldDesc(ConditionalBreakpointPrototypeFieldId),
             const_cast<BreakpointGutterBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr BreakpointGutterBase::editHandleConditionalBreakpointPrototype(void)
{
    MFButton::EditHandlePtr returnValue(
        new  MFButton::EditHandle(
             &_mfConditionalBreakpointPrototype,
             this->getType().getFieldDesc(ConditionalBreakpointPrototypeFieldId),
             this));


    editMField(ConditionalBreakpointPrototypeFieldMask, _mfConditionalBreakpointPrototype);

    return returnValue;
}

GetFieldHandlePtr BreakpointGutterBase::getHandleCountBreakpointPrototype (void) const
{
    MFButton::GetHandlePtr returnValue(
        new  MFButton::GetHandle(
             &_mfCountBreakpointPrototype,
             this->getType().getFieldDesc(CountBreakpointPrototypeFieldId),
             const_cast<BreakpointGutterBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr BreakpointGutterBase::editHandleCountBreakpointPrototype(void)
{
    MFButton::EditHandlePtr returnValue(
        new  MFButton::EditHandle(
             &_mfCountBreakpointPrototype,
             this->getType().getFieldDesc(CountBreakpointPrototypeFieldId),
             this));


    editMField(CountBreakpointPrototypeFieldMask, _mfCountBreakpointPrototype);

    return returnValue;
}



#ifdef OSG_MT_CPTR_ASPECT
void BreakpointGutterBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    BreakpointGutter *pThis = static_cast<BreakpointGutter *>(this);

    pThis->execSync(static_cast<BreakpointGutter *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif


#ifdef OSG_MT_CPTR_ASPECT
FieldContainer *BreakpointGutterBase::createAspectCopy(
    const FieldContainer *pRefAspect) const
{
    BreakpointGutter *returnValue;

    newAspectCopy(returnValue,
                  dynamic_cast<const BreakpointGutter *>(pRefAspect),
                  dynamic_cast<const BreakpointGutter *>(this));

    return returnValue;
}
#endif

void BreakpointGutterBase::resolveLinks(void)
{
    Inherited::resolveLinks();

#ifdef OSG_MT_CPTR_ASPECT
    AspectOffsetStore oOffsets;

    _pAspectStore->fillOffsetArray(oOffsets, this);
#endif

#ifdef OSG_MT_CPTR_ASPECT
    _mfFileBreakpointPrototype.terminateShare(Thread::getCurrentAspect(),
                                      oOffsets);
#endif
#ifdef OSG_MT_CPTR_ASPECT
    _mfConditionalBreakpointPrototype.terminateShare(Thread::getCurrentAspect(),
                                      oOffsets);
#endif
#ifdef OSG_MT_CPTR_ASPECT
    _mfCountBreakpointPrototype.terminateShare(Thread::getCurrentAspect(),
                                      oOffsets);
#endif
}


OSG_END_NAMESPACE
