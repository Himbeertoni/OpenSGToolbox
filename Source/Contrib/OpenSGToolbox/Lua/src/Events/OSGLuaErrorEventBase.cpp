/*---------------------------------------------------------------------------*\
 *                     OpenSG ToolBox UserInterface                          *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                         www.vrac.iastate.edu                              *
 *                                                                           *
 *                          Authors: David Kabala                            *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class LuaErrorEvent!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#define OSG_COMPILELUAERROREVENTINST

#include <stdlib.h>
#include <stdio.h>

#include <OpenSG/OSGConfig.h>

#include "OSGLuaErrorEventBase.h"
#include "OSGLuaErrorEvent.h"


OSG_BEGIN_NAMESPACE

const OSG::BitVector  LuaErrorEventBase::LuaStateVoidPFieldMask = 
    (TypeTraits<BitVector>::One << LuaErrorEventBase::LuaStateVoidPFieldId);

const OSG::BitVector  LuaErrorEventBase::StatusFieldMask = 
    (TypeTraits<BitVector>::One << LuaErrorEventBase::StatusFieldId);

const OSG::BitVector  LuaErrorEventBase::StackTraceFieldMask = 
    (TypeTraits<BitVector>::One << LuaErrorEventBase::StackTraceFieldId);

const OSG::BitVector  LuaErrorEventBase::StackTraceEnabledFieldMask = 
    (TypeTraits<BitVector>::One << LuaErrorEventBase::StackTraceEnabledFieldId);

const OSG::BitVector LuaErrorEventBase::MTInfluenceMask = 
    (Inherited::MTInfluenceMask) | 
    (static_cast<BitVector>(0x0) << Inherited::NextFieldId); 


// Field descriptions

/*! \var VoidP           LuaErrorEventBase::_sfLuaStateVoidP
    
*/
/*! \var Int32           LuaErrorEventBase::_sfStatus
    
*/
/*! \var std::string     LuaErrorEventBase::_mfStackTrace
    
*/
/*! \var bool            LuaErrorEventBase::_sfStackTraceEnabled
    
*/

//! LuaErrorEvent description

FieldDescription *LuaErrorEventBase::_desc[] = 
{
    new FieldDescription(SFVoidP::getClassType(), 
                     "LuaStateVoidP", 
                     LuaStateVoidPFieldId, LuaStateVoidPFieldMask,
                     true,
                     reinterpret_cast<FieldAccessMethod>(&LuaErrorEventBase::editSFLuaStateVoidP)),
    new FieldDescription(SFInt32::getClassType(), 
                     "Status", 
                     StatusFieldId, StatusFieldMask,
                     true,
                     reinterpret_cast<FieldAccessMethod>(&LuaErrorEventBase::editSFStatus)),
    new FieldDescription(MFString::getClassType(), 
                     "StackTrace", 
                     StackTraceFieldId, StackTraceFieldMask,
                     true,
                     reinterpret_cast<FieldAccessMethod>(&LuaErrorEventBase::editMFStackTrace)),
    new FieldDescription(SFBool::getClassType(), 
                     "StackTraceEnabled", 
                     StackTraceEnabledFieldId, StackTraceEnabledFieldMask,
                     true,
                     reinterpret_cast<FieldAccessMethod>(&LuaErrorEventBase::editSFStackTraceEnabled))
};


FieldContainerType LuaErrorEventBase::_type(
    "LuaErrorEvent",
    "Event",
    NULL,
    reinterpret_cast<PrototypeCreateF>(&LuaErrorEventBase::createEmpty),
    LuaErrorEvent::initMethod,
    _desc,
    sizeof(_desc));

//OSG_FIELD_CONTAINER_DEF(LuaErrorEventBase, LuaErrorEventPtr)

/*------------------------------ get -----------------------------------*/

FieldContainerType &LuaErrorEventBase::getType(void) 
{
    return _type; 
} 

const FieldContainerType &LuaErrorEventBase::getType(void) const 
{
    return _type;
} 


FieldContainerPtr LuaErrorEventBase::shallowCopy(void) const 
{ 
    LuaErrorEventPtr returnValue; 

    newPtr(returnValue, dynamic_cast<const LuaErrorEvent *>(this)); 

    return returnValue; 
}

UInt32 LuaErrorEventBase::getContainerSize(void) const 
{ 
    return sizeof(LuaErrorEvent); 
}


#if !defined(OSG_FIXED_MFIELDSYNC)
void LuaErrorEventBase::executeSync(      FieldContainer &other,
                                    const BitVector      &whichField)
{
    this->executeSyncImpl(static_cast<LuaErrorEventBase *>(&other),
                          whichField);
}
#else
void LuaErrorEventBase::executeSync(      FieldContainer &other,
                                    const BitVector      &whichField,                                    const SyncInfo       &sInfo     )
{
    this->executeSyncImpl((LuaErrorEventBase *) &other, whichField, sInfo);
}
void LuaErrorEventBase::execBeginEdit(const BitVector &whichField, 
                                            UInt32     uiAspect,
                                            UInt32     uiContainerSize) 
{
    this->execBeginEditImpl(whichField, uiAspect, uiContainerSize);
}

void LuaErrorEventBase::onDestroyAspect(UInt32 uiId, UInt32 uiAspect)
{
    Inherited::onDestroyAspect(uiId, uiAspect);

    _mfStackTrace.terminateShare(uiAspect, this->getContainerSize());
}
#endif

/*------------------------- constructors ----------------------------------*/

#ifdef OSG_WIN32_ICL
#pragma warning (disable : 383)
#endif

LuaErrorEventBase::LuaErrorEventBase(void) :
    _sfLuaStateVoidP          (NULL), 
    _sfStatus                 (Int32(0)), 
    _mfStackTrace             (), 
    _sfStackTraceEnabled      (bool(false)), 
    Inherited() 
{
}

#ifdef OSG_WIN32_ICL
#pragma warning (default : 383)
#endif

LuaErrorEventBase::LuaErrorEventBase(const LuaErrorEventBase &source) :
    _sfLuaStateVoidP          (source._sfLuaStateVoidP          ), 
    _sfStatus                 (source._sfStatus                 ), 
    _mfStackTrace             (source._mfStackTrace             ), 
    _sfStackTraceEnabled      (source._sfStackTraceEnabled      ), 
    Inherited                 (source)
{
}

/*-------------------------- destructors ----------------------------------*/

LuaErrorEventBase::~LuaErrorEventBase(void)
{
}

/*------------------------------ access -----------------------------------*/

UInt32 LuaErrorEventBase::getBinSize(const BitVector &whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (LuaStateVoidPFieldMask & whichField))
    {
        returnValue += _sfLuaStateVoidP.getBinSize();
    }

    if(FieldBits::NoField != (StatusFieldMask & whichField))
    {
        returnValue += _sfStatus.getBinSize();
    }

    if(FieldBits::NoField != (StackTraceFieldMask & whichField))
    {
        returnValue += _mfStackTrace.getBinSize();
    }

    if(FieldBits::NoField != (StackTraceEnabledFieldMask & whichField))
    {
        returnValue += _sfStackTraceEnabled.getBinSize();
    }


    return returnValue;
}

void LuaErrorEventBase::copyToBin(      BinaryDataHandler &pMem,
                                  const BitVector         &whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (LuaStateVoidPFieldMask & whichField))
    {
        _sfLuaStateVoidP.copyToBin(pMem);
    }

    if(FieldBits::NoField != (StatusFieldMask & whichField))
    {
        _sfStatus.copyToBin(pMem);
    }

    if(FieldBits::NoField != (StackTraceFieldMask & whichField))
    {
        _mfStackTrace.copyToBin(pMem);
    }

    if(FieldBits::NoField != (StackTraceEnabledFieldMask & whichField))
    {
        _sfStackTraceEnabled.copyToBin(pMem);
    }


}

void LuaErrorEventBase::copyFromBin(      BinaryDataHandler &pMem,
                                    const BitVector    &whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (LuaStateVoidPFieldMask & whichField))
    {
        _sfLuaStateVoidP.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (StatusFieldMask & whichField))
    {
        _sfStatus.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (StackTraceFieldMask & whichField))
    {
        _mfStackTrace.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (StackTraceEnabledFieldMask & whichField))
    {
        _sfStackTraceEnabled.copyFromBin(pMem);
    }


}

#if !defined(OSG_FIXED_MFIELDSYNC)
void LuaErrorEventBase::executeSyncImpl(      LuaErrorEventBase *pOther,
                                        const BitVector         &whichField)
{

    Inherited::executeSyncImpl(pOther, whichField);

    if(FieldBits::NoField != (LuaStateVoidPFieldMask & whichField))
        _sfLuaStateVoidP.syncWith(pOther->_sfLuaStateVoidP);

    if(FieldBits::NoField != (StatusFieldMask & whichField))
        _sfStatus.syncWith(pOther->_sfStatus);

    if(FieldBits::NoField != (StackTraceFieldMask & whichField))
        _mfStackTrace.syncWith(pOther->_mfStackTrace);

    if(FieldBits::NoField != (StackTraceEnabledFieldMask & whichField))
        _sfStackTraceEnabled.syncWith(pOther->_sfStackTraceEnabled);


}
#else
void LuaErrorEventBase::executeSyncImpl(      LuaErrorEventBase *pOther,
                                        const BitVector         &whichField,
                                        const SyncInfo          &sInfo      )
{

    Inherited::executeSyncImpl(pOther, whichField, sInfo);

    if(FieldBits::NoField != (LuaStateVoidPFieldMask & whichField))
        _sfLuaStateVoidP.syncWith(pOther->_sfLuaStateVoidP);

    if(FieldBits::NoField != (StatusFieldMask & whichField))
        _sfStatus.syncWith(pOther->_sfStatus);

    if(FieldBits::NoField != (StackTraceEnabledFieldMask & whichField))
        _sfStackTraceEnabled.syncWith(pOther->_sfStackTraceEnabled);


    if(FieldBits::NoField != (StackTraceFieldMask & whichField))
        _mfStackTrace.syncWith(pOther->_mfStackTrace, sInfo);


}

void LuaErrorEventBase::execBeginEditImpl (const BitVector &whichField, 
                                                 UInt32     uiAspect,
                                                 UInt32     uiContainerSize)
{
    Inherited::execBeginEditImpl(whichField, uiAspect, uiContainerSize);

    if(FieldBits::NoField != (StackTraceFieldMask & whichField))
        _mfStackTrace.beginEdit(uiAspect, uiContainerSize);

}
#endif



OSG_END_NAMESPACE

#include <OpenSG/OSGSFieldTypeDef.inl>

OSG_BEGIN_NAMESPACE

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldDataTraits<LuaErrorEventPtr>::_type("LuaErrorEventPtr", "EventPtr");
#endif

OSG_DLLEXPORT_SFIELD_DEF1(LuaErrorEventPtr, OSG_LUALIB_DLLTMPLMAPPING);


OSG_END_NAMESPACE

