/*---------------------------------------------------------------------------*\
 *                     OpenSG ToolBox UserInterface                          *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                         www.vrac.iastate.edu                              *
 *                                                                           *
 *                          Authors: David Kabala                            *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class LuaErrorEvent
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#ifndef _OSGLUAERROREVENTBASE_H_
#define _OSGLUAERROREVENTBASE_H_
#ifdef __sgi
#pragma once
#endif


#include <OpenSG/OSGConfig.h>
#include "OSGLuaDef.h"

#include <OpenSG/OSGBaseTypes.h>
#include <OpenSG/OSGRefPtr.h>
#include <OpenSG/OSGCoredNodePtr.h>

#include <OpenSG/Toolbox/OSGEvent.h> // Parent

#include <OpenSG/OSGSFSysTypes.h> // LuaStateVoidP type
#include <OpenSG/OSGInt32Fields.h> // Status type
#include <OpenSG/OSGStringFields.h> // StackTrace type
#include <OpenSG/OSGBoolFields.h> // StackTraceEnabled type

#include "OSGLuaErrorEventFields.h"

OSG_BEGIN_NAMESPACE

class LuaErrorEvent;
class BinaryDataHandler;

//! \brief LuaErrorEvent Base Class.

class OSG_LUALIB_DLLMAPPING LuaErrorEventBase : public Event
{
  private:

    typedef Event    Inherited;

    /*==========================  PUBLIC  =================================*/
  public:

    typedef LuaErrorEventPtr  Ptr;

    enum
    {
        LuaStateVoidPFieldId     = Inherited::NextFieldId,
        StatusFieldId            = LuaStateVoidPFieldId     + 1,
        StackTraceFieldId        = StatusFieldId            + 1,
        StackTraceEnabledFieldId = StackTraceFieldId        + 1,
        NextFieldId              = StackTraceEnabledFieldId + 1
    };

    static const OSG::BitVector LuaStateVoidPFieldMask;
    static const OSG::BitVector StatusFieldMask;
    static const OSG::BitVector StackTraceFieldMask;
    static const OSG::BitVector StackTraceEnabledFieldMask;


    static const OSG::BitVector MTInfluenceMask;

    /*---------------------------------------------------------------------*/
    /*! \name                    Class Get                                 */
    /*! \{                                                                 */

    static        FieldContainerType &getClassType    (void); 
    static        UInt32              getClassTypeId  (void); 

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                FieldContainer Get                            */
    /*! \{                                                                 */

    virtual       FieldContainerType &getType  (void); 
    virtual const FieldContainerType &getType  (void) const; 

    virtual       UInt32              getContainerSize(void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Get                                 */
    /*! \{                                                                 */

     const SFVoidP             *getSFLuaStateVoidP  (void) const;
     const SFInt32             *getSFStatus         (void) const;
     const MFString            *getMFStackTrace     (void) const;
     const SFBool              *getSFStackTraceEnabled(void) const;


     const void*               getLuaStateVoidP  (void) const;

     const Int32               &getStatus         (void) const;

     const bool                &getStackTraceEnabled(void) const;

     const std::string         &getStackTrace     (const UInt32 index) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Set                                 */
    /*! \{                                                                 */


    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Binary Access                              */
    /*! \{                                                                 */

    virtual UInt32 getBinSize (const BitVector         &whichField);
    virtual void   copyToBin  (      BinaryDataHandler &pMem,
                               const BitVector         &whichField);
    virtual void   copyFromBin(      BinaryDataHandler &pMem,
                               const BitVector         &whichField);


    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Construction                               */
    /*! \{                                                                 */

    static  LuaErrorEventPtr      create          (void); 
    static  LuaErrorEventPtr      createEmpty     (void); 

    /*! \}                                                                 */

    /*---------------------------------------------------------------------*/
    /*! \name                       Copy                                   */
    /*! \{                                                                 */

    virtual FieldContainerPtr     shallowCopy     (void) const; 

    /*! \}                                                                 */
    /*=========================  PROTECTED  ===============================*/
  protected:

    /*---------------------------------------------------------------------*/
    /*! \name                      Fields                                  */
    /*! \{                                                                 */

    SFVoidP             _sfLuaStateVoidP;
    SFInt32             _sfStatus;
    MFString            _mfStackTrace;
    SFBool              _sfStackTraceEnabled;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Constructors                               */
    /*! \{                                                                 */

    LuaErrorEventBase(void);
    LuaErrorEventBase(const LuaErrorEventBase &source);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Destructors                                */
    /*! \{                                                                 */

    virtual ~LuaErrorEventBase(void); 

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Get                                 */
    /*! \{                                                                 */

           SFVoidP             *editSFLuaStateVoidP  (void);
           SFInt32             *editSFStatus         (void);
           MFString            *editMFStackTrace     (void);
           SFBool              *editSFStackTraceEnabled(void);

           void*               editLuaStateVoidP  (void);
           Int32               &editStatus         (void);
           bool                &editStackTraceEnabled(void);
           std::string         &editStackTrace     (UInt32 index);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Set                                 */
    /*! \{                                                                 */

     void setLuaStateVoidP  (void* value);
     void setStatus         (const Int32 &value);
     void setStackTraceEnabled(const bool &value);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

#if !defined(OSG_FIXED_MFIELDSYNC)
    void executeSyncImpl(      LuaErrorEventBase *pOther,
                         const BitVector         &whichField);

    virtual void   executeSync(      FieldContainer    &other,
                               const BitVector         &whichField);
#else
    void executeSyncImpl(      LuaErrorEventBase *pOther,
                         const BitVector         &whichField,
                         const SyncInfo          &sInfo     );

    virtual void   executeSync(      FieldContainer    &other,
                               const BitVector         &whichField,
                               const SyncInfo          &sInfo);

    virtual void execBeginEdit     (const BitVector &whichField,
                                          UInt32     uiAspect,
                                          UInt32     uiContainerSize);

            void execBeginEditImpl (const BitVector &whichField,
                                          UInt32     uiAspect,
                                          UInt32     uiContainerSize);

    virtual void onDestroyAspect(UInt32 uiId, UInt32 uiAspect);
#endif

    /*! \}                                                                 */
    /*==========================  PRIVATE  ================================*/
  private:

    friend class FieldContainer;

    static FieldDescription   *_desc[];
    static FieldContainerType  _type;


    // prohibit default functions (move to 'public' if you need one)
    void operator =(const LuaErrorEventBase &source);
};

//---------------------------------------------------------------------------
//   Exported Types
//---------------------------------------------------------------------------


typedef LuaErrorEventBase *LuaErrorEventBaseP;

typedef osgIF<LuaErrorEventBase::isNodeCore,
              CoredNodePtr<LuaErrorEvent>,
              FieldContainer::attempt_to_create_CoredNodePtr_on_non_NodeCore_FC
              >::_IRet LuaErrorEventNodePtr;

typedef RefPtr<LuaErrorEventPtr> LuaErrorEventRefPtr;

OSG_END_NAMESPACE

#endif /* _OSGLUAERROREVENTBASE_H_ */
