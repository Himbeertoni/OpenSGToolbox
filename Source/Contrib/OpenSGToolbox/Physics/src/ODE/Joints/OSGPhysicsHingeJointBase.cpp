/*---------------------------------------------------------------------------*\
 *                         OpenSG ToolBox Physics                            *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                          www.vrac.iastate.edu                             *
 *                                                                           *
 *                Authors: Behboud Kalantary, David Kabala                   *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class PhysicsHingeJoint!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#define OSG_COMPILEPHYSICSHINGEJOINTINST

#include <stdlib.h>
#include <stdio.h>

#include <OpenSG/OSGConfig.h>

#include "OSGPhysicsHingeJointBase.h"
#include "OSGPhysicsHingeJoint.h"


OSG_BEGIN_NAMESPACE

const OSG::BitVector  PhysicsHingeJointBase::AnchorFieldMask = 
    (TypeTraits<BitVector>::One << PhysicsHingeJointBase::AnchorFieldId);

const OSG::BitVector  PhysicsHingeJointBase::AxisFieldMask = 
    (TypeTraits<BitVector>::One << PhysicsHingeJointBase::AxisFieldId);

const OSG::BitVector  PhysicsHingeJointBase::HiStopFieldMask = 
    (TypeTraits<BitVector>::One << PhysicsHingeJointBase::HiStopFieldId);

const OSG::BitVector  PhysicsHingeJointBase::LoStopFieldMask = 
    (TypeTraits<BitVector>::One << PhysicsHingeJointBase::LoStopFieldId);

const OSG::BitVector  PhysicsHingeJointBase::BounceFieldMask = 
    (TypeTraits<BitVector>::One << PhysicsHingeJointBase::BounceFieldId);

const OSG::BitVector  PhysicsHingeJointBase::CFMFieldMask = 
    (TypeTraits<BitVector>::One << PhysicsHingeJointBase::CFMFieldId);

const OSG::BitVector  PhysicsHingeJointBase::StopERPFieldMask = 
    (TypeTraits<BitVector>::One << PhysicsHingeJointBase::StopERPFieldId);

const OSG::BitVector  PhysicsHingeJointBase::StopCFMFieldMask = 
    (TypeTraits<BitVector>::One << PhysicsHingeJointBase::StopCFMFieldId);

const OSG::BitVector PhysicsHingeJointBase::MTInfluenceMask = 
    (Inherited::MTInfluenceMask) | 
    (static_cast<BitVector>(0x0) << Inherited::NextFieldId); 


// Field descriptions

/*! \var Vec3f           PhysicsHingeJointBase::_sfAnchor
    
*/
/*! \var Vec3f           PhysicsHingeJointBase::_sfAxis
    
*/
/*! \var Real32          PhysicsHingeJointBase::_sfHiStop
    High stop angle or position. Setting this to dInfinity (the default value) turns off the high stop. For rotational joints, this stop must be less than pi to be effective. If the high stop is less than the low stop then both stops will be ineffective.
*/
/*! \var Real32          PhysicsHingeJointBase::_sfLoStop
    Low stop angle or position. Setting this to -dInfinity (the default value) turns off the low stop.  For rotational joints, this stop must be greater than - pi to be effective.
*/
/*! \var Real32          PhysicsHingeJointBase::_sfBounce
    The bouncyness of the stops. This is a restitution parameter in the range 0..1. 0 means the stops are not bouncy at all, 1 means maximum bouncyness.
*/
/*! \var Real32          PhysicsHingeJointBase::_sfCFM
    The constraint force mixing (CFM) value used when not at a stop.
*/
/*! \var Real32          PhysicsHingeJointBase::_sfStopERP
    The error reduction parameter (ERP) used by the stops.
*/
/*! \var Real32          PhysicsHingeJointBase::_sfStopCFM
    The constraint force mixing (CFM) value used by the stops. Together with the ERP value this can be used to get spongy or soft stops. Note that this is intended for unpowered joints, it does not really work as expected when a powered joint reaches its limit.
*/

//! PhysicsHingeJoint description

FieldDescription *PhysicsHingeJointBase::_desc[] = 
{
    new FieldDescription(SFVec3f::getClassType(), 
                     "anchor", 
                     AnchorFieldId, AnchorFieldMask,
                     false,
                     (FieldAccessMethod) &PhysicsHingeJointBase::getSFAnchor),
    new FieldDescription(SFVec3f::getClassType(), 
                     "axis", 
                     AxisFieldId, AxisFieldMask,
                     false,
                     (FieldAccessMethod) &PhysicsHingeJointBase::getSFAxis),
    new FieldDescription(SFReal32::getClassType(), 
                     "hiStop", 
                     HiStopFieldId, HiStopFieldMask,
                     false,
                     (FieldAccessMethod) &PhysicsHingeJointBase::getSFHiStop),
    new FieldDescription(SFReal32::getClassType(), 
                     "loStop", 
                     LoStopFieldId, LoStopFieldMask,
                     false,
                     (FieldAccessMethod) &PhysicsHingeJointBase::getSFLoStop),
    new FieldDescription(SFReal32::getClassType(), 
                     "bounce", 
                     BounceFieldId, BounceFieldMask,
                     false,
                     (FieldAccessMethod) &PhysicsHingeJointBase::getSFBounce),
    new FieldDescription(SFReal32::getClassType(), 
                     "CFM", 
                     CFMFieldId, CFMFieldMask,
                     false,
                     (FieldAccessMethod) &PhysicsHingeJointBase::getSFCFM),
    new FieldDescription(SFReal32::getClassType(), 
                     "stopERP", 
                     StopERPFieldId, StopERPFieldMask,
                     false,
                     (FieldAccessMethod) &PhysicsHingeJointBase::getSFStopERP),
    new FieldDescription(SFReal32::getClassType(), 
                     "stopCFM", 
                     StopCFMFieldId, StopCFMFieldMask,
                     false,
                     (FieldAccessMethod) &PhysicsHingeJointBase::getSFStopCFM)
};


FieldContainerType PhysicsHingeJointBase::_type(
    "PhysicsHingeJoint",
    "PhysicsJoint",
    NULL,
    (PrototypeCreateF) &PhysicsHingeJointBase::createEmpty,
    PhysicsHingeJoint::initMethod,
    _desc,
    sizeof(_desc));

//OSG_FIELD_CONTAINER_DEF(PhysicsHingeJointBase, PhysicsHingeJointPtr)

/*------------------------------ get -----------------------------------*/

FieldContainerType &PhysicsHingeJointBase::getType(void) 
{
    return _type; 
} 

const FieldContainerType &PhysicsHingeJointBase::getType(void) const 
{
    return _type;
} 


FieldContainerPtr PhysicsHingeJointBase::shallowCopy(void) const 
{ 
    PhysicsHingeJointPtr returnValue; 

    newPtr(returnValue, dynamic_cast<const PhysicsHingeJoint *>(this)); 

    return returnValue; 
}

UInt32 PhysicsHingeJointBase::getContainerSize(void) const 
{ 
    return sizeof(PhysicsHingeJoint); 
}


#if !defined(OSG_FIXED_MFIELDSYNC)
void PhysicsHingeJointBase::executeSync(      FieldContainer &other,
                                    const BitVector      &whichField)
{
    this->executeSyncImpl((PhysicsHingeJointBase *) &other, whichField);
}
#else
void PhysicsHingeJointBase::executeSync(      FieldContainer &other,
                                    const BitVector      &whichField,                                    const SyncInfo       &sInfo     )
{
    this->executeSyncImpl((PhysicsHingeJointBase *) &other, whichField, sInfo);
}
void PhysicsHingeJointBase::execBeginEdit(const BitVector &whichField, 
                                            UInt32     uiAspect,
                                            UInt32     uiContainerSize) 
{
    this->execBeginEditImpl(whichField, uiAspect, uiContainerSize);
}

void PhysicsHingeJointBase::onDestroyAspect(UInt32 uiId, UInt32 uiAspect)
{
    Inherited::onDestroyAspect(uiId, uiAspect);

}
#endif

/*------------------------- constructors ----------------------------------*/

#ifdef OSG_WIN32_ICL
#pragma warning (disable : 383)
#endif

PhysicsHingeJointBase::PhysicsHingeJointBase(void) :
    _sfAnchor                 (), 
    _sfAxis                   (), 
    _sfHiStop                 (), 
    _sfLoStop                 (), 
    _sfBounce                 (), 
    _sfCFM                    (), 
    _sfStopERP                (), 
    _sfStopCFM                (), 
    Inherited() 
{
}

#ifdef OSG_WIN32_ICL
#pragma warning (default : 383)
#endif

PhysicsHingeJointBase::PhysicsHingeJointBase(const PhysicsHingeJointBase &source) :
    _sfAnchor                 (source._sfAnchor                 ), 
    _sfAxis                   (source._sfAxis                   ), 
    _sfHiStop                 (source._sfHiStop                 ), 
    _sfLoStop                 (source._sfLoStop                 ), 
    _sfBounce                 (source._sfBounce                 ), 
    _sfCFM                    (source._sfCFM                    ), 
    _sfStopERP                (source._sfStopERP                ), 
    _sfStopCFM                (source._sfStopCFM                ), 
    Inherited                 (source)
{
}

/*-------------------------- destructors ----------------------------------*/

PhysicsHingeJointBase::~PhysicsHingeJointBase(void)
{
}

/*------------------------------ access -----------------------------------*/

UInt32 PhysicsHingeJointBase::getBinSize(const BitVector &whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (AnchorFieldMask & whichField))
    {
        returnValue += _sfAnchor.getBinSize();
    }

    if(FieldBits::NoField != (AxisFieldMask & whichField))
    {
        returnValue += _sfAxis.getBinSize();
    }

    if(FieldBits::NoField != (HiStopFieldMask & whichField))
    {
        returnValue += _sfHiStop.getBinSize();
    }

    if(FieldBits::NoField != (LoStopFieldMask & whichField))
    {
        returnValue += _sfLoStop.getBinSize();
    }

    if(FieldBits::NoField != (BounceFieldMask & whichField))
    {
        returnValue += _sfBounce.getBinSize();
    }

    if(FieldBits::NoField != (CFMFieldMask & whichField))
    {
        returnValue += _sfCFM.getBinSize();
    }

    if(FieldBits::NoField != (StopERPFieldMask & whichField))
    {
        returnValue += _sfStopERP.getBinSize();
    }

    if(FieldBits::NoField != (StopCFMFieldMask & whichField))
    {
        returnValue += _sfStopCFM.getBinSize();
    }


    return returnValue;
}

void PhysicsHingeJointBase::copyToBin(      BinaryDataHandler &pMem,
                                  const BitVector         &whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (AnchorFieldMask & whichField))
    {
        _sfAnchor.copyToBin(pMem);
    }

    if(FieldBits::NoField != (AxisFieldMask & whichField))
    {
        _sfAxis.copyToBin(pMem);
    }

    if(FieldBits::NoField != (HiStopFieldMask & whichField))
    {
        _sfHiStop.copyToBin(pMem);
    }

    if(FieldBits::NoField != (LoStopFieldMask & whichField))
    {
        _sfLoStop.copyToBin(pMem);
    }

    if(FieldBits::NoField != (BounceFieldMask & whichField))
    {
        _sfBounce.copyToBin(pMem);
    }

    if(FieldBits::NoField != (CFMFieldMask & whichField))
    {
        _sfCFM.copyToBin(pMem);
    }

    if(FieldBits::NoField != (StopERPFieldMask & whichField))
    {
        _sfStopERP.copyToBin(pMem);
    }

    if(FieldBits::NoField != (StopCFMFieldMask & whichField))
    {
        _sfStopCFM.copyToBin(pMem);
    }


}

void PhysicsHingeJointBase::copyFromBin(      BinaryDataHandler &pMem,
                                    const BitVector    &whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (AnchorFieldMask & whichField))
    {
        _sfAnchor.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (AxisFieldMask & whichField))
    {
        _sfAxis.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (HiStopFieldMask & whichField))
    {
        _sfHiStop.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (LoStopFieldMask & whichField))
    {
        _sfLoStop.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (BounceFieldMask & whichField))
    {
        _sfBounce.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (CFMFieldMask & whichField))
    {
        _sfCFM.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (StopERPFieldMask & whichField))
    {
        _sfStopERP.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (StopCFMFieldMask & whichField))
    {
        _sfStopCFM.copyFromBin(pMem);
    }


}

#if !defined(OSG_FIXED_MFIELDSYNC)
void PhysicsHingeJointBase::executeSyncImpl(      PhysicsHingeJointBase *pOther,
                                        const BitVector         &whichField)
{

    Inherited::executeSyncImpl(pOther, whichField);

    if(FieldBits::NoField != (AnchorFieldMask & whichField))
        _sfAnchor.syncWith(pOther->_sfAnchor);

    if(FieldBits::NoField != (AxisFieldMask & whichField))
        _sfAxis.syncWith(pOther->_sfAxis);

    if(FieldBits::NoField != (HiStopFieldMask & whichField))
        _sfHiStop.syncWith(pOther->_sfHiStop);

    if(FieldBits::NoField != (LoStopFieldMask & whichField))
        _sfLoStop.syncWith(pOther->_sfLoStop);

    if(FieldBits::NoField != (BounceFieldMask & whichField))
        _sfBounce.syncWith(pOther->_sfBounce);

    if(FieldBits::NoField != (CFMFieldMask & whichField))
        _sfCFM.syncWith(pOther->_sfCFM);

    if(FieldBits::NoField != (StopERPFieldMask & whichField))
        _sfStopERP.syncWith(pOther->_sfStopERP);

    if(FieldBits::NoField != (StopCFMFieldMask & whichField))
        _sfStopCFM.syncWith(pOther->_sfStopCFM);


}
#else
void PhysicsHingeJointBase::executeSyncImpl(      PhysicsHingeJointBase *pOther,
                                        const BitVector         &whichField,
                                        const SyncInfo          &sInfo      )
{

    Inherited::executeSyncImpl(pOther, whichField, sInfo);

    if(FieldBits::NoField != (AnchorFieldMask & whichField))
        _sfAnchor.syncWith(pOther->_sfAnchor);

    if(FieldBits::NoField != (AxisFieldMask & whichField))
        _sfAxis.syncWith(pOther->_sfAxis);

    if(FieldBits::NoField != (HiStopFieldMask & whichField))
        _sfHiStop.syncWith(pOther->_sfHiStop);

    if(FieldBits::NoField != (LoStopFieldMask & whichField))
        _sfLoStop.syncWith(pOther->_sfLoStop);

    if(FieldBits::NoField != (BounceFieldMask & whichField))
        _sfBounce.syncWith(pOther->_sfBounce);

    if(FieldBits::NoField != (CFMFieldMask & whichField))
        _sfCFM.syncWith(pOther->_sfCFM);

    if(FieldBits::NoField != (StopERPFieldMask & whichField))
        _sfStopERP.syncWith(pOther->_sfStopERP);

    if(FieldBits::NoField != (StopCFMFieldMask & whichField))
        _sfStopCFM.syncWith(pOther->_sfStopCFM);



}

void PhysicsHingeJointBase::execBeginEditImpl (const BitVector &whichField, 
                                                 UInt32     uiAspect,
                                                 UInt32     uiContainerSize)
{
    Inherited::execBeginEditImpl(whichField, uiAspect, uiContainerSize);

}
#endif



OSG_END_NAMESPACE

#include <OpenSG/OSGSFieldTypeDef.inl>
#include <OpenSG/OSGMFieldTypeDef.inl>

OSG_BEGIN_NAMESPACE

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldDataTraits<PhysicsHingeJointPtr>::_type("PhysicsHingeJointPtr", "PhysicsJointPtr");
#endif

OSG_DLLEXPORT_SFIELD_DEF1(PhysicsHingeJointPtr, OSG_PHYSICSLIB_DLLTMPLMAPPING);
OSG_DLLEXPORT_MFIELD_DEF1(PhysicsHingeJointPtr, OSG_PHYSICSLIB_DLLTMPLMAPPING);


/*------------------------------------------------------------------------*/
/*                              cvs id's                                  */

#ifdef OSG_SGI_CC
#pragma set woff 1174
#endif

#ifdef OSG_LINUX_ICC
#pragma warning( disable : 177 )
#endif

namespace
{
    static Char8 cvsid_cpp       [] = "@(#)$Id: FCBaseTemplate_cpp.h,v 1.47 2006/03/17 17:03:19 pdaehne Exp $";
    static Char8 cvsid_hpp       [] = OSGPHYSICSHINGEJOINTBASE_HEADER_CVSID;
    static Char8 cvsid_inl       [] = OSGPHYSICSHINGEJOINTBASE_INLINE_CVSID;

    static Char8 cvsid_fields_hpp[] = OSGPHYSICSHINGEJOINTFIELDS_HEADER_CVSID;
}

OSG_END_NAMESPACE

