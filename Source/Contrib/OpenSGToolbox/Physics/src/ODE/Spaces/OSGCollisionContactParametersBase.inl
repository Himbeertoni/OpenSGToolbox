/*---------------------------------------------------------------------------*\
 *                         OpenSG ToolBox Physics                            *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                Authors: Behboud Kalantary, David Kabala                   *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class CollisionContactParameters!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <OpenSG/OSGConfig.h>

OSG_BEGIN_NAMESPACE


//! access the type of the class
inline
OSG::FieldContainerType &CollisionContactParametersBase::getClassType(void)
{
    return _type; 
} 

//! access the numerical type of the class
inline
OSG::UInt32 CollisionContactParametersBase::getClassTypeId(void) 
{
    return _type.getId(); 
} 

//! create a new instance of the class
inline
CollisionContactParametersPtr CollisionContactParametersBase::create(void) 
{
    CollisionContactParametersPtr fc; 

    if(getClassType().getPrototype() != OSG::NullFC) 
    {
        fc = CollisionContactParametersPtr::dcast(
            getClassType().getPrototype()-> shallowCopy()); 
    }
    
    return fc; 
}

//! create an empty new instance of the class, do not copy the prototype
inline
CollisionContactParametersPtr CollisionContactParametersBase::createEmpty(void) 
{ 
    CollisionContactParametersPtr returnValue; 
    
    newPtr(returnValue); 

    return returnValue; 
}


/*------------------------------ get -----------------------------------*/

//! Get the CollisionContactParameters::_sfMode field.
inline
SFInt32 *CollisionContactParametersBase::getSFMode(void)
{
    return &_sfMode;
}

//! Get the CollisionContactParameters::_sfMu field.
inline
SFReal32 *CollisionContactParametersBase::getSFMu(void)
{
    return &_sfMu;
}

//! Get the CollisionContactParameters::_sfMu2 field.
inline
SFReal32 *CollisionContactParametersBase::getSFMu2(void)
{
    return &_sfMu2;
}

//! Get the CollisionContactParameters::_sfBounce field.
inline
SFReal32 *CollisionContactParametersBase::getSFBounce(void)
{
    return &_sfBounce;
}

//! Get the CollisionContactParameters::_sfBounceSpeedThreshold field.
inline
SFReal32 *CollisionContactParametersBase::getSFBounceSpeedThreshold(void)
{
    return &_sfBounceSpeedThreshold;
}

//! Get the CollisionContactParameters::_sfSoftCFM field.
inline
SFReal32 *CollisionContactParametersBase::getSFSoftCFM(void)
{
    return &_sfSoftCFM;
}

//! Get the CollisionContactParameters::_sfSoftERP field.
inline
SFReal32 *CollisionContactParametersBase::getSFSoftERP(void)
{
    return &_sfSoftERP;
}

//! Get the CollisionContactParameters::_sfMotion1 field.
inline
SFReal32 *CollisionContactParametersBase::getSFMotion1(void)
{
    return &_sfMotion1;
}

//! Get the CollisionContactParameters::_sfMotion2 field.
inline
SFReal32 *CollisionContactParametersBase::getSFMotion2(void)
{
    return &_sfMotion2;
}

//! Get the CollisionContactParameters::_sfMotionN field.
inline
SFReal32 *CollisionContactParametersBase::getSFMotionN(void)
{
    return &_sfMotionN;
}

//! Get the CollisionContactParameters::_sfSlip1 field.
inline
SFReal32 *CollisionContactParametersBase::getSFSlip1(void)
{
    return &_sfSlip1;
}

//! Get the CollisionContactParameters::_sfSlip2 field.
inline
SFReal32 *CollisionContactParametersBase::getSFSlip2(void)
{
    return &_sfSlip2;
}


//! Get the value of the CollisionContactParameters::_sfMode field.
inline
Int32 &CollisionContactParametersBase::getMode(void)
{
    return _sfMode.getValue();
}

//! Get the value of the CollisionContactParameters::_sfMode field.
inline
const Int32 &CollisionContactParametersBase::getMode(void) const
{
    return _sfMode.getValue();
}

//! Set the value of the CollisionContactParameters::_sfMode field.
inline
void CollisionContactParametersBase::setMode(const Int32 &value)
{
    _sfMode.setValue(value);
}

//! Get the value of the CollisionContactParameters::_sfMu field.
inline
Real32 &CollisionContactParametersBase::getMu(void)
{
    return _sfMu.getValue();
}

//! Get the value of the CollisionContactParameters::_sfMu field.
inline
const Real32 &CollisionContactParametersBase::getMu(void) const
{
    return _sfMu.getValue();
}

//! Set the value of the CollisionContactParameters::_sfMu field.
inline
void CollisionContactParametersBase::setMu(const Real32 &value)
{
    _sfMu.setValue(value);
}

//! Get the value of the CollisionContactParameters::_sfMu2 field.
inline
Real32 &CollisionContactParametersBase::getMu2(void)
{
    return _sfMu2.getValue();
}

//! Get the value of the CollisionContactParameters::_sfMu2 field.
inline
const Real32 &CollisionContactParametersBase::getMu2(void) const
{
    return _sfMu2.getValue();
}

//! Set the value of the CollisionContactParameters::_sfMu2 field.
inline
void CollisionContactParametersBase::setMu2(const Real32 &value)
{
    _sfMu2.setValue(value);
}

//! Get the value of the CollisionContactParameters::_sfBounce field.
inline
Real32 &CollisionContactParametersBase::getBounce(void)
{
    return _sfBounce.getValue();
}

//! Get the value of the CollisionContactParameters::_sfBounce field.
inline
const Real32 &CollisionContactParametersBase::getBounce(void) const
{
    return _sfBounce.getValue();
}

//! Set the value of the CollisionContactParameters::_sfBounce field.
inline
void CollisionContactParametersBase::setBounce(const Real32 &value)
{
    _sfBounce.setValue(value);
}

//! Get the value of the CollisionContactParameters::_sfBounceSpeedThreshold field.
inline
Real32 &CollisionContactParametersBase::getBounceSpeedThreshold(void)
{
    return _sfBounceSpeedThreshold.getValue();
}

//! Get the value of the CollisionContactParameters::_sfBounceSpeedThreshold field.
inline
const Real32 &CollisionContactParametersBase::getBounceSpeedThreshold(void) const
{
    return _sfBounceSpeedThreshold.getValue();
}

//! Set the value of the CollisionContactParameters::_sfBounceSpeedThreshold field.
inline
void CollisionContactParametersBase::setBounceSpeedThreshold(const Real32 &value)
{
    _sfBounceSpeedThreshold.setValue(value);
}

//! Get the value of the CollisionContactParameters::_sfSoftCFM field.
inline
Real32 &CollisionContactParametersBase::getSoftCFM(void)
{
    return _sfSoftCFM.getValue();
}

//! Get the value of the CollisionContactParameters::_sfSoftCFM field.
inline
const Real32 &CollisionContactParametersBase::getSoftCFM(void) const
{
    return _sfSoftCFM.getValue();
}

//! Set the value of the CollisionContactParameters::_sfSoftCFM field.
inline
void CollisionContactParametersBase::setSoftCFM(const Real32 &value)
{
    _sfSoftCFM.setValue(value);
}

//! Get the value of the CollisionContactParameters::_sfSoftERP field.
inline
Real32 &CollisionContactParametersBase::getSoftERP(void)
{
    return _sfSoftERP.getValue();
}

//! Get the value of the CollisionContactParameters::_sfSoftERP field.
inline
const Real32 &CollisionContactParametersBase::getSoftERP(void) const
{
    return _sfSoftERP.getValue();
}

//! Set the value of the CollisionContactParameters::_sfSoftERP field.
inline
void CollisionContactParametersBase::setSoftERP(const Real32 &value)
{
    _sfSoftERP.setValue(value);
}

//! Get the value of the CollisionContactParameters::_sfMotion1 field.
inline
Real32 &CollisionContactParametersBase::getMotion1(void)
{
    return _sfMotion1.getValue();
}

//! Get the value of the CollisionContactParameters::_sfMotion1 field.
inline
const Real32 &CollisionContactParametersBase::getMotion1(void) const
{
    return _sfMotion1.getValue();
}

//! Set the value of the CollisionContactParameters::_sfMotion1 field.
inline
void CollisionContactParametersBase::setMotion1(const Real32 &value)
{
    _sfMotion1.setValue(value);
}

//! Get the value of the CollisionContactParameters::_sfMotion2 field.
inline
Real32 &CollisionContactParametersBase::getMotion2(void)
{
    return _sfMotion2.getValue();
}

//! Get the value of the CollisionContactParameters::_sfMotion2 field.
inline
const Real32 &CollisionContactParametersBase::getMotion2(void) const
{
    return _sfMotion2.getValue();
}

//! Set the value of the CollisionContactParameters::_sfMotion2 field.
inline
void CollisionContactParametersBase::setMotion2(const Real32 &value)
{
    _sfMotion2.setValue(value);
}

//! Get the value of the CollisionContactParameters::_sfMotionN field.
inline
Real32 &CollisionContactParametersBase::getMotionN(void)
{
    return _sfMotionN.getValue();
}

//! Get the value of the CollisionContactParameters::_sfMotionN field.
inline
const Real32 &CollisionContactParametersBase::getMotionN(void) const
{
    return _sfMotionN.getValue();
}

//! Set the value of the CollisionContactParameters::_sfMotionN field.
inline
void CollisionContactParametersBase::setMotionN(const Real32 &value)
{
    _sfMotionN.setValue(value);
}

//! Get the value of the CollisionContactParameters::_sfSlip1 field.
inline
Real32 &CollisionContactParametersBase::getSlip1(void)
{
    return _sfSlip1.getValue();
}

//! Get the value of the CollisionContactParameters::_sfSlip1 field.
inline
const Real32 &CollisionContactParametersBase::getSlip1(void) const
{
    return _sfSlip1.getValue();
}

//! Set the value of the CollisionContactParameters::_sfSlip1 field.
inline
void CollisionContactParametersBase::setSlip1(const Real32 &value)
{
    _sfSlip1.setValue(value);
}

//! Get the value of the CollisionContactParameters::_sfSlip2 field.
inline
Real32 &CollisionContactParametersBase::getSlip2(void)
{
    return _sfSlip2.getValue();
}

//! Get the value of the CollisionContactParameters::_sfSlip2 field.
inline
const Real32 &CollisionContactParametersBase::getSlip2(void) const
{
    return _sfSlip2.getValue();
}

//! Set the value of the CollisionContactParameters::_sfSlip2 field.
inline
void CollisionContactParametersBase::setSlip2(const Real32 &value)
{
    _sfSlip2.setValue(value);
}


OSG_END_NAMESPACE

#define OSGCOLLISIONCONTACTPARAMETERSBASE_INLINE_CVSID "@(#)$Id: FCBaseTemplate_inl.h,v 1.20 2002/12/04 14:22:22 dirk Exp $"

