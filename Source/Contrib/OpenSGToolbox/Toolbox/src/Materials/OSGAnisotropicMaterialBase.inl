/*---------------------------------------------------------------------------*\
 *                        OpenSG ToolBox Toolbox                             *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                          Authors: David Kabala                            *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class AnisotropicMaterial!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <OpenSG/OSGConfig.h>

OSG_BEGIN_NAMESPACE


//! access the type of the class
inline
OSG::FieldContainerType &AnisotropicMaterialBase::getClassType(void)
{
    return _type; 
} 

//! access the numerical type of the class
inline
OSG::UInt32 AnisotropicMaterialBase::getClassTypeId(void) 
{
    return _type.getId(); 
} 

//! create a new instance of the class
inline
AnisotropicMaterialPtr AnisotropicMaterialBase::create(void) 
{
    AnisotropicMaterialPtr fc; 

    if(getClassType().getPrototype() != OSG::NullFC) 
    {
        fc = AnisotropicMaterialPtr::dcast(
            getClassType().getPrototype()-> shallowCopy()); 
    }
    
    return fc; 
}

//! create an empty new instance of the class, do not copy the prototype
inline
AnisotropicMaterialPtr AnisotropicMaterialBase::createEmpty(void) 
{ 
    AnisotropicMaterialPtr returnValue; 
    
    newPtr(returnValue); 

    return returnValue; 
}


/*------------------------------ get -----------------------------------*/

//! Get the AnisotropicMaterial::_sfSpecularAngle field.
inline
const SFReal32 *AnisotropicMaterialBase::getSFSpecularAngle(void) const
{
    return &_sfSpecularAngle;
}

//! Get the AnisotropicMaterial::_sfSpecularAngle field.
inline
SFReal32 *AnisotropicMaterialBase::editSFSpecularAngle(void)
{
    return &_sfSpecularAngle;
}

#ifndef OSG_2_PREP
//! Get the AnisotropicMaterial::_sfSpecularAngle field.
inline
SFReal32 *AnisotropicMaterialBase::getSFSpecularAngle(void)
{
    return &_sfSpecularAngle;
}
#endif

//! Get the AnisotropicMaterial::_sfSpecularAngleTexture field.
inline
const SFTextureChunkPtr *AnisotropicMaterialBase::getSFSpecularAngleTexture(void) const
{
    return &_sfSpecularAngleTexture;
}

//! Get the AnisotropicMaterial::_sfSpecularAngleTexture field.
inline
SFTextureChunkPtr *AnisotropicMaterialBase::editSFSpecularAngleTexture(void)
{
    return &_sfSpecularAngleTexture;
}

#ifndef OSG_2_PREP
//! Get the AnisotropicMaterial::_sfSpecularAngleTexture field.
inline
SFTextureChunkPtr *AnisotropicMaterialBase::getSFSpecularAngleTexture(void)
{
    return &_sfSpecularAngleTexture;
}
#endif

//! Get the AnisotropicMaterial::_sfSpecularSpreadX field.
inline
const SFReal32 *AnisotropicMaterialBase::getSFSpecularSpreadX(void) const
{
    return &_sfSpecularSpreadX;
}

//! Get the AnisotropicMaterial::_sfSpecularSpreadX field.
inline
SFReal32 *AnisotropicMaterialBase::editSFSpecularSpreadX(void)
{
    return &_sfSpecularSpreadX;
}

#ifndef OSG_2_PREP
//! Get the AnisotropicMaterial::_sfSpecularSpreadX field.
inline
SFReal32 *AnisotropicMaterialBase::getSFSpecularSpreadX(void)
{
    return &_sfSpecularSpreadX;
}
#endif

//! Get the AnisotropicMaterial::_sfSpecularSpreadXTexture field.
inline
const SFTextureChunkPtr *AnisotropicMaterialBase::getSFSpecularSpreadXTexture(void) const
{
    return &_sfSpecularSpreadXTexture;
}

//! Get the AnisotropicMaterial::_sfSpecularSpreadXTexture field.
inline
SFTextureChunkPtr *AnisotropicMaterialBase::editSFSpecularSpreadXTexture(void)
{
    return &_sfSpecularSpreadXTexture;
}

#ifndef OSG_2_PREP
//! Get the AnisotropicMaterial::_sfSpecularSpreadXTexture field.
inline
SFTextureChunkPtr *AnisotropicMaterialBase::getSFSpecularSpreadXTexture(void)
{
    return &_sfSpecularSpreadXTexture;
}
#endif

//! Get the AnisotropicMaterial::_sfSpecularSpreadY field.
inline
const SFReal32 *AnisotropicMaterialBase::getSFSpecularSpreadY(void) const
{
    return &_sfSpecularSpreadY;
}

//! Get the AnisotropicMaterial::_sfSpecularSpreadY field.
inline
SFReal32 *AnisotropicMaterialBase::editSFSpecularSpreadY(void)
{
    return &_sfSpecularSpreadY;
}

#ifndef OSG_2_PREP
//! Get the AnisotropicMaterial::_sfSpecularSpreadY field.
inline
SFReal32 *AnisotropicMaterialBase::getSFSpecularSpreadY(void)
{
    return &_sfSpecularSpreadY;
}
#endif

//! Get the AnisotropicMaterial::_sfSpecularSpreadYTexture field.
inline
const SFTextureChunkPtr *AnisotropicMaterialBase::getSFSpecularSpreadYTexture(void) const
{
    return &_sfSpecularSpreadYTexture;
}

//! Get the AnisotropicMaterial::_sfSpecularSpreadYTexture field.
inline
SFTextureChunkPtr *AnisotropicMaterialBase::editSFSpecularSpreadYTexture(void)
{
    return &_sfSpecularSpreadYTexture;
}

#ifndef OSG_2_PREP
//! Get the AnisotropicMaterial::_sfSpecularSpreadYTexture field.
inline
SFTextureChunkPtr *AnisotropicMaterialBase::getSFSpecularSpreadYTexture(void)
{
    return &_sfSpecularSpreadYTexture;
}
#endif

//! Get the AnisotropicMaterial::_sfSpecularRoughness field.
inline
const SFReal32 *AnisotropicMaterialBase::getSFSpecularRoughness(void) const
{
    return &_sfSpecularRoughness;
}

//! Get the AnisotropicMaterial::_sfSpecularRoughness field.
inline
SFReal32 *AnisotropicMaterialBase::editSFSpecularRoughness(void)
{
    return &_sfSpecularRoughness;
}

#ifndef OSG_2_PREP
//! Get the AnisotropicMaterial::_sfSpecularRoughness field.
inline
SFReal32 *AnisotropicMaterialBase::getSFSpecularRoughness(void)
{
    return &_sfSpecularRoughness;
}
#endif

//! Get the AnisotropicMaterial::_sfSpecularRoughnessTexture field.
inline
const SFTextureChunkPtr *AnisotropicMaterialBase::getSFSpecularRoughnessTexture(void) const
{
    return &_sfSpecularRoughnessTexture;
}

//! Get the AnisotropicMaterial::_sfSpecularRoughnessTexture field.
inline
SFTextureChunkPtr *AnisotropicMaterialBase::editSFSpecularRoughnessTexture(void)
{
    return &_sfSpecularRoughnessTexture;
}

#ifndef OSG_2_PREP
//! Get the AnisotropicMaterial::_sfSpecularRoughnessTexture field.
inline
SFTextureChunkPtr *AnisotropicMaterialBase::getSFSpecularRoughnessTexture(void)
{
    return &_sfSpecularRoughnessTexture;
}
#endif

//! Get the AnisotropicMaterial::_sfSpecularFresnelIndex field.
inline
const SFReal32 *AnisotropicMaterialBase::getSFSpecularFresnelIndex(void) const
{
    return &_sfSpecularFresnelIndex;
}

//! Get the AnisotropicMaterial::_sfSpecularFresnelIndex field.
inline
SFReal32 *AnisotropicMaterialBase::editSFSpecularFresnelIndex(void)
{
    return &_sfSpecularFresnelIndex;
}

#ifndef OSG_2_PREP
//! Get the AnisotropicMaterial::_sfSpecularFresnelIndex field.
inline
SFReal32 *AnisotropicMaterialBase::getSFSpecularFresnelIndex(void)
{
    return &_sfSpecularFresnelIndex;
}
#endif

//! Get the AnisotropicMaterial::_sfSpecularFresnelIndexTexture field.
inline
const SFTextureChunkPtr *AnisotropicMaterialBase::getSFSpecularFresnelIndexTexture(void) const
{
    return &_sfSpecularFresnelIndexTexture;
}

//! Get the AnisotropicMaterial::_sfSpecularFresnelIndexTexture field.
inline
SFTextureChunkPtr *AnisotropicMaterialBase::editSFSpecularFresnelIndexTexture(void)
{
    return &_sfSpecularFresnelIndexTexture;
}

#ifndef OSG_2_PREP
//! Get the AnisotropicMaterial::_sfSpecularFresnelIndexTexture field.
inline
SFTextureChunkPtr *AnisotropicMaterialBase::getSFSpecularFresnelIndexTexture(void)
{
    return &_sfSpecularFresnelIndexTexture;
}
#endif

//! Get the AnisotropicMaterial::_sfSpecularColor field.
inline
const SFColor3f *AnisotropicMaterialBase::getSFSpecularColor(void) const
{
    return &_sfSpecularColor;
}

//! Get the AnisotropicMaterial::_sfSpecularColor field.
inline
SFColor3f *AnisotropicMaterialBase::editSFSpecularColor(void)
{
    return &_sfSpecularColor;
}

#ifndef OSG_2_PREP
//! Get the AnisotropicMaterial::_sfSpecularColor field.
inline
SFColor3f *AnisotropicMaterialBase::getSFSpecularColor(void)
{
    return &_sfSpecularColor;
}
#endif

//! Get the AnisotropicMaterial::_sfSpecularColorTexture field.
inline
const SFTextureChunkPtr *AnisotropicMaterialBase::getSFSpecularColorTexture(void) const
{
    return &_sfSpecularColorTexture;
}

//! Get the AnisotropicMaterial::_sfSpecularColorTexture field.
inline
SFTextureChunkPtr *AnisotropicMaterialBase::editSFSpecularColorTexture(void)
{
    return &_sfSpecularColorTexture;
}

#ifndef OSG_2_PREP
//! Get the AnisotropicMaterial::_sfSpecularColorTexture field.
inline
SFTextureChunkPtr *AnisotropicMaterialBase::getSFSpecularColorTexture(void)
{
    return &_sfSpecularColorTexture;
}
#endif


//! Get the value of the AnisotropicMaterial::_sfSpecularAngle field.
inline
Real32 &AnisotropicMaterialBase::editSpecularAngle(void)
{
    return _sfSpecularAngle.getValue();
}

//! Get the value of the AnisotropicMaterial::_sfSpecularAngle field.
inline
const Real32 &AnisotropicMaterialBase::getSpecularAngle(void) const
{
    return _sfSpecularAngle.getValue();
}

#ifndef OSG_2_PREP
//! Get the value of the AnisotropicMaterial::_sfSpecularAngle field.
inline
Real32 &AnisotropicMaterialBase::getSpecularAngle(void)
{
    return _sfSpecularAngle.getValue();
}
#endif

//! Set the value of the AnisotropicMaterial::_sfSpecularAngle field.
inline
void AnisotropicMaterialBase::setSpecularAngle(const Real32 &value)
{
    _sfSpecularAngle.setValue(value);
}

//! Get the value of the AnisotropicMaterial::_sfSpecularAngleTexture field.
inline
TextureChunkPtr &AnisotropicMaterialBase::editSpecularAngleTexture(void)
{
    return _sfSpecularAngleTexture.getValue();
}

//! Get the value of the AnisotropicMaterial::_sfSpecularAngleTexture field.
inline
const TextureChunkPtr &AnisotropicMaterialBase::getSpecularAngleTexture(void) const
{
    return _sfSpecularAngleTexture.getValue();
}

#ifndef OSG_2_PREP
//! Get the value of the AnisotropicMaterial::_sfSpecularAngleTexture field.
inline
TextureChunkPtr &AnisotropicMaterialBase::getSpecularAngleTexture(void)
{
    return _sfSpecularAngleTexture.getValue();
}
#endif

//! Set the value of the AnisotropicMaterial::_sfSpecularAngleTexture field.
inline
void AnisotropicMaterialBase::setSpecularAngleTexture(const TextureChunkPtr &value)
{
    _sfSpecularAngleTexture.setValue(value);
}

//! Get the value of the AnisotropicMaterial::_sfSpecularSpreadX field.
inline
Real32 &AnisotropicMaterialBase::editSpecularSpreadX(void)
{
    return _sfSpecularSpreadX.getValue();
}

//! Get the value of the AnisotropicMaterial::_sfSpecularSpreadX field.
inline
const Real32 &AnisotropicMaterialBase::getSpecularSpreadX(void) const
{
    return _sfSpecularSpreadX.getValue();
}

#ifndef OSG_2_PREP
//! Get the value of the AnisotropicMaterial::_sfSpecularSpreadX field.
inline
Real32 &AnisotropicMaterialBase::getSpecularSpreadX(void)
{
    return _sfSpecularSpreadX.getValue();
}
#endif

//! Set the value of the AnisotropicMaterial::_sfSpecularSpreadX field.
inline
void AnisotropicMaterialBase::setSpecularSpreadX(const Real32 &value)
{
    _sfSpecularSpreadX.setValue(value);
}

//! Get the value of the AnisotropicMaterial::_sfSpecularSpreadXTexture field.
inline
TextureChunkPtr &AnisotropicMaterialBase::editSpecularSpreadXTexture(void)
{
    return _sfSpecularSpreadXTexture.getValue();
}

//! Get the value of the AnisotropicMaterial::_sfSpecularSpreadXTexture field.
inline
const TextureChunkPtr &AnisotropicMaterialBase::getSpecularSpreadXTexture(void) const
{
    return _sfSpecularSpreadXTexture.getValue();
}

#ifndef OSG_2_PREP
//! Get the value of the AnisotropicMaterial::_sfSpecularSpreadXTexture field.
inline
TextureChunkPtr &AnisotropicMaterialBase::getSpecularSpreadXTexture(void)
{
    return _sfSpecularSpreadXTexture.getValue();
}
#endif

//! Set the value of the AnisotropicMaterial::_sfSpecularSpreadXTexture field.
inline
void AnisotropicMaterialBase::setSpecularSpreadXTexture(const TextureChunkPtr &value)
{
    _sfSpecularSpreadXTexture.setValue(value);
}

//! Get the value of the AnisotropicMaterial::_sfSpecularSpreadY field.
inline
Real32 &AnisotropicMaterialBase::editSpecularSpreadY(void)
{
    return _sfSpecularSpreadY.getValue();
}

//! Get the value of the AnisotropicMaterial::_sfSpecularSpreadY field.
inline
const Real32 &AnisotropicMaterialBase::getSpecularSpreadY(void) const
{
    return _sfSpecularSpreadY.getValue();
}

#ifndef OSG_2_PREP
//! Get the value of the AnisotropicMaterial::_sfSpecularSpreadY field.
inline
Real32 &AnisotropicMaterialBase::getSpecularSpreadY(void)
{
    return _sfSpecularSpreadY.getValue();
}
#endif

//! Set the value of the AnisotropicMaterial::_sfSpecularSpreadY field.
inline
void AnisotropicMaterialBase::setSpecularSpreadY(const Real32 &value)
{
    _sfSpecularSpreadY.setValue(value);
}

//! Get the value of the AnisotropicMaterial::_sfSpecularSpreadYTexture field.
inline
TextureChunkPtr &AnisotropicMaterialBase::editSpecularSpreadYTexture(void)
{
    return _sfSpecularSpreadYTexture.getValue();
}

//! Get the value of the AnisotropicMaterial::_sfSpecularSpreadYTexture field.
inline
const TextureChunkPtr &AnisotropicMaterialBase::getSpecularSpreadYTexture(void) const
{
    return _sfSpecularSpreadYTexture.getValue();
}

#ifndef OSG_2_PREP
//! Get the value of the AnisotropicMaterial::_sfSpecularSpreadYTexture field.
inline
TextureChunkPtr &AnisotropicMaterialBase::getSpecularSpreadYTexture(void)
{
    return _sfSpecularSpreadYTexture.getValue();
}
#endif

//! Set the value of the AnisotropicMaterial::_sfSpecularSpreadYTexture field.
inline
void AnisotropicMaterialBase::setSpecularSpreadYTexture(const TextureChunkPtr &value)
{
    _sfSpecularSpreadYTexture.setValue(value);
}

//! Get the value of the AnisotropicMaterial::_sfSpecularRoughness field.
inline
Real32 &AnisotropicMaterialBase::editSpecularRoughness(void)
{
    return _sfSpecularRoughness.getValue();
}

//! Get the value of the AnisotropicMaterial::_sfSpecularRoughness field.
inline
const Real32 &AnisotropicMaterialBase::getSpecularRoughness(void) const
{
    return _sfSpecularRoughness.getValue();
}

#ifndef OSG_2_PREP
//! Get the value of the AnisotropicMaterial::_sfSpecularRoughness field.
inline
Real32 &AnisotropicMaterialBase::getSpecularRoughness(void)
{
    return _sfSpecularRoughness.getValue();
}
#endif

//! Set the value of the AnisotropicMaterial::_sfSpecularRoughness field.
inline
void AnisotropicMaterialBase::setSpecularRoughness(const Real32 &value)
{
    _sfSpecularRoughness.setValue(value);
}

//! Get the value of the AnisotropicMaterial::_sfSpecularRoughnessTexture field.
inline
TextureChunkPtr &AnisotropicMaterialBase::editSpecularRoughnessTexture(void)
{
    return _sfSpecularRoughnessTexture.getValue();
}

//! Get the value of the AnisotropicMaterial::_sfSpecularRoughnessTexture field.
inline
const TextureChunkPtr &AnisotropicMaterialBase::getSpecularRoughnessTexture(void) const
{
    return _sfSpecularRoughnessTexture.getValue();
}

#ifndef OSG_2_PREP
//! Get the value of the AnisotropicMaterial::_sfSpecularRoughnessTexture field.
inline
TextureChunkPtr &AnisotropicMaterialBase::getSpecularRoughnessTexture(void)
{
    return _sfSpecularRoughnessTexture.getValue();
}
#endif

//! Set the value of the AnisotropicMaterial::_sfSpecularRoughnessTexture field.
inline
void AnisotropicMaterialBase::setSpecularRoughnessTexture(const TextureChunkPtr &value)
{
    _sfSpecularRoughnessTexture.setValue(value);
}

//! Get the value of the AnisotropicMaterial::_sfSpecularFresnelIndex field.
inline
Real32 &AnisotropicMaterialBase::editSpecularFresnelIndex(void)
{
    return _sfSpecularFresnelIndex.getValue();
}

//! Get the value of the AnisotropicMaterial::_sfSpecularFresnelIndex field.
inline
const Real32 &AnisotropicMaterialBase::getSpecularFresnelIndex(void) const
{
    return _sfSpecularFresnelIndex.getValue();
}

#ifndef OSG_2_PREP
//! Get the value of the AnisotropicMaterial::_sfSpecularFresnelIndex field.
inline
Real32 &AnisotropicMaterialBase::getSpecularFresnelIndex(void)
{
    return _sfSpecularFresnelIndex.getValue();
}
#endif

//! Set the value of the AnisotropicMaterial::_sfSpecularFresnelIndex field.
inline
void AnisotropicMaterialBase::setSpecularFresnelIndex(const Real32 &value)
{
    _sfSpecularFresnelIndex.setValue(value);
}

//! Get the value of the AnisotropicMaterial::_sfSpecularFresnelIndexTexture field.
inline
TextureChunkPtr &AnisotropicMaterialBase::editSpecularFresnelIndexTexture(void)
{
    return _sfSpecularFresnelIndexTexture.getValue();
}

//! Get the value of the AnisotropicMaterial::_sfSpecularFresnelIndexTexture field.
inline
const TextureChunkPtr &AnisotropicMaterialBase::getSpecularFresnelIndexTexture(void) const
{
    return _sfSpecularFresnelIndexTexture.getValue();
}

#ifndef OSG_2_PREP
//! Get the value of the AnisotropicMaterial::_sfSpecularFresnelIndexTexture field.
inline
TextureChunkPtr &AnisotropicMaterialBase::getSpecularFresnelIndexTexture(void)
{
    return _sfSpecularFresnelIndexTexture.getValue();
}
#endif

//! Set the value of the AnisotropicMaterial::_sfSpecularFresnelIndexTexture field.
inline
void AnisotropicMaterialBase::setSpecularFresnelIndexTexture(const TextureChunkPtr &value)
{
    _sfSpecularFresnelIndexTexture.setValue(value);
}

//! Get the value of the AnisotropicMaterial::_sfSpecularColor field.
inline
Color3f &AnisotropicMaterialBase::editSpecularColor(void)
{
    return _sfSpecularColor.getValue();
}

//! Get the value of the AnisotropicMaterial::_sfSpecularColor field.
inline
const Color3f &AnisotropicMaterialBase::getSpecularColor(void) const
{
    return _sfSpecularColor.getValue();
}

#ifndef OSG_2_PREP
//! Get the value of the AnisotropicMaterial::_sfSpecularColor field.
inline
Color3f &AnisotropicMaterialBase::getSpecularColor(void)
{
    return _sfSpecularColor.getValue();
}
#endif

//! Set the value of the AnisotropicMaterial::_sfSpecularColor field.
inline
void AnisotropicMaterialBase::setSpecularColor(const Color3f &value)
{
    _sfSpecularColor.setValue(value);
}

//! Get the value of the AnisotropicMaterial::_sfSpecularColorTexture field.
inline
TextureChunkPtr &AnisotropicMaterialBase::editSpecularColorTexture(void)
{
    return _sfSpecularColorTexture.getValue();
}

//! Get the value of the AnisotropicMaterial::_sfSpecularColorTexture field.
inline
const TextureChunkPtr &AnisotropicMaterialBase::getSpecularColorTexture(void) const
{
    return _sfSpecularColorTexture.getValue();
}

#ifndef OSG_2_PREP
//! Get the value of the AnisotropicMaterial::_sfSpecularColorTexture field.
inline
TextureChunkPtr &AnisotropicMaterialBase::getSpecularColorTexture(void)
{
    return _sfSpecularColorTexture.getValue();
}
#endif

//! Set the value of the AnisotropicMaterial::_sfSpecularColorTexture field.
inline
void AnisotropicMaterialBase::setSpecularColorTexture(const TextureChunkPtr &value)
{
    _sfSpecularColorTexture.setValue(value);
}


OSG_END_NAMESPACE

