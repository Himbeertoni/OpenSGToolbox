/*---------------------------------------------------------------------------*\
 *                        OpenSG ToolBox Toolbox                             *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                         www.vrac.iastate.edu                              *
 *                                                                           *
 *                          Authors: David Kabala                            *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class BlinnMaterial
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#ifndef _OSGBLINNMATERIALBASE_H_
#define _OSGBLINNMATERIALBASE_H_
#ifdef __sgi
#pragma once
#endif


#include <OpenSG/OSGConfig.h>
#include "OSGToolboxDef.h"

#include <OpenSG/OSGBaseTypes.h>
#include <OpenSG/OSGRefPtr.h>
#include <OpenSG/OSGCoredNodePtr.h>

#include "OSGLambertMaterial.h" // Parent

#include <OpenSG/OSGReal32Fields.h> // SpecularEccentricity type
#include <OpenSG/OSGTextureChunkFields.h> // SpecularEccentricityTexture type
#include <OpenSG/OSGReal32Fields.h> // SpecularRolloff type
#include <OpenSG/OSGTextureChunkFields.h> // SpecularRolloffTexture type
#include <OpenSG/OSGColor3fFields.h> // SpecularColor type
#include <OpenSG/OSGTextureChunkFields.h> // SpecularColorTexture type

#include "OSGBlinnMaterialFields.h"

OSG_BEGIN_NAMESPACE

class BlinnMaterial;
class BinaryDataHandler;

//! \brief BlinnMaterial Base Class.

class OSG_TOOLBOXLIB_DLLMAPPING BlinnMaterialBase : public LambertMaterial
{
  private:

    typedef LambertMaterial    Inherited;

    /*==========================  PUBLIC  =================================*/
  public:

    typedef BlinnMaterialPtr  Ptr;

    enum
    {
        SpecularEccentricityFieldId        = Inherited::NextFieldId,
        SpecularEccentricityTextureFieldId = SpecularEccentricityFieldId        + 1,
        SpecularRolloffFieldId             = SpecularEccentricityTextureFieldId + 1,
        SpecularRolloffTextureFieldId      = SpecularRolloffFieldId             + 1,
        SpecularColorFieldId               = SpecularRolloffTextureFieldId      + 1,
        SpecularColorTextureFieldId        = SpecularColorFieldId               + 1,
        NextFieldId                        = SpecularColorTextureFieldId        + 1
    };

    static const OSG::BitVector SpecularEccentricityFieldMask;
    static const OSG::BitVector SpecularEccentricityTextureFieldMask;
    static const OSG::BitVector SpecularRolloffFieldMask;
    static const OSG::BitVector SpecularRolloffTextureFieldMask;
    static const OSG::BitVector SpecularColorFieldMask;
    static const OSG::BitVector SpecularColorTextureFieldMask;


    static const OSG::BitVector MTInfluenceMask;

    /*---------------------------------------------------------------------*/
    /*! \name                    Class Get                                 */
    /*! \{                                                                 */

    static        FieldContainerType &getClassType    (void); 
    static        UInt32              getClassTypeId  (void); 

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                FieldContainer Get                            */
    /*! \{                                                                 */

    virtual       FieldContainerType &getType  (void); 
    virtual const FieldContainerType &getType  (void) const; 

    virtual       UInt32              getContainerSize(void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Get                                 */
    /*! \{                                                                 */


           SFReal32            *editSFSpecularEccentricity(void);
     const SFReal32            *getSFSpecularEccentricity(void) const;
#ifndef OSG_2_PREP
           SFReal32            *getSFSpecularEccentricity(void);
#endif

           SFTextureChunkPtr   *editSFSpecularEccentricityTexture(void);
     const SFTextureChunkPtr   *getSFSpecularEccentricityTexture(void) const;
#ifndef OSG_2_PREP
           SFTextureChunkPtr   *getSFSpecularEccentricityTexture(void);
#endif

           SFReal32            *editSFSpecularRolloff(void);
     const SFReal32            *getSFSpecularRolloff(void) const;
#ifndef OSG_2_PREP
           SFReal32            *getSFSpecularRolloff(void);
#endif

           SFTextureChunkPtr   *editSFSpecularRolloffTexture(void);
     const SFTextureChunkPtr   *getSFSpecularRolloffTexture(void) const;
#ifndef OSG_2_PREP
           SFTextureChunkPtr   *getSFSpecularRolloffTexture(void);
#endif

           SFColor3f           *editSFSpecularColor  (void);
     const SFColor3f           *getSFSpecularColor  (void) const;
#ifndef OSG_2_PREP
           SFColor3f           *getSFSpecularColor  (void);
#endif

           SFTextureChunkPtr   *editSFSpecularColorTexture(void);
     const SFTextureChunkPtr   *getSFSpecularColorTexture(void) const;
#ifndef OSG_2_PREP
           SFTextureChunkPtr   *getSFSpecularColorTexture(void);
#endif


           Real32              &editSpecularEccentricity(void);
     const Real32              &getSpecularEccentricity(void) const;
#ifndef OSG_2_PREP
           Real32              &getSpecularEccentricity(void);
#endif

           TextureChunkPtr     &editSpecularEccentricityTexture(void);
     const TextureChunkPtr     &getSpecularEccentricityTexture(void) const;
#ifndef OSG_2_PREP
           TextureChunkPtr     &getSpecularEccentricityTexture(void);
#endif

           Real32              &editSpecularRolloff(void);
     const Real32              &getSpecularRolloff(void) const;
#ifndef OSG_2_PREP
           Real32              &getSpecularRolloff(void);
#endif

           TextureChunkPtr     &editSpecularRolloffTexture(void);
     const TextureChunkPtr     &getSpecularRolloffTexture(void) const;
#ifndef OSG_2_PREP
           TextureChunkPtr     &getSpecularRolloffTexture(void);
#endif

           Color3f             &editSpecularColor  (void);
     const Color3f             &getSpecularColor  (void) const;
#ifndef OSG_2_PREP
           Color3f             &getSpecularColor  (void);
#endif

           TextureChunkPtr     &editSpecularColorTexture(void);
     const TextureChunkPtr     &getSpecularColorTexture(void) const;
#ifndef OSG_2_PREP
           TextureChunkPtr     &getSpecularColorTexture(void);
#endif

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Set                                 */
    /*! \{                                                                 */

     void setSpecularEccentricity( const Real32 &value );
     void setSpecularEccentricityTexture( const TextureChunkPtr &value );
     void setSpecularRolloff( const Real32 &value );
     void setSpecularRolloffTexture( const TextureChunkPtr &value );
     void setSpecularColor  ( const Color3f &value );
     void setSpecularColorTexture( const TextureChunkPtr &value );

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Binary Access                              */
    /*! \{                                                                 */

    virtual UInt32 getBinSize (const BitVector         &whichField);
    virtual void   copyToBin  (      BinaryDataHandler &pMem,
                               const BitVector         &whichField);
    virtual void   copyFromBin(      BinaryDataHandler &pMem,
                               const BitVector         &whichField);


    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Construction                               */
    /*! \{                                                                 */

    static  BlinnMaterialPtr      create          (void); 
    static  BlinnMaterialPtr      createEmpty     (void); 

    /*! \}                                                                 */

    /*---------------------------------------------------------------------*/
    /*! \name                       Copy                                   */
    /*! \{                                                                 */

    virtual FieldContainerPtr     shallowCopy     (void) const; 

    /*! \}                                                                 */
    /*=========================  PROTECTED  ===============================*/
  protected:

    /*---------------------------------------------------------------------*/
    /*! \name                      Fields                                  */
    /*! \{                                                                 */

    SFReal32            _sfSpecularEccentricity;
    SFTextureChunkPtr   _sfSpecularEccentricityTexture;
    SFReal32            _sfSpecularRolloff;
    SFTextureChunkPtr   _sfSpecularRolloffTexture;
    SFColor3f           _sfSpecularColor;
    SFTextureChunkPtr   _sfSpecularColorTexture;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Constructors                               */
    /*! \{                                                                 */

    BlinnMaterialBase(void);
    BlinnMaterialBase(const BlinnMaterialBase &source);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Destructors                                */
    /*! \{                                                                 */

    virtual ~BlinnMaterialBase(void); 

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

#if !defined(OSG_FIXED_MFIELDSYNC)
    void executeSyncImpl(      BlinnMaterialBase *pOther,
                         const BitVector         &whichField);

    virtual void   executeSync(      FieldContainer    &other,
                               const BitVector         &whichField);
#else
    void executeSyncImpl(      BlinnMaterialBase *pOther,
                         const BitVector         &whichField,
                         const SyncInfo          &sInfo     );

    virtual void   executeSync(      FieldContainer    &other,
                               const BitVector         &whichField,
                               const SyncInfo          &sInfo);

    virtual void execBeginEdit     (const BitVector &whichField,
                                          UInt32     uiAspect,
                                          UInt32     uiContainerSize);

            void execBeginEditImpl (const BitVector &whichField,
                                          UInt32     uiAspect,
                                          UInt32     uiContainerSize);

    virtual void onDestroyAspect(UInt32 uiId, UInt32 uiAspect);
#endif

    /*! \}                                                                 */
    /*==========================  PRIVATE  ================================*/
  private:

    friend class FieldContainer;

    static FieldDescription   *_desc[];
    static FieldContainerType  _type;


    // prohibit default functions (move to 'public' if you need one)
    void operator =(const BlinnMaterialBase &source);
};

//---------------------------------------------------------------------------
//   Exported Types
//---------------------------------------------------------------------------


typedef BlinnMaterialBase *BlinnMaterialBaseP;

typedef osgIF<BlinnMaterialBase::isNodeCore,
              CoredNodePtr<BlinnMaterial>,
              FieldContainer::attempt_to_create_CoredNodePtr_on_non_NodeCore_FC
              >::_IRet BlinnMaterialNodePtr;

typedef RefPtr<BlinnMaterialPtr> BlinnMaterialRefPtr;

OSG_END_NAMESPACE

#endif /* _OSGBLINNMATERIALBASE_H_ */
