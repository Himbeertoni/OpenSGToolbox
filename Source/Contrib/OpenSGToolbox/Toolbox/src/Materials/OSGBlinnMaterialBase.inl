/*---------------------------------------------------------------------------*\
 *                        OpenSG ToolBox Toolbox                             *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                          Authors: David Kabala                            *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class BlinnMaterial!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <OpenSG/OSGConfig.h>

OSG_BEGIN_NAMESPACE


//! access the type of the class
inline
OSG::FieldContainerType &BlinnMaterialBase::getClassType(void)
{
    return _type; 
} 

//! access the numerical type of the class
inline
OSG::UInt32 BlinnMaterialBase::getClassTypeId(void) 
{
    return _type.getId(); 
} 

//! create a new instance of the class
inline
BlinnMaterialPtr BlinnMaterialBase::create(void) 
{
    BlinnMaterialPtr fc; 

    if(getClassType().getPrototype() != OSG::NullFC) 
    {
        fc = BlinnMaterialPtr::dcast(
            getClassType().getPrototype()-> shallowCopy()); 
    }
    
    return fc; 
}

//! create an empty new instance of the class, do not copy the prototype
inline
BlinnMaterialPtr BlinnMaterialBase::createEmpty(void) 
{ 
    BlinnMaterialPtr returnValue; 
    
    newPtr(returnValue); 

    return returnValue; 
}


/*------------------------------ get -----------------------------------*/

//! Get the BlinnMaterial::_sfSpecularEccentricity field.
inline
const SFReal32 *BlinnMaterialBase::getSFSpecularEccentricity(void) const
{
    return &_sfSpecularEccentricity;
}

//! Get the BlinnMaterial::_sfSpecularEccentricity field.
inline
SFReal32 *BlinnMaterialBase::editSFSpecularEccentricity(void)
{
    return &_sfSpecularEccentricity;
}

#ifndef OSG_2_PREP
//! Get the BlinnMaterial::_sfSpecularEccentricity field.
inline
SFReal32 *BlinnMaterialBase::getSFSpecularEccentricity(void)
{
    return &_sfSpecularEccentricity;
}
#endif

//! Get the BlinnMaterial::_sfSpecularEccentricityTexture field.
inline
const SFTextureChunkPtr *BlinnMaterialBase::getSFSpecularEccentricityTexture(void) const
{
    return &_sfSpecularEccentricityTexture;
}

//! Get the BlinnMaterial::_sfSpecularEccentricityTexture field.
inline
SFTextureChunkPtr *BlinnMaterialBase::editSFSpecularEccentricityTexture(void)
{
    return &_sfSpecularEccentricityTexture;
}

#ifndef OSG_2_PREP
//! Get the BlinnMaterial::_sfSpecularEccentricityTexture field.
inline
SFTextureChunkPtr *BlinnMaterialBase::getSFSpecularEccentricityTexture(void)
{
    return &_sfSpecularEccentricityTexture;
}
#endif

//! Get the BlinnMaterial::_sfSpecularRolloff field.
inline
const SFReal32 *BlinnMaterialBase::getSFSpecularRolloff(void) const
{
    return &_sfSpecularRolloff;
}

//! Get the BlinnMaterial::_sfSpecularRolloff field.
inline
SFReal32 *BlinnMaterialBase::editSFSpecularRolloff(void)
{
    return &_sfSpecularRolloff;
}

#ifndef OSG_2_PREP
//! Get the BlinnMaterial::_sfSpecularRolloff field.
inline
SFReal32 *BlinnMaterialBase::getSFSpecularRolloff(void)
{
    return &_sfSpecularRolloff;
}
#endif

//! Get the BlinnMaterial::_sfSpecularRolloffTexture field.
inline
const SFTextureChunkPtr *BlinnMaterialBase::getSFSpecularRolloffTexture(void) const
{
    return &_sfSpecularRolloffTexture;
}

//! Get the BlinnMaterial::_sfSpecularRolloffTexture field.
inline
SFTextureChunkPtr *BlinnMaterialBase::editSFSpecularRolloffTexture(void)
{
    return &_sfSpecularRolloffTexture;
}

#ifndef OSG_2_PREP
//! Get the BlinnMaterial::_sfSpecularRolloffTexture field.
inline
SFTextureChunkPtr *BlinnMaterialBase::getSFSpecularRolloffTexture(void)
{
    return &_sfSpecularRolloffTexture;
}
#endif

//! Get the BlinnMaterial::_sfSpecularColor field.
inline
const SFColor3f *BlinnMaterialBase::getSFSpecularColor(void) const
{
    return &_sfSpecularColor;
}

//! Get the BlinnMaterial::_sfSpecularColor field.
inline
SFColor3f *BlinnMaterialBase::editSFSpecularColor(void)
{
    return &_sfSpecularColor;
}

#ifndef OSG_2_PREP
//! Get the BlinnMaterial::_sfSpecularColor field.
inline
SFColor3f *BlinnMaterialBase::getSFSpecularColor(void)
{
    return &_sfSpecularColor;
}
#endif

//! Get the BlinnMaterial::_sfSpecularColorTexture field.
inline
const SFTextureChunkPtr *BlinnMaterialBase::getSFSpecularColorTexture(void) const
{
    return &_sfSpecularColorTexture;
}

//! Get the BlinnMaterial::_sfSpecularColorTexture field.
inline
SFTextureChunkPtr *BlinnMaterialBase::editSFSpecularColorTexture(void)
{
    return &_sfSpecularColorTexture;
}

#ifndef OSG_2_PREP
//! Get the BlinnMaterial::_sfSpecularColorTexture field.
inline
SFTextureChunkPtr *BlinnMaterialBase::getSFSpecularColorTexture(void)
{
    return &_sfSpecularColorTexture;
}
#endif


//! Get the value of the BlinnMaterial::_sfSpecularEccentricity field.
inline
Real32 &BlinnMaterialBase::editSpecularEccentricity(void)
{
    return _sfSpecularEccentricity.getValue();
}

//! Get the value of the BlinnMaterial::_sfSpecularEccentricity field.
inline
const Real32 &BlinnMaterialBase::getSpecularEccentricity(void) const
{
    return _sfSpecularEccentricity.getValue();
}

#ifndef OSG_2_PREP
//! Get the value of the BlinnMaterial::_sfSpecularEccentricity field.
inline
Real32 &BlinnMaterialBase::getSpecularEccentricity(void)
{
    return _sfSpecularEccentricity.getValue();
}
#endif

//! Set the value of the BlinnMaterial::_sfSpecularEccentricity field.
inline
void BlinnMaterialBase::setSpecularEccentricity(const Real32 &value)
{
    _sfSpecularEccentricity.setValue(value);
}

//! Get the value of the BlinnMaterial::_sfSpecularEccentricityTexture field.
inline
TextureChunkPtr &BlinnMaterialBase::editSpecularEccentricityTexture(void)
{
    return _sfSpecularEccentricityTexture.getValue();
}

//! Get the value of the BlinnMaterial::_sfSpecularEccentricityTexture field.
inline
const TextureChunkPtr &BlinnMaterialBase::getSpecularEccentricityTexture(void) const
{
    return _sfSpecularEccentricityTexture.getValue();
}

#ifndef OSG_2_PREP
//! Get the value of the BlinnMaterial::_sfSpecularEccentricityTexture field.
inline
TextureChunkPtr &BlinnMaterialBase::getSpecularEccentricityTexture(void)
{
    return _sfSpecularEccentricityTexture.getValue();
}
#endif

//! Set the value of the BlinnMaterial::_sfSpecularEccentricityTexture field.
inline
void BlinnMaterialBase::setSpecularEccentricityTexture(const TextureChunkPtr &value)
{
    _sfSpecularEccentricityTexture.setValue(value);
}

//! Get the value of the BlinnMaterial::_sfSpecularRolloff field.
inline
Real32 &BlinnMaterialBase::editSpecularRolloff(void)
{
    return _sfSpecularRolloff.getValue();
}

//! Get the value of the BlinnMaterial::_sfSpecularRolloff field.
inline
const Real32 &BlinnMaterialBase::getSpecularRolloff(void) const
{
    return _sfSpecularRolloff.getValue();
}

#ifndef OSG_2_PREP
//! Get the value of the BlinnMaterial::_sfSpecularRolloff field.
inline
Real32 &BlinnMaterialBase::getSpecularRolloff(void)
{
    return _sfSpecularRolloff.getValue();
}
#endif

//! Set the value of the BlinnMaterial::_sfSpecularRolloff field.
inline
void BlinnMaterialBase::setSpecularRolloff(const Real32 &value)
{
    _sfSpecularRolloff.setValue(value);
}

//! Get the value of the BlinnMaterial::_sfSpecularRolloffTexture field.
inline
TextureChunkPtr &BlinnMaterialBase::editSpecularRolloffTexture(void)
{
    return _sfSpecularRolloffTexture.getValue();
}

//! Get the value of the BlinnMaterial::_sfSpecularRolloffTexture field.
inline
const TextureChunkPtr &BlinnMaterialBase::getSpecularRolloffTexture(void) const
{
    return _sfSpecularRolloffTexture.getValue();
}

#ifndef OSG_2_PREP
//! Get the value of the BlinnMaterial::_sfSpecularRolloffTexture field.
inline
TextureChunkPtr &BlinnMaterialBase::getSpecularRolloffTexture(void)
{
    return _sfSpecularRolloffTexture.getValue();
}
#endif

//! Set the value of the BlinnMaterial::_sfSpecularRolloffTexture field.
inline
void BlinnMaterialBase::setSpecularRolloffTexture(const TextureChunkPtr &value)
{
    _sfSpecularRolloffTexture.setValue(value);
}

//! Get the value of the BlinnMaterial::_sfSpecularColor field.
inline
Color3f &BlinnMaterialBase::editSpecularColor(void)
{
    return _sfSpecularColor.getValue();
}

//! Get the value of the BlinnMaterial::_sfSpecularColor field.
inline
const Color3f &BlinnMaterialBase::getSpecularColor(void) const
{
    return _sfSpecularColor.getValue();
}

#ifndef OSG_2_PREP
//! Get the value of the BlinnMaterial::_sfSpecularColor field.
inline
Color3f &BlinnMaterialBase::getSpecularColor(void)
{
    return _sfSpecularColor.getValue();
}
#endif

//! Set the value of the BlinnMaterial::_sfSpecularColor field.
inline
void BlinnMaterialBase::setSpecularColor(const Color3f &value)
{
    _sfSpecularColor.setValue(value);
}

//! Get the value of the BlinnMaterial::_sfSpecularColorTexture field.
inline
TextureChunkPtr &BlinnMaterialBase::editSpecularColorTexture(void)
{
    return _sfSpecularColorTexture.getValue();
}

//! Get the value of the BlinnMaterial::_sfSpecularColorTexture field.
inline
const TextureChunkPtr &BlinnMaterialBase::getSpecularColorTexture(void) const
{
    return _sfSpecularColorTexture.getValue();
}

#ifndef OSG_2_PREP
//! Get the value of the BlinnMaterial::_sfSpecularColorTexture field.
inline
TextureChunkPtr &BlinnMaterialBase::getSpecularColorTexture(void)
{
    return _sfSpecularColorTexture.getValue();
}
#endif

//! Set the value of the BlinnMaterial::_sfSpecularColorTexture field.
inline
void BlinnMaterialBase::setSpecularColorTexture(const TextureChunkPtr &value)
{
    _sfSpecularColorTexture.setValue(value);
}


OSG_END_NAMESPACE

