/*---------------------------------------------------------------------------*\
 *                     OpenSG ToolBox UserInterface                          *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                         www.vrac.iastate.edu                              *
 *                                                                           *
 *                          Authors: David Kabala                            *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class DialogWindow!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#define OSG_COMPILEDIALOGWINDOWINST

#include <stdlib.h>
#include <stdio.h>

#include <OpenSG/OSGConfig.h>

#include "OSGDialogWindowBase.h"
#include "OSGDialogWindow.h"


OSG_BEGIN_NAMESPACE

const OSG::BitVector  DialogWindowBase::ErrorIconFieldMask = 
    (TypeTraits<BitVector>::One << DialogWindowBase::ErrorIconFieldId);

const OSG::BitVector  DialogWindowBase::QuestionIconFieldMask = 
    (TypeTraits<BitVector>::One << DialogWindowBase::QuestionIconFieldId);

const OSG::BitVector  DialogWindowBase::DefaultIconFieldMask = 
    (TypeTraits<BitVector>::One << DialogWindowBase::DefaultIconFieldId);

const OSG::BitVector  DialogWindowBase::ShowCancelFieldMask = 
    (TypeTraits<BitVector>::One << DialogWindowBase::ShowCancelFieldId);

const OSG::BitVector  DialogWindowBase::InputValuesFieldMask = 
    (TypeTraits<BitVector>::One << DialogWindowBase::InputValuesFieldId);

const OSG::BitVector DialogWindowBase::MTInfluenceMask = 
    (Inherited::MTInfluenceMask) | 
    (static_cast<BitVector>(0x0) << Inherited::NextFieldId); 


// Field descriptions

/*! \var Real32          DialogWindowBase::_sfErrorIcon
    
*/
/*! \var Real32          DialogWindowBase::_sfQuestionIcon
    
*/
/*! \var Real32          DialogWindowBase::_sfDefaultIcon
    
*/
/*! \var bool            DialogWindowBase::_sfShowCancel
    
*/
/*! \var std::string     DialogWindowBase::_sfInputValues
    
*/

//! DialogWindow description

FieldDescription *DialogWindowBase::_desc[] = 
{
    new FieldDescription(SFReal32::getClassType(), 
                     "errorIcon", 
                     ErrorIconFieldId, ErrorIconFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&DialogWindowBase::editSFErrorIcon)),
    new FieldDescription(SFReal32::getClassType(), 
                     "questionIcon", 
                     QuestionIconFieldId, QuestionIconFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&DialogWindowBase::editSFQuestionIcon)),
    new FieldDescription(SFReal32::getClassType(), 
                     "defaultIcon", 
                     DefaultIconFieldId, DefaultIconFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&DialogWindowBase::editSFDefaultIcon)),
    new FieldDescription(SFBool::getClassType(), 
                     "showCancel", 
                     ShowCancelFieldId, ShowCancelFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&DialogWindowBase::editSFShowCancel)),
    new FieldDescription(SFString::getClassType(), 
                     "inputValues", 
                     InputValuesFieldId, InputValuesFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&DialogWindowBase::editSFInputValues))
};


FieldContainerType DialogWindowBase::_type(
    "DialogWindow",
    "InternalWindow",
    NULL,
    reinterpret_cast<PrototypeCreateF>(&DialogWindowBase::createEmpty),
    DialogWindow::initMethod,
    _desc,
    sizeof(_desc));

//! DialogWindow Produced Methods

MethodDescription *DialogWindowBase::_methodDesc[] =
{
    new MethodDescription("DialogWindowClosing", 
                     DialogWindowClosingMethodId, 
                     SFEventPtr::getClassType(),
                     FunctorAccessMethod()),
    new MethodDescription("DialogWindowClosed", 
                     DialogWindowClosedMethodId, 
                     SFEventPtr::getClassType(),
                     FunctorAccessMethod())
};

EventProducerType DialogWindowBase::_producerType(
    "DialogWindowProducerType",
    "AbstractWindowProducerType",
    NULL,
    InitEventProducerFunctor(),
    _methodDesc,
    sizeof(_methodDesc));
//OSG_FIELD_CONTAINER_DEF(DialogWindowBase, DialogWindowPtr)

/*------------------------------ get -----------------------------------*/

FieldContainerType &DialogWindowBase::getType(void) 
{
    return _type; 
} 

const FieldContainerType &DialogWindowBase::getType(void) const 
{
    return _type;
} 

const EventProducerType &DialogWindowBase::getProducerType(void) const
{
    return _producerType;
}


FieldContainerPtr DialogWindowBase::shallowCopy(void) const 
{ 
    DialogWindowPtr returnValue; 

    newPtr(returnValue, dynamic_cast<const DialogWindow *>(this)); 

    return returnValue; 
}

UInt32 DialogWindowBase::getContainerSize(void) const 
{ 
    return sizeof(DialogWindow); 
}


#if !defined(OSG_FIXED_MFIELDSYNC)
void DialogWindowBase::executeSync(      FieldContainer &other,
                                    const BitVector      &whichField)
{
    this->executeSyncImpl(static_cast<DialogWindowBase *>(&other),
                          whichField);
}
#else
void DialogWindowBase::executeSync(      FieldContainer &other,
                                    const BitVector      &whichField,                                    const SyncInfo       &sInfo     )
{
    this->executeSyncImpl((DialogWindowBase *) &other, whichField, sInfo);
}
void DialogWindowBase::execBeginEdit(const BitVector &whichField, 
                                            UInt32     uiAspect,
                                            UInt32     uiContainerSize) 
{
    this->execBeginEditImpl(whichField, uiAspect, uiContainerSize);
}

void DialogWindowBase::onDestroyAspect(UInt32 uiId, UInt32 uiAspect)
{
    Inherited::onDestroyAspect(uiId, uiAspect);

}
#endif

/*------------------------- constructors ----------------------------------*/

#ifdef OSG_WIN32_ICL
#pragma warning (disable : 383)
#endif

DialogWindowBase::DialogWindowBase(void) :
    _sfErrorIcon              (), 
    _sfQuestionIcon           (), 
    _sfDefaultIcon            (), 
    _sfShowCancel             (bool(true)), 
    _sfInputValues            (), 
    Inherited() 
{
    _Producer.setType(&_producerType);
}

#ifdef OSG_WIN32_ICL
#pragma warning (default : 383)
#endif

DialogWindowBase::DialogWindowBase(const DialogWindowBase &source) :
    _sfErrorIcon              (source._sfErrorIcon              ), 
    _sfQuestionIcon           (source._sfQuestionIcon           ), 
    _sfDefaultIcon            (source._sfDefaultIcon            ), 
    _sfShowCancel             (source._sfShowCancel             ), 
    _sfInputValues            (source._sfInputValues            ), 
    Inherited                 (source)
{
}

/*-------------------------- destructors ----------------------------------*/

DialogWindowBase::~DialogWindowBase(void)
{
}

/*------------------------------ access -----------------------------------*/

UInt32 DialogWindowBase::getBinSize(const BitVector &whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (ErrorIconFieldMask & whichField))
    {
        returnValue += _sfErrorIcon.getBinSize();
    }

    if(FieldBits::NoField != (QuestionIconFieldMask & whichField))
    {
        returnValue += _sfQuestionIcon.getBinSize();
    }

    if(FieldBits::NoField != (DefaultIconFieldMask & whichField))
    {
        returnValue += _sfDefaultIcon.getBinSize();
    }

    if(FieldBits::NoField != (ShowCancelFieldMask & whichField))
    {
        returnValue += _sfShowCancel.getBinSize();
    }

    if(FieldBits::NoField != (InputValuesFieldMask & whichField))
    {
        returnValue += _sfInputValues.getBinSize();
    }


    return returnValue;
}

void DialogWindowBase::copyToBin(      BinaryDataHandler &pMem,
                                  const BitVector         &whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (ErrorIconFieldMask & whichField))
    {
        _sfErrorIcon.copyToBin(pMem);
    }

    if(FieldBits::NoField != (QuestionIconFieldMask & whichField))
    {
        _sfQuestionIcon.copyToBin(pMem);
    }

    if(FieldBits::NoField != (DefaultIconFieldMask & whichField))
    {
        _sfDefaultIcon.copyToBin(pMem);
    }

    if(FieldBits::NoField != (ShowCancelFieldMask & whichField))
    {
        _sfShowCancel.copyToBin(pMem);
    }

    if(FieldBits::NoField != (InputValuesFieldMask & whichField))
    {
        _sfInputValues.copyToBin(pMem);
    }


}

void DialogWindowBase::copyFromBin(      BinaryDataHandler &pMem,
                                    const BitVector    &whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (ErrorIconFieldMask & whichField))
    {
        _sfErrorIcon.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (QuestionIconFieldMask & whichField))
    {
        _sfQuestionIcon.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (DefaultIconFieldMask & whichField))
    {
        _sfDefaultIcon.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (ShowCancelFieldMask & whichField))
    {
        _sfShowCancel.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (InputValuesFieldMask & whichField))
    {
        _sfInputValues.copyFromBin(pMem);
    }


}

#if !defined(OSG_FIXED_MFIELDSYNC)
void DialogWindowBase::executeSyncImpl(      DialogWindowBase *pOther,
                                        const BitVector         &whichField)
{

    Inherited::executeSyncImpl(pOther, whichField);

    if(FieldBits::NoField != (ErrorIconFieldMask & whichField))
        _sfErrorIcon.syncWith(pOther->_sfErrorIcon);

    if(FieldBits::NoField != (QuestionIconFieldMask & whichField))
        _sfQuestionIcon.syncWith(pOther->_sfQuestionIcon);

    if(FieldBits::NoField != (DefaultIconFieldMask & whichField))
        _sfDefaultIcon.syncWith(pOther->_sfDefaultIcon);

    if(FieldBits::NoField != (ShowCancelFieldMask & whichField))
        _sfShowCancel.syncWith(pOther->_sfShowCancel);

    if(FieldBits::NoField != (InputValuesFieldMask & whichField))
        _sfInputValues.syncWith(pOther->_sfInputValues);


}
#else
void DialogWindowBase::executeSyncImpl(      DialogWindowBase *pOther,
                                        const BitVector         &whichField,
                                        const SyncInfo          &sInfo      )
{

    Inherited::executeSyncImpl(pOther, whichField, sInfo);

    if(FieldBits::NoField != (ErrorIconFieldMask & whichField))
        _sfErrorIcon.syncWith(pOther->_sfErrorIcon);

    if(FieldBits::NoField != (QuestionIconFieldMask & whichField))
        _sfQuestionIcon.syncWith(pOther->_sfQuestionIcon);

    if(FieldBits::NoField != (DefaultIconFieldMask & whichField))
        _sfDefaultIcon.syncWith(pOther->_sfDefaultIcon);

    if(FieldBits::NoField != (ShowCancelFieldMask & whichField))
        _sfShowCancel.syncWith(pOther->_sfShowCancel);

    if(FieldBits::NoField != (InputValuesFieldMask & whichField))
        _sfInputValues.syncWith(pOther->_sfInputValues);



}

void DialogWindowBase::execBeginEditImpl (const BitVector &whichField, 
                                                 UInt32     uiAspect,
                                                 UInt32     uiContainerSize)
{
    Inherited::execBeginEditImpl(whichField, uiAspect, uiContainerSize);

}
#endif



OSG_END_NAMESPACE

#include <OpenSG/OSGSFieldTypeDef.inl>
#include <OpenSG/OSGMFieldTypeDef.inl>

OSG_BEGIN_NAMESPACE

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldDataTraits<DialogWindowPtr>::_type("DialogWindowPtr", "InternalWindowPtr");
#endif

OSG_DLLEXPORT_SFIELD_DEF1(DialogWindowPtr, OSG_USERINTERFACELIB_DLLTMPLMAPPING);
OSG_DLLEXPORT_MFIELD_DEF1(DialogWindowPtr, OSG_USERINTERFACELIB_DLLTMPLMAPPING);


OSG_END_NAMESPACE

