/*---------------------------------------------------------------------------*\
 *                     OpenSG ToolBox UserInterface                          *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                         www.vrac.iastate.edu                              *
 *                                                                           *
 *   Authors: David Kabala, Alden Peterson, Lee Zaniewski, Jonathan Flory    *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class SpringLayoutConstraints
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#ifndef _OSGSPRINGLAYOUTCONSTRAINTSBASE_H_
#define _OSGSPRINGLAYOUTCONSTRAINTSBASE_H_
#ifdef __sgi
#pragma once
#endif


#include <OpenSG/OSGConfig.h>
#include "OSGUserInterfaceDef.h"

#include <OpenSG/OSGBaseTypes.h>
#include <OpenSG/OSGRefPtr.h>
#include <OpenSG/OSGCoredNodePtr.h>

#include "OSGLayoutConstraints.h" // Parent

#include "Layout/Spring/OSGLayoutSpringFields.h" // NorthSpring type
#include "Layout/Spring/OSGLayoutSpringFields.h" // WestSpring type
#include "Layout/Spring/OSGLayoutSpringFields.h" // EastSpring type
#include "Layout/Spring/OSGLayoutSpringFields.h" // SouthSpring type
#include "Layout/Spring/OSGLayoutSpringFields.h" // WidthSpring type
#include "Layout/Spring/OSGLayoutSpringFields.h" // HeightSpring type
#include "Layout/Spring/OSGLayoutSpringFields.h" // HorizontalCenterSpring type
#include "Layout/Spring/OSGLayoutSpringFields.h" // VerticalCenterSpring type
#include "Layout/Spring/OSGLayoutSpringFields.h" // BaselineSpring type
#include "Component/OSGComponentFields.h" // Component type

#include "OSGSpringLayoutConstraintsFields.h"

OSG_BEGIN_NAMESPACE

class SpringLayoutConstraints;
class BinaryDataHandler;

//! \brief SpringLayoutConstraints Base Class.

class OSG_USERINTERFACELIB_DLLMAPPING SpringLayoutConstraintsBase : public LayoutConstraints
{
  private:

    typedef LayoutConstraints    Inherited;

    /*==========================  PUBLIC  =================================*/
  public:

    typedef SpringLayoutConstraintsPtr  Ptr;

    enum
    {
        NorthSpringFieldId            = Inherited::NextFieldId,
        WestSpringFieldId             = NorthSpringFieldId            + 1,
        EastSpringFieldId             = WestSpringFieldId             + 1,
        SouthSpringFieldId            = EastSpringFieldId             + 1,
        WidthSpringFieldId            = SouthSpringFieldId            + 1,
        HeightSpringFieldId           = WidthSpringFieldId            + 1,
        HorizontalCenterSpringFieldId = HeightSpringFieldId           + 1,
        VerticalCenterSpringFieldId   = HorizontalCenterSpringFieldId + 1,
        BaselineSpringFieldId         = VerticalCenterSpringFieldId   + 1,
        ComponentFieldId              = BaselineSpringFieldId         + 1,
        NextFieldId                   = ComponentFieldId              + 1
    };

    static const OSG::BitVector NorthSpringFieldMask;
    static const OSG::BitVector WestSpringFieldMask;
    static const OSG::BitVector EastSpringFieldMask;
    static const OSG::BitVector SouthSpringFieldMask;
    static const OSG::BitVector WidthSpringFieldMask;
    static const OSG::BitVector HeightSpringFieldMask;
    static const OSG::BitVector HorizontalCenterSpringFieldMask;
    static const OSG::BitVector VerticalCenterSpringFieldMask;
    static const OSG::BitVector BaselineSpringFieldMask;
    static const OSG::BitVector ComponentFieldMask;


    static const OSG::BitVector MTInfluenceMask;

    /*---------------------------------------------------------------------*/
    /*! \name                    Class Get                                 */
    /*! \{                                                                 */

    static        FieldContainerType &getClassType    (void); 
    static        UInt32              getClassTypeId  (void); 

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                FieldContainer Get                            */
    /*! \{                                                                 */

    virtual       FieldContainerType &getType  (void); 
    virtual const FieldContainerType &getType  (void) const; 

    virtual       UInt32              getContainerSize(void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Get                                 */
    /*! \{                                                                 */

           SFLayoutSpringPtr   *getSFNorthSpring    (void);
           SFLayoutSpringPtr   *getSFWestSpring     (void);
           SFLayoutSpringPtr   *getSFEastSpring     (void);
           SFLayoutSpringPtr   *getSFSouthSpring    (void);
           SFLayoutSpringPtr   *getSFWidthSpring    (void);
           SFLayoutSpringPtr   *getSFHeightSpring   (void);
           SFLayoutSpringPtr   *getSFHorizontalCenterSpring(void);
           SFLayoutSpringPtr   *getSFVerticalCenterSpring(void);
           SFLayoutSpringPtr   *getSFBaselineSpring (void);
           SFComponentPtr      *getSFComponent      (void);

           LayoutSpringPtr     &getNorthSpring    (void);
     const LayoutSpringPtr     &getNorthSpring    (void) const;
           LayoutSpringPtr     &getWestSpring     (void);
     const LayoutSpringPtr     &getWestSpring     (void) const;
           LayoutSpringPtr     &getEastSpring     (void);
     const LayoutSpringPtr     &getEastSpring     (void) const;
           LayoutSpringPtr     &getSouthSpring    (void);
     const LayoutSpringPtr     &getSouthSpring    (void) const;
           LayoutSpringPtr     &getWidthSpring    (void);
     const LayoutSpringPtr     &getWidthSpring    (void) const;
           LayoutSpringPtr     &getHeightSpring   (void);
     const LayoutSpringPtr     &getHeightSpring   (void) const;
           LayoutSpringPtr     &getHorizontalCenterSpring(void);
     const LayoutSpringPtr     &getHorizontalCenterSpring(void) const;
           LayoutSpringPtr     &getVerticalCenterSpring(void);
     const LayoutSpringPtr     &getVerticalCenterSpring(void) const;
           LayoutSpringPtr     &getBaselineSpring (void);
     const LayoutSpringPtr     &getBaselineSpring (void) const;
           ComponentPtr        &getComponent      (void);
     const ComponentPtr        &getComponent      (void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Set                                 */
    /*! \{                                                                 */

     void setNorthSpring    ( const LayoutSpringPtr &value );
     void setWestSpring     ( const LayoutSpringPtr &value );
     void setEastSpring     ( const LayoutSpringPtr &value );
     void setSouthSpring    ( const LayoutSpringPtr &value );
     void setWidthSpring    ( const LayoutSpringPtr &value );
     void setHeightSpring   ( const LayoutSpringPtr &value );
     void setHorizontalCenterSpring( const LayoutSpringPtr &value );
     void setVerticalCenterSpring( const LayoutSpringPtr &value );
     void setBaselineSpring ( const LayoutSpringPtr &value );
     void setComponent      ( const ComponentPtr &value );

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Binary Access                              */
    /*! \{                                                                 */

    virtual UInt32 getBinSize (const BitVector         &whichField);
    virtual void   copyToBin  (      BinaryDataHandler &pMem,
                               const BitVector         &whichField);
    virtual void   copyFromBin(      BinaryDataHandler &pMem,
                               const BitVector         &whichField);


    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Construction                               */
    /*! \{                                                                 */

    static  SpringLayoutConstraintsPtr      create          (void); 
    static  SpringLayoutConstraintsPtr      createEmpty     (void); 

    /*! \}                                                                 */

    /*---------------------------------------------------------------------*/
    /*! \name                       Copy                                   */
    /*! \{                                                                 */

    virtual FieldContainerPtr     shallowCopy     (void) const; 

    /*! \}                                                                 */
    /*=========================  PROTECTED  ===============================*/
  protected:

    /*---------------------------------------------------------------------*/
    /*! \name                      Fields                                  */
    /*! \{                                                                 */

    SFLayoutSpringPtr   _sfNorthSpring;
    SFLayoutSpringPtr   _sfWestSpring;
    SFLayoutSpringPtr   _sfEastSpring;
    SFLayoutSpringPtr   _sfSouthSpring;
    SFLayoutSpringPtr   _sfWidthSpring;
    SFLayoutSpringPtr   _sfHeightSpring;
    SFLayoutSpringPtr   _sfHorizontalCenterSpring;
    SFLayoutSpringPtr   _sfVerticalCenterSpring;
    SFLayoutSpringPtr   _sfBaselineSpring;
    SFComponentPtr      _sfComponent;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Constructors                               */
    /*! \{                                                                 */

    SpringLayoutConstraintsBase(void);
    SpringLayoutConstraintsBase(const SpringLayoutConstraintsBase &source);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Destructors                                */
    /*! \{                                                                 */

    virtual ~SpringLayoutConstraintsBase(void); 

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

#if !defined(OSG_FIXED_MFIELDSYNC)
    void executeSyncImpl(      SpringLayoutConstraintsBase *pOther,
                         const BitVector         &whichField);

    virtual void   executeSync(      FieldContainer    &other,
                               const BitVector         &whichField);
#else
    void executeSyncImpl(      SpringLayoutConstraintsBase *pOther,
                         const BitVector         &whichField,
                         const SyncInfo          &sInfo     );

    virtual void   executeSync(      FieldContainer    &other,
                               const BitVector         &whichField,
                               const SyncInfo          &sInfo);

    virtual void execBeginEdit     (const BitVector &whichField,
                                          UInt32     uiAspect,
                                          UInt32     uiContainerSize);

            void execBeginEditImpl (const BitVector &whichField,
                                          UInt32     uiAspect,
                                          UInt32     uiContainerSize);

    virtual void onDestroyAspect(UInt32 uiId, UInt32 uiAspect);
#endif

    /*! \}                                                                 */
    /*==========================  PRIVATE  ================================*/
  private:

    friend class FieldContainer;

    static FieldDescription   *_desc[];
    static FieldContainerType  _type;


    // prohibit default functions (move to 'public' if you need one)
    void operator =(const SpringLayoutConstraintsBase &source);
};

//---------------------------------------------------------------------------
//   Exported Types
//---------------------------------------------------------------------------


typedef SpringLayoutConstraintsBase *SpringLayoutConstraintsBaseP;

typedef osgIF<SpringLayoutConstraintsBase::isNodeCore,
              CoredNodePtr<SpringLayoutConstraints>,
              FieldContainer::attempt_to_create_CoredNodePtr_on_non_NodeCore_FC
              >::_IRet SpringLayoutConstraintsNodePtr;

typedef RefPtr<SpringLayoutConstraintsPtr> SpringLayoutConstraintsRefPtr;

OSG_END_NAMESPACE

#define OSGSPRINGLAYOUTCONSTRAINTSBASE_HEADER_CVSID "@(#)$Id: FCBaseTemplate_h.h,v 1.40 2005/07/20 00:10:14 vossg Exp $"

#endif /* _OSGSPRINGLAYOUTCONSTRAINTSBASE_H_ */
