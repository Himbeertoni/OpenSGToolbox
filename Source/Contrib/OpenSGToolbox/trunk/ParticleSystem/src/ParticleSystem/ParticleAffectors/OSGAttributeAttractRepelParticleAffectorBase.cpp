/*---------------------------------------------------------------------------*\
 *                     OpenSG ToolBox Particle System                        *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                         www.vrac.iastate.edu                              *
 *                                                                           *
 *                          Authors: David Kabala                            *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class AttributeAttractRepelParticleAffector!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#define OSG_COMPILEATTRIBUTEATTRACTREPELPARTICLEAFFECTORINST

#include <stdlib.h>
#include <stdio.h>

#include <OpenSG/OSGConfig.h>

#include "OSGAttributeAttractRepelParticleAffectorBase.h"
#include "OSGAttributeAttractRepelParticleAffector.h"


OSG_BEGIN_NAMESPACE

const OSG::BitVector  AttributeAttractRepelParticleAffectorBase::AttributeAffectedFieldMask = 
    (TypeTraits<BitVector>::One << AttributeAttractRepelParticleAffectorBase::AttributeAffectedFieldId);

const OSG::BitVector  AttributeAttractRepelParticleAffectorBase::MinDistanceFieldMask = 
    (TypeTraits<BitVector>::One << AttributeAttractRepelParticleAffectorBase::MinDistanceFieldId);

const OSG::BitVector  AttributeAttractRepelParticleAffectorBase::MaxDistanceFieldMask = 
    (TypeTraits<BitVector>::One << AttributeAttractRepelParticleAffectorBase::MaxDistanceFieldId);

const OSG::BitVector  AttributeAttractRepelParticleAffectorBase::QuadraticFieldMask = 
    (TypeTraits<BitVector>::One << AttributeAttractRepelParticleAffectorBase::QuadraticFieldId);

const OSG::BitVector  AttributeAttractRepelParticleAffectorBase::LinearFieldMask = 
    (TypeTraits<BitVector>::One << AttributeAttractRepelParticleAffectorBase::LinearFieldId);

const OSG::BitVector  AttributeAttractRepelParticleAffectorBase::ConstantFieldMask = 
    (TypeTraits<BitVector>::One << AttributeAttractRepelParticleAffectorBase::ConstantFieldId);

const OSG::BitVector AttributeAttractRepelParticleAffectorBase::MTInfluenceMask = 
    (Inherited::MTInfluenceMask) | 
    (static_cast<BitVector>(0x0) << Inherited::NextFieldId); 


// Field descriptions

/*! \var UInt32          AttributeAttractRepelParticleAffectorBase::_sfAttributeAffected
    
*/
/*! \var Real32          AttributeAttractRepelParticleAffectorBase::_sfMinDistance
    
*/
/*! \var Real32          AttributeAttractRepelParticleAffectorBase::_sfMaxDistance
    
*/
/*! \var Real32          AttributeAttractRepelParticleAffectorBase::_sfQuadratic
    
*/
/*! \var Real32          AttributeAttractRepelParticleAffectorBase::_sfLinear
    
*/
/*! \var Real32          AttributeAttractRepelParticleAffectorBase::_sfConstant
    
*/

//! AttributeAttractRepelParticleAffector description

FieldDescription *AttributeAttractRepelParticleAffectorBase::_desc[] = 
{
    new FieldDescription(SFUInt32::getClassType(), 
                     "AttributeAffected", 
                     AttributeAffectedFieldId, AttributeAffectedFieldMask,
                     false,
                     (FieldAccessMethod) &AttributeAttractRepelParticleAffectorBase::getSFAttributeAffected),
    new FieldDescription(SFReal32::getClassType(), 
                     "MinDistance", 
                     MinDistanceFieldId, MinDistanceFieldMask,
                     false,
                     (FieldAccessMethod) &AttributeAttractRepelParticleAffectorBase::getSFMinDistance),
    new FieldDescription(SFReal32::getClassType(), 
                     "MaxDistance", 
                     MaxDistanceFieldId, MaxDistanceFieldMask,
                     false,
                     (FieldAccessMethod) &AttributeAttractRepelParticleAffectorBase::getSFMaxDistance),
    new FieldDescription(SFReal32::getClassType(), 
                     "Quadratic", 
                     QuadraticFieldId, QuadraticFieldMask,
                     false,
                     (FieldAccessMethod) &AttributeAttractRepelParticleAffectorBase::getSFQuadratic),
    new FieldDescription(SFReal32::getClassType(), 
                     "Linear", 
                     LinearFieldId, LinearFieldMask,
                     false,
                     (FieldAccessMethod) &AttributeAttractRepelParticleAffectorBase::getSFLinear),
    new FieldDescription(SFReal32::getClassType(), 
                     "Constant", 
                     ConstantFieldId, ConstantFieldMask,
                     false,
                     (FieldAccessMethod) &AttributeAttractRepelParticleAffectorBase::getSFConstant)
};


FieldContainerType AttributeAttractRepelParticleAffectorBase::_type(
    "AttributeAttractRepelParticleAffector",
    "ParticleAffector",
    NULL,
    (PrototypeCreateF) &AttributeAttractRepelParticleAffectorBase::createEmpty,
    AttributeAttractRepelParticleAffector::initMethod,
    _desc,
    sizeof(_desc));

//OSG_FIELD_CONTAINER_DEF(AttributeAttractRepelParticleAffectorBase, AttributeAttractRepelParticleAffectorPtr)

/*------------------------------ get -----------------------------------*/

FieldContainerType &AttributeAttractRepelParticleAffectorBase::getType(void) 
{
    return _type; 
} 

const FieldContainerType &AttributeAttractRepelParticleAffectorBase::getType(void) const 
{
    return _type;
} 


FieldContainerPtr AttributeAttractRepelParticleAffectorBase::shallowCopy(void) const 
{ 
    AttributeAttractRepelParticleAffectorPtr returnValue; 

    newPtr(returnValue, dynamic_cast<const AttributeAttractRepelParticleAffector *>(this)); 

    return returnValue; 
}

UInt32 AttributeAttractRepelParticleAffectorBase::getContainerSize(void) const 
{ 
    return sizeof(AttributeAttractRepelParticleAffector); 
}


#if !defined(OSG_FIXED_MFIELDSYNC)
void AttributeAttractRepelParticleAffectorBase::executeSync(      FieldContainer &other,
                                    const BitVector      &whichField)
{
    this->executeSyncImpl((AttributeAttractRepelParticleAffectorBase *) &other, whichField);
}
#else
void AttributeAttractRepelParticleAffectorBase::executeSync(      FieldContainer &other,
                                    const BitVector      &whichField,                                    const SyncInfo       &sInfo     )
{
    this->executeSyncImpl((AttributeAttractRepelParticleAffectorBase *) &other, whichField, sInfo);
}
void AttributeAttractRepelParticleAffectorBase::execBeginEdit(const BitVector &whichField, 
                                            UInt32     uiAspect,
                                            UInt32     uiContainerSize) 
{
    this->execBeginEditImpl(whichField, uiAspect, uiContainerSize);
}

void AttributeAttractRepelParticleAffectorBase::onDestroyAspect(UInt32 uiId, UInt32 uiAspect)
{
    Inherited::onDestroyAspect(uiId, uiAspect);

}
#endif

/*------------------------- constructors ----------------------------------*/

#ifdef OSG_WIN32_ICL
#pragma warning (disable : 383)
#endif

AttributeAttractRepelParticleAffectorBase::AttributeAttractRepelParticleAffectorBase(void) :
    _sfAttributeAffected      (UInt32(AttributeAttractRepelParticleAffector::POSITION_ATTRIBUTE)), 
    _sfMinDistance            (Real32(0.0)), 
    _sfMaxDistance            (Real32(100.0)), 
    _sfQuadratic              (Real32(1.0f)), 
    _sfLinear                 (Real32(1.0f)), 
    _sfConstant               (Real32(1.0f)), 
    Inherited() 
{
}

#ifdef OSG_WIN32_ICL
#pragma warning (default : 383)
#endif

AttributeAttractRepelParticleAffectorBase::AttributeAttractRepelParticleAffectorBase(const AttributeAttractRepelParticleAffectorBase &source) :
    _sfAttributeAffected      (source._sfAttributeAffected      ), 
    _sfMinDistance            (source._sfMinDistance            ), 
    _sfMaxDistance            (source._sfMaxDistance            ), 
    _sfQuadratic              (source._sfQuadratic              ), 
    _sfLinear                 (source._sfLinear                 ), 
    _sfConstant               (source._sfConstant               ), 
    Inherited                 (source)
{
}

/*-------------------------- destructors ----------------------------------*/

AttributeAttractRepelParticleAffectorBase::~AttributeAttractRepelParticleAffectorBase(void)
{
}

/*------------------------------ access -----------------------------------*/

UInt32 AttributeAttractRepelParticleAffectorBase::getBinSize(const BitVector &whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (AttributeAffectedFieldMask & whichField))
    {
        returnValue += _sfAttributeAffected.getBinSize();
    }

    if(FieldBits::NoField != (MinDistanceFieldMask & whichField))
    {
        returnValue += _sfMinDistance.getBinSize();
    }

    if(FieldBits::NoField != (MaxDistanceFieldMask & whichField))
    {
        returnValue += _sfMaxDistance.getBinSize();
    }

    if(FieldBits::NoField != (QuadraticFieldMask & whichField))
    {
        returnValue += _sfQuadratic.getBinSize();
    }

    if(FieldBits::NoField != (LinearFieldMask & whichField))
    {
        returnValue += _sfLinear.getBinSize();
    }

    if(FieldBits::NoField != (ConstantFieldMask & whichField))
    {
        returnValue += _sfConstant.getBinSize();
    }


    return returnValue;
}

void AttributeAttractRepelParticleAffectorBase::copyToBin(      BinaryDataHandler &pMem,
                                  const BitVector         &whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (AttributeAffectedFieldMask & whichField))
    {
        _sfAttributeAffected.copyToBin(pMem);
    }

    if(FieldBits::NoField != (MinDistanceFieldMask & whichField))
    {
        _sfMinDistance.copyToBin(pMem);
    }

    if(FieldBits::NoField != (MaxDistanceFieldMask & whichField))
    {
        _sfMaxDistance.copyToBin(pMem);
    }

    if(FieldBits::NoField != (QuadraticFieldMask & whichField))
    {
        _sfQuadratic.copyToBin(pMem);
    }

    if(FieldBits::NoField != (LinearFieldMask & whichField))
    {
        _sfLinear.copyToBin(pMem);
    }

    if(FieldBits::NoField != (ConstantFieldMask & whichField))
    {
        _sfConstant.copyToBin(pMem);
    }


}

void AttributeAttractRepelParticleAffectorBase::copyFromBin(      BinaryDataHandler &pMem,
                                    const BitVector    &whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (AttributeAffectedFieldMask & whichField))
    {
        _sfAttributeAffected.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (MinDistanceFieldMask & whichField))
    {
        _sfMinDistance.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (MaxDistanceFieldMask & whichField))
    {
        _sfMaxDistance.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (QuadraticFieldMask & whichField))
    {
        _sfQuadratic.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (LinearFieldMask & whichField))
    {
        _sfLinear.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (ConstantFieldMask & whichField))
    {
        _sfConstant.copyFromBin(pMem);
    }


}

#if !defined(OSG_FIXED_MFIELDSYNC)
void AttributeAttractRepelParticleAffectorBase::executeSyncImpl(      AttributeAttractRepelParticleAffectorBase *pOther,
                                        const BitVector         &whichField)
{

    Inherited::executeSyncImpl(pOther, whichField);

    if(FieldBits::NoField != (AttributeAffectedFieldMask & whichField))
        _sfAttributeAffected.syncWith(pOther->_sfAttributeAffected);

    if(FieldBits::NoField != (MinDistanceFieldMask & whichField))
        _sfMinDistance.syncWith(pOther->_sfMinDistance);

    if(FieldBits::NoField != (MaxDistanceFieldMask & whichField))
        _sfMaxDistance.syncWith(pOther->_sfMaxDistance);

    if(FieldBits::NoField != (QuadraticFieldMask & whichField))
        _sfQuadratic.syncWith(pOther->_sfQuadratic);

    if(FieldBits::NoField != (LinearFieldMask & whichField))
        _sfLinear.syncWith(pOther->_sfLinear);

    if(FieldBits::NoField != (ConstantFieldMask & whichField))
        _sfConstant.syncWith(pOther->_sfConstant);


}
#else
void AttributeAttractRepelParticleAffectorBase::executeSyncImpl(      AttributeAttractRepelParticleAffectorBase *pOther,
                                        const BitVector         &whichField,
                                        const SyncInfo          &sInfo      )
{

    Inherited::executeSyncImpl(pOther, whichField, sInfo);

    if(FieldBits::NoField != (AttributeAffectedFieldMask & whichField))
        _sfAttributeAffected.syncWith(pOther->_sfAttributeAffected);

    if(FieldBits::NoField != (MinDistanceFieldMask & whichField))
        _sfMinDistance.syncWith(pOther->_sfMinDistance);

    if(FieldBits::NoField != (MaxDistanceFieldMask & whichField))
        _sfMaxDistance.syncWith(pOther->_sfMaxDistance);

    if(FieldBits::NoField != (QuadraticFieldMask & whichField))
        _sfQuadratic.syncWith(pOther->_sfQuadratic);

    if(FieldBits::NoField != (LinearFieldMask & whichField))
        _sfLinear.syncWith(pOther->_sfLinear);

    if(FieldBits::NoField != (ConstantFieldMask & whichField))
        _sfConstant.syncWith(pOther->_sfConstant);



}

void AttributeAttractRepelParticleAffectorBase::execBeginEditImpl (const BitVector &whichField, 
                                                 UInt32     uiAspect,
                                                 UInt32     uiContainerSize)
{
    Inherited::execBeginEditImpl(whichField, uiAspect, uiContainerSize);

}
#endif



OSG_END_NAMESPACE

#include <OpenSG/OSGSFieldTypeDef.inl>
#include <OpenSG/OSGMFieldTypeDef.inl>

OSG_BEGIN_NAMESPACE

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldDataTraits<AttributeAttractRepelParticleAffectorPtr>::_type("AttributeAttractRepelParticleAffectorPtr", "ParticleAffectorPtr");
#endif

OSG_DLLEXPORT_SFIELD_DEF1(AttributeAttractRepelParticleAffectorPtr, OSG_PARTICLESYSTEMLIB_DLLTMPLMAPPING);
OSG_DLLEXPORT_MFIELD_DEF1(AttributeAttractRepelParticleAffectorPtr, OSG_PARTICLESYSTEMLIB_DLLTMPLMAPPING);


/*------------------------------------------------------------------------*/
/*                              cvs id's                                  */

#ifdef OSG_SGI_CC
#pragma set woff 1174
#endif

#ifdef OSG_LINUX_ICC
#pragma warning( disable : 177 )
#endif

namespace
{
    static Char8 cvsid_cpp       [] = "@(#)$Id: FCBaseTemplate_cpp.h,v 1.47 2006/03/17 17:03:19 pdaehne Exp $";
    static Char8 cvsid_hpp       [] = OSGATTRIBUTEATTRACTREPELPARTICLEAFFECTORBASE_HEADER_CVSID;
    static Char8 cvsid_inl       [] = OSGATTRIBUTEATTRACTREPELPARTICLEAFFECTORBASE_INLINE_CVSID;

    static Char8 cvsid_fields_hpp[] = OSGATTRIBUTEATTRACTREPELPARTICLEAFFECTORFIELDS_HEADER_CVSID;
}

OSG_END_NAMESPACE

