/*---------------------------------------------------------------------------*\
 *                         OpenSG ToolBox Physics                            *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                          www.vrac.iastate.edu                             *
 *                                                                           *
 *                Authors: Behboud Kalantary, David Kabala                   *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class CollisionEvent!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#define OSG_COMPILECOLLISIONEVENTINST

#include <stdlib.h>
#include <stdio.h>

#include <OpenSG/OSGConfig.h>

#include "OSGCollisionEventBase.h"
#include "OSGCollisionEvent.h"


OSG_BEGIN_NAMESPACE

const OSG::BitVector  CollisionEventBase::PositionFieldMask = 
    (TypeTraits<BitVector>::One << CollisionEventBase::PositionFieldId);

const OSG::BitVector  CollisionEventBase::NormalFieldMask = 
    (TypeTraits<BitVector>::One << CollisionEventBase::NormalFieldId);

const OSG::BitVector  CollisionEventBase::Object1GeomFieldMask = 
    (TypeTraits<BitVector>::One << CollisionEventBase::Object1GeomFieldId);

const OSG::BitVector  CollisionEventBase::Object2GeomFieldMask = 
    (TypeTraits<BitVector>::One << CollisionEventBase::Object2GeomFieldId);

const OSG::BitVector  CollisionEventBase::Object1CategoryBitsFieldMask = 
    (TypeTraits<BitVector>::One << CollisionEventBase::Object1CategoryBitsFieldId);

const OSG::BitVector  CollisionEventBase::Object1CollideBitsFieldMask = 
    (TypeTraits<BitVector>::One << CollisionEventBase::Object1CollideBitsFieldId);

const OSG::BitVector  CollisionEventBase::Object2CategoryBitsFieldMask = 
    (TypeTraits<BitVector>::One << CollisionEventBase::Object2CategoryBitsFieldId);

const OSG::BitVector  CollisionEventBase::Object2CollideBitsFieldMask = 
    (TypeTraits<BitVector>::One << CollisionEventBase::Object2CollideBitsFieldId);

const OSG::BitVector  CollisionEventBase::Object1VelocityFieldMask = 
    (TypeTraits<BitVector>::One << CollisionEventBase::Object1VelocityFieldId);

const OSG::BitVector  CollisionEventBase::Object2VelocityFieldMask = 
    (TypeTraits<BitVector>::One << CollisionEventBase::Object2VelocityFieldId);

const OSG::BitVector  CollisionEventBase::ProjectedNormalSpeedFieldMask = 
    (TypeTraits<BitVector>::One << CollisionEventBase::ProjectedNormalSpeedFieldId);

const OSG::BitVector CollisionEventBase::MTInfluenceMask = 
    (Inherited::MTInfluenceMask) | 
    (static_cast<BitVector>(0x0) << Inherited::NextFieldId); 


// Field descriptions

/*! \var Pnt3f           CollisionEventBase::_sfPosition
    
*/
/*! \var Vec3f           CollisionEventBase::_sfNormal
    
*/
/*! \var PhysicsGeomPtr  CollisionEventBase::_sfObject1Geom
    
*/
/*! \var PhysicsGeomPtr  CollisionEventBase::_sfObject2Geom
    
*/
/*! \var UInt64          CollisionEventBase::_sfObject1CategoryBits
    
*/
/*! \var UInt64          CollisionEventBase::_sfObject1CollideBits
    
*/
/*! \var UInt64          CollisionEventBase::_sfObject2CategoryBits
    
*/
/*! \var UInt64          CollisionEventBase::_sfObject2CollideBits
    
*/
/*! \var Vec3f           CollisionEventBase::_sfObject1Velocity
    
*/
/*! \var Vec3f           CollisionEventBase::_sfObject2Velocity
    
*/
/*! \var Real32          CollisionEventBase::_sfProjectedNormalSpeed
    
*/

//! CollisionEvent description

FieldDescription *CollisionEventBase::_desc[] = 
{
    new FieldDescription(SFPnt3f::getClassType(), 
                     "Position", 
                     PositionFieldId, PositionFieldMask,
                     true,
                     reinterpret_cast<FieldAccessMethod>(&CollisionEventBase::editSFPosition)),
    new FieldDescription(SFVec3f::getClassType(), 
                     "Normal", 
                     NormalFieldId, NormalFieldMask,
                     true,
                     reinterpret_cast<FieldAccessMethod>(&CollisionEventBase::editSFNormal)),
    new FieldDescription(SFPhysicsGeomPtr::getClassType(), 
                     "Object1Geom", 
                     Object1GeomFieldId, Object1GeomFieldMask,
                     true,
                     reinterpret_cast<FieldAccessMethod>(&CollisionEventBase::editSFObject1Geom)),
    new FieldDescription(SFPhysicsGeomPtr::getClassType(), 
                     "Object2Geom", 
                     Object2GeomFieldId, Object2GeomFieldMask,
                     true,
                     reinterpret_cast<FieldAccessMethod>(&CollisionEventBase::editSFObject2Geom)),
    new FieldDescription(SFUInt64::getClassType(), 
                     "Object1CategoryBits", 
                     Object1CategoryBitsFieldId, Object1CategoryBitsFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&CollisionEventBase::editSFObject1CategoryBits)),
    new FieldDescription(SFUInt64::getClassType(), 
                     "Object1CollideBits", 
                     Object1CollideBitsFieldId, Object1CollideBitsFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&CollisionEventBase::editSFObject1CollideBits)),
    new FieldDescription(SFUInt64::getClassType(), 
                     "Object2CategoryBits", 
                     Object2CategoryBitsFieldId, Object2CategoryBitsFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&CollisionEventBase::editSFObject2CategoryBits)),
    new FieldDescription(SFUInt64::getClassType(), 
                     "Object2CollideBits", 
                     Object2CollideBitsFieldId, Object2CollideBitsFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&CollisionEventBase::editSFObject2CollideBits)),
    new FieldDescription(SFVec3f::getClassType(), 
                     "Object1Velocity", 
                     Object1VelocityFieldId, Object1VelocityFieldMask,
                     true,
                     reinterpret_cast<FieldAccessMethod>(&CollisionEventBase::editSFObject1Velocity)),
    new FieldDescription(SFVec3f::getClassType(), 
                     "Object2Velocity", 
                     Object2VelocityFieldId, Object2VelocityFieldMask,
                     true,
                     reinterpret_cast<FieldAccessMethod>(&CollisionEventBase::editSFObject2Velocity)),
    new FieldDescription(SFReal32::getClassType(), 
                     "ProjectedNormalSpeed", 
                     ProjectedNormalSpeedFieldId, ProjectedNormalSpeedFieldMask,
                     true,
                     reinterpret_cast<FieldAccessMethod>(&CollisionEventBase::editSFProjectedNormalSpeed))
};


FieldContainerType CollisionEventBase::_type(
    "CollisionEvent",
    "Event",
    NULL,
    reinterpret_cast<PrototypeCreateF>(&CollisionEventBase::createEmpty),
    CollisionEvent::initMethod,
    _desc,
    sizeof(_desc));

//OSG_FIELD_CONTAINER_DEF(CollisionEventBase, CollisionEventPtr)

/*------------------------------ get -----------------------------------*/

FieldContainerType &CollisionEventBase::getType(void) 
{
    return _type; 
} 

const FieldContainerType &CollisionEventBase::getType(void) const 
{
    return _type;
} 


FieldContainerPtr CollisionEventBase::shallowCopy(void) const 
{ 
    CollisionEventPtr returnValue; 

    newPtr(returnValue, dynamic_cast<const CollisionEvent *>(this)); 

    return returnValue; 
}

UInt32 CollisionEventBase::getContainerSize(void) const 
{ 
    return sizeof(CollisionEvent); 
}


#if !defined(OSG_FIXED_MFIELDSYNC)
void CollisionEventBase::executeSync(      FieldContainer &other,
                                    const BitVector      &whichField)
{
    this->executeSyncImpl(static_cast<CollisionEventBase *>(&other),
                          whichField);
}
#else
void CollisionEventBase::executeSync(      FieldContainer &other,
                                    const BitVector      &whichField,                                    const SyncInfo       &sInfo     )
{
    this->executeSyncImpl((CollisionEventBase *) &other, whichField, sInfo);
}
void CollisionEventBase::execBeginEdit(const BitVector &whichField, 
                                            UInt32     uiAspect,
                                            UInt32     uiContainerSize) 
{
    this->execBeginEditImpl(whichField, uiAspect, uiContainerSize);
}

void CollisionEventBase::onDestroyAspect(UInt32 uiId, UInt32 uiAspect)
{
    Inherited::onDestroyAspect(uiId, uiAspect);

}
#endif

/*------------------------- constructors ----------------------------------*/

#ifdef OSG_WIN32_ICL
#pragma warning (disable : 383)
#endif

CollisionEventBase::CollisionEventBase(void) :
    _sfPosition               (Pnt3f(0.0f,0.0f,0.0f)), 
    _sfNormal                 (Vec3f(0.0f,0.0f,0.0f)), 
    _sfObject1Geom            (PhysicsGeomPtr(NullFC)), 
    _sfObject2Geom            (PhysicsGeomPtr(NullFC)), 
    _sfObject1CategoryBits    (), 
    _sfObject1CollideBits     (), 
    _sfObject2CategoryBits    (), 
    _sfObject2CollideBits     (), 
    _sfObject1Velocity        (Vec3f(0.0f,0.0f,0.0f)), 
    _sfObject2Velocity        (Vec3f(0.0f,0.0f,0.0f)), 
    _sfProjectedNormalSpeed   (Real32(0.0f)), 
    Inherited() 
{
}

#ifdef OSG_WIN32_ICL
#pragma warning (default : 383)
#endif

CollisionEventBase::CollisionEventBase(const CollisionEventBase &source) :
    _sfPosition               (source._sfPosition               ), 
    _sfNormal                 (source._sfNormal                 ), 
    _sfObject1Geom            (source._sfObject1Geom            ), 
    _sfObject2Geom            (source._sfObject2Geom            ), 
    _sfObject1CategoryBits    (source._sfObject1CategoryBits    ), 
    _sfObject1CollideBits     (source._sfObject1CollideBits     ), 
    _sfObject2CategoryBits    (source._sfObject2CategoryBits    ), 
    _sfObject2CollideBits     (source._sfObject2CollideBits     ), 
    _sfObject1Velocity        (source._sfObject1Velocity        ), 
    _sfObject2Velocity        (source._sfObject2Velocity        ), 
    _sfProjectedNormalSpeed   (source._sfProjectedNormalSpeed   ), 
    Inherited                 (source)
{
}

/*-------------------------- destructors ----------------------------------*/

CollisionEventBase::~CollisionEventBase(void)
{
}

/*------------------------------ access -----------------------------------*/

UInt32 CollisionEventBase::getBinSize(const BitVector &whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (PositionFieldMask & whichField))
    {
        returnValue += _sfPosition.getBinSize();
    }

    if(FieldBits::NoField != (NormalFieldMask & whichField))
    {
        returnValue += _sfNormal.getBinSize();
    }

    if(FieldBits::NoField != (Object1GeomFieldMask & whichField))
    {
        returnValue += _sfObject1Geom.getBinSize();
    }

    if(FieldBits::NoField != (Object2GeomFieldMask & whichField))
    {
        returnValue += _sfObject2Geom.getBinSize();
    }

    if(FieldBits::NoField != (Object1CategoryBitsFieldMask & whichField))
    {
        returnValue += _sfObject1CategoryBits.getBinSize();
    }

    if(FieldBits::NoField != (Object1CollideBitsFieldMask & whichField))
    {
        returnValue += _sfObject1CollideBits.getBinSize();
    }

    if(FieldBits::NoField != (Object2CategoryBitsFieldMask & whichField))
    {
        returnValue += _sfObject2CategoryBits.getBinSize();
    }

    if(FieldBits::NoField != (Object2CollideBitsFieldMask & whichField))
    {
        returnValue += _sfObject2CollideBits.getBinSize();
    }

    if(FieldBits::NoField != (Object1VelocityFieldMask & whichField))
    {
        returnValue += _sfObject1Velocity.getBinSize();
    }

    if(FieldBits::NoField != (Object2VelocityFieldMask & whichField))
    {
        returnValue += _sfObject2Velocity.getBinSize();
    }

    if(FieldBits::NoField != (ProjectedNormalSpeedFieldMask & whichField))
    {
        returnValue += _sfProjectedNormalSpeed.getBinSize();
    }


    return returnValue;
}

void CollisionEventBase::copyToBin(      BinaryDataHandler &pMem,
                                  const BitVector         &whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (PositionFieldMask & whichField))
    {
        _sfPosition.copyToBin(pMem);
    }

    if(FieldBits::NoField != (NormalFieldMask & whichField))
    {
        _sfNormal.copyToBin(pMem);
    }

    if(FieldBits::NoField != (Object1GeomFieldMask & whichField))
    {
        _sfObject1Geom.copyToBin(pMem);
    }

    if(FieldBits::NoField != (Object2GeomFieldMask & whichField))
    {
        _sfObject2Geom.copyToBin(pMem);
    }

    if(FieldBits::NoField != (Object1CategoryBitsFieldMask & whichField))
    {
        _sfObject1CategoryBits.copyToBin(pMem);
    }

    if(FieldBits::NoField != (Object1CollideBitsFieldMask & whichField))
    {
        _sfObject1CollideBits.copyToBin(pMem);
    }

    if(FieldBits::NoField != (Object2CategoryBitsFieldMask & whichField))
    {
        _sfObject2CategoryBits.copyToBin(pMem);
    }

    if(FieldBits::NoField != (Object2CollideBitsFieldMask & whichField))
    {
        _sfObject2CollideBits.copyToBin(pMem);
    }

    if(FieldBits::NoField != (Object1VelocityFieldMask & whichField))
    {
        _sfObject1Velocity.copyToBin(pMem);
    }

    if(FieldBits::NoField != (Object2VelocityFieldMask & whichField))
    {
        _sfObject2Velocity.copyToBin(pMem);
    }

    if(FieldBits::NoField != (ProjectedNormalSpeedFieldMask & whichField))
    {
        _sfProjectedNormalSpeed.copyToBin(pMem);
    }


}

void CollisionEventBase::copyFromBin(      BinaryDataHandler &pMem,
                                    const BitVector    &whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (PositionFieldMask & whichField))
    {
        _sfPosition.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (NormalFieldMask & whichField))
    {
        _sfNormal.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (Object1GeomFieldMask & whichField))
    {
        _sfObject1Geom.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (Object2GeomFieldMask & whichField))
    {
        _sfObject2Geom.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (Object1CategoryBitsFieldMask & whichField))
    {
        _sfObject1CategoryBits.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (Object1CollideBitsFieldMask & whichField))
    {
        _sfObject1CollideBits.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (Object2CategoryBitsFieldMask & whichField))
    {
        _sfObject2CategoryBits.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (Object2CollideBitsFieldMask & whichField))
    {
        _sfObject2CollideBits.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (Object1VelocityFieldMask & whichField))
    {
        _sfObject1Velocity.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (Object2VelocityFieldMask & whichField))
    {
        _sfObject2Velocity.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (ProjectedNormalSpeedFieldMask & whichField))
    {
        _sfProjectedNormalSpeed.copyFromBin(pMem);
    }


}

#if !defined(OSG_FIXED_MFIELDSYNC)
void CollisionEventBase::executeSyncImpl(      CollisionEventBase *pOther,
                                        const BitVector         &whichField)
{

    Inherited::executeSyncImpl(pOther, whichField);

    if(FieldBits::NoField != (PositionFieldMask & whichField))
        _sfPosition.syncWith(pOther->_sfPosition);

    if(FieldBits::NoField != (NormalFieldMask & whichField))
        _sfNormal.syncWith(pOther->_sfNormal);

    if(FieldBits::NoField != (Object1GeomFieldMask & whichField))
        _sfObject1Geom.syncWith(pOther->_sfObject1Geom);

    if(FieldBits::NoField != (Object2GeomFieldMask & whichField))
        _sfObject2Geom.syncWith(pOther->_sfObject2Geom);

    if(FieldBits::NoField != (Object1CategoryBitsFieldMask & whichField))
        _sfObject1CategoryBits.syncWith(pOther->_sfObject1CategoryBits);

    if(FieldBits::NoField != (Object1CollideBitsFieldMask & whichField))
        _sfObject1CollideBits.syncWith(pOther->_sfObject1CollideBits);

    if(FieldBits::NoField != (Object2CategoryBitsFieldMask & whichField))
        _sfObject2CategoryBits.syncWith(pOther->_sfObject2CategoryBits);

    if(FieldBits::NoField != (Object2CollideBitsFieldMask & whichField))
        _sfObject2CollideBits.syncWith(pOther->_sfObject2CollideBits);

    if(FieldBits::NoField != (Object1VelocityFieldMask & whichField))
        _sfObject1Velocity.syncWith(pOther->_sfObject1Velocity);

    if(FieldBits::NoField != (Object2VelocityFieldMask & whichField))
        _sfObject2Velocity.syncWith(pOther->_sfObject2Velocity);

    if(FieldBits::NoField != (ProjectedNormalSpeedFieldMask & whichField))
        _sfProjectedNormalSpeed.syncWith(pOther->_sfProjectedNormalSpeed);


}
#else
void CollisionEventBase::executeSyncImpl(      CollisionEventBase *pOther,
                                        const BitVector         &whichField,
                                        const SyncInfo          &sInfo      )
{

    Inherited::executeSyncImpl(pOther, whichField, sInfo);

    if(FieldBits::NoField != (PositionFieldMask & whichField))
        _sfPosition.syncWith(pOther->_sfPosition);

    if(FieldBits::NoField != (NormalFieldMask & whichField))
        _sfNormal.syncWith(pOther->_sfNormal);

    if(FieldBits::NoField != (Object1GeomFieldMask & whichField))
        _sfObject1Geom.syncWith(pOther->_sfObject1Geom);

    if(FieldBits::NoField != (Object2GeomFieldMask & whichField))
        _sfObject2Geom.syncWith(pOther->_sfObject2Geom);

    if(FieldBits::NoField != (Object1CategoryBitsFieldMask & whichField))
        _sfObject1CategoryBits.syncWith(pOther->_sfObject1CategoryBits);

    if(FieldBits::NoField != (Object1CollideBitsFieldMask & whichField))
        _sfObject1CollideBits.syncWith(pOther->_sfObject1CollideBits);

    if(FieldBits::NoField != (Object2CategoryBitsFieldMask & whichField))
        _sfObject2CategoryBits.syncWith(pOther->_sfObject2CategoryBits);

    if(FieldBits::NoField != (Object2CollideBitsFieldMask & whichField))
        _sfObject2CollideBits.syncWith(pOther->_sfObject2CollideBits);

    if(FieldBits::NoField != (Object1VelocityFieldMask & whichField))
        _sfObject1Velocity.syncWith(pOther->_sfObject1Velocity);

    if(FieldBits::NoField != (Object2VelocityFieldMask & whichField))
        _sfObject2Velocity.syncWith(pOther->_sfObject2Velocity);

    if(FieldBits::NoField != (ProjectedNormalSpeedFieldMask & whichField))
        _sfProjectedNormalSpeed.syncWith(pOther->_sfProjectedNormalSpeed);



}

void CollisionEventBase::execBeginEditImpl (const BitVector &whichField, 
                                                 UInt32     uiAspect,
                                                 UInt32     uiContainerSize)
{
    Inherited::execBeginEditImpl(whichField, uiAspect, uiContainerSize);

}
#endif



OSG_END_NAMESPACE

#include <OpenSG/OSGSFieldTypeDef.inl>

OSG_BEGIN_NAMESPACE

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldDataTraits<CollisionEventPtr>::_type("CollisionEventPtr", "EventPtr");
#endif

OSG_DLLEXPORT_SFIELD_DEF1(CollisionEventPtr, OSG_PHYSICSLIB_DLLTMPLMAPPING);


OSG_END_NAMESPACE

