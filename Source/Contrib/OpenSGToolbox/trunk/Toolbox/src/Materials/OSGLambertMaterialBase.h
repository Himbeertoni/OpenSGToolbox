/*---------------------------------------------------------------------------*\
 *                     OpenSG ToolBox UserInterface                          *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                         www.vrac.iastate.edu                              *
 *                                                                           *
 *                          Authors: David Kabala                            *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class LambertMaterial
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#ifndef _OSGLAMBERTMATERIALBASE_H_
#define _OSGLAMBERTMATERIALBASE_H_
#ifdef __sgi
#pragma once
#endif


#include <OpenSG/OSGConfig.h>
#include "OSGToolboxDef.h"

#include <OpenSG/OSGBaseTypes.h>
#include <OpenSG/OSGRefPtr.h>
#include <OpenSG/OSGCoredNodePtr.h>

#include <OpenSG/OSGChunkMaterial.h> // Parent

#include <OpenSG/OSGBoolFields.h> // VertexColoring type
#include <OpenSG/OSGSHLParameterChunkFields.h> // Parameters type
#include <OpenSG/OSGSHLChunkFields.h> // Shader type
#include <OpenSG/OSGStateChunkFields.h> // ExtraChunks type
#include <OpenSG/OSGUInt8Fields.h> // NumLights type
#include <OpenSG/OSGColor3fFields.h> // Color type
#include <OpenSG/OSGTextureChunkFields.h> // ColorTexture type
#include <OpenSG/OSGColor3fFields.h> // Transparency type
#include <OpenSG/OSGTextureChunkFields.h> // TransparencyTexture type
#include <OpenSG/OSGColor3fFields.h> // AmbientColor type
#include <OpenSG/OSGTextureChunkFields.h> // AmbientColorTexture type
#include <OpenSG/OSGColor3fFields.h> // Incandescence type
#include <OpenSG/OSGTextureChunkFields.h> // IncandescenceTexture type
#include <OpenSG/OSGTextureChunkFields.h> // NormalMapTexture type
#include <OpenSG/OSGReal32Fields.h> // BumpDepth type
#include <OpenSG/OSGTextureChunkFields.h> // BumpDepthTexture type
#include <OpenSG/OSGReal32Fields.h> // Diffuse type
#include <OpenSG/OSGTextureChunkFields.h> // DiffuseTexture type
#include <OpenSG/OSGReal32Fields.h> // Transleucence type
#include <OpenSG/OSGTextureChunkFields.h> // TransleucenceTexture type
#include <OpenSG/OSGReal32Fields.h> // TransleucenceDepth type
#include <OpenSG/OSGTextureChunkFields.h> // TransleucenceDepthTexture type
#include <OpenSG/OSGReal32Fields.h> // TransleucenceFocus type
#include <OpenSG/OSGTextureChunkFields.h> // TransleucenceFocusTexture type

#include "OSGLambertMaterialFields.h"
OSG_BEGIN_NAMESPACE

class LambertMaterial;
class BinaryDataHandler;

//! \brief LambertMaterial Base Class.

class OSG_TOOLBOXLIB_DLLMAPPING LambertMaterialBase : public ChunkMaterial
{
  private:

    typedef ChunkMaterial    Inherited;

    /*==========================  PUBLIC  =================================*/
  public:

    typedef LambertMaterialPtr  Ptr;

    enum
    {
        VertexColoringFieldId            = Inherited::NextFieldId,
        ParametersFieldId                = VertexColoringFieldId            + 1,
        ShaderFieldId                    = ParametersFieldId                + 1,
        ExtraChunksFieldId               = ShaderFieldId                    + 1,
        NumLightsFieldId                 = ExtraChunksFieldId               + 1,
        ColorFieldId                     = NumLightsFieldId                 + 1,
        ColorTextureFieldId              = ColorFieldId                     + 1,
        TransparencyFieldId              = ColorTextureFieldId              + 1,
        TransparencyTextureFieldId       = TransparencyFieldId              + 1,
        AmbientColorFieldId              = TransparencyTextureFieldId       + 1,
        AmbientColorTextureFieldId       = AmbientColorFieldId              + 1,
        IncandescenceFieldId             = AmbientColorTextureFieldId       + 1,
        IncandescenceTextureFieldId      = IncandescenceFieldId             + 1,
        NormalMapTextureFieldId          = IncandescenceTextureFieldId      + 1,
        BumpDepthFieldId                 = NormalMapTextureFieldId          + 1,
        BumpDepthTextureFieldId          = BumpDepthFieldId                 + 1,
        DiffuseFieldId                   = BumpDepthTextureFieldId          + 1,
        DiffuseTextureFieldId            = DiffuseFieldId                   + 1,
        TransleucenceFieldId             = DiffuseTextureFieldId            + 1,
        TransleucenceTextureFieldId      = TransleucenceFieldId             + 1,
        TransleucenceDepthFieldId        = TransleucenceTextureFieldId      + 1,
        TransleucenceDepthTextureFieldId = TransleucenceDepthFieldId        + 1,
        TransleucenceFocusFieldId        = TransleucenceDepthTextureFieldId + 1,
        TransleucenceFocusTextureFieldId = TransleucenceFocusFieldId        + 1,
        NextFieldId                      = TransleucenceFocusTextureFieldId + 1
    };

    static const OSG::BitVector VertexColoringFieldMask;
    static const OSG::BitVector ParametersFieldMask;
    static const OSG::BitVector ShaderFieldMask;
    static const OSG::BitVector ExtraChunksFieldMask;
    static const OSG::BitVector NumLightsFieldMask;
    static const OSG::BitVector ColorFieldMask;
    static const OSG::BitVector ColorTextureFieldMask;
    static const OSG::BitVector TransparencyFieldMask;
    static const OSG::BitVector TransparencyTextureFieldMask;
    static const OSG::BitVector AmbientColorFieldMask;
    static const OSG::BitVector AmbientColorTextureFieldMask;
    static const OSG::BitVector IncandescenceFieldMask;
    static const OSG::BitVector IncandescenceTextureFieldMask;
    static const OSG::BitVector NormalMapTextureFieldMask;
    static const OSG::BitVector BumpDepthFieldMask;
    static const OSG::BitVector BumpDepthTextureFieldMask;
    static const OSG::BitVector DiffuseFieldMask;
    static const OSG::BitVector DiffuseTextureFieldMask;
    static const OSG::BitVector TransleucenceFieldMask;
    static const OSG::BitVector TransleucenceTextureFieldMask;
    static const OSG::BitVector TransleucenceDepthFieldMask;
    static const OSG::BitVector TransleucenceDepthTextureFieldMask;
    static const OSG::BitVector TransleucenceFocusFieldMask;
    static const OSG::BitVector TransleucenceFocusTextureFieldMask;


    static const OSG::BitVector MTInfluenceMask;

    /*---------------------------------------------------------------------*/
    /*! \name                    Class Get                                 */
    /*! \{                                                                 */

    static        FieldContainerType &getClassType    (void); 
    static        UInt32              getClassTypeId  (void); 

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                FieldContainer Get                            */
    /*! \{                                                                 */

    virtual       FieldContainerType &getType  (void); 
    virtual const FieldContainerType &getType  (void) const; 

    virtual       UInt32              getContainerSize(void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Get                                 */
    /*! \{                                                                 */


           SFBool              *editSFVertexColoring (void);
     const SFBool              *getSFVertexColoring (void) const;
     const SFSHLChunkPtr       *getSFShader         (void) const;

           MFStateChunkPtr     *editMFExtraChunks    (void);
     const MFStateChunkPtr     *getMFExtraChunks    (void) const;

           SFUInt8             *editSFNumLights      (void);
     const SFUInt8             *getSFNumLights      (void) const;

           SFColor3f           *editSFColor          (void);
     const SFColor3f           *getSFColor          (void) const;

           SFTextureChunkPtr   *editSFColorTexture   (void);
     const SFTextureChunkPtr   *getSFColorTexture   (void) const;

           SFColor3f           *editSFTransparency   (void);
     const SFColor3f           *getSFTransparency   (void) const;

           SFTextureChunkPtr   *editSFTransparencyTexture(void);
     const SFTextureChunkPtr   *getSFTransparencyTexture(void) const;

           SFColor3f           *editSFAmbientColor   (void);
     const SFColor3f           *getSFAmbientColor   (void) const;

           SFTextureChunkPtr   *editSFAmbientColorTexture(void);
     const SFTextureChunkPtr   *getSFAmbientColorTexture(void) const;

           SFColor3f           *editSFIncandescence  (void);
     const SFColor3f           *getSFIncandescence  (void) const;

           SFTextureChunkPtr   *editSFIncandescenceTexture(void);
     const SFTextureChunkPtr   *getSFIncandescenceTexture(void) const;

           SFTextureChunkPtr   *editSFNormalMapTexture(void);
     const SFTextureChunkPtr   *getSFNormalMapTexture(void) const;

           SFReal32            *editSFBumpDepth      (void);
     const SFReal32            *getSFBumpDepth      (void) const;

           SFTextureChunkPtr   *editSFBumpDepthTexture(void);
     const SFTextureChunkPtr   *getSFBumpDepthTexture(void) const;

           SFReal32            *editSFDiffuse        (void);
     const SFReal32            *getSFDiffuse        (void) const;

           SFTextureChunkPtr   *editSFDiffuseTexture (void);
     const SFTextureChunkPtr   *getSFDiffuseTexture (void) const;

           SFReal32            *editSFTransleucence  (void);
     const SFReal32            *getSFTransleucence  (void) const;

           SFTextureChunkPtr   *editSFTransleucenceTexture(void);
     const SFTextureChunkPtr   *getSFTransleucenceTexture(void) const;

           SFReal32            *editSFTransleucenceDepth(void);
     const SFReal32            *getSFTransleucenceDepth(void) const;

           SFTextureChunkPtr   *editSFTransleucenceDepthTexture(void);
     const SFTextureChunkPtr   *getSFTransleucenceDepthTexture(void) const;

           SFReal32            *editSFTransleucenceFocus(void);
     const SFReal32            *getSFTransleucenceFocus(void) const;

           SFTextureChunkPtr   *editSFTransleucenceFocusTexture(void);
     const SFTextureChunkPtr   *getSFTransleucenceFocusTexture(void) const;


           bool                &editVertexColoring (void);
     const bool                &getVertexColoring (void) const;


     const SHLChunkPtr         &getShader         (void) const;

           UInt8               &editNumLights      (void);
     const UInt8               &getNumLights      (void) const;

           Color3f             &editColor          (void);
     const Color3f             &getColor          (void) const;

           TextureChunkPtr     &editColorTexture   (void);
     const TextureChunkPtr     &getColorTexture   (void) const;

           Color3f             &editTransparency   (void);
     const Color3f             &getTransparency   (void) const;

           TextureChunkPtr     &editTransparencyTexture(void);
     const TextureChunkPtr     &getTransparencyTexture(void) const;

           Color3f             &editAmbientColor   (void);
     const Color3f             &getAmbientColor   (void) const;

           TextureChunkPtr     &editAmbientColorTexture(void);
     const TextureChunkPtr     &getAmbientColorTexture(void) const;

           Color3f             &editIncandescence  (void);
     const Color3f             &getIncandescence  (void) const;

           TextureChunkPtr     &editIncandescenceTexture(void);
     const TextureChunkPtr     &getIncandescenceTexture(void) const;

           TextureChunkPtr     &editNormalMapTexture(void);
     const TextureChunkPtr     &getNormalMapTexture(void) const;

           Real32              &editBumpDepth      (void);
     const Real32              &getBumpDepth      (void) const;

           TextureChunkPtr     &editBumpDepthTexture(void);
     const TextureChunkPtr     &getBumpDepthTexture(void) const;

           Real32              &editDiffuse        (void);
     const Real32              &getDiffuse        (void) const;

           TextureChunkPtr     &editDiffuseTexture (void);
     const TextureChunkPtr     &getDiffuseTexture (void) const;

           Real32              &editTransleucence  (void);
     const Real32              &getTransleucence  (void) const;

           TextureChunkPtr     &editTransleucenceTexture(void);
     const TextureChunkPtr     &getTransleucenceTexture(void) const;

           Real32              &editTransleucenceDepth(void);
     const Real32              &getTransleucenceDepth(void) const;

           TextureChunkPtr     &editTransleucenceDepthTexture(void);
     const TextureChunkPtr     &getTransleucenceDepthTexture(void) const;

           Real32              &editTransleucenceFocus(void);
     const Real32              &getTransleucenceFocus(void) const;

           TextureChunkPtr     &editTransleucenceFocusTexture(void);
     const TextureChunkPtr     &getTransleucenceFocusTexture(void) const;

           StateChunkPtr       &editExtraChunks    (const UInt32 index);
     const StateChunkPtr       &getExtraChunks    (const UInt32 index) const;
#ifndef OSG_2_PREP
           MFStateChunkPtr     &getExtraChunks    (void);
     const MFStateChunkPtr     &getExtraChunks    (void) const;
#endif

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Set                                 */
    /*! \{                                                                 */

     void setVertexColoring ( const bool &value );
     void setNumLights      ( const UInt8 &value );
     void setColor          ( const Color3f &value );
     void setColorTexture   ( const TextureChunkPtr &value );
     void setTransparency   ( const Color3f &value );
     void setTransparencyTexture( const TextureChunkPtr &value );
     void setAmbientColor   ( const Color3f &value );
     void setAmbientColorTexture( const TextureChunkPtr &value );
     void setIncandescence  ( const Color3f &value );
     void setIncandescenceTexture( const TextureChunkPtr &value );
     void setNormalMapTexture( const TextureChunkPtr &value );
     void setBumpDepth      ( const Real32 &value );
     void setBumpDepthTexture( const TextureChunkPtr &value );
     void setDiffuse        ( const Real32 &value );
     void setDiffuseTexture ( const TextureChunkPtr &value );
     void setTransleucence  ( const Real32 &value );
     void setTransleucenceTexture( const TextureChunkPtr &value );
     void setTransleucenceDepth( const Real32 &value );
     void setTransleucenceDepthTexture( const TextureChunkPtr &value );
     void setTransleucenceFocus( const Real32 &value );
     void setTransleucenceFocusTexture( const TextureChunkPtr &value );

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Binary Access                              */
    /*! \{                                                                 */

    virtual UInt32 getBinSize (const BitVector         &whichField);
    virtual void   copyToBin  (      BinaryDataHandler &pMem,
                               const BitVector         &whichField);
    virtual void   copyFromBin(      BinaryDataHandler &pMem,
                               const BitVector         &whichField);


    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Construction                               */
    /*! \{                                                                 */

    static  LambertMaterialPtr      create          (void); 
    static  LambertMaterialPtr      createEmpty     (void); 

    /*! \}                                                                 */

    /*---------------------------------------------------------------------*/
    /*! \name                       Copy                                   */
    /*! \{                                                                 */

    virtual FieldContainerPtr     shallowCopy     (void) const; 

    /*! \}                                                                 */
    /*=========================  PROTECTED  ===============================*/
  protected:

    /*---------------------------------------------------------------------*/
    /*! \name                      Fields                                  */
    /*! \{                                                                 */

    SFBool              _sfVertexColoring;
    SFSHLParameterChunkPtr   _sfParameters;
    SFSHLChunkPtr       _sfShader;
    MFStateChunkPtr     _mfExtraChunks;
    SFUInt8             _sfNumLights;
    SFColor3f           _sfColor;
    SFTextureChunkPtr   _sfColorTexture;
    SFColor3f           _sfTransparency;
    SFTextureChunkPtr   _sfTransparencyTexture;
    SFColor3f           _sfAmbientColor;
    SFTextureChunkPtr   _sfAmbientColorTexture;
    SFColor3f           _sfIncandescence;
    SFTextureChunkPtr   _sfIncandescenceTexture;
    SFTextureChunkPtr   _sfNormalMapTexture;
    SFReal32            _sfBumpDepth;
    SFTextureChunkPtr   _sfBumpDepthTexture;
    SFReal32            _sfDiffuse;
    SFTextureChunkPtr   _sfDiffuseTexture;
    SFReal32            _sfTransleucence;
    SFTextureChunkPtr   _sfTransleucenceTexture;
    SFReal32            _sfTransleucenceDepth;
    SFTextureChunkPtr   _sfTransleucenceDepthTexture;
    SFReal32            _sfTransleucenceFocus;
    SFTextureChunkPtr   _sfTransleucenceFocusTexture;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Constructors                               */
    /*! \{                                                                 */

    LambertMaterialBase(void);
    LambertMaterialBase(const LambertMaterialBase &source);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Destructors                                */
    /*! \{                                                                 */

    virtual ~LambertMaterialBase(void); 

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Get                                 */
    /*! \{                                                                 */

           SFSHLParameterChunkPtr *editSFParameters     (void);
     const SFSHLParameterChunkPtr *getSFParameters     (void) const;
           SFSHLChunkPtr       *editSFShader         (void);

           SHLParameterChunkPtr &editParameters     (void);
     const SHLParameterChunkPtr &getParameters     (void) const;
           SHLChunkPtr         &editShader         (void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Set                                 */
    /*! \{                                                                 */

     void setParameters     (const SHLParameterChunkPtr &value);
     void setShader         (const SHLChunkPtr &value);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

#if !defined(OSG_FIXED_MFIELDSYNC)
    void executeSyncImpl(      LambertMaterialBase *pOther,
                         const BitVector         &whichField);

    virtual void   executeSync(      FieldContainer    &other,
                               const BitVector         &whichField);
#else
    void executeSyncImpl(      LambertMaterialBase *pOther,
                         const BitVector         &whichField,
                         const SyncInfo          &sInfo     );

    virtual void   executeSync(      FieldContainer    &other,
                               const BitVector         &whichField,
                               const SyncInfo          &sInfo);

    virtual void execBeginEdit     (const BitVector &whichField,
                                          UInt32     uiAspect,
                                          UInt32     uiContainerSize);

            void execBeginEditImpl (const BitVector &whichField,
                                          UInt32     uiAspect,
                                          UInt32     uiContainerSize);

    virtual void onDestroyAspect(UInt32 uiId, UInt32 uiAspect);
#endif

    /*! \}                                                                 */
    /*==========================  PRIVATE  ================================*/
  private:

    friend class FieldContainer;

    static FieldDescription   *_desc[];
    static FieldContainerType  _type;


    // prohibit default functions (move to 'public' if you need one)
    void operator =(const LambertMaterialBase &source);
};

//---------------------------------------------------------------------------
//   Exported Types
//---------------------------------------------------------------------------


typedef LambertMaterialBase *LambertMaterialBaseP;

typedef osgIF<LambertMaterialBase::isNodeCore,
              CoredNodePtr<LambertMaterial>,
              FieldContainer::attempt_to_create_CoredNodePtr_on_non_NodeCore_FC
              >::_IRet LambertMaterialNodePtr;

typedef RefPtr<LambertMaterialPtr> LambertMaterialRefPtr;

OSG_END_NAMESPACE

#endif /* _OSGLAMBERTMATERIALBASE_H_ */
