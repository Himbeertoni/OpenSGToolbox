/*---------------------------------------------------------------------------*\
 *                        OpenSG ToolBox Toolbox                             *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                         www.vrac.iastate.edu                              *
 *                                                                           *
 *                          Authors: David Kabala                            *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class Phong2Material!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#define OSG_COMPILEPHONG2MATERIALINST

#include <stdlib.h>
#include <stdio.h>

#include <OpenSG/OSGConfig.h>

#include "OSGPhong2MaterialBase.h"
#include "OSGPhong2Material.h"


OSG_BEGIN_NAMESPACE

const OSG::BitVector  Phong2MaterialBase::SpecularCosinePowerFieldMask = 
    (TypeTraits<BitVector>::One << Phong2MaterialBase::SpecularCosinePowerFieldId);

const OSG::BitVector  Phong2MaterialBase::SpecularCosinePowerTextureFieldMask = 
    (TypeTraits<BitVector>::One << Phong2MaterialBase::SpecularCosinePowerTextureFieldId);

const OSG::BitVector  Phong2MaterialBase::SpecularColorFieldMask = 
    (TypeTraits<BitVector>::One << Phong2MaterialBase::SpecularColorFieldId);

const OSG::BitVector  Phong2MaterialBase::SpecularColorTextureFieldMask = 
    (TypeTraits<BitVector>::One << Phong2MaterialBase::SpecularColorTextureFieldId);

const OSG::BitVector Phong2MaterialBase::MTInfluenceMask = 
    (Inherited::MTInfluenceMask) | 
    (static_cast<BitVector>(0x0) << Inherited::NextFieldId); 


// Field descriptions

/*! \var Real32          Phong2MaterialBase::_sfSpecularCosinePower
    
*/
/*! \var TextureChunkPtr Phong2MaterialBase::_sfSpecularCosinePowerTexture
    
*/
/*! \var Color3f         Phong2MaterialBase::_sfSpecularColor
    
*/
/*! \var TextureChunkPtr Phong2MaterialBase::_sfSpecularColorTexture
    
*/

//! Phong2Material description

FieldDescription *Phong2MaterialBase::_desc[] = 
{
    new FieldDescription(SFReal32::getClassType(), 
                     "SpecularCosinePower", 
                     SpecularCosinePowerFieldId, SpecularCosinePowerFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&Phong2MaterialBase::editSFSpecularCosinePower)),
    new FieldDescription(SFTextureChunkPtr::getClassType(), 
                     "SpecularCosinePowerTexture", 
                     SpecularCosinePowerTextureFieldId, SpecularCosinePowerTextureFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&Phong2MaterialBase::editSFSpecularCosinePowerTexture)),
    new FieldDescription(SFColor3f::getClassType(), 
                     "SpecularColor", 
                     SpecularColorFieldId, SpecularColorFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&Phong2MaterialBase::editSFSpecularColor)),
    new FieldDescription(SFTextureChunkPtr::getClassType(), 
                     "SpecularColorTexture", 
                     SpecularColorTextureFieldId, SpecularColorTextureFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&Phong2MaterialBase::editSFSpecularColorTexture))
};


FieldContainerType Phong2MaterialBase::_type(
    "Phong2Material",
    "LambertMaterial",
    NULL,
    reinterpret_cast<PrototypeCreateF>(&Phong2MaterialBase::createEmpty),
    Phong2Material::initMethod,
    _desc,
    sizeof(_desc));

//OSG_FIELD_CONTAINER_DEF(Phong2MaterialBase, Phong2MaterialPtr)

/*------------------------------ get -----------------------------------*/

FieldContainerType &Phong2MaterialBase::getType(void) 
{
    return _type; 
} 

const FieldContainerType &Phong2MaterialBase::getType(void) const 
{
    return _type;
} 


FieldContainerPtr Phong2MaterialBase::shallowCopy(void) const 
{ 
    Phong2MaterialPtr returnValue; 

    newPtr(returnValue, dynamic_cast<const Phong2Material *>(this)); 

    return returnValue; 
}

UInt32 Phong2MaterialBase::getContainerSize(void) const 
{ 
    return sizeof(Phong2Material); 
}


#if !defined(OSG_FIXED_MFIELDSYNC)
void Phong2MaterialBase::executeSync(      FieldContainer &other,
                                    const BitVector      &whichField)
{
    this->executeSyncImpl(static_cast<Phong2MaterialBase *>(&other),
                          whichField);
}
#else
void Phong2MaterialBase::executeSync(      FieldContainer &other,
                                    const BitVector      &whichField,                                    const SyncInfo       &sInfo     )
{
    this->executeSyncImpl((Phong2MaterialBase *) &other, whichField, sInfo);
}
void Phong2MaterialBase::execBeginEdit(const BitVector &whichField, 
                                            UInt32     uiAspect,
                                            UInt32     uiContainerSize) 
{
    this->execBeginEditImpl(whichField, uiAspect, uiContainerSize);
}

void Phong2MaterialBase::onDestroyAspect(UInt32 uiId, UInt32 uiAspect)
{
    Inherited::onDestroyAspect(uiId, uiAspect);

}
#endif

/*------------------------- constructors ----------------------------------*/

#ifdef OSG_WIN32_ICL
#pragma warning (disable : 383)
#endif

Phong2MaterialBase::Phong2MaterialBase(void) :
    _sfSpecularCosinePower    (), 
    _sfSpecularCosinePowerTexture(TextureChunkPtr(NullFC)), 
    _sfSpecularColor          (), 
    _sfSpecularColorTexture   (TextureChunkPtr(NullFC)), 
    Inherited() 
{
}

#ifdef OSG_WIN32_ICL
#pragma warning (default : 383)
#endif

Phong2MaterialBase::Phong2MaterialBase(const Phong2MaterialBase &source) :
    _sfSpecularCosinePower    (source._sfSpecularCosinePower    ), 
    _sfSpecularCosinePowerTexture(source._sfSpecularCosinePowerTexture), 
    _sfSpecularColor          (source._sfSpecularColor          ), 
    _sfSpecularColorTexture   (source._sfSpecularColorTexture   ), 
    Inherited                 (source)
{
}

/*-------------------------- destructors ----------------------------------*/

Phong2MaterialBase::~Phong2MaterialBase(void)
{
}

/*------------------------------ access -----------------------------------*/

UInt32 Phong2MaterialBase::getBinSize(const BitVector &whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (SpecularCosinePowerFieldMask & whichField))
    {
        returnValue += _sfSpecularCosinePower.getBinSize();
    }

    if(FieldBits::NoField != (SpecularCosinePowerTextureFieldMask & whichField))
    {
        returnValue += _sfSpecularCosinePowerTexture.getBinSize();
    }

    if(FieldBits::NoField != (SpecularColorFieldMask & whichField))
    {
        returnValue += _sfSpecularColor.getBinSize();
    }

    if(FieldBits::NoField != (SpecularColorTextureFieldMask & whichField))
    {
        returnValue += _sfSpecularColorTexture.getBinSize();
    }


    return returnValue;
}

void Phong2MaterialBase::copyToBin(      BinaryDataHandler &pMem,
                                  const BitVector         &whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (SpecularCosinePowerFieldMask & whichField))
    {
        _sfSpecularCosinePower.copyToBin(pMem);
    }

    if(FieldBits::NoField != (SpecularCosinePowerTextureFieldMask & whichField))
    {
        _sfSpecularCosinePowerTexture.copyToBin(pMem);
    }

    if(FieldBits::NoField != (SpecularColorFieldMask & whichField))
    {
        _sfSpecularColor.copyToBin(pMem);
    }

    if(FieldBits::NoField != (SpecularColorTextureFieldMask & whichField))
    {
        _sfSpecularColorTexture.copyToBin(pMem);
    }


}

void Phong2MaterialBase::copyFromBin(      BinaryDataHandler &pMem,
                                    const BitVector    &whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (SpecularCosinePowerFieldMask & whichField))
    {
        _sfSpecularCosinePower.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (SpecularCosinePowerTextureFieldMask & whichField))
    {
        _sfSpecularCosinePowerTexture.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (SpecularColorFieldMask & whichField))
    {
        _sfSpecularColor.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (SpecularColorTextureFieldMask & whichField))
    {
        _sfSpecularColorTexture.copyFromBin(pMem);
    }


}

#if !defined(OSG_FIXED_MFIELDSYNC)
void Phong2MaterialBase::executeSyncImpl(      Phong2MaterialBase *pOther,
                                        const BitVector         &whichField)
{

    Inherited::executeSyncImpl(pOther, whichField);

    if(FieldBits::NoField != (SpecularCosinePowerFieldMask & whichField))
        _sfSpecularCosinePower.syncWith(pOther->_sfSpecularCosinePower);

    if(FieldBits::NoField != (SpecularCosinePowerTextureFieldMask & whichField))
        _sfSpecularCosinePowerTexture.syncWith(pOther->_sfSpecularCosinePowerTexture);

    if(FieldBits::NoField != (SpecularColorFieldMask & whichField))
        _sfSpecularColor.syncWith(pOther->_sfSpecularColor);

    if(FieldBits::NoField != (SpecularColorTextureFieldMask & whichField))
        _sfSpecularColorTexture.syncWith(pOther->_sfSpecularColorTexture);


}
#else
void Phong2MaterialBase::executeSyncImpl(      Phong2MaterialBase *pOther,
                                        const BitVector         &whichField,
                                        const SyncInfo          &sInfo      )
{

    Inherited::executeSyncImpl(pOther, whichField, sInfo);

    if(FieldBits::NoField != (SpecularCosinePowerFieldMask & whichField))
        _sfSpecularCosinePower.syncWith(pOther->_sfSpecularCosinePower);

    if(FieldBits::NoField != (SpecularCosinePowerTextureFieldMask & whichField))
        _sfSpecularCosinePowerTexture.syncWith(pOther->_sfSpecularCosinePowerTexture);

    if(FieldBits::NoField != (SpecularColorFieldMask & whichField))
        _sfSpecularColor.syncWith(pOther->_sfSpecularColor);

    if(FieldBits::NoField != (SpecularColorTextureFieldMask & whichField))
        _sfSpecularColorTexture.syncWith(pOther->_sfSpecularColorTexture);



}

void Phong2MaterialBase::execBeginEditImpl (const BitVector &whichField, 
                                                 UInt32     uiAspect,
                                                 UInt32     uiContainerSize)
{
    Inherited::execBeginEditImpl(whichField, uiAspect, uiContainerSize);

}
#endif



OSG_END_NAMESPACE

#include <OpenSG/OSGSFieldTypeDef.inl>
#include <OpenSG/OSGMFieldTypeDef.inl>

OSG_BEGIN_NAMESPACE

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldDataTraits<Phong2MaterialPtr>::_type("Phong2MaterialPtr", "LambertMaterialPtr");
#endif

OSG_DLLEXPORT_SFIELD_DEF1(Phong2MaterialPtr, OSG_TOOLBOXLIB_DLLTMPLMAPPING);
OSG_DLLEXPORT_MFIELD_DEF1(Phong2MaterialPtr, OSG_TOOLBOXLIB_DLLTMPLMAPPING);


OSG_END_NAMESPACE

