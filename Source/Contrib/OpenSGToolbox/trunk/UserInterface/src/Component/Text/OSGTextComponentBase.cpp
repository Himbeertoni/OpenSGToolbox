/*---------------------------------------------------------------------------*\
 *                     OpenSG ToolBox UserInterface                          *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                         www.vrac.iastate.edu                              *
 *                                                                           *
 *                          Authors: David Kabala                            *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class TextComponent!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#define OSG_COMPILETEXTCOMPONENTINST

#include <stdlib.h>
#include <stdio.h>

#include <OpenSG/OSGConfig.h>

#include "OSGTextComponentBase.h"
#include "OSGTextComponent.h"


OSG_BEGIN_NAMESPACE

const OSG::BitVector  TextComponentBase::TextFieldMask = 
    (TypeTraits<BitVector>::One << TextComponentBase::TextFieldId);

const OSG::BitVector  TextComponentBase::CaretPositionFieldMask = 
    (TypeTraits<BitVector>::One << TextComponentBase::CaretPositionFieldId);

const OSG::BitVector  TextComponentBase::FontFieldMask = 
    (TypeTraits<BitVector>::One << TextComponentBase::FontFieldId);

const OSG::BitVector  TextComponentBase::SelectionBoxColorFieldMask = 
    (TypeTraits<BitVector>::One << TextComponentBase::SelectionBoxColorFieldId);

const OSG::BitVector  TextComponentBase::SelectionTextColorFieldMask = 
    (TypeTraits<BitVector>::One << TextComponentBase::SelectionTextColorFieldId);

const OSG::BitVector  TextComponentBase::ActiveTextColorFieldMask = 
    (TypeTraits<BitVector>::One << TextComponentBase::ActiveTextColorFieldId);

const OSG::BitVector  TextComponentBase::FocusedTextColorFieldMask = 
    (TypeTraits<BitVector>::One << TextComponentBase::FocusedTextColorFieldId);

const OSG::BitVector  TextComponentBase::RolloverTextColorFieldMask = 
    (TypeTraits<BitVector>::One << TextComponentBase::RolloverTextColorFieldId);

const OSG::BitVector  TextComponentBase::DisabledTextColorFieldMask = 
    (TypeTraits<BitVector>::One << TextComponentBase::DisabledTextColorFieldId);

const OSG::BitVector  TextComponentBase::TextColorFieldMask = 
    (TypeTraits<BitVector>::One << TextComponentBase::TextColorFieldId);

const OSG::BitVector TextComponentBase::MTInfluenceMask = 
    (Inherited::MTInfluenceMask) | 
    (static_cast<BitVector>(0x0) << Inherited::NextFieldId); 


// Field descriptions

/*! \var std::string     TextComponentBase::_sfText
    
*/
/*! \var UInt32          TextComponentBase::_sfCaretPosition
    
*/
/*! \var UIFontPtr       TextComponentBase::_sfFont
    
*/
/*! \var Color4f         TextComponentBase::_sfSelectionBoxColor
    
*/
/*! \var Color4f         TextComponentBase::_sfSelectionTextColor
    
*/
/*! \var Color4f         TextComponentBase::_sfActiveTextColor
    
*/
/*! \var Color4f         TextComponentBase::_sfFocusedTextColor
    
*/
/*! \var Color4f         TextComponentBase::_sfRolloverTextColor
    
*/
/*! \var Color4f         TextComponentBase::_sfDisabledTextColor
    
*/
/*! \var Color4f         TextComponentBase::_sfTextColor
    
*/

//! TextComponent description

FieldDescription *TextComponentBase::_desc[] = 
{
    new FieldDescription(SFString::getClassType(), 
                     "Text", 
                     TextFieldId, TextFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&TextComponentBase::editSFText)),
    new FieldDescription(SFUInt32::getClassType(), 
                     "CaretPosition", 
                     CaretPositionFieldId, CaretPositionFieldMask,
                     true,
                     reinterpret_cast<FieldAccessMethod>(&TextComponentBase::editSFCaretPosition)),
    new FieldDescription(SFUIFontPtr::getClassType(), 
                     "Font", 
                     FontFieldId, FontFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&TextComponentBase::editSFFont)),
    new FieldDescription(SFColor4f::getClassType(), 
                     "SelectionBoxColor", 
                     SelectionBoxColorFieldId, SelectionBoxColorFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&TextComponentBase::editSFSelectionBoxColor)),
    new FieldDescription(SFColor4f::getClassType(), 
                     "SelectionTextColor", 
                     SelectionTextColorFieldId, SelectionTextColorFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&TextComponentBase::editSFSelectionTextColor)),
    new FieldDescription(SFColor4f::getClassType(), 
                     "ActiveTextColor", 
                     ActiveTextColorFieldId, ActiveTextColorFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&TextComponentBase::editSFActiveTextColor)),
    new FieldDescription(SFColor4f::getClassType(), 
                     "FocusedTextColor", 
                     FocusedTextColorFieldId, FocusedTextColorFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&TextComponentBase::editSFFocusedTextColor)),
    new FieldDescription(SFColor4f::getClassType(), 
                     "RolloverTextColor", 
                     RolloverTextColorFieldId, RolloverTextColorFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&TextComponentBase::editSFRolloverTextColor)),
    new FieldDescription(SFColor4f::getClassType(), 
                     "DisabledTextColor", 
                     DisabledTextColorFieldId, DisabledTextColorFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&TextComponentBase::editSFDisabledTextColor)),
    new FieldDescription(SFColor4f::getClassType(), 
                     "TextColor", 
                     TextColorFieldId, TextColorFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&TextComponentBase::editSFTextColor))
};


FieldContainerType TextComponentBase::_type(
    "TextComponent",
    "Component",
    NULL,
    NULL, 
    TextComponent::initMethod,
    _desc,
    sizeof(_desc));

//! TextComponent Produced Methods

MethodDescription *TextComponentBase::_methodDesc[] =
{
    new MethodDescription("TextValueChanged", 
                     TextValueChangedMethodId, 
                     SFEventPtr::getClassType(),
                     FunctorAccessMethod()),
    new MethodDescription("CaretChanged", 
                     CaretChangedMethodId, 
                     SFEventPtr::getClassType(),
                     FunctorAccessMethod())
};

EventProducerType TextComponentBase::_producerType(
    "TextComponentProducerType",
    "ComponentProducerType",
    NULL,
    InitEventProducerFunctor(),
    _methodDesc,
    sizeof(_methodDesc));
//OSG_FIELD_CONTAINER_DEF(TextComponentBase, TextComponentPtr)

/*------------------------------ get -----------------------------------*/

FieldContainerType &TextComponentBase::getType(void) 
{
    return _type; 
} 

const FieldContainerType &TextComponentBase::getType(void) const 
{
    return _type;
} 

const EventProducerType &TextComponentBase::getProducerType(void) const
{
    return _producerType;
}


UInt32 TextComponentBase::getContainerSize(void) const 
{ 
    return sizeof(TextComponent); 
}


#if !defined(OSG_FIXED_MFIELDSYNC)
void TextComponentBase::executeSync(      FieldContainer &other,
                                    const BitVector      &whichField)
{
    this->executeSyncImpl(static_cast<TextComponentBase *>(&other),
                          whichField);
}
#else
void TextComponentBase::executeSync(      FieldContainer &other,
                                    const BitVector      &whichField,                                    const SyncInfo       &sInfo     )
{
    this->executeSyncImpl((TextComponentBase *) &other, whichField, sInfo);
}
void TextComponentBase::execBeginEdit(const BitVector &whichField, 
                                            UInt32     uiAspect,
                                            UInt32     uiContainerSize) 
{
    this->execBeginEditImpl(whichField, uiAspect, uiContainerSize);
}

void TextComponentBase::onDestroyAspect(UInt32 uiId, UInt32 uiAspect)
{
    Inherited::onDestroyAspect(uiId, uiAspect);

}
#endif

/*------------------------- constructors ----------------------------------*/

#ifdef OSG_WIN32_ICL
#pragma warning (disable : 383)
#endif

TextComponentBase::TextComponentBase(void) :
    _sfText                   (), 
    _sfCaretPosition          (UInt32(0)), 
    _sfFont                   (), 
    _sfSelectionBoxColor      (Color4f(0.0,0.0,1.0,1.0)), 
    _sfSelectionTextColor     (Color4f(1.0,1.0,1.0,1.0)), 
    _sfActiveTextColor        (), 
    _sfFocusedTextColor       (), 
    _sfRolloverTextColor      (), 
    _sfDisabledTextColor      (), 
    _sfTextColor              (), 
    Inherited() 
{
    _Producer.setType(&_producerType);
}

#ifdef OSG_WIN32_ICL
#pragma warning (default : 383)
#endif

TextComponentBase::TextComponentBase(const TextComponentBase &source) :
    _sfText                   (source._sfText                   ), 
    _sfCaretPosition          (source._sfCaretPosition          ), 
    _sfFont                   (source._sfFont                   ), 
    _sfSelectionBoxColor      (source._sfSelectionBoxColor      ), 
    _sfSelectionTextColor     (source._sfSelectionTextColor     ), 
    _sfActiveTextColor        (source._sfActiveTextColor        ), 
    _sfFocusedTextColor       (source._sfFocusedTextColor       ), 
    _sfRolloverTextColor      (source._sfRolloverTextColor      ), 
    _sfDisabledTextColor      (source._sfDisabledTextColor      ), 
    _sfTextColor              (source._sfTextColor              ), 
    Inherited                 (source)
{
}

/*-------------------------- destructors ----------------------------------*/

TextComponentBase::~TextComponentBase(void)
{
}

/*------------------------------ access -----------------------------------*/

UInt32 TextComponentBase::getBinSize(const BitVector &whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (TextFieldMask & whichField))
    {
        returnValue += _sfText.getBinSize();
    }

    if(FieldBits::NoField != (CaretPositionFieldMask & whichField))
    {
        returnValue += _sfCaretPosition.getBinSize();
    }

    if(FieldBits::NoField != (FontFieldMask & whichField))
    {
        returnValue += _sfFont.getBinSize();
    }

    if(FieldBits::NoField != (SelectionBoxColorFieldMask & whichField))
    {
        returnValue += _sfSelectionBoxColor.getBinSize();
    }

    if(FieldBits::NoField != (SelectionTextColorFieldMask & whichField))
    {
        returnValue += _sfSelectionTextColor.getBinSize();
    }

    if(FieldBits::NoField != (ActiveTextColorFieldMask & whichField))
    {
        returnValue += _sfActiveTextColor.getBinSize();
    }

    if(FieldBits::NoField != (FocusedTextColorFieldMask & whichField))
    {
        returnValue += _sfFocusedTextColor.getBinSize();
    }

    if(FieldBits::NoField != (RolloverTextColorFieldMask & whichField))
    {
        returnValue += _sfRolloverTextColor.getBinSize();
    }

    if(FieldBits::NoField != (DisabledTextColorFieldMask & whichField))
    {
        returnValue += _sfDisabledTextColor.getBinSize();
    }

    if(FieldBits::NoField != (TextColorFieldMask & whichField))
    {
        returnValue += _sfTextColor.getBinSize();
    }


    return returnValue;
}

void TextComponentBase::copyToBin(      BinaryDataHandler &pMem,
                                  const BitVector         &whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (TextFieldMask & whichField))
    {
        _sfText.copyToBin(pMem);
    }

    if(FieldBits::NoField != (CaretPositionFieldMask & whichField))
    {
        _sfCaretPosition.copyToBin(pMem);
    }

    if(FieldBits::NoField != (FontFieldMask & whichField))
    {
        _sfFont.copyToBin(pMem);
    }

    if(FieldBits::NoField != (SelectionBoxColorFieldMask & whichField))
    {
        _sfSelectionBoxColor.copyToBin(pMem);
    }

    if(FieldBits::NoField != (SelectionTextColorFieldMask & whichField))
    {
        _sfSelectionTextColor.copyToBin(pMem);
    }

    if(FieldBits::NoField != (ActiveTextColorFieldMask & whichField))
    {
        _sfActiveTextColor.copyToBin(pMem);
    }

    if(FieldBits::NoField != (FocusedTextColorFieldMask & whichField))
    {
        _sfFocusedTextColor.copyToBin(pMem);
    }

    if(FieldBits::NoField != (RolloverTextColorFieldMask & whichField))
    {
        _sfRolloverTextColor.copyToBin(pMem);
    }

    if(FieldBits::NoField != (DisabledTextColorFieldMask & whichField))
    {
        _sfDisabledTextColor.copyToBin(pMem);
    }

    if(FieldBits::NoField != (TextColorFieldMask & whichField))
    {
        _sfTextColor.copyToBin(pMem);
    }


}

void TextComponentBase::copyFromBin(      BinaryDataHandler &pMem,
                                    const BitVector    &whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (TextFieldMask & whichField))
    {
        _sfText.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (CaretPositionFieldMask & whichField))
    {
        _sfCaretPosition.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (FontFieldMask & whichField))
    {
        _sfFont.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (SelectionBoxColorFieldMask & whichField))
    {
        _sfSelectionBoxColor.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (SelectionTextColorFieldMask & whichField))
    {
        _sfSelectionTextColor.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (ActiveTextColorFieldMask & whichField))
    {
        _sfActiveTextColor.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (FocusedTextColorFieldMask & whichField))
    {
        _sfFocusedTextColor.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (RolloverTextColorFieldMask & whichField))
    {
        _sfRolloverTextColor.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (DisabledTextColorFieldMask & whichField))
    {
        _sfDisabledTextColor.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (TextColorFieldMask & whichField))
    {
        _sfTextColor.copyFromBin(pMem);
    }


}

#if !defined(OSG_FIXED_MFIELDSYNC)
void TextComponentBase::executeSyncImpl(      TextComponentBase *pOther,
                                        const BitVector         &whichField)
{

    Inherited::executeSyncImpl(pOther, whichField);

    if(FieldBits::NoField != (TextFieldMask & whichField))
        _sfText.syncWith(pOther->_sfText);

    if(FieldBits::NoField != (CaretPositionFieldMask & whichField))
        _sfCaretPosition.syncWith(pOther->_sfCaretPosition);

    if(FieldBits::NoField != (FontFieldMask & whichField))
        _sfFont.syncWith(pOther->_sfFont);

    if(FieldBits::NoField != (SelectionBoxColorFieldMask & whichField))
        _sfSelectionBoxColor.syncWith(pOther->_sfSelectionBoxColor);

    if(FieldBits::NoField != (SelectionTextColorFieldMask & whichField))
        _sfSelectionTextColor.syncWith(pOther->_sfSelectionTextColor);

    if(FieldBits::NoField != (ActiveTextColorFieldMask & whichField))
        _sfActiveTextColor.syncWith(pOther->_sfActiveTextColor);

    if(FieldBits::NoField != (FocusedTextColorFieldMask & whichField))
        _sfFocusedTextColor.syncWith(pOther->_sfFocusedTextColor);

    if(FieldBits::NoField != (RolloverTextColorFieldMask & whichField))
        _sfRolloverTextColor.syncWith(pOther->_sfRolloverTextColor);

    if(FieldBits::NoField != (DisabledTextColorFieldMask & whichField))
        _sfDisabledTextColor.syncWith(pOther->_sfDisabledTextColor);

    if(FieldBits::NoField != (TextColorFieldMask & whichField))
        _sfTextColor.syncWith(pOther->_sfTextColor);


}
#else
void TextComponentBase::executeSyncImpl(      TextComponentBase *pOther,
                                        const BitVector         &whichField,
                                        const SyncInfo          &sInfo      )
{

    Inherited::executeSyncImpl(pOther, whichField, sInfo);

    if(FieldBits::NoField != (TextFieldMask & whichField))
        _sfText.syncWith(pOther->_sfText);

    if(FieldBits::NoField != (CaretPositionFieldMask & whichField))
        _sfCaretPosition.syncWith(pOther->_sfCaretPosition);

    if(FieldBits::NoField != (FontFieldMask & whichField))
        _sfFont.syncWith(pOther->_sfFont);

    if(FieldBits::NoField != (SelectionBoxColorFieldMask & whichField))
        _sfSelectionBoxColor.syncWith(pOther->_sfSelectionBoxColor);

    if(FieldBits::NoField != (SelectionTextColorFieldMask & whichField))
        _sfSelectionTextColor.syncWith(pOther->_sfSelectionTextColor);

    if(FieldBits::NoField != (ActiveTextColorFieldMask & whichField))
        _sfActiveTextColor.syncWith(pOther->_sfActiveTextColor);

    if(FieldBits::NoField != (FocusedTextColorFieldMask & whichField))
        _sfFocusedTextColor.syncWith(pOther->_sfFocusedTextColor);

    if(FieldBits::NoField != (RolloverTextColorFieldMask & whichField))
        _sfRolloverTextColor.syncWith(pOther->_sfRolloverTextColor);

    if(FieldBits::NoField != (DisabledTextColorFieldMask & whichField))
        _sfDisabledTextColor.syncWith(pOther->_sfDisabledTextColor);

    if(FieldBits::NoField != (TextColorFieldMask & whichField))
        _sfTextColor.syncWith(pOther->_sfTextColor);



}

void TextComponentBase::execBeginEditImpl (const BitVector &whichField, 
                                                 UInt32     uiAspect,
                                                 UInt32     uiContainerSize)
{
    Inherited::execBeginEditImpl(whichField, uiAspect, uiContainerSize);

}
#endif



OSG_END_NAMESPACE

#include <OpenSG/OSGSFieldTypeDef.inl>
#include <OpenSG/OSGMFieldTypeDef.inl>

OSG_BEGIN_NAMESPACE

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldDataTraits<TextComponentPtr>::_type("TextComponentPtr", "ComponentPtr");
#endif

OSG_DLLEXPORT_SFIELD_DEF1(TextComponentPtr, OSG_USERINTERFACELIB_DLLTMPLMAPPING);
OSG_DLLEXPORT_MFIELD_DEF1(TextComponentPtr, OSG_USERINTERFACELIB_DLLTMPLMAPPING);


OSG_END_NAMESPACE

