/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact:  David Kabala (djkabala@gmail.com)                             *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class DiscDistribution3D
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#ifndef _OSGDISCDISTRIBUTION3DBASE_H_
#define _OSGDISCDISTRIBUTION3DBASE_H_
#ifdef __sgi
#pragma once
#endif


#include "OSGConfig.h"
#include "OSGContribParticleSystemDef.h"

//#include "OSGBaseTypes.h"

#include "OSGDistribution3D.h" // Parent

#include "OSGVecFields.h"               // Center type
#include "OSGSysFields.h"               // InnerRadius type

#include "OSGDiscDistribution3DFields.h"

OSG_BEGIN_NAMESPACE

class DiscDistribution3D;

//! \brief DiscDistribution3D Base Class.

class OSG_CONTRIBPARTICLESYSTEM_DLLMAPPING DiscDistribution3DBase : public Distribution3D
{
  public:

    typedef Distribution3D Inherited;
    typedef Distribution3D ParentContainer;

    typedef Inherited::TypeObject TypeObject;
    typedef TypeObject::InitPhase InitPhase;

    OSG_GEN_INTERNALPTR(DiscDistribution3D);

    /*==========================  PUBLIC  =================================*/

  public:

    enum
    {
        CenterFieldId = Inherited::NextFieldId,
        NormalFieldId = CenterFieldId + 1,
        TangentFieldId = NormalFieldId + 1,
        BinormalFieldId = TangentFieldId + 1,
        InnerRadiusFieldId = BinormalFieldId + 1,
        OuterRadiusFieldId = InnerRadiusFieldId + 1,
        MinThetaFieldId = OuterRadiusFieldId + 1,
        MaxThetaFieldId = MinThetaFieldId + 1,
        SurfaceOrEdgeFieldId = MaxThetaFieldId + 1,
        NextFieldId = SurfaceOrEdgeFieldId + 1
    };

    static const OSG::BitVector CenterFieldMask =
        (TypeTraits<BitVector>::One << CenterFieldId);
    static const OSG::BitVector NormalFieldMask =
        (TypeTraits<BitVector>::One << NormalFieldId);
    static const OSG::BitVector TangentFieldMask =
        (TypeTraits<BitVector>::One << TangentFieldId);
    static const OSG::BitVector BinormalFieldMask =
        (TypeTraits<BitVector>::One << BinormalFieldId);
    static const OSG::BitVector InnerRadiusFieldMask =
        (TypeTraits<BitVector>::One << InnerRadiusFieldId);
    static const OSG::BitVector OuterRadiusFieldMask =
        (TypeTraits<BitVector>::One << OuterRadiusFieldId);
    static const OSG::BitVector MinThetaFieldMask =
        (TypeTraits<BitVector>::One << MinThetaFieldId);
    static const OSG::BitVector MaxThetaFieldMask =
        (TypeTraits<BitVector>::One << MaxThetaFieldId);
    static const OSG::BitVector SurfaceOrEdgeFieldMask =
        (TypeTraits<BitVector>::One << SurfaceOrEdgeFieldId);
    static const OSG::BitVector NextFieldMask =
        (TypeTraits<BitVector>::One << NextFieldId);
        
    typedef SFPnt3f           SFCenterType;
    typedef SFVec3f           SFNormalType;
    typedef SFVec3f           SFTangentType;
    typedef SFVec3f           SFBinormalType;
    typedef SFReal32          SFInnerRadiusType;
    typedef SFReal32          SFOuterRadiusType;
    typedef SFReal32          SFMinThetaType;
    typedef SFReal32          SFMaxThetaType;
    typedef SFUInt32          SFSurfaceOrEdgeType;

    /*---------------------------------------------------------------------*/
    /*! \name                    Class Get                                 */
    /*! \{                                                                 */

    static FieldContainerType &getClassType   (void);
    static UInt32              getClassTypeId (void);
    static UInt16              getClassGroupId(void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                FieldContainer Get                            */
    /*! \{                                                                 */

    virtual       FieldContainerType &getType         (void);
    virtual const FieldContainerType &getType         (void) const;

    virtual       UInt32              getContainerSize(void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Get                                 */
    /*! \{                                                                 */


                  SFPnt3f             *editSFCenter         (void);
            const SFPnt3f             *getSFCenter          (void) const;

                  SFVec3f             *editSFNormal         (void);
            const SFVec3f             *getSFNormal          (void) const;

                  SFReal32            *editSFInnerRadius    (void);
            const SFReal32            *getSFInnerRadius     (void) const;

                  SFReal32            *editSFOuterRadius    (void);
            const SFReal32            *getSFOuterRadius     (void) const;

                  SFReal32            *editSFMinTheta       (void);
            const SFReal32            *getSFMinTheta        (void) const;

                  SFReal32            *editSFMaxTheta       (void);
            const SFReal32            *getSFMaxTheta        (void) const;

                  SFUInt32            *editSFSurfaceOrEdge  (void);
            const SFUInt32            *getSFSurfaceOrEdge   (void) const;


                  Pnt3f               &editCenter         (void);
            const Pnt3f               &getCenter          (void) const;

                  Vec3f               &editNormal         (void);
            const Vec3f               &getNormal          (void) const;

                  Real32              &editInnerRadius    (void);
                  Real32               getInnerRadius     (void) const;

                  Real32              &editOuterRadius    (void);
                  Real32               getOuterRadius     (void) const;

                  Real32              &editMinTheta       (void);
                  Real32               getMinTheta        (void) const;

                  Real32              &editMaxTheta       (void);
                  Real32               getMaxTheta        (void) const;

                  UInt32              &editSurfaceOrEdge  (void);
                  UInt32               getSurfaceOrEdge   (void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Set                                 */
    /*! \{                                                                 */

            void setCenter         (const Pnt3f &value);
            void setNormal         (const Vec3f &value);
            void setInnerRadius    (const Real32 value);
            void setOuterRadius    (const Real32 value);
            void setMinTheta       (const Real32 value);
            void setMaxTheta       (const Real32 value);
            void setSurfaceOrEdge  (const UInt32 value);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                Ptr MField Set                                */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Binary Access                              */
    /*! \{                                                                 */

    virtual UInt32 getBinSize (ConstFieldMaskArg  whichField);
    virtual void   copyToBin  (BinaryDataHandler &pMem,
                               ConstFieldMaskArg  whichField);
    virtual void   copyFromBin(BinaryDataHandler &pMem,
                               ConstFieldMaskArg  whichField);


    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Construction                               */
    /*! \{                                                                 */

    static  DiscDistribution3DTransitPtr  create          (void);
    static  DiscDistribution3D           *createEmpty     (void);

    static  DiscDistribution3DTransitPtr  createLocal     (
                                               BitVector bFlags = FCLocal::All);

    static  DiscDistribution3D            *createEmptyLocal(
                                              BitVector bFlags = FCLocal::All);

    static  DiscDistribution3DTransitPtr  createDependent  (BitVector bFlags);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Copy                                   */
    /*! \{                                                                 */

    virtual FieldContainerTransitPtr shallowCopy     (void) const;
    virtual FieldContainerTransitPtr shallowCopyLocal(
                                       BitVector bFlags = FCLocal::All) const;
    virtual FieldContainerTransitPtr shallowCopyDependent(
                                                      BitVector bFlags) const;

    /*! \}                                                                 */
    /*=========================  PROTECTED  ===============================*/

  protected:

    static TypeObject _type;

    static       void   classDescInserter(TypeObject &oType);
    static const Char8 *getClassname     (void             );

    /*---------------------------------------------------------------------*/
    /*! \name                      Fields                                  */
    /*! \{                                                                 */

    SFPnt3f           _sfCenter;
    SFVec3f           _sfNormal;
    SFVec3f           _sfTangent;
    SFVec3f           _sfBinormal;
    SFReal32          _sfInnerRadius;
    SFReal32          _sfOuterRadius;
    SFReal32          _sfMinTheta;
    SFReal32          _sfMaxTheta;
    SFUInt32          _sfSurfaceOrEdge;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Constructors                               */
    /*! \{                                                                 */

    DiscDistribution3DBase(void);
    DiscDistribution3DBase(const DiscDistribution3DBase &source);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Destructors                                */
    /*! \{                                                                 */

    virtual ~DiscDistribution3DBase(void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                     onCreate                                */
    /*! \{                                                                 */


    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Generic Field Access                      */
    /*! \{                                                                 */

    GetFieldHandlePtr  getHandleCenter          (void) const;
    EditFieldHandlePtr editHandleCenter         (void);
    GetFieldHandlePtr  getHandleNormal          (void) const;
    EditFieldHandlePtr editHandleNormal         (void);
    GetFieldHandlePtr  getHandleTangent         (void) const;
    EditFieldHandlePtr editHandleTangent        (void);
    GetFieldHandlePtr  getHandleBinormal        (void) const;
    EditFieldHandlePtr editHandleBinormal       (void);
    GetFieldHandlePtr  getHandleInnerRadius     (void) const;
    EditFieldHandlePtr editHandleInnerRadius    (void);
    GetFieldHandlePtr  getHandleOuterRadius     (void) const;
    EditFieldHandlePtr editHandleOuterRadius    (void);
    GetFieldHandlePtr  getHandleMinTheta        (void) const;
    EditFieldHandlePtr editHandleMinTheta       (void);
    GetFieldHandlePtr  getHandleMaxTheta        (void) const;
    EditFieldHandlePtr editHandleMaxTheta       (void);
    GetFieldHandlePtr  getHandleSurfaceOrEdge   (void) const;
    EditFieldHandlePtr editHandleSurfaceOrEdge  (void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Get                                 */
    /*! \{                                                                 */


                  SFVec3f             *editSFTangent        (void);
            const SFVec3f             *getSFTangent         (void) const;

                  SFVec3f             *editSFBinormal       (void);
            const SFVec3f             *getSFBinormal        (void) const;


                  Vec3f               &editTangent        (void);
            const Vec3f               &getTangent         (void) const;

                  Vec3f               &editBinormal       (void);
            const Vec3f               &getBinormal        (void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Set                                 */
    /*! \{                                                                 */

            void setTangent        (const Vec3f &value);
            void setBinormal       (const Vec3f &value);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                Ptr MField Set                                */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

#ifdef OSG_MT_CPTR_ASPECT
    virtual void execSyncV(      FieldContainer    &oFrom,
                                 ConstFieldMaskArg  whichField,
                                 AspectOffsetStore &oOffsets,
                                 ConstFieldMaskArg  syncMode  ,
                           const UInt32             uiSyncInfo);

            void execSync (      DiscDistribution3DBase *pFrom,
                                 ConstFieldMaskArg  whichField,
                                 AspectOffsetStore &oOffsets,
                                 ConstFieldMaskArg  syncMode  ,
                           const UInt32             uiSyncInfo);
#endif

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Edit                                   */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                     Aspect Create                            */
    /*! \{                                                                 */

#ifdef OSG_MT_CPTR_ASPECT
    virtual FieldContainer *createAspectCopy(
                                    const FieldContainer *pRefAspect) const;
#endif

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Edit                                   */
    /*! \{                                                                 */
    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

    virtual void resolveLinks(void);

    /*! \}                                                                 */
    /*==========================  PRIVATE  ================================*/

  private:
    /*---------------------------------------------------------------------*/

    // prohibit default functions (move to 'public' if you need one)
    void operator =(const DiscDistribution3DBase &source);
};

typedef DiscDistribution3DBase *DiscDistribution3DBaseP;

OSG_END_NAMESPACE

#endif /* _OSGDISCDISTRIBUTION3DBASE_H_ */
