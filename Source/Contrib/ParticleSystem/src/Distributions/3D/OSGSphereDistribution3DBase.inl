/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *   contact:  David Kabala (djkabala@gmail.com)                             *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class SphereDistribution3D!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

OSG_BEGIN_NAMESPACE


//! access the type of the class
inline
OSG::FieldContainerType &SphereDistribution3DBase::getClassType(void)
{
    return _type;
}

//! access the numerical type of the class
inline
OSG::UInt32 SphereDistribution3DBase::getClassTypeId(void)
{
    return _type.getId();
}

inline
OSG::UInt16 SphereDistribution3DBase::getClassGroupId(void)
{
    return _type.getGroupId();
}

/*------------------------------ get -----------------------------------*/

//! Get the value of the SphereDistribution3D::_sfCenter field.

inline
Pnt3f &SphereDistribution3DBase::editCenter(void)
{
    editSField(CenterFieldMask);

    return _sfCenter.getValue();
}

//! Get the value of the SphereDistribution3D::_sfCenter field.
inline
const Pnt3f &SphereDistribution3DBase::getCenter(void) const
{
    return _sfCenter.getValue();
}

//! Set the value of the SphereDistribution3D::_sfCenter field.
inline
void SphereDistribution3DBase::setCenter(const Pnt3f &value)
{
    editSField(CenterFieldMask);

    _sfCenter.setValue(value);
}
//! Get the value of the SphereDistribution3D::_sfInnerRadius field.

inline
Real32 &SphereDistribution3DBase::editInnerRadius(void)
{
    editSField(InnerRadiusFieldMask);

    return _sfInnerRadius.getValue();
}

//! Get the value of the SphereDistribution3D::_sfInnerRadius field.
inline
      Real32  SphereDistribution3DBase::getInnerRadius(void) const
{
    return _sfInnerRadius.getValue();
}

//! Set the value of the SphereDistribution3D::_sfInnerRadius field.
inline
void SphereDistribution3DBase::setInnerRadius(const Real32 value)
{
    editSField(InnerRadiusFieldMask);

    _sfInnerRadius.setValue(value);
}
//! Get the value of the SphereDistribution3D::_sfOuterRadius field.

inline
Real32 &SphereDistribution3DBase::editOuterRadius(void)
{
    editSField(OuterRadiusFieldMask);

    return _sfOuterRadius.getValue();
}

//! Get the value of the SphereDistribution3D::_sfOuterRadius field.
inline
      Real32  SphereDistribution3DBase::getOuterRadius(void) const
{
    return _sfOuterRadius.getValue();
}

//! Set the value of the SphereDistribution3D::_sfOuterRadius field.
inline
void SphereDistribution3DBase::setOuterRadius(const Real32 value)
{
    editSField(OuterRadiusFieldMask);

    _sfOuterRadius.setValue(value);
}
//! Get the value of the SphereDistribution3D::_sfMinTheta field.

inline
Real32 &SphereDistribution3DBase::editMinTheta(void)
{
    editSField(MinThetaFieldMask);

    return _sfMinTheta.getValue();
}

//! Get the value of the SphereDistribution3D::_sfMinTheta field.
inline
      Real32  SphereDistribution3DBase::getMinTheta(void) const
{
    return _sfMinTheta.getValue();
}

//! Set the value of the SphereDistribution3D::_sfMinTheta field.
inline
void SphereDistribution3DBase::setMinTheta(const Real32 value)
{
    editSField(MinThetaFieldMask);

    _sfMinTheta.setValue(value);
}
//! Get the value of the SphereDistribution3D::_sfMaxTheta field.

inline
Real32 &SphereDistribution3DBase::editMaxTheta(void)
{
    editSField(MaxThetaFieldMask);

    return _sfMaxTheta.getValue();
}

//! Get the value of the SphereDistribution3D::_sfMaxTheta field.
inline
      Real32  SphereDistribution3DBase::getMaxTheta(void) const
{
    return _sfMaxTheta.getValue();
}

//! Set the value of the SphereDistribution3D::_sfMaxTheta field.
inline
void SphereDistribution3DBase::setMaxTheta(const Real32 value)
{
    editSField(MaxThetaFieldMask);

    _sfMaxTheta.setValue(value);
}
//! Get the value of the SphereDistribution3D::_sfMinZ field.

inline
Real32 &SphereDistribution3DBase::editMinZ(void)
{
    editSField(MinZFieldMask);

    return _sfMinZ.getValue();
}

//! Get the value of the SphereDistribution3D::_sfMinZ field.
inline
      Real32  SphereDistribution3DBase::getMinZ(void) const
{
    return _sfMinZ.getValue();
}

//! Set the value of the SphereDistribution3D::_sfMinZ field.
inline
void SphereDistribution3DBase::setMinZ(const Real32 value)
{
    editSField(MinZFieldMask);

    _sfMinZ.setValue(value);
}
//! Get the value of the SphereDistribution3D::_sfMaxZ field.

inline
Real32 &SphereDistribution3DBase::editMaxZ(void)
{
    editSField(MaxZFieldMask);

    return _sfMaxZ.getValue();
}

//! Get the value of the SphereDistribution3D::_sfMaxZ field.
inline
      Real32  SphereDistribution3DBase::getMaxZ(void) const
{
    return _sfMaxZ.getValue();
}

//! Set the value of the SphereDistribution3D::_sfMaxZ field.
inline
void SphereDistribution3DBase::setMaxZ(const Real32 value)
{
    editSField(MaxZFieldMask);

    _sfMaxZ.setValue(value);
}
//! Get the value of the SphereDistribution3D::_sfSurfaceOrVolume field.

inline
UInt32 &SphereDistribution3DBase::editSurfaceOrVolume(void)
{
    editSField(SurfaceOrVolumeFieldMask);

    return _sfSurfaceOrVolume.getValue();
}

//! Get the value of the SphereDistribution3D::_sfSurfaceOrVolume field.
inline
      UInt32  SphereDistribution3DBase::getSurfaceOrVolume(void) const
{
    return _sfSurfaceOrVolume.getValue();
}

//! Set the value of the SphereDistribution3D::_sfSurfaceOrVolume field.
inline
void SphereDistribution3DBase::setSurfaceOrVolume(const UInt32 value)
{
    editSField(SurfaceOrVolumeFieldMask);

    _sfSurfaceOrVolume.setValue(value);
}


#ifdef OSG_MT_CPTR_ASPECT
inline
void SphereDistribution3DBase::execSync (      SphereDistribution3DBase *pFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    Inherited::execSync(pFrom, whichField, oOffsets, syncMode, uiSyncInfo);

    if(FieldBits::NoField != (CenterFieldMask & whichField))
        _sfCenter.syncWith(pFrom->_sfCenter);

    if(FieldBits::NoField != (InnerRadiusFieldMask & whichField))
        _sfInnerRadius.syncWith(pFrom->_sfInnerRadius);

    if(FieldBits::NoField != (OuterRadiusFieldMask & whichField))
        _sfOuterRadius.syncWith(pFrom->_sfOuterRadius);

    if(FieldBits::NoField != (MinThetaFieldMask & whichField))
        _sfMinTheta.syncWith(pFrom->_sfMinTheta);

    if(FieldBits::NoField != (MaxThetaFieldMask & whichField))
        _sfMaxTheta.syncWith(pFrom->_sfMaxTheta);

    if(FieldBits::NoField != (MinZFieldMask & whichField))
        _sfMinZ.syncWith(pFrom->_sfMinZ);

    if(FieldBits::NoField != (MaxZFieldMask & whichField))
        _sfMaxZ.syncWith(pFrom->_sfMaxZ);

    if(FieldBits::NoField != (SurfaceOrVolumeFieldMask & whichField))
        _sfSurfaceOrVolume.syncWith(pFrom->_sfSurfaceOrVolume);
}
#endif


inline
const Char8 *SphereDistribution3DBase::getClassname(void)
{
    return "SphereDistribution3D";
}


OSG_GEN_CONTAINERPTR(SphereDistribution3D);

OSG_END_NAMESPACE

