/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact:  David Kabala (djkabala@gmail.com)                             *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class ParticleGeometryCollisionEvent!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>
#include <boost/assign/list_of.hpp>

#include "OSGConfig.h"



#include "OSGNode.h"                    // HitNode Class
#include "OSGParticleSystem.h"          // System Class

#include "OSGParticleGeometryCollisionEventBase.h"
#include "OSGParticleGeometryCollisionEvent.h"

#include <boost/bind.hpp>

#ifdef WIN32 // turn off 'this' : used in base member initializer list warning
#pragma warning(disable:4355)
#endif

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::ParticleGeometryCollisionEvent
    
 */

/***************************************************************************\
 *                        Field Documentation                              *
\***************************************************************************/

/*! \var Real32          ParticleGeometryCollisionEventBase::_sfHitT
    
*/

/*! \var Node *          ParticleGeometryCollisionEventBase::_sfHitNode
    
*/

/*! \var Int32           ParticleGeometryCollisionEventBase::_sfHitPolygonIndex
    
*/

/*! \var Vec3f           ParticleGeometryCollisionEventBase::_sfHitNormal
    
*/

/*! \var Pnt3f           ParticleGeometryCollisionEventBase::_sfHitPoint
    
*/

/*! \var ParticleSystem * ParticleGeometryCollisionEventBase::_sfSystem
    
*/

/*! \var UInt32          ParticleGeometryCollisionEventBase::_sfParticleIndex
    
*/


/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldTraits<ParticleGeometryCollisionEvent *>::_type("ParticleGeometryCollisionEventPtr", "EventPtr");
#endif

OSG_FIELDTRAITS_GETTYPE(ParticleGeometryCollisionEvent *)

OSG_EXPORT_PTR_SFIELD_FULL(PointerSField,
                           ParticleGeometryCollisionEvent *,
                           0);

OSG_EXPORT_PTR_MFIELD_FULL(PointerMField,
                           ParticleGeometryCollisionEvent *,
                           0);

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

void ParticleGeometryCollisionEventBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new SFReal32::Description(
        SFReal32::getClassType(),
        "HitT",
        "",
        HitTFieldId, HitTFieldMask,
        true,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&ParticleGeometryCollisionEvent::editHandleHitT),
        static_cast<FieldGetMethodSig >(&ParticleGeometryCollisionEvent::getHandleHitT));

    oType.addInitialDesc(pDesc);


    pDesc = new SFUnrecNodePtr::Description(
        SFUnrecNodePtr::getClassType(),
        "HitNode",
        "",
        HitNodeFieldId, HitNodeFieldMask,
        true,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&ParticleGeometryCollisionEvent::editHandleHitNode),
        static_cast<FieldGetMethodSig >(&ParticleGeometryCollisionEvent::getHandleHitNode));

    oType.addInitialDesc(pDesc);


    pDesc = new SFInt32::Description(
        SFInt32::getClassType(),
        "HitPolygonIndex",
        "",
        HitPolygonIndexFieldId, HitPolygonIndexFieldMask,
        true,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&ParticleGeometryCollisionEvent::editHandleHitPolygonIndex),
        static_cast<FieldGetMethodSig >(&ParticleGeometryCollisionEvent::getHandleHitPolygonIndex));

    oType.addInitialDesc(pDesc);


    pDesc = new SFVec3f::Description(
        SFVec3f::getClassType(),
        "HitNormal",
        "",
        HitNormalFieldId, HitNormalFieldMask,
        true,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&ParticleGeometryCollisionEvent::editHandleHitNormal),
        static_cast<FieldGetMethodSig >(&ParticleGeometryCollisionEvent::getHandleHitNormal));

    oType.addInitialDesc(pDesc);


    pDesc = new SFPnt3f::Description(
        SFPnt3f::getClassType(),
        "HitPoint",
        "",
        HitPointFieldId, HitPointFieldMask,
        true,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&ParticleGeometryCollisionEvent::editHandleHitPoint),
        static_cast<FieldGetMethodSig >(&ParticleGeometryCollisionEvent::getHandleHitPoint));

    oType.addInitialDesc(pDesc);


    pDesc = new SFUnrecParticleSystemPtr::Description(
        SFUnrecParticleSystemPtr::getClassType(),
        "System",
        "",
        SystemFieldId, SystemFieldMask,
        true,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&ParticleGeometryCollisionEvent::editHandleSystem),
        static_cast<FieldGetMethodSig >(&ParticleGeometryCollisionEvent::getHandleSystem));

    oType.addInitialDesc(pDesc);


    pDesc = new SFUInt32::Description(
        SFUInt32::getClassType(),
        "ParticleIndex",
        "",
        ParticleIndexFieldId, ParticleIndexFieldMask,
        true,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&ParticleGeometryCollisionEvent::editHandleParticleIndex),
        static_cast<FieldGetMethodSig >(&ParticleGeometryCollisionEvent::getHandleParticleIndex));

    oType.addInitialDesc(pDesc);

}


ParticleGeometryCollisionEventBase::TypeObject ParticleGeometryCollisionEventBase::_type(
    ParticleGeometryCollisionEventBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    0,
    reinterpret_cast<PrototypeCreateF>(&ParticleGeometryCollisionEventBase::createEmptyLocal),
    ParticleGeometryCollisionEvent::initMethod,
    ParticleGeometryCollisionEvent::exitMethod,
    reinterpret_cast<InitalInsertDescFunc>(&ParticleGeometryCollisionEvent::classDescInserter),
    false,
    0,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "\tname=\"ParticleGeometryCollisionEvent\"\n"
    "\tparent=\"Event\"\n"
    "    library=\"ContribParticleSystem\"\n"
    "    pointerfieldtypes=\"both\"\n"
    "\tstructure=\"concrete\"\n"
    "    systemcomponent=\"true\"\n"
    "    parentsystemcomponent=\"true\"\n"
    "    decoratable=\"false\"\n"
    "    useLocalIncludes=\"false\"\n"
    "    isNodeCore=\"false\"\n"
    "    authors=\"David Kabala (djkabala@gmail.com)                             \"\n"
    ">\n"
    "\t<Field\n"
    "\t\tname=\"HitT\"\n"
    "\t\ttype=\"Real32\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"internal\"\n"
    "\t\taccess=\"protected\"\n"
    "        defaultValue=\"0.0f\"\n"
    "        publicRead=\"true\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"HitNode\"\n"
    "\t\ttype=\"Node\"\n"
    "        category=\"pointer\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"internal\"\n"
    "\t\taccess=\"protected\"\n"
    "        defaultValue=\"NULL\"\n"
    "        publicRead=\"true\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"HitPolygonIndex\"\n"
    "\t\ttype=\"Int32\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"internal\"\n"
    "\t\taccess=\"protected\"\n"
    "        defaultValue=\"-1\"\n"
    "        publicRead=\"true\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"HitNormal\"\n"
    "\t\ttype=\"Vec3f\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"internal\"\n"
    "\t\taccess=\"protected\"\n"
    "        defaultValue=\"0.0f,0.0f,0.0f\"\n"
    "        publicRead=\"true\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"HitPoint\"\n"
    "\t\ttype=\"Pnt3f\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"internal\"\n"
    "\t\taccess=\"protected\"\n"
    "        defaultValue=\"0.0f,0.0f,0.0f\"\n"
    "        publicRead=\"true\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"System\"\n"
    "\t\ttype=\"ParticleSystem\"\n"
    "        category=\"pointer\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"internal\"\n"
    "\t\taccess=\"protected\"\n"
    "        defaultValue=\"NULL\"\n"
    "        publicRead=\"true\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"ParticleIndex\"\n"
    "\t\ttype=\"UInt32\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"internal\"\n"
    "\t\taccess=\"protected\"\n"
    "        defaultValue=\"0\"\n"
    "        publicRead=\"true\"\n"
    "\t>\n"
    "\t</Field>\n"
    "</FieldContainer>\n",
    ""
    );


/*------------------------------ get -----------------------------------*/

FieldContainerType &ParticleGeometryCollisionEventBase::getType(void)
{
    return _type;
}

const FieldContainerType &ParticleGeometryCollisionEventBase::getType(void) const
{
    return _type;
}

UInt32 ParticleGeometryCollisionEventBase::getContainerSize(void) const
{
    return sizeof(ParticleGeometryCollisionEvent);
}

/*------------------------- decorator get ------------------------------*/


SFReal32 *ParticleGeometryCollisionEventBase::editSFHitT(void)
{
    editSField(HitTFieldMask);

    return &_sfHitT;
}

const SFReal32 *ParticleGeometryCollisionEventBase::getSFHitT(void) const
{
    return &_sfHitT;
}


//! Get the ParticleGeometryCollisionEvent::_sfHitNode field.
const SFUnrecNodePtr *ParticleGeometryCollisionEventBase::getSFHitNode(void) const
{
    return &_sfHitNode;
}

SFUnrecNodePtr      *ParticleGeometryCollisionEventBase::editSFHitNode        (void)
{
    editSField(HitNodeFieldMask);

    return &_sfHitNode;
}

SFInt32 *ParticleGeometryCollisionEventBase::editSFHitPolygonIndex(void)
{
    editSField(HitPolygonIndexFieldMask);

    return &_sfHitPolygonIndex;
}

const SFInt32 *ParticleGeometryCollisionEventBase::getSFHitPolygonIndex(void) const
{
    return &_sfHitPolygonIndex;
}


SFVec3f *ParticleGeometryCollisionEventBase::editSFHitNormal(void)
{
    editSField(HitNormalFieldMask);

    return &_sfHitNormal;
}

const SFVec3f *ParticleGeometryCollisionEventBase::getSFHitNormal(void) const
{
    return &_sfHitNormal;
}


SFPnt3f *ParticleGeometryCollisionEventBase::editSFHitPoint(void)
{
    editSField(HitPointFieldMask);

    return &_sfHitPoint;
}

const SFPnt3f *ParticleGeometryCollisionEventBase::getSFHitPoint(void) const
{
    return &_sfHitPoint;
}


//! Get the ParticleGeometryCollisionEvent::_sfSystem field.
const SFUnrecParticleSystemPtr *ParticleGeometryCollisionEventBase::getSFSystem(void) const
{
    return &_sfSystem;
}

SFUnrecParticleSystemPtr *ParticleGeometryCollisionEventBase::editSFSystem         (void)
{
    editSField(SystemFieldMask);

    return &_sfSystem;
}

SFUInt32 *ParticleGeometryCollisionEventBase::editSFParticleIndex(void)
{
    editSField(ParticleIndexFieldMask);

    return &_sfParticleIndex;
}

const SFUInt32 *ParticleGeometryCollisionEventBase::getSFParticleIndex(void) const
{
    return &_sfParticleIndex;
}






/*------------------------------ access -----------------------------------*/

UInt32 ParticleGeometryCollisionEventBase::getBinSize(ConstFieldMaskArg whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (HitTFieldMask & whichField))
    {
        returnValue += _sfHitT.getBinSize();
    }
    if(FieldBits::NoField != (HitNodeFieldMask & whichField))
    {
        returnValue += _sfHitNode.getBinSize();
    }
    if(FieldBits::NoField != (HitPolygonIndexFieldMask & whichField))
    {
        returnValue += _sfHitPolygonIndex.getBinSize();
    }
    if(FieldBits::NoField != (HitNormalFieldMask & whichField))
    {
        returnValue += _sfHitNormal.getBinSize();
    }
    if(FieldBits::NoField != (HitPointFieldMask & whichField))
    {
        returnValue += _sfHitPoint.getBinSize();
    }
    if(FieldBits::NoField != (SystemFieldMask & whichField))
    {
        returnValue += _sfSystem.getBinSize();
    }
    if(FieldBits::NoField != (ParticleIndexFieldMask & whichField))
    {
        returnValue += _sfParticleIndex.getBinSize();
    }

    return returnValue;
}

void ParticleGeometryCollisionEventBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (HitTFieldMask & whichField))
    {
        _sfHitT.copyToBin(pMem);
    }
    if(FieldBits::NoField != (HitNodeFieldMask & whichField))
    {
        _sfHitNode.copyToBin(pMem);
    }
    if(FieldBits::NoField != (HitPolygonIndexFieldMask & whichField))
    {
        _sfHitPolygonIndex.copyToBin(pMem);
    }
    if(FieldBits::NoField != (HitNormalFieldMask & whichField))
    {
        _sfHitNormal.copyToBin(pMem);
    }
    if(FieldBits::NoField != (HitPointFieldMask & whichField))
    {
        _sfHitPoint.copyToBin(pMem);
    }
    if(FieldBits::NoField != (SystemFieldMask & whichField))
    {
        _sfSystem.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ParticleIndexFieldMask & whichField))
    {
        _sfParticleIndex.copyToBin(pMem);
    }
}

void ParticleGeometryCollisionEventBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (HitTFieldMask & whichField))
    {
        _sfHitT.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (HitNodeFieldMask & whichField))
    {
        _sfHitNode.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (HitPolygonIndexFieldMask & whichField))
    {
        _sfHitPolygonIndex.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (HitNormalFieldMask & whichField))
    {
        _sfHitNormal.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (HitPointFieldMask & whichField))
    {
        _sfHitPoint.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (SystemFieldMask & whichField))
    {
        _sfSystem.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ParticleIndexFieldMask & whichField))
    {
        _sfParticleIndex.copyFromBin(pMem);
    }
}

//! create a new instance of the class
ParticleGeometryCollisionEventTransitPtr ParticleGeometryCollisionEventBase::createLocal(BitVector bFlags)
{
    ParticleGeometryCollisionEventTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyLocal(bFlags);

        fc = dynamic_pointer_cast<ParticleGeometryCollisionEvent>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class, copy the container flags
ParticleGeometryCollisionEventTransitPtr ParticleGeometryCollisionEventBase::createDependent(BitVector bFlags)
{
    ParticleGeometryCollisionEventTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyDependent(bFlags);

        fc = dynamic_pointer_cast<ParticleGeometryCollisionEvent>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class
ParticleGeometryCollisionEventTransitPtr ParticleGeometryCollisionEventBase::create(void)
{
    ParticleGeometryCollisionEventTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopy();

        fc = dynamic_pointer_cast<ParticleGeometryCollisionEvent>(tmpPtr);
    }

    return fc;
}

ParticleGeometryCollisionEvent *ParticleGeometryCollisionEventBase::createEmptyLocal(BitVector bFlags)
{
    ParticleGeometryCollisionEvent *returnValue;

    newPtr<ParticleGeometryCollisionEvent>(returnValue, bFlags);

    returnValue->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

//! create an empty new instance of the class, do not copy the prototype
ParticleGeometryCollisionEvent *ParticleGeometryCollisionEventBase::createEmpty(void)
{
    ParticleGeometryCollisionEvent *returnValue;

    newPtr<ParticleGeometryCollisionEvent>(returnValue, Thread::getCurrentLocalFlags());

    returnValue->_pFieldFlags->_bNamespaceMask &=
        ~Thread::getCurrentLocalFlags();

    return returnValue;
}


FieldContainerTransitPtr ParticleGeometryCollisionEventBase::shallowCopyLocal(
    BitVector bFlags) const
{
    ParticleGeometryCollisionEvent *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const ParticleGeometryCollisionEvent *>(this), bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

FieldContainerTransitPtr ParticleGeometryCollisionEventBase::shallowCopyDependent(
    BitVector bFlags) const
{
    ParticleGeometryCollisionEvent *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const ParticleGeometryCollisionEvent *>(this), ~bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask = bFlags;

    return returnValue;
}

FieldContainerTransitPtr ParticleGeometryCollisionEventBase::shallowCopy(void) const
{
    ParticleGeometryCollisionEvent *tmpPtr;

    newPtr(tmpPtr,
           dynamic_cast<const ParticleGeometryCollisionEvent *>(this),
           Thread::getCurrentLocalFlags());

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~Thread::getCurrentLocalFlags();

    FieldContainerTransitPtr returnValue(tmpPtr);

    return returnValue;
}




/*------------------------- constructors ----------------------------------*/

ParticleGeometryCollisionEventBase::ParticleGeometryCollisionEventBase(void) :
    Inherited(),
    _sfHitT                   (Real32(0.0f)),
    _sfHitNode                (NULL),
    _sfHitPolygonIndex        (Int32(-1)),
    _sfHitNormal              (Vec3f(0.0f,0.0f,0.0f)),
    _sfHitPoint               (Pnt3f(0.0f,0.0f,0.0f)),
    _sfSystem                 (NULL),
    _sfParticleIndex          (UInt32(0))
{
}

ParticleGeometryCollisionEventBase::ParticleGeometryCollisionEventBase(const ParticleGeometryCollisionEventBase &source) :
    Inherited(source),
    _sfHitT                   (source._sfHitT                   ),
    _sfHitNode                (NULL),
    _sfHitPolygonIndex        (source._sfHitPolygonIndex        ),
    _sfHitNormal              (source._sfHitNormal              ),
    _sfHitPoint               (source._sfHitPoint               ),
    _sfSystem                 (NULL),
    _sfParticleIndex          (source._sfParticleIndex          )
{
}


/*-------------------------- destructors ----------------------------------*/

ParticleGeometryCollisionEventBase::~ParticleGeometryCollisionEventBase(void)
{
}

void ParticleGeometryCollisionEventBase::onCreate(const ParticleGeometryCollisionEvent *source)
{
    Inherited::onCreate(source);

    if(source != NULL)
    {
        ParticleGeometryCollisionEvent *pThis = static_cast<ParticleGeometryCollisionEvent *>(this);

        pThis->setHitNode(source->getHitNode());

        pThis->setSystem(source->getSystem());
    }
}

GetFieldHandlePtr ParticleGeometryCollisionEventBase::getHandleHitT            (void) const
{
    SFReal32::GetHandlePtr returnValue(
        new  SFReal32::GetHandle(
             &_sfHitT,
             this->getType().getFieldDesc(HitTFieldId),
             const_cast<ParticleGeometryCollisionEventBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ParticleGeometryCollisionEventBase::editHandleHitT           (void)
{
    SFReal32::EditHandlePtr returnValue(
        new  SFReal32::EditHandle(
             &_sfHitT,
             this->getType().getFieldDesc(HitTFieldId),
             this));


    editSField(HitTFieldMask);

    return returnValue;
}

GetFieldHandlePtr ParticleGeometryCollisionEventBase::getHandleHitNode         (void) const
{
    SFUnrecNodePtr::GetHandlePtr returnValue(
        new  SFUnrecNodePtr::GetHandle(
             &_sfHitNode,
             this->getType().getFieldDesc(HitNodeFieldId),
             const_cast<ParticleGeometryCollisionEventBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ParticleGeometryCollisionEventBase::editHandleHitNode        (void)
{
    SFUnrecNodePtr::EditHandlePtr returnValue(
        new  SFUnrecNodePtr::EditHandle(
             &_sfHitNode,
             this->getType().getFieldDesc(HitNodeFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&ParticleGeometryCollisionEvent::setHitNode,
                    static_cast<ParticleGeometryCollisionEvent *>(this), _1));

    editSField(HitNodeFieldMask);

    return returnValue;
}

GetFieldHandlePtr ParticleGeometryCollisionEventBase::getHandleHitPolygonIndex (void) const
{
    SFInt32::GetHandlePtr returnValue(
        new  SFInt32::GetHandle(
             &_sfHitPolygonIndex,
             this->getType().getFieldDesc(HitPolygonIndexFieldId),
             const_cast<ParticleGeometryCollisionEventBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ParticleGeometryCollisionEventBase::editHandleHitPolygonIndex(void)
{
    SFInt32::EditHandlePtr returnValue(
        new  SFInt32::EditHandle(
             &_sfHitPolygonIndex,
             this->getType().getFieldDesc(HitPolygonIndexFieldId),
             this));


    editSField(HitPolygonIndexFieldMask);

    return returnValue;
}

GetFieldHandlePtr ParticleGeometryCollisionEventBase::getHandleHitNormal       (void) const
{
    SFVec3f::GetHandlePtr returnValue(
        new  SFVec3f::GetHandle(
             &_sfHitNormal,
             this->getType().getFieldDesc(HitNormalFieldId),
             const_cast<ParticleGeometryCollisionEventBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ParticleGeometryCollisionEventBase::editHandleHitNormal      (void)
{
    SFVec3f::EditHandlePtr returnValue(
        new  SFVec3f::EditHandle(
             &_sfHitNormal,
             this->getType().getFieldDesc(HitNormalFieldId),
             this));


    editSField(HitNormalFieldMask);

    return returnValue;
}

GetFieldHandlePtr ParticleGeometryCollisionEventBase::getHandleHitPoint        (void) const
{
    SFPnt3f::GetHandlePtr returnValue(
        new  SFPnt3f::GetHandle(
             &_sfHitPoint,
             this->getType().getFieldDesc(HitPointFieldId),
             const_cast<ParticleGeometryCollisionEventBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ParticleGeometryCollisionEventBase::editHandleHitPoint       (void)
{
    SFPnt3f::EditHandlePtr returnValue(
        new  SFPnt3f::EditHandle(
             &_sfHitPoint,
             this->getType().getFieldDesc(HitPointFieldId),
             this));


    editSField(HitPointFieldMask);

    return returnValue;
}

GetFieldHandlePtr ParticleGeometryCollisionEventBase::getHandleSystem          (void) const
{
    SFUnrecParticleSystemPtr::GetHandlePtr returnValue(
        new  SFUnrecParticleSystemPtr::GetHandle(
             &_sfSystem,
             this->getType().getFieldDesc(SystemFieldId),
             const_cast<ParticleGeometryCollisionEventBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ParticleGeometryCollisionEventBase::editHandleSystem         (void)
{
    SFUnrecParticleSystemPtr::EditHandlePtr returnValue(
        new  SFUnrecParticleSystemPtr::EditHandle(
             &_sfSystem,
             this->getType().getFieldDesc(SystemFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&ParticleGeometryCollisionEvent::setSystem,
                    static_cast<ParticleGeometryCollisionEvent *>(this), _1));

    editSField(SystemFieldMask);

    return returnValue;
}

GetFieldHandlePtr ParticleGeometryCollisionEventBase::getHandleParticleIndex   (void) const
{
    SFUInt32::GetHandlePtr returnValue(
        new  SFUInt32::GetHandle(
             &_sfParticleIndex,
             this->getType().getFieldDesc(ParticleIndexFieldId),
             const_cast<ParticleGeometryCollisionEventBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ParticleGeometryCollisionEventBase::editHandleParticleIndex  (void)
{
    SFUInt32::EditHandlePtr returnValue(
        new  SFUInt32::EditHandle(
             &_sfParticleIndex,
             this->getType().getFieldDesc(ParticleIndexFieldId),
             this));


    editSField(ParticleIndexFieldMask);

    return returnValue;
}


#ifdef OSG_MT_CPTR_ASPECT
void ParticleGeometryCollisionEventBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    ParticleGeometryCollisionEvent *pThis = static_cast<ParticleGeometryCollisionEvent *>(this);

    pThis->execSync(static_cast<ParticleGeometryCollisionEvent *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif


#ifdef OSG_MT_CPTR_ASPECT
FieldContainer *ParticleGeometryCollisionEventBase::createAspectCopy(
    const FieldContainer *pRefAspect) const
{
    ParticleGeometryCollisionEvent *returnValue;

    newAspectCopy(returnValue,
                  dynamic_cast<const ParticleGeometryCollisionEvent *>(pRefAspect),
                  dynamic_cast<const ParticleGeometryCollisionEvent *>(this));

    return returnValue;
}
#endif

void ParticleGeometryCollisionEventBase::resolveLinks(void)
{
    Inherited::resolveLinks();

    static_cast<ParticleGeometryCollisionEvent *>(this)->setHitNode(NULL);

    static_cast<ParticleGeometryCollisionEvent *>(this)->setSystem(NULL);


}


OSG_END_NAMESPACE
