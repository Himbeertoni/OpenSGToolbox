/*---------------------------------------------------------------------------*\
 *                     OpenSG ToolBox UserInterface                          *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                         www.vrac.iastate.edu                              *
 *                                                                           *
 *                          Authors: David Kabala                            *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class ParticleGeometryCollisionEvent
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#ifndef _OSGPARTICLEGEOMETRYCOLLISIONEVENTBASE_H_
#define _OSGPARTICLEGEOMETRYCOLLISIONEVENTBASE_H_
#ifdef __sgi
#pragma once
#endif


#include <OpenSG/OSGConfig.h>
#include "OSGParticleSystemDef.h"

#include <OpenSG/OSGBaseTypes.h>
#include <OpenSG/OSGRefPtr.h>
#include <OpenSG/OSGCoredNodePtr.h>

#include <OpenSG/Toolbox/OSGEvent.h> // Parent

#include <OpenSG/OSGReal32Fields.h> // HitT type
#include <OpenSG/OSGNodeFields.h> // HitNode type
#include <OpenSG/OSGInt32Fields.h> // HitPolygonIndex type
#include <OpenSG/OSGVec3fFields.h> // HitNormal type
#include <OpenSG/OSGPnt3fFields.h> // HitPoint type
#include "ParticleSystem/OSGParticleSystemFields.h" // System type
#include <OpenSG/OSGUInt32Fields.h> // ParticleIndex type

#include "OSGParticleGeometryCollisionEventFields.h"
OSG_BEGIN_NAMESPACE

class ParticleGeometryCollisionEvent;
class BinaryDataHandler;

//! \brief ParticleGeometryCollisionEvent Base Class.

class OSG_PARTICLESYSTEMLIB_DLLMAPPING ParticleGeometryCollisionEventBase : public Event
{
  private:

    typedef Event    Inherited;

    /*==========================  PUBLIC  =================================*/
  public:

    typedef ParticleGeometryCollisionEventPtr  Ptr;

    enum
    {
        HitTFieldId            = Inherited::NextFieldId,
        HitNodeFieldId         = HitTFieldId            + 1,
        HitPolygonIndexFieldId = HitNodeFieldId         + 1,
        HitNormalFieldId       = HitPolygonIndexFieldId + 1,
        HitPointFieldId        = HitNormalFieldId       + 1,
        SystemFieldId          = HitPointFieldId        + 1,
        ParticleIndexFieldId   = SystemFieldId          + 1,
        NextFieldId            = ParticleIndexFieldId   + 1
    };

    static const OSG::BitVector HitTFieldMask;
    static const OSG::BitVector HitNodeFieldMask;
    static const OSG::BitVector HitPolygonIndexFieldMask;
    static const OSG::BitVector HitNormalFieldMask;
    static const OSG::BitVector HitPointFieldMask;
    static const OSG::BitVector SystemFieldMask;
    static const OSG::BitVector ParticleIndexFieldMask;


    static const OSG::BitVector MTInfluenceMask;

    /*---------------------------------------------------------------------*/
    /*! \name                    Class Get                                 */
    /*! \{                                                                 */

    static        FieldContainerType &getClassType    (void); 
    static        UInt32              getClassTypeId  (void); 

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                FieldContainer Get                            */
    /*! \{                                                                 */

    virtual       FieldContainerType &getType  (void); 
    virtual const FieldContainerType &getType  (void) const; 

    virtual       UInt32              getContainerSize(void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Get                                 */
    /*! \{                                                                 */

     const SFReal32            *getSFHitT           (void) const;
     const SFNodePtr           *getSFHitNode        (void) const;
     const SFInt32             *getSFHitPolygonIndex(void) const;
     const SFVec3f             *getSFHitNormal      (void) const;
     const SFPnt3f             *getSFHitPoint       (void) const;
     const SFParticleSystemPtr *getSFSystem         (void) const;
     const SFUInt32            *getSFParticleIndex  (void) const;


     const Real32              &getHitT           (void) const;

     const NodePtr             &getHitNode        (void) const;

     const Int32               &getHitPolygonIndex(void) const;

     const Vec3f               &getHitNormal      (void) const;

     const Pnt3f               &getHitPoint       (void) const;

     const ParticleSystemPtr   &getSystem         (void) const;

     const UInt32              &getParticleIndex  (void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Set                                 */
    /*! \{                                                                 */


    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Binary Access                              */
    /*! \{                                                                 */

    virtual UInt32 getBinSize (const BitVector         &whichField);
    virtual void   copyToBin  (      BinaryDataHandler &pMem,
                               const BitVector         &whichField);
    virtual void   copyFromBin(      BinaryDataHandler &pMem,
                               const BitVector         &whichField);


    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Construction                               */
    /*! \{                                                                 */

    static  ParticleGeometryCollisionEventPtr      create          (void); 
    static  ParticleGeometryCollisionEventPtr      createEmpty     (void); 

    /*! \}                                                                 */

    /*---------------------------------------------------------------------*/
    /*! \name                       Copy                                   */
    /*! \{                                                                 */

    virtual FieldContainerPtr     shallowCopy     (void) const; 

    /*! \}                                                                 */
    /*=========================  PROTECTED  ===============================*/
  protected:

    /*---------------------------------------------------------------------*/
    /*! \name                      Fields                                  */
    /*! \{                                                                 */

    SFReal32            _sfHitT;
    SFNodePtr           _sfHitNode;
    SFInt32             _sfHitPolygonIndex;
    SFVec3f             _sfHitNormal;
    SFPnt3f             _sfHitPoint;
    SFParticleSystemPtr   _sfSystem;
    SFUInt32            _sfParticleIndex;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Constructors                               */
    /*! \{                                                                 */

    ParticleGeometryCollisionEventBase(void);
    ParticleGeometryCollisionEventBase(const ParticleGeometryCollisionEventBase &source);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Destructors                                */
    /*! \{                                                                 */

    virtual ~ParticleGeometryCollisionEventBase(void); 

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Get                                 */
    /*! \{                                                                 */

           SFReal32            *editSFHitT           (void);
           SFNodePtr           *editSFHitNode        (void);
           SFInt32             *editSFHitPolygonIndex(void);
           SFVec3f             *editSFHitNormal      (void);
           SFPnt3f             *editSFHitPoint       (void);
           SFParticleSystemPtr *editSFSystem         (void);
           SFUInt32            *editSFParticleIndex  (void);

           Real32              &editHitT           (void);
           NodePtr             &editHitNode        (void);
           Int32               &editHitPolygonIndex(void);
           Vec3f               &editHitNormal      (void);
           Pnt3f               &editHitPoint       (void);
           ParticleSystemPtr   &editSystem         (void);
           UInt32              &editParticleIndex  (void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Set                                 */
    /*! \{                                                                 */

     void setHitT           (const Real32 &value);
     void setHitNode        (const NodePtr &value);
     void setHitPolygonIndex(const Int32 &value);
     void setHitNormal      (const Vec3f &value);
     void setHitPoint       (const Pnt3f &value);
     void setSystem         (const ParticleSystemPtr &value);
     void setParticleIndex  (const UInt32 &value);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

#if !defined(OSG_FIXED_MFIELDSYNC)
    void executeSyncImpl(      ParticleGeometryCollisionEventBase *pOther,
                         const BitVector         &whichField);

    virtual void   executeSync(      FieldContainer    &other,
                               const BitVector         &whichField);
#else
    void executeSyncImpl(      ParticleGeometryCollisionEventBase *pOther,
                         const BitVector         &whichField,
                         const SyncInfo          &sInfo     );

    virtual void   executeSync(      FieldContainer    &other,
                               const BitVector         &whichField,
                               const SyncInfo          &sInfo);

    virtual void execBeginEdit     (const BitVector &whichField,
                                          UInt32     uiAspect,
                                          UInt32     uiContainerSize);

            void execBeginEditImpl (const BitVector &whichField,
                                          UInt32     uiAspect,
                                          UInt32     uiContainerSize);

    virtual void onDestroyAspect(UInt32 uiId, UInt32 uiAspect);
#endif

    /*! \}                                                                 */
    /*==========================  PRIVATE  ================================*/
  private:

    friend class FieldContainer;

    static FieldDescription   *_desc[];
    static FieldContainerType  _type;


    // prohibit default functions (move to 'public' if you need one)
    void operator =(const ParticleGeometryCollisionEventBase &source);
};

//---------------------------------------------------------------------------
//   Exported Types
//---------------------------------------------------------------------------


typedef ParticleGeometryCollisionEventBase *ParticleGeometryCollisionEventBaseP;

typedef osgIF<ParticleGeometryCollisionEventBase::isNodeCore,
              CoredNodePtr<ParticleGeometryCollisionEvent>,
              FieldContainer::attempt_to_create_CoredNodePtr_on_non_NodeCore_FC
              >::_IRet ParticleGeometryCollisionEventNodePtr;

typedef RefPtr<ParticleGeometryCollisionEventPtr> ParticleGeometryCollisionEventRefPtr;

OSG_END_NAMESPACE

#endif /* _OSGPARTICLEGEOMETRYCOLLISIONEVENTBASE_H_ */
