/*---------------------------------------------------------------------------*\
 *                     OpenSG ToolBox UserInterface                          *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                          Authors: David Kabala                            *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class ParticleGeometryCollisionEvent!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <OpenSG/OSGConfig.h>

OSG_BEGIN_NAMESPACE


//! access the type of the class
inline
OSG::FieldContainerType &ParticleGeometryCollisionEventBase::getClassType(void)
{
    return _type; 
} 

//! access the numerical type of the class
inline
OSG::UInt32 ParticleGeometryCollisionEventBase::getClassTypeId(void) 
{
    return _type.getId(); 
} 

//! create a new instance of the class
inline
ParticleGeometryCollisionEventPtr ParticleGeometryCollisionEventBase::create(void) 
{
    ParticleGeometryCollisionEventPtr fc; 

    if(getClassType().getPrototype() != OSG::NullFC) 
    {
        fc = ParticleGeometryCollisionEventPtr::dcast(
            getClassType().getPrototype()-> shallowCopy()); 
    }
    
    return fc; 
}

//! create an empty new instance of the class, do not copy the prototype
inline
ParticleGeometryCollisionEventPtr ParticleGeometryCollisionEventBase::createEmpty(void) 
{ 
    ParticleGeometryCollisionEventPtr returnValue; 
    
    newPtr(returnValue); 

    return returnValue; 
}


/*------------------------------ get -----------------------------------*/

//! Get the ParticleGeometryCollisionEvent::_sfHitT field.
inline
const SFReal32 *ParticleGeometryCollisionEventBase::getSFHitT(void) const
{
    return &_sfHitT;
}

//! Get the ParticleGeometryCollisionEvent::_sfHitT field.
inline
SFReal32 *ParticleGeometryCollisionEventBase::editSFHitT(void)
{
    return &_sfHitT;
}

//! Get the ParticleGeometryCollisionEvent::_sfHitNode field.
inline
const SFNodePtr *ParticleGeometryCollisionEventBase::getSFHitNode(void) const
{
    return &_sfHitNode;
}

//! Get the ParticleGeometryCollisionEvent::_sfHitNode field.
inline
SFNodePtr *ParticleGeometryCollisionEventBase::editSFHitNode(void)
{
    return &_sfHitNode;
}

//! Get the ParticleGeometryCollisionEvent::_sfHitPolygonIndex field.
inline
const SFInt32 *ParticleGeometryCollisionEventBase::getSFHitPolygonIndex(void) const
{
    return &_sfHitPolygonIndex;
}

//! Get the ParticleGeometryCollisionEvent::_sfHitPolygonIndex field.
inline
SFInt32 *ParticleGeometryCollisionEventBase::editSFHitPolygonIndex(void)
{
    return &_sfHitPolygonIndex;
}

//! Get the ParticleGeometryCollisionEvent::_sfHitNormal field.
inline
const SFVec3f *ParticleGeometryCollisionEventBase::getSFHitNormal(void) const
{
    return &_sfHitNormal;
}

//! Get the ParticleGeometryCollisionEvent::_sfHitNormal field.
inline
SFVec3f *ParticleGeometryCollisionEventBase::editSFHitNormal(void)
{
    return &_sfHitNormal;
}

//! Get the ParticleGeometryCollisionEvent::_sfHitPoint field.
inline
const SFPnt3f *ParticleGeometryCollisionEventBase::getSFHitPoint(void) const
{
    return &_sfHitPoint;
}

//! Get the ParticleGeometryCollisionEvent::_sfHitPoint field.
inline
SFPnt3f *ParticleGeometryCollisionEventBase::editSFHitPoint(void)
{
    return &_sfHitPoint;
}

//! Get the ParticleGeometryCollisionEvent::_sfSystem field.
inline
const SFParticleSystemPtr *ParticleGeometryCollisionEventBase::getSFSystem(void) const
{
    return &_sfSystem;
}

//! Get the ParticleGeometryCollisionEvent::_sfSystem field.
inline
SFParticleSystemPtr *ParticleGeometryCollisionEventBase::editSFSystem(void)
{
    return &_sfSystem;
}

//! Get the ParticleGeometryCollisionEvent::_sfParticleIndex field.
inline
const SFUInt32 *ParticleGeometryCollisionEventBase::getSFParticleIndex(void) const
{
    return &_sfParticleIndex;
}

//! Get the ParticleGeometryCollisionEvent::_sfParticleIndex field.
inline
SFUInt32 *ParticleGeometryCollisionEventBase::editSFParticleIndex(void)
{
    return &_sfParticleIndex;
}


//! Get the value of the ParticleGeometryCollisionEvent::_sfHitT field.
inline
Real32 &ParticleGeometryCollisionEventBase::editHitT(void)
{
    return _sfHitT.getValue();
}

//! Get the value of the ParticleGeometryCollisionEvent::_sfHitT field.
inline
const Real32 &ParticleGeometryCollisionEventBase::getHitT(void) const
{
    return _sfHitT.getValue();
}

//! Set the value of the ParticleGeometryCollisionEvent::_sfHitT field.
inline
void ParticleGeometryCollisionEventBase::setHitT(const Real32 &value)
{
    _sfHitT.setValue(value);
}

//! Get the value of the ParticleGeometryCollisionEvent::_sfHitNode field.
inline
NodePtr &ParticleGeometryCollisionEventBase::editHitNode(void)
{
    return _sfHitNode.getValue();
}

//! Get the value of the ParticleGeometryCollisionEvent::_sfHitNode field.
inline
const NodePtr &ParticleGeometryCollisionEventBase::getHitNode(void) const
{
    return _sfHitNode.getValue();
}

//! Set the value of the ParticleGeometryCollisionEvent::_sfHitNode field.
inline
void ParticleGeometryCollisionEventBase::setHitNode(const NodePtr &value)
{
    _sfHitNode.setValue(value);
}

//! Get the value of the ParticleGeometryCollisionEvent::_sfHitPolygonIndex field.
inline
Int32 &ParticleGeometryCollisionEventBase::editHitPolygonIndex(void)
{
    return _sfHitPolygonIndex.getValue();
}

//! Get the value of the ParticleGeometryCollisionEvent::_sfHitPolygonIndex field.
inline
const Int32 &ParticleGeometryCollisionEventBase::getHitPolygonIndex(void) const
{
    return _sfHitPolygonIndex.getValue();
}

//! Set the value of the ParticleGeometryCollisionEvent::_sfHitPolygonIndex field.
inline
void ParticleGeometryCollisionEventBase::setHitPolygonIndex(const Int32 &value)
{
    _sfHitPolygonIndex.setValue(value);
}

//! Get the value of the ParticleGeometryCollisionEvent::_sfHitNormal field.
inline
Vec3f &ParticleGeometryCollisionEventBase::editHitNormal(void)
{
    return _sfHitNormal.getValue();
}

//! Get the value of the ParticleGeometryCollisionEvent::_sfHitNormal field.
inline
const Vec3f &ParticleGeometryCollisionEventBase::getHitNormal(void) const
{
    return _sfHitNormal.getValue();
}

//! Set the value of the ParticleGeometryCollisionEvent::_sfHitNormal field.
inline
void ParticleGeometryCollisionEventBase::setHitNormal(const Vec3f &value)
{
    _sfHitNormal.setValue(value);
}

//! Get the value of the ParticleGeometryCollisionEvent::_sfHitPoint field.
inline
Pnt3f &ParticleGeometryCollisionEventBase::editHitPoint(void)
{
    return _sfHitPoint.getValue();
}

//! Get the value of the ParticleGeometryCollisionEvent::_sfHitPoint field.
inline
const Pnt3f &ParticleGeometryCollisionEventBase::getHitPoint(void) const
{
    return _sfHitPoint.getValue();
}

//! Set the value of the ParticleGeometryCollisionEvent::_sfHitPoint field.
inline
void ParticleGeometryCollisionEventBase::setHitPoint(const Pnt3f &value)
{
    _sfHitPoint.setValue(value);
}

//! Get the value of the ParticleGeometryCollisionEvent::_sfSystem field.
inline
ParticleSystemPtr &ParticleGeometryCollisionEventBase::editSystem(void)
{
    return _sfSystem.getValue();
}

//! Get the value of the ParticleGeometryCollisionEvent::_sfSystem field.
inline
const ParticleSystemPtr &ParticleGeometryCollisionEventBase::getSystem(void) const
{
    return _sfSystem.getValue();
}

//! Set the value of the ParticleGeometryCollisionEvent::_sfSystem field.
inline
void ParticleGeometryCollisionEventBase::setSystem(const ParticleSystemPtr &value)
{
    _sfSystem.setValue(value);
}

//! Get the value of the ParticleGeometryCollisionEvent::_sfParticleIndex field.
inline
UInt32 &ParticleGeometryCollisionEventBase::editParticleIndex(void)
{
    return _sfParticleIndex.getValue();
}

//! Get the value of the ParticleGeometryCollisionEvent::_sfParticleIndex field.
inline
const UInt32 &ParticleGeometryCollisionEventBase::getParticleIndex(void) const
{
    return _sfParticleIndex.getValue();
}

//! Set the value of the ParticleGeometryCollisionEvent::_sfParticleIndex field.
inline
void ParticleGeometryCollisionEventBase::setParticleIndex(const UInt32 &value)
{
    _sfParticleIndex.setValue(value);
}


OSG_END_NAMESPACE
