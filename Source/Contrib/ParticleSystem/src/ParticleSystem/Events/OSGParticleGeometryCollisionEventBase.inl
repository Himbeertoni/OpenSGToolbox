/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *   contact:  David Kabala (djkabala@gmail.com)                             *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class ParticleGeometryCollisionEvent!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

OSG_BEGIN_NAMESPACE


//! access the type of the class
inline
OSG::FieldContainerType &ParticleGeometryCollisionEventBase::getClassType(void)
{
    return _type;
}

//! access the numerical type of the class
inline
OSG::UInt32 ParticleGeometryCollisionEventBase::getClassTypeId(void)
{
    return _type.getId();
}

inline
OSG::UInt16 ParticleGeometryCollisionEventBase::getClassGroupId(void)
{
    return _type.getGroupId();
}

/*------------------------------ get -----------------------------------*/

//! Get the value of the ParticleGeometryCollisionEvent::_sfHitT field.

inline
Real32 &ParticleGeometryCollisionEventBase::editHitT(void)
{
    editSField(HitTFieldMask);

    return _sfHitT.getValue();
}

//! Get the value of the ParticleGeometryCollisionEvent::_sfHitT field.
inline
      Real32  ParticleGeometryCollisionEventBase::getHitT(void) const
{
    return _sfHitT.getValue();
}

//! Set the value of the ParticleGeometryCollisionEvent::_sfHitT field.
inline
void ParticleGeometryCollisionEventBase::setHitT(const Real32 value)
{
    editSField(HitTFieldMask);

    _sfHitT.setValue(value);
}

//! Get the value of the ParticleGeometryCollisionEvent::_sfHitNode field.
inline
Node * ParticleGeometryCollisionEventBase::getHitNode(void) const
{
    return _sfHitNode.getValue();
}

//! Set the value of the ParticleGeometryCollisionEvent::_sfHitNode field.
inline
void ParticleGeometryCollisionEventBase::setHitNode(Node * const value)
{
    editSField(HitNodeFieldMask);

    _sfHitNode.setValue(value);
}
//! Get the value of the ParticleGeometryCollisionEvent::_sfHitPolygonIndex field.

inline
Int32 &ParticleGeometryCollisionEventBase::editHitPolygonIndex(void)
{
    editSField(HitPolygonIndexFieldMask);

    return _sfHitPolygonIndex.getValue();
}

//! Get the value of the ParticleGeometryCollisionEvent::_sfHitPolygonIndex field.
inline
      Int32  ParticleGeometryCollisionEventBase::getHitPolygonIndex(void) const
{
    return _sfHitPolygonIndex.getValue();
}

//! Set the value of the ParticleGeometryCollisionEvent::_sfHitPolygonIndex field.
inline
void ParticleGeometryCollisionEventBase::setHitPolygonIndex(const Int32 value)
{
    editSField(HitPolygonIndexFieldMask);

    _sfHitPolygonIndex.setValue(value);
}
//! Get the value of the ParticleGeometryCollisionEvent::_sfHitNormal field.

inline
Vec3f &ParticleGeometryCollisionEventBase::editHitNormal(void)
{
    editSField(HitNormalFieldMask);

    return _sfHitNormal.getValue();
}

//! Get the value of the ParticleGeometryCollisionEvent::_sfHitNormal field.
inline
const Vec3f &ParticleGeometryCollisionEventBase::getHitNormal(void) const
{
    return _sfHitNormal.getValue();
}

//! Set the value of the ParticleGeometryCollisionEvent::_sfHitNormal field.
inline
void ParticleGeometryCollisionEventBase::setHitNormal(const Vec3f &value)
{
    editSField(HitNormalFieldMask);

    _sfHitNormal.setValue(value);
}
//! Get the value of the ParticleGeometryCollisionEvent::_sfHitPoint field.

inline
Pnt3f &ParticleGeometryCollisionEventBase::editHitPoint(void)
{
    editSField(HitPointFieldMask);

    return _sfHitPoint.getValue();
}

//! Get the value of the ParticleGeometryCollisionEvent::_sfHitPoint field.
inline
const Pnt3f &ParticleGeometryCollisionEventBase::getHitPoint(void) const
{
    return _sfHitPoint.getValue();
}

//! Set the value of the ParticleGeometryCollisionEvent::_sfHitPoint field.
inline
void ParticleGeometryCollisionEventBase::setHitPoint(const Pnt3f &value)
{
    editSField(HitPointFieldMask);

    _sfHitPoint.setValue(value);
}

//! Get the value of the ParticleGeometryCollisionEvent::_sfSystem field.
inline
ParticleSystem * ParticleGeometryCollisionEventBase::getSystem(void) const
{
    return _sfSystem.getValue();
}

//! Set the value of the ParticleGeometryCollisionEvent::_sfSystem field.
inline
void ParticleGeometryCollisionEventBase::setSystem(ParticleSystem * const value)
{
    editSField(SystemFieldMask);

    _sfSystem.setValue(value);
}
//! Get the value of the ParticleGeometryCollisionEvent::_sfParticleIndex field.

inline
UInt32 &ParticleGeometryCollisionEventBase::editParticleIndex(void)
{
    editSField(ParticleIndexFieldMask);

    return _sfParticleIndex.getValue();
}

//! Get the value of the ParticleGeometryCollisionEvent::_sfParticleIndex field.
inline
      UInt32  ParticleGeometryCollisionEventBase::getParticleIndex(void) const
{
    return _sfParticleIndex.getValue();
}

//! Set the value of the ParticleGeometryCollisionEvent::_sfParticleIndex field.
inline
void ParticleGeometryCollisionEventBase::setParticleIndex(const UInt32 value)
{
    editSField(ParticleIndexFieldMask);

    _sfParticleIndex.setValue(value);
}


#ifdef OSG_MT_CPTR_ASPECT
inline
void ParticleGeometryCollisionEventBase::execSync (      ParticleGeometryCollisionEventBase *pFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    Inherited::execSync(pFrom, whichField, oOffsets, syncMode, uiSyncInfo);

    if(FieldBits::NoField != (HitTFieldMask & whichField))
        _sfHitT.syncWith(pFrom->_sfHitT);

    if(FieldBits::NoField != (HitNodeFieldMask & whichField))
        _sfHitNode.syncWith(pFrom->_sfHitNode);

    if(FieldBits::NoField != (HitPolygonIndexFieldMask & whichField))
        _sfHitPolygonIndex.syncWith(pFrom->_sfHitPolygonIndex);

    if(FieldBits::NoField != (HitNormalFieldMask & whichField))
        _sfHitNormal.syncWith(pFrom->_sfHitNormal);

    if(FieldBits::NoField != (HitPointFieldMask & whichField))
        _sfHitPoint.syncWith(pFrom->_sfHitPoint);

    if(FieldBits::NoField != (SystemFieldMask & whichField))
        _sfSystem.syncWith(pFrom->_sfSystem);

    if(FieldBits::NoField != (ParticleIndexFieldMask & whichField))
        _sfParticleIndex.syncWith(pFrom->_sfParticleIndex);
}
#endif


inline
const Char8 *ParticleGeometryCollisionEventBase::getClassname(void)
{
    return "ParticleGeometryCollisionEvent";
}


OSG_GEN_CONTAINERPTR(ParticleGeometryCollisionEvent);

OSG_END_NAMESPACE

