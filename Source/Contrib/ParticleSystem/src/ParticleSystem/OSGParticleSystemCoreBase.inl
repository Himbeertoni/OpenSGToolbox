/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *   contact:  David Kabala (djkabala@gmail.com)                             *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class ParticleSystemCore!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

OSG_BEGIN_NAMESPACE


//! access the type of the class
inline
OSG::FieldContainerType &ParticleSystemCoreBase::getClassType(void)
{
    return _type;
}

//! access the numerical type of the class
inline
OSG::UInt32 ParticleSystemCoreBase::getClassTypeId(void)
{
    return _type.getId();
}

inline
OSG::UInt16 ParticleSystemCoreBase::getClassGroupId(void)
{
    return _type.getGroupId();
}

/*------------------------------ get -----------------------------------*/


//! Get the value of the ParticleSystemCore::_sfSystem field.
inline
ParticleSystem * ParticleSystemCoreBase::getSystem(void) const
{
    return _sfSystem.getValue();
}

//! Set the value of the ParticleSystemCore::_sfSystem field.
inline
void ParticleSystemCoreBase::setSystem(ParticleSystem * const value)
{
    editSField(SystemFieldMask);

    _sfSystem.setValue(value);
}

//! Get the value of the ParticleSystemCore::_sfDrawer field.
inline
ParticleSystemDrawer * ParticleSystemCoreBase::getDrawer(void) const
{
    return _sfDrawer.getValue();
}

//! Set the value of the ParticleSystemCore::_sfDrawer field.
inline
void ParticleSystemCoreBase::setDrawer(ParticleSystemDrawer * const value)
{
    editSField(DrawerFieldMask);

    _sfDrawer.setValue(value);
}
//! Get the value of the ParticleSystemCore::_sfSortingMode field.

inline
UInt32 &ParticleSystemCoreBase::editSortingMode(void)
{
    editSField(SortingModeFieldMask);

    return _sfSortingMode.getValue();
}

//! Get the value of the ParticleSystemCore::_sfSortingMode field.
inline
      UInt32  ParticleSystemCoreBase::getSortingMode(void) const
{
    return _sfSortingMode.getValue();
}

//! Set the value of the ParticleSystemCore::_sfSortingMode field.
inline
void ParticleSystemCoreBase::setSortingMode(const UInt32 value)
{
    editSField(SortingModeFieldMask);

    _sfSortingMode.setValue(value);
}
//! Get the value of the ParticleSystemCore::_sfPreviousSize field.

inline
UInt32 &ParticleSystemCoreBase::editPreviousSize(void)
{
    editSField(PreviousSizeFieldMask);

    return _sfPreviousSize.getValue();
}

//! Get the value of the ParticleSystemCore::_sfPreviousSize field.
inline
      UInt32  ParticleSystemCoreBase::getPreviousSize(void) const
{
    return _sfPreviousSize.getValue();
}

//! Set the value of the ParticleSystemCore::_sfPreviousSize field.
inline
void ParticleSystemCoreBase::setPreviousSize(const UInt32 value)
{
    editSField(PreviousSizeFieldMask);

    _sfPreviousSize.setValue(value);
}

//! Get the value of the \a index element the ParticleSystemCore::_mfSort field.
inline
      UInt32  ParticleSystemCoreBase::getSort(const UInt32 index) const
{
    return _mfSort[index];
}

inline
UInt32 &ParticleSystemCoreBase::editSort(const UInt32 index)
{
    editMField(SortFieldMask, _mfSort);

    return _mfSort[index];
}

//! Get the value of the \a index element the ParticleSystemCore::_mfDistances field.
inline
      Real32  ParticleSystemCoreBase::getDistances(const UInt32 index) const
{
    return _mfDistances[index];
}

inline
Real32 &ParticleSystemCoreBase::editDistances(const UInt32 index)
{
    editMField(DistancesFieldMask, _mfDistances);

    return _mfDistances[index];
}


//! Get the value of the \a index element the ParticleSystemCore::_mfHistogram field.
inline
      UInt32  ParticleSystemCoreBase::getHistogram(const UInt32 index) const
{
    return _mfHistogram[index];
}

inline
UInt32 &ParticleSystemCoreBase::editHistogram(const UInt32 index)
{
    editMField(HistogramFieldMask, _mfHistogram);

    return _mfHistogram[index];
}


//! Get the value of the \a index element the ParticleSystemCore::_mfOffset field.
inline
      UInt32  ParticleSystemCoreBase::getOffset(const UInt32 index) const
{
    return _mfOffset[index];
}

inline
UInt32 &ParticleSystemCoreBase::editOffset(const UInt32 index)
{
    editMField(OffsetFieldMask, _mfOffset);

    return _mfOffset[index];
}



#ifdef OSG_MT_CPTR_ASPECT
inline
void ParticleSystemCoreBase::execSync (      ParticleSystemCoreBase *pFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    Inherited::execSync(pFrom, whichField, oOffsets, syncMode, uiSyncInfo);

    if(FieldBits::NoField != (SystemFieldMask & whichField))
        _sfSystem.syncWith(pFrom->_sfSystem);

    if(FieldBits::NoField != (DrawerFieldMask & whichField))
        _sfDrawer.syncWith(pFrom->_sfDrawer);

    if(FieldBits::NoField != (SortingModeFieldMask & whichField))
        _sfSortingMode.syncWith(pFrom->_sfSortingMode);

    if(FieldBits::NoField != (SortFieldMask & whichField))
        _mfSort.syncWith(pFrom->_mfSort,
                                syncMode,
                                uiSyncInfo,
                                oOffsets);

    if(FieldBits::NoField != (DistancesFieldMask & whichField))
        _mfDistances.syncWith(pFrom->_mfDistances,
                                syncMode,
                                uiSyncInfo,
                                oOffsets);

    if(FieldBits::NoField != (HistogramFieldMask & whichField))
        _mfHistogram.syncWith(pFrom->_mfHistogram,
                                syncMode,
                                uiSyncInfo,
                                oOffsets);

    if(FieldBits::NoField != (OffsetFieldMask & whichField))
        _mfOffset.syncWith(pFrom->_mfOffset,
                                syncMode,
                                uiSyncInfo,
                                oOffsets);

    if(FieldBits::NoField != (PreviousSizeFieldMask & whichField))
        _sfPreviousSize.syncWith(pFrom->_sfPreviousSize);
}
#endif


inline
const Char8 *ParticleSystemCoreBase::getClassname(void)
{
    return "ParticleSystemCore";
}
OSG_GEN_CONTAINERPTR(ParticleSystemCore);

OSG_END_NAMESPACE

