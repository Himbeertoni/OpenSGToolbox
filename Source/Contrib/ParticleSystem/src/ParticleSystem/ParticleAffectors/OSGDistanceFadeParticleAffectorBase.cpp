/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact:  David Kabala (djkabala@gmail.com), Daniel Guilliams           *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class DistanceFadeParticleAffector!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>
#include <boost/assign/list_of.hpp>

#include "OSGConfig.h"




#include "OSGDistanceFadeParticleAffectorBase.h"
#include "OSGDistanceFadeParticleAffector.h"

#include <boost/bind.hpp>

#ifdef WIN32 // turn off 'this' : used in base member initializer list warning
#pragma warning(disable:4355)
#endif

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::DistanceFadeParticleAffector
    
 */

/***************************************************************************\
 *                        Field Documentation                              *
\***************************************************************************/

/*! \var Real32          DistanceFadeParticleAffectorBase::_sfDistanceFadeStart
    
*/

/*! \var Real32          DistanceFadeParticleAffectorBase::_sfDistanceFadeEnd
    
*/

/*! \var Real32          DistanceFadeParticleAffectorBase::_sfFadeStartAlpha
    
*/

/*! \var Real32          DistanceFadeParticleAffectorBase::_sfFadeEndAlpha
    
*/


/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldTraits<DistanceFadeParticleAffector *>::_type("DistanceFadeParticleAffectorPtr", "DistanceParticleAffectorPtr");
#endif

OSG_FIELDTRAITS_GETTYPE(DistanceFadeParticleAffector *)

OSG_EXPORT_PTR_SFIELD_FULL(PointerSField,
                           DistanceFadeParticleAffector *,
                           0);

OSG_EXPORT_PTR_MFIELD_FULL(PointerMField,
                           DistanceFadeParticleAffector *,
                           0);

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

void DistanceFadeParticleAffectorBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new SFReal32::Description(
        SFReal32::getClassType(),
        "DistanceFadeStart",
        "",
        DistanceFadeStartFieldId, DistanceFadeStartFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&DistanceFadeParticleAffector::editHandleDistanceFadeStart),
        static_cast<FieldGetMethodSig >(&DistanceFadeParticleAffector::getHandleDistanceFadeStart));

    oType.addInitialDesc(pDesc);

    pDesc = new SFReal32::Description(
        SFReal32::getClassType(),
        "DistanceFadeEnd",
        "",
        DistanceFadeEndFieldId, DistanceFadeEndFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&DistanceFadeParticleAffector::editHandleDistanceFadeEnd),
        static_cast<FieldGetMethodSig >(&DistanceFadeParticleAffector::getHandleDistanceFadeEnd));

    oType.addInitialDesc(pDesc);

    pDesc = new SFReal32::Description(
        SFReal32::getClassType(),
        "FadeStartAlpha",
        "",
        FadeStartAlphaFieldId, FadeStartAlphaFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&DistanceFadeParticleAffector::editHandleFadeStartAlpha),
        static_cast<FieldGetMethodSig >(&DistanceFadeParticleAffector::getHandleFadeStartAlpha));

    oType.addInitialDesc(pDesc);

    pDesc = new SFReal32::Description(
        SFReal32::getClassType(),
        "FadeEndAlpha",
        "",
        FadeEndAlphaFieldId, FadeEndAlphaFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&DistanceFadeParticleAffector::editHandleFadeEndAlpha),
        static_cast<FieldGetMethodSig >(&DistanceFadeParticleAffector::getHandleFadeEndAlpha));

    oType.addInitialDesc(pDesc);
}


DistanceFadeParticleAffectorBase::TypeObject DistanceFadeParticleAffectorBase::_type(
    DistanceFadeParticleAffectorBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    0,
    reinterpret_cast<PrototypeCreateF>(&DistanceFadeParticleAffectorBase::createEmptyLocal),
    DistanceFadeParticleAffector::initMethod,
    DistanceFadeParticleAffector::exitMethod,
    reinterpret_cast<InitalInsertDescFunc>(&DistanceFadeParticleAffector::classDescInserter),
    false,
    0,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "\tname=\"DistanceFadeParticleAffector\"\n"
    "\tparent=\"DistanceParticleAffector\"\n"
    "    library=\"ContribParticleSystem\"\n"
    "    pointerfieldtypes=\"both\"\n"
    "\tstructure=\"concrete\"\n"
    "    systemcomponent=\"true\"\n"
    "    parentsystemcomponent=\"true\"\n"
    "    decoratable=\"false\"\n"
    "    useLocalIncludes=\"false\"\n"
    "    isNodeCore=\"false\"\n"
    "    authors=\"David Kabala (djkabala@gmail.com), Daniel Guilliams           \"\n"
    ">\n"
    "\t<Field\n"
    "\t\tname=\"DistanceFadeStart\"\n"
    "\t\ttype=\"Real32\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t\tdefaultValue=\"100.0\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"DistanceFadeEnd\"\n"
    "\t\ttype=\"Real32\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t\tdefaultValue=\"200.0\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"FadeStartAlpha\"\n"
    "\t\ttype=\"Real32\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t\tdefaultValue=\"1.0f\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"FadeEndAlpha\"\n"
    "\t\ttype=\"Real32\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t\tdefaultValue=\"0.0f\"\n"
    "\t>\n"
    "\t</Field>\n"
    "</FieldContainer>\n",
    ""
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &DistanceFadeParticleAffectorBase::getType(void)
{
    return _type;
}

const FieldContainerType &DistanceFadeParticleAffectorBase::getType(void) const
{
    return _type;
}

UInt32 DistanceFadeParticleAffectorBase::getContainerSize(void) const
{
    return sizeof(DistanceFadeParticleAffector);
}

/*------------------------- decorator get ------------------------------*/


SFReal32 *DistanceFadeParticleAffectorBase::editSFDistanceFadeStart(void)
{
    editSField(DistanceFadeStartFieldMask);

    return &_sfDistanceFadeStart;
}

const SFReal32 *DistanceFadeParticleAffectorBase::getSFDistanceFadeStart(void) const
{
    return &_sfDistanceFadeStart;
}


SFReal32 *DistanceFadeParticleAffectorBase::editSFDistanceFadeEnd(void)
{
    editSField(DistanceFadeEndFieldMask);

    return &_sfDistanceFadeEnd;
}

const SFReal32 *DistanceFadeParticleAffectorBase::getSFDistanceFadeEnd(void) const
{
    return &_sfDistanceFadeEnd;
}


SFReal32 *DistanceFadeParticleAffectorBase::editSFFadeStartAlpha(void)
{
    editSField(FadeStartAlphaFieldMask);

    return &_sfFadeStartAlpha;
}

const SFReal32 *DistanceFadeParticleAffectorBase::getSFFadeStartAlpha(void) const
{
    return &_sfFadeStartAlpha;
}


SFReal32 *DistanceFadeParticleAffectorBase::editSFFadeEndAlpha(void)
{
    editSField(FadeEndAlphaFieldMask);

    return &_sfFadeEndAlpha;
}

const SFReal32 *DistanceFadeParticleAffectorBase::getSFFadeEndAlpha(void) const
{
    return &_sfFadeEndAlpha;
}






/*------------------------------ access -----------------------------------*/

UInt32 DistanceFadeParticleAffectorBase::getBinSize(ConstFieldMaskArg whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (DistanceFadeStartFieldMask & whichField))
    {
        returnValue += _sfDistanceFadeStart.getBinSize();
    }
    if(FieldBits::NoField != (DistanceFadeEndFieldMask & whichField))
    {
        returnValue += _sfDistanceFadeEnd.getBinSize();
    }
    if(FieldBits::NoField != (FadeStartAlphaFieldMask & whichField))
    {
        returnValue += _sfFadeStartAlpha.getBinSize();
    }
    if(FieldBits::NoField != (FadeEndAlphaFieldMask & whichField))
    {
        returnValue += _sfFadeEndAlpha.getBinSize();
    }

    return returnValue;
}

void DistanceFadeParticleAffectorBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (DistanceFadeStartFieldMask & whichField))
    {
        _sfDistanceFadeStart.copyToBin(pMem);
    }
    if(FieldBits::NoField != (DistanceFadeEndFieldMask & whichField))
    {
        _sfDistanceFadeEnd.copyToBin(pMem);
    }
    if(FieldBits::NoField != (FadeStartAlphaFieldMask & whichField))
    {
        _sfFadeStartAlpha.copyToBin(pMem);
    }
    if(FieldBits::NoField != (FadeEndAlphaFieldMask & whichField))
    {
        _sfFadeEndAlpha.copyToBin(pMem);
    }
}

void DistanceFadeParticleAffectorBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (DistanceFadeStartFieldMask & whichField))
    {
        _sfDistanceFadeStart.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (DistanceFadeEndFieldMask & whichField))
    {
        _sfDistanceFadeEnd.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (FadeStartAlphaFieldMask & whichField))
    {
        _sfFadeStartAlpha.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (FadeEndAlphaFieldMask & whichField))
    {
        _sfFadeEndAlpha.copyFromBin(pMem);
    }
}

//! create a new instance of the class
DistanceFadeParticleAffectorTransitPtr DistanceFadeParticleAffectorBase::createLocal(BitVector bFlags)
{
    DistanceFadeParticleAffectorTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyLocal(bFlags);

        fc = dynamic_pointer_cast<DistanceFadeParticleAffector>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class, copy the container flags
DistanceFadeParticleAffectorTransitPtr DistanceFadeParticleAffectorBase::createDependent(BitVector bFlags)
{
    DistanceFadeParticleAffectorTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyDependent(bFlags);

        fc = dynamic_pointer_cast<DistanceFadeParticleAffector>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class
DistanceFadeParticleAffectorTransitPtr DistanceFadeParticleAffectorBase::create(void)
{
    DistanceFadeParticleAffectorTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopy();

        fc = dynamic_pointer_cast<DistanceFadeParticleAffector>(tmpPtr);
    }

    return fc;
}

DistanceFadeParticleAffector *DistanceFadeParticleAffectorBase::createEmptyLocal(BitVector bFlags)
{
    DistanceFadeParticleAffector *returnValue;

    newPtr<DistanceFadeParticleAffector>(returnValue, bFlags);

    returnValue->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

//! create an empty new instance of the class, do not copy the prototype
DistanceFadeParticleAffector *DistanceFadeParticleAffectorBase::createEmpty(void)
{
    DistanceFadeParticleAffector *returnValue;

    newPtr<DistanceFadeParticleAffector>(returnValue, Thread::getCurrentLocalFlags());

    returnValue->_pFieldFlags->_bNamespaceMask &=
        ~Thread::getCurrentLocalFlags();

    return returnValue;
}


FieldContainerTransitPtr DistanceFadeParticleAffectorBase::shallowCopyLocal(
    BitVector bFlags) const
{
    DistanceFadeParticleAffector *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const DistanceFadeParticleAffector *>(this), bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

FieldContainerTransitPtr DistanceFadeParticleAffectorBase::shallowCopyDependent(
    BitVector bFlags) const
{
    DistanceFadeParticleAffector *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const DistanceFadeParticleAffector *>(this), ~bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask = bFlags;

    return returnValue;
}

FieldContainerTransitPtr DistanceFadeParticleAffectorBase::shallowCopy(void) const
{
    DistanceFadeParticleAffector *tmpPtr;

    newPtr(tmpPtr,
           dynamic_cast<const DistanceFadeParticleAffector *>(this),
           Thread::getCurrentLocalFlags());

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~Thread::getCurrentLocalFlags();

    FieldContainerTransitPtr returnValue(tmpPtr);

    return returnValue;
}




/*------------------------- constructors ----------------------------------*/

DistanceFadeParticleAffectorBase::DistanceFadeParticleAffectorBase(void) :
    Inherited(),
    _sfDistanceFadeStart      (Real32(100.0)),
    _sfDistanceFadeEnd        (Real32(200.0)),
    _sfFadeStartAlpha         (Real32(1.0f)),
    _sfFadeEndAlpha           (Real32(0.0f))
{
}

DistanceFadeParticleAffectorBase::DistanceFadeParticleAffectorBase(const DistanceFadeParticleAffectorBase &source) :
    Inherited(source),
    _sfDistanceFadeStart      (source._sfDistanceFadeStart      ),
    _sfDistanceFadeEnd        (source._sfDistanceFadeEnd        ),
    _sfFadeStartAlpha         (source._sfFadeStartAlpha         ),
    _sfFadeEndAlpha           (source._sfFadeEndAlpha           )
{
}


/*-------------------------- destructors ----------------------------------*/

DistanceFadeParticleAffectorBase::~DistanceFadeParticleAffectorBase(void)
{
}


GetFieldHandlePtr DistanceFadeParticleAffectorBase::getHandleDistanceFadeStart (void) const
{
    SFReal32::GetHandlePtr returnValue(
        new  SFReal32::GetHandle(
             &_sfDistanceFadeStart,
             this->getType().getFieldDesc(DistanceFadeStartFieldId),
             const_cast<DistanceFadeParticleAffectorBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr DistanceFadeParticleAffectorBase::editHandleDistanceFadeStart(void)
{
    SFReal32::EditHandlePtr returnValue(
        new  SFReal32::EditHandle(
             &_sfDistanceFadeStart,
             this->getType().getFieldDesc(DistanceFadeStartFieldId),
             this));


    editSField(DistanceFadeStartFieldMask);

    return returnValue;
}

GetFieldHandlePtr DistanceFadeParticleAffectorBase::getHandleDistanceFadeEnd (void) const
{
    SFReal32::GetHandlePtr returnValue(
        new  SFReal32::GetHandle(
             &_sfDistanceFadeEnd,
             this->getType().getFieldDesc(DistanceFadeEndFieldId),
             const_cast<DistanceFadeParticleAffectorBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr DistanceFadeParticleAffectorBase::editHandleDistanceFadeEnd(void)
{
    SFReal32::EditHandlePtr returnValue(
        new  SFReal32::EditHandle(
             &_sfDistanceFadeEnd,
             this->getType().getFieldDesc(DistanceFadeEndFieldId),
             this));


    editSField(DistanceFadeEndFieldMask);

    return returnValue;
}

GetFieldHandlePtr DistanceFadeParticleAffectorBase::getHandleFadeStartAlpha  (void) const
{
    SFReal32::GetHandlePtr returnValue(
        new  SFReal32::GetHandle(
             &_sfFadeStartAlpha,
             this->getType().getFieldDesc(FadeStartAlphaFieldId),
             const_cast<DistanceFadeParticleAffectorBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr DistanceFadeParticleAffectorBase::editHandleFadeStartAlpha (void)
{
    SFReal32::EditHandlePtr returnValue(
        new  SFReal32::EditHandle(
             &_sfFadeStartAlpha,
             this->getType().getFieldDesc(FadeStartAlphaFieldId),
             this));


    editSField(FadeStartAlphaFieldMask);

    return returnValue;
}

GetFieldHandlePtr DistanceFadeParticleAffectorBase::getHandleFadeEndAlpha    (void) const
{
    SFReal32::GetHandlePtr returnValue(
        new  SFReal32::GetHandle(
             &_sfFadeEndAlpha,
             this->getType().getFieldDesc(FadeEndAlphaFieldId),
             const_cast<DistanceFadeParticleAffectorBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr DistanceFadeParticleAffectorBase::editHandleFadeEndAlpha   (void)
{
    SFReal32::EditHandlePtr returnValue(
        new  SFReal32::EditHandle(
             &_sfFadeEndAlpha,
             this->getType().getFieldDesc(FadeEndAlphaFieldId),
             this));


    editSField(FadeEndAlphaFieldMask);

    return returnValue;
}


#ifdef OSG_MT_CPTR_ASPECT
void DistanceFadeParticleAffectorBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    DistanceFadeParticleAffector *pThis = static_cast<DistanceFadeParticleAffector *>(this);

    pThis->execSync(static_cast<DistanceFadeParticleAffector *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif


#ifdef OSG_MT_CPTR_ASPECT
FieldContainer *DistanceFadeParticleAffectorBase::createAspectCopy(
    const FieldContainer *pRefAspect) const
{
    DistanceFadeParticleAffector *returnValue;

    newAspectCopy(returnValue,
                  dynamic_cast<const DistanceFadeParticleAffector *>(pRefAspect),
                  dynamic_cast<const DistanceFadeParticleAffector *>(this));

    return returnValue;
}
#endif

void DistanceFadeParticleAffectorBase::resolveLinks(void)
{
    Inherited::resolveLinks();


}


OSG_END_NAMESPACE
