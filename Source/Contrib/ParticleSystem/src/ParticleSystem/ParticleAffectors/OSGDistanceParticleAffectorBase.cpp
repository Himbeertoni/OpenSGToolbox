/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact:  David Kabala (djkabala@gmail.com), Daniel Guilliams           *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class DistanceParticleAffector!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>
#include <boost/assign/list_of.hpp>

#include "OSGConfig.h"



#include "OSGNode.h"                    // DistanceFromNode Class
#include "OSGCamera.h"                  // DistanceFromCamera Class

#include "OSGDistanceParticleAffectorBase.h"
#include "OSGDistanceParticleAffector.h"

#include <boost/bind.hpp>

#ifdef WIN32 // turn off 'this' : used in base member initializer list warning
#pragma warning(disable:4355)
#endif

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::DistanceParticleAffector
    
 */

/***************************************************************************\
 *                        Field Documentation                              *
\***************************************************************************/

/*! \var UInt32          DistanceParticleAffectorBase::_sfDistanceFromSource
    
*/

/*! \var Node *          DistanceParticleAffectorBase::_sfDistanceFromNode
    
*/

/*! \var Node *          DistanceParticleAffectorBase::_sfParticleSystemNode
    
*/

/*! \var Camera *        DistanceParticleAffectorBase::_sfDistanceFromCamera
    
*/


/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldTraits<DistanceParticleAffector *>::_type("DistanceParticleAffectorPtr", "ParticleAffectorPtr");
#endif

OSG_FIELDTRAITS_GETTYPE(DistanceParticleAffector *)

OSG_EXPORT_PTR_SFIELD_FULL(PointerSField,
                           DistanceParticleAffector *,
                           0);

OSG_EXPORT_PTR_MFIELD_FULL(PointerMField,
                           DistanceParticleAffector *,
                           0);

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

void DistanceParticleAffectorBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new SFUInt32::Description(
        SFUInt32::getClassType(),
        "DistanceFromSource",
        "",
        DistanceFromSourceFieldId, DistanceFromSourceFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&DistanceParticleAffector::editHandleDistanceFromSource),
        static_cast<FieldGetMethodSig >(&DistanceParticleAffector::getHandleDistanceFromSource));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecNodePtr::Description(
        SFUnrecNodePtr::getClassType(),
        "DistanceFromNode",
        "",
        DistanceFromNodeFieldId, DistanceFromNodeFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&DistanceParticleAffector::editHandleDistanceFromNode),
        static_cast<FieldGetMethodSig >(&DistanceParticleAffector::getHandleDistanceFromNode));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecNodePtr::Description(
        SFUnrecNodePtr::getClassType(),
        "ParticleSystemNode",
        "",
        ParticleSystemNodeFieldId, ParticleSystemNodeFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&DistanceParticleAffector::editHandleParticleSystemNode),
        static_cast<FieldGetMethodSig >(&DistanceParticleAffector::getHandleParticleSystemNode));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecCameraPtr::Description(
        SFUnrecCameraPtr::getClassType(),
        "DistanceFromCamera",
        "",
        DistanceFromCameraFieldId, DistanceFromCameraFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&DistanceParticleAffector::editHandleDistanceFromCamera),
        static_cast<FieldGetMethodSig >(&DistanceParticleAffector::getHandleDistanceFromCamera));

    oType.addInitialDesc(pDesc);
}


DistanceParticleAffectorBase::TypeObject DistanceParticleAffectorBase::_type(
    DistanceParticleAffectorBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    0,
    NULL,
    DistanceParticleAffector::initMethod,
    DistanceParticleAffector::exitMethod,
    reinterpret_cast<InitalInsertDescFunc>(&DistanceParticleAffector::classDescInserter),
    false,
    0,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "\tname=\"DistanceParticleAffector\"\n"
    "\tparent=\"ParticleAffector\"\n"
    "    library=\"ContribParticleSystem\"\n"
    "    pointerfieldtypes=\"both\"\n"
    "\tstructure=\"abstract\"\n"
    "    systemcomponent=\"true\"\n"
    "    parentsystemcomponent=\"true\"\n"
    "    decoratable=\"false\"\n"
    "    useLocalIncludes=\"false\"\n"
    "    isNodeCore=\"false\"\n"
    "    authors=\"David Kabala (djkabala@gmail.com), Daniel Guilliams           \"\n"
    ">\n"
    "\t<Field\n"
    "\t\tname=\"DistanceFromSource\"\n"
    "\t\ttype=\"UInt32\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t\tdefaultValue=\"DistanceParticleAffector::DISTANCE_FROM_CAMERA\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"DistanceFromNode\"\n"
    "\t\ttype=\"Node\"\n"
    "        category=\"pointer\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t\tdefaultValue=\"NULL\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"ParticleSystemNode\"\n"
    "\t\ttype=\"Node\"\n"
    "        category=\"pointer\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t\tdefaultValue=\"NULL\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"DistanceFromCamera\"\n"
    "\t\ttype=\"Camera\"\n"
    "        category=\"pointer\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t\tdefaultValue=\"NULL\"\n"
    "\t>\n"
    "\t</Field>\n"
    "</FieldContainer>\n",
    ""
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &DistanceParticleAffectorBase::getType(void)
{
    return _type;
}

const FieldContainerType &DistanceParticleAffectorBase::getType(void) const
{
    return _type;
}

UInt32 DistanceParticleAffectorBase::getContainerSize(void) const
{
    return sizeof(DistanceParticleAffector);
}

/*------------------------- decorator get ------------------------------*/


SFUInt32 *DistanceParticleAffectorBase::editSFDistanceFromSource(void)
{
    editSField(DistanceFromSourceFieldMask);

    return &_sfDistanceFromSource;
}

const SFUInt32 *DistanceParticleAffectorBase::getSFDistanceFromSource(void) const
{
    return &_sfDistanceFromSource;
}


//! Get the DistanceParticleAffector::_sfDistanceFromNode field.
const SFUnrecNodePtr *DistanceParticleAffectorBase::getSFDistanceFromNode(void) const
{
    return &_sfDistanceFromNode;
}

SFUnrecNodePtr      *DistanceParticleAffectorBase::editSFDistanceFromNode(void)
{
    editSField(DistanceFromNodeFieldMask);

    return &_sfDistanceFromNode;
}

//! Get the DistanceParticleAffector::_sfParticleSystemNode field.
const SFUnrecNodePtr *DistanceParticleAffectorBase::getSFParticleSystemNode(void) const
{
    return &_sfParticleSystemNode;
}

SFUnrecNodePtr      *DistanceParticleAffectorBase::editSFParticleSystemNode(void)
{
    editSField(ParticleSystemNodeFieldMask);

    return &_sfParticleSystemNode;
}

//! Get the DistanceParticleAffector::_sfDistanceFromCamera field.
const SFUnrecCameraPtr *DistanceParticleAffectorBase::getSFDistanceFromCamera(void) const
{
    return &_sfDistanceFromCamera;
}

SFUnrecCameraPtr    *DistanceParticleAffectorBase::editSFDistanceFromCamera(void)
{
    editSField(DistanceFromCameraFieldMask);

    return &_sfDistanceFromCamera;
}





/*------------------------------ access -----------------------------------*/

UInt32 DistanceParticleAffectorBase::getBinSize(ConstFieldMaskArg whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (DistanceFromSourceFieldMask & whichField))
    {
        returnValue += _sfDistanceFromSource.getBinSize();
    }
    if(FieldBits::NoField != (DistanceFromNodeFieldMask & whichField))
    {
        returnValue += _sfDistanceFromNode.getBinSize();
    }
    if(FieldBits::NoField != (ParticleSystemNodeFieldMask & whichField))
    {
        returnValue += _sfParticleSystemNode.getBinSize();
    }
    if(FieldBits::NoField != (DistanceFromCameraFieldMask & whichField))
    {
        returnValue += _sfDistanceFromCamera.getBinSize();
    }

    return returnValue;
}

void DistanceParticleAffectorBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (DistanceFromSourceFieldMask & whichField))
    {
        _sfDistanceFromSource.copyToBin(pMem);
    }
    if(FieldBits::NoField != (DistanceFromNodeFieldMask & whichField))
    {
        _sfDistanceFromNode.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ParticleSystemNodeFieldMask & whichField))
    {
        _sfParticleSystemNode.copyToBin(pMem);
    }
    if(FieldBits::NoField != (DistanceFromCameraFieldMask & whichField))
    {
        _sfDistanceFromCamera.copyToBin(pMem);
    }
}

void DistanceParticleAffectorBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (DistanceFromSourceFieldMask & whichField))
    {
        _sfDistanceFromSource.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (DistanceFromNodeFieldMask & whichField))
    {
        _sfDistanceFromNode.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ParticleSystemNodeFieldMask & whichField))
    {
        _sfParticleSystemNode.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (DistanceFromCameraFieldMask & whichField))
    {
        _sfDistanceFromCamera.copyFromBin(pMem);
    }
}




/*------------------------- constructors ----------------------------------*/

DistanceParticleAffectorBase::DistanceParticleAffectorBase(void) :
    Inherited(),
    _sfDistanceFromSource     (UInt32(DistanceParticleAffector::DISTANCE_FROM_CAMERA)),
    _sfDistanceFromNode       (NULL),
    _sfParticleSystemNode     (NULL),
    _sfDistanceFromCamera     (NULL)
{
}

DistanceParticleAffectorBase::DistanceParticleAffectorBase(const DistanceParticleAffectorBase &source) :
    Inherited(source),
    _sfDistanceFromSource     (source._sfDistanceFromSource     ),
    _sfDistanceFromNode       (NULL),
    _sfParticleSystemNode     (NULL),
    _sfDistanceFromCamera     (NULL)
{
}


/*-------------------------- destructors ----------------------------------*/

DistanceParticleAffectorBase::~DistanceParticleAffectorBase(void)
{
}

void DistanceParticleAffectorBase::onCreate(const DistanceParticleAffector *source)
{
    Inherited::onCreate(source);

    if(source != NULL)
    {
        DistanceParticleAffector *pThis = static_cast<DistanceParticleAffector *>(this);

        pThis->setDistanceFromNode(source->getDistanceFromNode());

        pThis->setParticleSystemNode(source->getParticleSystemNode());

        pThis->setDistanceFromCamera(source->getDistanceFromCamera());
    }
}

GetFieldHandlePtr DistanceParticleAffectorBase::getHandleDistanceFromSource (void) const
{
    SFUInt32::GetHandlePtr returnValue(
        new  SFUInt32::GetHandle(
             &_sfDistanceFromSource,
             this->getType().getFieldDesc(DistanceFromSourceFieldId),
             const_cast<DistanceParticleAffectorBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr DistanceParticleAffectorBase::editHandleDistanceFromSource(void)
{
    SFUInt32::EditHandlePtr returnValue(
        new  SFUInt32::EditHandle(
             &_sfDistanceFromSource,
             this->getType().getFieldDesc(DistanceFromSourceFieldId),
             this));


    editSField(DistanceFromSourceFieldMask);

    return returnValue;
}

GetFieldHandlePtr DistanceParticleAffectorBase::getHandleDistanceFromNode (void) const
{
    SFUnrecNodePtr::GetHandlePtr returnValue(
        new  SFUnrecNodePtr::GetHandle(
             &_sfDistanceFromNode,
             this->getType().getFieldDesc(DistanceFromNodeFieldId),
             const_cast<DistanceParticleAffectorBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr DistanceParticleAffectorBase::editHandleDistanceFromNode(void)
{
    SFUnrecNodePtr::EditHandlePtr returnValue(
        new  SFUnrecNodePtr::EditHandle(
             &_sfDistanceFromNode,
             this->getType().getFieldDesc(DistanceFromNodeFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&DistanceParticleAffector::setDistanceFromNode,
                    static_cast<DistanceParticleAffector *>(this), _1));

    editSField(DistanceFromNodeFieldMask);

    return returnValue;
}

GetFieldHandlePtr DistanceParticleAffectorBase::getHandleParticleSystemNode (void) const
{
    SFUnrecNodePtr::GetHandlePtr returnValue(
        new  SFUnrecNodePtr::GetHandle(
             &_sfParticleSystemNode,
             this->getType().getFieldDesc(ParticleSystemNodeFieldId),
             const_cast<DistanceParticleAffectorBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr DistanceParticleAffectorBase::editHandleParticleSystemNode(void)
{
    SFUnrecNodePtr::EditHandlePtr returnValue(
        new  SFUnrecNodePtr::EditHandle(
             &_sfParticleSystemNode,
             this->getType().getFieldDesc(ParticleSystemNodeFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&DistanceParticleAffector::setParticleSystemNode,
                    static_cast<DistanceParticleAffector *>(this), _1));

    editSField(ParticleSystemNodeFieldMask);

    return returnValue;
}

GetFieldHandlePtr DistanceParticleAffectorBase::getHandleDistanceFromCamera (void) const
{
    SFUnrecCameraPtr::GetHandlePtr returnValue(
        new  SFUnrecCameraPtr::GetHandle(
             &_sfDistanceFromCamera,
             this->getType().getFieldDesc(DistanceFromCameraFieldId),
             const_cast<DistanceParticleAffectorBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr DistanceParticleAffectorBase::editHandleDistanceFromCamera(void)
{
    SFUnrecCameraPtr::EditHandlePtr returnValue(
        new  SFUnrecCameraPtr::EditHandle(
             &_sfDistanceFromCamera,
             this->getType().getFieldDesc(DistanceFromCameraFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&DistanceParticleAffector::setDistanceFromCamera,
                    static_cast<DistanceParticleAffector *>(this), _1));

    editSField(DistanceFromCameraFieldMask);

    return returnValue;
}


#ifdef OSG_MT_CPTR_ASPECT
void DistanceParticleAffectorBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    DistanceParticleAffector *pThis = static_cast<DistanceParticleAffector *>(this);

    pThis->execSync(static_cast<DistanceParticleAffector *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif



void DistanceParticleAffectorBase::resolveLinks(void)
{
    Inherited::resolveLinks();

    static_cast<DistanceParticleAffector *>(this)->setDistanceFromNode(NULL);

    static_cast<DistanceParticleAffector *>(this)->setParticleSystemNode(NULL);

    static_cast<DistanceParticleAffector *>(this)->setDistanceFromCamera(NULL);


}


OSG_END_NAMESPACE
