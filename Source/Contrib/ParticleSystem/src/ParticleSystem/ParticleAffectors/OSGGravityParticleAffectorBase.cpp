/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact:  David Kabala (djkabala@gmail.com), Daniel Guilliams           *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class GravityParticleAffector!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>
#include <boost/assign/list_of.hpp>

#include "OSGConfig.h"



#include "OSGNode.h"                    // Beacon Class

#include "OSGGravityParticleAffectorBase.h"
#include "OSGGravityParticleAffector.h"

#include <boost/bind.hpp>

#ifdef WIN32 // turn off 'this' : used in base member initializer list warning
#pragma warning(disable:4355)
#endif

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::GravityParticleAffector
    
 */

/***************************************************************************\
 *                        Field Documentation                              *
\***************************************************************************/

/*! \var Real32          GravityParticleAffectorBase::_sfMagnitude
    
*/

/*! \var Vec3f           GravityParticleAffectorBase::_sfDirection
    
*/

/*! \var Real32          GravityParticleAffectorBase::_sfAttenuation
    
*/

/*! \var Real32          GravityParticleAffectorBase::_sfMaxDistance
    
*/

/*! \var Node *          GravityParticleAffectorBase::_sfBeacon
    
*/


/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldTraits<GravityParticleAffector *>::_type("GravityParticleAffectorPtr", "ParticleAffectorPtr");
#endif

OSG_FIELDTRAITS_GETTYPE(GravityParticleAffector *)

OSG_EXPORT_PTR_SFIELD_FULL(PointerSField,
                           GravityParticleAffector *,
                           0);

OSG_EXPORT_PTR_MFIELD_FULL(PointerMField,
                           GravityParticleAffector *,
                           0);

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

void GravityParticleAffectorBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new SFReal32::Description(
        SFReal32::getClassType(),
        "Magnitude",
        "",
        MagnitudeFieldId, MagnitudeFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&GravityParticleAffector::editHandleMagnitude),
        static_cast<FieldGetMethodSig >(&GravityParticleAffector::getHandleMagnitude));

    oType.addInitialDesc(pDesc);


    pDesc = new SFVec3f::Description(
        SFVec3f::getClassType(),
        "Direction",
        "",
        DirectionFieldId, DirectionFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&GravityParticleAffector::editHandleDirection),
        static_cast<FieldGetMethodSig >(&GravityParticleAffector::getHandleDirection));

    oType.addInitialDesc(pDesc);


    pDesc = new SFReal32::Description(
        SFReal32::getClassType(),
        "Attenuation",
        "",
        AttenuationFieldId, AttenuationFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&GravityParticleAffector::editHandleAttenuation),
        static_cast<FieldGetMethodSig >(&GravityParticleAffector::getHandleAttenuation));

    oType.addInitialDesc(pDesc);


    pDesc = new SFReal32::Description(
        SFReal32::getClassType(),
        "MaxDistance",
        "",
        MaxDistanceFieldId, MaxDistanceFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&GravityParticleAffector::editHandleMaxDistance),
        static_cast<FieldGetMethodSig >(&GravityParticleAffector::getHandleMaxDistance));

    oType.addInitialDesc(pDesc);


    pDesc = new SFUnrecNodePtr::Description(
        SFUnrecNodePtr::getClassType(),
        "Beacon",
        "",
        BeaconFieldId, BeaconFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&GravityParticleAffector::editHandleBeacon),
        static_cast<FieldGetMethodSig >(&GravityParticleAffector::getHandleBeacon));

    oType.addInitialDesc(pDesc);

}


GravityParticleAffectorBase::TypeObject GravityParticleAffectorBase::_type(
    GravityParticleAffectorBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    0,
    reinterpret_cast<PrototypeCreateF>(&GravityParticleAffectorBase::createEmptyLocal),
    GravityParticleAffector::initMethod,
    GravityParticleAffector::exitMethod,
    reinterpret_cast<InitalInsertDescFunc>(&GravityParticleAffector::classDescInserter),
    false,
    0,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "\tname=\"GravityParticleAffector\"\n"
    "\tparent=\"ParticleAffector\"\n"
    "    library=\"ContribParticleSystem\"\n"
    "    pointerfieldtypes=\"both\"\n"
    "\tstructure=\"concrete\"\n"
    "    systemcomponent=\"true\"\n"
    "    parentsystemcomponent=\"true\"\n"
    "    decoratable=\"false\"\n"
    "    useLocalIncludes=\"false\"\n"
    "    isNodeCore=\"false\"\n"
    "    authors=\"David Kabala (djkabala@gmail.com), Daniel Guilliams           \"\n"
    ">\n"
    "\t<Field\n"
    "\t\tname=\"Magnitude\"\n"
    "\t\ttype=\"Real32\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t\tdefaultValue=\"9.800\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"Direction\"\n"
    "\t\ttype=\"Vec3f\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t\tdefaultValue=\"0.0, -1.0, 0.0\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"Attenuation\"\n"
    "\t\ttype=\"Real32\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t\tdefaultValue=\"0.0\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"MaxDistance\"\n"
    "\t\ttype=\"Real32\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t\tdefaultValue=\"-1.0\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"Beacon\"\n"
    "\t\ttype=\"Node\"\n"
    "        category=\"pointer\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t\tdefaultValue=\"NULL\"\n"
    "\t>\n"
    "\t</Field>\n"
    "</FieldContainer>\n",
    ""
    );


/*------------------------------ get -----------------------------------*/

FieldContainerType &GravityParticleAffectorBase::getType(void)
{
    return _type;
}

const FieldContainerType &GravityParticleAffectorBase::getType(void) const
{
    return _type;
}

UInt32 GravityParticleAffectorBase::getContainerSize(void) const
{
    return sizeof(GravityParticleAffector);
}

/*------------------------- decorator get ------------------------------*/


SFReal32 *GravityParticleAffectorBase::editSFMagnitude(void)
{
    editSField(MagnitudeFieldMask);

    return &_sfMagnitude;
}

const SFReal32 *GravityParticleAffectorBase::getSFMagnitude(void) const
{
    return &_sfMagnitude;
}


SFVec3f *GravityParticleAffectorBase::editSFDirection(void)
{
    editSField(DirectionFieldMask);

    return &_sfDirection;
}

const SFVec3f *GravityParticleAffectorBase::getSFDirection(void) const
{
    return &_sfDirection;
}


SFReal32 *GravityParticleAffectorBase::editSFAttenuation(void)
{
    editSField(AttenuationFieldMask);

    return &_sfAttenuation;
}

const SFReal32 *GravityParticleAffectorBase::getSFAttenuation(void) const
{
    return &_sfAttenuation;
}


SFReal32 *GravityParticleAffectorBase::editSFMaxDistance(void)
{
    editSField(MaxDistanceFieldMask);

    return &_sfMaxDistance;
}

const SFReal32 *GravityParticleAffectorBase::getSFMaxDistance(void) const
{
    return &_sfMaxDistance;
}


//! Get the GravityParticleAffector::_sfBeacon field.
const SFUnrecNodePtr *GravityParticleAffectorBase::getSFBeacon(void) const
{
    return &_sfBeacon;
}

SFUnrecNodePtr      *GravityParticleAffectorBase::editSFBeacon         (void)
{
    editSField(BeaconFieldMask);

    return &_sfBeacon;
}





/*------------------------------ access -----------------------------------*/

UInt32 GravityParticleAffectorBase::getBinSize(ConstFieldMaskArg whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (MagnitudeFieldMask & whichField))
    {
        returnValue += _sfMagnitude.getBinSize();
    }
    if(FieldBits::NoField != (DirectionFieldMask & whichField))
    {
        returnValue += _sfDirection.getBinSize();
    }
    if(FieldBits::NoField != (AttenuationFieldMask & whichField))
    {
        returnValue += _sfAttenuation.getBinSize();
    }
    if(FieldBits::NoField != (MaxDistanceFieldMask & whichField))
    {
        returnValue += _sfMaxDistance.getBinSize();
    }
    if(FieldBits::NoField != (BeaconFieldMask & whichField))
    {
        returnValue += _sfBeacon.getBinSize();
    }

    return returnValue;
}

void GravityParticleAffectorBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (MagnitudeFieldMask & whichField))
    {
        _sfMagnitude.copyToBin(pMem);
    }
    if(FieldBits::NoField != (DirectionFieldMask & whichField))
    {
        _sfDirection.copyToBin(pMem);
    }
    if(FieldBits::NoField != (AttenuationFieldMask & whichField))
    {
        _sfAttenuation.copyToBin(pMem);
    }
    if(FieldBits::NoField != (MaxDistanceFieldMask & whichField))
    {
        _sfMaxDistance.copyToBin(pMem);
    }
    if(FieldBits::NoField != (BeaconFieldMask & whichField))
    {
        _sfBeacon.copyToBin(pMem);
    }
}

void GravityParticleAffectorBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (MagnitudeFieldMask & whichField))
    {
        _sfMagnitude.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (DirectionFieldMask & whichField))
    {
        _sfDirection.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (AttenuationFieldMask & whichField))
    {
        _sfAttenuation.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (MaxDistanceFieldMask & whichField))
    {
        _sfMaxDistance.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (BeaconFieldMask & whichField))
    {
        _sfBeacon.copyFromBin(pMem);
    }
}

//! create a new instance of the class
GravityParticleAffectorTransitPtr GravityParticleAffectorBase::createLocal(BitVector bFlags)
{
    GravityParticleAffectorTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyLocal(bFlags);

        fc = dynamic_pointer_cast<GravityParticleAffector>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class, copy the container flags
GravityParticleAffectorTransitPtr GravityParticleAffectorBase::createDependent(BitVector bFlags)
{
    GravityParticleAffectorTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyDependent(bFlags);

        fc = dynamic_pointer_cast<GravityParticleAffector>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class
GravityParticleAffectorTransitPtr GravityParticleAffectorBase::create(void)
{
    GravityParticleAffectorTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopy();

        fc = dynamic_pointer_cast<GravityParticleAffector>(tmpPtr);
    }

    return fc;
}

GravityParticleAffector *GravityParticleAffectorBase::createEmptyLocal(BitVector bFlags)
{
    GravityParticleAffector *returnValue;

    newPtr<GravityParticleAffector>(returnValue, bFlags);

    returnValue->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

//! create an empty new instance of the class, do not copy the prototype
GravityParticleAffector *GravityParticleAffectorBase::createEmpty(void)
{
    GravityParticleAffector *returnValue;

    newPtr<GravityParticleAffector>(returnValue, Thread::getCurrentLocalFlags());

    returnValue->_pFieldFlags->_bNamespaceMask &=
        ~Thread::getCurrentLocalFlags();

    return returnValue;
}


FieldContainerTransitPtr GravityParticleAffectorBase::shallowCopyLocal(
    BitVector bFlags) const
{
    GravityParticleAffector *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const GravityParticleAffector *>(this), bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

FieldContainerTransitPtr GravityParticleAffectorBase::shallowCopyDependent(
    BitVector bFlags) const
{
    GravityParticleAffector *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const GravityParticleAffector *>(this), ~bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask = bFlags;

    return returnValue;
}

FieldContainerTransitPtr GravityParticleAffectorBase::shallowCopy(void) const
{
    GravityParticleAffector *tmpPtr;

    newPtr(tmpPtr,
           dynamic_cast<const GravityParticleAffector *>(this),
           Thread::getCurrentLocalFlags());

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~Thread::getCurrentLocalFlags();

    FieldContainerTransitPtr returnValue(tmpPtr);

    return returnValue;
}




/*------------------------- constructors ----------------------------------*/

GravityParticleAffectorBase::GravityParticleAffectorBase(void) :
    Inherited(),
    _sfMagnitude              (Real32(9.800)),
    _sfDirection              (Vec3f(0.0, -1.0, 0.0)),
    _sfAttenuation            (Real32(0.0)),
    _sfMaxDistance            (Real32(-1.0)),
    _sfBeacon                 (NULL)
{
}

GravityParticleAffectorBase::GravityParticleAffectorBase(const GravityParticleAffectorBase &source) :
    Inherited(source),
    _sfMagnitude              (source._sfMagnitude              ),
    _sfDirection              (source._sfDirection              ),
    _sfAttenuation            (source._sfAttenuation            ),
    _sfMaxDistance            (source._sfMaxDistance            ),
    _sfBeacon                 (NULL)
{
}


/*-------------------------- destructors ----------------------------------*/

GravityParticleAffectorBase::~GravityParticleAffectorBase(void)
{
}

void GravityParticleAffectorBase::onCreate(const GravityParticleAffector *source)
{
    Inherited::onCreate(source);

    if(source != NULL)
    {
        GravityParticleAffector *pThis = static_cast<GravityParticleAffector *>(this);

        pThis->setBeacon(source->getBeacon());
    }
}

GetFieldHandlePtr GravityParticleAffectorBase::getHandleMagnitude       (void) const
{
    SFReal32::GetHandlePtr returnValue(
        new  SFReal32::GetHandle(
             &_sfMagnitude,
             this->getType().getFieldDesc(MagnitudeFieldId),
             const_cast<GravityParticleAffectorBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr GravityParticleAffectorBase::editHandleMagnitude      (void)
{
    SFReal32::EditHandlePtr returnValue(
        new  SFReal32::EditHandle(
             &_sfMagnitude,
             this->getType().getFieldDesc(MagnitudeFieldId),
             this));


    editSField(MagnitudeFieldMask);

    return returnValue;
}

GetFieldHandlePtr GravityParticleAffectorBase::getHandleDirection       (void) const
{
    SFVec3f::GetHandlePtr returnValue(
        new  SFVec3f::GetHandle(
             &_sfDirection,
             this->getType().getFieldDesc(DirectionFieldId),
             const_cast<GravityParticleAffectorBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr GravityParticleAffectorBase::editHandleDirection      (void)
{
    SFVec3f::EditHandlePtr returnValue(
        new  SFVec3f::EditHandle(
             &_sfDirection,
             this->getType().getFieldDesc(DirectionFieldId),
             this));


    editSField(DirectionFieldMask);

    return returnValue;
}

GetFieldHandlePtr GravityParticleAffectorBase::getHandleAttenuation     (void) const
{
    SFReal32::GetHandlePtr returnValue(
        new  SFReal32::GetHandle(
             &_sfAttenuation,
             this->getType().getFieldDesc(AttenuationFieldId),
             const_cast<GravityParticleAffectorBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr GravityParticleAffectorBase::editHandleAttenuation    (void)
{
    SFReal32::EditHandlePtr returnValue(
        new  SFReal32::EditHandle(
             &_sfAttenuation,
             this->getType().getFieldDesc(AttenuationFieldId),
             this));


    editSField(AttenuationFieldMask);

    return returnValue;
}

GetFieldHandlePtr GravityParticleAffectorBase::getHandleMaxDistance     (void) const
{
    SFReal32::GetHandlePtr returnValue(
        new  SFReal32::GetHandle(
             &_sfMaxDistance,
             this->getType().getFieldDesc(MaxDistanceFieldId),
             const_cast<GravityParticleAffectorBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr GravityParticleAffectorBase::editHandleMaxDistance    (void)
{
    SFReal32::EditHandlePtr returnValue(
        new  SFReal32::EditHandle(
             &_sfMaxDistance,
             this->getType().getFieldDesc(MaxDistanceFieldId),
             this));


    editSField(MaxDistanceFieldMask);

    return returnValue;
}

GetFieldHandlePtr GravityParticleAffectorBase::getHandleBeacon          (void) const
{
    SFUnrecNodePtr::GetHandlePtr returnValue(
        new  SFUnrecNodePtr::GetHandle(
             &_sfBeacon,
             this->getType().getFieldDesc(BeaconFieldId),
             const_cast<GravityParticleAffectorBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr GravityParticleAffectorBase::editHandleBeacon         (void)
{
    SFUnrecNodePtr::EditHandlePtr returnValue(
        new  SFUnrecNodePtr::EditHandle(
             &_sfBeacon,
             this->getType().getFieldDesc(BeaconFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&GravityParticleAffector::setBeacon,
                    static_cast<GravityParticleAffector *>(this), _1));

    editSField(BeaconFieldMask);

    return returnValue;
}


#ifdef OSG_MT_CPTR_ASPECT
void GravityParticleAffectorBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    GravityParticleAffector *pThis = static_cast<GravityParticleAffector *>(this);

    pThis->execSync(static_cast<GravityParticleAffector *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif


#ifdef OSG_MT_CPTR_ASPECT
FieldContainer *GravityParticleAffectorBase::createAspectCopy(
    const FieldContainer *pRefAspect) const
{
    GravityParticleAffector *returnValue;

    newAspectCopy(returnValue,
                  dynamic_cast<const GravityParticleAffector *>(pRefAspect),
                  dynamic_cast<const GravityParticleAffector *>(this));

    return returnValue;
}
#endif

void GravityParticleAffectorBase::resolveLinks(void)
{
    Inherited::resolveLinks();

    static_cast<GravityParticleAffector *>(this)->setBeacon(NULL);


}


OSG_END_NAMESPACE
