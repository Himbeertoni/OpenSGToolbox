/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *   contact:  David Kabala (djkabala@gmail.com), Daniel Guilliams           *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class RandomMovementParticleAffector!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

OSG_BEGIN_NAMESPACE


//! access the type of the class
inline
OSG::FieldContainerType &RandomMovementParticleAffectorBase::getClassType(void)
{
    return _type;
}

//! access the numerical type of the class
inline
OSG::UInt32 RandomMovementParticleAffectorBase::getClassTypeId(void)
{
    return _type.getId();
}

inline
OSG::UInt16 RandomMovementParticleAffectorBase::getClassGroupId(void)
{
    return _type.getGroupId();
}

/*------------------------------ get -----------------------------------*/

//! Get the value of the RandomMovementParticleAffector::_sfAttributeAffected field.

inline
UInt32 &RandomMovementParticleAffectorBase::editAttributeAffected(void)
{
    editSField(AttributeAffectedFieldMask);

    return _sfAttributeAffected.getValue();
}

//! Get the value of the RandomMovementParticleAffector::_sfAttributeAffected field.
inline
      UInt32  RandomMovementParticleAffectorBase::getAttributeAffected(void) const
{
    return _sfAttributeAffected.getValue();
}

//! Set the value of the RandomMovementParticleAffector::_sfAttributeAffected field.
inline
void RandomMovementParticleAffectorBase::setAttributeAffected(const UInt32 value)
{
    editSField(AttributeAffectedFieldMask);

    _sfAttributeAffected.setValue(value);
}

//! Get the value of the RandomMovementParticleAffector::_sfPerlinDistribution field.
inline
PerlinNoiseDistribution1D * RandomMovementParticleAffectorBase::getPerlinDistribution(void) const
{
    return _sfPerlinDistribution.getValue();
}

//! Set the value of the RandomMovementParticleAffector::_sfPerlinDistribution field.
inline
void RandomMovementParticleAffectorBase::setPerlinDistribution(PerlinNoiseDistribution1D * const value)
{
    editSField(PerlinDistributionFieldMask);

    _sfPerlinDistribution.setValue(value);
}
//! Get the value of the RandomMovementParticleAffector::_sfAmplitude field.

inline
Real32 &RandomMovementParticleAffectorBase::editAmplitude(void)
{
    editSField(AmplitudeFieldMask);

    return _sfAmplitude.getValue();
}

//! Get the value of the RandomMovementParticleAffector::_sfAmplitude field.
inline
      Real32  RandomMovementParticleAffectorBase::getAmplitude(void) const
{
    return _sfAmplitude.getValue();
}

//! Set the value of the RandomMovementParticleAffector::_sfAmplitude field.
inline
void RandomMovementParticleAffectorBase::setAmplitude(const Real32 value)
{
    editSField(AmplitudeFieldMask);

    _sfAmplitude.setValue(value);
}
//! Get the value of the RandomMovementParticleAffector::_sfInterpolationType field.

inline
UInt32 &RandomMovementParticleAffectorBase::editInterpolationType(void)
{
    editSField(InterpolationTypeFieldMask);

    return _sfInterpolationType.getValue();
}

//! Get the value of the RandomMovementParticleAffector::_sfInterpolationType field.
inline
      UInt32  RandomMovementParticleAffectorBase::getInterpolationType(void) const
{
    return _sfInterpolationType.getValue();
}

//! Set the value of the RandomMovementParticleAffector::_sfInterpolationType field.
inline
void RandomMovementParticleAffectorBase::setInterpolationType(const UInt32 value)
{
    editSField(InterpolationTypeFieldMask);

    _sfInterpolationType.setValue(value);
}
//! Get the value of the RandomMovementParticleAffector::_sfPhase field.

inline
Vec3f &RandomMovementParticleAffectorBase::editPhase(void)
{
    editSField(PhaseFieldMask);

    return _sfPhase.getValue();
}

//! Get the value of the RandomMovementParticleAffector::_sfPhase field.
inline
const Vec3f &RandomMovementParticleAffectorBase::getPhase(void) const
{
    return _sfPhase.getValue();
}

//! Set the value of the RandomMovementParticleAffector::_sfPhase field.
inline
void RandomMovementParticleAffectorBase::setPhase(const Vec3f &value)
{
    editSField(PhaseFieldMask);

    _sfPhase.setValue(value);
}
//! Get the value of the RandomMovementParticleAffector::_sfPersistance field.

inline
Real32 &RandomMovementParticleAffectorBase::editPersistance(void)
{
    editSField(PersistanceFieldMask);

    return _sfPersistance.getValue();
}

//! Get the value of the RandomMovementParticleAffector::_sfPersistance field.
inline
      Real32  RandomMovementParticleAffectorBase::getPersistance(void) const
{
    return _sfPersistance.getValue();
}

//! Set the value of the RandomMovementParticleAffector::_sfPersistance field.
inline
void RandomMovementParticleAffectorBase::setPersistance(const Real32 value)
{
    editSField(PersistanceFieldMask);

    _sfPersistance.setValue(value);
}
//! Get the value of the RandomMovementParticleAffector::_sfFrequency field.

inline
Real32 &RandomMovementParticleAffectorBase::editFrequency(void)
{
    editSField(FrequencyFieldMask);

    return _sfFrequency.getValue();
}

//! Get the value of the RandomMovementParticleAffector::_sfFrequency field.
inline
      Real32  RandomMovementParticleAffectorBase::getFrequency(void) const
{
    return _sfFrequency.getValue();
}

//! Set the value of the RandomMovementParticleAffector::_sfFrequency field.
inline
void RandomMovementParticleAffectorBase::setFrequency(const Real32 value)
{
    editSField(FrequencyFieldMask);

    _sfFrequency.setValue(value);
}
//! Get the value of the RandomMovementParticleAffector::_sfOctaves field.

inline
UInt32 &RandomMovementParticleAffectorBase::editOctaves(void)
{
    editSField(OctavesFieldMask);

    return _sfOctaves.getValue();
}

//! Get the value of the RandomMovementParticleAffector::_sfOctaves field.
inline
      UInt32  RandomMovementParticleAffectorBase::getOctaves(void) const
{
    return _sfOctaves.getValue();
}

//! Set the value of the RandomMovementParticleAffector::_sfOctaves field.
inline
void RandomMovementParticleAffectorBase::setOctaves(const UInt32 value)
{
    editSField(OctavesFieldMask);

    _sfOctaves.setValue(value);
}


#ifdef OSG_MT_CPTR_ASPECT
inline
void RandomMovementParticleAffectorBase::execSync (      RandomMovementParticleAffectorBase *pFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    Inherited::execSync(pFrom, whichField, oOffsets, syncMode, uiSyncInfo);

    if(FieldBits::NoField != (AttributeAffectedFieldMask & whichField))
        _sfAttributeAffected.syncWith(pFrom->_sfAttributeAffected);

    if(FieldBits::NoField != (PerlinDistributionFieldMask & whichField))
        _sfPerlinDistribution.syncWith(pFrom->_sfPerlinDistribution);

    if(FieldBits::NoField != (AmplitudeFieldMask & whichField))
        _sfAmplitude.syncWith(pFrom->_sfAmplitude);

    if(FieldBits::NoField != (InterpolationTypeFieldMask & whichField))
        _sfInterpolationType.syncWith(pFrom->_sfInterpolationType);

    if(FieldBits::NoField != (PhaseFieldMask & whichField))
        _sfPhase.syncWith(pFrom->_sfPhase);

    if(FieldBits::NoField != (PersistanceFieldMask & whichField))
        _sfPersistance.syncWith(pFrom->_sfPersistance);

    if(FieldBits::NoField != (FrequencyFieldMask & whichField))
        _sfFrequency.syncWith(pFrom->_sfFrequency);

    if(FieldBits::NoField != (OctavesFieldMask & whichField))
        _sfOctaves.syncWith(pFrom->_sfOctaves);
}
#endif


inline
const Char8 *RandomMovementParticleAffectorBase::getClassname(void)
{
    return "RandomMovementParticleAffector";
}


OSG_GEN_CONTAINERPTR(RandomMovementParticleAffector);

OSG_END_NAMESPACE

