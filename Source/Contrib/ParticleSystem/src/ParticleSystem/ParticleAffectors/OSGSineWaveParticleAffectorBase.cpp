/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact:  David Kabala (djkabala@gmail.com), Daniel Guilliams           *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class SineWaveParticleAffector!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>
#include <boost/assign/list_of.hpp>

#include "OSGConfig.h"




#include "OSGSineWaveParticleAffectorBase.h"
#include "OSGSineWaveParticleAffector.h"

#include <boost/bind.hpp>

#ifdef WIN32 // turn off 'this' : used in base member initializer list warning
#pragma warning(disable:4355)
#endif

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::SineWaveParticleAffector
    
 */

/***************************************************************************\
 *                        Field Documentation                              *
\***************************************************************************/

/*! \var Real32          SineWaveParticleAffectorBase::_sfAmplitude
    
*/

/*! \var Real32          SineWaveParticleAffectorBase::_sfFrequency
    
*/

/*! \var Int32           SineWaveParticleAffectorBase::_sfUpDirSource
    Determines which direction to displace the particle.  Possible values:
    Y_AXIS: Displaces along the Y-Axis
    X_AXIS: Displaces along the X-Axis
    Z_AXIS: Displaces along the Z-Axis
    NORMAL: Displaces along the particle's normal.
    CROSS_PRODUCT: Displaces along the axis defined by the cross product of the particle's normal and it's direction of travel.
*/


/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldTraits<SineWaveParticleAffector *>::_type("SineWaveParticleAffectorPtr", "ParticleAffectorPtr");
#endif

OSG_FIELDTRAITS_GETTYPE(SineWaveParticleAffector *)

OSG_EXPORT_PTR_SFIELD_FULL(PointerSField,
                           SineWaveParticleAffector *,
                           0);

OSG_EXPORT_PTR_MFIELD_FULL(PointerMField,
                           SineWaveParticleAffector *,
                           0);

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

void SineWaveParticleAffectorBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new SFReal32::Description(
        SFReal32::getClassType(),
        "Amplitude",
        "",
        AmplitudeFieldId, AmplitudeFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&SineWaveParticleAffector::editHandleAmplitude),
        static_cast<FieldGetMethodSig >(&SineWaveParticleAffector::getHandleAmplitude));

    oType.addInitialDesc(pDesc);

    pDesc = new SFReal32::Description(
        SFReal32::getClassType(),
        "Frequency",
        "",
        FrequencyFieldId, FrequencyFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&SineWaveParticleAffector::editHandleFrequency),
        static_cast<FieldGetMethodSig >(&SineWaveParticleAffector::getHandleFrequency));

    oType.addInitialDesc(pDesc);

    pDesc = new SFInt32::Description(
        SFInt32::getClassType(),
        "UpDirSource",
        "Determines which direction to displace the particle.  Possible values:\n"
        "Y_AXIS: Displaces along the Y-Axis\n"
        "X_AXIS: Displaces along the X-Axis\n"
        "Z_AXIS: Displaces along the Z-Axis\n"
        "NORMAL: Displaces along the particle's normal.\n"
        "CROSS_PRODUCT: Displaces along the axis defined by the cross product of the particle's normal and it's direction of travel.\n",
        UpDirSourceFieldId, UpDirSourceFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&SineWaveParticleAffector::editHandleUpDirSource),
        static_cast<FieldGetMethodSig >(&SineWaveParticleAffector::getHandleUpDirSource));

    oType.addInitialDesc(pDesc);
}


SineWaveParticleAffectorBase::TypeObject SineWaveParticleAffectorBase::_type(
    SineWaveParticleAffectorBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    0,
    reinterpret_cast<PrototypeCreateF>(&SineWaveParticleAffectorBase::createEmptyLocal),
    SineWaveParticleAffector::initMethod,
    SineWaveParticleAffector::exitMethod,
    reinterpret_cast<InitalInsertDescFunc>(&SineWaveParticleAffector::classDescInserter),
    false,
    0,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "\tname=\"SineWaveParticleAffector\"\n"
    "\tparent=\"ParticleAffector\"\n"
    "\tlibrary=\"ContribParticleSystem\"\n"
    "\tpointerfieldtypes=\"both\"\n"
    "\tstructure=\"concrete\"\n"
    "\tsystemcomponent=\"true\"\n"
    "    parentsystemcomponent=\"true\"\n"
    "\tdecoratable=\"false\"\n"
    "    useLocalIncludes=\"false\"\n"
    "    isNodeCore=\"false\"\n"
    "    authors=\"David Kabala (djkabala@gmail.com), Daniel Guilliams           \"\n"
    ">\n"
    "\t<Field\n"
    "\t\tname=\"Amplitude\"\n"
    "\t\ttype=\"Real32\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t\tdefaultValue=\"1.0f\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"Frequency\"\n"
    "\t\ttype=\"Real32\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t\tdefaultValue=\"2.0f\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"UpDirSource\"\n"
    "\t\ttype=\"Int32\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t\tdefaultValue=\"SineWaveParticleAffector::Y_AXIS\"\n"
    "\t>\n"
    "\tDetermines which direction to displace the particle.  Possible values:\n"
    "\tY_AXIS: Displaces along the Y-Axis\n"
    "\tX_AXIS: Displaces along the X-Axis\n"
    "\tZ_AXIS: Displaces along the Z-Axis\n"
    "\tNORMAL: Displaces along the particle's normal.\n"
    "\tCROSS_PRODUCT: Displaces along the axis defined by the cross product of the particle's normal and it's direction of travel.\n"
    "\t</Field>\n"
    "</FieldContainer>\n",
    ""
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &SineWaveParticleAffectorBase::getType(void)
{
    return _type;
}

const FieldContainerType &SineWaveParticleAffectorBase::getType(void) const
{
    return _type;
}

UInt32 SineWaveParticleAffectorBase::getContainerSize(void) const
{
    return sizeof(SineWaveParticleAffector);
}

/*------------------------- decorator get ------------------------------*/


SFReal32 *SineWaveParticleAffectorBase::editSFAmplitude(void)
{
    editSField(AmplitudeFieldMask);

    return &_sfAmplitude;
}

const SFReal32 *SineWaveParticleAffectorBase::getSFAmplitude(void) const
{
    return &_sfAmplitude;
}


SFReal32 *SineWaveParticleAffectorBase::editSFFrequency(void)
{
    editSField(FrequencyFieldMask);

    return &_sfFrequency;
}

const SFReal32 *SineWaveParticleAffectorBase::getSFFrequency(void) const
{
    return &_sfFrequency;
}


SFInt32 *SineWaveParticleAffectorBase::editSFUpDirSource(void)
{
    editSField(UpDirSourceFieldMask);

    return &_sfUpDirSource;
}

const SFInt32 *SineWaveParticleAffectorBase::getSFUpDirSource(void) const
{
    return &_sfUpDirSource;
}






/*------------------------------ access -----------------------------------*/

UInt32 SineWaveParticleAffectorBase::getBinSize(ConstFieldMaskArg whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (AmplitudeFieldMask & whichField))
    {
        returnValue += _sfAmplitude.getBinSize();
    }
    if(FieldBits::NoField != (FrequencyFieldMask & whichField))
    {
        returnValue += _sfFrequency.getBinSize();
    }
    if(FieldBits::NoField != (UpDirSourceFieldMask & whichField))
    {
        returnValue += _sfUpDirSource.getBinSize();
    }

    return returnValue;
}

void SineWaveParticleAffectorBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (AmplitudeFieldMask & whichField))
    {
        _sfAmplitude.copyToBin(pMem);
    }
    if(FieldBits::NoField != (FrequencyFieldMask & whichField))
    {
        _sfFrequency.copyToBin(pMem);
    }
    if(FieldBits::NoField != (UpDirSourceFieldMask & whichField))
    {
        _sfUpDirSource.copyToBin(pMem);
    }
}

void SineWaveParticleAffectorBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (AmplitudeFieldMask & whichField))
    {
        _sfAmplitude.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (FrequencyFieldMask & whichField))
    {
        _sfFrequency.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (UpDirSourceFieldMask & whichField))
    {
        _sfUpDirSource.copyFromBin(pMem);
    }
}

//! create a new instance of the class
SineWaveParticleAffectorTransitPtr SineWaveParticleAffectorBase::createLocal(BitVector bFlags)
{
    SineWaveParticleAffectorTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyLocal(bFlags);

        fc = dynamic_pointer_cast<SineWaveParticleAffector>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class, copy the container flags
SineWaveParticleAffectorTransitPtr SineWaveParticleAffectorBase::createDependent(BitVector bFlags)
{
    SineWaveParticleAffectorTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyDependent(bFlags);

        fc = dynamic_pointer_cast<SineWaveParticleAffector>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class
SineWaveParticleAffectorTransitPtr SineWaveParticleAffectorBase::create(void)
{
    SineWaveParticleAffectorTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopy();

        fc = dynamic_pointer_cast<SineWaveParticleAffector>(tmpPtr);
    }

    return fc;
}

SineWaveParticleAffector *SineWaveParticleAffectorBase::createEmptyLocal(BitVector bFlags)
{
    SineWaveParticleAffector *returnValue;

    newPtr<SineWaveParticleAffector>(returnValue, bFlags);

    returnValue->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

//! create an empty new instance of the class, do not copy the prototype
SineWaveParticleAffector *SineWaveParticleAffectorBase::createEmpty(void)
{
    SineWaveParticleAffector *returnValue;

    newPtr<SineWaveParticleAffector>(returnValue, Thread::getCurrentLocalFlags());

    returnValue->_pFieldFlags->_bNamespaceMask &=
        ~Thread::getCurrentLocalFlags();

    return returnValue;
}


FieldContainerTransitPtr SineWaveParticleAffectorBase::shallowCopyLocal(
    BitVector bFlags) const
{
    SineWaveParticleAffector *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const SineWaveParticleAffector *>(this), bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

FieldContainerTransitPtr SineWaveParticleAffectorBase::shallowCopyDependent(
    BitVector bFlags) const
{
    SineWaveParticleAffector *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const SineWaveParticleAffector *>(this), ~bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask = bFlags;

    return returnValue;
}

FieldContainerTransitPtr SineWaveParticleAffectorBase::shallowCopy(void) const
{
    SineWaveParticleAffector *tmpPtr;

    newPtr(tmpPtr,
           dynamic_cast<const SineWaveParticleAffector *>(this),
           Thread::getCurrentLocalFlags());

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~Thread::getCurrentLocalFlags();

    FieldContainerTransitPtr returnValue(tmpPtr);

    return returnValue;
}




/*------------------------- constructors ----------------------------------*/

SineWaveParticleAffectorBase::SineWaveParticleAffectorBase(void) :
    Inherited(),
    _sfAmplitude              (Real32(1.0f)),
    _sfFrequency              (Real32(2.0f)),
    _sfUpDirSource            (Int32(SineWaveParticleAffector::Y_AXIS))
{
}

SineWaveParticleAffectorBase::SineWaveParticleAffectorBase(const SineWaveParticleAffectorBase &source) :
    Inherited(source),
    _sfAmplitude              (source._sfAmplitude              ),
    _sfFrequency              (source._sfFrequency              ),
    _sfUpDirSource            (source._sfUpDirSource            )
{
}


/*-------------------------- destructors ----------------------------------*/

SineWaveParticleAffectorBase::~SineWaveParticleAffectorBase(void)
{
}


GetFieldHandlePtr SineWaveParticleAffectorBase::getHandleAmplitude       (void) const
{
    SFReal32::GetHandlePtr returnValue(
        new  SFReal32::GetHandle(
             &_sfAmplitude,
             this->getType().getFieldDesc(AmplitudeFieldId),
             const_cast<SineWaveParticleAffectorBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr SineWaveParticleAffectorBase::editHandleAmplitude      (void)
{
    SFReal32::EditHandlePtr returnValue(
        new  SFReal32::EditHandle(
             &_sfAmplitude,
             this->getType().getFieldDesc(AmplitudeFieldId),
             this));


    editSField(AmplitudeFieldMask);

    return returnValue;
}

GetFieldHandlePtr SineWaveParticleAffectorBase::getHandleFrequency       (void) const
{
    SFReal32::GetHandlePtr returnValue(
        new  SFReal32::GetHandle(
             &_sfFrequency,
             this->getType().getFieldDesc(FrequencyFieldId),
             const_cast<SineWaveParticleAffectorBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr SineWaveParticleAffectorBase::editHandleFrequency      (void)
{
    SFReal32::EditHandlePtr returnValue(
        new  SFReal32::EditHandle(
             &_sfFrequency,
             this->getType().getFieldDesc(FrequencyFieldId),
             this));


    editSField(FrequencyFieldMask);

    return returnValue;
}

GetFieldHandlePtr SineWaveParticleAffectorBase::getHandleUpDirSource     (void) const
{
    SFInt32::GetHandlePtr returnValue(
        new  SFInt32::GetHandle(
             &_sfUpDirSource,
             this->getType().getFieldDesc(UpDirSourceFieldId),
             const_cast<SineWaveParticleAffectorBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr SineWaveParticleAffectorBase::editHandleUpDirSource    (void)
{
    SFInt32::EditHandlePtr returnValue(
        new  SFInt32::EditHandle(
             &_sfUpDirSource,
             this->getType().getFieldDesc(UpDirSourceFieldId),
             this));


    editSField(UpDirSourceFieldMask);

    return returnValue;
}


#ifdef OSG_MT_CPTR_ASPECT
void SineWaveParticleAffectorBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    SineWaveParticleAffector *pThis = static_cast<SineWaveParticleAffector *>(this);

    pThis->execSync(static_cast<SineWaveParticleAffector *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif


#ifdef OSG_MT_CPTR_ASPECT
FieldContainer *SineWaveParticleAffectorBase::createAspectCopy(
    const FieldContainer *pRefAspect) const
{
    SineWaveParticleAffector *returnValue;

    newAspectCopy(returnValue,
                  dynamic_cast<const SineWaveParticleAffector *>(pRefAspect),
                  dynamic_cast<const SineWaveParticleAffector *>(this));

    return returnValue;
}
#endif

void SineWaveParticleAffectorBase::resolveLinks(void)
{
    Inherited::resolveLinks();


}


OSG_END_NAMESPACE
