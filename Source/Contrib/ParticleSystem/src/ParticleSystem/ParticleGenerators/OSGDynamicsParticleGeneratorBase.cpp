/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact:  David Kabala (djkabala@gmail.com), Daniel Guilliams           *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class DynamicsParticleGenerator!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>
#include <boost/assign/list_of.hpp>

#include "OSGConfig.h"



#include "OSGDistribution3D.h"          // PositionDistribution Class
#include "OSGDistribution1D.h"          // TransparencyDistribution Class

#include "OSGDynamicsParticleGeneratorBase.h"
#include "OSGDynamicsParticleGenerator.h"

#include <boost/bind.hpp>

#ifdef WIN32 // turn off 'this' : used in base member initializer list warning
#pragma warning(disable:4355)
#endif

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::DynamicsParticleGenerator
    
 */

/***************************************************************************\
 *                        Field Documentation                              *
\***************************************************************************/

/*! \var Distribution3D * DynamicsParticleGeneratorBase::_sfPositionDistribution
    
*/

/*! \var Distribution3D * DynamicsParticleGeneratorBase::_sfSecPositionDistribution
    
*/

/*! \var Distribution3D * DynamicsParticleGeneratorBase::_sfNormalDistribution
    
*/

/*! \var Distribution3D * DynamicsParticleGeneratorBase::_sfColorDistribution
    
*/

/*! \var Distribution1D * DynamicsParticleGeneratorBase::_sfTransparencyDistribution
    
*/

/*! \var Distribution3D * DynamicsParticleGeneratorBase::_sfSizeDistribution
    
*/

/*! \var Distribution1D * DynamicsParticleGeneratorBase::_sfLifespanDistribution
    
*/

/*! \var Distribution1D * DynamicsParticleGeneratorBase::_sfAgeDistribution
    
*/

/*! \var Distribution3D * DynamicsParticleGeneratorBase::_sfVelocityDistribution
    
*/

/*! \var Distribution3D * DynamicsParticleGeneratorBase::_sfSecVelocityDistribution
    
*/

/*! \var Distribution3D * DynamicsParticleGeneratorBase::_sfAccelerationDistribution
    
*/


/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldTraits<DynamicsParticleGenerator *>::_type("DynamicsParticleGeneratorPtr", "ParticleGeneratorPtr");
#endif

OSG_FIELDTRAITS_GETTYPE(DynamicsParticleGenerator *)

OSG_EXPORT_PTR_SFIELD_FULL(PointerSField,
                           DynamicsParticleGenerator *,
                           0);

OSG_EXPORT_PTR_MFIELD_FULL(PointerMField,
                           DynamicsParticleGenerator *,
                           0);

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

void DynamicsParticleGeneratorBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new SFUnrecDistribution3DPtr::Description(
        SFUnrecDistribution3DPtr::getClassType(),
        "PositionDistribution",
        "",
        PositionDistributionFieldId, PositionDistributionFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&DynamicsParticleGenerator::editHandlePositionDistribution),
        static_cast<FieldGetMethodSig >(&DynamicsParticleGenerator::getHandlePositionDistribution));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecDistribution3DPtr::Description(
        SFUnrecDistribution3DPtr::getClassType(),
        "SecPositionDistribution",
        "",
        SecPositionDistributionFieldId, SecPositionDistributionFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&DynamicsParticleGenerator::editHandleSecPositionDistribution),
        static_cast<FieldGetMethodSig >(&DynamicsParticleGenerator::getHandleSecPositionDistribution));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecDistribution3DPtr::Description(
        SFUnrecDistribution3DPtr::getClassType(),
        "NormalDistribution",
        "",
        NormalDistributionFieldId, NormalDistributionFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&DynamicsParticleGenerator::editHandleNormalDistribution),
        static_cast<FieldGetMethodSig >(&DynamicsParticleGenerator::getHandleNormalDistribution));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecDistribution3DPtr::Description(
        SFUnrecDistribution3DPtr::getClassType(),
        "ColorDistribution",
        "",
        ColorDistributionFieldId, ColorDistributionFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&DynamicsParticleGenerator::editHandleColorDistribution),
        static_cast<FieldGetMethodSig >(&DynamicsParticleGenerator::getHandleColorDistribution));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecDistribution1DPtr::Description(
        SFUnrecDistribution1DPtr::getClassType(),
        "TransparencyDistribution",
        "",
        TransparencyDistributionFieldId, TransparencyDistributionFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&DynamicsParticleGenerator::editHandleTransparencyDistribution),
        static_cast<FieldGetMethodSig >(&DynamicsParticleGenerator::getHandleTransparencyDistribution));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecDistribution3DPtr::Description(
        SFUnrecDistribution3DPtr::getClassType(),
        "SizeDistribution",
        "",
        SizeDistributionFieldId, SizeDistributionFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&DynamicsParticleGenerator::editHandleSizeDistribution),
        static_cast<FieldGetMethodSig >(&DynamicsParticleGenerator::getHandleSizeDistribution));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecDistribution1DPtr::Description(
        SFUnrecDistribution1DPtr::getClassType(),
        "LifespanDistribution",
        "",
        LifespanDistributionFieldId, LifespanDistributionFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&DynamicsParticleGenerator::editHandleLifespanDistribution),
        static_cast<FieldGetMethodSig >(&DynamicsParticleGenerator::getHandleLifespanDistribution));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecDistribution1DPtr::Description(
        SFUnrecDistribution1DPtr::getClassType(),
        "AgeDistribution",
        "",
        AgeDistributionFieldId, AgeDistributionFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&DynamicsParticleGenerator::editHandleAgeDistribution),
        static_cast<FieldGetMethodSig >(&DynamicsParticleGenerator::getHandleAgeDistribution));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecDistribution3DPtr::Description(
        SFUnrecDistribution3DPtr::getClassType(),
        "VelocityDistribution",
        "",
        VelocityDistributionFieldId, VelocityDistributionFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&DynamicsParticleGenerator::editHandleVelocityDistribution),
        static_cast<FieldGetMethodSig >(&DynamicsParticleGenerator::getHandleVelocityDistribution));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecDistribution3DPtr::Description(
        SFUnrecDistribution3DPtr::getClassType(),
        "SecVelocityDistribution",
        "",
        SecVelocityDistributionFieldId, SecVelocityDistributionFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&DynamicsParticleGenerator::editHandleSecVelocityDistribution),
        static_cast<FieldGetMethodSig >(&DynamicsParticleGenerator::getHandleSecVelocityDistribution));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecDistribution3DPtr::Description(
        SFUnrecDistribution3DPtr::getClassType(),
        "AccelerationDistribution",
        "",
        AccelerationDistributionFieldId, AccelerationDistributionFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&DynamicsParticleGenerator::editHandleAccelerationDistribution),
        static_cast<FieldGetMethodSig >(&DynamicsParticleGenerator::getHandleAccelerationDistribution));

    oType.addInitialDesc(pDesc);
}


DynamicsParticleGeneratorBase::TypeObject DynamicsParticleGeneratorBase::_type(
    DynamicsParticleGeneratorBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    0,
    NULL,
    DynamicsParticleGenerator::initMethod,
    DynamicsParticleGenerator::exitMethod,
    reinterpret_cast<InitalInsertDescFunc>(&DynamicsParticleGenerator::classDescInserter),
    false,
    0,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "\tname=\"DynamicsParticleGenerator\"\n"
    "\tparent=\"ParticleGenerator\"\n"
    "    library=\"ContribParticleSystem\"\n"
    "    pointerfieldtypes=\"both\"\n"
    "\tstructure=\"abstract\"\n"
    "    systemcomponent=\"true\"\n"
    "    parentsystemcomponent=\"true\"\n"
    "    decoratable=\"false\"\n"
    "    useLocalIncludes=\"false\"\n"
    "    isNodeCore=\"false\"\n"
    "    authors=\"David Kabala (djkabala@gmail.com), Daniel Guilliams           \"\n"
    ">\n"
    "\t<Field\n"
    "\t\tname=\"PositionDistribution\"\n"
    "\t\ttype=\"Distribution3D\"\n"
    "        category=\"pointer\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t\tdefaultValue=\"NULL\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"SecPositionDistribution\"\n"
    "\t\ttype=\"Distribution3D\"\n"
    "        category=\"pointer\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t\tdefaultValue=\"NULL\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"NormalDistribution\"\n"
    "\t\ttype=\"Distribution3D\"\n"
    "        category=\"pointer\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t\tdefaultValue=\"NULL\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"ColorDistribution\"\n"
    "\t\ttype=\"Distribution3D\"\n"
    "        category=\"pointer\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t\tdefaultValue=\"NULL\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"TransparencyDistribution\"\n"
    "\t\ttype=\"Distribution1D\"\n"
    "        category=\"pointer\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t\tdefaultValue=\"NULL\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"SizeDistribution\"\n"
    "\t\ttype=\"Distribution3D\"\n"
    "        category=\"pointer\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t\tdefaultValue=\"NULL\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"LifespanDistribution\"\n"
    "\t\ttype=\"Distribution1D\"\n"
    "        category=\"pointer\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t\tdefaultValue=\"NULL\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"AgeDistribution\"\n"
    "\t\ttype=\"Distribution1D\"\n"
    "        category=\"pointer\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t\tdefaultValue=\"NULL\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"VelocityDistribution\"\n"
    "\t\ttype=\"Distribution3D\"\n"
    "        category=\"pointer\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t\tdefaultValue=\"NULL\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"SecVelocityDistribution\"\n"
    "\t\ttype=\"Distribution3D\"\n"
    "        category=\"pointer\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t\tdefaultValue=\"NULL\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"AccelerationDistribution\"\n"
    "\t\ttype=\"Distribution3D\"\n"
    "        category=\"pointer\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t\tdefaultValue=\"NULL\"\n"
    "\t>\n"
    "\t</Field>\n"
    "</FieldContainer>\n",
    ""
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &DynamicsParticleGeneratorBase::getType(void)
{
    return _type;
}

const FieldContainerType &DynamicsParticleGeneratorBase::getType(void) const
{
    return _type;
}

UInt32 DynamicsParticleGeneratorBase::getContainerSize(void) const
{
    return sizeof(DynamicsParticleGenerator);
}

/*------------------------- decorator get ------------------------------*/


//! Get the DynamicsParticleGenerator::_sfPositionDistribution field.
const SFUnrecDistribution3DPtr *DynamicsParticleGeneratorBase::getSFPositionDistribution(void) const
{
    return &_sfPositionDistribution;
}

SFUnrecDistribution3DPtr *DynamicsParticleGeneratorBase::editSFPositionDistribution(void)
{
    editSField(PositionDistributionFieldMask);

    return &_sfPositionDistribution;
}

//! Get the DynamicsParticleGenerator::_sfSecPositionDistribution field.
const SFUnrecDistribution3DPtr *DynamicsParticleGeneratorBase::getSFSecPositionDistribution(void) const
{
    return &_sfSecPositionDistribution;
}

SFUnrecDistribution3DPtr *DynamicsParticleGeneratorBase::editSFSecPositionDistribution(void)
{
    editSField(SecPositionDistributionFieldMask);

    return &_sfSecPositionDistribution;
}

//! Get the DynamicsParticleGenerator::_sfNormalDistribution field.
const SFUnrecDistribution3DPtr *DynamicsParticleGeneratorBase::getSFNormalDistribution(void) const
{
    return &_sfNormalDistribution;
}

SFUnrecDistribution3DPtr *DynamicsParticleGeneratorBase::editSFNormalDistribution(void)
{
    editSField(NormalDistributionFieldMask);

    return &_sfNormalDistribution;
}

//! Get the DynamicsParticleGenerator::_sfColorDistribution field.
const SFUnrecDistribution3DPtr *DynamicsParticleGeneratorBase::getSFColorDistribution(void) const
{
    return &_sfColorDistribution;
}

SFUnrecDistribution3DPtr *DynamicsParticleGeneratorBase::editSFColorDistribution(void)
{
    editSField(ColorDistributionFieldMask);

    return &_sfColorDistribution;
}

//! Get the DynamicsParticleGenerator::_sfTransparencyDistribution field.
const SFUnrecDistribution1DPtr *DynamicsParticleGeneratorBase::getSFTransparencyDistribution(void) const
{
    return &_sfTransparencyDistribution;
}

SFUnrecDistribution1DPtr *DynamicsParticleGeneratorBase::editSFTransparencyDistribution(void)
{
    editSField(TransparencyDistributionFieldMask);

    return &_sfTransparencyDistribution;
}

//! Get the DynamicsParticleGenerator::_sfSizeDistribution field.
const SFUnrecDistribution3DPtr *DynamicsParticleGeneratorBase::getSFSizeDistribution(void) const
{
    return &_sfSizeDistribution;
}

SFUnrecDistribution3DPtr *DynamicsParticleGeneratorBase::editSFSizeDistribution(void)
{
    editSField(SizeDistributionFieldMask);

    return &_sfSizeDistribution;
}

//! Get the DynamicsParticleGenerator::_sfLifespanDistribution field.
const SFUnrecDistribution1DPtr *DynamicsParticleGeneratorBase::getSFLifespanDistribution(void) const
{
    return &_sfLifespanDistribution;
}

SFUnrecDistribution1DPtr *DynamicsParticleGeneratorBase::editSFLifespanDistribution(void)
{
    editSField(LifespanDistributionFieldMask);

    return &_sfLifespanDistribution;
}

//! Get the DynamicsParticleGenerator::_sfAgeDistribution field.
const SFUnrecDistribution1DPtr *DynamicsParticleGeneratorBase::getSFAgeDistribution(void) const
{
    return &_sfAgeDistribution;
}

SFUnrecDistribution1DPtr *DynamicsParticleGeneratorBase::editSFAgeDistribution(void)
{
    editSField(AgeDistributionFieldMask);

    return &_sfAgeDistribution;
}

//! Get the DynamicsParticleGenerator::_sfVelocityDistribution field.
const SFUnrecDistribution3DPtr *DynamicsParticleGeneratorBase::getSFVelocityDistribution(void) const
{
    return &_sfVelocityDistribution;
}

SFUnrecDistribution3DPtr *DynamicsParticleGeneratorBase::editSFVelocityDistribution(void)
{
    editSField(VelocityDistributionFieldMask);

    return &_sfVelocityDistribution;
}

//! Get the DynamicsParticleGenerator::_sfSecVelocityDistribution field.
const SFUnrecDistribution3DPtr *DynamicsParticleGeneratorBase::getSFSecVelocityDistribution(void) const
{
    return &_sfSecVelocityDistribution;
}

SFUnrecDistribution3DPtr *DynamicsParticleGeneratorBase::editSFSecVelocityDistribution(void)
{
    editSField(SecVelocityDistributionFieldMask);

    return &_sfSecVelocityDistribution;
}

//! Get the DynamicsParticleGenerator::_sfAccelerationDistribution field.
const SFUnrecDistribution3DPtr *DynamicsParticleGeneratorBase::getSFAccelerationDistribution(void) const
{
    return &_sfAccelerationDistribution;
}

SFUnrecDistribution3DPtr *DynamicsParticleGeneratorBase::editSFAccelerationDistribution(void)
{
    editSField(AccelerationDistributionFieldMask);

    return &_sfAccelerationDistribution;
}





/*------------------------------ access -----------------------------------*/

UInt32 DynamicsParticleGeneratorBase::getBinSize(ConstFieldMaskArg whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (PositionDistributionFieldMask & whichField))
    {
        returnValue += _sfPositionDistribution.getBinSize();
    }
    if(FieldBits::NoField != (SecPositionDistributionFieldMask & whichField))
    {
        returnValue += _sfSecPositionDistribution.getBinSize();
    }
    if(FieldBits::NoField != (NormalDistributionFieldMask & whichField))
    {
        returnValue += _sfNormalDistribution.getBinSize();
    }
    if(FieldBits::NoField != (ColorDistributionFieldMask & whichField))
    {
        returnValue += _sfColorDistribution.getBinSize();
    }
    if(FieldBits::NoField != (TransparencyDistributionFieldMask & whichField))
    {
        returnValue += _sfTransparencyDistribution.getBinSize();
    }
    if(FieldBits::NoField != (SizeDistributionFieldMask & whichField))
    {
        returnValue += _sfSizeDistribution.getBinSize();
    }
    if(FieldBits::NoField != (LifespanDistributionFieldMask & whichField))
    {
        returnValue += _sfLifespanDistribution.getBinSize();
    }
    if(FieldBits::NoField != (AgeDistributionFieldMask & whichField))
    {
        returnValue += _sfAgeDistribution.getBinSize();
    }
    if(FieldBits::NoField != (VelocityDistributionFieldMask & whichField))
    {
        returnValue += _sfVelocityDistribution.getBinSize();
    }
    if(FieldBits::NoField != (SecVelocityDistributionFieldMask & whichField))
    {
        returnValue += _sfSecVelocityDistribution.getBinSize();
    }
    if(FieldBits::NoField != (AccelerationDistributionFieldMask & whichField))
    {
        returnValue += _sfAccelerationDistribution.getBinSize();
    }

    return returnValue;
}

void DynamicsParticleGeneratorBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (PositionDistributionFieldMask & whichField))
    {
        _sfPositionDistribution.copyToBin(pMem);
    }
    if(FieldBits::NoField != (SecPositionDistributionFieldMask & whichField))
    {
        _sfSecPositionDistribution.copyToBin(pMem);
    }
    if(FieldBits::NoField != (NormalDistributionFieldMask & whichField))
    {
        _sfNormalDistribution.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ColorDistributionFieldMask & whichField))
    {
        _sfColorDistribution.copyToBin(pMem);
    }
    if(FieldBits::NoField != (TransparencyDistributionFieldMask & whichField))
    {
        _sfTransparencyDistribution.copyToBin(pMem);
    }
    if(FieldBits::NoField != (SizeDistributionFieldMask & whichField))
    {
        _sfSizeDistribution.copyToBin(pMem);
    }
    if(FieldBits::NoField != (LifespanDistributionFieldMask & whichField))
    {
        _sfLifespanDistribution.copyToBin(pMem);
    }
    if(FieldBits::NoField != (AgeDistributionFieldMask & whichField))
    {
        _sfAgeDistribution.copyToBin(pMem);
    }
    if(FieldBits::NoField != (VelocityDistributionFieldMask & whichField))
    {
        _sfVelocityDistribution.copyToBin(pMem);
    }
    if(FieldBits::NoField != (SecVelocityDistributionFieldMask & whichField))
    {
        _sfSecVelocityDistribution.copyToBin(pMem);
    }
    if(FieldBits::NoField != (AccelerationDistributionFieldMask & whichField))
    {
        _sfAccelerationDistribution.copyToBin(pMem);
    }
}

void DynamicsParticleGeneratorBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (PositionDistributionFieldMask & whichField))
    {
        _sfPositionDistribution.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (SecPositionDistributionFieldMask & whichField))
    {
        _sfSecPositionDistribution.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (NormalDistributionFieldMask & whichField))
    {
        _sfNormalDistribution.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ColorDistributionFieldMask & whichField))
    {
        _sfColorDistribution.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (TransparencyDistributionFieldMask & whichField))
    {
        _sfTransparencyDistribution.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (SizeDistributionFieldMask & whichField))
    {
        _sfSizeDistribution.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (LifespanDistributionFieldMask & whichField))
    {
        _sfLifespanDistribution.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (AgeDistributionFieldMask & whichField))
    {
        _sfAgeDistribution.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (VelocityDistributionFieldMask & whichField))
    {
        _sfVelocityDistribution.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (SecVelocityDistributionFieldMask & whichField))
    {
        _sfSecVelocityDistribution.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (AccelerationDistributionFieldMask & whichField))
    {
        _sfAccelerationDistribution.copyFromBin(pMem);
    }
}




/*------------------------- constructors ----------------------------------*/

DynamicsParticleGeneratorBase::DynamicsParticleGeneratorBase(void) :
    Inherited(),
    _sfPositionDistribution   (NULL),
    _sfSecPositionDistribution(NULL),
    _sfNormalDistribution     (NULL),
    _sfColorDistribution      (NULL),
    _sfTransparencyDistribution(NULL),
    _sfSizeDistribution       (NULL),
    _sfLifespanDistribution   (NULL),
    _sfAgeDistribution        (NULL),
    _sfVelocityDistribution   (NULL),
    _sfSecVelocityDistribution(NULL),
    _sfAccelerationDistribution(NULL)
{
}

DynamicsParticleGeneratorBase::DynamicsParticleGeneratorBase(const DynamicsParticleGeneratorBase &source) :
    Inherited(source),
    _sfPositionDistribution   (NULL),
    _sfSecPositionDistribution(NULL),
    _sfNormalDistribution     (NULL),
    _sfColorDistribution      (NULL),
    _sfTransparencyDistribution(NULL),
    _sfSizeDistribution       (NULL),
    _sfLifespanDistribution   (NULL),
    _sfAgeDistribution        (NULL),
    _sfVelocityDistribution   (NULL),
    _sfSecVelocityDistribution(NULL),
    _sfAccelerationDistribution(NULL)
{
}


/*-------------------------- destructors ----------------------------------*/

DynamicsParticleGeneratorBase::~DynamicsParticleGeneratorBase(void)
{
}

void DynamicsParticleGeneratorBase::onCreate(const DynamicsParticleGenerator *source)
{
    Inherited::onCreate(source);

    if(source != NULL)
    {
        DynamicsParticleGenerator *pThis = static_cast<DynamicsParticleGenerator *>(this);

        pThis->setPositionDistribution(source->getPositionDistribution());

        pThis->setSecPositionDistribution(source->getSecPositionDistribution());

        pThis->setNormalDistribution(source->getNormalDistribution());

        pThis->setColorDistribution(source->getColorDistribution());

        pThis->setTransparencyDistribution(source->getTransparencyDistribution());

        pThis->setSizeDistribution(source->getSizeDistribution());

        pThis->setLifespanDistribution(source->getLifespanDistribution());

        pThis->setAgeDistribution(source->getAgeDistribution());

        pThis->setVelocityDistribution(source->getVelocityDistribution());

        pThis->setSecVelocityDistribution(source->getSecVelocityDistribution());

        pThis->setAccelerationDistribution(source->getAccelerationDistribution());
    }
}

GetFieldHandlePtr DynamicsParticleGeneratorBase::getHandlePositionDistribution (void) const
{
    SFUnrecDistribution3DPtr::GetHandlePtr returnValue(
        new  SFUnrecDistribution3DPtr::GetHandle(
             &_sfPositionDistribution,
             this->getType().getFieldDesc(PositionDistributionFieldId),
             const_cast<DynamicsParticleGeneratorBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr DynamicsParticleGeneratorBase::editHandlePositionDistribution(void)
{
    SFUnrecDistribution3DPtr::EditHandlePtr returnValue(
        new  SFUnrecDistribution3DPtr::EditHandle(
             &_sfPositionDistribution,
             this->getType().getFieldDesc(PositionDistributionFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&DynamicsParticleGenerator::setPositionDistribution,
                    static_cast<DynamicsParticleGenerator *>(this), _1));

    editSField(PositionDistributionFieldMask);

    return returnValue;
}

GetFieldHandlePtr DynamicsParticleGeneratorBase::getHandleSecPositionDistribution (void) const
{
    SFUnrecDistribution3DPtr::GetHandlePtr returnValue(
        new  SFUnrecDistribution3DPtr::GetHandle(
             &_sfSecPositionDistribution,
             this->getType().getFieldDesc(SecPositionDistributionFieldId),
             const_cast<DynamicsParticleGeneratorBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr DynamicsParticleGeneratorBase::editHandleSecPositionDistribution(void)
{
    SFUnrecDistribution3DPtr::EditHandlePtr returnValue(
        new  SFUnrecDistribution3DPtr::EditHandle(
             &_sfSecPositionDistribution,
             this->getType().getFieldDesc(SecPositionDistributionFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&DynamicsParticleGenerator::setSecPositionDistribution,
                    static_cast<DynamicsParticleGenerator *>(this), _1));

    editSField(SecPositionDistributionFieldMask);

    return returnValue;
}

GetFieldHandlePtr DynamicsParticleGeneratorBase::getHandleNormalDistribution (void) const
{
    SFUnrecDistribution3DPtr::GetHandlePtr returnValue(
        new  SFUnrecDistribution3DPtr::GetHandle(
             &_sfNormalDistribution,
             this->getType().getFieldDesc(NormalDistributionFieldId),
             const_cast<DynamicsParticleGeneratorBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr DynamicsParticleGeneratorBase::editHandleNormalDistribution(void)
{
    SFUnrecDistribution3DPtr::EditHandlePtr returnValue(
        new  SFUnrecDistribution3DPtr::EditHandle(
             &_sfNormalDistribution,
             this->getType().getFieldDesc(NormalDistributionFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&DynamicsParticleGenerator::setNormalDistribution,
                    static_cast<DynamicsParticleGenerator *>(this), _1));

    editSField(NormalDistributionFieldMask);

    return returnValue;
}

GetFieldHandlePtr DynamicsParticleGeneratorBase::getHandleColorDistribution (void) const
{
    SFUnrecDistribution3DPtr::GetHandlePtr returnValue(
        new  SFUnrecDistribution3DPtr::GetHandle(
             &_sfColorDistribution,
             this->getType().getFieldDesc(ColorDistributionFieldId),
             const_cast<DynamicsParticleGeneratorBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr DynamicsParticleGeneratorBase::editHandleColorDistribution(void)
{
    SFUnrecDistribution3DPtr::EditHandlePtr returnValue(
        new  SFUnrecDistribution3DPtr::EditHandle(
             &_sfColorDistribution,
             this->getType().getFieldDesc(ColorDistributionFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&DynamicsParticleGenerator::setColorDistribution,
                    static_cast<DynamicsParticleGenerator *>(this), _1));

    editSField(ColorDistributionFieldMask);

    return returnValue;
}

GetFieldHandlePtr DynamicsParticleGeneratorBase::getHandleTransparencyDistribution (void) const
{
    SFUnrecDistribution1DPtr::GetHandlePtr returnValue(
        new  SFUnrecDistribution1DPtr::GetHandle(
             &_sfTransparencyDistribution,
             this->getType().getFieldDesc(TransparencyDistributionFieldId),
             const_cast<DynamicsParticleGeneratorBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr DynamicsParticleGeneratorBase::editHandleTransparencyDistribution(void)
{
    SFUnrecDistribution1DPtr::EditHandlePtr returnValue(
        new  SFUnrecDistribution1DPtr::EditHandle(
             &_sfTransparencyDistribution,
             this->getType().getFieldDesc(TransparencyDistributionFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&DynamicsParticleGenerator::setTransparencyDistribution,
                    static_cast<DynamicsParticleGenerator *>(this), _1));

    editSField(TransparencyDistributionFieldMask);

    return returnValue;
}

GetFieldHandlePtr DynamicsParticleGeneratorBase::getHandleSizeDistribution (void) const
{
    SFUnrecDistribution3DPtr::GetHandlePtr returnValue(
        new  SFUnrecDistribution3DPtr::GetHandle(
             &_sfSizeDistribution,
             this->getType().getFieldDesc(SizeDistributionFieldId),
             const_cast<DynamicsParticleGeneratorBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr DynamicsParticleGeneratorBase::editHandleSizeDistribution(void)
{
    SFUnrecDistribution3DPtr::EditHandlePtr returnValue(
        new  SFUnrecDistribution3DPtr::EditHandle(
             &_sfSizeDistribution,
             this->getType().getFieldDesc(SizeDistributionFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&DynamicsParticleGenerator::setSizeDistribution,
                    static_cast<DynamicsParticleGenerator *>(this), _1));

    editSField(SizeDistributionFieldMask);

    return returnValue;
}

GetFieldHandlePtr DynamicsParticleGeneratorBase::getHandleLifespanDistribution (void) const
{
    SFUnrecDistribution1DPtr::GetHandlePtr returnValue(
        new  SFUnrecDistribution1DPtr::GetHandle(
             &_sfLifespanDistribution,
             this->getType().getFieldDesc(LifespanDistributionFieldId),
             const_cast<DynamicsParticleGeneratorBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr DynamicsParticleGeneratorBase::editHandleLifespanDistribution(void)
{
    SFUnrecDistribution1DPtr::EditHandlePtr returnValue(
        new  SFUnrecDistribution1DPtr::EditHandle(
             &_sfLifespanDistribution,
             this->getType().getFieldDesc(LifespanDistributionFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&DynamicsParticleGenerator::setLifespanDistribution,
                    static_cast<DynamicsParticleGenerator *>(this), _1));

    editSField(LifespanDistributionFieldMask);

    return returnValue;
}

GetFieldHandlePtr DynamicsParticleGeneratorBase::getHandleAgeDistribution (void) const
{
    SFUnrecDistribution1DPtr::GetHandlePtr returnValue(
        new  SFUnrecDistribution1DPtr::GetHandle(
             &_sfAgeDistribution,
             this->getType().getFieldDesc(AgeDistributionFieldId),
             const_cast<DynamicsParticleGeneratorBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr DynamicsParticleGeneratorBase::editHandleAgeDistribution(void)
{
    SFUnrecDistribution1DPtr::EditHandlePtr returnValue(
        new  SFUnrecDistribution1DPtr::EditHandle(
             &_sfAgeDistribution,
             this->getType().getFieldDesc(AgeDistributionFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&DynamicsParticleGenerator::setAgeDistribution,
                    static_cast<DynamicsParticleGenerator *>(this), _1));

    editSField(AgeDistributionFieldMask);

    return returnValue;
}

GetFieldHandlePtr DynamicsParticleGeneratorBase::getHandleVelocityDistribution (void) const
{
    SFUnrecDistribution3DPtr::GetHandlePtr returnValue(
        new  SFUnrecDistribution3DPtr::GetHandle(
             &_sfVelocityDistribution,
             this->getType().getFieldDesc(VelocityDistributionFieldId),
             const_cast<DynamicsParticleGeneratorBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr DynamicsParticleGeneratorBase::editHandleVelocityDistribution(void)
{
    SFUnrecDistribution3DPtr::EditHandlePtr returnValue(
        new  SFUnrecDistribution3DPtr::EditHandle(
             &_sfVelocityDistribution,
             this->getType().getFieldDesc(VelocityDistributionFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&DynamicsParticleGenerator::setVelocityDistribution,
                    static_cast<DynamicsParticleGenerator *>(this), _1));

    editSField(VelocityDistributionFieldMask);

    return returnValue;
}

GetFieldHandlePtr DynamicsParticleGeneratorBase::getHandleSecVelocityDistribution (void) const
{
    SFUnrecDistribution3DPtr::GetHandlePtr returnValue(
        new  SFUnrecDistribution3DPtr::GetHandle(
             &_sfSecVelocityDistribution,
             this->getType().getFieldDesc(SecVelocityDistributionFieldId),
             const_cast<DynamicsParticleGeneratorBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr DynamicsParticleGeneratorBase::editHandleSecVelocityDistribution(void)
{
    SFUnrecDistribution3DPtr::EditHandlePtr returnValue(
        new  SFUnrecDistribution3DPtr::EditHandle(
             &_sfSecVelocityDistribution,
             this->getType().getFieldDesc(SecVelocityDistributionFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&DynamicsParticleGenerator::setSecVelocityDistribution,
                    static_cast<DynamicsParticleGenerator *>(this), _1));

    editSField(SecVelocityDistributionFieldMask);

    return returnValue;
}

GetFieldHandlePtr DynamicsParticleGeneratorBase::getHandleAccelerationDistribution (void) const
{
    SFUnrecDistribution3DPtr::GetHandlePtr returnValue(
        new  SFUnrecDistribution3DPtr::GetHandle(
             &_sfAccelerationDistribution,
             this->getType().getFieldDesc(AccelerationDistributionFieldId),
             const_cast<DynamicsParticleGeneratorBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr DynamicsParticleGeneratorBase::editHandleAccelerationDistribution(void)
{
    SFUnrecDistribution3DPtr::EditHandlePtr returnValue(
        new  SFUnrecDistribution3DPtr::EditHandle(
             &_sfAccelerationDistribution,
             this->getType().getFieldDesc(AccelerationDistributionFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&DynamicsParticleGenerator::setAccelerationDistribution,
                    static_cast<DynamicsParticleGenerator *>(this), _1));

    editSField(AccelerationDistributionFieldMask);

    return returnValue;
}


#ifdef OSG_MT_CPTR_ASPECT
void DynamicsParticleGeneratorBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    DynamicsParticleGenerator *pThis = static_cast<DynamicsParticleGenerator *>(this);

    pThis->execSync(static_cast<DynamicsParticleGenerator *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif



void DynamicsParticleGeneratorBase::resolveLinks(void)
{
    Inherited::resolveLinks();

    static_cast<DynamicsParticleGenerator *>(this)->setPositionDistribution(NULL);

    static_cast<DynamicsParticleGenerator *>(this)->setSecPositionDistribution(NULL);

    static_cast<DynamicsParticleGenerator *>(this)->setNormalDistribution(NULL);

    static_cast<DynamicsParticleGenerator *>(this)->setColorDistribution(NULL);

    static_cast<DynamicsParticleGenerator *>(this)->setTransparencyDistribution(NULL);

    static_cast<DynamicsParticleGenerator *>(this)->setSizeDistribution(NULL);

    static_cast<DynamicsParticleGenerator *>(this)->setLifespanDistribution(NULL);

    static_cast<DynamicsParticleGenerator *>(this)->setAgeDistribution(NULL);

    static_cast<DynamicsParticleGenerator *>(this)->setVelocityDistribution(NULL);

    static_cast<DynamicsParticleGenerator *>(this)->setSecVelocityDistribution(NULL);

    static_cast<DynamicsParticleGenerator *>(this)->setAccelerationDistribution(NULL);


}


OSG_END_NAMESPACE
