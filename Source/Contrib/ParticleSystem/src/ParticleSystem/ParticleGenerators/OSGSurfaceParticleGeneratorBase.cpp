/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact:  David Kabala (djkabala@gmail.com), Daniel Guilliams           *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class SurfaceParticleGenerator!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>
#include <boost/assign/list_of.hpp>

#include "OSGConfig.h"



#include "OSGGeoSurfaceDistribution3D.h" // PositionVelocityDistribution Class
#include "OSGDistribution3D.h"          // NormalDistribution Class
#include "OSGDistribution1D.h"          // TransparencyDistribution Class

#include "OSGSurfaceParticleGeneratorBase.h"
#include "OSGSurfaceParticleGenerator.h"

#include <boost/bind.hpp>

#ifdef WIN32 // turn off 'this' : used in base member initializer list warning
#pragma warning(disable:4355)
#endif

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::SurfaceParticleGenerator
    
 */

/***************************************************************************\
 *                        Field Documentation                              *
\***************************************************************************/

/*! \var GeoSurfaceDistribution3D * SurfaceParticleGeneratorBase::_sfPositionVelocityDistribution
    
*/

/*! \var Distribution3D * SurfaceParticleGeneratorBase::_sfNormalDistribution
    
*/

/*! \var Distribution3D * SurfaceParticleGeneratorBase::_sfColorDistribution
    
*/

/*! \var Distribution1D * SurfaceParticleGeneratorBase::_sfTransparencyDistribution
    
*/

/*! \var Distribution3D * SurfaceParticleGeneratorBase::_sfSizeDistribution
    
*/

/*! \var Distribution1D * SurfaceParticleGeneratorBase::_sfLifespanDistribution
    
*/

/*! \var Distribution1D * SurfaceParticleGeneratorBase::_sfAgeDistribution
    
*/

/*! \var Distribution1D * SurfaceParticleGeneratorBase::_sfSpeedDistribution
    
*/

/*! \var Distribution3D * SurfaceParticleGeneratorBase::_sfAccelerationDistribution
    
*/


/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldTraits<SurfaceParticleGenerator *>::_type("SurfaceParticleGeneratorPtr", "ParticleGeneratorPtr");
#endif

OSG_FIELDTRAITS_GETTYPE(SurfaceParticleGenerator *)

OSG_EXPORT_PTR_SFIELD_FULL(PointerSField,
                           SurfaceParticleGenerator *,
                           0);

OSG_EXPORT_PTR_MFIELD_FULL(PointerMField,
                           SurfaceParticleGenerator *,
                           0);

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

void SurfaceParticleGeneratorBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new SFUnrecGeoSurfaceDistribution3DPtr::Description(
        SFUnrecGeoSurfaceDistribution3DPtr::getClassType(),
        "PositionVelocityDistribution",
        "",
        PositionVelocityDistributionFieldId, PositionVelocityDistributionFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&SurfaceParticleGenerator::editHandlePositionVelocityDistribution),
        static_cast<FieldGetMethodSig >(&SurfaceParticleGenerator::getHandlePositionVelocityDistribution));

    oType.addInitialDesc(pDesc);


    pDesc = new SFUnrecDistribution3DPtr::Description(
        SFUnrecDistribution3DPtr::getClassType(),
        "NormalDistribution",
        "",
        NormalDistributionFieldId, NormalDistributionFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&SurfaceParticleGenerator::editHandleNormalDistribution),
        static_cast<FieldGetMethodSig >(&SurfaceParticleGenerator::getHandleNormalDistribution));

    oType.addInitialDesc(pDesc);


    pDesc = new SFUnrecDistribution3DPtr::Description(
        SFUnrecDistribution3DPtr::getClassType(),
        "ColorDistribution",
        "",
        ColorDistributionFieldId, ColorDistributionFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&SurfaceParticleGenerator::editHandleColorDistribution),
        static_cast<FieldGetMethodSig >(&SurfaceParticleGenerator::getHandleColorDistribution));

    oType.addInitialDesc(pDesc);


    pDesc = new SFUnrecDistribution1DPtr::Description(
        SFUnrecDistribution1DPtr::getClassType(),
        "TransparencyDistribution",
        "",
        TransparencyDistributionFieldId, TransparencyDistributionFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&SurfaceParticleGenerator::editHandleTransparencyDistribution),
        static_cast<FieldGetMethodSig >(&SurfaceParticleGenerator::getHandleTransparencyDistribution));

    oType.addInitialDesc(pDesc);


    pDesc = new SFUnrecDistribution3DPtr::Description(
        SFUnrecDistribution3DPtr::getClassType(),
        "SizeDistribution",
        "",
        SizeDistributionFieldId, SizeDistributionFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&SurfaceParticleGenerator::editHandleSizeDistribution),
        static_cast<FieldGetMethodSig >(&SurfaceParticleGenerator::getHandleSizeDistribution));

    oType.addInitialDesc(pDesc);


    pDesc = new SFUnrecDistribution1DPtr::Description(
        SFUnrecDistribution1DPtr::getClassType(),
        "LifespanDistribution",
        "",
        LifespanDistributionFieldId, LifespanDistributionFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&SurfaceParticleGenerator::editHandleLifespanDistribution),
        static_cast<FieldGetMethodSig >(&SurfaceParticleGenerator::getHandleLifespanDistribution));

    oType.addInitialDesc(pDesc);


    pDesc = new SFUnrecDistribution1DPtr::Description(
        SFUnrecDistribution1DPtr::getClassType(),
        "AgeDistribution",
        "",
        AgeDistributionFieldId, AgeDistributionFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&SurfaceParticleGenerator::editHandleAgeDistribution),
        static_cast<FieldGetMethodSig >(&SurfaceParticleGenerator::getHandleAgeDistribution));

    oType.addInitialDesc(pDesc);


    pDesc = new SFUnrecDistribution1DPtr::Description(
        SFUnrecDistribution1DPtr::getClassType(),
        "SpeedDistribution",
        "",
        SpeedDistributionFieldId, SpeedDistributionFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&SurfaceParticleGenerator::editHandleSpeedDistribution),
        static_cast<FieldGetMethodSig >(&SurfaceParticleGenerator::getHandleSpeedDistribution));

    oType.addInitialDesc(pDesc);


    pDesc = new SFUnrecDistribution3DPtr::Description(
        SFUnrecDistribution3DPtr::getClassType(),
        "AccelerationDistribution",
        "",
        AccelerationDistributionFieldId, AccelerationDistributionFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&SurfaceParticleGenerator::editHandleAccelerationDistribution),
        static_cast<FieldGetMethodSig >(&SurfaceParticleGenerator::getHandleAccelerationDistribution));

    oType.addInitialDesc(pDesc);

}


SurfaceParticleGeneratorBase::TypeObject SurfaceParticleGeneratorBase::_type(
    SurfaceParticleGeneratorBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    0,
    reinterpret_cast<PrototypeCreateF>(&SurfaceParticleGeneratorBase::createEmptyLocal),
    SurfaceParticleGenerator::initMethod,
    SurfaceParticleGenerator::exitMethod,
    reinterpret_cast<InitalInsertDescFunc>(&SurfaceParticleGenerator::classDescInserter),
    false,
    0,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "\tname=\"SurfaceParticleGenerator\"\n"
    "\tparent=\"ParticleGenerator\"\n"
    "    library=\"ContribParticleSystem\"\n"
    "    pointerfieldtypes=\"both\"\n"
    "\tstructure=\"concrete\"\n"
    "    systemcomponent=\"true\"\n"
    "    parentsystemcomponent=\"true\"\n"
    "    decoratable=\"false\"\n"
    "    useLocalIncludes=\"false\"\n"
    "    isNodeCore=\"false\"\n"
    "    authors=\"David Kabala (djkabala@gmail.com), Daniel Guilliams           \"\n"
    ">\n"
    "\t<Field\n"
    "\t\tname=\"PositionVelocityDistribution\"\n"
    "\t\ttype=\"GeoSurfaceDistribution3D\"\n"
    "        category=\"pointer\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t\tdefaultValue=\"NULL\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"NormalDistribution\"\n"
    "\t\ttype=\"Distribution3D\"\n"
    "        category=\"pointer\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t\tdefaultValue=\"NULL\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"ColorDistribution\"\n"
    "\t\ttype=\"Distribution3D\"\n"
    "        category=\"pointer\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t\tdefaultValue=\"NULL\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"TransparencyDistribution\"\n"
    "\t\ttype=\"Distribution1D\"\n"
    "        category=\"pointer\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t\tdefaultValue=\"NULL\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"SizeDistribution\"\n"
    "\t\ttype=\"Distribution3D\"\n"
    "        category=\"pointer\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t\tdefaultValue=\"NULL\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"LifespanDistribution\"\n"
    "\t\ttype=\"Distribution1D\"\n"
    "        category=\"pointer\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t\tdefaultValue=\"NULL\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"AgeDistribution\"\n"
    "\t\ttype=\"Distribution1D\"\n"
    "        category=\"pointer\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t\tdefaultValue=\"NULL\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"SpeedDistribution\"\n"
    "\t\ttype=\"Distribution1D\"\n"
    "        category=\"pointer\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t\tdefaultValue=\"NULL\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"AccelerationDistribution\"\n"
    "\t\ttype=\"Distribution3D\"\n"
    "        category=\"pointer\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t\tdefaultValue=\"NULL\"\n"
    "\t>\n"
    "\t</Field>\n"
    "</FieldContainer>\n",
    ""
    );


/*------------------------------ get -----------------------------------*/

FieldContainerType &SurfaceParticleGeneratorBase::getType(void)
{
    return _type;
}

const FieldContainerType &SurfaceParticleGeneratorBase::getType(void) const
{
    return _type;
}

UInt32 SurfaceParticleGeneratorBase::getContainerSize(void) const
{
    return sizeof(SurfaceParticleGenerator);
}

/*------------------------- decorator get ------------------------------*/


//! Get the SurfaceParticleGenerator::_sfPositionVelocityDistribution field.
const SFUnrecGeoSurfaceDistribution3DPtr *SurfaceParticleGeneratorBase::getSFPositionVelocityDistribution(void) const
{
    return &_sfPositionVelocityDistribution;
}

SFUnrecGeoSurfaceDistribution3DPtr *SurfaceParticleGeneratorBase::editSFPositionVelocityDistribution(void)
{
    editSField(PositionVelocityDistributionFieldMask);

    return &_sfPositionVelocityDistribution;
}

//! Get the SurfaceParticleGenerator::_sfNormalDistribution field.
const SFUnrecDistribution3DPtr *SurfaceParticleGeneratorBase::getSFNormalDistribution(void) const
{
    return &_sfNormalDistribution;
}

SFUnrecDistribution3DPtr *SurfaceParticleGeneratorBase::editSFNormalDistribution(void)
{
    editSField(NormalDistributionFieldMask);

    return &_sfNormalDistribution;
}

//! Get the SurfaceParticleGenerator::_sfColorDistribution field.
const SFUnrecDistribution3DPtr *SurfaceParticleGeneratorBase::getSFColorDistribution(void) const
{
    return &_sfColorDistribution;
}

SFUnrecDistribution3DPtr *SurfaceParticleGeneratorBase::editSFColorDistribution(void)
{
    editSField(ColorDistributionFieldMask);

    return &_sfColorDistribution;
}

//! Get the SurfaceParticleGenerator::_sfTransparencyDistribution field.
const SFUnrecDistribution1DPtr *SurfaceParticleGeneratorBase::getSFTransparencyDistribution(void) const
{
    return &_sfTransparencyDistribution;
}

SFUnrecDistribution1DPtr *SurfaceParticleGeneratorBase::editSFTransparencyDistribution(void)
{
    editSField(TransparencyDistributionFieldMask);

    return &_sfTransparencyDistribution;
}

//! Get the SurfaceParticleGenerator::_sfSizeDistribution field.
const SFUnrecDistribution3DPtr *SurfaceParticleGeneratorBase::getSFSizeDistribution(void) const
{
    return &_sfSizeDistribution;
}

SFUnrecDistribution3DPtr *SurfaceParticleGeneratorBase::editSFSizeDistribution(void)
{
    editSField(SizeDistributionFieldMask);

    return &_sfSizeDistribution;
}

//! Get the SurfaceParticleGenerator::_sfLifespanDistribution field.
const SFUnrecDistribution1DPtr *SurfaceParticleGeneratorBase::getSFLifespanDistribution(void) const
{
    return &_sfLifespanDistribution;
}

SFUnrecDistribution1DPtr *SurfaceParticleGeneratorBase::editSFLifespanDistribution(void)
{
    editSField(LifespanDistributionFieldMask);

    return &_sfLifespanDistribution;
}

//! Get the SurfaceParticleGenerator::_sfAgeDistribution field.
const SFUnrecDistribution1DPtr *SurfaceParticleGeneratorBase::getSFAgeDistribution(void) const
{
    return &_sfAgeDistribution;
}

SFUnrecDistribution1DPtr *SurfaceParticleGeneratorBase::editSFAgeDistribution(void)
{
    editSField(AgeDistributionFieldMask);

    return &_sfAgeDistribution;
}

//! Get the SurfaceParticleGenerator::_sfSpeedDistribution field.
const SFUnrecDistribution1DPtr *SurfaceParticleGeneratorBase::getSFSpeedDistribution(void) const
{
    return &_sfSpeedDistribution;
}

SFUnrecDistribution1DPtr *SurfaceParticleGeneratorBase::editSFSpeedDistribution(void)
{
    editSField(SpeedDistributionFieldMask);

    return &_sfSpeedDistribution;
}

//! Get the SurfaceParticleGenerator::_sfAccelerationDistribution field.
const SFUnrecDistribution3DPtr *SurfaceParticleGeneratorBase::getSFAccelerationDistribution(void) const
{
    return &_sfAccelerationDistribution;
}

SFUnrecDistribution3DPtr *SurfaceParticleGeneratorBase::editSFAccelerationDistribution(void)
{
    editSField(AccelerationDistributionFieldMask);

    return &_sfAccelerationDistribution;
}





/*------------------------------ access -----------------------------------*/

UInt32 SurfaceParticleGeneratorBase::getBinSize(ConstFieldMaskArg whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (PositionVelocityDistributionFieldMask & whichField))
    {
        returnValue += _sfPositionVelocityDistribution.getBinSize();
    }
    if(FieldBits::NoField != (NormalDistributionFieldMask & whichField))
    {
        returnValue += _sfNormalDistribution.getBinSize();
    }
    if(FieldBits::NoField != (ColorDistributionFieldMask & whichField))
    {
        returnValue += _sfColorDistribution.getBinSize();
    }
    if(FieldBits::NoField != (TransparencyDistributionFieldMask & whichField))
    {
        returnValue += _sfTransparencyDistribution.getBinSize();
    }
    if(FieldBits::NoField != (SizeDistributionFieldMask & whichField))
    {
        returnValue += _sfSizeDistribution.getBinSize();
    }
    if(FieldBits::NoField != (LifespanDistributionFieldMask & whichField))
    {
        returnValue += _sfLifespanDistribution.getBinSize();
    }
    if(FieldBits::NoField != (AgeDistributionFieldMask & whichField))
    {
        returnValue += _sfAgeDistribution.getBinSize();
    }
    if(FieldBits::NoField != (SpeedDistributionFieldMask & whichField))
    {
        returnValue += _sfSpeedDistribution.getBinSize();
    }
    if(FieldBits::NoField != (AccelerationDistributionFieldMask & whichField))
    {
        returnValue += _sfAccelerationDistribution.getBinSize();
    }

    return returnValue;
}

void SurfaceParticleGeneratorBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (PositionVelocityDistributionFieldMask & whichField))
    {
        _sfPositionVelocityDistribution.copyToBin(pMem);
    }
    if(FieldBits::NoField != (NormalDistributionFieldMask & whichField))
    {
        _sfNormalDistribution.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ColorDistributionFieldMask & whichField))
    {
        _sfColorDistribution.copyToBin(pMem);
    }
    if(FieldBits::NoField != (TransparencyDistributionFieldMask & whichField))
    {
        _sfTransparencyDistribution.copyToBin(pMem);
    }
    if(FieldBits::NoField != (SizeDistributionFieldMask & whichField))
    {
        _sfSizeDistribution.copyToBin(pMem);
    }
    if(FieldBits::NoField != (LifespanDistributionFieldMask & whichField))
    {
        _sfLifespanDistribution.copyToBin(pMem);
    }
    if(FieldBits::NoField != (AgeDistributionFieldMask & whichField))
    {
        _sfAgeDistribution.copyToBin(pMem);
    }
    if(FieldBits::NoField != (SpeedDistributionFieldMask & whichField))
    {
        _sfSpeedDistribution.copyToBin(pMem);
    }
    if(FieldBits::NoField != (AccelerationDistributionFieldMask & whichField))
    {
        _sfAccelerationDistribution.copyToBin(pMem);
    }
}

void SurfaceParticleGeneratorBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (PositionVelocityDistributionFieldMask & whichField))
    {
        _sfPositionVelocityDistribution.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (NormalDistributionFieldMask & whichField))
    {
        _sfNormalDistribution.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ColorDistributionFieldMask & whichField))
    {
        _sfColorDistribution.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (TransparencyDistributionFieldMask & whichField))
    {
        _sfTransparencyDistribution.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (SizeDistributionFieldMask & whichField))
    {
        _sfSizeDistribution.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (LifespanDistributionFieldMask & whichField))
    {
        _sfLifespanDistribution.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (AgeDistributionFieldMask & whichField))
    {
        _sfAgeDistribution.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (SpeedDistributionFieldMask & whichField))
    {
        _sfSpeedDistribution.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (AccelerationDistributionFieldMask & whichField))
    {
        _sfAccelerationDistribution.copyFromBin(pMem);
    }
}

//! create a new instance of the class
SurfaceParticleGeneratorTransitPtr SurfaceParticleGeneratorBase::createLocal(BitVector bFlags)
{
    SurfaceParticleGeneratorTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyLocal(bFlags);

        fc = dynamic_pointer_cast<SurfaceParticleGenerator>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class, copy the container flags
SurfaceParticleGeneratorTransitPtr SurfaceParticleGeneratorBase::createDependent(BitVector bFlags)
{
    SurfaceParticleGeneratorTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyDependent(bFlags);

        fc = dynamic_pointer_cast<SurfaceParticleGenerator>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class
SurfaceParticleGeneratorTransitPtr SurfaceParticleGeneratorBase::create(void)
{
    SurfaceParticleGeneratorTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopy();

        fc = dynamic_pointer_cast<SurfaceParticleGenerator>(tmpPtr);
    }

    return fc;
}

SurfaceParticleGenerator *SurfaceParticleGeneratorBase::createEmptyLocal(BitVector bFlags)
{
    SurfaceParticleGenerator *returnValue;

    newPtr<SurfaceParticleGenerator>(returnValue, bFlags);

    returnValue->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

//! create an empty new instance of the class, do not copy the prototype
SurfaceParticleGenerator *SurfaceParticleGeneratorBase::createEmpty(void)
{
    SurfaceParticleGenerator *returnValue;

    newPtr<SurfaceParticleGenerator>(returnValue, Thread::getCurrentLocalFlags());

    returnValue->_pFieldFlags->_bNamespaceMask &=
        ~Thread::getCurrentLocalFlags();

    return returnValue;
}


FieldContainerTransitPtr SurfaceParticleGeneratorBase::shallowCopyLocal(
    BitVector bFlags) const
{
    SurfaceParticleGenerator *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const SurfaceParticleGenerator *>(this), bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

FieldContainerTransitPtr SurfaceParticleGeneratorBase::shallowCopyDependent(
    BitVector bFlags) const
{
    SurfaceParticleGenerator *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const SurfaceParticleGenerator *>(this), ~bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask = bFlags;

    return returnValue;
}

FieldContainerTransitPtr SurfaceParticleGeneratorBase::shallowCopy(void) const
{
    SurfaceParticleGenerator *tmpPtr;

    newPtr(tmpPtr,
           dynamic_cast<const SurfaceParticleGenerator *>(this),
           Thread::getCurrentLocalFlags());

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~Thread::getCurrentLocalFlags();

    FieldContainerTransitPtr returnValue(tmpPtr);

    return returnValue;
}




/*------------------------- constructors ----------------------------------*/

SurfaceParticleGeneratorBase::SurfaceParticleGeneratorBase(void) :
    Inherited(),
    _sfPositionVelocityDistribution(NULL),
    _sfNormalDistribution     (NULL),
    _sfColorDistribution      (NULL),
    _sfTransparencyDistribution(NULL),
    _sfSizeDistribution       (NULL),
    _sfLifespanDistribution   (NULL),
    _sfAgeDistribution        (NULL),
    _sfSpeedDistribution      (NULL),
    _sfAccelerationDistribution(NULL)
{
}

SurfaceParticleGeneratorBase::SurfaceParticleGeneratorBase(const SurfaceParticleGeneratorBase &source) :
    Inherited(source),
    _sfPositionVelocityDistribution(NULL),
    _sfNormalDistribution     (NULL),
    _sfColorDistribution      (NULL),
    _sfTransparencyDistribution(NULL),
    _sfSizeDistribution       (NULL),
    _sfLifespanDistribution   (NULL),
    _sfAgeDistribution        (NULL),
    _sfSpeedDistribution      (NULL),
    _sfAccelerationDistribution(NULL)
{
}


/*-------------------------- destructors ----------------------------------*/

SurfaceParticleGeneratorBase::~SurfaceParticleGeneratorBase(void)
{
}

void SurfaceParticleGeneratorBase::onCreate(const SurfaceParticleGenerator *source)
{
    Inherited::onCreate(source);

    if(source != NULL)
    {
        SurfaceParticleGenerator *pThis = static_cast<SurfaceParticleGenerator *>(this);

        pThis->setPositionVelocityDistribution(source->getPositionVelocityDistribution());

        pThis->setNormalDistribution(source->getNormalDistribution());

        pThis->setColorDistribution(source->getColorDistribution());

        pThis->setTransparencyDistribution(source->getTransparencyDistribution());

        pThis->setSizeDistribution(source->getSizeDistribution());

        pThis->setLifespanDistribution(source->getLifespanDistribution());

        pThis->setAgeDistribution(source->getAgeDistribution());

        pThis->setSpeedDistribution(source->getSpeedDistribution());

        pThis->setAccelerationDistribution(source->getAccelerationDistribution());
    }
}

GetFieldHandlePtr SurfaceParticleGeneratorBase::getHandlePositionVelocityDistribution (void) const
{
    SFUnrecGeoSurfaceDistribution3DPtr::GetHandlePtr returnValue(
        new  SFUnrecGeoSurfaceDistribution3DPtr::GetHandle(
             &_sfPositionVelocityDistribution,
             this->getType().getFieldDesc(PositionVelocityDistributionFieldId),
             const_cast<SurfaceParticleGeneratorBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr SurfaceParticleGeneratorBase::editHandlePositionVelocityDistribution(void)
{
    SFUnrecGeoSurfaceDistribution3DPtr::EditHandlePtr returnValue(
        new  SFUnrecGeoSurfaceDistribution3DPtr::EditHandle(
             &_sfPositionVelocityDistribution,
             this->getType().getFieldDesc(PositionVelocityDistributionFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&SurfaceParticleGenerator::setPositionVelocityDistribution,
                    static_cast<SurfaceParticleGenerator *>(this), _1));

    editSField(PositionVelocityDistributionFieldMask);

    return returnValue;
}

GetFieldHandlePtr SurfaceParticleGeneratorBase::getHandleNormalDistribution (void) const
{
    SFUnrecDistribution3DPtr::GetHandlePtr returnValue(
        new  SFUnrecDistribution3DPtr::GetHandle(
             &_sfNormalDistribution,
             this->getType().getFieldDesc(NormalDistributionFieldId),
             const_cast<SurfaceParticleGeneratorBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr SurfaceParticleGeneratorBase::editHandleNormalDistribution(void)
{
    SFUnrecDistribution3DPtr::EditHandlePtr returnValue(
        new  SFUnrecDistribution3DPtr::EditHandle(
             &_sfNormalDistribution,
             this->getType().getFieldDesc(NormalDistributionFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&SurfaceParticleGenerator::setNormalDistribution,
                    static_cast<SurfaceParticleGenerator *>(this), _1));

    editSField(NormalDistributionFieldMask);

    return returnValue;
}

GetFieldHandlePtr SurfaceParticleGeneratorBase::getHandleColorDistribution (void) const
{
    SFUnrecDistribution3DPtr::GetHandlePtr returnValue(
        new  SFUnrecDistribution3DPtr::GetHandle(
             &_sfColorDistribution,
             this->getType().getFieldDesc(ColorDistributionFieldId),
             const_cast<SurfaceParticleGeneratorBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr SurfaceParticleGeneratorBase::editHandleColorDistribution(void)
{
    SFUnrecDistribution3DPtr::EditHandlePtr returnValue(
        new  SFUnrecDistribution3DPtr::EditHandle(
             &_sfColorDistribution,
             this->getType().getFieldDesc(ColorDistributionFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&SurfaceParticleGenerator::setColorDistribution,
                    static_cast<SurfaceParticleGenerator *>(this), _1));

    editSField(ColorDistributionFieldMask);

    return returnValue;
}

GetFieldHandlePtr SurfaceParticleGeneratorBase::getHandleTransparencyDistribution (void) const
{
    SFUnrecDistribution1DPtr::GetHandlePtr returnValue(
        new  SFUnrecDistribution1DPtr::GetHandle(
             &_sfTransparencyDistribution,
             this->getType().getFieldDesc(TransparencyDistributionFieldId),
             const_cast<SurfaceParticleGeneratorBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr SurfaceParticleGeneratorBase::editHandleTransparencyDistribution(void)
{
    SFUnrecDistribution1DPtr::EditHandlePtr returnValue(
        new  SFUnrecDistribution1DPtr::EditHandle(
             &_sfTransparencyDistribution,
             this->getType().getFieldDesc(TransparencyDistributionFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&SurfaceParticleGenerator::setTransparencyDistribution,
                    static_cast<SurfaceParticleGenerator *>(this), _1));

    editSField(TransparencyDistributionFieldMask);

    return returnValue;
}

GetFieldHandlePtr SurfaceParticleGeneratorBase::getHandleSizeDistribution (void) const
{
    SFUnrecDistribution3DPtr::GetHandlePtr returnValue(
        new  SFUnrecDistribution3DPtr::GetHandle(
             &_sfSizeDistribution,
             this->getType().getFieldDesc(SizeDistributionFieldId),
             const_cast<SurfaceParticleGeneratorBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr SurfaceParticleGeneratorBase::editHandleSizeDistribution(void)
{
    SFUnrecDistribution3DPtr::EditHandlePtr returnValue(
        new  SFUnrecDistribution3DPtr::EditHandle(
             &_sfSizeDistribution,
             this->getType().getFieldDesc(SizeDistributionFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&SurfaceParticleGenerator::setSizeDistribution,
                    static_cast<SurfaceParticleGenerator *>(this), _1));

    editSField(SizeDistributionFieldMask);

    return returnValue;
}

GetFieldHandlePtr SurfaceParticleGeneratorBase::getHandleLifespanDistribution (void) const
{
    SFUnrecDistribution1DPtr::GetHandlePtr returnValue(
        new  SFUnrecDistribution1DPtr::GetHandle(
             &_sfLifespanDistribution,
             this->getType().getFieldDesc(LifespanDistributionFieldId),
             const_cast<SurfaceParticleGeneratorBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr SurfaceParticleGeneratorBase::editHandleLifespanDistribution(void)
{
    SFUnrecDistribution1DPtr::EditHandlePtr returnValue(
        new  SFUnrecDistribution1DPtr::EditHandle(
             &_sfLifespanDistribution,
             this->getType().getFieldDesc(LifespanDistributionFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&SurfaceParticleGenerator::setLifespanDistribution,
                    static_cast<SurfaceParticleGenerator *>(this), _1));

    editSField(LifespanDistributionFieldMask);

    return returnValue;
}

GetFieldHandlePtr SurfaceParticleGeneratorBase::getHandleAgeDistribution (void) const
{
    SFUnrecDistribution1DPtr::GetHandlePtr returnValue(
        new  SFUnrecDistribution1DPtr::GetHandle(
             &_sfAgeDistribution,
             this->getType().getFieldDesc(AgeDistributionFieldId),
             const_cast<SurfaceParticleGeneratorBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr SurfaceParticleGeneratorBase::editHandleAgeDistribution(void)
{
    SFUnrecDistribution1DPtr::EditHandlePtr returnValue(
        new  SFUnrecDistribution1DPtr::EditHandle(
             &_sfAgeDistribution,
             this->getType().getFieldDesc(AgeDistributionFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&SurfaceParticleGenerator::setAgeDistribution,
                    static_cast<SurfaceParticleGenerator *>(this), _1));

    editSField(AgeDistributionFieldMask);

    return returnValue;
}

GetFieldHandlePtr SurfaceParticleGeneratorBase::getHandleSpeedDistribution (void) const
{
    SFUnrecDistribution1DPtr::GetHandlePtr returnValue(
        new  SFUnrecDistribution1DPtr::GetHandle(
             &_sfSpeedDistribution,
             this->getType().getFieldDesc(SpeedDistributionFieldId),
             const_cast<SurfaceParticleGeneratorBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr SurfaceParticleGeneratorBase::editHandleSpeedDistribution(void)
{
    SFUnrecDistribution1DPtr::EditHandlePtr returnValue(
        new  SFUnrecDistribution1DPtr::EditHandle(
             &_sfSpeedDistribution,
             this->getType().getFieldDesc(SpeedDistributionFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&SurfaceParticleGenerator::setSpeedDistribution,
                    static_cast<SurfaceParticleGenerator *>(this), _1));

    editSField(SpeedDistributionFieldMask);

    return returnValue;
}

GetFieldHandlePtr SurfaceParticleGeneratorBase::getHandleAccelerationDistribution (void) const
{
    SFUnrecDistribution3DPtr::GetHandlePtr returnValue(
        new  SFUnrecDistribution3DPtr::GetHandle(
             &_sfAccelerationDistribution,
             this->getType().getFieldDesc(AccelerationDistributionFieldId),
             const_cast<SurfaceParticleGeneratorBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr SurfaceParticleGeneratorBase::editHandleAccelerationDistribution(void)
{
    SFUnrecDistribution3DPtr::EditHandlePtr returnValue(
        new  SFUnrecDistribution3DPtr::EditHandle(
             &_sfAccelerationDistribution,
             this->getType().getFieldDesc(AccelerationDistributionFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&SurfaceParticleGenerator::setAccelerationDistribution,
                    static_cast<SurfaceParticleGenerator *>(this), _1));

    editSField(AccelerationDistributionFieldMask);

    return returnValue;
}


#ifdef OSG_MT_CPTR_ASPECT
void SurfaceParticleGeneratorBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    SurfaceParticleGenerator *pThis = static_cast<SurfaceParticleGenerator *>(this);

    pThis->execSync(static_cast<SurfaceParticleGenerator *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif


#ifdef OSG_MT_CPTR_ASPECT
FieldContainer *SurfaceParticleGeneratorBase::createAspectCopy(
    const FieldContainer *pRefAspect) const
{
    SurfaceParticleGenerator *returnValue;

    newAspectCopy(returnValue,
                  dynamic_cast<const SurfaceParticleGenerator *>(pRefAspect),
                  dynamic_cast<const SurfaceParticleGenerator *>(this));

    return returnValue;
}
#endif

void SurfaceParticleGeneratorBase::resolveLinks(void)
{
    Inherited::resolveLinks();

    static_cast<SurfaceParticleGenerator *>(this)->setPositionVelocityDistribution(NULL);

    static_cast<SurfaceParticleGenerator *>(this)->setNormalDistribution(NULL);

    static_cast<SurfaceParticleGenerator *>(this)->setColorDistribution(NULL);

    static_cast<SurfaceParticleGenerator *>(this)->setTransparencyDistribution(NULL);

    static_cast<SurfaceParticleGenerator *>(this)->setSizeDistribution(NULL);

    static_cast<SurfaceParticleGenerator *>(this)->setLifespanDistribution(NULL);

    static_cast<SurfaceParticleGenerator *>(this)->setAgeDistribution(NULL);

    static_cast<SurfaceParticleGenerator *>(this)->setSpeedDistribution(NULL);

    static_cast<SurfaceParticleGenerator *>(this)->setAccelerationDistribution(NULL);


}


OSG_END_NAMESPACE
