/*---------------------------------------------------------------------------*\
 *                     OpenSG ToolBox Particle System                        *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                         www.vrac.iastate.edu                              *
 *                                                                           *
 *                          Authors: David Kabala                            *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class SurfaceParticleGenerator!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#define OSG_COMPILESURFACEPARTICLEGENERATORINST

#include <stdlib.h>
#include <stdio.h>

#include <OpenSG/OSGConfig.h>

#include "OSGSurfaceParticleGeneratorBase.h"
#include "OSGSurfaceParticleGenerator.h"


OSG_BEGIN_NAMESPACE

const OSG::BitVector  SurfaceParticleGeneratorBase::PositionVelocityDistributionFieldMask = 
    (TypeTraits<BitVector>::One << SurfaceParticleGeneratorBase::PositionVelocityDistributionFieldId);

const OSG::BitVector  SurfaceParticleGeneratorBase::NormalDistributionFieldMask = 
    (TypeTraits<BitVector>::One << SurfaceParticleGeneratorBase::NormalDistributionFieldId);

const OSG::BitVector  SurfaceParticleGeneratorBase::ColorDistributionFieldMask = 
    (TypeTraits<BitVector>::One << SurfaceParticleGeneratorBase::ColorDistributionFieldId);

const OSG::BitVector  SurfaceParticleGeneratorBase::TransparencyDistributionFieldMask = 
    (TypeTraits<BitVector>::One << SurfaceParticleGeneratorBase::TransparencyDistributionFieldId);

const OSG::BitVector  SurfaceParticleGeneratorBase::SizeDistributionFieldMask = 
    (TypeTraits<BitVector>::One << SurfaceParticleGeneratorBase::SizeDistributionFieldId);

const OSG::BitVector  SurfaceParticleGeneratorBase::LifespanDistributionFieldMask = 
    (TypeTraits<BitVector>::One << SurfaceParticleGeneratorBase::LifespanDistributionFieldId);

const OSG::BitVector  SurfaceParticleGeneratorBase::AgeDistributionFieldMask = 
    (TypeTraits<BitVector>::One << SurfaceParticleGeneratorBase::AgeDistributionFieldId);

const OSG::BitVector  SurfaceParticleGeneratorBase::SpeedDistributionFieldMask = 
    (TypeTraits<BitVector>::One << SurfaceParticleGeneratorBase::SpeedDistributionFieldId);

const OSG::BitVector  SurfaceParticleGeneratorBase::AccelerationDistributionFieldMask = 
    (TypeTraits<BitVector>::One << SurfaceParticleGeneratorBase::AccelerationDistributionFieldId);

const OSG::BitVector SurfaceParticleGeneratorBase::MTInfluenceMask = 
    (Inherited::MTInfluenceMask) | 
    (static_cast<BitVector>(0x0) << Inherited::NextFieldId); 


// Field descriptions

/*! \var GeoSurfaceDistribution3DPtr SurfaceParticleGeneratorBase::_sfPositionVelocityDistribution
    
*/
/*! \var Distribution3DPtr SurfaceParticleGeneratorBase::_sfNormalDistribution
    
*/
/*! \var Distribution3DPtr SurfaceParticleGeneratorBase::_sfColorDistribution
    
*/
/*! \var Distribution1DPtr SurfaceParticleGeneratorBase::_sfTransparencyDistribution
    
*/
/*! \var Distribution3DPtr SurfaceParticleGeneratorBase::_sfSizeDistribution
    
*/
/*! \var Distribution1DPtr SurfaceParticleGeneratorBase::_sfLifespanDistribution
    
*/
/*! \var Distribution1DPtr SurfaceParticleGeneratorBase::_sfAgeDistribution
    
*/
/*! \var Distribution1DPtr SurfaceParticleGeneratorBase::_sfSpeedDistribution
    
*/
/*! \var Distribution3DPtr SurfaceParticleGeneratorBase::_sfAccelerationDistribution
    
*/

//! SurfaceParticleGenerator description

FieldDescription *SurfaceParticleGeneratorBase::_desc[] = 
{
    new FieldDescription(SFGeoSurfaceDistribution3DPtr::getClassType(), 
                     "PositionVelocityDistribution", 
                     PositionVelocityDistributionFieldId, PositionVelocityDistributionFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&SurfaceParticleGeneratorBase::editSFPositionVelocityDistribution)),
    new FieldDescription(SFDistribution3DPtr::getClassType(), 
                     "NormalDistribution", 
                     NormalDistributionFieldId, NormalDistributionFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&SurfaceParticleGeneratorBase::editSFNormalDistribution)),
    new FieldDescription(SFDistribution3DPtr::getClassType(), 
                     "ColorDistribution", 
                     ColorDistributionFieldId, ColorDistributionFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&SurfaceParticleGeneratorBase::editSFColorDistribution)),
    new FieldDescription(SFDistribution1DPtr::getClassType(), 
                     "TransparencyDistribution", 
                     TransparencyDistributionFieldId, TransparencyDistributionFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&SurfaceParticleGeneratorBase::editSFTransparencyDistribution)),
    new FieldDescription(SFDistribution3DPtr::getClassType(), 
                     "SizeDistribution", 
                     SizeDistributionFieldId, SizeDistributionFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&SurfaceParticleGeneratorBase::editSFSizeDistribution)),
    new FieldDescription(SFDistribution1DPtr::getClassType(), 
                     "LifespanDistribution", 
                     LifespanDistributionFieldId, LifespanDistributionFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&SurfaceParticleGeneratorBase::editSFLifespanDistribution)),
    new FieldDescription(SFDistribution1DPtr::getClassType(), 
                     "AgeDistribution", 
                     AgeDistributionFieldId, AgeDistributionFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&SurfaceParticleGeneratorBase::editSFAgeDistribution)),
    new FieldDescription(SFDistribution1DPtr::getClassType(), 
                     "SpeedDistribution", 
                     SpeedDistributionFieldId, SpeedDistributionFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&SurfaceParticleGeneratorBase::editSFSpeedDistribution)),
    new FieldDescription(SFDistribution3DPtr::getClassType(), 
                     "AccelerationDistribution", 
                     AccelerationDistributionFieldId, AccelerationDistributionFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&SurfaceParticleGeneratorBase::editSFAccelerationDistribution))
};


FieldContainerType SurfaceParticleGeneratorBase::_type(
    "SurfaceParticleGenerator",
    "ParticleGenerator",
    NULL,
    reinterpret_cast<PrototypeCreateF>(&SurfaceParticleGeneratorBase::createEmpty),
    SurfaceParticleGenerator::initMethod,
    _desc,
    sizeof(_desc));

//OSG_FIELD_CONTAINER_DEF(SurfaceParticleGeneratorBase, SurfaceParticleGeneratorPtr)

/*------------------------------ get -----------------------------------*/

FieldContainerType &SurfaceParticleGeneratorBase::getType(void) 
{
    return _type; 
} 

const FieldContainerType &SurfaceParticleGeneratorBase::getType(void) const 
{
    return _type;
} 


FieldContainerPtr SurfaceParticleGeneratorBase::shallowCopy(void) const 
{ 
    SurfaceParticleGeneratorPtr returnValue; 

    newPtr(returnValue, dynamic_cast<const SurfaceParticleGenerator *>(this)); 

    return returnValue; 
}

UInt32 SurfaceParticleGeneratorBase::getContainerSize(void) const 
{ 
    return sizeof(SurfaceParticleGenerator); 
}


#if !defined(OSG_FIXED_MFIELDSYNC)
void SurfaceParticleGeneratorBase::executeSync(      FieldContainer &other,
                                    const BitVector      &whichField)
{
    this->executeSyncImpl(static_cast<SurfaceParticleGeneratorBase *>(&other),
                          whichField);
}
#else
void SurfaceParticleGeneratorBase::executeSync(      FieldContainer &other,
                                    const BitVector      &whichField,                                    const SyncInfo       &sInfo     )
{
    this->executeSyncImpl((SurfaceParticleGeneratorBase *) &other, whichField, sInfo);
}
void SurfaceParticleGeneratorBase::execBeginEdit(const BitVector &whichField, 
                                            UInt32     uiAspect,
                                            UInt32     uiContainerSize) 
{
    this->execBeginEditImpl(whichField, uiAspect, uiContainerSize);
}

void SurfaceParticleGeneratorBase::onDestroyAspect(UInt32 uiId, UInt32 uiAspect)
{
    Inherited::onDestroyAspect(uiId, uiAspect);

}
#endif

/*------------------------- constructors ----------------------------------*/

#ifdef OSG_WIN32_ICL
#pragma warning (disable : 383)
#endif

SurfaceParticleGeneratorBase::SurfaceParticleGeneratorBase(void) :
    _sfPositionVelocityDistribution(GeoSurfaceDistribution3DPtr(NullFC)), 
    _sfNormalDistribution     (Distribution3DPtr(NullFC)), 
    _sfColorDistribution      (Distribution3DPtr(NullFC)), 
    _sfTransparencyDistribution(Distribution1DPtr(NullFC)), 
    _sfSizeDistribution       (Distribution3DPtr(NullFC)), 
    _sfLifespanDistribution   (Distribution1DPtr(NullFC)), 
    _sfAgeDistribution        (Distribution1DPtr(NullFC)), 
    _sfSpeedDistribution      (Distribution1DPtr(NullFC)), 
    _sfAccelerationDistribution(Distribution3DPtr(NullFC)), 
    Inherited() 
{
}

#ifdef OSG_WIN32_ICL
#pragma warning (default : 383)
#endif

SurfaceParticleGeneratorBase::SurfaceParticleGeneratorBase(const SurfaceParticleGeneratorBase &source) :
    _sfPositionVelocityDistribution(source._sfPositionVelocityDistribution), 
    _sfNormalDistribution     (source._sfNormalDistribution     ), 
    _sfColorDistribution      (source._sfColorDistribution      ), 
    _sfTransparencyDistribution(source._sfTransparencyDistribution), 
    _sfSizeDistribution       (source._sfSizeDistribution       ), 
    _sfLifespanDistribution   (source._sfLifespanDistribution   ), 
    _sfAgeDistribution        (source._sfAgeDistribution        ), 
    _sfSpeedDistribution      (source._sfSpeedDistribution      ), 
    _sfAccelerationDistribution(source._sfAccelerationDistribution), 
    Inherited                 (source)
{
}

/*-------------------------- destructors ----------------------------------*/

SurfaceParticleGeneratorBase::~SurfaceParticleGeneratorBase(void)
{
}

/*------------------------------ access -----------------------------------*/

UInt32 SurfaceParticleGeneratorBase::getBinSize(const BitVector &whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (PositionVelocityDistributionFieldMask & whichField))
    {
        returnValue += _sfPositionVelocityDistribution.getBinSize();
    }

    if(FieldBits::NoField != (NormalDistributionFieldMask & whichField))
    {
        returnValue += _sfNormalDistribution.getBinSize();
    }

    if(FieldBits::NoField != (ColorDistributionFieldMask & whichField))
    {
        returnValue += _sfColorDistribution.getBinSize();
    }

    if(FieldBits::NoField != (TransparencyDistributionFieldMask & whichField))
    {
        returnValue += _sfTransparencyDistribution.getBinSize();
    }

    if(FieldBits::NoField != (SizeDistributionFieldMask & whichField))
    {
        returnValue += _sfSizeDistribution.getBinSize();
    }

    if(FieldBits::NoField != (LifespanDistributionFieldMask & whichField))
    {
        returnValue += _sfLifespanDistribution.getBinSize();
    }

    if(FieldBits::NoField != (AgeDistributionFieldMask & whichField))
    {
        returnValue += _sfAgeDistribution.getBinSize();
    }

    if(FieldBits::NoField != (SpeedDistributionFieldMask & whichField))
    {
        returnValue += _sfSpeedDistribution.getBinSize();
    }

    if(FieldBits::NoField != (AccelerationDistributionFieldMask & whichField))
    {
        returnValue += _sfAccelerationDistribution.getBinSize();
    }


    return returnValue;
}

void SurfaceParticleGeneratorBase::copyToBin(      BinaryDataHandler &pMem,
                                  const BitVector         &whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (PositionVelocityDistributionFieldMask & whichField))
    {
        _sfPositionVelocityDistribution.copyToBin(pMem);
    }

    if(FieldBits::NoField != (NormalDistributionFieldMask & whichField))
    {
        _sfNormalDistribution.copyToBin(pMem);
    }

    if(FieldBits::NoField != (ColorDistributionFieldMask & whichField))
    {
        _sfColorDistribution.copyToBin(pMem);
    }

    if(FieldBits::NoField != (TransparencyDistributionFieldMask & whichField))
    {
        _sfTransparencyDistribution.copyToBin(pMem);
    }

    if(FieldBits::NoField != (SizeDistributionFieldMask & whichField))
    {
        _sfSizeDistribution.copyToBin(pMem);
    }

    if(FieldBits::NoField != (LifespanDistributionFieldMask & whichField))
    {
        _sfLifespanDistribution.copyToBin(pMem);
    }

    if(FieldBits::NoField != (AgeDistributionFieldMask & whichField))
    {
        _sfAgeDistribution.copyToBin(pMem);
    }

    if(FieldBits::NoField != (SpeedDistributionFieldMask & whichField))
    {
        _sfSpeedDistribution.copyToBin(pMem);
    }

    if(FieldBits::NoField != (AccelerationDistributionFieldMask & whichField))
    {
        _sfAccelerationDistribution.copyToBin(pMem);
    }


}

void SurfaceParticleGeneratorBase::copyFromBin(      BinaryDataHandler &pMem,
                                    const BitVector    &whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (PositionVelocityDistributionFieldMask & whichField))
    {
        _sfPositionVelocityDistribution.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (NormalDistributionFieldMask & whichField))
    {
        _sfNormalDistribution.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (ColorDistributionFieldMask & whichField))
    {
        _sfColorDistribution.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (TransparencyDistributionFieldMask & whichField))
    {
        _sfTransparencyDistribution.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (SizeDistributionFieldMask & whichField))
    {
        _sfSizeDistribution.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (LifespanDistributionFieldMask & whichField))
    {
        _sfLifespanDistribution.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (AgeDistributionFieldMask & whichField))
    {
        _sfAgeDistribution.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (SpeedDistributionFieldMask & whichField))
    {
        _sfSpeedDistribution.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (AccelerationDistributionFieldMask & whichField))
    {
        _sfAccelerationDistribution.copyFromBin(pMem);
    }


}

#if !defined(OSG_FIXED_MFIELDSYNC)
void SurfaceParticleGeneratorBase::executeSyncImpl(      SurfaceParticleGeneratorBase *pOther,
                                        const BitVector         &whichField)
{

    Inherited::executeSyncImpl(pOther, whichField);

    if(FieldBits::NoField != (PositionVelocityDistributionFieldMask & whichField))
        _sfPositionVelocityDistribution.syncWith(pOther->_sfPositionVelocityDistribution);

    if(FieldBits::NoField != (NormalDistributionFieldMask & whichField))
        _sfNormalDistribution.syncWith(pOther->_sfNormalDistribution);

    if(FieldBits::NoField != (ColorDistributionFieldMask & whichField))
        _sfColorDistribution.syncWith(pOther->_sfColorDistribution);

    if(FieldBits::NoField != (TransparencyDistributionFieldMask & whichField))
        _sfTransparencyDistribution.syncWith(pOther->_sfTransparencyDistribution);

    if(FieldBits::NoField != (SizeDistributionFieldMask & whichField))
        _sfSizeDistribution.syncWith(pOther->_sfSizeDistribution);

    if(FieldBits::NoField != (LifespanDistributionFieldMask & whichField))
        _sfLifespanDistribution.syncWith(pOther->_sfLifespanDistribution);

    if(FieldBits::NoField != (AgeDistributionFieldMask & whichField))
        _sfAgeDistribution.syncWith(pOther->_sfAgeDistribution);

    if(FieldBits::NoField != (SpeedDistributionFieldMask & whichField))
        _sfSpeedDistribution.syncWith(pOther->_sfSpeedDistribution);

    if(FieldBits::NoField != (AccelerationDistributionFieldMask & whichField))
        _sfAccelerationDistribution.syncWith(pOther->_sfAccelerationDistribution);


}
#else
void SurfaceParticleGeneratorBase::executeSyncImpl(      SurfaceParticleGeneratorBase *pOther,
                                        const BitVector         &whichField,
                                        const SyncInfo          &sInfo      )
{

    Inherited::executeSyncImpl(pOther, whichField, sInfo);

    if(FieldBits::NoField != (PositionVelocityDistributionFieldMask & whichField))
        _sfPositionVelocityDistribution.syncWith(pOther->_sfPositionVelocityDistribution);

    if(FieldBits::NoField != (NormalDistributionFieldMask & whichField))
        _sfNormalDistribution.syncWith(pOther->_sfNormalDistribution);

    if(FieldBits::NoField != (ColorDistributionFieldMask & whichField))
        _sfColorDistribution.syncWith(pOther->_sfColorDistribution);

    if(FieldBits::NoField != (TransparencyDistributionFieldMask & whichField))
        _sfTransparencyDistribution.syncWith(pOther->_sfTransparencyDistribution);

    if(FieldBits::NoField != (SizeDistributionFieldMask & whichField))
        _sfSizeDistribution.syncWith(pOther->_sfSizeDistribution);

    if(FieldBits::NoField != (LifespanDistributionFieldMask & whichField))
        _sfLifespanDistribution.syncWith(pOther->_sfLifespanDistribution);

    if(FieldBits::NoField != (AgeDistributionFieldMask & whichField))
        _sfAgeDistribution.syncWith(pOther->_sfAgeDistribution);

    if(FieldBits::NoField != (SpeedDistributionFieldMask & whichField))
        _sfSpeedDistribution.syncWith(pOther->_sfSpeedDistribution);

    if(FieldBits::NoField != (AccelerationDistributionFieldMask & whichField))
        _sfAccelerationDistribution.syncWith(pOther->_sfAccelerationDistribution);



}

void SurfaceParticleGeneratorBase::execBeginEditImpl (const BitVector &whichField, 
                                                 UInt32     uiAspect,
                                                 UInt32     uiContainerSize)
{
    Inherited::execBeginEditImpl(whichField, uiAspect, uiContainerSize);

}
#endif



OSG_END_NAMESPACE

#include <OpenSG/OSGSFieldTypeDef.inl>
#include <OpenSG/OSGMFieldTypeDef.inl>

OSG_BEGIN_NAMESPACE

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldDataTraits<SurfaceParticleGeneratorPtr>::_type("SurfaceParticleGeneratorPtr", "ParticleGeneratorPtr");
#endif

OSG_DLLEXPORT_SFIELD_DEF1(SurfaceParticleGeneratorPtr, OSG_PARTICLESYSTEMLIB_DLLTMPLMAPPING);
OSG_DLLEXPORT_MFIELD_DEF1(SurfaceParticleGeneratorPtr, OSG_PARTICLESYSTEMLIB_DLLTMPLMAPPING);


OSG_END_NAMESPACE

