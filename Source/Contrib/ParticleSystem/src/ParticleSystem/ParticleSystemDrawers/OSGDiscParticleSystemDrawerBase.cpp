/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact:  David Kabala (djkabala@gmail.com)                             *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class DiscParticleSystemDrawer!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>
#include <boost/assign/list_of.hpp>

#include "OSGConfig.h"




#include "OSGDiscParticleSystemDrawerBase.h"
#include "OSGDiscParticleSystemDrawer.h"

#include <boost/bind.hpp>

#ifdef WIN32 // turn off 'this' : used in base member initializer list warning
#pragma warning(disable:4355)
#endif

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::DiscParticleSystemDrawer
    
 */

/***************************************************************************\
 *                        Field Documentation                              *
\***************************************************************************/

/*! \var Real32          DiscParticleSystemDrawerBase::_sfRadius
    This value is used to scale the size of the particle and apply that size to the radius for that disc.
*/

/*! \var UInt32          DiscParticleSystemDrawerBase::_sfSegments
    The number of segments to use to render the disc.
*/

/*! \var UInt32          DiscParticleSystemDrawerBase::_sfNormalSource
    This enum is used to determine what is used for the direction of the line.
    NORMAL_POSITION_CHANGE uses the diference between Position and SecPosition.
    NORMAL_VELOCITY_CHANGE uses the difference between Velocity and SecVelocity.
    NORMAL_VELOCITY uses the velocity.
    NORMAL_ACCELERATION uses the acceleration.
    NORMAL_PARTICLE_NORMAL uses the normal of the particle.
    NORMAL_VIEW_DIRECTION uses the z axis of the view space.
    NORMAL_VIEW_POSITION uses the the direction from the particle to the view position.
    NORMAL_STATIC uses the normal of this drawer.
*/

/*! \var Vec3f           DiscParticleSystemDrawerBase::_sfNormal
    The direction to use as Normal when aligning particles.  This is only used if the NormalSource is STATIC.
*/

/*! \var UInt32          DiscParticleSystemDrawerBase::_sfUpSource
    This enum is used to determine what is used for the direction of the line.
    UP_POSITION_CHANGE uses the diference between Position and SecPosition.
    UP_VELOCITY_CHANGE uses the difference between Velocity and SecVelocity.
    UP_VELOCITY uses the velocity.
    UP_ACCELERATION uses the acceleration.
    UP_PARTICLE_NORMAL uses the normal of the particle.
    UP_VIEW_DIRECTION uses the y axis of the view space.
    UP_STATIC uses the normal of this drawer.
*/

/*! \var Vec3f           DiscParticleSystemDrawerBase::_sfUp
    The direction to use as Up when aligning particles.  This is only used if the UpSource is STATIC.
*/

/*! \var bool            DiscParticleSystemDrawerBase::_sfUseNormalAsObjectSpaceRotation
    
*/

/*! \var Real32          DiscParticleSystemDrawerBase::_sfCenterAlpha
    
*/

/*! \var Real32          DiscParticleSystemDrawerBase::_sfEdgeAlpha
    
*/


/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldTraits<DiscParticleSystemDrawer *>::_type("DiscParticleSystemDrawerPtr", "ParticleSystemDrawerPtr");
#endif

OSG_FIELDTRAITS_GETTYPE(DiscParticleSystemDrawer *)

OSG_EXPORT_PTR_SFIELD_FULL(PointerSField,
                           DiscParticleSystemDrawer *,
                           0);

OSG_EXPORT_PTR_MFIELD_FULL(PointerMField,
                           DiscParticleSystemDrawer *,
                           0);

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

void DiscParticleSystemDrawerBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new SFReal32::Description(
        SFReal32::getClassType(),
        "Radius",
        "This value is used to scale the size of the particle and apply that size to the radius for that disc.\n",
        RadiusFieldId, RadiusFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&DiscParticleSystemDrawer::editHandleRadius),
        static_cast<FieldGetMethodSig >(&DiscParticleSystemDrawer::getHandleRadius));

    oType.addInitialDesc(pDesc);


    pDesc = new SFUInt32::Description(
        SFUInt32::getClassType(),
        "Segments",
        "The number of segments to use to render the disc.\n",
        SegmentsFieldId, SegmentsFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&DiscParticleSystemDrawer::editHandleSegments),
        static_cast<FieldGetMethodSig >(&DiscParticleSystemDrawer::getHandleSegments));

    oType.addInitialDesc(pDesc);


    pDesc = new SFUInt32::Description(
        SFUInt32::getClassType(),
        "NormalSource",
        "This enum is used to determine what is used for the direction of the line.\n"
        "NORMAL_POSITION_CHANGE uses the diference between Position and SecPosition.\n"
        "NORMAL_VELOCITY_CHANGE uses the difference between Velocity and SecVelocity.\n"
        "NORMAL_VELOCITY uses the velocity.\n"
        "NORMAL_ACCELERATION uses the acceleration.\n"
        "NORMAL_PARTICLE_NORMAL uses the normal of the particle.\n"
        "NORMAL_VIEW_DIRECTION uses the z axis of the view space.\n"
        "NORMAL_VIEW_POSITION uses the the direction from the particle to the view position.\n"
        "NORMAL_STATIC uses the normal of this drawer.\n",
        NormalSourceFieldId, NormalSourceFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&DiscParticleSystemDrawer::editHandleNormalSource),
        static_cast<FieldGetMethodSig >(&DiscParticleSystemDrawer::getHandleNormalSource));

    oType.addInitialDesc(pDesc);


    pDesc = new SFVec3f::Description(
        SFVec3f::getClassType(),
        "Normal",
        "The direction to use as Normal when aligning particles.  This is only used if the NormalSource is STATIC.\n",
        NormalFieldId, NormalFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&DiscParticleSystemDrawer::editHandleNormal),
        static_cast<FieldGetMethodSig >(&DiscParticleSystemDrawer::getHandleNormal));

    oType.addInitialDesc(pDesc);


    pDesc = new SFUInt32::Description(
        SFUInt32::getClassType(),
        "UpSource",
        "This enum is used to determine what is used for the direction of the line.\n"
        "UP_POSITION_CHANGE uses the diference between Position and SecPosition.\n"
        "UP_VELOCITY_CHANGE uses the difference between Velocity and SecVelocity.\n"
        "UP_VELOCITY uses the velocity.\n"
        "UP_ACCELERATION uses the acceleration.\n"
        "UP_PARTICLE_NORMAL uses the normal of the particle.\n"
        "UP_VIEW_DIRECTION uses the y axis of the view space.\n"
        "UP_STATIC uses the normal of this drawer.\n",
        UpSourceFieldId, UpSourceFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&DiscParticleSystemDrawer::editHandleUpSource),
        static_cast<FieldGetMethodSig >(&DiscParticleSystemDrawer::getHandleUpSource));

    oType.addInitialDesc(pDesc);


    pDesc = new SFVec3f::Description(
        SFVec3f::getClassType(),
        "Up",
        "The direction to use as Up when aligning particles.  This is only used if the UpSource is STATIC.\n",
        UpFieldId, UpFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&DiscParticleSystemDrawer::editHandleUp),
        static_cast<FieldGetMethodSig >(&DiscParticleSystemDrawer::getHandleUp));

    oType.addInitialDesc(pDesc);


    pDesc = new SFBool::Description(
        SFBool::getClassType(),
        "UseNormalAsObjectSpaceRotation",
        "",
        UseNormalAsObjectSpaceRotationFieldId, UseNormalAsObjectSpaceRotationFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&DiscParticleSystemDrawer::editHandleUseNormalAsObjectSpaceRotation),
        static_cast<FieldGetMethodSig >(&DiscParticleSystemDrawer::getHandleUseNormalAsObjectSpaceRotation));

    oType.addInitialDesc(pDesc);


    pDesc = new SFReal32::Description(
        SFReal32::getClassType(),
        "CenterAlpha",
        "",
        CenterAlphaFieldId, CenterAlphaFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&DiscParticleSystemDrawer::editHandleCenterAlpha),
        static_cast<FieldGetMethodSig >(&DiscParticleSystemDrawer::getHandleCenterAlpha));

    oType.addInitialDesc(pDesc);


    pDesc = new SFReal32::Description(
        SFReal32::getClassType(),
        "EdgeAlpha",
        "",
        EdgeAlphaFieldId, EdgeAlphaFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&DiscParticleSystemDrawer::editHandleEdgeAlpha),
        static_cast<FieldGetMethodSig >(&DiscParticleSystemDrawer::getHandleEdgeAlpha));

    oType.addInitialDesc(pDesc);

}


DiscParticleSystemDrawerBase::TypeObject DiscParticleSystemDrawerBase::_type(
    DiscParticleSystemDrawerBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    0,
    reinterpret_cast<PrototypeCreateF>(&DiscParticleSystemDrawerBase::createEmptyLocal),
    DiscParticleSystemDrawer::initMethod,
    DiscParticleSystemDrawer::exitMethod,
    reinterpret_cast<InitalInsertDescFunc>(&DiscParticleSystemDrawer::classDescInserter),
    false,
    0,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "\tname=\"DiscParticleSystemDrawer\"\n"
    "\tparent=\"ParticleSystemDrawer\"\n"
    "    library=\"ContribParticleSystem\"\n"
    "    pointerfieldtypes=\"both\"\n"
    "\tstructure=\"concrete\"\n"
    "    systemcomponent=\"true\"\n"
    "    parentsystemcomponent=\"true\"\n"
    "    decoratable=\"false\"\n"
    "    useLocalIncludes=\"false\"\n"
    "    isNodeCore=\"false\"\n"
    "    authors=\"David Kabala (djkabala@gmail.com)                             \"\n"
    ">\n"
    "\t<Field\n"
    "\t\tname=\"Radius\"\n"
    "\t\ttype=\"Real32\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"0.5\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\tThis value is used to scale the size of the particle and apply that size to the radius for that disc.\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"Segments\"\n"
    "\t\ttype=\"UInt32\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"12\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\tThe number of segments to use to render the disc.\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"NormalSource\"\n"
    "\t\ttype=\"UInt32\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"DiscParticleSystemDrawer::NORMAL_VIEW_DIRECTION\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\tThis enum is used to determine what is used for the direction of the line.\n"
    "   NORMAL_POSITION_CHANGE uses the diference between Position and SecPosition.\n"
    "   NORMAL_VELOCITY_CHANGE uses the difference between Velocity and SecVelocity.\n"
    "   NORMAL_VELOCITY uses the velocity.\n"
    "   NORMAL_ACCELERATION uses the acceleration.\n"
    "   NORMAL_PARTICLE_NORMAL uses the normal of the particle.\n"
    "   NORMAL_VIEW_DIRECTION uses the z axis of the view space.\n"
    "   NORMAL_VIEW_POSITION uses the the direction from the particle to the view position.\n"
    "   NORMAL_STATIC uses the normal of this drawer.\n"
    "\t</Field>\n"
    "   <Field\n"
    "\t\tname=\"Normal\"\n"
    "\t\ttype=\"Vec3f\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"1.0,0.0,0.0\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "   The direction to use as Normal when aligning particles.  This is only used if the NormalSource is STATIC.\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"UpSource\"\n"
    "\t\ttype=\"UInt32\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"DiscParticleSystemDrawer::UP_VIEW_DIRECTION\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\tThis enum is used to determine what is used for the direction of the line.\n"
    "   UP_POSITION_CHANGE uses the diference between Position and SecPosition.\n"
    "   UP_VELOCITY_CHANGE uses the difference between Velocity and SecVelocity.\n"
    "   UP_VELOCITY uses the velocity.\n"
    "   UP_ACCELERATION uses the acceleration.\n"
    "   UP_PARTICLE_NORMAL uses the normal of the particle.\n"
    "   UP_VIEW_DIRECTION uses the y axis of the view space.\n"
    "   UP_STATIC uses the normal of this drawer.\n"
    "\t</Field>\n"
    "   <Field\n"
    "\t\tname=\"Up\"\n"
    "\t\ttype=\"Vec3f\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"0.0,1.0,0.0\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "   The direction to use as Up when aligning particles.  This is only used if the UpSource is STATIC.\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"UseNormalAsObjectSpaceRotation\"\n"
    "\t\ttype=\"bool\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"false\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"CenterAlpha\"\n"
    "\t\ttype=\"Real32\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"1.0\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"EdgeAlpha\"\n"
    "\t\ttype=\"Real32\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"1.0\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "</FieldContainer>\n",
    ""
    );


/*------------------------------ get -----------------------------------*/

FieldContainerType &DiscParticleSystemDrawerBase::getType(void)
{
    return _type;
}

const FieldContainerType &DiscParticleSystemDrawerBase::getType(void) const
{
    return _type;
}

UInt32 DiscParticleSystemDrawerBase::getContainerSize(void) const
{
    return sizeof(DiscParticleSystemDrawer);
}

/*------------------------- decorator get ------------------------------*/


SFReal32 *DiscParticleSystemDrawerBase::editSFRadius(void)
{
    editSField(RadiusFieldMask);

    return &_sfRadius;
}

const SFReal32 *DiscParticleSystemDrawerBase::getSFRadius(void) const
{
    return &_sfRadius;
}


SFUInt32 *DiscParticleSystemDrawerBase::editSFSegments(void)
{
    editSField(SegmentsFieldMask);

    return &_sfSegments;
}

const SFUInt32 *DiscParticleSystemDrawerBase::getSFSegments(void) const
{
    return &_sfSegments;
}


SFUInt32 *DiscParticleSystemDrawerBase::editSFNormalSource(void)
{
    editSField(NormalSourceFieldMask);

    return &_sfNormalSource;
}

const SFUInt32 *DiscParticleSystemDrawerBase::getSFNormalSource(void) const
{
    return &_sfNormalSource;
}


SFVec3f *DiscParticleSystemDrawerBase::editSFNormal(void)
{
    editSField(NormalFieldMask);

    return &_sfNormal;
}

const SFVec3f *DiscParticleSystemDrawerBase::getSFNormal(void) const
{
    return &_sfNormal;
}


SFUInt32 *DiscParticleSystemDrawerBase::editSFUpSource(void)
{
    editSField(UpSourceFieldMask);

    return &_sfUpSource;
}

const SFUInt32 *DiscParticleSystemDrawerBase::getSFUpSource(void) const
{
    return &_sfUpSource;
}


SFVec3f *DiscParticleSystemDrawerBase::editSFUp(void)
{
    editSField(UpFieldMask);

    return &_sfUp;
}

const SFVec3f *DiscParticleSystemDrawerBase::getSFUp(void) const
{
    return &_sfUp;
}


SFBool *DiscParticleSystemDrawerBase::editSFUseNormalAsObjectSpaceRotation(void)
{
    editSField(UseNormalAsObjectSpaceRotationFieldMask);

    return &_sfUseNormalAsObjectSpaceRotation;
}

const SFBool *DiscParticleSystemDrawerBase::getSFUseNormalAsObjectSpaceRotation(void) const
{
    return &_sfUseNormalAsObjectSpaceRotation;
}


SFReal32 *DiscParticleSystemDrawerBase::editSFCenterAlpha(void)
{
    editSField(CenterAlphaFieldMask);

    return &_sfCenterAlpha;
}

const SFReal32 *DiscParticleSystemDrawerBase::getSFCenterAlpha(void) const
{
    return &_sfCenterAlpha;
}


SFReal32 *DiscParticleSystemDrawerBase::editSFEdgeAlpha(void)
{
    editSField(EdgeAlphaFieldMask);

    return &_sfEdgeAlpha;
}

const SFReal32 *DiscParticleSystemDrawerBase::getSFEdgeAlpha(void) const
{
    return &_sfEdgeAlpha;
}






/*------------------------------ access -----------------------------------*/

UInt32 DiscParticleSystemDrawerBase::getBinSize(ConstFieldMaskArg whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (RadiusFieldMask & whichField))
    {
        returnValue += _sfRadius.getBinSize();
    }
    if(FieldBits::NoField != (SegmentsFieldMask & whichField))
    {
        returnValue += _sfSegments.getBinSize();
    }
    if(FieldBits::NoField != (NormalSourceFieldMask & whichField))
    {
        returnValue += _sfNormalSource.getBinSize();
    }
    if(FieldBits::NoField != (NormalFieldMask & whichField))
    {
        returnValue += _sfNormal.getBinSize();
    }
    if(FieldBits::NoField != (UpSourceFieldMask & whichField))
    {
        returnValue += _sfUpSource.getBinSize();
    }
    if(FieldBits::NoField != (UpFieldMask & whichField))
    {
        returnValue += _sfUp.getBinSize();
    }
    if(FieldBits::NoField != (UseNormalAsObjectSpaceRotationFieldMask & whichField))
    {
        returnValue += _sfUseNormalAsObjectSpaceRotation.getBinSize();
    }
    if(FieldBits::NoField != (CenterAlphaFieldMask & whichField))
    {
        returnValue += _sfCenterAlpha.getBinSize();
    }
    if(FieldBits::NoField != (EdgeAlphaFieldMask & whichField))
    {
        returnValue += _sfEdgeAlpha.getBinSize();
    }

    return returnValue;
}

void DiscParticleSystemDrawerBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (RadiusFieldMask & whichField))
    {
        _sfRadius.copyToBin(pMem);
    }
    if(FieldBits::NoField != (SegmentsFieldMask & whichField))
    {
        _sfSegments.copyToBin(pMem);
    }
    if(FieldBits::NoField != (NormalSourceFieldMask & whichField))
    {
        _sfNormalSource.copyToBin(pMem);
    }
    if(FieldBits::NoField != (NormalFieldMask & whichField))
    {
        _sfNormal.copyToBin(pMem);
    }
    if(FieldBits::NoField != (UpSourceFieldMask & whichField))
    {
        _sfUpSource.copyToBin(pMem);
    }
    if(FieldBits::NoField != (UpFieldMask & whichField))
    {
        _sfUp.copyToBin(pMem);
    }
    if(FieldBits::NoField != (UseNormalAsObjectSpaceRotationFieldMask & whichField))
    {
        _sfUseNormalAsObjectSpaceRotation.copyToBin(pMem);
    }
    if(FieldBits::NoField != (CenterAlphaFieldMask & whichField))
    {
        _sfCenterAlpha.copyToBin(pMem);
    }
    if(FieldBits::NoField != (EdgeAlphaFieldMask & whichField))
    {
        _sfEdgeAlpha.copyToBin(pMem);
    }
}

void DiscParticleSystemDrawerBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (RadiusFieldMask & whichField))
    {
        _sfRadius.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (SegmentsFieldMask & whichField))
    {
        _sfSegments.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (NormalSourceFieldMask & whichField))
    {
        _sfNormalSource.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (NormalFieldMask & whichField))
    {
        _sfNormal.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (UpSourceFieldMask & whichField))
    {
        _sfUpSource.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (UpFieldMask & whichField))
    {
        _sfUp.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (UseNormalAsObjectSpaceRotationFieldMask & whichField))
    {
        _sfUseNormalAsObjectSpaceRotation.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (CenterAlphaFieldMask & whichField))
    {
        _sfCenterAlpha.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (EdgeAlphaFieldMask & whichField))
    {
        _sfEdgeAlpha.copyFromBin(pMem);
    }
}

//! create a new instance of the class
DiscParticleSystemDrawerTransitPtr DiscParticleSystemDrawerBase::createLocal(BitVector bFlags)
{
    DiscParticleSystemDrawerTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyLocal(bFlags);

        fc = dynamic_pointer_cast<DiscParticleSystemDrawer>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class, copy the container flags
DiscParticleSystemDrawerTransitPtr DiscParticleSystemDrawerBase::createDependent(BitVector bFlags)
{
    DiscParticleSystemDrawerTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyDependent(bFlags);

        fc = dynamic_pointer_cast<DiscParticleSystemDrawer>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class
DiscParticleSystemDrawerTransitPtr DiscParticleSystemDrawerBase::create(void)
{
    DiscParticleSystemDrawerTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopy();

        fc = dynamic_pointer_cast<DiscParticleSystemDrawer>(tmpPtr);
    }

    return fc;
}

DiscParticleSystemDrawer *DiscParticleSystemDrawerBase::createEmptyLocal(BitVector bFlags)
{
    DiscParticleSystemDrawer *returnValue;

    newPtr<DiscParticleSystemDrawer>(returnValue, bFlags);

    returnValue->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

//! create an empty new instance of the class, do not copy the prototype
DiscParticleSystemDrawer *DiscParticleSystemDrawerBase::createEmpty(void)
{
    DiscParticleSystemDrawer *returnValue;

    newPtr<DiscParticleSystemDrawer>(returnValue, Thread::getCurrentLocalFlags());

    returnValue->_pFieldFlags->_bNamespaceMask &=
        ~Thread::getCurrentLocalFlags();

    return returnValue;
}


FieldContainerTransitPtr DiscParticleSystemDrawerBase::shallowCopyLocal(
    BitVector bFlags) const
{
    DiscParticleSystemDrawer *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const DiscParticleSystemDrawer *>(this), bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

FieldContainerTransitPtr DiscParticleSystemDrawerBase::shallowCopyDependent(
    BitVector bFlags) const
{
    DiscParticleSystemDrawer *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const DiscParticleSystemDrawer *>(this), ~bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask = bFlags;

    return returnValue;
}

FieldContainerTransitPtr DiscParticleSystemDrawerBase::shallowCopy(void) const
{
    DiscParticleSystemDrawer *tmpPtr;

    newPtr(tmpPtr,
           dynamic_cast<const DiscParticleSystemDrawer *>(this),
           Thread::getCurrentLocalFlags());

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~Thread::getCurrentLocalFlags();

    FieldContainerTransitPtr returnValue(tmpPtr);

    return returnValue;
}




/*------------------------- constructors ----------------------------------*/

DiscParticleSystemDrawerBase::DiscParticleSystemDrawerBase(void) :
    Inherited(),
    _sfRadius                 (Real32(0.5)),
    _sfSegments               (UInt32(12)),
    _sfNormalSource           (UInt32(DiscParticleSystemDrawer::NORMAL_VIEW_DIRECTION)),
    _sfNormal                 (Vec3f(1.0,0.0,0.0)),
    _sfUpSource               (UInt32(DiscParticleSystemDrawer::UP_VIEW_DIRECTION)),
    _sfUp                     (Vec3f(0.0,1.0,0.0)),
    _sfUseNormalAsObjectSpaceRotation(bool(false)),
    _sfCenterAlpha            (Real32(1.0)),
    _sfEdgeAlpha              (Real32(1.0))
{
}

DiscParticleSystemDrawerBase::DiscParticleSystemDrawerBase(const DiscParticleSystemDrawerBase &source) :
    Inherited(source),
    _sfRadius                 (source._sfRadius                 ),
    _sfSegments               (source._sfSegments               ),
    _sfNormalSource           (source._sfNormalSource           ),
    _sfNormal                 (source._sfNormal                 ),
    _sfUpSource               (source._sfUpSource               ),
    _sfUp                     (source._sfUp                     ),
    _sfUseNormalAsObjectSpaceRotation(source._sfUseNormalAsObjectSpaceRotation),
    _sfCenterAlpha            (source._sfCenterAlpha            ),
    _sfEdgeAlpha              (source._sfEdgeAlpha              )
{
}


/*-------------------------- destructors ----------------------------------*/

DiscParticleSystemDrawerBase::~DiscParticleSystemDrawerBase(void)
{
}


GetFieldHandlePtr DiscParticleSystemDrawerBase::getHandleRadius          (void) const
{
    SFReal32::GetHandlePtr returnValue(
        new  SFReal32::GetHandle(
             &_sfRadius,
             this->getType().getFieldDesc(RadiusFieldId),
             const_cast<DiscParticleSystemDrawerBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr DiscParticleSystemDrawerBase::editHandleRadius         (void)
{
    SFReal32::EditHandlePtr returnValue(
        new  SFReal32::EditHandle(
             &_sfRadius,
             this->getType().getFieldDesc(RadiusFieldId),
             this));


    editSField(RadiusFieldMask);

    return returnValue;
}

GetFieldHandlePtr DiscParticleSystemDrawerBase::getHandleSegments        (void) const
{
    SFUInt32::GetHandlePtr returnValue(
        new  SFUInt32::GetHandle(
             &_sfSegments,
             this->getType().getFieldDesc(SegmentsFieldId),
             const_cast<DiscParticleSystemDrawerBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr DiscParticleSystemDrawerBase::editHandleSegments       (void)
{
    SFUInt32::EditHandlePtr returnValue(
        new  SFUInt32::EditHandle(
             &_sfSegments,
             this->getType().getFieldDesc(SegmentsFieldId),
             this));


    editSField(SegmentsFieldMask);

    return returnValue;
}

GetFieldHandlePtr DiscParticleSystemDrawerBase::getHandleNormalSource    (void) const
{
    SFUInt32::GetHandlePtr returnValue(
        new  SFUInt32::GetHandle(
             &_sfNormalSource,
             this->getType().getFieldDesc(NormalSourceFieldId),
             const_cast<DiscParticleSystemDrawerBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr DiscParticleSystemDrawerBase::editHandleNormalSource   (void)
{
    SFUInt32::EditHandlePtr returnValue(
        new  SFUInt32::EditHandle(
             &_sfNormalSource,
             this->getType().getFieldDesc(NormalSourceFieldId),
             this));


    editSField(NormalSourceFieldMask);

    return returnValue;
}

GetFieldHandlePtr DiscParticleSystemDrawerBase::getHandleNormal          (void) const
{
    SFVec3f::GetHandlePtr returnValue(
        new  SFVec3f::GetHandle(
             &_sfNormal,
             this->getType().getFieldDesc(NormalFieldId),
             const_cast<DiscParticleSystemDrawerBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr DiscParticleSystemDrawerBase::editHandleNormal         (void)
{
    SFVec3f::EditHandlePtr returnValue(
        new  SFVec3f::EditHandle(
             &_sfNormal,
             this->getType().getFieldDesc(NormalFieldId),
             this));


    editSField(NormalFieldMask);

    return returnValue;
}

GetFieldHandlePtr DiscParticleSystemDrawerBase::getHandleUpSource        (void) const
{
    SFUInt32::GetHandlePtr returnValue(
        new  SFUInt32::GetHandle(
             &_sfUpSource,
             this->getType().getFieldDesc(UpSourceFieldId),
             const_cast<DiscParticleSystemDrawerBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr DiscParticleSystemDrawerBase::editHandleUpSource       (void)
{
    SFUInt32::EditHandlePtr returnValue(
        new  SFUInt32::EditHandle(
             &_sfUpSource,
             this->getType().getFieldDesc(UpSourceFieldId),
             this));


    editSField(UpSourceFieldMask);

    return returnValue;
}

GetFieldHandlePtr DiscParticleSystemDrawerBase::getHandleUp              (void) const
{
    SFVec3f::GetHandlePtr returnValue(
        new  SFVec3f::GetHandle(
             &_sfUp,
             this->getType().getFieldDesc(UpFieldId),
             const_cast<DiscParticleSystemDrawerBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr DiscParticleSystemDrawerBase::editHandleUp             (void)
{
    SFVec3f::EditHandlePtr returnValue(
        new  SFVec3f::EditHandle(
             &_sfUp,
             this->getType().getFieldDesc(UpFieldId),
             this));


    editSField(UpFieldMask);

    return returnValue;
}

GetFieldHandlePtr DiscParticleSystemDrawerBase::getHandleUseNormalAsObjectSpaceRotation (void) const
{
    SFBool::GetHandlePtr returnValue(
        new  SFBool::GetHandle(
             &_sfUseNormalAsObjectSpaceRotation,
             this->getType().getFieldDesc(UseNormalAsObjectSpaceRotationFieldId),
             const_cast<DiscParticleSystemDrawerBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr DiscParticleSystemDrawerBase::editHandleUseNormalAsObjectSpaceRotation(void)
{
    SFBool::EditHandlePtr returnValue(
        new  SFBool::EditHandle(
             &_sfUseNormalAsObjectSpaceRotation,
             this->getType().getFieldDesc(UseNormalAsObjectSpaceRotationFieldId),
             this));


    editSField(UseNormalAsObjectSpaceRotationFieldMask);

    return returnValue;
}

GetFieldHandlePtr DiscParticleSystemDrawerBase::getHandleCenterAlpha     (void) const
{
    SFReal32::GetHandlePtr returnValue(
        new  SFReal32::GetHandle(
             &_sfCenterAlpha,
             this->getType().getFieldDesc(CenterAlphaFieldId),
             const_cast<DiscParticleSystemDrawerBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr DiscParticleSystemDrawerBase::editHandleCenterAlpha    (void)
{
    SFReal32::EditHandlePtr returnValue(
        new  SFReal32::EditHandle(
             &_sfCenterAlpha,
             this->getType().getFieldDesc(CenterAlphaFieldId),
             this));


    editSField(CenterAlphaFieldMask);

    return returnValue;
}

GetFieldHandlePtr DiscParticleSystemDrawerBase::getHandleEdgeAlpha       (void) const
{
    SFReal32::GetHandlePtr returnValue(
        new  SFReal32::GetHandle(
             &_sfEdgeAlpha,
             this->getType().getFieldDesc(EdgeAlphaFieldId),
             const_cast<DiscParticleSystemDrawerBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr DiscParticleSystemDrawerBase::editHandleEdgeAlpha      (void)
{
    SFReal32::EditHandlePtr returnValue(
        new  SFReal32::EditHandle(
             &_sfEdgeAlpha,
             this->getType().getFieldDesc(EdgeAlphaFieldId),
             this));


    editSField(EdgeAlphaFieldMask);

    return returnValue;
}


#ifdef OSG_MT_CPTR_ASPECT
void DiscParticleSystemDrawerBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    DiscParticleSystemDrawer *pThis = static_cast<DiscParticleSystemDrawer *>(this);

    pThis->execSync(static_cast<DiscParticleSystemDrawer *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif


#ifdef OSG_MT_CPTR_ASPECT
FieldContainer *DiscParticleSystemDrawerBase::createAspectCopy(
    const FieldContainer *pRefAspect) const
{
    DiscParticleSystemDrawer *returnValue;

    newAspectCopy(returnValue,
                  dynamic_cast<const DiscParticleSystemDrawer *>(pRefAspect),
                  dynamic_cast<const DiscParticleSystemDrawer *>(this));

    return returnValue;
}
#endif

void DiscParticleSystemDrawerBase::resolveLinks(void)
{
    Inherited::resolveLinks();


}


OSG_END_NAMESPACE
