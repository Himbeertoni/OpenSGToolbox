/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *   contact:  David Kabala (djkabala@gmail.com)                             *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class DiscParticleSystemDrawer!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

OSG_BEGIN_NAMESPACE


//! access the type of the class
inline
OSG::FieldContainerType &DiscParticleSystemDrawerBase::getClassType(void)
{
    return _type;
}

//! access the numerical type of the class
inline
OSG::UInt32 DiscParticleSystemDrawerBase::getClassTypeId(void)
{
    return _type.getId();
}

inline
OSG::UInt16 DiscParticleSystemDrawerBase::getClassGroupId(void)
{
    return _type.getGroupId();
}

/*------------------------------ get -----------------------------------*/

//! Get the value of the DiscParticleSystemDrawer::_sfRadius field.

inline
Real32 &DiscParticleSystemDrawerBase::editRadius(void)
{
    editSField(RadiusFieldMask);

    return _sfRadius.getValue();
}

//! Get the value of the DiscParticleSystemDrawer::_sfRadius field.
inline
      Real32  DiscParticleSystemDrawerBase::getRadius(void) const
{
    return _sfRadius.getValue();
}

//! Set the value of the DiscParticleSystemDrawer::_sfRadius field.
inline
void DiscParticleSystemDrawerBase::setRadius(const Real32 value)
{
    editSField(RadiusFieldMask);

    _sfRadius.setValue(value);
}
//! Get the value of the DiscParticleSystemDrawer::_sfSegments field.

inline
UInt32 &DiscParticleSystemDrawerBase::editSegments(void)
{
    editSField(SegmentsFieldMask);

    return _sfSegments.getValue();
}

//! Get the value of the DiscParticleSystemDrawer::_sfSegments field.
inline
      UInt32  DiscParticleSystemDrawerBase::getSegments(void) const
{
    return _sfSegments.getValue();
}

//! Set the value of the DiscParticleSystemDrawer::_sfSegments field.
inline
void DiscParticleSystemDrawerBase::setSegments(const UInt32 value)
{
    editSField(SegmentsFieldMask);

    _sfSegments.setValue(value);
}
//! Get the value of the DiscParticleSystemDrawer::_sfNormalSource field.

inline
UInt32 &DiscParticleSystemDrawerBase::editNormalSource(void)
{
    editSField(NormalSourceFieldMask);

    return _sfNormalSource.getValue();
}

//! Get the value of the DiscParticleSystemDrawer::_sfNormalSource field.
inline
      UInt32  DiscParticleSystemDrawerBase::getNormalSource(void) const
{
    return _sfNormalSource.getValue();
}

//! Set the value of the DiscParticleSystemDrawer::_sfNormalSource field.
inline
void DiscParticleSystemDrawerBase::setNormalSource(const UInt32 value)
{
    editSField(NormalSourceFieldMask);

    _sfNormalSource.setValue(value);
}
//! Get the value of the DiscParticleSystemDrawer::_sfNormal field.

inline
Vec3f &DiscParticleSystemDrawerBase::editNormal(void)
{
    editSField(NormalFieldMask);

    return _sfNormal.getValue();
}

//! Get the value of the DiscParticleSystemDrawer::_sfNormal field.
inline
const Vec3f &DiscParticleSystemDrawerBase::getNormal(void) const
{
    return _sfNormal.getValue();
}

//! Set the value of the DiscParticleSystemDrawer::_sfNormal field.
inline
void DiscParticleSystemDrawerBase::setNormal(const Vec3f &value)
{
    editSField(NormalFieldMask);

    _sfNormal.setValue(value);
}
//! Get the value of the DiscParticleSystemDrawer::_sfUpSource field.

inline
UInt32 &DiscParticleSystemDrawerBase::editUpSource(void)
{
    editSField(UpSourceFieldMask);

    return _sfUpSource.getValue();
}

//! Get the value of the DiscParticleSystemDrawer::_sfUpSource field.
inline
      UInt32  DiscParticleSystemDrawerBase::getUpSource(void) const
{
    return _sfUpSource.getValue();
}

//! Set the value of the DiscParticleSystemDrawer::_sfUpSource field.
inline
void DiscParticleSystemDrawerBase::setUpSource(const UInt32 value)
{
    editSField(UpSourceFieldMask);

    _sfUpSource.setValue(value);
}
//! Get the value of the DiscParticleSystemDrawer::_sfUp field.

inline
Vec3f &DiscParticleSystemDrawerBase::editUp(void)
{
    editSField(UpFieldMask);

    return _sfUp.getValue();
}

//! Get the value of the DiscParticleSystemDrawer::_sfUp field.
inline
const Vec3f &DiscParticleSystemDrawerBase::getUp(void) const
{
    return _sfUp.getValue();
}

//! Set the value of the DiscParticleSystemDrawer::_sfUp field.
inline
void DiscParticleSystemDrawerBase::setUp(const Vec3f &value)
{
    editSField(UpFieldMask);

    _sfUp.setValue(value);
}
//! Get the value of the DiscParticleSystemDrawer::_sfUseNormalAsObjectSpaceRotation field.

inline
bool &DiscParticleSystemDrawerBase::editUseNormalAsObjectSpaceRotation(void)
{
    editSField(UseNormalAsObjectSpaceRotationFieldMask);

    return _sfUseNormalAsObjectSpaceRotation.getValue();
}

//! Get the value of the DiscParticleSystemDrawer::_sfUseNormalAsObjectSpaceRotation field.
inline
      bool  DiscParticleSystemDrawerBase::getUseNormalAsObjectSpaceRotation(void) const
{
    return _sfUseNormalAsObjectSpaceRotation.getValue();
}

//! Set the value of the DiscParticleSystemDrawer::_sfUseNormalAsObjectSpaceRotation field.
inline
void DiscParticleSystemDrawerBase::setUseNormalAsObjectSpaceRotation(const bool value)
{
    editSField(UseNormalAsObjectSpaceRotationFieldMask);

    _sfUseNormalAsObjectSpaceRotation.setValue(value);
}
//! Get the value of the DiscParticleSystemDrawer::_sfCenterAlpha field.

inline
Real32 &DiscParticleSystemDrawerBase::editCenterAlpha(void)
{
    editSField(CenterAlphaFieldMask);

    return _sfCenterAlpha.getValue();
}

//! Get the value of the DiscParticleSystemDrawer::_sfCenterAlpha field.
inline
      Real32  DiscParticleSystemDrawerBase::getCenterAlpha(void) const
{
    return _sfCenterAlpha.getValue();
}

//! Set the value of the DiscParticleSystemDrawer::_sfCenterAlpha field.
inline
void DiscParticleSystemDrawerBase::setCenterAlpha(const Real32 value)
{
    editSField(CenterAlphaFieldMask);

    _sfCenterAlpha.setValue(value);
}
//! Get the value of the DiscParticleSystemDrawer::_sfEdgeAlpha field.

inline
Real32 &DiscParticleSystemDrawerBase::editEdgeAlpha(void)
{
    editSField(EdgeAlphaFieldMask);

    return _sfEdgeAlpha.getValue();
}

//! Get the value of the DiscParticleSystemDrawer::_sfEdgeAlpha field.
inline
      Real32  DiscParticleSystemDrawerBase::getEdgeAlpha(void) const
{
    return _sfEdgeAlpha.getValue();
}

//! Set the value of the DiscParticleSystemDrawer::_sfEdgeAlpha field.
inline
void DiscParticleSystemDrawerBase::setEdgeAlpha(const Real32 value)
{
    editSField(EdgeAlphaFieldMask);

    _sfEdgeAlpha.setValue(value);
}


#ifdef OSG_MT_CPTR_ASPECT
inline
void DiscParticleSystemDrawerBase::execSync (      DiscParticleSystemDrawerBase *pFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    Inherited::execSync(pFrom, whichField, oOffsets, syncMode, uiSyncInfo);

    if(FieldBits::NoField != (RadiusFieldMask & whichField))
        _sfRadius.syncWith(pFrom->_sfRadius);

    if(FieldBits::NoField != (SegmentsFieldMask & whichField))
        _sfSegments.syncWith(pFrom->_sfSegments);

    if(FieldBits::NoField != (NormalSourceFieldMask & whichField))
        _sfNormalSource.syncWith(pFrom->_sfNormalSource);

    if(FieldBits::NoField != (NormalFieldMask & whichField))
        _sfNormal.syncWith(pFrom->_sfNormal);

    if(FieldBits::NoField != (UpSourceFieldMask & whichField))
        _sfUpSource.syncWith(pFrom->_sfUpSource);

    if(FieldBits::NoField != (UpFieldMask & whichField))
        _sfUp.syncWith(pFrom->_sfUp);

    if(FieldBits::NoField != (UseNormalAsObjectSpaceRotationFieldMask & whichField))
        _sfUseNormalAsObjectSpaceRotation.syncWith(pFrom->_sfUseNormalAsObjectSpaceRotation);

    if(FieldBits::NoField != (CenterAlphaFieldMask & whichField))
        _sfCenterAlpha.syncWith(pFrom->_sfCenterAlpha);

    if(FieldBits::NoField != (EdgeAlphaFieldMask & whichField))
        _sfEdgeAlpha.syncWith(pFrom->_sfEdgeAlpha);
}
#endif


inline
const Char8 *DiscParticleSystemDrawerBase::getClassname(void)
{
    return "DiscParticleSystemDrawer";
}
OSG_GEN_CONTAINERPTR(DiscParticleSystemDrawer);

OSG_END_NAMESPACE

