/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact:  David Kabala (djkabala@gmail.com), Daniel Guilliams           *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class ParticleSystemParticleTrailGenerator!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>
#include <boost/assign/list_of.hpp>

#include "OSGConfig.h"



#include "OSGParticleSystem.h"          // ParticleSystem Class
#include "OSGDistribution3D.h"          // VelocityDistribution Class
#include "OSGDistribution1D.h"          // TransparencyDistribution Class

#include "OSGParticleSystemParticleTrailGeneratorBase.h"
#include "OSGParticleSystemParticleTrailGenerator.h"

#include <boost/bind.hpp>

#ifdef WIN32 // turn off 'this' : used in base member initializer list warning
#pragma warning(disable:4355)
#endif

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::ParticleSystemParticleTrailGenerator
    
 */

/***************************************************************************\
 *                        Field Documentation                              *
\***************************************************************************/

/*! \var ParticleSystem * ParticleSystemParticleTrailGeneratorBase::_sfParticleSystem
    ParticleSystem that will contain the particles for a trail
*/

/*! \var Distribution3D * ParticleSystemParticleTrailGeneratorBase::_sfVelocityDistribution
    Velocity Distribution of the particle trail sections
*/

/*! \var Distribution3D * ParticleSystemParticleTrailGeneratorBase::_sfNormalDistribution
    Normal Distribution of the particle trail sections
*/

/*! \var Distribution3D * ParticleSystemParticleTrailGeneratorBase::_sfColorDistribution
    Color Distribution of the particle trail sections
*/

/*! \var Distribution1D * ParticleSystemParticleTrailGeneratorBase::_sfTransparencyDistribution
    Transparency Distribution of the particle trail sections
*/

/*! \var Distribution3D * ParticleSystemParticleTrailGeneratorBase::_sfSizeDistribution
    Size Distribution of the particle trail sections
*/

/*! \var Distribution3D * ParticleSystemParticleTrailGeneratorBase::_sfAccelerationDistribution
    Acceleration Distribution of the particle trail sections
*/

/*! \var Real32          ParticleSystemParticleTrailGeneratorBase::_sfVelocityMultiplier
    Multiplier for the velocity of the trails.
*/

/*! \var UInt32          ParticleSystemParticleTrailGeneratorBase::_sfVelocitySource
    The source for the trail particles' velocity.
    DISTRIBUTION - velocity generated from the VelocityDistribution field
    PARENT_PARTICLE - velocity from the parent particle used (the particle this trail is generated form)
    BLEND - The average between DISTRIBUTION and PARENT_PARTICLE is used
*/


/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldTraits<ParticleSystemParticleTrailGenerator *>::_type("ParticleSystemParticleTrailGeneratorPtr", "ParticleTrailGeneratorPtr");
#endif

OSG_FIELDTRAITS_GETTYPE(ParticleSystemParticleTrailGenerator *)

OSG_EXPORT_PTR_SFIELD_FULL(PointerSField,
                           ParticleSystemParticleTrailGenerator *,
                           0);

OSG_EXPORT_PTR_MFIELD_FULL(PointerMField,
                           ParticleSystemParticleTrailGenerator *,
                           0);

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

void ParticleSystemParticleTrailGeneratorBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new SFUnrecParticleSystemPtr::Description(
        SFUnrecParticleSystemPtr::getClassType(),
        "ParticleSystem",
        "ParticleSystem that will contain the particles for a trail\n",
        ParticleSystemFieldId, ParticleSystemFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&ParticleSystemParticleTrailGenerator::editHandleParticleSystem),
        static_cast<FieldGetMethodSig >(&ParticleSystemParticleTrailGenerator::getHandleParticleSystem));

    oType.addInitialDesc(pDesc);


    pDesc = new SFUnrecDistribution3DPtr::Description(
        SFUnrecDistribution3DPtr::getClassType(),
        "VelocityDistribution",
        "Velocity Distribution of the particle trail sections\n",
        VelocityDistributionFieldId, VelocityDistributionFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&ParticleSystemParticleTrailGenerator::editHandleVelocityDistribution),
        static_cast<FieldGetMethodSig >(&ParticleSystemParticleTrailGenerator::getHandleVelocityDistribution));

    oType.addInitialDesc(pDesc);


    pDesc = new SFUnrecDistribution3DPtr::Description(
        SFUnrecDistribution3DPtr::getClassType(),
        "NormalDistribution",
        "Normal Distribution of the particle trail sections\n",
        NormalDistributionFieldId, NormalDistributionFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&ParticleSystemParticleTrailGenerator::editHandleNormalDistribution),
        static_cast<FieldGetMethodSig >(&ParticleSystemParticleTrailGenerator::getHandleNormalDistribution));

    oType.addInitialDesc(pDesc);


    pDesc = new SFUnrecDistribution3DPtr::Description(
        SFUnrecDistribution3DPtr::getClassType(),
        "ColorDistribution",
        "Color Distribution of the particle trail sections\n",
        ColorDistributionFieldId, ColorDistributionFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&ParticleSystemParticleTrailGenerator::editHandleColorDistribution),
        static_cast<FieldGetMethodSig >(&ParticleSystemParticleTrailGenerator::getHandleColorDistribution));

    oType.addInitialDesc(pDesc);


    pDesc = new SFUnrecDistribution1DPtr::Description(
        SFUnrecDistribution1DPtr::getClassType(),
        "TransparencyDistribution",
        "Transparency Distribution of the particle trail sections\n",
        TransparencyDistributionFieldId, TransparencyDistributionFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&ParticleSystemParticleTrailGenerator::editHandleTransparencyDistribution),
        static_cast<FieldGetMethodSig >(&ParticleSystemParticleTrailGenerator::getHandleTransparencyDistribution));

    oType.addInitialDesc(pDesc);


    pDesc = new SFUnrecDistribution3DPtr::Description(
        SFUnrecDistribution3DPtr::getClassType(),
        "SizeDistribution",
        "Size Distribution of the particle trail sections\n",
        SizeDistributionFieldId, SizeDistributionFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&ParticleSystemParticleTrailGenerator::editHandleSizeDistribution),
        static_cast<FieldGetMethodSig >(&ParticleSystemParticleTrailGenerator::getHandleSizeDistribution));

    oType.addInitialDesc(pDesc);


    pDesc = new SFUnrecDistribution3DPtr::Description(
        SFUnrecDistribution3DPtr::getClassType(),
        "AccelerationDistribution",
        "Acceleration Distribution of the particle trail sections\n",
        AccelerationDistributionFieldId, AccelerationDistributionFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&ParticleSystemParticleTrailGenerator::editHandleAccelerationDistribution),
        static_cast<FieldGetMethodSig >(&ParticleSystemParticleTrailGenerator::getHandleAccelerationDistribution));

    oType.addInitialDesc(pDesc);


    pDesc = new SFReal32::Description(
        SFReal32::getClassType(),
        "VelocityMultiplier",
        "Multiplier for the velocity of the trails.\n",
        VelocityMultiplierFieldId, VelocityMultiplierFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&ParticleSystemParticleTrailGenerator::editHandleVelocityMultiplier),
        static_cast<FieldGetMethodSig >(&ParticleSystemParticleTrailGenerator::getHandleVelocityMultiplier));

    oType.addInitialDesc(pDesc);


    pDesc = new SFUInt32::Description(
        SFUInt32::getClassType(),
        "VelocitySource",
        "The source for the trail particles' velocity.\n"
        "DISTRIBUTION - velocity generated from the VelocityDistribution field\n"
        "PARENT_PARTICLE - velocity from the parent particle used (the particle this trail is generated form)\n"
        "BLEND - The average between DISTRIBUTION and PARENT_PARTICLE is used\n",
        VelocitySourceFieldId, VelocitySourceFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&ParticleSystemParticleTrailGenerator::editHandleVelocitySource),
        static_cast<FieldGetMethodSig >(&ParticleSystemParticleTrailGenerator::getHandleVelocitySource));

    oType.addInitialDesc(pDesc);

}


ParticleSystemParticleTrailGeneratorBase::TypeObject ParticleSystemParticleTrailGeneratorBase::_type(
    ParticleSystemParticleTrailGeneratorBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    0,
    reinterpret_cast<PrototypeCreateF>(&ParticleSystemParticleTrailGeneratorBase::createEmptyLocal),
    ParticleSystemParticleTrailGenerator::initMethod,
    ParticleSystemParticleTrailGenerator::exitMethod,
    reinterpret_cast<InitalInsertDescFunc>(&ParticleSystemParticleTrailGenerator::classDescInserter),
    false,
    0,
    "<?xml version=\"1.0\"?>\n"
    "<FieldContainer\n"
    "\tname=\"ParticleSystemParticleTrailGenerator\"\n"
    "\tparent=\"ParticleTrailGenerator\"\n"
    "    library=\"ContribParticleTrail\"\n"
    "    pointerfieldtypes=\"both\"\n"
    "\tstructure=\"concrete\"\n"
    "    systemcomponent=\"true\"\n"
    "    parentsystemcomponent=\"true\"\n"
    "    decoratable=\"false\"\n"
    "    useLocalIncludes=\"false\"\n"
    "    isNodeCore=\"false\"\n"
    "    authors=\"David Kabala (djkabala@gmail.com), Daniel Guilliams           \"\n"
    ">\n"
    "\t<Field\n"
    "\t\tname=\"ParticleSystem\"\n"
    "\t\ttype=\"ParticleSystem\"\n"
    "        category=\"pointer\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t\tdefaultValue=\"NULL\"\n"
    "\t>\n"
    "\tParticleSystem that will contain the particles for a trail\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"VelocityDistribution\"\n"
    "\t\ttype=\"Distribution3D\"\n"
    "        category=\"pointer\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t\tdefaultValue=\"NULL\"\n"
    "\t>\n"
    "\tVelocity Distribution of the particle trail sections\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"NormalDistribution\"\n"
    "\t\ttype=\"Distribution3D\"\n"
    "        category=\"pointer\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t\tdefaultValue=\"NULL\"\n"
    "\t>\n"
    "\tNormal Distribution of the particle trail sections\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"ColorDistribution\"\n"
    "\t\ttype=\"Distribution3D\"\n"
    "        category=\"pointer\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t\tdefaultValue=\"NULL\"\n"
    "\t>\n"
    "\tColor Distribution of the particle trail sections\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"TransparencyDistribution\"\n"
    "\t\ttype=\"Distribution1D\"\n"
    "        category=\"pointer\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t\tdefaultValue=\"NULL\"\n"
    "\t>\n"
    "\tTransparency Distribution of the particle trail sections\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"SizeDistribution\"\n"
    "\t\ttype=\"Distribution3D\"\n"
    "        category=\"pointer\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t\tdefaultValue=\"NULL\"\n"
    "\t>\n"
    "\tSize Distribution of the particle trail sections\n"
    "\t</Field>\n"
    "\t\t<Field\n"
    "\t\tname=\"AccelerationDistribution\"\n"
    "\t\ttype=\"Distribution3D\"\n"
    "        category=\"pointer\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t\tdefaultValue=\"NULL\"\n"
    "\t>\n"
    "\tAcceleration Distribution of the particle trail sections\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"VelocityMultiplier\"\n"
    "\t\ttype=\"Real32\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"1.0\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\tMultiplier for the velocity of the trails.\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"VelocitySource\"\n"
    "\t\ttype=\"UInt32\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t\tdefaultValue=\"ParticleSystemParticleTrailGenerator::DISTRIBUTION\"\n"
    "\t>\n"
    "\tThe source for the trail particles' velocity.\n"
    "\tDISTRIBUTION - velocity generated from the VelocityDistribution field\n"
    "\tPARENT_PARTICLE - velocity from the parent particle used (the particle this trail is generated form)\n"
    "\tBLEND - The average between DISTRIBUTION and PARENT_PARTICLE is used\n"
    "\t</Field>\n"
    "</FieldContainer>\n",
    ""
    );


/*------------------------------ get -----------------------------------*/

FieldContainerType &ParticleSystemParticleTrailGeneratorBase::getType(void)
{
    return _type;
}

const FieldContainerType &ParticleSystemParticleTrailGeneratorBase::getType(void) const
{
    return _type;
}

UInt32 ParticleSystemParticleTrailGeneratorBase::getContainerSize(void) const
{
    return sizeof(ParticleSystemParticleTrailGenerator);
}

/*------------------------- decorator get ------------------------------*/


//! Get the ParticleSystemParticleTrailGenerator::_sfParticleSystem field.
const SFUnrecParticleSystemPtr *ParticleSystemParticleTrailGeneratorBase::getSFParticleSystem(void) const
{
    return &_sfParticleSystem;
}

SFUnrecParticleSystemPtr *ParticleSystemParticleTrailGeneratorBase::editSFParticleSystem (void)
{
    editSField(ParticleSystemFieldMask);

    return &_sfParticleSystem;
}

//! Get the ParticleSystemParticleTrailGenerator::_sfVelocityDistribution field.
const SFUnrecDistribution3DPtr *ParticleSystemParticleTrailGeneratorBase::getSFVelocityDistribution(void) const
{
    return &_sfVelocityDistribution;
}

SFUnrecDistribution3DPtr *ParticleSystemParticleTrailGeneratorBase::editSFVelocityDistribution(void)
{
    editSField(VelocityDistributionFieldMask);

    return &_sfVelocityDistribution;
}

//! Get the ParticleSystemParticleTrailGenerator::_sfNormalDistribution field.
const SFUnrecDistribution3DPtr *ParticleSystemParticleTrailGeneratorBase::getSFNormalDistribution(void) const
{
    return &_sfNormalDistribution;
}

SFUnrecDistribution3DPtr *ParticleSystemParticleTrailGeneratorBase::editSFNormalDistribution(void)
{
    editSField(NormalDistributionFieldMask);

    return &_sfNormalDistribution;
}

//! Get the ParticleSystemParticleTrailGenerator::_sfColorDistribution field.
const SFUnrecDistribution3DPtr *ParticleSystemParticleTrailGeneratorBase::getSFColorDistribution(void) const
{
    return &_sfColorDistribution;
}

SFUnrecDistribution3DPtr *ParticleSystemParticleTrailGeneratorBase::editSFColorDistribution(void)
{
    editSField(ColorDistributionFieldMask);

    return &_sfColorDistribution;
}

//! Get the ParticleSystemParticleTrailGenerator::_sfTransparencyDistribution field.
const SFUnrecDistribution1DPtr *ParticleSystemParticleTrailGeneratorBase::getSFTransparencyDistribution(void) const
{
    return &_sfTransparencyDistribution;
}

SFUnrecDistribution1DPtr *ParticleSystemParticleTrailGeneratorBase::editSFTransparencyDistribution(void)
{
    editSField(TransparencyDistributionFieldMask);

    return &_sfTransparencyDistribution;
}

//! Get the ParticleSystemParticleTrailGenerator::_sfSizeDistribution field.
const SFUnrecDistribution3DPtr *ParticleSystemParticleTrailGeneratorBase::getSFSizeDistribution(void) const
{
    return &_sfSizeDistribution;
}

SFUnrecDistribution3DPtr *ParticleSystemParticleTrailGeneratorBase::editSFSizeDistribution(void)
{
    editSField(SizeDistributionFieldMask);

    return &_sfSizeDistribution;
}

//! Get the ParticleSystemParticleTrailGenerator::_sfAccelerationDistribution field.
const SFUnrecDistribution3DPtr *ParticleSystemParticleTrailGeneratorBase::getSFAccelerationDistribution(void) const
{
    return &_sfAccelerationDistribution;
}

SFUnrecDistribution3DPtr *ParticleSystemParticleTrailGeneratorBase::editSFAccelerationDistribution(void)
{
    editSField(AccelerationDistributionFieldMask);

    return &_sfAccelerationDistribution;
}

SFReal32 *ParticleSystemParticleTrailGeneratorBase::editSFVelocityMultiplier(void)
{
    editSField(VelocityMultiplierFieldMask);

    return &_sfVelocityMultiplier;
}

const SFReal32 *ParticleSystemParticleTrailGeneratorBase::getSFVelocityMultiplier(void) const
{
    return &_sfVelocityMultiplier;
}


SFUInt32 *ParticleSystemParticleTrailGeneratorBase::editSFVelocitySource(void)
{
    editSField(VelocitySourceFieldMask);

    return &_sfVelocitySource;
}

const SFUInt32 *ParticleSystemParticleTrailGeneratorBase::getSFVelocitySource(void) const
{
    return &_sfVelocitySource;
}






/*------------------------------ access -----------------------------------*/

UInt32 ParticleSystemParticleTrailGeneratorBase::getBinSize(ConstFieldMaskArg whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (ParticleSystemFieldMask & whichField))
    {
        returnValue += _sfParticleSystem.getBinSize();
    }
    if(FieldBits::NoField != (VelocityDistributionFieldMask & whichField))
    {
        returnValue += _sfVelocityDistribution.getBinSize();
    }
    if(FieldBits::NoField != (NormalDistributionFieldMask & whichField))
    {
        returnValue += _sfNormalDistribution.getBinSize();
    }
    if(FieldBits::NoField != (ColorDistributionFieldMask & whichField))
    {
        returnValue += _sfColorDistribution.getBinSize();
    }
    if(FieldBits::NoField != (TransparencyDistributionFieldMask & whichField))
    {
        returnValue += _sfTransparencyDistribution.getBinSize();
    }
    if(FieldBits::NoField != (SizeDistributionFieldMask & whichField))
    {
        returnValue += _sfSizeDistribution.getBinSize();
    }
    if(FieldBits::NoField != (AccelerationDistributionFieldMask & whichField))
    {
        returnValue += _sfAccelerationDistribution.getBinSize();
    }
    if(FieldBits::NoField != (VelocityMultiplierFieldMask & whichField))
    {
        returnValue += _sfVelocityMultiplier.getBinSize();
    }
    if(FieldBits::NoField != (VelocitySourceFieldMask & whichField))
    {
        returnValue += _sfVelocitySource.getBinSize();
    }

    return returnValue;
}

void ParticleSystemParticleTrailGeneratorBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (ParticleSystemFieldMask & whichField))
    {
        _sfParticleSystem.copyToBin(pMem);
    }
    if(FieldBits::NoField != (VelocityDistributionFieldMask & whichField))
    {
        _sfVelocityDistribution.copyToBin(pMem);
    }
    if(FieldBits::NoField != (NormalDistributionFieldMask & whichField))
    {
        _sfNormalDistribution.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ColorDistributionFieldMask & whichField))
    {
        _sfColorDistribution.copyToBin(pMem);
    }
    if(FieldBits::NoField != (TransparencyDistributionFieldMask & whichField))
    {
        _sfTransparencyDistribution.copyToBin(pMem);
    }
    if(FieldBits::NoField != (SizeDistributionFieldMask & whichField))
    {
        _sfSizeDistribution.copyToBin(pMem);
    }
    if(FieldBits::NoField != (AccelerationDistributionFieldMask & whichField))
    {
        _sfAccelerationDistribution.copyToBin(pMem);
    }
    if(FieldBits::NoField != (VelocityMultiplierFieldMask & whichField))
    {
        _sfVelocityMultiplier.copyToBin(pMem);
    }
    if(FieldBits::NoField != (VelocitySourceFieldMask & whichField))
    {
        _sfVelocitySource.copyToBin(pMem);
    }
}

void ParticleSystemParticleTrailGeneratorBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (ParticleSystemFieldMask & whichField))
    {
        _sfParticleSystem.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (VelocityDistributionFieldMask & whichField))
    {
        _sfVelocityDistribution.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (NormalDistributionFieldMask & whichField))
    {
        _sfNormalDistribution.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ColorDistributionFieldMask & whichField))
    {
        _sfColorDistribution.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (TransparencyDistributionFieldMask & whichField))
    {
        _sfTransparencyDistribution.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (SizeDistributionFieldMask & whichField))
    {
        _sfSizeDistribution.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (AccelerationDistributionFieldMask & whichField))
    {
        _sfAccelerationDistribution.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (VelocityMultiplierFieldMask & whichField))
    {
        _sfVelocityMultiplier.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (VelocitySourceFieldMask & whichField))
    {
        _sfVelocitySource.copyFromBin(pMem);
    }
}

//! create a new instance of the class
ParticleSystemParticleTrailGeneratorTransitPtr ParticleSystemParticleTrailGeneratorBase::createLocal(BitVector bFlags)
{
    ParticleSystemParticleTrailGeneratorTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyLocal(bFlags);

        fc = dynamic_pointer_cast<ParticleSystemParticleTrailGenerator>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class, copy the container flags
ParticleSystemParticleTrailGeneratorTransitPtr ParticleSystemParticleTrailGeneratorBase::createDependent(BitVector bFlags)
{
    ParticleSystemParticleTrailGeneratorTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyDependent(bFlags);

        fc = dynamic_pointer_cast<ParticleSystemParticleTrailGenerator>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class
ParticleSystemParticleTrailGeneratorTransitPtr ParticleSystemParticleTrailGeneratorBase::create(void)
{
    ParticleSystemParticleTrailGeneratorTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopy();

        fc = dynamic_pointer_cast<ParticleSystemParticleTrailGenerator>(tmpPtr);
    }

    return fc;
}

ParticleSystemParticleTrailGenerator *ParticleSystemParticleTrailGeneratorBase::createEmptyLocal(BitVector bFlags)
{
    ParticleSystemParticleTrailGenerator *returnValue;

    newPtr<ParticleSystemParticleTrailGenerator>(returnValue, bFlags);

    returnValue->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

//! create an empty new instance of the class, do not copy the prototype
ParticleSystemParticleTrailGenerator *ParticleSystemParticleTrailGeneratorBase::createEmpty(void)
{
    ParticleSystemParticleTrailGenerator *returnValue;

    newPtr<ParticleSystemParticleTrailGenerator>(returnValue, Thread::getCurrentLocalFlags());

    returnValue->_pFieldFlags->_bNamespaceMask &=
        ~Thread::getCurrentLocalFlags();

    return returnValue;
}


FieldContainerTransitPtr ParticleSystemParticleTrailGeneratorBase::shallowCopyLocal(
    BitVector bFlags) const
{
    ParticleSystemParticleTrailGenerator *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const ParticleSystemParticleTrailGenerator *>(this), bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

FieldContainerTransitPtr ParticleSystemParticleTrailGeneratorBase::shallowCopyDependent(
    BitVector bFlags) const
{
    ParticleSystemParticleTrailGenerator *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const ParticleSystemParticleTrailGenerator *>(this), ~bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask = bFlags;

    return returnValue;
}

FieldContainerTransitPtr ParticleSystemParticleTrailGeneratorBase::shallowCopy(void) const
{
    ParticleSystemParticleTrailGenerator *tmpPtr;

    newPtr(tmpPtr,
           dynamic_cast<const ParticleSystemParticleTrailGenerator *>(this),
           Thread::getCurrentLocalFlags());

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~Thread::getCurrentLocalFlags();

    FieldContainerTransitPtr returnValue(tmpPtr);

    return returnValue;
}




/*------------------------- constructors ----------------------------------*/

ParticleSystemParticleTrailGeneratorBase::ParticleSystemParticleTrailGeneratorBase(void) :
    Inherited(),
    _sfParticleSystem         (NULL),
    _sfVelocityDistribution   (NULL),
    _sfNormalDistribution     (NULL),
    _sfColorDistribution      (NULL),
    _sfTransparencyDistribution(NULL),
    _sfSizeDistribution       (NULL),
    _sfAccelerationDistribution(NULL),
    _sfVelocityMultiplier     (Real32(1.0)),
    _sfVelocitySource         (UInt32(ParticleSystemParticleTrailGenerator::DISTRIBUTION))
{
}

ParticleSystemParticleTrailGeneratorBase::ParticleSystemParticleTrailGeneratorBase(const ParticleSystemParticleTrailGeneratorBase &source) :
    Inherited(source),
    _sfParticleSystem         (NULL),
    _sfVelocityDistribution   (NULL),
    _sfNormalDistribution     (NULL),
    _sfColorDistribution      (NULL),
    _sfTransparencyDistribution(NULL),
    _sfSizeDistribution       (NULL),
    _sfAccelerationDistribution(NULL),
    _sfVelocityMultiplier     (source._sfVelocityMultiplier     ),
    _sfVelocitySource         (source._sfVelocitySource         )
{
}


/*-------------------------- destructors ----------------------------------*/

ParticleSystemParticleTrailGeneratorBase::~ParticleSystemParticleTrailGeneratorBase(void)
{
}

void ParticleSystemParticleTrailGeneratorBase::onCreate(const ParticleSystemParticleTrailGenerator *source)
{
    Inherited::onCreate(source);

    if(source != NULL)
    {
        ParticleSystemParticleTrailGenerator *pThis = static_cast<ParticleSystemParticleTrailGenerator *>(this);

        pThis->setParticleSystem(source->getParticleSystem());

        pThis->setVelocityDistribution(source->getVelocityDistribution());

        pThis->setNormalDistribution(source->getNormalDistribution());

        pThis->setColorDistribution(source->getColorDistribution());

        pThis->setTransparencyDistribution(source->getTransparencyDistribution());

        pThis->setSizeDistribution(source->getSizeDistribution());

        pThis->setAccelerationDistribution(source->getAccelerationDistribution());
    }
}

GetFieldHandlePtr ParticleSystemParticleTrailGeneratorBase::getHandleParticleSystem  (void) const
{
    SFUnrecParticleSystemPtr::GetHandlePtr returnValue(
        new  SFUnrecParticleSystemPtr::GetHandle(
             &_sfParticleSystem,
             this->getType().getFieldDesc(ParticleSystemFieldId),
             const_cast<ParticleSystemParticleTrailGeneratorBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ParticleSystemParticleTrailGeneratorBase::editHandleParticleSystem (void)
{
    SFUnrecParticleSystemPtr::EditHandlePtr returnValue(
        new  SFUnrecParticleSystemPtr::EditHandle(
             &_sfParticleSystem,
             this->getType().getFieldDesc(ParticleSystemFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&ParticleSystemParticleTrailGenerator::setParticleSystem,
                    static_cast<ParticleSystemParticleTrailGenerator *>(this), _1));

    editSField(ParticleSystemFieldMask);

    return returnValue;
}

GetFieldHandlePtr ParticleSystemParticleTrailGeneratorBase::getHandleVelocityDistribution (void) const
{
    SFUnrecDistribution3DPtr::GetHandlePtr returnValue(
        new  SFUnrecDistribution3DPtr::GetHandle(
             &_sfVelocityDistribution,
             this->getType().getFieldDesc(VelocityDistributionFieldId),
             const_cast<ParticleSystemParticleTrailGeneratorBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ParticleSystemParticleTrailGeneratorBase::editHandleVelocityDistribution(void)
{
    SFUnrecDistribution3DPtr::EditHandlePtr returnValue(
        new  SFUnrecDistribution3DPtr::EditHandle(
             &_sfVelocityDistribution,
             this->getType().getFieldDesc(VelocityDistributionFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&ParticleSystemParticleTrailGenerator::setVelocityDistribution,
                    static_cast<ParticleSystemParticleTrailGenerator *>(this), _1));

    editSField(VelocityDistributionFieldMask);

    return returnValue;
}

GetFieldHandlePtr ParticleSystemParticleTrailGeneratorBase::getHandleNormalDistribution (void) const
{
    SFUnrecDistribution3DPtr::GetHandlePtr returnValue(
        new  SFUnrecDistribution3DPtr::GetHandle(
             &_sfNormalDistribution,
             this->getType().getFieldDesc(NormalDistributionFieldId),
             const_cast<ParticleSystemParticleTrailGeneratorBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ParticleSystemParticleTrailGeneratorBase::editHandleNormalDistribution(void)
{
    SFUnrecDistribution3DPtr::EditHandlePtr returnValue(
        new  SFUnrecDistribution3DPtr::EditHandle(
             &_sfNormalDistribution,
             this->getType().getFieldDesc(NormalDistributionFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&ParticleSystemParticleTrailGenerator::setNormalDistribution,
                    static_cast<ParticleSystemParticleTrailGenerator *>(this), _1));

    editSField(NormalDistributionFieldMask);

    return returnValue;
}

GetFieldHandlePtr ParticleSystemParticleTrailGeneratorBase::getHandleColorDistribution (void) const
{
    SFUnrecDistribution3DPtr::GetHandlePtr returnValue(
        new  SFUnrecDistribution3DPtr::GetHandle(
             &_sfColorDistribution,
             this->getType().getFieldDesc(ColorDistributionFieldId),
             const_cast<ParticleSystemParticleTrailGeneratorBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ParticleSystemParticleTrailGeneratorBase::editHandleColorDistribution(void)
{
    SFUnrecDistribution3DPtr::EditHandlePtr returnValue(
        new  SFUnrecDistribution3DPtr::EditHandle(
             &_sfColorDistribution,
             this->getType().getFieldDesc(ColorDistributionFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&ParticleSystemParticleTrailGenerator::setColorDistribution,
                    static_cast<ParticleSystemParticleTrailGenerator *>(this), _1));

    editSField(ColorDistributionFieldMask);

    return returnValue;
}

GetFieldHandlePtr ParticleSystemParticleTrailGeneratorBase::getHandleTransparencyDistribution (void) const
{
    SFUnrecDistribution1DPtr::GetHandlePtr returnValue(
        new  SFUnrecDistribution1DPtr::GetHandle(
             &_sfTransparencyDistribution,
             this->getType().getFieldDesc(TransparencyDistributionFieldId),
             const_cast<ParticleSystemParticleTrailGeneratorBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ParticleSystemParticleTrailGeneratorBase::editHandleTransparencyDistribution(void)
{
    SFUnrecDistribution1DPtr::EditHandlePtr returnValue(
        new  SFUnrecDistribution1DPtr::EditHandle(
             &_sfTransparencyDistribution,
             this->getType().getFieldDesc(TransparencyDistributionFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&ParticleSystemParticleTrailGenerator::setTransparencyDistribution,
                    static_cast<ParticleSystemParticleTrailGenerator *>(this), _1));

    editSField(TransparencyDistributionFieldMask);

    return returnValue;
}

GetFieldHandlePtr ParticleSystemParticleTrailGeneratorBase::getHandleSizeDistribution (void) const
{
    SFUnrecDistribution3DPtr::GetHandlePtr returnValue(
        new  SFUnrecDistribution3DPtr::GetHandle(
             &_sfSizeDistribution,
             this->getType().getFieldDesc(SizeDistributionFieldId),
             const_cast<ParticleSystemParticleTrailGeneratorBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ParticleSystemParticleTrailGeneratorBase::editHandleSizeDistribution(void)
{
    SFUnrecDistribution3DPtr::EditHandlePtr returnValue(
        new  SFUnrecDistribution3DPtr::EditHandle(
             &_sfSizeDistribution,
             this->getType().getFieldDesc(SizeDistributionFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&ParticleSystemParticleTrailGenerator::setSizeDistribution,
                    static_cast<ParticleSystemParticleTrailGenerator *>(this), _1));

    editSField(SizeDistributionFieldMask);

    return returnValue;
}

GetFieldHandlePtr ParticleSystemParticleTrailGeneratorBase::getHandleAccelerationDistribution (void) const
{
    SFUnrecDistribution3DPtr::GetHandlePtr returnValue(
        new  SFUnrecDistribution3DPtr::GetHandle(
             &_sfAccelerationDistribution,
             this->getType().getFieldDesc(AccelerationDistributionFieldId),
             const_cast<ParticleSystemParticleTrailGeneratorBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ParticleSystemParticleTrailGeneratorBase::editHandleAccelerationDistribution(void)
{
    SFUnrecDistribution3DPtr::EditHandlePtr returnValue(
        new  SFUnrecDistribution3DPtr::EditHandle(
             &_sfAccelerationDistribution,
             this->getType().getFieldDesc(AccelerationDistributionFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&ParticleSystemParticleTrailGenerator::setAccelerationDistribution,
                    static_cast<ParticleSystemParticleTrailGenerator *>(this), _1));

    editSField(AccelerationDistributionFieldMask);

    return returnValue;
}

GetFieldHandlePtr ParticleSystemParticleTrailGeneratorBase::getHandleVelocityMultiplier (void) const
{
    SFReal32::GetHandlePtr returnValue(
        new  SFReal32::GetHandle(
             &_sfVelocityMultiplier,
             this->getType().getFieldDesc(VelocityMultiplierFieldId),
             const_cast<ParticleSystemParticleTrailGeneratorBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ParticleSystemParticleTrailGeneratorBase::editHandleVelocityMultiplier(void)
{
    SFReal32::EditHandlePtr returnValue(
        new  SFReal32::EditHandle(
             &_sfVelocityMultiplier,
             this->getType().getFieldDesc(VelocityMultiplierFieldId),
             this));


    editSField(VelocityMultiplierFieldMask);

    return returnValue;
}

GetFieldHandlePtr ParticleSystemParticleTrailGeneratorBase::getHandleVelocitySource  (void) const
{
    SFUInt32::GetHandlePtr returnValue(
        new  SFUInt32::GetHandle(
             &_sfVelocitySource,
             this->getType().getFieldDesc(VelocitySourceFieldId),
             const_cast<ParticleSystemParticleTrailGeneratorBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ParticleSystemParticleTrailGeneratorBase::editHandleVelocitySource (void)
{
    SFUInt32::EditHandlePtr returnValue(
        new  SFUInt32::EditHandle(
             &_sfVelocitySource,
             this->getType().getFieldDesc(VelocitySourceFieldId),
             this));


    editSField(VelocitySourceFieldMask);

    return returnValue;
}


#ifdef OSG_MT_CPTR_ASPECT
void ParticleSystemParticleTrailGeneratorBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    ParticleSystemParticleTrailGenerator *pThis = static_cast<ParticleSystemParticleTrailGenerator *>(this);

    pThis->execSync(static_cast<ParticleSystemParticleTrailGenerator *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif


#ifdef OSG_MT_CPTR_ASPECT
FieldContainer *ParticleSystemParticleTrailGeneratorBase::createAspectCopy(
    const FieldContainer *pRefAspect) const
{
    ParticleSystemParticleTrailGenerator *returnValue;

    newAspectCopy(returnValue,
                  dynamic_cast<const ParticleSystemParticleTrailGenerator *>(pRefAspect),
                  dynamic_cast<const ParticleSystemParticleTrailGenerator *>(this));

    return returnValue;
}
#endif

void ParticleSystemParticleTrailGeneratorBase::resolveLinks(void)
{
    Inherited::resolveLinks();

    static_cast<ParticleSystemParticleTrailGenerator *>(this)->setParticleSystem(NULL);

    static_cast<ParticleSystemParticleTrailGenerator *>(this)->setVelocityDistribution(NULL);

    static_cast<ParticleSystemParticleTrailGenerator *>(this)->setNormalDistribution(NULL);

    static_cast<ParticleSystemParticleTrailGenerator *>(this)->setColorDistribution(NULL);

    static_cast<ParticleSystemParticleTrailGenerator *>(this)->setTransparencyDistribution(NULL);

    static_cast<ParticleSystemParticleTrailGenerator *>(this)->setSizeDistribution(NULL);

    static_cast<ParticleSystemParticleTrailGenerator *>(this)->setAccelerationDistribution(NULL);


}


OSG_END_NAMESPACE
