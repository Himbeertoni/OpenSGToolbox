/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact:  David Kabala (djkabala@gmail.com), Daniel Guilliams           *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class SimpleParticleTrailGenerator!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>
#include <boost/assign/list_of.hpp>

#include "OSGConfig.h"




#include "OSGSimpleParticleTrailGeneratorBase.h"
#include "OSGSimpleParticleTrailGenerator.h"

#include <boost/bind.hpp>

#ifdef WIN32 // turn off 'this' : used in base member initializer list warning
#pragma warning(disable:4355)
#endif

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::SimpleParticleTrailGenerator
    
 */

/***************************************************************************\
 *                        Field Documentation                              *
\***************************************************************************/

/*! \var Real32          SimpleParticleTrailGeneratorBase::_sfResolution
    
*/

/*! \var UInt32          SimpleParticleTrailGeneratorBase::_sfDrawMethod
    The method used to draw the trails
    POINTS - trail will be drawn as a series of points (dots)
    LINES - trail will be drawn as a series of connected lines
*/


/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldTraits<SimpleParticleTrailGenerator *>::_type("SimpleParticleTrailGeneratorPtr", "ParticleTrailGeneratorPtr");
#endif

OSG_FIELDTRAITS_GETTYPE(SimpleParticleTrailGenerator *)

OSG_EXPORT_PTR_SFIELD_FULL(PointerSField,
                           SimpleParticleTrailGenerator *,
                           0);

OSG_EXPORT_PTR_MFIELD_FULL(PointerMField,
                           SimpleParticleTrailGenerator *,
                           0);

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

void SimpleParticleTrailGeneratorBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new SFReal32::Description(
        SFReal32::getClassType(),
        "Resolution",
        "",
        ResolutionFieldId, ResolutionFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&SimpleParticleTrailGenerator::editHandleResolution),
        static_cast<FieldGetMethodSig >(&SimpleParticleTrailGenerator::getHandleResolution));

    oType.addInitialDesc(pDesc);


    pDesc = new SFUInt32::Description(
        SFUInt32::getClassType(),
        "DrawMethod",
        "The method used to draw the trails\n"
        "POINTS - trail will be drawn as a series of points (dots)\n"
        "LINES - trail will be drawn as a series of connected lines\n",
        DrawMethodFieldId, DrawMethodFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&SimpleParticleTrailGenerator::editHandleDrawMethod),
        static_cast<FieldGetMethodSig >(&SimpleParticleTrailGenerator::getHandleDrawMethod));

    oType.addInitialDesc(pDesc);

}


SimpleParticleTrailGeneratorBase::TypeObject SimpleParticleTrailGeneratorBase::_type(
    SimpleParticleTrailGeneratorBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    0,
    reinterpret_cast<PrototypeCreateF>(&SimpleParticleTrailGeneratorBase::createEmptyLocal),
    SimpleParticleTrailGenerator::initMethod,
    SimpleParticleTrailGenerator::exitMethod,
    reinterpret_cast<InitalInsertDescFunc>(&SimpleParticleTrailGenerator::classDescInserter),
    false,
    0,
    "<?xml version=\"1.0\"?>\n"
    "<FieldContainer\n"
    "\tname=\"SimpleParticleTrailGenerator\"\n"
    "\tparent=\"ParticleTrailGenerator\"\n"
    "    library=\"ContribParticleTrail\"\n"
    "    pointerfieldtypes=\"both\"\n"
    "\tstructure=\"concrete\"\n"
    "    systemcomponent=\"true\"\n"
    "    parentsystemcomponent=\"true\"\n"
    "    decoratable=\"false\"\n"
    "    useLocalIncludes=\"false\"\n"
    "    isNodeCore=\"false\"\n"
    "    authors=\"David Kabala (djkabala@gmail.com), Daniel Guilliams           \"\n"
    ">\n"
    "\t<Field\n"
    "\t\tname=\"Resolution\"\n"
    "\t\ttype=\"Real32\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"3.0f\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"DrawMethod\"\n"
    "\t\ttype=\"UInt32\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t\tdefaultValue=\"SimpleParticleTrailGenerator::POINTS\"\n"
    "\t>\n"
    "\tThe method used to draw the trails\n"
    "\tPOINTS - trail will be drawn as a series of points (dots)\n"
    "\tLINES - trail will be drawn as a series of connected lines\n"
    "\t</Field>\n"
    "</FieldContainer>\n",
    ""
    );


/*------------------------------ get -----------------------------------*/

FieldContainerType &SimpleParticleTrailGeneratorBase::getType(void)
{
    return _type;
}

const FieldContainerType &SimpleParticleTrailGeneratorBase::getType(void) const
{
    return _type;
}

UInt32 SimpleParticleTrailGeneratorBase::getContainerSize(void) const
{
    return sizeof(SimpleParticleTrailGenerator);
}

/*------------------------- decorator get ------------------------------*/


SFReal32 *SimpleParticleTrailGeneratorBase::editSFResolution(void)
{
    editSField(ResolutionFieldMask);

    return &_sfResolution;
}

const SFReal32 *SimpleParticleTrailGeneratorBase::getSFResolution(void) const
{
    return &_sfResolution;
}


SFUInt32 *SimpleParticleTrailGeneratorBase::editSFDrawMethod(void)
{
    editSField(DrawMethodFieldMask);

    return &_sfDrawMethod;
}

const SFUInt32 *SimpleParticleTrailGeneratorBase::getSFDrawMethod(void) const
{
    return &_sfDrawMethod;
}






/*------------------------------ access -----------------------------------*/

UInt32 SimpleParticleTrailGeneratorBase::getBinSize(ConstFieldMaskArg whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (ResolutionFieldMask & whichField))
    {
        returnValue += _sfResolution.getBinSize();
    }
    if(FieldBits::NoField != (DrawMethodFieldMask & whichField))
    {
        returnValue += _sfDrawMethod.getBinSize();
    }

    return returnValue;
}

void SimpleParticleTrailGeneratorBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (ResolutionFieldMask & whichField))
    {
        _sfResolution.copyToBin(pMem);
    }
    if(FieldBits::NoField != (DrawMethodFieldMask & whichField))
    {
        _sfDrawMethod.copyToBin(pMem);
    }
}

void SimpleParticleTrailGeneratorBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (ResolutionFieldMask & whichField))
    {
        _sfResolution.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (DrawMethodFieldMask & whichField))
    {
        _sfDrawMethod.copyFromBin(pMem);
    }
}

//! create a new instance of the class
SimpleParticleTrailGeneratorTransitPtr SimpleParticleTrailGeneratorBase::createLocal(BitVector bFlags)
{
    SimpleParticleTrailGeneratorTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyLocal(bFlags);

        fc = dynamic_pointer_cast<SimpleParticleTrailGenerator>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class, copy the container flags
SimpleParticleTrailGeneratorTransitPtr SimpleParticleTrailGeneratorBase::createDependent(BitVector bFlags)
{
    SimpleParticleTrailGeneratorTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyDependent(bFlags);

        fc = dynamic_pointer_cast<SimpleParticleTrailGenerator>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class
SimpleParticleTrailGeneratorTransitPtr SimpleParticleTrailGeneratorBase::create(void)
{
    SimpleParticleTrailGeneratorTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopy();

        fc = dynamic_pointer_cast<SimpleParticleTrailGenerator>(tmpPtr);
    }

    return fc;
}

SimpleParticleTrailGenerator *SimpleParticleTrailGeneratorBase::createEmptyLocal(BitVector bFlags)
{
    SimpleParticleTrailGenerator *returnValue;

    newPtr<SimpleParticleTrailGenerator>(returnValue, bFlags);

    returnValue->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

//! create an empty new instance of the class, do not copy the prototype
SimpleParticleTrailGenerator *SimpleParticleTrailGeneratorBase::createEmpty(void)
{
    SimpleParticleTrailGenerator *returnValue;

    newPtr<SimpleParticleTrailGenerator>(returnValue, Thread::getCurrentLocalFlags());

    returnValue->_pFieldFlags->_bNamespaceMask &=
        ~Thread::getCurrentLocalFlags();

    return returnValue;
}


FieldContainerTransitPtr SimpleParticleTrailGeneratorBase::shallowCopyLocal(
    BitVector bFlags) const
{
    SimpleParticleTrailGenerator *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const SimpleParticleTrailGenerator *>(this), bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

FieldContainerTransitPtr SimpleParticleTrailGeneratorBase::shallowCopyDependent(
    BitVector bFlags) const
{
    SimpleParticleTrailGenerator *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const SimpleParticleTrailGenerator *>(this), ~bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask = bFlags;

    return returnValue;
}

FieldContainerTransitPtr SimpleParticleTrailGeneratorBase::shallowCopy(void) const
{
    SimpleParticleTrailGenerator *tmpPtr;

    newPtr(tmpPtr,
           dynamic_cast<const SimpleParticleTrailGenerator *>(this),
           Thread::getCurrentLocalFlags());

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~Thread::getCurrentLocalFlags();

    FieldContainerTransitPtr returnValue(tmpPtr);

    return returnValue;
}




/*------------------------- constructors ----------------------------------*/

SimpleParticleTrailGeneratorBase::SimpleParticleTrailGeneratorBase(void) :
    Inherited(),
    _sfResolution             (Real32(3.0f)),
    _sfDrawMethod             (UInt32(SimpleParticleTrailGenerator::POINTS))
{
}

SimpleParticleTrailGeneratorBase::SimpleParticleTrailGeneratorBase(const SimpleParticleTrailGeneratorBase &source) :
    Inherited(source),
    _sfResolution             (source._sfResolution             ),
    _sfDrawMethod             (source._sfDrawMethod             )
{
}


/*-------------------------- destructors ----------------------------------*/

SimpleParticleTrailGeneratorBase::~SimpleParticleTrailGeneratorBase(void)
{
}


GetFieldHandlePtr SimpleParticleTrailGeneratorBase::getHandleResolution      (void) const
{
    SFReal32::GetHandlePtr returnValue(
        new  SFReal32::GetHandle(
             &_sfResolution,
             this->getType().getFieldDesc(ResolutionFieldId),
             const_cast<SimpleParticleTrailGeneratorBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr SimpleParticleTrailGeneratorBase::editHandleResolution     (void)
{
    SFReal32::EditHandlePtr returnValue(
        new  SFReal32::EditHandle(
             &_sfResolution,
             this->getType().getFieldDesc(ResolutionFieldId),
             this));


    editSField(ResolutionFieldMask);

    return returnValue;
}

GetFieldHandlePtr SimpleParticleTrailGeneratorBase::getHandleDrawMethod      (void) const
{
    SFUInt32::GetHandlePtr returnValue(
        new  SFUInt32::GetHandle(
             &_sfDrawMethod,
             this->getType().getFieldDesc(DrawMethodFieldId),
             const_cast<SimpleParticleTrailGeneratorBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr SimpleParticleTrailGeneratorBase::editHandleDrawMethod     (void)
{
    SFUInt32::EditHandlePtr returnValue(
        new  SFUInt32::EditHandle(
             &_sfDrawMethod,
             this->getType().getFieldDesc(DrawMethodFieldId),
             this));


    editSField(DrawMethodFieldMask);

    return returnValue;
}


#ifdef OSG_MT_CPTR_ASPECT
void SimpleParticleTrailGeneratorBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    SimpleParticleTrailGenerator *pThis = static_cast<SimpleParticleTrailGenerator *>(this);

    pThis->execSync(static_cast<SimpleParticleTrailGenerator *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif


#ifdef OSG_MT_CPTR_ASPECT
FieldContainer *SimpleParticleTrailGeneratorBase::createAspectCopy(
    const FieldContainer *pRefAspect) const
{
    SimpleParticleTrailGenerator *returnValue;

    newAspectCopy(returnValue,
                  dynamic_cast<const SimpleParticleTrailGenerator *>(pRefAspect),
                  dynamic_cast<const SimpleParticleTrailGenerator *>(this));

    return returnValue;
}
#endif

void SimpleParticleTrailGeneratorBase::resolveLinks(void)
{
    Inherited::resolveLinks();


}


OSG_END_NAMESPACE
