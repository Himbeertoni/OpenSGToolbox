/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *   contact:  David Kabala (djkabala@gmail.com)                             *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class CollisionEvent!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

OSG_BEGIN_NAMESPACE


//! access the type of the class
inline
OSG::FieldContainerType &CollisionEventBase::getClassType(void)
{
    return _type;
}

//! access the numerical type of the class
inline
OSG::UInt32 CollisionEventBase::getClassTypeId(void)
{
    return _type.getId();
}

inline
OSG::UInt16 CollisionEventBase::getClassGroupId(void)
{
    return _type.getGroupId();
}

/*------------------------------ get -----------------------------------*/

//! Get the value of the CollisionEvent::_sfPosition field.

inline
Pnt3f &CollisionEventBase::editPosition(void)
{
    editSField(PositionFieldMask);

    return _sfPosition.getValue();
}

//! Get the value of the CollisionEvent::_sfPosition field.
inline
const Pnt3f &CollisionEventBase::getPosition(void) const
{
    return _sfPosition.getValue();
}

//! Set the value of the CollisionEvent::_sfPosition field.
inline
void CollisionEventBase::setPosition(const Pnt3f &value)
{
    editSField(PositionFieldMask);

    _sfPosition.setValue(value);
}
//! Get the value of the CollisionEvent::_sfNormal field.

inline
Vec3f &CollisionEventBase::editNormal(void)
{
    editSField(NormalFieldMask);

    return _sfNormal.getValue();
}

//! Get the value of the CollisionEvent::_sfNormal field.
inline
const Vec3f &CollisionEventBase::getNormal(void) const
{
    return _sfNormal.getValue();
}

//! Set the value of the CollisionEvent::_sfNormal field.
inline
void CollisionEventBase::setNormal(const Vec3f &value)
{
    editSField(NormalFieldMask);

    _sfNormal.setValue(value);
}

//! Get the value of the CollisionEvent::_sfObject1Geom field.
inline
PhysicsGeom * CollisionEventBase::getObject1Geom(void) const
{
    return _sfObject1Geom.getValue();
}

//! Set the value of the CollisionEvent::_sfObject1Geom field.
inline
void CollisionEventBase::setObject1Geom(PhysicsGeom * const value)
{
    editSField(Object1GeomFieldMask);

    _sfObject1Geom.setValue(value);
}

//! Get the value of the CollisionEvent::_sfObject2Geom field.
inline
PhysicsGeom * CollisionEventBase::getObject2Geom(void) const
{
    return _sfObject2Geom.getValue();
}

//! Set the value of the CollisionEvent::_sfObject2Geom field.
inline
void CollisionEventBase::setObject2Geom(PhysicsGeom * const value)
{
    editSField(Object2GeomFieldMask);

    _sfObject2Geom.setValue(value);
}
//! Get the value of the CollisionEvent::_sfObject1CategoryBits field.

inline
UInt64 &CollisionEventBase::editObject1CategoryBits(void)
{
    editSField(Object1CategoryBitsFieldMask);

    return _sfObject1CategoryBits.getValue();
}

//! Get the value of the CollisionEvent::_sfObject1CategoryBits field.
inline
      UInt64  CollisionEventBase::getObject1CategoryBits(void) const
{
    return _sfObject1CategoryBits.getValue();
}

//! Set the value of the CollisionEvent::_sfObject1CategoryBits field.
inline
void CollisionEventBase::setObject1CategoryBits(const UInt64 value)
{
    editSField(Object1CategoryBitsFieldMask);

    _sfObject1CategoryBits.setValue(value);
}
//! Get the value of the CollisionEvent::_sfObject1CollideBits field.

inline
UInt64 &CollisionEventBase::editObject1CollideBits(void)
{
    editSField(Object1CollideBitsFieldMask);

    return _sfObject1CollideBits.getValue();
}

//! Get the value of the CollisionEvent::_sfObject1CollideBits field.
inline
      UInt64  CollisionEventBase::getObject1CollideBits(void) const
{
    return _sfObject1CollideBits.getValue();
}

//! Set the value of the CollisionEvent::_sfObject1CollideBits field.
inline
void CollisionEventBase::setObject1CollideBits(const UInt64 value)
{
    editSField(Object1CollideBitsFieldMask);

    _sfObject1CollideBits.setValue(value);
}
//! Get the value of the CollisionEvent::_sfObject2CategoryBits field.

inline
UInt64 &CollisionEventBase::editObject2CategoryBits(void)
{
    editSField(Object2CategoryBitsFieldMask);

    return _sfObject2CategoryBits.getValue();
}

//! Get the value of the CollisionEvent::_sfObject2CategoryBits field.
inline
      UInt64  CollisionEventBase::getObject2CategoryBits(void) const
{
    return _sfObject2CategoryBits.getValue();
}

//! Set the value of the CollisionEvent::_sfObject2CategoryBits field.
inline
void CollisionEventBase::setObject2CategoryBits(const UInt64 value)
{
    editSField(Object2CategoryBitsFieldMask);

    _sfObject2CategoryBits.setValue(value);
}
//! Get the value of the CollisionEvent::_sfObject2CollideBits field.

inline
UInt64 &CollisionEventBase::editObject2CollideBits(void)
{
    editSField(Object2CollideBitsFieldMask);

    return _sfObject2CollideBits.getValue();
}

//! Get the value of the CollisionEvent::_sfObject2CollideBits field.
inline
      UInt64  CollisionEventBase::getObject2CollideBits(void) const
{
    return _sfObject2CollideBits.getValue();
}

//! Set the value of the CollisionEvent::_sfObject2CollideBits field.
inline
void CollisionEventBase::setObject2CollideBits(const UInt64 value)
{
    editSField(Object2CollideBitsFieldMask);

    _sfObject2CollideBits.setValue(value);
}
//! Get the value of the CollisionEvent::_sfObject1Velocity field.

inline
Vec3f &CollisionEventBase::editObject1Velocity(void)
{
    editSField(Object1VelocityFieldMask);

    return _sfObject1Velocity.getValue();
}

//! Get the value of the CollisionEvent::_sfObject1Velocity field.
inline
const Vec3f &CollisionEventBase::getObject1Velocity(void) const
{
    return _sfObject1Velocity.getValue();
}

//! Set the value of the CollisionEvent::_sfObject1Velocity field.
inline
void CollisionEventBase::setObject1Velocity(const Vec3f &value)
{
    editSField(Object1VelocityFieldMask);

    _sfObject1Velocity.setValue(value);
}
//! Get the value of the CollisionEvent::_sfObject2Velocity field.

inline
Vec3f &CollisionEventBase::editObject2Velocity(void)
{
    editSField(Object2VelocityFieldMask);

    return _sfObject2Velocity.getValue();
}

//! Get the value of the CollisionEvent::_sfObject2Velocity field.
inline
const Vec3f &CollisionEventBase::getObject2Velocity(void) const
{
    return _sfObject2Velocity.getValue();
}

//! Set the value of the CollisionEvent::_sfObject2Velocity field.
inline
void CollisionEventBase::setObject2Velocity(const Vec3f &value)
{
    editSField(Object2VelocityFieldMask);

    _sfObject2Velocity.setValue(value);
}
//! Get the value of the CollisionEvent::_sfProjectedNormalSpeed field.

inline
Real32 &CollisionEventBase::editProjectedNormalSpeed(void)
{
    editSField(ProjectedNormalSpeedFieldMask);

    return _sfProjectedNormalSpeed.getValue();
}

//! Get the value of the CollisionEvent::_sfProjectedNormalSpeed field.
inline
      Real32  CollisionEventBase::getProjectedNormalSpeed(void) const
{
    return _sfProjectedNormalSpeed.getValue();
}

//! Set the value of the CollisionEvent::_sfProjectedNormalSpeed field.
inline
void CollisionEventBase::setProjectedNormalSpeed(const Real32 value)
{
    editSField(ProjectedNormalSpeedFieldMask);

    _sfProjectedNormalSpeed.setValue(value);
}


#ifdef OSG_MT_CPTR_ASPECT
inline
void CollisionEventBase::execSync (      CollisionEventBase *pFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    Inherited::execSync(pFrom, whichField, oOffsets, syncMode, uiSyncInfo);

    if(FieldBits::NoField != (PositionFieldMask & whichField))
        _sfPosition.syncWith(pFrom->_sfPosition);

    if(FieldBits::NoField != (NormalFieldMask & whichField))
        _sfNormal.syncWith(pFrom->_sfNormal);

    if(FieldBits::NoField != (Object1GeomFieldMask & whichField))
        _sfObject1Geom.syncWith(pFrom->_sfObject1Geom);

    if(FieldBits::NoField != (Object2GeomFieldMask & whichField))
        _sfObject2Geom.syncWith(pFrom->_sfObject2Geom);

    if(FieldBits::NoField != (Object1CategoryBitsFieldMask & whichField))
        _sfObject1CategoryBits.syncWith(pFrom->_sfObject1CategoryBits);

    if(FieldBits::NoField != (Object1CollideBitsFieldMask & whichField))
        _sfObject1CollideBits.syncWith(pFrom->_sfObject1CollideBits);

    if(FieldBits::NoField != (Object2CategoryBitsFieldMask & whichField))
        _sfObject2CategoryBits.syncWith(pFrom->_sfObject2CategoryBits);

    if(FieldBits::NoField != (Object2CollideBitsFieldMask & whichField))
        _sfObject2CollideBits.syncWith(pFrom->_sfObject2CollideBits);

    if(FieldBits::NoField != (Object1VelocityFieldMask & whichField))
        _sfObject1Velocity.syncWith(pFrom->_sfObject1Velocity);

    if(FieldBits::NoField != (Object2VelocityFieldMask & whichField))
        _sfObject2Velocity.syncWith(pFrom->_sfObject2Velocity);

    if(FieldBits::NoField != (ProjectedNormalSpeedFieldMask & whichField))
        _sfProjectedNormalSpeed.syncWith(pFrom->_sfProjectedNormalSpeed);
}
#endif


inline
const Char8 *CollisionEventBase::getClassname(void)
{
    return "CollisionEvent";
}


OSG_GEN_CONTAINERPTR(CollisionEvent);

OSG_END_NAMESPACE

