/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact:  David Kabala (djkabala@gmail.com),  Behboud Kalantary         *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class PhysicsBody!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>
#include <boost/assign/list_of.hpp>

#include "OSGConfig.h"



#include "OSGPhysicsWorld.h"            // World Class

#include "OSGPhysicsBodyBase.h"
#include "OSGPhysicsBody.h"

#include <boost/bind.hpp>

#ifdef WIN32 // turn off 'this' : used in base member initializer list warning
#pragma warning(disable:4355)
#endif

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::PhysicsBody
    
 */

/***************************************************************************\
 *                        Field Documentation                              *
\***************************************************************************/

/*! \var Vec3f           PhysicsBodyBase::_sfPosition
    
*/

/*! \var Matrix          PhysicsBodyBase::_sfRotation
    
*/

/*! \var Quaternion      PhysicsBodyBase::_sfQuaternion
    
*/

/*! \var Vec3f           PhysicsBodyBase::_sfLinearVel
    
*/

/*! \var Vec3f           PhysicsBodyBase::_sfAngularVel
    
*/

/*! \var Vec3f           PhysicsBodyBase::_sfForce
    
*/

/*! \var Vec3f           PhysicsBodyBase::_sfTorque
    
*/

/*! \var Real32          PhysicsBodyBase::_sfMass
    
*/

/*! \var Vec3f           PhysicsBodyBase::_sfMassCenterOfGravity
    
*/

/*! \var Matrix          PhysicsBodyBase::_sfMassInertiaTensor
    
*/

/*! \var Int32           PhysicsBodyBase::_sfAutoDisableFlag
    
*/

/*! \var Real32          PhysicsBodyBase::_sfAutoDisableLinearThreshold
    
*/

/*! \var Real32          PhysicsBodyBase::_sfAutoDisableAngularThreshold
    
*/

/*! \var Int32           PhysicsBodyBase::_sfAutoDisableSteps
    
*/

/*! \var Real32          PhysicsBodyBase::_sfAutoDisableTime
    
*/

/*! \var Int32           PhysicsBodyBase::_sfFiniteRotationMode
    
*/

/*! \var Vec3f           PhysicsBodyBase::_sfFiniteRotationAxis
    
*/

/*! \var bool            PhysicsBodyBase::_sfGravityMode
    
*/

/*! \var Real32          PhysicsBodyBase::_sfLinearDamping
    
*/

/*! \var Real32          PhysicsBodyBase::_sfAngularDamping
    
*/

/*! \var Real32          PhysicsBodyBase::_sfLinearDampingThreshold
    
*/

/*! \var Real32          PhysicsBodyBase::_sfAngularDampingThreshold
    
*/

/*! \var Real32          PhysicsBodyBase::_sfMaxAngularSpeed
    
*/

/*! \var bool            PhysicsBodyBase::_sfKinematic
    
*/

/*! \var PhysicsWorld *  PhysicsBodyBase::_sfWorld
    
*/


/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldTraits<PhysicsBody *>::_type("PhysicsBodyPtr", "AttachmentPtr");
#endif

OSG_FIELDTRAITS_GETTYPE(PhysicsBody *)

OSG_EXPORT_PTR_SFIELD_FULL(PointerSField,
                           PhysicsBody *,
                           0);

OSG_EXPORT_PTR_MFIELD_FULL(PointerMField,
                           PhysicsBody *,
                           0);

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

void PhysicsBodyBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new SFVec3f::Description(
        SFVec3f::getClassType(),
        "position",
        "",
        PositionFieldId, PositionFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&PhysicsBody::editHandlePosition),
        static_cast<FieldGetMethodSig >(&PhysicsBody::getHandlePosition));

    oType.addInitialDesc(pDesc);

    pDesc = new SFMatrix::Description(
        SFMatrix::getClassType(),
        "rotation",
        "",
        RotationFieldId, RotationFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&PhysicsBody::editHandleRotation),
        static_cast<FieldGetMethodSig >(&PhysicsBody::getHandleRotation));

    oType.addInitialDesc(pDesc);

    pDesc = new SFQuaternion::Description(
        SFQuaternion::getClassType(),
        "quaternion",
        "",
        QuaternionFieldId, QuaternionFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&PhysicsBody::editHandleQuaternion),
        static_cast<FieldGetMethodSig >(&PhysicsBody::getHandleQuaternion));

    oType.addInitialDesc(pDesc);

    pDesc = new SFVec3f::Description(
        SFVec3f::getClassType(),
        "linearVel",
        "",
        LinearVelFieldId, LinearVelFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&PhysicsBody::editHandleLinearVel),
        static_cast<FieldGetMethodSig >(&PhysicsBody::getHandleLinearVel));

    oType.addInitialDesc(pDesc);

    pDesc = new SFVec3f::Description(
        SFVec3f::getClassType(),
        "angularVel",
        "",
        AngularVelFieldId, AngularVelFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&PhysicsBody::editHandleAngularVel),
        static_cast<FieldGetMethodSig >(&PhysicsBody::getHandleAngularVel));

    oType.addInitialDesc(pDesc);

    pDesc = new SFVec3f::Description(
        SFVec3f::getClassType(),
        "force",
        "",
        ForceFieldId, ForceFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&PhysicsBody::editHandleForce),
        static_cast<FieldGetMethodSig >(&PhysicsBody::getHandleForce));

    oType.addInitialDesc(pDesc);

    pDesc = new SFVec3f::Description(
        SFVec3f::getClassType(),
        "torque",
        "",
        TorqueFieldId, TorqueFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&PhysicsBody::editHandleTorque),
        static_cast<FieldGetMethodSig >(&PhysicsBody::getHandleTorque));

    oType.addInitialDesc(pDesc);

    pDesc = new SFReal32::Description(
        SFReal32::getClassType(),
        "mass",
        "",
        MassFieldId, MassFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&PhysicsBody::editHandleMass),
        static_cast<FieldGetMethodSig >(&PhysicsBody::getHandleMass));

    oType.addInitialDesc(pDesc);

    pDesc = new SFVec3f::Description(
        SFVec3f::getClassType(),
        "massCenterOfGravity",
        "",
        MassCenterOfGravityFieldId, MassCenterOfGravityFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&PhysicsBody::editHandleMassCenterOfGravity),
        static_cast<FieldGetMethodSig >(&PhysicsBody::getHandleMassCenterOfGravity));

    oType.addInitialDesc(pDesc);

    pDesc = new SFMatrix::Description(
        SFMatrix::getClassType(),
        "massInertiaTensor",
        "",
        MassInertiaTensorFieldId, MassInertiaTensorFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&PhysicsBody::editHandleMassInertiaTensor),
        static_cast<FieldGetMethodSig >(&PhysicsBody::getHandleMassInertiaTensor));

    oType.addInitialDesc(pDesc);

    pDesc = new SFInt32::Description(
        SFInt32::getClassType(),
        "autoDisableFlag",
        "",
        AutoDisableFlagFieldId, AutoDisableFlagFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&PhysicsBody::editHandleAutoDisableFlag),
        static_cast<FieldGetMethodSig >(&PhysicsBody::getHandleAutoDisableFlag));

    oType.addInitialDesc(pDesc);

    pDesc = new SFReal32::Description(
        SFReal32::getClassType(),
        "autoDisableLinearThreshold",
        "",
        AutoDisableLinearThresholdFieldId, AutoDisableLinearThresholdFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&PhysicsBody::editHandleAutoDisableLinearThreshold),
        static_cast<FieldGetMethodSig >(&PhysicsBody::getHandleAutoDisableLinearThreshold));

    oType.addInitialDesc(pDesc);

    pDesc = new SFReal32::Description(
        SFReal32::getClassType(),
        "autoDisableAngularThreshold",
        "",
        AutoDisableAngularThresholdFieldId, AutoDisableAngularThresholdFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&PhysicsBody::editHandleAutoDisableAngularThreshold),
        static_cast<FieldGetMethodSig >(&PhysicsBody::getHandleAutoDisableAngularThreshold));

    oType.addInitialDesc(pDesc);

    pDesc = new SFInt32::Description(
        SFInt32::getClassType(),
        "autoDisableSteps",
        "",
        AutoDisableStepsFieldId, AutoDisableStepsFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&PhysicsBody::editHandleAutoDisableSteps),
        static_cast<FieldGetMethodSig >(&PhysicsBody::getHandleAutoDisableSteps));

    oType.addInitialDesc(pDesc);

    pDesc = new SFReal32::Description(
        SFReal32::getClassType(),
        "autoDisableTime",
        "",
        AutoDisableTimeFieldId, AutoDisableTimeFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&PhysicsBody::editHandleAutoDisableTime),
        static_cast<FieldGetMethodSig >(&PhysicsBody::getHandleAutoDisableTime));

    oType.addInitialDesc(pDesc);

    pDesc = new SFInt32::Description(
        SFInt32::getClassType(),
        "finiteRotationMode",
        "",
        FiniteRotationModeFieldId, FiniteRotationModeFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&PhysicsBody::editHandleFiniteRotationMode),
        static_cast<FieldGetMethodSig >(&PhysicsBody::getHandleFiniteRotationMode));

    oType.addInitialDesc(pDesc);

    pDesc = new SFVec3f::Description(
        SFVec3f::getClassType(),
        "finiteRotationAxis",
        "",
        FiniteRotationAxisFieldId, FiniteRotationAxisFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&PhysicsBody::editHandleFiniteRotationAxis),
        static_cast<FieldGetMethodSig >(&PhysicsBody::getHandleFiniteRotationAxis));

    oType.addInitialDesc(pDesc);

    pDesc = new SFBool::Description(
        SFBool::getClassType(),
        "gravityMode",
        "",
        GravityModeFieldId, GravityModeFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&PhysicsBody::editHandleGravityMode),
        static_cast<FieldGetMethodSig >(&PhysicsBody::getHandleGravityMode));

    oType.addInitialDesc(pDesc);

    pDesc = new SFReal32::Description(
        SFReal32::getClassType(),
        "linearDamping",
        "",
        LinearDampingFieldId, LinearDampingFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&PhysicsBody::editHandleLinearDamping),
        static_cast<FieldGetMethodSig >(&PhysicsBody::getHandleLinearDamping));

    oType.addInitialDesc(pDesc);

    pDesc = new SFReal32::Description(
        SFReal32::getClassType(),
        "angularDamping",
        "",
        AngularDampingFieldId, AngularDampingFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&PhysicsBody::editHandleAngularDamping),
        static_cast<FieldGetMethodSig >(&PhysicsBody::getHandleAngularDamping));

    oType.addInitialDesc(pDesc);

    pDesc = new SFReal32::Description(
        SFReal32::getClassType(),
        "linearDampingThreshold",
        "",
        LinearDampingThresholdFieldId, LinearDampingThresholdFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&PhysicsBody::editHandleLinearDampingThreshold),
        static_cast<FieldGetMethodSig >(&PhysicsBody::getHandleLinearDampingThreshold));

    oType.addInitialDesc(pDesc);

    pDesc = new SFReal32::Description(
        SFReal32::getClassType(),
        "angularDampingThreshold",
        "",
        AngularDampingThresholdFieldId, AngularDampingThresholdFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&PhysicsBody::editHandleAngularDampingThreshold),
        static_cast<FieldGetMethodSig >(&PhysicsBody::getHandleAngularDampingThreshold));

    oType.addInitialDesc(pDesc);

    pDesc = new SFReal32::Description(
        SFReal32::getClassType(),
        "maxAngularSpeed",
        "",
        MaxAngularSpeedFieldId, MaxAngularSpeedFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&PhysicsBody::editHandleMaxAngularSpeed),
        static_cast<FieldGetMethodSig >(&PhysicsBody::getHandleMaxAngularSpeed));

    oType.addInitialDesc(pDesc);

    pDesc = new SFBool::Description(
        SFBool::getClassType(),
        "kinematic",
        "",
        KinematicFieldId, KinematicFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&PhysicsBody::editHandleKinematic),
        static_cast<FieldGetMethodSig >(&PhysicsBody::getHandleKinematic));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecPhysicsWorldPtr::Description(
        SFUnrecPhysicsWorldPtr::getClassType(),
        "world",
        "",
        WorldFieldId, WorldFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&PhysicsBody::editHandleWorld),
        static_cast<FieldGetMethodSig >(&PhysicsBody::getHandleWorld));

    oType.addInitialDesc(pDesc);
}


PhysicsBodyBase::TypeObject PhysicsBodyBase::_type(
    PhysicsBodyBase::getClassname(),
    Inherited::getClassname(),
    "PhysicsBody",
    0,
    reinterpret_cast<PrototypeCreateF>(&PhysicsBodyBase::createEmptyLocal),
    PhysicsBody::initMethod,
    PhysicsBody::exitMethod,
    reinterpret_cast<InitalInsertDescFunc>(&PhysicsBody::classDescInserter),
    false,
    0,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "\tname=\"PhysicsBody\"\n"
    "\tparent=\"Attachment\"\n"
    "    library=\"ContribPhysics\"\n"
    "    pointerfieldtypes=\"both\"\n"
    "    structure=\"concrete\"\n"
    "    systemcomponent=\"true\"\n"
    "    parentsystemcomponent=\"true\"\n"
    "    decoratable=\"false\"\n"
    "    useLocalIncludes=\"false\"\n"
    "    isNodeCore=\"false\"\n"
    "    authors=\"David Kabala (djkabala@gmail.com),  Behboud Kalantary         \"\n"
    ">\n"
    "\t<Field\n"
    "\t\tname=\"position\"\n"
    "\t\ttype=\"Vec3f\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t\tdefaultValue=\"0.0f,0.0f,0.0f\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"rotation\"\n"
    "\t\ttype=\"Matrix\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"quaternion\"\n"
    "\t\ttype=\"Quaternion\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"linearVel\"\n"
    "\t\ttype=\"Vec3f\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t\tdefaultValue=\"0.0f,0.0f,0.0f\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"angularVel\"\n"
    "\t\ttype=\"Vec3f\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t\tdefaultValue=\"0.0f,0.0f,0.0f\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"force\"\n"
    "\t\ttype=\"Vec3f\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t\tdefaultValue=\"0.0f,0.0f,0.0f\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"torque\"\n"
    "\t\ttype=\"Vec3f\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t\tdefaultValue=\"0.0f,0.0f,0.0f\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"mass\"\n"
    "\t\ttype=\"Real32\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "        defaultValue=\"1\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"massCenterOfGravity\"\n"
    "\t\ttype=\"Vec3f\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t\tdefaultValue=\"0.0f,0.0f,0.0f\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"massInertiaTensor\"\n"
    "\t\ttype=\"Matrix\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"autoDisableFlag\"\n"
    "\t\ttype=\"Int32\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t\tdefaultValue=\"1\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"autoDisableLinearThreshold\"\n"
    "\t\ttype=\"Real32\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t\tdefaultValue=\"0.01f\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"autoDisableAngularThreshold\"\n"
    "\t\ttype=\"Real32\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t\tdefaultValue=\"0.01f\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"autoDisableSteps\"\n"
    "\t\ttype=\"Int32\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t\tdefaultValue=\"10\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"autoDisableTime\"\n"
    "\t\ttype=\"Real32\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t\tdefaultValue=\"0.75f\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"finiteRotationMode\"\n"
    "\t\ttype=\"Int32\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t\tdefaultValue=\"0\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"finiteRotationAxis\"\n"
    "\t\ttype=\"Vec3f\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t\tdefaultValue=\"0.0f,0.0f,0.0f\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"gravityMode\"\n"
    "\t\ttype=\"bool\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t\tdefaultValue=\"true\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"linearDamping\"\n"
    "\t\ttype=\"Real32\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t\tdefaultValue=\"0.0f\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"angularDamping\"\n"
    "\t\ttype=\"Real32\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t\tdefaultValue=\"0.0f\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"linearDampingThreshold\"\n"
    "\t\ttype=\"Real32\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t\tdefaultValue=\"0.01f\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"angularDampingThreshold\"\n"
    "\t\ttype=\"Real32\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t\tdefaultValue=\"0.01f\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"maxAngularSpeed\"\n"
    "\t\ttype=\"Real32\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "        defaultValue=\"-1.0\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"kinematic\"\n"
    "\t\ttype=\"bool\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "        defaultValue=\"false\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"world\"\n"
    "\t\ttype=\"PhysicsWorld\"\n"
    "        category=\"pointer\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"NULL\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "</FieldContainer>\n",
    ""
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &PhysicsBodyBase::getType(void)
{
    return _type;
}

const FieldContainerType &PhysicsBodyBase::getType(void) const
{
    return _type;
}

UInt32 PhysicsBodyBase::getContainerSize(void) const
{
    return sizeof(PhysicsBody);
}

/*------------------------- decorator get ------------------------------*/


SFVec3f *PhysicsBodyBase::editSFPosition(void)
{
    editSField(PositionFieldMask);

    return &_sfPosition;
}

const SFVec3f *PhysicsBodyBase::getSFPosition(void) const
{
    return &_sfPosition;
}


SFMatrix *PhysicsBodyBase::editSFRotation(void)
{
    editSField(RotationFieldMask);

    return &_sfRotation;
}

const SFMatrix *PhysicsBodyBase::getSFRotation(void) const
{
    return &_sfRotation;
}


SFQuaternion *PhysicsBodyBase::editSFQuaternion(void)
{
    editSField(QuaternionFieldMask);

    return &_sfQuaternion;
}

const SFQuaternion *PhysicsBodyBase::getSFQuaternion(void) const
{
    return &_sfQuaternion;
}


SFVec3f *PhysicsBodyBase::editSFLinearVel(void)
{
    editSField(LinearVelFieldMask);

    return &_sfLinearVel;
}

const SFVec3f *PhysicsBodyBase::getSFLinearVel(void) const
{
    return &_sfLinearVel;
}


SFVec3f *PhysicsBodyBase::editSFAngularVel(void)
{
    editSField(AngularVelFieldMask);

    return &_sfAngularVel;
}

const SFVec3f *PhysicsBodyBase::getSFAngularVel(void) const
{
    return &_sfAngularVel;
}


SFVec3f *PhysicsBodyBase::editSFForce(void)
{
    editSField(ForceFieldMask);

    return &_sfForce;
}

const SFVec3f *PhysicsBodyBase::getSFForce(void) const
{
    return &_sfForce;
}


SFVec3f *PhysicsBodyBase::editSFTorque(void)
{
    editSField(TorqueFieldMask);

    return &_sfTorque;
}

const SFVec3f *PhysicsBodyBase::getSFTorque(void) const
{
    return &_sfTorque;
}


SFReal32 *PhysicsBodyBase::editSFMass(void)
{
    editSField(MassFieldMask);

    return &_sfMass;
}

const SFReal32 *PhysicsBodyBase::getSFMass(void) const
{
    return &_sfMass;
}


SFVec3f *PhysicsBodyBase::editSFMassCenterOfGravity(void)
{
    editSField(MassCenterOfGravityFieldMask);

    return &_sfMassCenterOfGravity;
}

const SFVec3f *PhysicsBodyBase::getSFMassCenterOfGravity(void) const
{
    return &_sfMassCenterOfGravity;
}


SFMatrix *PhysicsBodyBase::editSFMassInertiaTensor(void)
{
    editSField(MassInertiaTensorFieldMask);

    return &_sfMassInertiaTensor;
}

const SFMatrix *PhysicsBodyBase::getSFMassInertiaTensor(void) const
{
    return &_sfMassInertiaTensor;
}


SFInt32 *PhysicsBodyBase::editSFAutoDisableFlag(void)
{
    editSField(AutoDisableFlagFieldMask);

    return &_sfAutoDisableFlag;
}

const SFInt32 *PhysicsBodyBase::getSFAutoDisableFlag(void) const
{
    return &_sfAutoDisableFlag;
}


SFReal32 *PhysicsBodyBase::editSFAutoDisableLinearThreshold(void)
{
    editSField(AutoDisableLinearThresholdFieldMask);

    return &_sfAutoDisableLinearThreshold;
}

const SFReal32 *PhysicsBodyBase::getSFAutoDisableLinearThreshold(void) const
{
    return &_sfAutoDisableLinearThreshold;
}


SFReal32 *PhysicsBodyBase::editSFAutoDisableAngularThreshold(void)
{
    editSField(AutoDisableAngularThresholdFieldMask);

    return &_sfAutoDisableAngularThreshold;
}

const SFReal32 *PhysicsBodyBase::getSFAutoDisableAngularThreshold(void) const
{
    return &_sfAutoDisableAngularThreshold;
}


SFInt32 *PhysicsBodyBase::editSFAutoDisableSteps(void)
{
    editSField(AutoDisableStepsFieldMask);

    return &_sfAutoDisableSteps;
}

const SFInt32 *PhysicsBodyBase::getSFAutoDisableSteps(void) const
{
    return &_sfAutoDisableSteps;
}


SFReal32 *PhysicsBodyBase::editSFAutoDisableTime(void)
{
    editSField(AutoDisableTimeFieldMask);

    return &_sfAutoDisableTime;
}

const SFReal32 *PhysicsBodyBase::getSFAutoDisableTime(void) const
{
    return &_sfAutoDisableTime;
}


SFInt32 *PhysicsBodyBase::editSFFiniteRotationMode(void)
{
    editSField(FiniteRotationModeFieldMask);

    return &_sfFiniteRotationMode;
}

const SFInt32 *PhysicsBodyBase::getSFFiniteRotationMode(void) const
{
    return &_sfFiniteRotationMode;
}


SFVec3f *PhysicsBodyBase::editSFFiniteRotationAxis(void)
{
    editSField(FiniteRotationAxisFieldMask);

    return &_sfFiniteRotationAxis;
}

const SFVec3f *PhysicsBodyBase::getSFFiniteRotationAxis(void) const
{
    return &_sfFiniteRotationAxis;
}


SFBool *PhysicsBodyBase::editSFGravityMode(void)
{
    editSField(GravityModeFieldMask);

    return &_sfGravityMode;
}

const SFBool *PhysicsBodyBase::getSFGravityMode(void) const
{
    return &_sfGravityMode;
}


SFReal32 *PhysicsBodyBase::editSFLinearDamping(void)
{
    editSField(LinearDampingFieldMask);

    return &_sfLinearDamping;
}

const SFReal32 *PhysicsBodyBase::getSFLinearDamping(void) const
{
    return &_sfLinearDamping;
}


SFReal32 *PhysicsBodyBase::editSFAngularDamping(void)
{
    editSField(AngularDampingFieldMask);

    return &_sfAngularDamping;
}

const SFReal32 *PhysicsBodyBase::getSFAngularDamping(void) const
{
    return &_sfAngularDamping;
}


SFReal32 *PhysicsBodyBase::editSFLinearDampingThreshold(void)
{
    editSField(LinearDampingThresholdFieldMask);

    return &_sfLinearDampingThreshold;
}

const SFReal32 *PhysicsBodyBase::getSFLinearDampingThreshold(void) const
{
    return &_sfLinearDampingThreshold;
}


SFReal32 *PhysicsBodyBase::editSFAngularDampingThreshold(void)
{
    editSField(AngularDampingThresholdFieldMask);

    return &_sfAngularDampingThreshold;
}

const SFReal32 *PhysicsBodyBase::getSFAngularDampingThreshold(void) const
{
    return &_sfAngularDampingThreshold;
}


SFReal32 *PhysicsBodyBase::editSFMaxAngularSpeed(void)
{
    editSField(MaxAngularSpeedFieldMask);

    return &_sfMaxAngularSpeed;
}

const SFReal32 *PhysicsBodyBase::getSFMaxAngularSpeed(void) const
{
    return &_sfMaxAngularSpeed;
}


SFBool *PhysicsBodyBase::editSFKinematic(void)
{
    editSField(KinematicFieldMask);

    return &_sfKinematic;
}

const SFBool *PhysicsBodyBase::getSFKinematic(void) const
{
    return &_sfKinematic;
}


//! Get the PhysicsBody::_sfWorld field.
const SFUnrecPhysicsWorldPtr *PhysicsBodyBase::getSFWorld(void) const
{
    return &_sfWorld;
}

SFUnrecPhysicsWorldPtr *PhysicsBodyBase::editSFWorld          (void)
{
    editSField(WorldFieldMask);

    return &_sfWorld;
}





/*------------------------------ access -----------------------------------*/

UInt32 PhysicsBodyBase::getBinSize(ConstFieldMaskArg whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (PositionFieldMask & whichField))
    {
        returnValue += _sfPosition.getBinSize();
    }
    if(FieldBits::NoField != (RotationFieldMask & whichField))
    {
        returnValue += _sfRotation.getBinSize();
    }
    if(FieldBits::NoField != (QuaternionFieldMask & whichField))
    {
        returnValue += _sfQuaternion.getBinSize();
    }
    if(FieldBits::NoField != (LinearVelFieldMask & whichField))
    {
        returnValue += _sfLinearVel.getBinSize();
    }
    if(FieldBits::NoField != (AngularVelFieldMask & whichField))
    {
        returnValue += _sfAngularVel.getBinSize();
    }
    if(FieldBits::NoField != (ForceFieldMask & whichField))
    {
        returnValue += _sfForce.getBinSize();
    }
    if(FieldBits::NoField != (TorqueFieldMask & whichField))
    {
        returnValue += _sfTorque.getBinSize();
    }
    if(FieldBits::NoField != (MassFieldMask & whichField))
    {
        returnValue += _sfMass.getBinSize();
    }
    if(FieldBits::NoField != (MassCenterOfGravityFieldMask & whichField))
    {
        returnValue += _sfMassCenterOfGravity.getBinSize();
    }
    if(FieldBits::NoField != (MassInertiaTensorFieldMask & whichField))
    {
        returnValue += _sfMassInertiaTensor.getBinSize();
    }
    if(FieldBits::NoField != (AutoDisableFlagFieldMask & whichField))
    {
        returnValue += _sfAutoDisableFlag.getBinSize();
    }
    if(FieldBits::NoField != (AutoDisableLinearThresholdFieldMask & whichField))
    {
        returnValue += _sfAutoDisableLinearThreshold.getBinSize();
    }
    if(FieldBits::NoField != (AutoDisableAngularThresholdFieldMask & whichField))
    {
        returnValue += _sfAutoDisableAngularThreshold.getBinSize();
    }
    if(FieldBits::NoField != (AutoDisableStepsFieldMask & whichField))
    {
        returnValue += _sfAutoDisableSteps.getBinSize();
    }
    if(FieldBits::NoField != (AutoDisableTimeFieldMask & whichField))
    {
        returnValue += _sfAutoDisableTime.getBinSize();
    }
    if(FieldBits::NoField != (FiniteRotationModeFieldMask & whichField))
    {
        returnValue += _sfFiniteRotationMode.getBinSize();
    }
    if(FieldBits::NoField != (FiniteRotationAxisFieldMask & whichField))
    {
        returnValue += _sfFiniteRotationAxis.getBinSize();
    }
    if(FieldBits::NoField != (GravityModeFieldMask & whichField))
    {
        returnValue += _sfGravityMode.getBinSize();
    }
    if(FieldBits::NoField != (LinearDampingFieldMask & whichField))
    {
        returnValue += _sfLinearDamping.getBinSize();
    }
    if(FieldBits::NoField != (AngularDampingFieldMask & whichField))
    {
        returnValue += _sfAngularDamping.getBinSize();
    }
    if(FieldBits::NoField != (LinearDampingThresholdFieldMask & whichField))
    {
        returnValue += _sfLinearDampingThreshold.getBinSize();
    }
    if(FieldBits::NoField != (AngularDampingThresholdFieldMask & whichField))
    {
        returnValue += _sfAngularDampingThreshold.getBinSize();
    }
    if(FieldBits::NoField != (MaxAngularSpeedFieldMask & whichField))
    {
        returnValue += _sfMaxAngularSpeed.getBinSize();
    }
    if(FieldBits::NoField != (KinematicFieldMask & whichField))
    {
        returnValue += _sfKinematic.getBinSize();
    }
    if(FieldBits::NoField != (WorldFieldMask & whichField))
    {
        returnValue += _sfWorld.getBinSize();
    }

    return returnValue;
}

void PhysicsBodyBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (PositionFieldMask & whichField))
    {
        _sfPosition.copyToBin(pMem);
    }
    if(FieldBits::NoField != (RotationFieldMask & whichField))
    {
        _sfRotation.copyToBin(pMem);
    }
    if(FieldBits::NoField != (QuaternionFieldMask & whichField))
    {
        _sfQuaternion.copyToBin(pMem);
    }
    if(FieldBits::NoField != (LinearVelFieldMask & whichField))
    {
        _sfLinearVel.copyToBin(pMem);
    }
    if(FieldBits::NoField != (AngularVelFieldMask & whichField))
    {
        _sfAngularVel.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ForceFieldMask & whichField))
    {
        _sfForce.copyToBin(pMem);
    }
    if(FieldBits::NoField != (TorqueFieldMask & whichField))
    {
        _sfTorque.copyToBin(pMem);
    }
    if(FieldBits::NoField != (MassFieldMask & whichField))
    {
        _sfMass.copyToBin(pMem);
    }
    if(FieldBits::NoField != (MassCenterOfGravityFieldMask & whichField))
    {
        _sfMassCenterOfGravity.copyToBin(pMem);
    }
    if(FieldBits::NoField != (MassInertiaTensorFieldMask & whichField))
    {
        _sfMassInertiaTensor.copyToBin(pMem);
    }
    if(FieldBits::NoField != (AutoDisableFlagFieldMask & whichField))
    {
        _sfAutoDisableFlag.copyToBin(pMem);
    }
    if(FieldBits::NoField != (AutoDisableLinearThresholdFieldMask & whichField))
    {
        _sfAutoDisableLinearThreshold.copyToBin(pMem);
    }
    if(FieldBits::NoField != (AutoDisableAngularThresholdFieldMask & whichField))
    {
        _sfAutoDisableAngularThreshold.copyToBin(pMem);
    }
    if(FieldBits::NoField != (AutoDisableStepsFieldMask & whichField))
    {
        _sfAutoDisableSteps.copyToBin(pMem);
    }
    if(FieldBits::NoField != (AutoDisableTimeFieldMask & whichField))
    {
        _sfAutoDisableTime.copyToBin(pMem);
    }
    if(FieldBits::NoField != (FiniteRotationModeFieldMask & whichField))
    {
        _sfFiniteRotationMode.copyToBin(pMem);
    }
    if(FieldBits::NoField != (FiniteRotationAxisFieldMask & whichField))
    {
        _sfFiniteRotationAxis.copyToBin(pMem);
    }
    if(FieldBits::NoField != (GravityModeFieldMask & whichField))
    {
        _sfGravityMode.copyToBin(pMem);
    }
    if(FieldBits::NoField != (LinearDampingFieldMask & whichField))
    {
        _sfLinearDamping.copyToBin(pMem);
    }
    if(FieldBits::NoField != (AngularDampingFieldMask & whichField))
    {
        _sfAngularDamping.copyToBin(pMem);
    }
    if(FieldBits::NoField != (LinearDampingThresholdFieldMask & whichField))
    {
        _sfLinearDampingThreshold.copyToBin(pMem);
    }
    if(FieldBits::NoField != (AngularDampingThresholdFieldMask & whichField))
    {
        _sfAngularDampingThreshold.copyToBin(pMem);
    }
    if(FieldBits::NoField != (MaxAngularSpeedFieldMask & whichField))
    {
        _sfMaxAngularSpeed.copyToBin(pMem);
    }
    if(FieldBits::NoField != (KinematicFieldMask & whichField))
    {
        _sfKinematic.copyToBin(pMem);
    }
    if(FieldBits::NoField != (WorldFieldMask & whichField))
    {
        _sfWorld.copyToBin(pMem);
    }
}

void PhysicsBodyBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (PositionFieldMask & whichField))
    {
        _sfPosition.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (RotationFieldMask & whichField))
    {
        _sfRotation.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (QuaternionFieldMask & whichField))
    {
        _sfQuaternion.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (LinearVelFieldMask & whichField))
    {
        _sfLinearVel.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (AngularVelFieldMask & whichField))
    {
        _sfAngularVel.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ForceFieldMask & whichField))
    {
        _sfForce.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (TorqueFieldMask & whichField))
    {
        _sfTorque.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (MassFieldMask & whichField))
    {
        _sfMass.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (MassCenterOfGravityFieldMask & whichField))
    {
        _sfMassCenterOfGravity.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (MassInertiaTensorFieldMask & whichField))
    {
        _sfMassInertiaTensor.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (AutoDisableFlagFieldMask & whichField))
    {
        _sfAutoDisableFlag.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (AutoDisableLinearThresholdFieldMask & whichField))
    {
        _sfAutoDisableLinearThreshold.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (AutoDisableAngularThresholdFieldMask & whichField))
    {
        _sfAutoDisableAngularThreshold.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (AutoDisableStepsFieldMask & whichField))
    {
        _sfAutoDisableSteps.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (AutoDisableTimeFieldMask & whichField))
    {
        _sfAutoDisableTime.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (FiniteRotationModeFieldMask & whichField))
    {
        _sfFiniteRotationMode.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (FiniteRotationAxisFieldMask & whichField))
    {
        _sfFiniteRotationAxis.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (GravityModeFieldMask & whichField))
    {
        _sfGravityMode.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (LinearDampingFieldMask & whichField))
    {
        _sfLinearDamping.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (AngularDampingFieldMask & whichField))
    {
        _sfAngularDamping.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (LinearDampingThresholdFieldMask & whichField))
    {
        _sfLinearDampingThreshold.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (AngularDampingThresholdFieldMask & whichField))
    {
        _sfAngularDampingThreshold.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (MaxAngularSpeedFieldMask & whichField))
    {
        _sfMaxAngularSpeed.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (KinematicFieldMask & whichField))
    {
        _sfKinematic.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (WorldFieldMask & whichField))
    {
        _sfWorld.copyFromBin(pMem);
    }
}

//! create a new instance of the class
PhysicsBodyTransitPtr PhysicsBodyBase::createLocal(BitVector bFlags)
{
    PhysicsBodyTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyLocal(bFlags);

        fc = dynamic_pointer_cast<PhysicsBody>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class, copy the container flags
PhysicsBodyTransitPtr PhysicsBodyBase::createDependent(BitVector bFlags)
{
    PhysicsBodyTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyDependent(bFlags);

        fc = dynamic_pointer_cast<PhysicsBody>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class
PhysicsBodyTransitPtr PhysicsBodyBase::create(void)
{
    PhysicsBodyTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopy();

        fc = dynamic_pointer_cast<PhysicsBody>(tmpPtr);
    }

    return fc;
}

PhysicsBody *PhysicsBodyBase::createEmptyLocal(BitVector bFlags)
{
    PhysicsBody *returnValue;

    newPtr<PhysicsBody>(returnValue, bFlags);

    returnValue->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

//! create an empty new instance of the class, do not copy the prototype
PhysicsBody *PhysicsBodyBase::createEmpty(void)
{
    PhysicsBody *returnValue;

    newPtr<PhysicsBody>(returnValue, Thread::getCurrentLocalFlags());

    returnValue->_pFieldFlags->_bNamespaceMask &=
        ~Thread::getCurrentLocalFlags();

    return returnValue;
}


FieldContainerTransitPtr PhysicsBodyBase::shallowCopyLocal(
    BitVector bFlags) const
{
    PhysicsBody *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const PhysicsBody *>(this), bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

FieldContainerTransitPtr PhysicsBodyBase::shallowCopyDependent(
    BitVector bFlags) const
{
    PhysicsBody *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const PhysicsBody *>(this), ~bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask = bFlags;

    return returnValue;
}

FieldContainerTransitPtr PhysicsBodyBase::shallowCopy(void) const
{
    PhysicsBody *tmpPtr;

    newPtr(tmpPtr,
           dynamic_cast<const PhysicsBody *>(this),
           Thread::getCurrentLocalFlags());

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~Thread::getCurrentLocalFlags();

    FieldContainerTransitPtr returnValue(tmpPtr);

    return returnValue;
}




/*------------------------- constructors ----------------------------------*/

PhysicsBodyBase::PhysicsBodyBase(void) :
    Inherited(),
    _sfPosition               (Vec3f(0.0f,0.0f,0.0f)),
    _sfRotation               (),
    _sfQuaternion             (),
    _sfLinearVel              (Vec3f(0.0f,0.0f,0.0f)),
    _sfAngularVel             (Vec3f(0.0f,0.0f,0.0f)),
    _sfForce                  (Vec3f(0.0f,0.0f,0.0f)),
    _sfTorque                 (Vec3f(0.0f,0.0f,0.0f)),
    _sfMass                   (Real32(1)),
    _sfMassCenterOfGravity    (Vec3f(0.0f,0.0f,0.0f)),
    _sfMassInertiaTensor      (),
    _sfAutoDisableFlag        (Int32(1)),
    _sfAutoDisableLinearThreshold(Real32(0.01f)),
    _sfAutoDisableAngularThreshold(Real32(0.01f)),
    _sfAutoDisableSteps       (Int32(10)),
    _sfAutoDisableTime        (Real32(0.75f)),
    _sfFiniteRotationMode     (Int32(0)),
    _sfFiniteRotationAxis     (Vec3f(0.0f,0.0f,0.0f)),
    _sfGravityMode            (bool(true)),
    _sfLinearDamping          (Real32(0.0f)),
    _sfAngularDamping         (Real32(0.0f)),
    _sfLinearDampingThreshold (Real32(0.01f)),
    _sfAngularDampingThreshold(Real32(0.01f)),
    _sfMaxAngularSpeed        (Real32(-1.0)),
    _sfKinematic              (bool(false)),
    _sfWorld                  (NULL)
{
}

PhysicsBodyBase::PhysicsBodyBase(const PhysicsBodyBase &source) :
    Inherited(source),
    _sfPosition               (source._sfPosition               ),
    _sfRotation               (source._sfRotation               ),
    _sfQuaternion             (source._sfQuaternion             ),
    _sfLinearVel              (source._sfLinearVel              ),
    _sfAngularVel             (source._sfAngularVel             ),
    _sfForce                  (source._sfForce                  ),
    _sfTorque                 (source._sfTorque                 ),
    _sfMass                   (source._sfMass                   ),
    _sfMassCenterOfGravity    (source._sfMassCenterOfGravity    ),
    _sfMassInertiaTensor      (source._sfMassInertiaTensor      ),
    _sfAutoDisableFlag        (source._sfAutoDisableFlag        ),
    _sfAutoDisableLinearThreshold(source._sfAutoDisableLinearThreshold),
    _sfAutoDisableAngularThreshold(source._sfAutoDisableAngularThreshold),
    _sfAutoDisableSteps       (source._sfAutoDisableSteps       ),
    _sfAutoDisableTime        (source._sfAutoDisableTime        ),
    _sfFiniteRotationMode     (source._sfFiniteRotationMode     ),
    _sfFiniteRotationAxis     (source._sfFiniteRotationAxis     ),
    _sfGravityMode            (source._sfGravityMode            ),
    _sfLinearDamping          (source._sfLinearDamping          ),
    _sfAngularDamping         (source._sfAngularDamping         ),
    _sfLinearDampingThreshold (source._sfLinearDampingThreshold ),
    _sfAngularDampingThreshold(source._sfAngularDampingThreshold),
    _sfMaxAngularSpeed        (source._sfMaxAngularSpeed        ),
    _sfKinematic              (source._sfKinematic              ),
    _sfWorld                  (NULL)
{
}


/*-------------------------- destructors ----------------------------------*/

PhysicsBodyBase::~PhysicsBodyBase(void)
{
}

void PhysicsBodyBase::onCreate(const PhysicsBody *source)
{
    Inherited::onCreate(source);

    if(source != NULL)
    {
        PhysicsBody *pThis = static_cast<PhysicsBody *>(this);

        pThis->setWorld(source->getWorld());
    }
}

GetFieldHandlePtr PhysicsBodyBase::getHandlePosition        (void) const
{
    SFVec3f::GetHandlePtr returnValue(
        new  SFVec3f::GetHandle(
             &_sfPosition,
             this->getType().getFieldDesc(PositionFieldId),
             const_cast<PhysicsBodyBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr PhysicsBodyBase::editHandlePosition       (void)
{
    SFVec3f::EditHandlePtr returnValue(
        new  SFVec3f::EditHandle(
             &_sfPosition,
             this->getType().getFieldDesc(PositionFieldId),
             this));


    editSField(PositionFieldMask);

    return returnValue;
}

GetFieldHandlePtr PhysicsBodyBase::getHandleRotation        (void) const
{
    SFMatrix::GetHandlePtr returnValue(
        new  SFMatrix::GetHandle(
             &_sfRotation,
             this->getType().getFieldDesc(RotationFieldId),
             const_cast<PhysicsBodyBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr PhysicsBodyBase::editHandleRotation       (void)
{
    SFMatrix::EditHandlePtr returnValue(
        new  SFMatrix::EditHandle(
             &_sfRotation,
             this->getType().getFieldDesc(RotationFieldId),
             this));


    editSField(RotationFieldMask);

    return returnValue;
}

GetFieldHandlePtr PhysicsBodyBase::getHandleQuaternion      (void) const
{
    SFQuaternion::GetHandlePtr returnValue(
        new  SFQuaternion::GetHandle(
             &_sfQuaternion,
             this->getType().getFieldDesc(QuaternionFieldId),
             const_cast<PhysicsBodyBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr PhysicsBodyBase::editHandleQuaternion     (void)
{
    SFQuaternion::EditHandlePtr returnValue(
        new  SFQuaternion::EditHandle(
             &_sfQuaternion,
             this->getType().getFieldDesc(QuaternionFieldId),
             this));


    editSField(QuaternionFieldMask);

    return returnValue;
}

GetFieldHandlePtr PhysicsBodyBase::getHandleLinearVel       (void) const
{
    SFVec3f::GetHandlePtr returnValue(
        new  SFVec3f::GetHandle(
             &_sfLinearVel,
             this->getType().getFieldDesc(LinearVelFieldId),
             const_cast<PhysicsBodyBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr PhysicsBodyBase::editHandleLinearVel      (void)
{
    SFVec3f::EditHandlePtr returnValue(
        new  SFVec3f::EditHandle(
             &_sfLinearVel,
             this->getType().getFieldDesc(LinearVelFieldId),
             this));


    editSField(LinearVelFieldMask);

    return returnValue;
}

GetFieldHandlePtr PhysicsBodyBase::getHandleAngularVel      (void) const
{
    SFVec3f::GetHandlePtr returnValue(
        new  SFVec3f::GetHandle(
             &_sfAngularVel,
             this->getType().getFieldDesc(AngularVelFieldId),
             const_cast<PhysicsBodyBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr PhysicsBodyBase::editHandleAngularVel     (void)
{
    SFVec3f::EditHandlePtr returnValue(
        new  SFVec3f::EditHandle(
             &_sfAngularVel,
             this->getType().getFieldDesc(AngularVelFieldId),
             this));


    editSField(AngularVelFieldMask);

    return returnValue;
}

GetFieldHandlePtr PhysicsBodyBase::getHandleForce           (void) const
{
    SFVec3f::GetHandlePtr returnValue(
        new  SFVec3f::GetHandle(
             &_sfForce,
             this->getType().getFieldDesc(ForceFieldId),
             const_cast<PhysicsBodyBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr PhysicsBodyBase::editHandleForce          (void)
{
    SFVec3f::EditHandlePtr returnValue(
        new  SFVec3f::EditHandle(
             &_sfForce,
             this->getType().getFieldDesc(ForceFieldId),
             this));


    editSField(ForceFieldMask);

    return returnValue;
}

GetFieldHandlePtr PhysicsBodyBase::getHandleTorque          (void) const
{
    SFVec3f::GetHandlePtr returnValue(
        new  SFVec3f::GetHandle(
             &_sfTorque,
             this->getType().getFieldDesc(TorqueFieldId),
             const_cast<PhysicsBodyBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr PhysicsBodyBase::editHandleTorque         (void)
{
    SFVec3f::EditHandlePtr returnValue(
        new  SFVec3f::EditHandle(
             &_sfTorque,
             this->getType().getFieldDesc(TorqueFieldId),
             this));


    editSField(TorqueFieldMask);

    return returnValue;
}

GetFieldHandlePtr PhysicsBodyBase::getHandleMass            (void) const
{
    SFReal32::GetHandlePtr returnValue(
        new  SFReal32::GetHandle(
             &_sfMass,
             this->getType().getFieldDesc(MassFieldId),
             const_cast<PhysicsBodyBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr PhysicsBodyBase::editHandleMass           (void)
{
    SFReal32::EditHandlePtr returnValue(
        new  SFReal32::EditHandle(
             &_sfMass,
             this->getType().getFieldDesc(MassFieldId),
             this));


    editSField(MassFieldMask);

    return returnValue;
}

GetFieldHandlePtr PhysicsBodyBase::getHandleMassCenterOfGravity (void) const
{
    SFVec3f::GetHandlePtr returnValue(
        new  SFVec3f::GetHandle(
             &_sfMassCenterOfGravity,
             this->getType().getFieldDesc(MassCenterOfGravityFieldId),
             const_cast<PhysicsBodyBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr PhysicsBodyBase::editHandleMassCenterOfGravity(void)
{
    SFVec3f::EditHandlePtr returnValue(
        new  SFVec3f::EditHandle(
             &_sfMassCenterOfGravity,
             this->getType().getFieldDesc(MassCenterOfGravityFieldId),
             this));


    editSField(MassCenterOfGravityFieldMask);

    return returnValue;
}

GetFieldHandlePtr PhysicsBodyBase::getHandleMassInertiaTensor (void) const
{
    SFMatrix::GetHandlePtr returnValue(
        new  SFMatrix::GetHandle(
             &_sfMassInertiaTensor,
             this->getType().getFieldDesc(MassInertiaTensorFieldId),
             const_cast<PhysicsBodyBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr PhysicsBodyBase::editHandleMassInertiaTensor(void)
{
    SFMatrix::EditHandlePtr returnValue(
        new  SFMatrix::EditHandle(
             &_sfMassInertiaTensor,
             this->getType().getFieldDesc(MassInertiaTensorFieldId),
             this));


    editSField(MassInertiaTensorFieldMask);

    return returnValue;
}

GetFieldHandlePtr PhysicsBodyBase::getHandleAutoDisableFlag (void) const
{
    SFInt32::GetHandlePtr returnValue(
        new  SFInt32::GetHandle(
             &_sfAutoDisableFlag,
             this->getType().getFieldDesc(AutoDisableFlagFieldId),
             const_cast<PhysicsBodyBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr PhysicsBodyBase::editHandleAutoDisableFlag(void)
{
    SFInt32::EditHandlePtr returnValue(
        new  SFInt32::EditHandle(
             &_sfAutoDisableFlag,
             this->getType().getFieldDesc(AutoDisableFlagFieldId),
             this));


    editSField(AutoDisableFlagFieldMask);

    return returnValue;
}

GetFieldHandlePtr PhysicsBodyBase::getHandleAutoDisableLinearThreshold (void) const
{
    SFReal32::GetHandlePtr returnValue(
        new  SFReal32::GetHandle(
             &_sfAutoDisableLinearThreshold,
             this->getType().getFieldDesc(AutoDisableLinearThresholdFieldId),
             const_cast<PhysicsBodyBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr PhysicsBodyBase::editHandleAutoDisableLinearThreshold(void)
{
    SFReal32::EditHandlePtr returnValue(
        new  SFReal32::EditHandle(
             &_sfAutoDisableLinearThreshold,
             this->getType().getFieldDesc(AutoDisableLinearThresholdFieldId),
             this));


    editSField(AutoDisableLinearThresholdFieldMask);

    return returnValue;
}

GetFieldHandlePtr PhysicsBodyBase::getHandleAutoDisableAngularThreshold (void) const
{
    SFReal32::GetHandlePtr returnValue(
        new  SFReal32::GetHandle(
             &_sfAutoDisableAngularThreshold,
             this->getType().getFieldDesc(AutoDisableAngularThresholdFieldId),
             const_cast<PhysicsBodyBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr PhysicsBodyBase::editHandleAutoDisableAngularThreshold(void)
{
    SFReal32::EditHandlePtr returnValue(
        new  SFReal32::EditHandle(
             &_sfAutoDisableAngularThreshold,
             this->getType().getFieldDesc(AutoDisableAngularThresholdFieldId),
             this));


    editSField(AutoDisableAngularThresholdFieldMask);

    return returnValue;
}

GetFieldHandlePtr PhysicsBodyBase::getHandleAutoDisableSteps (void) const
{
    SFInt32::GetHandlePtr returnValue(
        new  SFInt32::GetHandle(
             &_sfAutoDisableSteps,
             this->getType().getFieldDesc(AutoDisableStepsFieldId),
             const_cast<PhysicsBodyBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr PhysicsBodyBase::editHandleAutoDisableSteps(void)
{
    SFInt32::EditHandlePtr returnValue(
        new  SFInt32::EditHandle(
             &_sfAutoDisableSteps,
             this->getType().getFieldDesc(AutoDisableStepsFieldId),
             this));


    editSField(AutoDisableStepsFieldMask);

    return returnValue;
}

GetFieldHandlePtr PhysicsBodyBase::getHandleAutoDisableTime (void) const
{
    SFReal32::GetHandlePtr returnValue(
        new  SFReal32::GetHandle(
             &_sfAutoDisableTime,
             this->getType().getFieldDesc(AutoDisableTimeFieldId),
             const_cast<PhysicsBodyBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr PhysicsBodyBase::editHandleAutoDisableTime(void)
{
    SFReal32::EditHandlePtr returnValue(
        new  SFReal32::EditHandle(
             &_sfAutoDisableTime,
             this->getType().getFieldDesc(AutoDisableTimeFieldId),
             this));


    editSField(AutoDisableTimeFieldMask);

    return returnValue;
}

GetFieldHandlePtr PhysicsBodyBase::getHandleFiniteRotationMode (void) const
{
    SFInt32::GetHandlePtr returnValue(
        new  SFInt32::GetHandle(
             &_sfFiniteRotationMode,
             this->getType().getFieldDesc(FiniteRotationModeFieldId),
             const_cast<PhysicsBodyBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr PhysicsBodyBase::editHandleFiniteRotationMode(void)
{
    SFInt32::EditHandlePtr returnValue(
        new  SFInt32::EditHandle(
             &_sfFiniteRotationMode,
             this->getType().getFieldDesc(FiniteRotationModeFieldId),
             this));


    editSField(FiniteRotationModeFieldMask);

    return returnValue;
}

GetFieldHandlePtr PhysicsBodyBase::getHandleFiniteRotationAxis (void) const
{
    SFVec3f::GetHandlePtr returnValue(
        new  SFVec3f::GetHandle(
             &_sfFiniteRotationAxis,
             this->getType().getFieldDesc(FiniteRotationAxisFieldId),
             const_cast<PhysicsBodyBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr PhysicsBodyBase::editHandleFiniteRotationAxis(void)
{
    SFVec3f::EditHandlePtr returnValue(
        new  SFVec3f::EditHandle(
             &_sfFiniteRotationAxis,
             this->getType().getFieldDesc(FiniteRotationAxisFieldId),
             this));


    editSField(FiniteRotationAxisFieldMask);

    return returnValue;
}

GetFieldHandlePtr PhysicsBodyBase::getHandleGravityMode     (void) const
{
    SFBool::GetHandlePtr returnValue(
        new  SFBool::GetHandle(
             &_sfGravityMode,
             this->getType().getFieldDesc(GravityModeFieldId),
             const_cast<PhysicsBodyBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr PhysicsBodyBase::editHandleGravityMode    (void)
{
    SFBool::EditHandlePtr returnValue(
        new  SFBool::EditHandle(
             &_sfGravityMode,
             this->getType().getFieldDesc(GravityModeFieldId),
             this));


    editSField(GravityModeFieldMask);

    return returnValue;
}

GetFieldHandlePtr PhysicsBodyBase::getHandleLinearDamping   (void) const
{
    SFReal32::GetHandlePtr returnValue(
        new  SFReal32::GetHandle(
             &_sfLinearDamping,
             this->getType().getFieldDesc(LinearDampingFieldId),
             const_cast<PhysicsBodyBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr PhysicsBodyBase::editHandleLinearDamping  (void)
{
    SFReal32::EditHandlePtr returnValue(
        new  SFReal32::EditHandle(
             &_sfLinearDamping,
             this->getType().getFieldDesc(LinearDampingFieldId),
             this));


    editSField(LinearDampingFieldMask);

    return returnValue;
}

GetFieldHandlePtr PhysicsBodyBase::getHandleAngularDamping  (void) const
{
    SFReal32::GetHandlePtr returnValue(
        new  SFReal32::GetHandle(
             &_sfAngularDamping,
             this->getType().getFieldDesc(AngularDampingFieldId),
             const_cast<PhysicsBodyBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr PhysicsBodyBase::editHandleAngularDamping (void)
{
    SFReal32::EditHandlePtr returnValue(
        new  SFReal32::EditHandle(
             &_sfAngularDamping,
             this->getType().getFieldDesc(AngularDampingFieldId),
             this));


    editSField(AngularDampingFieldMask);

    return returnValue;
}

GetFieldHandlePtr PhysicsBodyBase::getHandleLinearDampingThreshold (void) const
{
    SFReal32::GetHandlePtr returnValue(
        new  SFReal32::GetHandle(
             &_sfLinearDampingThreshold,
             this->getType().getFieldDesc(LinearDampingThresholdFieldId),
             const_cast<PhysicsBodyBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr PhysicsBodyBase::editHandleLinearDampingThreshold(void)
{
    SFReal32::EditHandlePtr returnValue(
        new  SFReal32::EditHandle(
             &_sfLinearDampingThreshold,
             this->getType().getFieldDesc(LinearDampingThresholdFieldId),
             this));


    editSField(LinearDampingThresholdFieldMask);

    return returnValue;
}

GetFieldHandlePtr PhysicsBodyBase::getHandleAngularDampingThreshold (void) const
{
    SFReal32::GetHandlePtr returnValue(
        new  SFReal32::GetHandle(
             &_sfAngularDampingThreshold,
             this->getType().getFieldDesc(AngularDampingThresholdFieldId),
             const_cast<PhysicsBodyBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr PhysicsBodyBase::editHandleAngularDampingThreshold(void)
{
    SFReal32::EditHandlePtr returnValue(
        new  SFReal32::EditHandle(
             &_sfAngularDampingThreshold,
             this->getType().getFieldDesc(AngularDampingThresholdFieldId),
             this));


    editSField(AngularDampingThresholdFieldMask);

    return returnValue;
}

GetFieldHandlePtr PhysicsBodyBase::getHandleMaxAngularSpeed (void) const
{
    SFReal32::GetHandlePtr returnValue(
        new  SFReal32::GetHandle(
             &_sfMaxAngularSpeed,
             this->getType().getFieldDesc(MaxAngularSpeedFieldId),
             const_cast<PhysicsBodyBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr PhysicsBodyBase::editHandleMaxAngularSpeed(void)
{
    SFReal32::EditHandlePtr returnValue(
        new  SFReal32::EditHandle(
             &_sfMaxAngularSpeed,
             this->getType().getFieldDesc(MaxAngularSpeedFieldId),
             this));


    editSField(MaxAngularSpeedFieldMask);

    return returnValue;
}

GetFieldHandlePtr PhysicsBodyBase::getHandleKinematic       (void) const
{
    SFBool::GetHandlePtr returnValue(
        new  SFBool::GetHandle(
             &_sfKinematic,
             this->getType().getFieldDesc(KinematicFieldId),
             const_cast<PhysicsBodyBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr PhysicsBodyBase::editHandleKinematic      (void)
{
    SFBool::EditHandlePtr returnValue(
        new  SFBool::EditHandle(
             &_sfKinematic,
             this->getType().getFieldDesc(KinematicFieldId),
             this));


    editSField(KinematicFieldMask);

    return returnValue;
}

GetFieldHandlePtr PhysicsBodyBase::getHandleWorld           (void) const
{
    SFUnrecPhysicsWorldPtr::GetHandlePtr returnValue(
        new  SFUnrecPhysicsWorldPtr::GetHandle(
             &_sfWorld,
             this->getType().getFieldDesc(WorldFieldId),
             const_cast<PhysicsBodyBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr PhysicsBodyBase::editHandleWorld          (void)
{
    SFUnrecPhysicsWorldPtr::EditHandlePtr returnValue(
        new  SFUnrecPhysicsWorldPtr::EditHandle(
             &_sfWorld,
             this->getType().getFieldDesc(WorldFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&PhysicsBody::setWorld,
                    static_cast<PhysicsBody *>(this), _1));

    editSField(WorldFieldMask);

    return returnValue;
}


#ifdef OSG_MT_CPTR_ASPECT
void PhysicsBodyBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    PhysicsBody *pThis = static_cast<PhysicsBody *>(this);

    pThis->execSync(static_cast<PhysicsBody *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif


#ifdef OSG_MT_CPTR_ASPECT
FieldContainer *PhysicsBodyBase::createAspectCopy(
    const FieldContainer *pRefAspect) const
{
    PhysicsBody *returnValue;

    newAspectCopy(returnValue,
                  dynamic_cast<const PhysicsBody *>(pRefAspect),
                  dynamic_cast<const PhysicsBody *>(this));

    return returnValue;
}
#endif

void PhysicsBodyBase::resolveLinks(void)
{
    Inherited::resolveLinks();

    static_cast<PhysicsBody *>(this)->setWorld(NULL);


}


OSG_END_NAMESPACE
