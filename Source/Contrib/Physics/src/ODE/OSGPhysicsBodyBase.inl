/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *   contact:  David Kabala (djkabala@gmail.com),  Behboud Kalantary         *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class PhysicsBody!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

OSG_BEGIN_NAMESPACE


//! access the type of the class
inline
OSG::FieldContainerType &PhysicsBodyBase::getClassType(void)
{
    return _type;
}

//! access the numerical type of the class
inline
OSG::UInt32 PhysicsBodyBase::getClassTypeId(void)
{
    return _type.getId();
}

inline
OSG::UInt16 PhysicsBodyBase::getClassGroupId(void)
{
    return _type.getGroupId();
}

/*------------------------------ get -----------------------------------*/

//! Get the value of the PhysicsBody::_sfPosition field.

inline
Vec3f &PhysicsBodyBase::editPosition(void)
{
    editSField(PositionFieldMask);

    return _sfPosition.getValue();
}

//! Get the value of the PhysicsBody::_sfPosition field.
inline
const Vec3f &PhysicsBodyBase::getPosition(void) const
{
    return _sfPosition.getValue();
}

//! Set the value of the PhysicsBody::_sfPosition field.
inline
void PhysicsBodyBase::setPosition(const Vec3f &value)
{
    editSField(PositionFieldMask);

    _sfPosition.setValue(value);
}
//! Get the value of the PhysicsBody::_sfRotation field.

inline
Matrix &PhysicsBodyBase::editRotation(void)
{
    editSField(RotationFieldMask);

    return _sfRotation.getValue();
}

//! Get the value of the PhysicsBody::_sfRotation field.
inline
const Matrix &PhysicsBodyBase::getRotation(void) const
{
    return _sfRotation.getValue();
}

//! Set the value of the PhysicsBody::_sfRotation field.
inline
void PhysicsBodyBase::setRotation(const Matrix &value)
{
    editSField(RotationFieldMask);

    _sfRotation.setValue(value);
}
//! Get the value of the PhysicsBody::_sfQuaternion field.

inline
Quaternion &PhysicsBodyBase::editQuaternion(void)
{
    editSField(QuaternionFieldMask);

    return _sfQuaternion.getValue();
}

//! Get the value of the PhysicsBody::_sfQuaternion field.
inline
const Quaternion &PhysicsBodyBase::getQuaternion(void) const
{
    return _sfQuaternion.getValue();
}

//! Set the value of the PhysicsBody::_sfQuaternion field.
inline
void PhysicsBodyBase::setQuaternion(const Quaternion &value)
{
    editSField(QuaternionFieldMask);

    _sfQuaternion.setValue(value);
}
//! Get the value of the PhysicsBody::_sfLinearVel field.

inline
Vec3f &PhysicsBodyBase::editLinearVel(void)
{
    editSField(LinearVelFieldMask);

    return _sfLinearVel.getValue();
}

//! Get the value of the PhysicsBody::_sfLinearVel field.
inline
const Vec3f &PhysicsBodyBase::getLinearVel(void) const
{
    return _sfLinearVel.getValue();
}

//! Set the value of the PhysicsBody::_sfLinearVel field.
inline
void PhysicsBodyBase::setLinearVel(const Vec3f &value)
{
    editSField(LinearVelFieldMask);

    _sfLinearVel.setValue(value);
}
//! Get the value of the PhysicsBody::_sfAngularVel field.

inline
Vec3f &PhysicsBodyBase::editAngularVel(void)
{
    editSField(AngularVelFieldMask);

    return _sfAngularVel.getValue();
}

//! Get the value of the PhysicsBody::_sfAngularVel field.
inline
const Vec3f &PhysicsBodyBase::getAngularVel(void) const
{
    return _sfAngularVel.getValue();
}

//! Set the value of the PhysicsBody::_sfAngularVel field.
inline
void PhysicsBodyBase::setAngularVel(const Vec3f &value)
{
    editSField(AngularVelFieldMask);

    _sfAngularVel.setValue(value);
}
//! Get the value of the PhysicsBody::_sfForce field.

inline
Vec3f &PhysicsBodyBase::editForce(void)
{
    editSField(ForceFieldMask);

    return _sfForce.getValue();
}

//! Get the value of the PhysicsBody::_sfForce field.
inline
const Vec3f &PhysicsBodyBase::getForce(void) const
{
    return _sfForce.getValue();
}

//! Set the value of the PhysicsBody::_sfForce field.
inline
void PhysicsBodyBase::setForce(const Vec3f &value)
{
    editSField(ForceFieldMask);

    _sfForce.setValue(value);
}
//! Get the value of the PhysicsBody::_sfTorque field.

inline
Vec3f &PhysicsBodyBase::editTorque(void)
{
    editSField(TorqueFieldMask);

    return _sfTorque.getValue();
}

//! Get the value of the PhysicsBody::_sfTorque field.
inline
const Vec3f &PhysicsBodyBase::getTorque(void) const
{
    return _sfTorque.getValue();
}

//! Set the value of the PhysicsBody::_sfTorque field.
inline
void PhysicsBodyBase::setTorque(const Vec3f &value)
{
    editSField(TorqueFieldMask);

    _sfTorque.setValue(value);
}
//! Get the value of the PhysicsBody::_sfMass field.

inline
Real32 &PhysicsBodyBase::editMass(void)
{
    editSField(MassFieldMask);

    return _sfMass.getValue();
}

//! Get the value of the PhysicsBody::_sfMass field.
inline
      Real32  PhysicsBodyBase::getMass(void) const
{
    return _sfMass.getValue();
}

//! Set the value of the PhysicsBody::_sfMass field.
inline
void PhysicsBodyBase::setMass(const Real32 value)
{
    editSField(MassFieldMask);

    _sfMass.setValue(value);
}
//! Get the value of the PhysicsBody::_sfMassCenterOfGravity field.

inline
Vec3f &PhysicsBodyBase::editMassCenterOfGravity(void)
{
    editSField(MassCenterOfGravityFieldMask);

    return _sfMassCenterOfGravity.getValue();
}

//! Get the value of the PhysicsBody::_sfMassCenterOfGravity field.
inline
const Vec3f &PhysicsBodyBase::getMassCenterOfGravity(void) const
{
    return _sfMassCenterOfGravity.getValue();
}

//! Set the value of the PhysicsBody::_sfMassCenterOfGravity field.
inline
void PhysicsBodyBase::setMassCenterOfGravity(const Vec3f &value)
{
    editSField(MassCenterOfGravityFieldMask);

    _sfMassCenterOfGravity.setValue(value);
}
//! Get the value of the PhysicsBody::_sfMassInertiaTensor field.

inline
Matrix &PhysicsBodyBase::editMassInertiaTensor(void)
{
    editSField(MassInertiaTensorFieldMask);

    return _sfMassInertiaTensor.getValue();
}

//! Get the value of the PhysicsBody::_sfMassInertiaTensor field.
inline
const Matrix &PhysicsBodyBase::getMassInertiaTensor(void) const
{
    return _sfMassInertiaTensor.getValue();
}

//! Set the value of the PhysicsBody::_sfMassInertiaTensor field.
inline
void PhysicsBodyBase::setMassInertiaTensor(const Matrix &value)
{
    editSField(MassInertiaTensorFieldMask);

    _sfMassInertiaTensor.setValue(value);
}
//! Get the value of the PhysicsBody::_sfAutoDisableFlag field.

inline
Int32 &PhysicsBodyBase::editAutoDisableFlag(void)
{
    editSField(AutoDisableFlagFieldMask);

    return _sfAutoDisableFlag.getValue();
}

//! Get the value of the PhysicsBody::_sfAutoDisableFlag field.
inline
      Int32  PhysicsBodyBase::getAutoDisableFlag(void) const
{
    return _sfAutoDisableFlag.getValue();
}

//! Set the value of the PhysicsBody::_sfAutoDisableFlag field.
inline
void PhysicsBodyBase::setAutoDisableFlag(const Int32 value)
{
    editSField(AutoDisableFlagFieldMask);

    _sfAutoDisableFlag.setValue(value);
}
//! Get the value of the PhysicsBody::_sfAutoDisableLinearThreshold field.

inline
Real32 &PhysicsBodyBase::editAutoDisableLinearThreshold(void)
{
    editSField(AutoDisableLinearThresholdFieldMask);

    return _sfAutoDisableLinearThreshold.getValue();
}

//! Get the value of the PhysicsBody::_sfAutoDisableLinearThreshold field.
inline
      Real32  PhysicsBodyBase::getAutoDisableLinearThreshold(void) const
{
    return _sfAutoDisableLinearThreshold.getValue();
}

//! Set the value of the PhysicsBody::_sfAutoDisableLinearThreshold field.
inline
void PhysicsBodyBase::setAutoDisableLinearThreshold(const Real32 value)
{
    editSField(AutoDisableLinearThresholdFieldMask);

    _sfAutoDisableLinearThreshold.setValue(value);
}
//! Get the value of the PhysicsBody::_sfAutoDisableAngularThreshold field.

inline
Real32 &PhysicsBodyBase::editAutoDisableAngularThreshold(void)
{
    editSField(AutoDisableAngularThresholdFieldMask);

    return _sfAutoDisableAngularThreshold.getValue();
}

//! Get the value of the PhysicsBody::_sfAutoDisableAngularThreshold field.
inline
      Real32  PhysicsBodyBase::getAutoDisableAngularThreshold(void) const
{
    return _sfAutoDisableAngularThreshold.getValue();
}

//! Set the value of the PhysicsBody::_sfAutoDisableAngularThreshold field.
inline
void PhysicsBodyBase::setAutoDisableAngularThreshold(const Real32 value)
{
    editSField(AutoDisableAngularThresholdFieldMask);

    _sfAutoDisableAngularThreshold.setValue(value);
}
//! Get the value of the PhysicsBody::_sfAutoDisableSteps field.

inline
Int32 &PhysicsBodyBase::editAutoDisableSteps(void)
{
    editSField(AutoDisableStepsFieldMask);

    return _sfAutoDisableSteps.getValue();
}

//! Get the value of the PhysicsBody::_sfAutoDisableSteps field.
inline
      Int32  PhysicsBodyBase::getAutoDisableSteps(void) const
{
    return _sfAutoDisableSteps.getValue();
}

//! Set the value of the PhysicsBody::_sfAutoDisableSteps field.
inline
void PhysicsBodyBase::setAutoDisableSteps(const Int32 value)
{
    editSField(AutoDisableStepsFieldMask);

    _sfAutoDisableSteps.setValue(value);
}
//! Get the value of the PhysicsBody::_sfAutoDisableTime field.

inline
Real32 &PhysicsBodyBase::editAutoDisableTime(void)
{
    editSField(AutoDisableTimeFieldMask);

    return _sfAutoDisableTime.getValue();
}

//! Get the value of the PhysicsBody::_sfAutoDisableTime field.
inline
      Real32  PhysicsBodyBase::getAutoDisableTime(void) const
{
    return _sfAutoDisableTime.getValue();
}

//! Set the value of the PhysicsBody::_sfAutoDisableTime field.
inline
void PhysicsBodyBase::setAutoDisableTime(const Real32 value)
{
    editSField(AutoDisableTimeFieldMask);

    _sfAutoDisableTime.setValue(value);
}
//! Get the value of the PhysicsBody::_sfFiniteRotationMode field.

inline
Int32 &PhysicsBodyBase::editFiniteRotationMode(void)
{
    editSField(FiniteRotationModeFieldMask);

    return _sfFiniteRotationMode.getValue();
}

//! Get the value of the PhysicsBody::_sfFiniteRotationMode field.
inline
      Int32  PhysicsBodyBase::getFiniteRotationMode(void) const
{
    return _sfFiniteRotationMode.getValue();
}

//! Set the value of the PhysicsBody::_sfFiniteRotationMode field.
inline
void PhysicsBodyBase::setFiniteRotationMode(const Int32 value)
{
    editSField(FiniteRotationModeFieldMask);

    _sfFiniteRotationMode.setValue(value);
}
//! Get the value of the PhysicsBody::_sfFiniteRotationAxis field.

inline
Vec3f &PhysicsBodyBase::editFiniteRotationAxis(void)
{
    editSField(FiniteRotationAxisFieldMask);

    return _sfFiniteRotationAxis.getValue();
}

//! Get the value of the PhysicsBody::_sfFiniteRotationAxis field.
inline
const Vec3f &PhysicsBodyBase::getFiniteRotationAxis(void) const
{
    return _sfFiniteRotationAxis.getValue();
}

//! Set the value of the PhysicsBody::_sfFiniteRotationAxis field.
inline
void PhysicsBodyBase::setFiniteRotationAxis(const Vec3f &value)
{
    editSField(FiniteRotationAxisFieldMask);

    _sfFiniteRotationAxis.setValue(value);
}
//! Get the value of the PhysicsBody::_sfGravityMode field.

inline
bool &PhysicsBodyBase::editGravityMode(void)
{
    editSField(GravityModeFieldMask);

    return _sfGravityMode.getValue();
}

//! Get the value of the PhysicsBody::_sfGravityMode field.
inline
      bool  PhysicsBodyBase::getGravityMode(void) const
{
    return _sfGravityMode.getValue();
}

//! Set the value of the PhysicsBody::_sfGravityMode field.
inline
void PhysicsBodyBase::setGravityMode(const bool value)
{
    editSField(GravityModeFieldMask);

    _sfGravityMode.setValue(value);
}
//! Get the value of the PhysicsBody::_sfLinearDamping field.

inline
Real32 &PhysicsBodyBase::editLinearDamping(void)
{
    editSField(LinearDampingFieldMask);

    return _sfLinearDamping.getValue();
}

//! Get the value of the PhysicsBody::_sfLinearDamping field.
inline
      Real32  PhysicsBodyBase::getLinearDamping(void) const
{
    return _sfLinearDamping.getValue();
}

//! Set the value of the PhysicsBody::_sfLinearDamping field.
inline
void PhysicsBodyBase::setLinearDamping(const Real32 value)
{
    editSField(LinearDampingFieldMask);

    _sfLinearDamping.setValue(value);
}
//! Get the value of the PhysicsBody::_sfAngularDamping field.

inline
Real32 &PhysicsBodyBase::editAngularDamping(void)
{
    editSField(AngularDampingFieldMask);

    return _sfAngularDamping.getValue();
}

//! Get the value of the PhysicsBody::_sfAngularDamping field.
inline
      Real32  PhysicsBodyBase::getAngularDamping(void) const
{
    return _sfAngularDamping.getValue();
}

//! Set the value of the PhysicsBody::_sfAngularDamping field.
inline
void PhysicsBodyBase::setAngularDamping(const Real32 value)
{
    editSField(AngularDampingFieldMask);

    _sfAngularDamping.setValue(value);
}
//! Get the value of the PhysicsBody::_sfLinearDampingThreshold field.

inline
Real32 &PhysicsBodyBase::editLinearDampingThreshold(void)
{
    editSField(LinearDampingThresholdFieldMask);

    return _sfLinearDampingThreshold.getValue();
}

//! Get the value of the PhysicsBody::_sfLinearDampingThreshold field.
inline
      Real32  PhysicsBodyBase::getLinearDampingThreshold(void) const
{
    return _sfLinearDampingThreshold.getValue();
}

//! Set the value of the PhysicsBody::_sfLinearDampingThreshold field.
inline
void PhysicsBodyBase::setLinearDampingThreshold(const Real32 value)
{
    editSField(LinearDampingThresholdFieldMask);

    _sfLinearDampingThreshold.setValue(value);
}
//! Get the value of the PhysicsBody::_sfAngularDampingThreshold field.

inline
Real32 &PhysicsBodyBase::editAngularDampingThreshold(void)
{
    editSField(AngularDampingThresholdFieldMask);

    return _sfAngularDampingThreshold.getValue();
}

//! Get the value of the PhysicsBody::_sfAngularDampingThreshold field.
inline
      Real32  PhysicsBodyBase::getAngularDampingThreshold(void) const
{
    return _sfAngularDampingThreshold.getValue();
}

//! Set the value of the PhysicsBody::_sfAngularDampingThreshold field.
inline
void PhysicsBodyBase::setAngularDampingThreshold(const Real32 value)
{
    editSField(AngularDampingThresholdFieldMask);

    _sfAngularDampingThreshold.setValue(value);
}
//! Get the value of the PhysicsBody::_sfMaxAngularSpeed field.

inline
Real32 &PhysicsBodyBase::editMaxAngularSpeed(void)
{
    editSField(MaxAngularSpeedFieldMask);

    return _sfMaxAngularSpeed.getValue();
}

//! Get the value of the PhysicsBody::_sfMaxAngularSpeed field.
inline
      Real32  PhysicsBodyBase::getMaxAngularSpeed(void) const
{
    return _sfMaxAngularSpeed.getValue();
}

//! Set the value of the PhysicsBody::_sfMaxAngularSpeed field.
inline
void PhysicsBodyBase::setMaxAngularSpeed(const Real32 value)
{
    editSField(MaxAngularSpeedFieldMask);

    _sfMaxAngularSpeed.setValue(value);
}
//! Get the value of the PhysicsBody::_sfKinematic field.

inline
bool &PhysicsBodyBase::editKinematic(void)
{
    editSField(KinematicFieldMask);

    return _sfKinematic.getValue();
}

//! Get the value of the PhysicsBody::_sfKinematic field.
inline
      bool  PhysicsBodyBase::getKinematic(void) const
{
    return _sfKinematic.getValue();
}

//! Set the value of the PhysicsBody::_sfKinematic field.
inline
void PhysicsBodyBase::setKinematic(const bool value)
{
    editSField(KinematicFieldMask);

    _sfKinematic.setValue(value);
}

//! Get the value of the PhysicsBody::_sfWorld field.
inline
PhysicsWorld * PhysicsBodyBase::getWorld(void) const
{
    return _sfWorld.getValue();
}

//! Set the value of the PhysicsBody::_sfWorld field.
inline
void PhysicsBodyBase::setWorld(PhysicsWorld * const value)
{
    editSField(WorldFieldMask);

    _sfWorld.setValue(value);
}


#ifdef OSG_MT_CPTR_ASPECT
inline
void PhysicsBodyBase::execSync (      PhysicsBodyBase *pFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    Inherited::execSync(pFrom, whichField, oOffsets, syncMode, uiSyncInfo);

    if(FieldBits::NoField != (PositionFieldMask & whichField))
        _sfPosition.syncWith(pFrom->_sfPosition);

    if(FieldBits::NoField != (RotationFieldMask & whichField))
        _sfRotation.syncWith(pFrom->_sfRotation);

    if(FieldBits::NoField != (QuaternionFieldMask & whichField))
        _sfQuaternion.syncWith(pFrom->_sfQuaternion);

    if(FieldBits::NoField != (LinearVelFieldMask & whichField))
        _sfLinearVel.syncWith(pFrom->_sfLinearVel);

    if(FieldBits::NoField != (AngularVelFieldMask & whichField))
        _sfAngularVel.syncWith(pFrom->_sfAngularVel);

    if(FieldBits::NoField != (ForceFieldMask & whichField))
        _sfForce.syncWith(pFrom->_sfForce);

    if(FieldBits::NoField != (TorqueFieldMask & whichField))
        _sfTorque.syncWith(pFrom->_sfTorque);

    if(FieldBits::NoField != (MassFieldMask & whichField))
        _sfMass.syncWith(pFrom->_sfMass);

    if(FieldBits::NoField != (MassCenterOfGravityFieldMask & whichField))
        _sfMassCenterOfGravity.syncWith(pFrom->_sfMassCenterOfGravity);

    if(FieldBits::NoField != (MassInertiaTensorFieldMask & whichField))
        _sfMassInertiaTensor.syncWith(pFrom->_sfMassInertiaTensor);

    if(FieldBits::NoField != (AutoDisableFlagFieldMask & whichField))
        _sfAutoDisableFlag.syncWith(pFrom->_sfAutoDisableFlag);

    if(FieldBits::NoField != (AutoDisableLinearThresholdFieldMask & whichField))
        _sfAutoDisableLinearThreshold.syncWith(pFrom->_sfAutoDisableLinearThreshold);

    if(FieldBits::NoField != (AutoDisableAngularThresholdFieldMask & whichField))
        _sfAutoDisableAngularThreshold.syncWith(pFrom->_sfAutoDisableAngularThreshold);

    if(FieldBits::NoField != (AutoDisableStepsFieldMask & whichField))
        _sfAutoDisableSteps.syncWith(pFrom->_sfAutoDisableSteps);

    if(FieldBits::NoField != (AutoDisableTimeFieldMask & whichField))
        _sfAutoDisableTime.syncWith(pFrom->_sfAutoDisableTime);

    if(FieldBits::NoField != (FiniteRotationModeFieldMask & whichField))
        _sfFiniteRotationMode.syncWith(pFrom->_sfFiniteRotationMode);

    if(FieldBits::NoField != (FiniteRotationAxisFieldMask & whichField))
        _sfFiniteRotationAxis.syncWith(pFrom->_sfFiniteRotationAxis);

    if(FieldBits::NoField != (GravityModeFieldMask & whichField))
        _sfGravityMode.syncWith(pFrom->_sfGravityMode);

    if(FieldBits::NoField != (LinearDampingFieldMask & whichField))
        _sfLinearDamping.syncWith(pFrom->_sfLinearDamping);

    if(FieldBits::NoField != (AngularDampingFieldMask & whichField))
        _sfAngularDamping.syncWith(pFrom->_sfAngularDamping);

    if(FieldBits::NoField != (LinearDampingThresholdFieldMask & whichField))
        _sfLinearDampingThreshold.syncWith(pFrom->_sfLinearDampingThreshold);

    if(FieldBits::NoField != (AngularDampingThresholdFieldMask & whichField))
        _sfAngularDampingThreshold.syncWith(pFrom->_sfAngularDampingThreshold);

    if(FieldBits::NoField != (MaxAngularSpeedFieldMask & whichField))
        _sfMaxAngularSpeed.syncWith(pFrom->_sfMaxAngularSpeed);

    if(FieldBits::NoField != (KinematicFieldMask & whichField))
        _sfKinematic.syncWith(pFrom->_sfKinematic);

    if(FieldBits::NoField != (WorldFieldMask & whichField))
        _sfWorld.syncWith(pFrom->_sfWorld);
}
#endif


inline
const Char8 *PhysicsBodyBase::getClassname(void)
{
    return "PhysicsBody";
}


OSG_GEN_CONTAINERPTR(PhysicsBody);

OSG_END_NAMESPACE

