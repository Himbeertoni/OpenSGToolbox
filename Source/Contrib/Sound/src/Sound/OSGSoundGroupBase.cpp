/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact:  David Kabala (djkabala@gmail.com)                             *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class SoundGroup!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>
#include <boost/assign/list_of.hpp>

#include "OSGConfig.h"



#include "OSGSound.h"                   // Sounds Class

#include "OSGSoundGroupBase.h"
#include "OSGSoundGroup.h"

#include <boost/bind.hpp>

#ifdef WIN32 // turn off 'this' : used in base member initializer list warning
#pragma warning(disable:4355)
#endif

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::SoundGroup
    A SoundGroup.
 */

/***************************************************************************\
 *                        Field Documentation                              *
\***************************************************************************/

/*! \var Sound *         SoundGroupBase::_mfSounds
    
*/


/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldTraits<SoundGroup *>::_type("SoundGroupPtr", "AttachmentContainerPtr");
#endif

OSG_FIELDTRAITS_GETTYPE(SoundGroup *)

OSG_EXPORT_PTR_SFIELD_FULL(PointerSField,
                           SoundGroup *,
                           0);

OSG_EXPORT_PTR_MFIELD_FULL(PointerMField,
                           SoundGroup *,
                           0);

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

void SoundGroupBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new MFUnrecSoundPtr::Description(
        MFUnrecSoundPtr::getClassType(),
        "Sounds",
        "",
        SoundsFieldId, SoundsFieldMask,
        false,
        (Field::MFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&SoundGroup::editHandleSounds),
        static_cast<FieldGetMethodSig >(&SoundGroup::getHandleSounds));

    oType.addInitialDesc(pDesc);
}


SoundGroupBase::TypeObject SoundGroupBase::_type(
    SoundGroupBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    0,
    reinterpret_cast<PrototypeCreateF>(&SoundGroupBase::createEmptyLocal),
    SoundGroup::initMethod,
    SoundGroup::exitMethod,
    reinterpret_cast<InitalInsertDescFunc>(&SoundGroup::classDescInserter),
    false,
    0,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "\tname=\"SoundGroup\"\n"
    "\tparent=\"AttachmentContainer\"\n"
    "    library=\"ContribSound\"\n"
    "    pointerfieldtypes=\"both\"\n"
    "    structure=\"concrete\"\n"
    "    systemcomponent=\"true\"\n"
    "    parentsystemcomponent=\"true\"\n"
    "    decoratable=\"false\"\n"
    "    useLocalIncludes=\"false\"\n"
    "    isNodeCore=\"false\"\n"
    "    authors=\"David Kabala (djkabala@gmail.com)                             \"\n"
    ">\n"
    "A SoundGroup.\n"
    "\t<Field\n"
    "\t\tname=\"Sounds\"\n"
    "\t\ttype=\"Sound\"\n"
    "        category=\"pointer\"\n"
    "\t\tcardinality=\"multi\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"NULL\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "</FieldContainer>\n",
    "A SoundGroup.\n"
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &SoundGroupBase::getType(void)
{
    return _type;
}

const FieldContainerType &SoundGroupBase::getType(void) const
{
    return _type;
}

UInt32 SoundGroupBase::getContainerSize(void) const
{
    return sizeof(SoundGroup);
}

/*------------------------- decorator get ------------------------------*/


//! Get the SoundGroup::_mfSounds field.
const MFUnrecSoundPtr *SoundGroupBase::getMFSounds(void) const
{
    return &_mfSounds;
}

MFUnrecSoundPtr     *SoundGroupBase::editMFSounds         (void)
{
    editMField(SoundsFieldMask, _mfSounds);

    return &_mfSounds;
}



void SoundGroupBase::pushToSounds(Sound * const value)
{
    editMField(SoundsFieldMask, _mfSounds);

    _mfSounds.push_back(value);
}

void SoundGroupBase::assignSounds   (const MFUnrecSoundPtr   &value)
{
    MFUnrecSoundPtr  ::const_iterator elemIt  =
        value.begin();
    MFUnrecSoundPtr  ::const_iterator elemEnd =
        value.end  ();

    static_cast<SoundGroup *>(this)->clearSounds();

    while(elemIt != elemEnd)
    {
        this->pushToSounds(*elemIt);

        ++elemIt;
    }
}

void SoundGroupBase::removeFromSounds(UInt32 uiIndex)
{
    if(uiIndex < _mfSounds.size())
    {
        editMField(SoundsFieldMask, _mfSounds);

        _mfSounds.erase(uiIndex);
    }
}

void SoundGroupBase::removeObjFromSounds(Sound * const value)
{
    Int32 iElemIdx = _mfSounds.findIndex(value);

    if(iElemIdx != -1)
    {
        editMField(SoundsFieldMask, _mfSounds);

        _mfSounds.erase(iElemIdx);
    }
}
void SoundGroupBase::clearSounds(void)
{
    editMField(SoundsFieldMask, _mfSounds);


    _mfSounds.clear();
}



/*------------------------------ access -----------------------------------*/

UInt32 SoundGroupBase::getBinSize(ConstFieldMaskArg whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (SoundsFieldMask & whichField))
    {
        returnValue += _mfSounds.getBinSize();
    }

    return returnValue;
}

void SoundGroupBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (SoundsFieldMask & whichField))
    {
        _mfSounds.copyToBin(pMem);
    }
}

void SoundGroupBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (SoundsFieldMask & whichField))
    {
        _mfSounds.copyFromBin(pMem);
    }
}

//! create a new instance of the class
SoundGroupTransitPtr SoundGroupBase::createLocal(BitVector bFlags)
{
    SoundGroupTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyLocal(bFlags);

        fc = dynamic_pointer_cast<SoundGroup>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class, copy the container flags
SoundGroupTransitPtr SoundGroupBase::createDependent(BitVector bFlags)
{
    SoundGroupTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyDependent(bFlags);

        fc = dynamic_pointer_cast<SoundGroup>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class
SoundGroupTransitPtr SoundGroupBase::create(void)
{
    SoundGroupTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopy();

        fc = dynamic_pointer_cast<SoundGroup>(tmpPtr);
    }

    return fc;
}

SoundGroup *SoundGroupBase::createEmptyLocal(BitVector bFlags)
{
    SoundGroup *returnValue;

    newPtr<SoundGroup>(returnValue, bFlags);

    returnValue->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

//! create an empty new instance of the class, do not copy the prototype
SoundGroup *SoundGroupBase::createEmpty(void)
{
    SoundGroup *returnValue;

    newPtr<SoundGroup>(returnValue, Thread::getCurrentLocalFlags());

    returnValue->_pFieldFlags->_bNamespaceMask &=
        ~Thread::getCurrentLocalFlags();

    return returnValue;
}


FieldContainerTransitPtr SoundGroupBase::shallowCopyLocal(
    BitVector bFlags) const
{
    SoundGroup *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const SoundGroup *>(this), bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

FieldContainerTransitPtr SoundGroupBase::shallowCopyDependent(
    BitVector bFlags) const
{
    SoundGroup *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const SoundGroup *>(this), ~bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask = bFlags;

    return returnValue;
}

FieldContainerTransitPtr SoundGroupBase::shallowCopy(void) const
{
    SoundGroup *tmpPtr;

    newPtr(tmpPtr,
           dynamic_cast<const SoundGroup *>(this),
           Thread::getCurrentLocalFlags());

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~Thread::getCurrentLocalFlags();

    FieldContainerTransitPtr returnValue(tmpPtr);

    return returnValue;
}




/*------------------------- constructors ----------------------------------*/

SoundGroupBase::SoundGroupBase(void) :
    Inherited(),
    _mfSounds                 ()
{
}

SoundGroupBase::SoundGroupBase(const SoundGroupBase &source) :
    Inherited(source),
    _mfSounds                 ()
{
}


/*-------------------------- destructors ----------------------------------*/

SoundGroupBase::~SoundGroupBase(void)
{
}

void SoundGroupBase::onCreate(const SoundGroup *source)
{
    Inherited::onCreate(source);

    if(source != NULL)
    {
        SoundGroup *pThis = static_cast<SoundGroup *>(this);

        MFUnrecSoundPtr::const_iterator SoundsIt  =
            source->_mfSounds.begin();
        MFUnrecSoundPtr::const_iterator SoundsEnd =
            source->_mfSounds.end  ();

        while(SoundsIt != SoundsEnd)
        {
            pThis->pushToSounds(*SoundsIt);

            ++SoundsIt;
        }
    }
}

GetFieldHandlePtr SoundGroupBase::getHandleSounds          (void) const
{
    MFUnrecSoundPtr::GetHandlePtr returnValue(
        new  MFUnrecSoundPtr::GetHandle(
             &_mfSounds,
             this->getType().getFieldDesc(SoundsFieldId),
             const_cast<SoundGroupBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr SoundGroupBase::editHandleSounds         (void)
{
    MFUnrecSoundPtr::EditHandlePtr returnValue(
        new  MFUnrecSoundPtr::EditHandle(
             &_mfSounds,
             this->getType().getFieldDesc(SoundsFieldId),
             this));

    returnValue->setAddMethod(
        boost::bind(&SoundGroup::pushToSounds,
                    static_cast<SoundGroup *>(this), _1));
    returnValue->setRemoveMethod(
        boost::bind(&SoundGroup::removeFromSounds,
                    static_cast<SoundGroup *>(this), _1));
    returnValue->setRemoveObjMethod(
        boost::bind(&SoundGroup::removeObjFromSounds,
                    static_cast<SoundGroup *>(this), _1));
    returnValue->setClearMethod(
        boost::bind(&SoundGroup::clearSounds,
                    static_cast<SoundGroup *>(this)));

    editMField(SoundsFieldMask, _mfSounds);

    return returnValue;
}


#ifdef OSG_MT_CPTR_ASPECT
void SoundGroupBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    SoundGroup *pThis = static_cast<SoundGroup *>(this);

    pThis->execSync(static_cast<SoundGroup *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif


#ifdef OSG_MT_CPTR_ASPECT
FieldContainer *SoundGroupBase::createAspectCopy(
    const FieldContainer *pRefAspect) const
{
    SoundGroup *returnValue;

    newAspectCopy(returnValue,
                  dynamic_cast<const SoundGroup *>(pRefAspect),
                  dynamic_cast<const SoundGroup *>(this));

    return returnValue;
}
#endif

void SoundGroupBase::resolveLinks(void)
{
    Inherited::resolveLinks();

    static_cast<SoundGroup *>(this)->clearSounds();


}


OSG_END_NAMESPACE
