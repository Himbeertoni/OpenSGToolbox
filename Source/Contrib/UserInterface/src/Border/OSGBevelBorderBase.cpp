/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact:  David Kabala (djkabala@gmail.com)                             *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class BevelBorder!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>
#include <boost/assign/list_of.hpp>

#include "OSGConfig.h"




#include "OSGBevelBorderBase.h"
#include "OSGBevelBorder.h"

#include <boost/bind.hpp>

#ifdef WIN32 // turn off 'this' : used in base member initializer list warning
#pragma warning(disable:4355)
#endif

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::BevelBorder
    UI Bevel Border.
 */

/***************************************************************************\
 *                        Field Documentation                              *
\***************************************************************************/

/*! \var Color4f         BevelBorderBase::_sfHighlightInner
    
*/

/*! \var Real32          BevelBorderBase::_sfWidth
    
*/

/*! \var Color4f         BevelBorderBase::_sfHighlightOuter
    
*/

/*! \var Color4f         BevelBorderBase::_sfShadowInner
    
*/

/*! \var Color4f         BevelBorderBase::_sfShadowOuter
    
*/

/*! \var bool            BevelBorderBase::_sfRaised
    
*/


/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldTraits<BevelBorder *>::_type("BevelBorderPtr", "BorderPtr");
#endif

OSG_FIELDTRAITS_GETTYPE(BevelBorder *)

OSG_EXPORT_PTR_SFIELD_FULL(PointerSField,
                           BevelBorder *,
                           0);

OSG_EXPORT_PTR_MFIELD_FULL(PointerMField,
                           BevelBorder *,
                           0);

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

void BevelBorderBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new SFColor4f::Description(
        SFColor4f::getClassType(),
        "HighlightInner",
        "",
        HighlightInnerFieldId, HighlightInnerFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&BevelBorder::editHandleHighlightInner),
        static_cast<FieldGetMethodSig >(&BevelBorder::getHandleHighlightInner));

    oType.addInitialDesc(pDesc);

    pDesc = new SFReal32::Description(
        SFReal32::getClassType(),
        "Width",
        "",
        WidthFieldId, WidthFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&BevelBorder::editHandleWidth),
        static_cast<FieldGetMethodSig >(&BevelBorder::getHandleWidth));

    oType.addInitialDesc(pDesc);

    pDesc = new SFColor4f::Description(
        SFColor4f::getClassType(),
        "HighlightOuter",
        "",
        HighlightOuterFieldId, HighlightOuterFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&BevelBorder::editHandleHighlightOuter),
        static_cast<FieldGetMethodSig >(&BevelBorder::getHandleHighlightOuter));

    oType.addInitialDesc(pDesc);

    pDesc = new SFColor4f::Description(
        SFColor4f::getClassType(),
        "ShadowInner",
        "",
        ShadowInnerFieldId, ShadowInnerFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&BevelBorder::editHandleShadowInner),
        static_cast<FieldGetMethodSig >(&BevelBorder::getHandleShadowInner));

    oType.addInitialDesc(pDesc);

    pDesc = new SFColor4f::Description(
        SFColor4f::getClassType(),
        "ShadowOuter",
        "",
        ShadowOuterFieldId, ShadowOuterFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&BevelBorder::editHandleShadowOuter),
        static_cast<FieldGetMethodSig >(&BevelBorder::getHandleShadowOuter));

    oType.addInitialDesc(pDesc);

    pDesc = new SFBool::Description(
        SFBool::getClassType(),
        "Raised",
        "",
        RaisedFieldId, RaisedFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&BevelBorder::editHandleRaised),
        static_cast<FieldGetMethodSig >(&BevelBorder::getHandleRaised));

    oType.addInitialDesc(pDesc);
}


BevelBorderBase::TypeObject BevelBorderBase::_type(
    BevelBorderBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    0,
    reinterpret_cast<PrototypeCreateF>(&BevelBorderBase::createEmptyLocal),
    BevelBorder::initMethod,
    BevelBorder::exitMethod,
    reinterpret_cast<InitalInsertDescFunc>(&BevelBorder::classDescInserter),
    false,
    0,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "\tname=\"BevelBorder\"\n"
    "\tparent=\"Border\"\n"
    "    library=\"ContribUserInterface\"\n"
    "    pointerfieldtypes=\"both\"\n"
    "\tstructure=\"concrete\"\n"
    "    systemcomponent=\"true\"\n"
    "    parentsystemcomponent=\"true\"\n"
    "    decoratable=\"false\"\n"
    "    useLocalIncludes=\"false\"\n"
    "    isNodeCore=\"false\"\n"
    "    authors=\"David Kabala (djkabala@gmail.com)                             \"\n"
    ">\n"
    "UI Bevel Border.\n"
    "\t<Field\n"
    "\t\tname=\"HighlightInner\"\n"
    "\t\ttype=\"Color4f\"\n"
    "\t\tcategory=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"Width\"\n"
    "\t\ttype=\"Real32\"\n"
    "\t\tcategory=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"1\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"HighlightOuter\"\n"
    "\t\ttype=\"Color4f\"\n"
    "\t\tcategory=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"ShadowInner\"\n"
    "\t\ttype=\"Color4f\"\n"
    "\t\tcategory=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"ShadowOuter\"\n"
    "\t\ttype=\"Color4f\"\n"
    "\t\tcategory=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"Raised\"\n"
    "\t\ttype=\"bool\"\n"
    "\t\tcategory=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"true\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "</FieldContainer>\n",
    "UI Bevel Border.\n"
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &BevelBorderBase::getType(void)
{
    return _type;
}

const FieldContainerType &BevelBorderBase::getType(void) const
{
    return _type;
}

UInt32 BevelBorderBase::getContainerSize(void) const
{
    return sizeof(BevelBorder);
}

/*------------------------- decorator get ------------------------------*/


SFColor4f *BevelBorderBase::editSFHighlightInner(void)
{
    editSField(HighlightInnerFieldMask);

    return &_sfHighlightInner;
}

const SFColor4f *BevelBorderBase::getSFHighlightInner(void) const
{
    return &_sfHighlightInner;
}


SFReal32 *BevelBorderBase::editSFWidth(void)
{
    editSField(WidthFieldMask);

    return &_sfWidth;
}

const SFReal32 *BevelBorderBase::getSFWidth(void) const
{
    return &_sfWidth;
}


SFColor4f *BevelBorderBase::editSFHighlightOuter(void)
{
    editSField(HighlightOuterFieldMask);

    return &_sfHighlightOuter;
}

const SFColor4f *BevelBorderBase::getSFHighlightOuter(void) const
{
    return &_sfHighlightOuter;
}


SFColor4f *BevelBorderBase::editSFShadowInner(void)
{
    editSField(ShadowInnerFieldMask);

    return &_sfShadowInner;
}

const SFColor4f *BevelBorderBase::getSFShadowInner(void) const
{
    return &_sfShadowInner;
}


SFColor4f *BevelBorderBase::editSFShadowOuter(void)
{
    editSField(ShadowOuterFieldMask);

    return &_sfShadowOuter;
}

const SFColor4f *BevelBorderBase::getSFShadowOuter(void) const
{
    return &_sfShadowOuter;
}


SFBool *BevelBorderBase::editSFRaised(void)
{
    editSField(RaisedFieldMask);

    return &_sfRaised;
}

const SFBool *BevelBorderBase::getSFRaised(void) const
{
    return &_sfRaised;
}






/*------------------------------ access -----------------------------------*/

UInt32 BevelBorderBase::getBinSize(ConstFieldMaskArg whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (HighlightInnerFieldMask & whichField))
    {
        returnValue += _sfHighlightInner.getBinSize();
    }
    if(FieldBits::NoField != (WidthFieldMask & whichField))
    {
        returnValue += _sfWidth.getBinSize();
    }
    if(FieldBits::NoField != (HighlightOuterFieldMask & whichField))
    {
        returnValue += _sfHighlightOuter.getBinSize();
    }
    if(FieldBits::NoField != (ShadowInnerFieldMask & whichField))
    {
        returnValue += _sfShadowInner.getBinSize();
    }
    if(FieldBits::NoField != (ShadowOuterFieldMask & whichField))
    {
        returnValue += _sfShadowOuter.getBinSize();
    }
    if(FieldBits::NoField != (RaisedFieldMask & whichField))
    {
        returnValue += _sfRaised.getBinSize();
    }

    return returnValue;
}

void BevelBorderBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (HighlightInnerFieldMask & whichField))
    {
        _sfHighlightInner.copyToBin(pMem);
    }
    if(FieldBits::NoField != (WidthFieldMask & whichField))
    {
        _sfWidth.copyToBin(pMem);
    }
    if(FieldBits::NoField != (HighlightOuterFieldMask & whichField))
    {
        _sfHighlightOuter.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ShadowInnerFieldMask & whichField))
    {
        _sfShadowInner.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ShadowOuterFieldMask & whichField))
    {
        _sfShadowOuter.copyToBin(pMem);
    }
    if(FieldBits::NoField != (RaisedFieldMask & whichField))
    {
        _sfRaised.copyToBin(pMem);
    }
}

void BevelBorderBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (HighlightInnerFieldMask & whichField))
    {
        _sfHighlightInner.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (WidthFieldMask & whichField))
    {
        _sfWidth.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (HighlightOuterFieldMask & whichField))
    {
        _sfHighlightOuter.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ShadowInnerFieldMask & whichField))
    {
        _sfShadowInner.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ShadowOuterFieldMask & whichField))
    {
        _sfShadowOuter.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (RaisedFieldMask & whichField))
    {
        _sfRaised.copyFromBin(pMem);
    }
}

//! create a new instance of the class
BevelBorderTransitPtr BevelBorderBase::createLocal(BitVector bFlags)
{
    BevelBorderTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyLocal(bFlags);

        fc = dynamic_pointer_cast<BevelBorder>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class, copy the container flags
BevelBorderTransitPtr BevelBorderBase::createDependent(BitVector bFlags)
{
    BevelBorderTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyDependent(bFlags);

        fc = dynamic_pointer_cast<BevelBorder>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class
BevelBorderTransitPtr BevelBorderBase::create(void)
{
    BevelBorderTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopy();

        fc = dynamic_pointer_cast<BevelBorder>(tmpPtr);
    }

    return fc;
}

BevelBorder *BevelBorderBase::createEmptyLocal(BitVector bFlags)
{
    BevelBorder *returnValue;

    newPtr<BevelBorder>(returnValue, bFlags);

    returnValue->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

//! create an empty new instance of the class, do not copy the prototype
BevelBorder *BevelBorderBase::createEmpty(void)
{
    BevelBorder *returnValue;

    newPtr<BevelBorder>(returnValue, Thread::getCurrentLocalFlags());

    returnValue->_pFieldFlags->_bNamespaceMask &=
        ~Thread::getCurrentLocalFlags();

    return returnValue;
}


FieldContainerTransitPtr BevelBorderBase::shallowCopyLocal(
    BitVector bFlags) const
{
    BevelBorder *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const BevelBorder *>(this), bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

FieldContainerTransitPtr BevelBorderBase::shallowCopyDependent(
    BitVector bFlags) const
{
    BevelBorder *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const BevelBorder *>(this), ~bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask = bFlags;

    return returnValue;
}

FieldContainerTransitPtr BevelBorderBase::shallowCopy(void) const
{
    BevelBorder *tmpPtr;

    newPtr(tmpPtr,
           dynamic_cast<const BevelBorder *>(this),
           Thread::getCurrentLocalFlags());

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~Thread::getCurrentLocalFlags();

    FieldContainerTransitPtr returnValue(tmpPtr);

    return returnValue;
}




/*------------------------- constructors ----------------------------------*/

BevelBorderBase::BevelBorderBase(void) :
    Inherited(),
    _sfHighlightInner         (),
    _sfWidth                  (Real32(1)),
    _sfHighlightOuter         (),
    _sfShadowInner            (),
    _sfShadowOuter            (),
    _sfRaised                 (bool(true))
{
}

BevelBorderBase::BevelBorderBase(const BevelBorderBase &source) :
    Inherited(source),
    _sfHighlightInner         (source._sfHighlightInner         ),
    _sfWidth                  (source._sfWidth                  ),
    _sfHighlightOuter         (source._sfHighlightOuter         ),
    _sfShadowInner            (source._sfShadowInner            ),
    _sfShadowOuter            (source._sfShadowOuter            ),
    _sfRaised                 (source._sfRaised                 )
{
}


/*-------------------------- destructors ----------------------------------*/

BevelBorderBase::~BevelBorderBase(void)
{
}


GetFieldHandlePtr BevelBorderBase::getHandleHighlightInner  (void) const
{
    SFColor4f::GetHandlePtr returnValue(
        new  SFColor4f::GetHandle(
             &_sfHighlightInner,
             this->getType().getFieldDesc(HighlightInnerFieldId),
             const_cast<BevelBorderBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr BevelBorderBase::editHandleHighlightInner (void)
{
    SFColor4f::EditHandlePtr returnValue(
        new  SFColor4f::EditHandle(
             &_sfHighlightInner,
             this->getType().getFieldDesc(HighlightInnerFieldId),
             this));


    editSField(HighlightInnerFieldMask);

    return returnValue;
}

GetFieldHandlePtr BevelBorderBase::getHandleWidth           (void) const
{
    SFReal32::GetHandlePtr returnValue(
        new  SFReal32::GetHandle(
             &_sfWidth,
             this->getType().getFieldDesc(WidthFieldId),
             const_cast<BevelBorderBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr BevelBorderBase::editHandleWidth          (void)
{
    SFReal32::EditHandlePtr returnValue(
        new  SFReal32::EditHandle(
             &_sfWidth,
             this->getType().getFieldDesc(WidthFieldId),
             this));


    editSField(WidthFieldMask);

    return returnValue;
}

GetFieldHandlePtr BevelBorderBase::getHandleHighlightOuter  (void) const
{
    SFColor4f::GetHandlePtr returnValue(
        new  SFColor4f::GetHandle(
             &_sfHighlightOuter,
             this->getType().getFieldDesc(HighlightOuterFieldId),
             const_cast<BevelBorderBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr BevelBorderBase::editHandleHighlightOuter (void)
{
    SFColor4f::EditHandlePtr returnValue(
        new  SFColor4f::EditHandle(
             &_sfHighlightOuter,
             this->getType().getFieldDesc(HighlightOuterFieldId),
             this));


    editSField(HighlightOuterFieldMask);

    return returnValue;
}

GetFieldHandlePtr BevelBorderBase::getHandleShadowInner     (void) const
{
    SFColor4f::GetHandlePtr returnValue(
        new  SFColor4f::GetHandle(
             &_sfShadowInner,
             this->getType().getFieldDesc(ShadowInnerFieldId),
             const_cast<BevelBorderBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr BevelBorderBase::editHandleShadowInner    (void)
{
    SFColor4f::EditHandlePtr returnValue(
        new  SFColor4f::EditHandle(
             &_sfShadowInner,
             this->getType().getFieldDesc(ShadowInnerFieldId),
             this));


    editSField(ShadowInnerFieldMask);

    return returnValue;
}

GetFieldHandlePtr BevelBorderBase::getHandleShadowOuter     (void) const
{
    SFColor4f::GetHandlePtr returnValue(
        new  SFColor4f::GetHandle(
             &_sfShadowOuter,
             this->getType().getFieldDesc(ShadowOuterFieldId),
             const_cast<BevelBorderBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr BevelBorderBase::editHandleShadowOuter    (void)
{
    SFColor4f::EditHandlePtr returnValue(
        new  SFColor4f::EditHandle(
             &_sfShadowOuter,
             this->getType().getFieldDesc(ShadowOuterFieldId),
             this));


    editSField(ShadowOuterFieldMask);

    return returnValue;
}

GetFieldHandlePtr BevelBorderBase::getHandleRaised          (void) const
{
    SFBool::GetHandlePtr returnValue(
        new  SFBool::GetHandle(
             &_sfRaised,
             this->getType().getFieldDesc(RaisedFieldId),
             const_cast<BevelBorderBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr BevelBorderBase::editHandleRaised         (void)
{
    SFBool::EditHandlePtr returnValue(
        new  SFBool::EditHandle(
             &_sfRaised,
             this->getType().getFieldDesc(RaisedFieldId),
             this));


    editSField(RaisedFieldMask);

    return returnValue;
}


#ifdef OSG_MT_CPTR_ASPECT
void BevelBorderBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    BevelBorder *pThis = static_cast<BevelBorder *>(this);

    pThis->execSync(static_cast<BevelBorder *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif


#ifdef OSG_MT_CPTR_ASPECT
FieldContainer *BevelBorderBase::createAspectCopy(
    const FieldContainer *pRefAspect) const
{
    BevelBorder *returnValue;

    newAspectCopy(returnValue,
                  dynamic_cast<const BevelBorder *>(pRefAspect),
                  dynamic_cast<const BevelBorder *>(this));

    return returnValue;
}
#endif

void BevelBorderBase::resolveLinks(void)
{
    Inherited::resolveLinks();


}


OSG_END_NAMESPACE
