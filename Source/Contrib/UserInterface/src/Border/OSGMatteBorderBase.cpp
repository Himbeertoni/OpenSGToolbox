/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact:  David Kabala (djkabala@gmail.com)                             *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class MatteBorder!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>
#include <boost/assign/list_of.hpp>

#include "OSGConfig.h"



#include "OSGMaterial.h"                // Material Class

#include "OSGMatteBorderBase.h"
#include "OSGMatteBorder.h"

#include <boost/bind.hpp>

#ifdef WIN32 // turn off 'this' : used in base member initializer list warning
#pragma warning(disable:4355)
#endif

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::MatteBorder
    UI Matte Border. Creates a matte-look border using a solid color or Material. (The difference between this border and a line border is that you can specify the individual border dimensions.)
 */

/***************************************************************************\
 *                        Field Documentation                              *
\***************************************************************************/

/*! \var Real32          MatteBorderBase::_sfLeftWidth
    
*/

/*! \var Real32          MatteBorderBase::_sfRightWidth
    
*/

/*! \var Real32          MatteBorderBase::_sfTopWidth
    
*/

/*! \var Real32          MatteBorderBase::_sfBottomWidth
    
*/

/*! \var Color4f         MatteBorderBase::_sfColor
    
*/

/*! \var Material *      MatteBorderBase::_sfMaterial
    
*/


/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldTraits<MatteBorder *>::_type("MatteBorderPtr", "BorderPtr");
#endif

OSG_FIELDTRAITS_GETTYPE(MatteBorder *)

OSG_EXPORT_PTR_SFIELD_FULL(PointerSField,
                           MatteBorder *,
                           0);

OSG_EXPORT_PTR_MFIELD_FULL(PointerMField,
                           MatteBorder *,
                           0);

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

void MatteBorderBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new SFReal32::Description(
        SFReal32::getClassType(),
        "LeftWidth",
        "",
        LeftWidthFieldId, LeftWidthFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&MatteBorder::editHandleLeftWidth),
        static_cast<FieldGetMethodSig >(&MatteBorder::getHandleLeftWidth));

    oType.addInitialDesc(pDesc);

    pDesc = new SFReal32::Description(
        SFReal32::getClassType(),
        "RightWidth",
        "",
        RightWidthFieldId, RightWidthFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&MatteBorder::editHandleRightWidth),
        static_cast<FieldGetMethodSig >(&MatteBorder::getHandleRightWidth));

    oType.addInitialDesc(pDesc);

    pDesc = new SFReal32::Description(
        SFReal32::getClassType(),
        "TopWidth",
        "",
        TopWidthFieldId, TopWidthFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&MatteBorder::editHandleTopWidth),
        static_cast<FieldGetMethodSig >(&MatteBorder::getHandleTopWidth));

    oType.addInitialDesc(pDesc);

    pDesc = new SFReal32::Description(
        SFReal32::getClassType(),
        "BottomWidth",
        "",
        BottomWidthFieldId, BottomWidthFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&MatteBorder::editHandleBottomWidth),
        static_cast<FieldGetMethodSig >(&MatteBorder::getHandleBottomWidth));

    oType.addInitialDesc(pDesc);

    pDesc = new SFColor4f::Description(
        SFColor4f::getClassType(),
        "Color",
        "",
        ColorFieldId, ColorFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&MatteBorder::editHandleColor),
        static_cast<FieldGetMethodSig >(&MatteBorder::getHandleColor));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecMaterialPtr::Description(
        SFUnrecMaterialPtr::getClassType(),
        "Material",
        "",
        MaterialFieldId, MaterialFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&MatteBorder::editHandleMaterial),
        static_cast<FieldGetMethodSig >(&MatteBorder::getHandleMaterial));

    oType.addInitialDesc(pDesc);
}


MatteBorderBase::TypeObject MatteBorderBase::_type(
    MatteBorderBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    0,
    reinterpret_cast<PrototypeCreateF>(&MatteBorderBase::createEmptyLocal),
    MatteBorder::initMethod,
    MatteBorder::exitMethod,
    reinterpret_cast<InitalInsertDescFunc>(&MatteBorder::classDescInserter),
    false,
    0,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "\tname=\"MatteBorder\"\n"
    "\tparent=\"Border\"\n"
    "    library=\"ContribUserInterface\"\n"
    "    pointerfieldtypes=\"both\"\n"
    "\tstructure=\"concrete\"\n"
    "    systemcomponent=\"true\"\n"
    "    parentsystemcomponent=\"true\"\n"
    "    decoratable=\"false\"\n"
    "    useLocalIncludes=\"false\"\n"
    "    isNodeCore=\"false\"\n"
    "    authors=\"David Kabala (djkabala@gmail.com)                             \"\n"
    ">\n"
    "UI Matte Border. Creates a matte-look border using a solid color or Material. (The difference between this border and a line border is that you can specify the individual border dimensions.)\n"
    "\t<Field\n"
    "\t\tname=\"LeftWidth\"\n"
    "\t\ttype=\"Real32\"\n"
    "\t\tcategory=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"1\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"RightWidth\"\n"
    "\t\ttype=\"Real32\"\n"
    "\t\tcategory=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"1\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"TopWidth\"\n"
    "\t\ttype=\"Real32\"\n"
    "\t\tcategory=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"1\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"BottomWidth\"\n"
    "\t\ttype=\"Real32\"\n"
    "\t\tcategory=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"1\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"Color\"\n"
    "\t\ttype=\"Color4f\"\n"
    "\t\tcategory=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"0.0,0.0,0.0,1.0\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"Material\"\n"
    "\t\ttype=\"Material\"\n"
    "\t\tcategory=\"pointer\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t\tdefaultValue=\"NULL\"\n"
    "\t>\n"
    "\t</Field>\n"
    "</FieldContainer>\n",
    "UI Matte Border. Creates a matte-look border using a solid color or Material. (The difference between this border and a line border is that you can specify the individual border dimensions.)\n"
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &MatteBorderBase::getType(void)
{
    return _type;
}

const FieldContainerType &MatteBorderBase::getType(void) const
{
    return _type;
}

UInt32 MatteBorderBase::getContainerSize(void) const
{
    return sizeof(MatteBorder);
}

/*------------------------- decorator get ------------------------------*/


SFReal32 *MatteBorderBase::editSFLeftWidth(void)
{
    editSField(LeftWidthFieldMask);

    return &_sfLeftWidth;
}

const SFReal32 *MatteBorderBase::getSFLeftWidth(void) const
{
    return &_sfLeftWidth;
}


SFReal32 *MatteBorderBase::editSFRightWidth(void)
{
    editSField(RightWidthFieldMask);

    return &_sfRightWidth;
}

const SFReal32 *MatteBorderBase::getSFRightWidth(void) const
{
    return &_sfRightWidth;
}


SFReal32 *MatteBorderBase::editSFTopWidth(void)
{
    editSField(TopWidthFieldMask);

    return &_sfTopWidth;
}

const SFReal32 *MatteBorderBase::getSFTopWidth(void) const
{
    return &_sfTopWidth;
}


SFReal32 *MatteBorderBase::editSFBottomWidth(void)
{
    editSField(BottomWidthFieldMask);

    return &_sfBottomWidth;
}

const SFReal32 *MatteBorderBase::getSFBottomWidth(void) const
{
    return &_sfBottomWidth;
}


SFColor4f *MatteBorderBase::editSFColor(void)
{
    editSField(ColorFieldMask);

    return &_sfColor;
}

const SFColor4f *MatteBorderBase::getSFColor(void) const
{
    return &_sfColor;
}


//! Get the MatteBorder::_sfMaterial field.
const SFUnrecMaterialPtr *MatteBorderBase::getSFMaterial(void) const
{
    return &_sfMaterial;
}

SFUnrecMaterialPtr  *MatteBorderBase::editSFMaterial       (void)
{
    editSField(MaterialFieldMask);

    return &_sfMaterial;
}





/*------------------------------ access -----------------------------------*/

UInt32 MatteBorderBase::getBinSize(ConstFieldMaskArg whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (LeftWidthFieldMask & whichField))
    {
        returnValue += _sfLeftWidth.getBinSize();
    }
    if(FieldBits::NoField != (RightWidthFieldMask & whichField))
    {
        returnValue += _sfRightWidth.getBinSize();
    }
    if(FieldBits::NoField != (TopWidthFieldMask & whichField))
    {
        returnValue += _sfTopWidth.getBinSize();
    }
    if(FieldBits::NoField != (BottomWidthFieldMask & whichField))
    {
        returnValue += _sfBottomWidth.getBinSize();
    }
    if(FieldBits::NoField != (ColorFieldMask & whichField))
    {
        returnValue += _sfColor.getBinSize();
    }
    if(FieldBits::NoField != (MaterialFieldMask & whichField))
    {
        returnValue += _sfMaterial.getBinSize();
    }

    return returnValue;
}

void MatteBorderBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (LeftWidthFieldMask & whichField))
    {
        _sfLeftWidth.copyToBin(pMem);
    }
    if(FieldBits::NoField != (RightWidthFieldMask & whichField))
    {
        _sfRightWidth.copyToBin(pMem);
    }
    if(FieldBits::NoField != (TopWidthFieldMask & whichField))
    {
        _sfTopWidth.copyToBin(pMem);
    }
    if(FieldBits::NoField != (BottomWidthFieldMask & whichField))
    {
        _sfBottomWidth.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ColorFieldMask & whichField))
    {
        _sfColor.copyToBin(pMem);
    }
    if(FieldBits::NoField != (MaterialFieldMask & whichField))
    {
        _sfMaterial.copyToBin(pMem);
    }
}

void MatteBorderBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (LeftWidthFieldMask & whichField))
    {
        _sfLeftWidth.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (RightWidthFieldMask & whichField))
    {
        _sfRightWidth.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (TopWidthFieldMask & whichField))
    {
        _sfTopWidth.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (BottomWidthFieldMask & whichField))
    {
        _sfBottomWidth.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ColorFieldMask & whichField))
    {
        _sfColor.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (MaterialFieldMask & whichField))
    {
        _sfMaterial.copyFromBin(pMem);
    }
}

//! create a new instance of the class
MatteBorderTransitPtr MatteBorderBase::createLocal(BitVector bFlags)
{
    MatteBorderTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyLocal(bFlags);

        fc = dynamic_pointer_cast<MatteBorder>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class, copy the container flags
MatteBorderTransitPtr MatteBorderBase::createDependent(BitVector bFlags)
{
    MatteBorderTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyDependent(bFlags);

        fc = dynamic_pointer_cast<MatteBorder>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class
MatteBorderTransitPtr MatteBorderBase::create(void)
{
    MatteBorderTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopy();

        fc = dynamic_pointer_cast<MatteBorder>(tmpPtr);
    }

    return fc;
}

MatteBorder *MatteBorderBase::createEmptyLocal(BitVector bFlags)
{
    MatteBorder *returnValue;

    newPtr<MatteBorder>(returnValue, bFlags);

    returnValue->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

//! create an empty new instance of the class, do not copy the prototype
MatteBorder *MatteBorderBase::createEmpty(void)
{
    MatteBorder *returnValue;

    newPtr<MatteBorder>(returnValue, Thread::getCurrentLocalFlags());

    returnValue->_pFieldFlags->_bNamespaceMask &=
        ~Thread::getCurrentLocalFlags();

    return returnValue;
}


FieldContainerTransitPtr MatteBorderBase::shallowCopyLocal(
    BitVector bFlags) const
{
    MatteBorder *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const MatteBorder *>(this), bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

FieldContainerTransitPtr MatteBorderBase::shallowCopyDependent(
    BitVector bFlags) const
{
    MatteBorder *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const MatteBorder *>(this), ~bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask = bFlags;

    return returnValue;
}

FieldContainerTransitPtr MatteBorderBase::shallowCopy(void) const
{
    MatteBorder *tmpPtr;

    newPtr(tmpPtr,
           dynamic_cast<const MatteBorder *>(this),
           Thread::getCurrentLocalFlags());

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~Thread::getCurrentLocalFlags();

    FieldContainerTransitPtr returnValue(tmpPtr);

    return returnValue;
}




/*------------------------- constructors ----------------------------------*/

MatteBorderBase::MatteBorderBase(void) :
    Inherited(),
    _sfLeftWidth              (Real32(1)),
    _sfRightWidth             (Real32(1)),
    _sfTopWidth               (Real32(1)),
    _sfBottomWidth            (Real32(1)),
    _sfColor                  (Color4f(0.0,0.0,0.0,1.0)),
    _sfMaterial               (NULL)
{
}

MatteBorderBase::MatteBorderBase(const MatteBorderBase &source) :
    Inherited(source),
    _sfLeftWidth              (source._sfLeftWidth              ),
    _sfRightWidth             (source._sfRightWidth             ),
    _sfTopWidth               (source._sfTopWidth               ),
    _sfBottomWidth            (source._sfBottomWidth            ),
    _sfColor                  (source._sfColor                  ),
    _sfMaterial               (NULL)
{
}


/*-------------------------- destructors ----------------------------------*/

MatteBorderBase::~MatteBorderBase(void)
{
}

void MatteBorderBase::onCreate(const MatteBorder *source)
{
    Inherited::onCreate(source);

    if(source != NULL)
    {
        MatteBorder *pThis = static_cast<MatteBorder *>(this);

        pThis->setMaterial(source->getMaterial());
    }
}

GetFieldHandlePtr MatteBorderBase::getHandleLeftWidth       (void) const
{
    SFReal32::GetHandlePtr returnValue(
        new  SFReal32::GetHandle(
             &_sfLeftWidth,
             this->getType().getFieldDesc(LeftWidthFieldId),
             const_cast<MatteBorderBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr MatteBorderBase::editHandleLeftWidth      (void)
{
    SFReal32::EditHandlePtr returnValue(
        new  SFReal32::EditHandle(
             &_sfLeftWidth,
             this->getType().getFieldDesc(LeftWidthFieldId),
             this));


    editSField(LeftWidthFieldMask);

    return returnValue;
}

GetFieldHandlePtr MatteBorderBase::getHandleRightWidth      (void) const
{
    SFReal32::GetHandlePtr returnValue(
        new  SFReal32::GetHandle(
             &_sfRightWidth,
             this->getType().getFieldDesc(RightWidthFieldId),
             const_cast<MatteBorderBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr MatteBorderBase::editHandleRightWidth     (void)
{
    SFReal32::EditHandlePtr returnValue(
        new  SFReal32::EditHandle(
             &_sfRightWidth,
             this->getType().getFieldDesc(RightWidthFieldId),
             this));


    editSField(RightWidthFieldMask);

    return returnValue;
}

GetFieldHandlePtr MatteBorderBase::getHandleTopWidth        (void) const
{
    SFReal32::GetHandlePtr returnValue(
        new  SFReal32::GetHandle(
             &_sfTopWidth,
             this->getType().getFieldDesc(TopWidthFieldId),
             const_cast<MatteBorderBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr MatteBorderBase::editHandleTopWidth       (void)
{
    SFReal32::EditHandlePtr returnValue(
        new  SFReal32::EditHandle(
             &_sfTopWidth,
             this->getType().getFieldDesc(TopWidthFieldId),
             this));


    editSField(TopWidthFieldMask);

    return returnValue;
}

GetFieldHandlePtr MatteBorderBase::getHandleBottomWidth     (void) const
{
    SFReal32::GetHandlePtr returnValue(
        new  SFReal32::GetHandle(
             &_sfBottomWidth,
             this->getType().getFieldDesc(BottomWidthFieldId),
             const_cast<MatteBorderBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr MatteBorderBase::editHandleBottomWidth    (void)
{
    SFReal32::EditHandlePtr returnValue(
        new  SFReal32::EditHandle(
             &_sfBottomWidth,
             this->getType().getFieldDesc(BottomWidthFieldId),
             this));


    editSField(BottomWidthFieldMask);

    return returnValue;
}

GetFieldHandlePtr MatteBorderBase::getHandleColor           (void) const
{
    SFColor4f::GetHandlePtr returnValue(
        new  SFColor4f::GetHandle(
             &_sfColor,
             this->getType().getFieldDesc(ColorFieldId),
             const_cast<MatteBorderBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr MatteBorderBase::editHandleColor          (void)
{
    SFColor4f::EditHandlePtr returnValue(
        new  SFColor4f::EditHandle(
             &_sfColor,
             this->getType().getFieldDesc(ColorFieldId),
             this));


    editSField(ColorFieldMask);

    return returnValue;
}

GetFieldHandlePtr MatteBorderBase::getHandleMaterial        (void) const
{
    SFUnrecMaterialPtr::GetHandlePtr returnValue(
        new  SFUnrecMaterialPtr::GetHandle(
             &_sfMaterial,
             this->getType().getFieldDesc(MaterialFieldId),
             const_cast<MatteBorderBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr MatteBorderBase::editHandleMaterial       (void)
{
    SFUnrecMaterialPtr::EditHandlePtr returnValue(
        new  SFUnrecMaterialPtr::EditHandle(
             &_sfMaterial,
             this->getType().getFieldDesc(MaterialFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&MatteBorder::setMaterial,
                    static_cast<MatteBorder *>(this), _1));

    editSField(MaterialFieldMask);

    return returnValue;
}


#ifdef OSG_MT_CPTR_ASPECT
void MatteBorderBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    MatteBorder *pThis = static_cast<MatteBorder *>(this);

    pThis->execSync(static_cast<MatteBorder *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif


#ifdef OSG_MT_CPTR_ASPECT
FieldContainer *MatteBorderBase::createAspectCopy(
    const FieldContainer *pRefAspect) const
{
    MatteBorder *returnValue;

    newAspectCopy(returnValue,
                  dynamic_cast<const MatteBorder *>(pRefAspect),
                  dynamic_cast<const MatteBorder *>(this));

    return returnValue;
}
#endif

void MatteBorderBase::resolveLinks(void)
{
    Inherited::resolveLinks();

    static_cast<MatteBorder *>(this)->setMaterial(NULL);


}


OSG_END_NAMESPACE
