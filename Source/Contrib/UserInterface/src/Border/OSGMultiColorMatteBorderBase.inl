/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *   contact:  David Kabala (djkabala@gmail.com)                             *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class MultiColorMatteBorder!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

OSG_BEGIN_NAMESPACE


//! access the type of the class
inline
OSG::FieldContainerType &MultiColorMatteBorderBase::getClassType(void)
{
    return _type;
}

//! access the numerical type of the class
inline
OSG::UInt32 MultiColorMatteBorderBase::getClassTypeId(void)
{
    return _type.getId();
}

inline
OSG::UInt16 MultiColorMatteBorderBase::getClassGroupId(void)
{
    return _type.getGroupId();
}

/*------------------------------ get -----------------------------------*/

//! Get the value of the MultiColorMatteBorder::_sfLeftWidth field.

inline
Real32 &MultiColorMatteBorderBase::editLeftWidth(void)
{
    editSField(LeftWidthFieldMask);

    return _sfLeftWidth.getValue();
}

//! Get the value of the MultiColorMatteBorder::_sfLeftWidth field.
inline
      Real32  MultiColorMatteBorderBase::getLeftWidth(void) const
{
    return _sfLeftWidth.getValue();
}

//! Set the value of the MultiColorMatteBorder::_sfLeftWidth field.
inline
void MultiColorMatteBorderBase::setLeftWidth(const Real32 value)
{
    editSField(LeftWidthFieldMask);

    _sfLeftWidth.setValue(value);
}
//! Get the value of the MultiColorMatteBorder::_sfRightWidth field.

inline
Real32 &MultiColorMatteBorderBase::editRightWidth(void)
{
    editSField(RightWidthFieldMask);

    return _sfRightWidth.getValue();
}

//! Get the value of the MultiColorMatteBorder::_sfRightWidth field.
inline
      Real32  MultiColorMatteBorderBase::getRightWidth(void) const
{
    return _sfRightWidth.getValue();
}

//! Set the value of the MultiColorMatteBorder::_sfRightWidth field.
inline
void MultiColorMatteBorderBase::setRightWidth(const Real32 value)
{
    editSField(RightWidthFieldMask);

    _sfRightWidth.setValue(value);
}
//! Get the value of the MultiColorMatteBorder::_sfTopWidth field.

inline
Real32 &MultiColorMatteBorderBase::editTopWidth(void)
{
    editSField(TopWidthFieldMask);

    return _sfTopWidth.getValue();
}

//! Get the value of the MultiColorMatteBorder::_sfTopWidth field.
inline
      Real32  MultiColorMatteBorderBase::getTopWidth(void) const
{
    return _sfTopWidth.getValue();
}

//! Set the value of the MultiColorMatteBorder::_sfTopWidth field.
inline
void MultiColorMatteBorderBase::setTopWidth(const Real32 value)
{
    editSField(TopWidthFieldMask);

    _sfTopWidth.setValue(value);
}
//! Get the value of the MultiColorMatteBorder::_sfBottomWidth field.

inline
Real32 &MultiColorMatteBorderBase::editBottomWidth(void)
{
    editSField(BottomWidthFieldMask);

    return _sfBottomWidth.getValue();
}

//! Get the value of the MultiColorMatteBorder::_sfBottomWidth field.
inline
      Real32  MultiColorMatteBorderBase::getBottomWidth(void) const
{
    return _sfBottomWidth.getValue();
}

//! Set the value of the MultiColorMatteBorder::_sfBottomWidth field.
inline
void MultiColorMatteBorderBase::setBottomWidth(const Real32 value)
{
    editSField(BottomWidthFieldMask);

    _sfBottomWidth.setValue(value);
}
//! Get the value of the MultiColorMatteBorder::_sfLeftLineTopColor field.

inline
Color4f &MultiColorMatteBorderBase::editLeftLineTopColor(void)
{
    editSField(LeftLineTopColorFieldMask);

    return _sfLeftLineTopColor.getValue();
}

//! Get the value of the MultiColorMatteBorder::_sfLeftLineTopColor field.
inline
const Color4f &MultiColorMatteBorderBase::getLeftLineTopColor(void) const
{
    return _sfLeftLineTopColor.getValue();
}

//! Set the value of the MultiColorMatteBorder::_sfLeftLineTopColor field.
inline
void MultiColorMatteBorderBase::setLeftLineTopColor(const Color4f &value)
{
    editSField(LeftLineTopColorFieldMask);

    _sfLeftLineTopColor.setValue(value);
}
//! Get the value of the MultiColorMatteBorder::_sfLeftLineBottomColor field.

inline
Color4f &MultiColorMatteBorderBase::editLeftLineBottomColor(void)
{
    editSField(LeftLineBottomColorFieldMask);

    return _sfLeftLineBottomColor.getValue();
}

//! Get the value of the MultiColorMatteBorder::_sfLeftLineBottomColor field.
inline
const Color4f &MultiColorMatteBorderBase::getLeftLineBottomColor(void) const
{
    return _sfLeftLineBottomColor.getValue();
}

//! Set the value of the MultiColorMatteBorder::_sfLeftLineBottomColor field.
inline
void MultiColorMatteBorderBase::setLeftLineBottomColor(const Color4f &value)
{
    editSField(LeftLineBottomColorFieldMask);

    _sfLeftLineBottomColor.setValue(value);
}
//! Get the value of the MultiColorMatteBorder::_sfTopLineLeftColor field.

inline
Color4f &MultiColorMatteBorderBase::editTopLineLeftColor(void)
{
    editSField(TopLineLeftColorFieldMask);

    return _sfTopLineLeftColor.getValue();
}

//! Get the value of the MultiColorMatteBorder::_sfTopLineLeftColor field.
inline
const Color4f &MultiColorMatteBorderBase::getTopLineLeftColor(void) const
{
    return _sfTopLineLeftColor.getValue();
}

//! Set the value of the MultiColorMatteBorder::_sfTopLineLeftColor field.
inline
void MultiColorMatteBorderBase::setTopLineLeftColor(const Color4f &value)
{
    editSField(TopLineLeftColorFieldMask);

    _sfTopLineLeftColor.setValue(value);
}
//! Get the value of the MultiColorMatteBorder::_sfTopLineRightColor field.

inline
Color4f &MultiColorMatteBorderBase::editTopLineRightColor(void)
{
    editSField(TopLineRightColorFieldMask);

    return _sfTopLineRightColor.getValue();
}

//! Get the value of the MultiColorMatteBorder::_sfTopLineRightColor field.
inline
const Color4f &MultiColorMatteBorderBase::getTopLineRightColor(void) const
{
    return _sfTopLineRightColor.getValue();
}

//! Set the value of the MultiColorMatteBorder::_sfTopLineRightColor field.
inline
void MultiColorMatteBorderBase::setTopLineRightColor(const Color4f &value)
{
    editSField(TopLineRightColorFieldMask);

    _sfTopLineRightColor.setValue(value);
}
//! Get the value of the MultiColorMatteBorder::_sfRightLineTopColor field.

inline
Color4f &MultiColorMatteBorderBase::editRightLineTopColor(void)
{
    editSField(RightLineTopColorFieldMask);

    return _sfRightLineTopColor.getValue();
}

//! Get the value of the MultiColorMatteBorder::_sfRightLineTopColor field.
inline
const Color4f &MultiColorMatteBorderBase::getRightLineTopColor(void) const
{
    return _sfRightLineTopColor.getValue();
}

//! Set the value of the MultiColorMatteBorder::_sfRightLineTopColor field.
inline
void MultiColorMatteBorderBase::setRightLineTopColor(const Color4f &value)
{
    editSField(RightLineTopColorFieldMask);

    _sfRightLineTopColor.setValue(value);
}
//! Get the value of the MultiColorMatteBorder::_sfRightLineBottomColor field.

inline
Color4f &MultiColorMatteBorderBase::editRightLineBottomColor(void)
{
    editSField(RightLineBottomColorFieldMask);

    return _sfRightLineBottomColor.getValue();
}

//! Get the value of the MultiColorMatteBorder::_sfRightLineBottomColor field.
inline
const Color4f &MultiColorMatteBorderBase::getRightLineBottomColor(void) const
{
    return _sfRightLineBottomColor.getValue();
}

//! Set the value of the MultiColorMatteBorder::_sfRightLineBottomColor field.
inline
void MultiColorMatteBorderBase::setRightLineBottomColor(const Color4f &value)
{
    editSField(RightLineBottomColorFieldMask);

    _sfRightLineBottomColor.setValue(value);
}
//! Get the value of the MultiColorMatteBorder::_sfBottomLineLeftColor field.

inline
Color4f &MultiColorMatteBorderBase::editBottomLineLeftColor(void)
{
    editSField(BottomLineLeftColorFieldMask);

    return _sfBottomLineLeftColor.getValue();
}

//! Get the value of the MultiColorMatteBorder::_sfBottomLineLeftColor field.
inline
const Color4f &MultiColorMatteBorderBase::getBottomLineLeftColor(void) const
{
    return _sfBottomLineLeftColor.getValue();
}

//! Set the value of the MultiColorMatteBorder::_sfBottomLineLeftColor field.
inline
void MultiColorMatteBorderBase::setBottomLineLeftColor(const Color4f &value)
{
    editSField(BottomLineLeftColorFieldMask);

    _sfBottomLineLeftColor.setValue(value);
}
//! Get the value of the MultiColorMatteBorder::_sfBottomLineRightColor field.

inline
Color4f &MultiColorMatteBorderBase::editBottomLineRightColor(void)
{
    editSField(BottomLineRightColorFieldMask);

    return _sfBottomLineRightColor.getValue();
}

//! Get the value of the MultiColorMatteBorder::_sfBottomLineRightColor field.
inline
const Color4f &MultiColorMatteBorderBase::getBottomLineRightColor(void) const
{
    return _sfBottomLineRightColor.getValue();
}

//! Set the value of the MultiColorMatteBorder::_sfBottomLineRightColor field.
inline
void MultiColorMatteBorderBase::setBottomLineRightColor(const Color4f &value)
{
    editSField(BottomLineRightColorFieldMask);

    _sfBottomLineRightColor.setValue(value);
}


#ifdef OSG_MT_CPTR_ASPECT
inline
void MultiColorMatteBorderBase::execSync (      MultiColorMatteBorderBase *pFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    Inherited::execSync(pFrom, whichField, oOffsets, syncMode, uiSyncInfo);

    if(FieldBits::NoField != (LeftWidthFieldMask & whichField))
        _sfLeftWidth.syncWith(pFrom->_sfLeftWidth);

    if(FieldBits::NoField != (RightWidthFieldMask & whichField))
        _sfRightWidth.syncWith(pFrom->_sfRightWidth);

    if(FieldBits::NoField != (TopWidthFieldMask & whichField))
        _sfTopWidth.syncWith(pFrom->_sfTopWidth);

    if(FieldBits::NoField != (BottomWidthFieldMask & whichField))
        _sfBottomWidth.syncWith(pFrom->_sfBottomWidth);

    if(FieldBits::NoField != (LeftLineTopColorFieldMask & whichField))
        _sfLeftLineTopColor.syncWith(pFrom->_sfLeftLineTopColor);

    if(FieldBits::NoField != (LeftLineBottomColorFieldMask & whichField))
        _sfLeftLineBottomColor.syncWith(pFrom->_sfLeftLineBottomColor);

    if(FieldBits::NoField != (TopLineLeftColorFieldMask & whichField))
        _sfTopLineLeftColor.syncWith(pFrom->_sfTopLineLeftColor);

    if(FieldBits::NoField != (TopLineRightColorFieldMask & whichField))
        _sfTopLineRightColor.syncWith(pFrom->_sfTopLineRightColor);

    if(FieldBits::NoField != (RightLineTopColorFieldMask & whichField))
        _sfRightLineTopColor.syncWith(pFrom->_sfRightLineTopColor);

    if(FieldBits::NoField != (RightLineBottomColorFieldMask & whichField))
        _sfRightLineBottomColor.syncWith(pFrom->_sfRightLineBottomColor);

    if(FieldBits::NoField != (BottomLineLeftColorFieldMask & whichField))
        _sfBottomLineLeftColor.syncWith(pFrom->_sfBottomLineLeftColor);

    if(FieldBits::NoField != (BottomLineRightColorFieldMask & whichField))
        _sfBottomLineRightColor.syncWith(pFrom->_sfBottomLineRightColor);
}
#endif


inline
const Char8 *MultiColorMatteBorderBase::getClassname(void)
{
    return "MultiColorMatteBorder";
}
OSG_GEN_CONTAINERPTR(MultiColorMatteBorder);

OSG_END_NAMESPACE

