/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact:  David Kabala (djkabala@gmail.com)                             *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class ShadowBorder
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#ifndef _OSGSHADOWBORDERBASE_H_
#define _OSGSHADOWBORDERBASE_H_
#ifdef __sgi
#pragma once
#endif


#include "OSGConfig.h"
#include "OSGContribUserInterfaceDef.h"

//#include "OSGBaseTypes.h"

#include "OSGBorder.h" // Parent

#include "OSGSysFields.h"               // TopOffset type
#include "OSGBaseFields.h"              // InternalColor type
#include "OSGBorderFields.h"            // InsideBorder type

#include "OSGShadowBorderFields.h"

OSG_BEGIN_NAMESPACE

class ShadowBorder;

//! \brief ShadowBorder Base Class.

class OSG_CONTRIBUSERINTERFACE_DLLMAPPING ShadowBorderBase : public Border
{
  public:

    typedef Border Inherited;
    typedef Border ParentContainer;

    typedef Inherited::TypeObject TypeObject;
    typedef TypeObject::InitPhase InitPhase;

    OSG_GEN_INTERNALPTR(ShadowBorder);

    /*==========================  PUBLIC  =================================*/

  public:

    enum
    {
        TopOffsetFieldId = Inherited::NextFieldId,
        BottomOffsetFieldId = TopOffsetFieldId + 1,
        LeftOffsetFieldId = BottomOffsetFieldId + 1,
        RightOffsetFieldId = LeftOffsetFieldId + 1,
        InternalColorFieldId = RightOffsetFieldId + 1,
        EdgeColorFieldId = InternalColorFieldId + 1,
        InsideBorderFieldId = EdgeColorFieldId + 1,
        CornerRadiusFieldId = InsideBorderFieldId + 1,
        InternalToEdgeColorLengthFieldId = CornerRadiusFieldId + 1,
        NextFieldId = InternalToEdgeColorLengthFieldId + 1
    };

    static const OSG::BitVector TopOffsetFieldMask =
        (TypeTraits<BitVector>::One << TopOffsetFieldId);
    static const OSG::BitVector BottomOffsetFieldMask =
        (TypeTraits<BitVector>::One << BottomOffsetFieldId);
    static const OSG::BitVector LeftOffsetFieldMask =
        (TypeTraits<BitVector>::One << LeftOffsetFieldId);
    static const OSG::BitVector RightOffsetFieldMask =
        (TypeTraits<BitVector>::One << RightOffsetFieldId);
    static const OSG::BitVector InternalColorFieldMask =
        (TypeTraits<BitVector>::One << InternalColorFieldId);
    static const OSG::BitVector EdgeColorFieldMask =
        (TypeTraits<BitVector>::One << EdgeColorFieldId);
    static const OSG::BitVector InsideBorderFieldMask =
        (TypeTraits<BitVector>::One << InsideBorderFieldId);
    static const OSG::BitVector CornerRadiusFieldMask =
        (TypeTraits<BitVector>::One << CornerRadiusFieldId);
    static const OSG::BitVector InternalToEdgeColorLengthFieldMask =
        (TypeTraits<BitVector>::One << InternalToEdgeColorLengthFieldId);
    static const OSG::BitVector NextFieldMask =
        (TypeTraits<BitVector>::One << NextFieldId);
        
    typedef SFReal32          SFTopOffsetType;
    typedef SFReal32          SFBottomOffsetType;
    typedef SFReal32          SFLeftOffsetType;
    typedef SFReal32          SFRightOffsetType;
    typedef SFColor4f         SFInternalColorType;
    typedef SFColor4f         SFEdgeColorType;
    typedef SFUnrecBorderPtr  SFInsideBorderType;
    typedef SFReal32          SFCornerRadiusType;
    typedef SFReal32          SFInternalToEdgeColorLengthType;

    /*---------------------------------------------------------------------*/
    /*! \name                    Class Get                                 */
    /*! \{                                                                 */

    static FieldContainerType &getClassType   (void);
    static UInt32              getClassTypeId (void);
    static UInt16              getClassGroupId(void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                FieldContainer Get                            */
    /*! \{                                                                 */

    virtual       FieldContainerType &getType         (void);
    virtual const FieldContainerType &getType         (void) const;

    virtual       UInt32              getContainerSize(void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Get                                 */
    /*! \{                                                                 */


                  SFReal32            *editSFTopOffset      (void);
            const SFReal32            *getSFTopOffset       (void) const;

                  SFReal32            *editSFBottomOffset   (void);
            const SFReal32            *getSFBottomOffset    (void) const;

                  SFReal32            *editSFLeftOffset     (void);
            const SFReal32            *getSFLeftOffset      (void) const;

                  SFReal32            *editSFRightOffset    (void);
            const SFReal32            *getSFRightOffset     (void) const;

                  SFColor4f           *editSFInternalColor  (void);
            const SFColor4f           *getSFInternalColor   (void) const;

                  SFColor4f           *editSFEdgeColor      (void);
            const SFColor4f           *getSFEdgeColor       (void) const;
            const SFUnrecBorderPtr    *getSFInsideBorder   (void) const;
                  SFUnrecBorderPtr    *editSFInsideBorder   (void);

                  SFReal32            *editSFCornerRadius   (void);
            const SFReal32            *getSFCornerRadius    (void) const;

                  SFReal32            *editSFInternalToEdgeColorLength(void);
            const SFReal32            *getSFInternalToEdgeColorLength (void) const;


                  Real32              &editTopOffset      (void);
                  Real32               getTopOffset       (void) const;

                  Real32              &editBottomOffset   (void);
                  Real32               getBottomOffset    (void) const;

                  Real32              &editLeftOffset     (void);
                  Real32               getLeftOffset      (void) const;

                  Real32              &editRightOffset    (void);
                  Real32               getRightOffset     (void) const;

                  Color4f             &editInternalColor  (void);
            const Color4f             &getInternalColor   (void) const;

                  Color4f             &editEdgeColor      (void);
            const Color4f             &getEdgeColor       (void) const;

                  Border * getInsideBorder   (void) const;

                  Real32              &editCornerRadius   (void);
                  Real32               getCornerRadius    (void) const;

                  Real32              &editInternalToEdgeColorLength(void);
                  Real32               getInternalToEdgeColorLength (void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Set                                 */
    /*! \{                                                                 */

            void setTopOffset      (const Real32 value);
            void setBottomOffset   (const Real32 value);
            void setLeftOffset     (const Real32 value);
            void setRightOffset    (const Real32 value);
            void setInternalColor  (const Color4f &value);
            void setEdgeColor      (const Color4f &value);
            void setInsideBorder   (Border * const value);
            void setCornerRadius   (const Real32 value);
            void setInternalToEdgeColorLength(const Real32 value);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                Ptr Field Set                                 */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                Ptr MField Set                                */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Binary Access                              */
    /*! \{                                                                 */

    virtual UInt32 getBinSize (ConstFieldMaskArg  whichField);
    virtual void   copyToBin  (BinaryDataHandler &pMem,
                               ConstFieldMaskArg  whichField);
    virtual void   copyFromBin(BinaryDataHandler &pMem,
                               ConstFieldMaskArg  whichField);


    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Construction                               */
    /*! \{                                                                 */

    static  ShadowBorderTransitPtr  create          (void);
    static  ShadowBorder           *createEmpty     (void);

    static  ShadowBorderTransitPtr  createLocal     (
                                               BitVector bFlags = FCLocal::All);

    static  ShadowBorder            *createEmptyLocal(
                                              BitVector bFlags = FCLocal::All);

    static  ShadowBorderTransitPtr  createDependent  (BitVector bFlags);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Copy                                   */
    /*! \{                                                                 */

    virtual FieldContainerTransitPtr shallowCopy     (void) const;
    virtual FieldContainerTransitPtr shallowCopyLocal(
                                       BitVector bFlags = FCLocal::All) const;
    virtual FieldContainerTransitPtr shallowCopyDependent(
                                                      BitVector bFlags) const;

    /*! \}                                                                 */
    /*=========================  PROTECTED  ===============================*/

  protected:

    static TypeObject _type;

    static       void   classDescInserter(TypeObject &oType);
    static const Char8 *getClassname     (void             );

    /*---------------------------------------------------------------------*/
    /*! \name                      Fields                                  */
    /*! \{                                                                 */

    SFReal32          _sfTopOffset;
    SFReal32          _sfBottomOffset;
    SFReal32          _sfLeftOffset;
    SFReal32          _sfRightOffset;
    SFColor4f         _sfInternalColor;
    SFColor4f         _sfEdgeColor;
    SFUnrecBorderPtr  _sfInsideBorder;
    SFReal32          _sfCornerRadius;
    SFReal32          _sfInternalToEdgeColorLength;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Constructors                               */
    /*! \{                                                                 */

    ShadowBorderBase(void);
    ShadowBorderBase(const ShadowBorderBase &source);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Destructors                                */
    /*! \{                                                                 */

    virtual ~ShadowBorderBase(void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                     onCreate                                */
    /*! \{                                                                 */

    void onCreate(const ShadowBorder *source = NULL);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Generic Field Access                      */
    /*! \{                                                                 */

    GetFieldHandlePtr  getHandleTopOffset       (void) const;
    EditFieldHandlePtr editHandleTopOffset      (void);
    GetFieldHandlePtr  getHandleBottomOffset    (void) const;
    EditFieldHandlePtr editHandleBottomOffset   (void);
    GetFieldHandlePtr  getHandleLeftOffset      (void) const;
    EditFieldHandlePtr editHandleLeftOffset     (void);
    GetFieldHandlePtr  getHandleRightOffset     (void) const;
    EditFieldHandlePtr editHandleRightOffset    (void);
    GetFieldHandlePtr  getHandleInternalColor   (void) const;
    EditFieldHandlePtr editHandleInternalColor  (void);
    GetFieldHandlePtr  getHandleEdgeColor       (void) const;
    EditFieldHandlePtr editHandleEdgeColor      (void);
    GetFieldHandlePtr  getHandleInsideBorder    (void) const;
    EditFieldHandlePtr editHandleInsideBorder   (void);
    GetFieldHandlePtr  getHandleCornerRadius    (void) const;
    EditFieldHandlePtr editHandleCornerRadius   (void);
    GetFieldHandlePtr  getHandleInternalToEdgeColorLength (void) const;
    EditFieldHandlePtr editHandleInternalToEdgeColorLength(void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

#ifdef OSG_MT_CPTR_ASPECT
    virtual void execSyncV(      FieldContainer    &oFrom,
                                 ConstFieldMaskArg  whichField,
                                 AspectOffsetStore &oOffsets,
                                 ConstFieldMaskArg  syncMode  ,
                           const UInt32             uiSyncInfo);

            void execSync (      ShadowBorderBase *pFrom,
                                 ConstFieldMaskArg  whichField,
                                 AspectOffsetStore &oOffsets,
                                 ConstFieldMaskArg  syncMode  ,
                           const UInt32             uiSyncInfo);
#endif

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Edit                                   */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                     Aspect Create                            */
    /*! \{                                                                 */

#ifdef OSG_MT_CPTR_ASPECT
    virtual FieldContainer *createAspectCopy(
                                    const FieldContainer *pRefAspect) const;
#endif

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Edit                                   */
    /*! \{                                                                 */
    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

    virtual void resolveLinks(void);

    /*! \}                                                                 */
    /*==========================  PRIVATE  ================================*/

  private:
    /*---------------------------------------------------------------------*/

    // prohibit default functions (move to 'public' if you need one)
    void operator =(const ShadowBorderBase &source);
};

typedef ShadowBorderBase *ShadowBorderBaseP;

OSG_END_NAMESPACE

#endif /* _OSGSHADOWBORDERBASE_H_ */
