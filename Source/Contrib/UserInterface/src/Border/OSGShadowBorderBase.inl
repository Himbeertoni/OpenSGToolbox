/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *   contact:  David Kabala (djkabala@gmail.com)                             *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class ShadowBorder!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

OSG_BEGIN_NAMESPACE


//! access the type of the class
inline
OSG::FieldContainerType &ShadowBorderBase::getClassType(void)
{
    return _type;
}

//! access the numerical type of the class
inline
OSG::UInt32 ShadowBorderBase::getClassTypeId(void)
{
    return _type.getId();
}

inline
OSG::UInt16 ShadowBorderBase::getClassGroupId(void)
{
    return _type.getGroupId();
}

/*------------------------------ get -----------------------------------*/

//! Get the value of the ShadowBorder::_sfTopOffset field.

inline
Real32 &ShadowBorderBase::editTopOffset(void)
{
    editSField(TopOffsetFieldMask);

    return _sfTopOffset.getValue();
}

//! Get the value of the ShadowBorder::_sfTopOffset field.
inline
      Real32  ShadowBorderBase::getTopOffset(void) const
{
    return _sfTopOffset.getValue();
}

//! Set the value of the ShadowBorder::_sfTopOffset field.
inline
void ShadowBorderBase::setTopOffset(const Real32 value)
{
    editSField(TopOffsetFieldMask);

    _sfTopOffset.setValue(value);
}
//! Get the value of the ShadowBorder::_sfBottomOffset field.

inline
Real32 &ShadowBorderBase::editBottomOffset(void)
{
    editSField(BottomOffsetFieldMask);

    return _sfBottomOffset.getValue();
}

//! Get the value of the ShadowBorder::_sfBottomOffset field.
inline
      Real32  ShadowBorderBase::getBottomOffset(void) const
{
    return _sfBottomOffset.getValue();
}

//! Set the value of the ShadowBorder::_sfBottomOffset field.
inline
void ShadowBorderBase::setBottomOffset(const Real32 value)
{
    editSField(BottomOffsetFieldMask);

    _sfBottomOffset.setValue(value);
}
//! Get the value of the ShadowBorder::_sfLeftOffset field.

inline
Real32 &ShadowBorderBase::editLeftOffset(void)
{
    editSField(LeftOffsetFieldMask);

    return _sfLeftOffset.getValue();
}

//! Get the value of the ShadowBorder::_sfLeftOffset field.
inline
      Real32  ShadowBorderBase::getLeftOffset(void) const
{
    return _sfLeftOffset.getValue();
}

//! Set the value of the ShadowBorder::_sfLeftOffset field.
inline
void ShadowBorderBase::setLeftOffset(const Real32 value)
{
    editSField(LeftOffsetFieldMask);

    _sfLeftOffset.setValue(value);
}
//! Get the value of the ShadowBorder::_sfRightOffset field.

inline
Real32 &ShadowBorderBase::editRightOffset(void)
{
    editSField(RightOffsetFieldMask);

    return _sfRightOffset.getValue();
}

//! Get the value of the ShadowBorder::_sfRightOffset field.
inline
      Real32  ShadowBorderBase::getRightOffset(void) const
{
    return _sfRightOffset.getValue();
}

//! Set the value of the ShadowBorder::_sfRightOffset field.
inline
void ShadowBorderBase::setRightOffset(const Real32 value)
{
    editSField(RightOffsetFieldMask);

    _sfRightOffset.setValue(value);
}
//! Get the value of the ShadowBorder::_sfInternalColor field.

inline
Color4f &ShadowBorderBase::editInternalColor(void)
{
    editSField(InternalColorFieldMask);

    return _sfInternalColor.getValue();
}

//! Get the value of the ShadowBorder::_sfInternalColor field.
inline
const Color4f &ShadowBorderBase::getInternalColor(void) const
{
    return _sfInternalColor.getValue();
}

//! Set the value of the ShadowBorder::_sfInternalColor field.
inline
void ShadowBorderBase::setInternalColor(const Color4f &value)
{
    editSField(InternalColorFieldMask);

    _sfInternalColor.setValue(value);
}
//! Get the value of the ShadowBorder::_sfEdgeColor field.

inline
Color4f &ShadowBorderBase::editEdgeColor(void)
{
    editSField(EdgeColorFieldMask);

    return _sfEdgeColor.getValue();
}

//! Get the value of the ShadowBorder::_sfEdgeColor field.
inline
const Color4f &ShadowBorderBase::getEdgeColor(void) const
{
    return _sfEdgeColor.getValue();
}

//! Set the value of the ShadowBorder::_sfEdgeColor field.
inline
void ShadowBorderBase::setEdgeColor(const Color4f &value)
{
    editSField(EdgeColorFieldMask);

    _sfEdgeColor.setValue(value);
}

//! Get the value of the ShadowBorder::_sfInsideBorder field.
inline
Border * ShadowBorderBase::getInsideBorder(void) const
{
    return _sfInsideBorder.getValue();
}

//! Set the value of the ShadowBorder::_sfInsideBorder field.
inline
void ShadowBorderBase::setInsideBorder(Border * const value)
{
    editSField(InsideBorderFieldMask);

    _sfInsideBorder.setValue(value);
}
//! Get the value of the ShadowBorder::_sfCornerRadius field.

inline
Real32 &ShadowBorderBase::editCornerRadius(void)
{
    editSField(CornerRadiusFieldMask);

    return _sfCornerRadius.getValue();
}

//! Get the value of the ShadowBorder::_sfCornerRadius field.
inline
      Real32  ShadowBorderBase::getCornerRadius(void) const
{
    return _sfCornerRadius.getValue();
}

//! Set the value of the ShadowBorder::_sfCornerRadius field.
inline
void ShadowBorderBase::setCornerRadius(const Real32 value)
{
    editSField(CornerRadiusFieldMask);

    _sfCornerRadius.setValue(value);
}
//! Get the value of the ShadowBorder::_sfInternalToEdgeColorLength field.

inline
Real32 &ShadowBorderBase::editInternalToEdgeColorLength(void)
{
    editSField(InternalToEdgeColorLengthFieldMask);

    return _sfInternalToEdgeColorLength.getValue();
}

//! Get the value of the ShadowBorder::_sfInternalToEdgeColorLength field.
inline
      Real32  ShadowBorderBase::getInternalToEdgeColorLength(void) const
{
    return _sfInternalToEdgeColorLength.getValue();
}

//! Set the value of the ShadowBorder::_sfInternalToEdgeColorLength field.
inline
void ShadowBorderBase::setInternalToEdgeColorLength(const Real32 value)
{
    editSField(InternalToEdgeColorLengthFieldMask);

    _sfInternalToEdgeColorLength.setValue(value);
}


#ifdef OSG_MT_CPTR_ASPECT
inline
void ShadowBorderBase::execSync (      ShadowBorderBase *pFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    Inherited::execSync(pFrom, whichField, oOffsets, syncMode, uiSyncInfo);

    if(FieldBits::NoField != (TopOffsetFieldMask & whichField))
        _sfTopOffset.syncWith(pFrom->_sfTopOffset);

    if(FieldBits::NoField != (BottomOffsetFieldMask & whichField))
        _sfBottomOffset.syncWith(pFrom->_sfBottomOffset);

    if(FieldBits::NoField != (LeftOffsetFieldMask & whichField))
        _sfLeftOffset.syncWith(pFrom->_sfLeftOffset);

    if(FieldBits::NoField != (RightOffsetFieldMask & whichField))
        _sfRightOffset.syncWith(pFrom->_sfRightOffset);

    if(FieldBits::NoField != (InternalColorFieldMask & whichField))
        _sfInternalColor.syncWith(pFrom->_sfInternalColor);

    if(FieldBits::NoField != (EdgeColorFieldMask & whichField))
        _sfEdgeColor.syncWith(pFrom->_sfEdgeColor);

    if(FieldBits::NoField != (InsideBorderFieldMask & whichField))
        _sfInsideBorder.syncWith(pFrom->_sfInsideBorder);

    if(FieldBits::NoField != (CornerRadiusFieldMask & whichField))
        _sfCornerRadius.syncWith(pFrom->_sfCornerRadius);

    if(FieldBits::NoField != (InternalToEdgeColorLengthFieldMask & whichField))
        _sfInternalToEdgeColorLength.syncWith(pFrom->_sfInternalToEdgeColorLength);
}
#endif


inline
const Char8 *ShadowBorderBase::getClassname(void)
{
    return "ShadowBorder";
}
OSG_GEN_CONTAINERPTR(ShadowBorder);

OSG_END_NAMESPACE

