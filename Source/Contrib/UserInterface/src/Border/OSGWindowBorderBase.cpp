/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact:  David Kabala (djkabala@gmail.com)                             *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class WindowBorder!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>
#include <boost/assign/list_of.hpp>

#include "OSGConfig.h"



#include "OSGBorder.h"                  // InnerBorder Class
#include "OSGComponent.h"               // Titlebar Class

#include "OSGWindowBorderBase.h"
#include "OSGWindowBorder.h"

#include <boost/bind.hpp>

#ifdef WIN32 // turn off 'this' : used in base member initializer list warning
#pragma warning(disable:4355)
#endif

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::WindowBorder
    UI Window Border. A Compound Border made up of an inner border and outer border of any type.
 */

/***************************************************************************\
 *                        Field Documentation                              *
\***************************************************************************/

/*! \var Border *        WindowBorderBase::_sfInnerBorder
    
*/

/*! \var Border *        WindowBorderBase::_sfOuterBorder
    
*/

/*! \var Component *     WindowBorderBase::_sfTitlebar
    
*/


/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldTraits<WindowBorder *>::_type("WindowBorderPtr", "BorderPtr");
#endif

OSG_FIELDTRAITS_GETTYPE(WindowBorder *)

OSG_EXPORT_PTR_SFIELD_FULL(PointerSField,
                           WindowBorder *,
                           0);

OSG_EXPORT_PTR_MFIELD_FULL(PointerMField,
                           WindowBorder *,
                           0);

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

void WindowBorderBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new SFUnrecBorderPtr::Description(
        SFUnrecBorderPtr::getClassType(),
        "InnerBorder",
        "",
        InnerBorderFieldId, InnerBorderFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&WindowBorder::editHandleInnerBorder),
        static_cast<FieldGetMethodSig >(&WindowBorder::getHandleInnerBorder));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecBorderPtr::Description(
        SFUnrecBorderPtr::getClassType(),
        "OuterBorder",
        "",
        OuterBorderFieldId, OuterBorderFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&WindowBorder::editHandleOuterBorder),
        static_cast<FieldGetMethodSig >(&WindowBorder::getHandleOuterBorder));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecComponentPtr::Description(
        SFUnrecComponentPtr::getClassType(),
        "Titlebar",
        "",
        TitlebarFieldId, TitlebarFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&WindowBorder::editHandleTitlebar),
        static_cast<FieldGetMethodSig >(&WindowBorder::getHandleTitlebar));

    oType.addInitialDesc(pDesc);
}


WindowBorderBase::TypeObject WindowBorderBase::_type(
    WindowBorderBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    0,
    reinterpret_cast<PrototypeCreateF>(&WindowBorderBase::createEmptyLocal),
    WindowBorder::initMethod,
    WindowBorder::exitMethod,
    reinterpret_cast<InitalInsertDescFunc>(&WindowBorder::classDescInserter),
    false,
    0,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "\tname=\"WindowBorder\"\n"
    "\tparent=\"Border\"\n"
    "    library=\"ContribUserInterface\"\n"
    "    pointerfieldtypes=\"both\"\n"
    "\tstructure=\"concrete\"\n"
    "    systemcomponent=\"true\"\n"
    "    parentsystemcomponent=\"true\"\n"
    "    decoratable=\"false\"\n"
    "    useLocalIncludes=\"false\"\n"
    "    isNodeCore=\"false\"\n"
    "    authors=\"David Kabala (djkabala@gmail.com)                             \"\n"
    ">\n"
    "UI Window Border. A Compound Border made up of an inner border and outer border of any type.\n"
    "\t<Field\n"
    "\t\tname=\"InnerBorder\"\n"
    "\t\ttype=\"Border\"\n"
    "\t\tcategory=\"pointer\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t\tdefaultValue=\"NULL\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"OuterBorder\"\n"
    "\t\ttype=\"Border\"\n"
    "\t\tcategory=\"pointer\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t\tdefaultValue=\"NULL\"\n"
    "\t>\n"
    "\t</Field>\n"
    "        <Field\n"
    "          name=\"Titlebar\"\n"
    "          type=\"Component\"\n"
    "\t\tcategory=\"pointer\"\n"
    "          cardinality=\"single\"\n"
    "          visibility=\"external\"\n"
    "          access=\"public\"\n"
    "\t\tdefaultValue=\"NULL\"\n"
    "          >\n"
    "\t</Field>\n"
    "</FieldContainer>\n",
    "UI Window Border. A Compound Border made up of an inner border and outer border of any type.\n"
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &WindowBorderBase::getType(void)
{
    return _type;
}

const FieldContainerType &WindowBorderBase::getType(void) const
{
    return _type;
}

UInt32 WindowBorderBase::getContainerSize(void) const
{
    return sizeof(WindowBorder);
}

/*------------------------- decorator get ------------------------------*/


//! Get the WindowBorder::_sfInnerBorder field.
const SFUnrecBorderPtr *WindowBorderBase::getSFInnerBorder(void) const
{
    return &_sfInnerBorder;
}

SFUnrecBorderPtr    *WindowBorderBase::editSFInnerBorder    (void)
{
    editSField(InnerBorderFieldMask);

    return &_sfInnerBorder;
}

//! Get the WindowBorder::_sfOuterBorder field.
const SFUnrecBorderPtr *WindowBorderBase::getSFOuterBorder(void) const
{
    return &_sfOuterBorder;
}

SFUnrecBorderPtr    *WindowBorderBase::editSFOuterBorder    (void)
{
    editSField(OuterBorderFieldMask);

    return &_sfOuterBorder;
}

//! Get the WindowBorder::_sfTitlebar field.
const SFUnrecComponentPtr *WindowBorderBase::getSFTitlebar(void) const
{
    return &_sfTitlebar;
}

SFUnrecComponentPtr *WindowBorderBase::editSFTitlebar       (void)
{
    editSField(TitlebarFieldMask);

    return &_sfTitlebar;
}





/*------------------------------ access -----------------------------------*/

UInt32 WindowBorderBase::getBinSize(ConstFieldMaskArg whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (InnerBorderFieldMask & whichField))
    {
        returnValue += _sfInnerBorder.getBinSize();
    }
    if(FieldBits::NoField != (OuterBorderFieldMask & whichField))
    {
        returnValue += _sfOuterBorder.getBinSize();
    }
    if(FieldBits::NoField != (TitlebarFieldMask & whichField))
    {
        returnValue += _sfTitlebar.getBinSize();
    }

    return returnValue;
}

void WindowBorderBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (InnerBorderFieldMask & whichField))
    {
        _sfInnerBorder.copyToBin(pMem);
    }
    if(FieldBits::NoField != (OuterBorderFieldMask & whichField))
    {
        _sfOuterBorder.copyToBin(pMem);
    }
    if(FieldBits::NoField != (TitlebarFieldMask & whichField))
    {
        _sfTitlebar.copyToBin(pMem);
    }
}

void WindowBorderBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (InnerBorderFieldMask & whichField))
    {
        _sfInnerBorder.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (OuterBorderFieldMask & whichField))
    {
        _sfOuterBorder.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (TitlebarFieldMask & whichField))
    {
        _sfTitlebar.copyFromBin(pMem);
    }
}

//! create a new instance of the class
WindowBorderTransitPtr WindowBorderBase::createLocal(BitVector bFlags)
{
    WindowBorderTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyLocal(bFlags);

        fc = dynamic_pointer_cast<WindowBorder>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class, copy the container flags
WindowBorderTransitPtr WindowBorderBase::createDependent(BitVector bFlags)
{
    WindowBorderTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyDependent(bFlags);

        fc = dynamic_pointer_cast<WindowBorder>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class
WindowBorderTransitPtr WindowBorderBase::create(void)
{
    WindowBorderTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopy();

        fc = dynamic_pointer_cast<WindowBorder>(tmpPtr);
    }

    return fc;
}

WindowBorder *WindowBorderBase::createEmptyLocal(BitVector bFlags)
{
    WindowBorder *returnValue;

    newPtr<WindowBorder>(returnValue, bFlags);

    returnValue->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

//! create an empty new instance of the class, do not copy the prototype
WindowBorder *WindowBorderBase::createEmpty(void)
{
    WindowBorder *returnValue;

    newPtr<WindowBorder>(returnValue, Thread::getCurrentLocalFlags());

    returnValue->_pFieldFlags->_bNamespaceMask &=
        ~Thread::getCurrentLocalFlags();

    return returnValue;
}


FieldContainerTransitPtr WindowBorderBase::shallowCopyLocal(
    BitVector bFlags) const
{
    WindowBorder *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const WindowBorder *>(this), bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

FieldContainerTransitPtr WindowBorderBase::shallowCopyDependent(
    BitVector bFlags) const
{
    WindowBorder *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const WindowBorder *>(this), ~bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask = bFlags;

    return returnValue;
}

FieldContainerTransitPtr WindowBorderBase::shallowCopy(void) const
{
    WindowBorder *tmpPtr;

    newPtr(tmpPtr,
           dynamic_cast<const WindowBorder *>(this),
           Thread::getCurrentLocalFlags());

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~Thread::getCurrentLocalFlags();

    FieldContainerTransitPtr returnValue(tmpPtr);

    return returnValue;
}




/*------------------------- constructors ----------------------------------*/

WindowBorderBase::WindowBorderBase(void) :
    Inherited(),
    _sfInnerBorder            (NULL),
    _sfOuterBorder            (NULL),
    _sfTitlebar               (NULL)
{
}

WindowBorderBase::WindowBorderBase(const WindowBorderBase &source) :
    Inherited(source),
    _sfInnerBorder            (NULL),
    _sfOuterBorder            (NULL),
    _sfTitlebar               (NULL)
{
}


/*-------------------------- destructors ----------------------------------*/

WindowBorderBase::~WindowBorderBase(void)
{
}

void WindowBorderBase::onCreate(const WindowBorder *source)
{
    Inherited::onCreate(source);

    if(source != NULL)
    {
        WindowBorder *pThis = static_cast<WindowBorder *>(this);

        pThis->setInnerBorder(source->getInnerBorder());

        pThis->setOuterBorder(source->getOuterBorder());

        pThis->setTitlebar(source->getTitlebar());
    }
}

GetFieldHandlePtr WindowBorderBase::getHandleInnerBorder     (void) const
{
    SFUnrecBorderPtr::GetHandlePtr returnValue(
        new  SFUnrecBorderPtr::GetHandle(
             &_sfInnerBorder,
             this->getType().getFieldDesc(InnerBorderFieldId),
             const_cast<WindowBorderBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr WindowBorderBase::editHandleInnerBorder    (void)
{
    SFUnrecBorderPtr::EditHandlePtr returnValue(
        new  SFUnrecBorderPtr::EditHandle(
             &_sfInnerBorder,
             this->getType().getFieldDesc(InnerBorderFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&WindowBorder::setInnerBorder,
                    static_cast<WindowBorder *>(this), _1));

    editSField(InnerBorderFieldMask);

    return returnValue;
}

GetFieldHandlePtr WindowBorderBase::getHandleOuterBorder     (void) const
{
    SFUnrecBorderPtr::GetHandlePtr returnValue(
        new  SFUnrecBorderPtr::GetHandle(
             &_sfOuterBorder,
             this->getType().getFieldDesc(OuterBorderFieldId),
             const_cast<WindowBorderBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr WindowBorderBase::editHandleOuterBorder    (void)
{
    SFUnrecBorderPtr::EditHandlePtr returnValue(
        new  SFUnrecBorderPtr::EditHandle(
             &_sfOuterBorder,
             this->getType().getFieldDesc(OuterBorderFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&WindowBorder::setOuterBorder,
                    static_cast<WindowBorder *>(this), _1));

    editSField(OuterBorderFieldMask);

    return returnValue;
}

GetFieldHandlePtr WindowBorderBase::getHandleTitlebar        (void) const
{
    SFUnrecComponentPtr::GetHandlePtr returnValue(
        new  SFUnrecComponentPtr::GetHandle(
             &_sfTitlebar,
             this->getType().getFieldDesc(TitlebarFieldId),
             const_cast<WindowBorderBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr WindowBorderBase::editHandleTitlebar       (void)
{
    SFUnrecComponentPtr::EditHandlePtr returnValue(
        new  SFUnrecComponentPtr::EditHandle(
             &_sfTitlebar,
             this->getType().getFieldDesc(TitlebarFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&WindowBorder::setTitlebar,
                    static_cast<WindowBorder *>(this), _1));

    editSField(TitlebarFieldMask);

    return returnValue;
}


#ifdef OSG_MT_CPTR_ASPECT
void WindowBorderBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    WindowBorder *pThis = static_cast<WindowBorder *>(this);

    pThis->execSync(static_cast<WindowBorder *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif


#ifdef OSG_MT_CPTR_ASPECT
FieldContainer *WindowBorderBase::createAspectCopy(
    const FieldContainer *pRefAspect) const
{
    WindowBorder *returnValue;

    newAspectCopy(returnValue,
                  dynamic_cast<const WindowBorder *>(pRefAspect),
                  dynamic_cast<const WindowBorder *>(this));

    return returnValue;
}
#endif

void WindowBorderBase::resolveLinks(void)
{
    Inherited::resolveLinks();

    static_cast<WindowBorder *>(this)->setInnerBorder(NULL);

    static_cast<WindowBorder *>(this)->setOuterBorder(NULL);

    static_cast<WindowBorder *>(this)->setTitlebar(NULL);


}


OSG_END_NAMESPACE
