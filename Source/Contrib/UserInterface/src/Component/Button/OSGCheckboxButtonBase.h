/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact:  David Kabala (djkabala@gmail.com)                             *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class CheckboxButton
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#ifndef _OSGCHECKBOXBUTTONBASE_H_
#define _OSGCHECKBOXBUTTONBASE_H_
#ifdef __sgi
#pragma once
#endif


#include "OSGConfig.h"
#include "OSGContribUserInterfaceDef.h"

//#include "OSGBaseTypes.h"

#include "OSGToggleButton.h" // Parent

#include "OSGUIDrawObjectCanvasFields.h" // CheckboxDrawObject type

#include "OSGCheckboxButtonFields.h"

OSG_BEGIN_NAMESPACE

class CheckboxButton;

//! \brief CheckboxButton Base Class.

class OSG_CONTRIBUSERINTERFACE_DLLMAPPING CheckboxButtonBase : public ToggleButton
{
  public:

    typedef ToggleButton Inherited;
    typedef ToggleButton ParentContainer;

    typedef Inherited::TypeObject TypeObject;
    typedef TypeObject::InitPhase InitPhase;

    OSG_GEN_INTERNALPTR(CheckboxButton);

    /*==========================  PUBLIC  =================================*/

  public:

    enum
    {
        CheckboxDrawObjectFieldId = Inherited::NextFieldId,
        SelectedCheckboxDrawObjectFieldId = CheckboxDrawObjectFieldId + 1,
        ActiveCheckboxDrawObjectFieldId = SelectedCheckboxDrawObjectFieldId + 1,
        ActiveSelectedCheckboxDrawObjectFieldId = ActiveCheckboxDrawObjectFieldId + 1,
        RolloverCheckboxDrawObjectFieldId = ActiveSelectedCheckboxDrawObjectFieldId + 1,
        RolloverSelectedCheckboxDrawObjectFieldId = RolloverCheckboxDrawObjectFieldId + 1,
        DisabledCheckboxDrawObjectFieldId = RolloverSelectedCheckboxDrawObjectFieldId + 1,
        DisabledSelectedCheckboxDrawObjectFieldId = DisabledCheckboxDrawObjectFieldId + 1,
        NextFieldId = DisabledSelectedCheckboxDrawObjectFieldId + 1
    };

    static const OSG::BitVector CheckboxDrawObjectFieldMask =
        (TypeTraits<BitVector>::One << CheckboxDrawObjectFieldId);
    static const OSG::BitVector SelectedCheckboxDrawObjectFieldMask =
        (TypeTraits<BitVector>::One << SelectedCheckboxDrawObjectFieldId);
    static const OSG::BitVector ActiveCheckboxDrawObjectFieldMask =
        (TypeTraits<BitVector>::One << ActiveCheckboxDrawObjectFieldId);
    static const OSG::BitVector ActiveSelectedCheckboxDrawObjectFieldMask =
        (TypeTraits<BitVector>::One << ActiveSelectedCheckboxDrawObjectFieldId);
    static const OSG::BitVector RolloverCheckboxDrawObjectFieldMask =
        (TypeTraits<BitVector>::One << RolloverCheckboxDrawObjectFieldId);
    static const OSG::BitVector RolloverSelectedCheckboxDrawObjectFieldMask =
        (TypeTraits<BitVector>::One << RolloverSelectedCheckboxDrawObjectFieldId);
    static const OSG::BitVector DisabledCheckboxDrawObjectFieldMask =
        (TypeTraits<BitVector>::One << DisabledCheckboxDrawObjectFieldId);
    static const OSG::BitVector DisabledSelectedCheckboxDrawObjectFieldMask =
        (TypeTraits<BitVector>::One << DisabledSelectedCheckboxDrawObjectFieldId);
    static const OSG::BitVector NextFieldMask =
        (TypeTraits<BitVector>::One << NextFieldId);
        
    typedef SFUnrecUIDrawObjectCanvasPtr SFCheckboxDrawObjectType;
    typedef SFUnrecUIDrawObjectCanvasPtr SFSelectedCheckboxDrawObjectType;
    typedef SFUnrecUIDrawObjectCanvasPtr SFActiveCheckboxDrawObjectType;
    typedef SFUnrecUIDrawObjectCanvasPtr SFActiveSelectedCheckboxDrawObjectType;
    typedef SFUnrecUIDrawObjectCanvasPtr SFRolloverCheckboxDrawObjectType;
    typedef SFUnrecUIDrawObjectCanvasPtr SFRolloverSelectedCheckboxDrawObjectType;
    typedef SFUnrecUIDrawObjectCanvasPtr SFDisabledCheckboxDrawObjectType;
    typedef SFUnrecUIDrawObjectCanvasPtr SFDisabledSelectedCheckboxDrawObjectType;

    /*---------------------------------------------------------------------*/
    /*! \name                    Class Get                                 */
    /*! \{                                                                 */

    static FieldContainerType &getClassType   (void);
    static UInt32              getClassTypeId (void);
    static UInt16              getClassGroupId(void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                FieldContainer Get                            */
    /*! \{                                                                 */

    virtual       FieldContainerType &getType         (void);
    virtual const FieldContainerType &getType         (void) const;

    virtual       UInt32              getContainerSize(void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Get                                 */
    /*! \{                                                                 */

            const SFUnrecUIDrawObjectCanvasPtr *getSFCheckboxDrawObject(void) const;
                  SFUnrecUIDrawObjectCanvasPtr *editSFCheckboxDrawObject(void);
            const SFUnrecUIDrawObjectCanvasPtr *getSFSelectedCheckboxDrawObject(void) const;
                  SFUnrecUIDrawObjectCanvasPtr *editSFSelectedCheckboxDrawObject(void);
            const SFUnrecUIDrawObjectCanvasPtr *getSFActiveCheckboxDrawObject(void) const;
                  SFUnrecUIDrawObjectCanvasPtr *editSFActiveCheckboxDrawObject(void);
            const SFUnrecUIDrawObjectCanvasPtr *getSFActiveSelectedCheckboxDrawObject(void) const;
                  SFUnrecUIDrawObjectCanvasPtr *editSFActiveSelectedCheckboxDrawObject(void);
            const SFUnrecUIDrawObjectCanvasPtr *getSFRolloverCheckboxDrawObject(void) const;
                  SFUnrecUIDrawObjectCanvasPtr *editSFRolloverCheckboxDrawObject(void);
            const SFUnrecUIDrawObjectCanvasPtr *getSFRolloverSelectedCheckboxDrawObject(void) const;
                  SFUnrecUIDrawObjectCanvasPtr *editSFRolloverSelectedCheckboxDrawObject(void);
            const SFUnrecUIDrawObjectCanvasPtr *getSFDisabledCheckboxDrawObject(void) const;
                  SFUnrecUIDrawObjectCanvasPtr *editSFDisabledCheckboxDrawObject(void);
            const SFUnrecUIDrawObjectCanvasPtr *getSFDisabledSelectedCheckboxDrawObject(void) const;
                  SFUnrecUIDrawObjectCanvasPtr *editSFDisabledSelectedCheckboxDrawObject(void);


                  UIDrawObjectCanvas * getCheckboxDrawObject(void) const;

                  UIDrawObjectCanvas * getSelectedCheckboxDrawObject(void) const;

                  UIDrawObjectCanvas * getActiveCheckboxDrawObject(void) const;

                  UIDrawObjectCanvas * getActiveSelectedCheckboxDrawObject(void) const;

                  UIDrawObjectCanvas * getRolloverCheckboxDrawObject(void) const;

                  UIDrawObjectCanvas * getRolloverSelectedCheckboxDrawObject(void) const;

                  UIDrawObjectCanvas * getDisabledCheckboxDrawObject(void) const;

                  UIDrawObjectCanvas * getDisabledSelectedCheckboxDrawObject(void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Set                                 */
    /*! \{                                                                 */

            void setCheckboxDrawObject(UIDrawObjectCanvas * const value);
            void setSelectedCheckboxDrawObject(UIDrawObjectCanvas * const value);
            void setActiveCheckboxDrawObject(UIDrawObjectCanvas * const value);
            void setActiveSelectedCheckboxDrawObject(UIDrawObjectCanvas * const value);
            void setRolloverCheckboxDrawObject(UIDrawObjectCanvas * const value);
            void setRolloverSelectedCheckboxDrawObject(UIDrawObjectCanvas * const value);
            void setDisabledCheckboxDrawObject(UIDrawObjectCanvas * const value);
            void setDisabledSelectedCheckboxDrawObject(UIDrawObjectCanvas * const value);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                Ptr Field Set                                 */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                Ptr MField Set                                */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Binary Access                              */
    /*! \{                                                                 */

    virtual UInt32 getBinSize (ConstFieldMaskArg  whichField);
    virtual void   copyToBin  (BinaryDataHandler &pMem,
                               ConstFieldMaskArg  whichField);
    virtual void   copyFromBin(BinaryDataHandler &pMem,
                               ConstFieldMaskArg  whichField);


    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Construction                               */
    /*! \{                                                                 */

    static  CheckboxButtonTransitPtr  create          (void);
    static  CheckboxButton           *createEmpty     (void);

    static  CheckboxButtonTransitPtr  createLocal     (
                                               BitVector bFlags = FCLocal::All);

    static  CheckboxButton            *createEmptyLocal(
                                              BitVector bFlags = FCLocal::All);

    static  CheckboxButtonTransitPtr  createDependent  (BitVector bFlags);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Copy                                   */
    /*! \{                                                                 */

    virtual FieldContainerTransitPtr shallowCopy     (void) const;
    virtual FieldContainerTransitPtr shallowCopyLocal(
                                       BitVector bFlags = FCLocal::All) const;
    virtual FieldContainerTransitPtr shallowCopyDependent(
                                                      BitVector bFlags) const;

    /*! \}                                                                 */
    /*=========================  PROTECTED  ===============================*/

  protected:

    static TypeObject _type;

    static       void   classDescInserter(TypeObject &oType);
    static const Char8 *getClassname     (void             );

    /*---------------------------------------------------------------------*/
    /*! \name                      Fields                                  */
    /*! \{                                                                 */

    SFUnrecUIDrawObjectCanvasPtr _sfCheckboxDrawObject;
    SFUnrecUIDrawObjectCanvasPtr _sfSelectedCheckboxDrawObject;
    SFUnrecUIDrawObjectCanvasPtr _sfActiveCheckboxDrawObject;
    SFUnrecUIDrawObjectCanvasPtr _sfActiveSelectedCheckboxDrawObject;
    SFUnrecUIDrawObjectCanvasPtr _sfRolloverCheckboxDrawObject;
    SFUnrecUIDrawObjectCanvasPtr _sfRolloverSelectedCheckboxDrawObject;
    SFUnrecUIDrawObjectCanvasPtr _sfDisabledCheckboxDrawObject;
    SFUnrecUIDrawObjectCanvasPtr _sfDisabledSelectedCheckboxDrawObject;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Constructors                               */
    /*! \{                                                                 */

    CheckboxButtonBase(void);
    CheckboxButtonBase(const CheckboxButtonBase &source);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Destructors                                */
    /*! \{                                                                 */

    virtual ~CheckboxButtonBase(void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                     onCreate                                */
    /*! \{                                                                 */

    void onCreate(const CheckboxButton *source = NULL);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Generic Field Access                      */
    /*! \{                                                                 */

    GetFieldHandlePtr  getHandleCheckboxDrawObject (void) const;
    EditFieldHandlePtr editHandleCheckboxDrawObject(void);
    GetFieldHandlePtr  getHandleSelectedCheckboxDrawObject (void) const;
    EditFieldHandlePtr editHandleSelectedCheckboxDrawObject(void);
    GetFieldHandlePtr  getHandleActiveCheckboxDrawObject (void) const;
    EditFieldHandlePtr editHandleActiveCheckboxDrawObject(void);
    GetFieldHandlePtr  getHandleActiveSelectedCheckboxDrawObject (void) const;
    EditFieldHandlePtr editHandleActiveSelectedCheckboxDrawObject(void);
    GetFieldHandlePtr  getHandleRolloverCheckboxDrawObject (void) const;
    EditFieldHandlePtr editHandleRolloverCheckboxDrawObject(void);
    GetFieldHandlePtr  getHandleRolloverSelectedCheckboxDrawObject (void) const;
    EditFieldHandlePtr editHandleRolloverSelectedCheckboxDrawObject(void);
    GetFieldHandlePtr  getHandleDisabledCheckboxDrawObject (void) const;
    EditFieldHandlePtr editHandleDisabledCheckboxDrawObject(void);
    GetFieldHandlePtr  getHandleDisabledSelectedCheckboxDrawObject (void) const;
    EditFieldHandlePtr editHandleDisabledSelectedCheckboxDrawObject(void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

#ifdef OSG_MT_CPTR_ASPECT
    virtual void execSyncV(      FieldContainer    &oFrom,
                                 ConstFieldMaskArg  whichField,
                                 AspectOffsetStore &oOffsets,
                                 ConstFieldMaskArg  syncMode  ,
                           const UInt32             uiSyncInfo);

            void execSync (      CheckboxButtonBase *pFrom,
                                 ConstFieldMaskArg  whichField,
                                 AspectOffsetStore &oOffsets,
                                 ConstFieldMaskArg  syncMode  ,
                           const UInt32             uiSyncInfo);
#endif

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Edit                                   */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                     Aspect Create                            */
    /*! \{                                                                 */

#ifdef OSG_MT_CPTR_ASPECT
    virtual FieldContainer *createAspectCopy(
                                    const FieldContainer *pRefAspect) const;
#endif

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Edit                                   */
    /*! \{                                                                 */
    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

    virtual void resolveLinks(void);

    /*! \}                                                                 */
    /*==========================  PRIVATE  ================================*/

  private:
    /*---------------------------------------------------------------------*/

    // prohibit default functions (move to 'public' if you need one)
    void operator =(const CheckboxButtonBase &source);
};

typedef CheckboxButtonBase *CheckboxButtonBaseP;

OSG_END_NAMESPACE

#endif /* _OSGCHECKBOXBUTTONBASE_H_ */
