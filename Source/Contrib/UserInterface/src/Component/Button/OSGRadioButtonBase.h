/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact:  David Kabala (djkabala@gmail.com)                             *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class RadioButton
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#ifndef _OSGRADIOBUTTONBASE_H_
#define _OSGRADIOBUTTONBASE_H_
#ifdef __sgi
#pragma once
#endif


#include "OSGConfig.h"
#include "OSGContribUserInterfaceDef.h"

//#include "OSGBaseTypes.h"

#include "OSGToggleButton.h" // Parent

#include "OSGUIDrawObjectCanvasFields.h" // RadioDrawObject type

#include "OSGRadioButtonFields.h"

OSG_BEGIN_NAMESPACE

class RadioButton;

//! \brief RadioButton Base Class.

class OSG_CONTRIBUSERINTERFACE_DLLMAPPING RadioButtonBase : public ToggleButton
{
  public:

    typedef ToggleButton Inherited;
    typedef ToggleButton ParentContainer;

    typedef Inherited::TypeObject TypeObject;
    typedef TypeObject::InitPhase InitPhase;

    OSG_GEN_INTERNALPTR(RadioButton);

    /*==========================  PUBLIC  =================================*/

  public:

    enum
    {
        RadioDrawObjectFieldId = Inherited::NextFieldId,
        SelectedRadioDrawObjectFieldId = RadioDrawObjectFieldId + 1,
        ActiveRadioDrawObjectFieldId = SelectedRadioDrawObjectFieldId + 1,
        ActiveSelectedRadioDrawObjectFieldId = ActiveRadioDrawObjectFieldId + 1,
        RolloverRadioDrawObjectFieldId = ActiveSelectedRadioDrawObjectFieldId + 1,
        RolloverSelectedRadioDrawObjectFieldId = RolloverRadioDrawObjectFieldId + 1,
        DisabledRadioDrawObjectFieldId = RolloverSelectedRadioDrawObjectFieldId + 1,
        DisabledSelectedRadioDrawObjectFieldId = DisabledRadioDrawObjectFieldId + 1,
        NextFieldId = DisabledSelectedRadioDrawObjectFieldId + 1
    };

    static const OSG::BitVector RadioDrawObjectFieldMask =
        (TypeTraits<BitVector>::One << RadioDrawObjectFieldId);
    static const OSG::BitVector SelectedRadioDrawObjectFieldMask =
        (TypeTraits<BitVector>::One << SelectedRadioDrawObjectFieldId);
    static const OSG::BitVector ActiveRadioDrawObjectFieldMask =
        (TypeTraits<BitVector>::One << ActiveRadioDrawObjectFieldId);
    static const OSG::BitVector ActiveSelectedRadioDrawObjectFieldMask =
        (TypeTraits<BitVector>::One << ActiveSelectedRadioDrawObjectFieldId);
    static const OSG::BitVector RolloverRadioDrawObjectFieldMask =
        (TypeTraits<BitVector>::One << RolloverRadioDrawObjectFieldId);
    static const OSG::BitVector RolloverSelectedRadioDrawObjectFieldMask =
        (TypeTraits<BitVector>::One << RolloverSelectedRadioDrawObjectFieldId);
    static const OSG::BitVector DisabledRadioDrawObjectFieldMask =
        (TypeTraits<BitVector>::One << DisabledRadioDrawObjectFieldId);
    static const OSG::BitVector DisabledSelectedRadioDrawObjectFieldMask =
        (TypeTraits<BitVector>::One << DisabledSelectedRadioDrawObjectFieldId);
    static const OSG::BitVector NextFieldMask =
        (TypeTraits<BitVector>::One << NextFieldId);
        
    typedef SFUnrecUIDrawObjectCanvasPtr SFRadioDrawObjectType;
    typedef SFUnrecUIDrawObjectCanvasPtr SFSelectedRadioDrawObjectType;
    typedef SFUnrecUIDrawObjectCanvasPtr SFActiveRadioDrawObjectType;
    typedef SFUnrecUIDrawObjectCanvasPtr SFActiveSelectedRadioDrawObjectType;
    typedef SFUnrecUIDrawObjectCanvasPtr SFRolloverRadioDrawObjectType;
    typedef SFUnrecUIDrawObjectCanvasPtr SFRolloverSelectedRadioDrawObjectType;
    typedef SFUnrecUIDrawObjectCanvasPtr SFDisabledRadioDrawObjectType;
    typedef SFUnrecUIDrawObjectCanvasPtr SFDisabledSelectedRadioDrawObjectType;

    /*---------------------------------------------------------------------*/
    /*! \name                    Class Get                                 */
    /*! \{                                                                 */

    static FieldContainerType &getClassType   (void);
    static UInt32              getClassTypeId (void);
    static UInt16              getClassGroupId(void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                FieldContainer Get                            */
    /*! \{                                                                 */

    virtual       FieldContainerType &getType         (void);
    virtual const FieldContainerType &getType         (void) const;

    virtual       UInt32              getContainerSize(void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Get                                 */
    /*! \{                                                                 */

            const SFUnrecUIDrawObjectCanvasPtr *getSFRadioDrawObject(void) const;
                  SFUnrecUIDrawObjectCanvasPtr *editSFRadioDrawObject(void);
            const SFUnrecUIDrawObjectCanvasPtr *getSFSelectedRadioDrawObject(void) const;
                  SFUnrecUIDrawObjectCanvasPtr *editSFSelectedRadioDrawObject(void);
            const SFUnrecUIDrawObjectCanvasPtr *getSFActiveRadioDrawObject(void) const;
                  SFUnrecUIDrawObjectCanvasPtr *editSFActiveRadioDrawObject(void);
            const SFUnrecUIDrawObjectCanvasPtr *getSFActiveSelectedRadioDrawObject(void) const;
                  SFUnrecUIDrawObjectCanvasPtr *editSFActiveSelectedRadioDrawObject(void);
            const SFUnrecUIDrawObjectCanvasPtr *getSFRolloverRadioDrawObject(void) const;
                  SFUnrecUIDrawObjectCanvasPtr *editSFRolloverRadioDrawObject(void);
            const SFUnrecUIDrawObjectCanvasPtr *getSFRolloverSelectedRadioDrawObject(void) const;
                  SFUnrecUIDrawObjectCanvasPtr *editSFRolloverSelectedRadioDrawObject(void);
            const SFUnrecUIDrawObjectCanvasPtr *getSFDisabledRadioDrawObject(void) const;
                  SFUnrecUIDrawObjectCanvasPtr *editSFDisabledRadioDrawObject(void);
            const SFUnrecUIDrawObjectCanvasPtr *getSFDisabledSelectedRadioDrawObject(void) const;
                  SFUnrecUIDrawObjectCanvasPtr *editSFDisabledSelectedRadioDrawObject(void);


                  UIDrawObjectCanvas * getRadioDrawObject(void) const;

                  UIDrawObjectCanvas * getSelectedRadioDrawObject(void) const;

                  UIDrawObjectCanvas * getActiveRadioDrawObject(void) const;

                  UIDrawObjectCanvas * getActiveSelectedRadioDrawObject(void) const;

                  UIDrawObjectCanvas * getRolloverRadioDrawObject(void) const;

                  UIDrawObjectCanvas * getRolloverSelectedRadioDrawObject(void) const;

                  UIDrawObjectCanvas * getDisabledRadioDrawObject(void) const;

                  UIDrawObjectCanvas * getDisabledSelectedRadioDrawObject(void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Set                                 */
    /*! \{                                                                 */

            void setRadioDrawObject(UIDrawObjectCanvas * const value);
            void setSelectedRadioDrawObject(UIDrawObjectCanvas * const value);
            void setActiveRadioDrawObject(UIDrawObjectCanvas * const value);
            void setActiveSelectedRadioDrawObject(UIDrawObjectCanvas * const value);
            void setRolloverRadioDrawObject(UIDrawObjectCanvas * const value);
            void setRolloverSelectedRadioDrawObject(UIDrawObjectCanvas * const value);
            void setDisabledRadioDrawObject(UIDrawObjectCanvas * const value);
            void setDisabledSelectedRadioDrawObject(UIDrawObjectCanvas * const value);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                Ptr Field Set                                 */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                Ptr MField Set                                */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Binary Access                              */
    /*! \{                                                                 */

    virtual UInt32 getBinSize (ConstFieldMaskArg  whichField);
    virtual void   copyToBin  (BinaryDataHandler &pMem,
                               ConstFieldMaskArg  whichField);
    virtual void   copyFromBin(BinaryDataHandler &pMem,
                               ConstFieldMaskArg  whichField);


    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Construction                               */
    /*! \{                                                                 */

    static  RadioButtonTransitPtr  create          (void);
    static  RadioButton           *createEmpty     (void);

    static  RadioButtonTransitPtr  createLocal     (
                                               BitVector bFlags = FCLocal::All);

    static  RadioButton            *createEmptyLocal(
                                              BitVector bFlags = FCLocal::All);

    static  RadioButtonTransitPtr  createDependent  (BitVector bFlags);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Copy                                   */
    /*! \{                                                                 */

    virtual FieldContainerTransitPtr shallowCopy     (void) const;
    virtual FieldContainerTransitPtr shallowCopyLocal(
                                       BitVector bFlags = FCLocal::All) const;
    virtual FieldContainerTransitPtr shallowCopyDependent(
                                                      BitVector bFlags) const;

    /*! \}                                                                 */
    /*=========================  PROTECTED  ===============================*/

  protected:

    static TypeObject _type;

    static       void   classDescInserter(TypeObject &oType);
    static const Char8 *getClassname     (void             );

    /*---------------------------------------------------------------------*/
    /*! \name                      Fields                                  */
    /*! \{                                                                 */

    SFUnrecUIDrawObjectCanvasPtr _sfRadioDrawObject;
    SFUnrecUIDrawObjectCanvasPtr _sfSelectedRadioDrawObject;
    SFUnrecUIDrawObjectCanvasPtr _sfActiveRadioDrawObject;
    SFUnrecUIDrawObjectCanvasPtr _sfActiveSelectedRadioDrawObject;
    SFUnrecUIDrawObjectCanvasPtr _sfRolloverRadioDrawObject;
    SFUnrecUIDrawObjectCanvasPtr _sfRolloverSelectedRadioDrawObject;
    SFUnrecUIDrawObjectCanvasPtr _sfDisabledRadioDrawObject;
    SFUnrecUIDrawObjectCanvasPtr _sfDisabledSelectedRadioDrawObject;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Constructors                               */
    /*! \{                                                                 */

    RadioButtonBase(void);
    RadioButtonBase(const RadioButtonBase &source);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Destructors                                */
    /*! \{                                                                 */

    virtual ~RadioButtonBase(void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                     onCreate                                */
    /*! \{                                                                 */

    void onCreate(const RadioButton *source = NULL);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Generic Field Access                      */
    /*! \{                                                                 */

    GetFieldHandlePtr  getHandleRadioDrawObject (void) const;
    EditFieldHandlePtr editHandleRadioDrawObject(void);
    GetFieldHandlePtr  getHandleSelectedRadioDrawObject (void) const;
    EditFieldHandlePtr editHandleSelectedRadioDrawObject(void);
    GetFieldHandlePtr  getHandleActiveRadioDrawObject (void) const;
    EditFieldHandlePtr editHandleActiveRadioDrawObject(void);
    GetFieldHandlePtr  getHandleActiveSelectedRadioDrawObject (void) const;
    EditFieldHandlePtr editHandleActiveSelectedRadioDrawObject(void);
    GetFieldHandlePtr  getHandleRolloverRadioDrawObject (void) const;
    EditFieldHandlePtr editHandleRolloverRadioDrawObject(void);
    GetFieldHandlePtr  getHandleRolloverSelectedRadioDrawObject (void) const;
    EditFieldHandlePtr editHandleRolloverSelectedRadioDrawObject(void);
    GetFieldHandlePtr  getHandleDisabledRadioDrawObject (void) const;
    EditFieldHandlePtr editHandleDisabledRadioDrawObject(void);
    GetFieldHandlePtr  getHandleDisabledSelectedRadioDrawObject (void) const;
    EditFieldHandlePtr editHandleDisabledSelectedRadioDrawObject(void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

#ifdef OSG_MT_CPTR_ASPECT
    virtual void execSyncV(      FieldContainer    &oFrom,
                                 ConstFieldMaskArg  whichField,
                                 AspectOffsetStore &oOffsets,
                                 ConstFieldMaskArg  syncMode  ,
                           const UInt32             uiSyncInfo);

            void execSync (      RadioButtonBase *pFrom,
                                 ConstFieldMaskArg  whichField,
                                 AspectOffsetStore &oOffsets,
                                 ConstFieldMaskArg  syncMode  ,
                           const UInt32             uiSyncInfo);
#endif

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Edit                                   */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                     Aspect Create                            */
    /*! \{                                                                 */

#ifdef OSG_MT_CPTR_ASPECT
    virtual FieldContainer *createAspectCopy(
                                    const FieldContainer *pRefAspect) const;
#endif

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Edit                                   */
    /*! \{                                                                 */
    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

    virtual void resolveLinks(void);

    /*! \}                                                                 */
    /*==========================  PRIVATE  ================================*/

  private:
    /*---------------------------------------------------------------------*/

    // prohibit default functions (move to 'public' if you need one)
    void operator =(const RadioButtonBase &source);
};

typedef RadioButtonBase *RadioButtonBaseP;

OSG_END_NAMESPACE

#endif /* _OSGRADIOBUTTONBASE_H_ */
