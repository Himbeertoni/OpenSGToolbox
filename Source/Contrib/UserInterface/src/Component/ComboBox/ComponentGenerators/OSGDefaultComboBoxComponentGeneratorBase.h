/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact:  David Kabala (djkabala@gmail.com)                             *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class DefaultComboBoxComponentGenerator
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#ifndef _OSGDEFAULTCOMBOBOXCOMPONENTGENERATORBASE_H_
#define _OSGDEFAULTCOMBOBOXCOMPONENTGENERATORBASE_H_
#ifdef __sgi
#pragma once
#endif


#include "OSGConfig.h"
#include "OSGContribUserInterfaceDef.h"

//#include "OSGBaseTypes.h"

#include "OSGComboBoxComponentGenerator.h" // Parent

#include "OSGComponentFields.h"         // DrawObjectPrototype type
#include "OSGLayerFields.h"             // SelectedBackground type
#include "OSGBorderFields.h"            // SelectedBorder type
#include "OSGBaseFields.h"              // SelectedTextColor type
#include "OSGSysFields.h"               // FocusedTextColorHasPriority type

#include "OSGDefaultComboBoxComponentGeneratorFields.h"

OSG_BEGIN_NAMESPACE

class DefaultComboBoxComponentGenerator;

//! \brief DefaultComboBoxComponentGenerator Base Class.

class OSG_CONTRIBUSERINTERFACE_DLLMAPPING DefaultComboBoxComponentGeneratorBase : public ComboBoxComponentGenerator
{
  public:

    typedef ComboBoxComponentGenerator Inherited;
    typedef ComboBoxComponentGenerator ParentContainer;

    typedef Inherited::TypeObject TypeObject;
    typedef TypeObject::InitPhase InitPhase;

    OSG_GEN_INTERNALPTR(DefaultComboBoxComponentGenerator);

    /*==========================  PUBLIC  =================================*/

  public:

    enum
    {
        DrawObjectPrototypeFieldId = Inherited::NextFieldId,
        SelectedBackgroundFieldId = DrawObjectPrototypeFieldId + 1,
        FocusedBackgroundFieldId = SelectedBackgroundFieldId + 1,
        SelectedForegroundFieldId = FocusedBackgroundFieldId + 1,
        FocusedForegroundFieldId = SelectedForegroundFieldId + 1,
        SelectedBorderFieldId = FocusedForegroundFieldId + 1,
        FocusedBorderFieldId = SelectedBorderFieldId + 1,
        SelectedTextColorFieldId = FocusedBorderFieldId + 1,
        FocusedTextColorFieldId = SelectedTextColorFieldId + 1,
        FocusedTextColorHasPriorityFieldId = FocusedTextColorFieldId + 1,
        FocusedBorderHasPriorityFieldId = FocusedTextColorHasPriorityFieldId + 1,
        FocusedBackgroundHasPriorityFieldId = FocusedBorderHasPriorityFieldId + 1,
        NextFieldId = FocusedBackgroundHasPriorityFieldId + 1
    };

    static const OSG::BitVector DrawObjectPrototypeFieldMask =
        (TypeTraits<BitVector>::One << DrawObjectPrototypeFieldId);
    static const OSG::BitVector SelectedBackgroundFieldMask =
        (TypeTraits<BitVector>::One << SelectedBackgroundFieldId);
    static const OSG::BitVector FocusedBackgroundFieldMask =
        (TypeTraits<BitVector>::One << FocusedBackgroundFieldId);
    static const OSG::BitVector SelectedForegroundFieldMask =
        (TypeTraits<BitVector>::One << SelectedForegroundFieldId);
    static const OSG::BitVector FocusedForegroundFieldMask =
        (TypeTraits<BitVector>::One << FocusedForegroundFieldId);
    static const OSG::BitVector SelectedBorderFieldMask =
        (TypeTraits<BitVector>::One << SelectedBorderFieldId);
    static const OSG::BitVector FocusedBorderFieldMask =
        (TypeTraits<BitVector>::One << FocusedBorderFieldId);
    static const OSG::BitVector SelectedTextColorFieldMask =
        (TypeTraits<BitVector>::One << SelectedTextColorFieldId);
    static const OSG::BitVector FocusedTextColorFieldMask =
        (TypeTraits<BitVector>::One << FocusedTextColorFieldId);
    static const OSG::BitVector FocusedTextColorHasPriorityFieldMask =
        (TypeTraits<BitVector>::One << FocusedTextColorHasPriorityFieldId);
    static const OSG::BitVector FocusedBorderHasPriorityFieldMask =
        (TypeTraits<BitVector>::One << FocusedBorderHasPriorityFieldId);
    static const OSG::BitVector FocusedBackgroundHasPriorityFieldMask =
        (TypeTraits<BitVector>::One << FocusedBackgroundHasPriorityFieldId);
    static const OSG::BitVector NextFieldMask =
        (TypeTraits<BitVector>::One << NextFieldId);
        
    typedef SFUnrecComponentPtr SFDrawObjectPrototypeType;
    typedef SFUnrecLayerPtr   SFSelectedBackgroundType;
    typedef SFUnrecLayerPtr   SFFocusedBackgroundType;
    typedef SFUnrecLayerPtr   SFSelectedForegroundType;
    typedef SFUnrecLayerPtr   SFFocusedForegroundType;
    typedef SFUnrecBorderPtr  SFSelectedBorderType;
    typedef SFUnrecBorderPtr  SFFocusedBorderType;
    typedef SFColor4f         SFSelectedTextColorType;
    typedef SFColor4f         SFFocusedTextColorType;
    typedef SFBool            SFFocusedTextColorHasPriorityType;
    typedef SFBool            SFFocusedBorderHasPriorityType;
    typedef SFBool            SFFocusedBackgroundHasPriorityType;

    /*---------------------------------------------------------------------*/
    /*! \name                    Class Get                                 */
    /*! \{                                                                 */

    static FieldContainerType &getClassType   (void);
    static UInt32              getClassTypeId (void);
    static UInt16              getClassGroupId(void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                FieldContainer Get                            */
    /*! \{                                                                 */

    virtual       FieldContainerType &getType         (void);
    virtual const FieldContainerType &getType         (void) const;

    virtual       UInt32              getContainerSize(void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Get                                 */
    /*! \{                                                                 */

            const SFUnrecComponentPtr *getSFDrawObjectPrototype(void) const;
                  SFUnrecComponentPtr *editSFDrawObjectPrototype(void);
            const SFUnrecLayerPtr     *getSFSelectedBackground(void) const;
                  SFUnrecLayerPtr     *editSFSelectedBackground(void);
            const SFUnrecLayerPtr     *getSFFocusedBackground(void) const;
                  SFUnrecLayerPtr     *editSFFocusedBackground(void);
            const SFUnrecLayerPtr     *getSFSelectedForeground(void) const;
                  SFUnrecLayerPtr     *editSFSelectedForeground(void);
            const SFUnrecLayerPtr     *getSFFocusedForeground(void) const;
                  SFUnrecLayerPtr     *editSFFocusedForeground(void);
            const SFUnrecBorderPtr    *getSFSelectedBorder (void) const;
                  SFUnrecBorderPtr    *editSFSelectedBorder (void);
            const SFUnrecBorderPtr    *getSFFocusedBorder  (void) const;
                  SFUnrecBorderPtr    *editSFFocusedBorder  (void);

                  SFColor4f           *editSFSelectedTextColor(void);
            const SFColor4f           *getSFSelectedTextColor (void) const;

                  SFColor4f           *editSFFocusedTextColor(void);
            const SFColor4f           *getSFFocusedTextColor (void) const;

                  SFBool              *editSFFocusedTextColorHasPriority(void);
            const SFBool              *getSFFocusedTextColorHasPriority (void) const;

                  SFBool              *editSFFocusedBorderHasPriority(void);
            const SFBool              *getSFFocusedBorderHasPriority (void) const;

                  SFBool              *editSFFocusedBackgroundHasPriority(void);
            const SFBool              *getSFFocusedBackgroundHasPriority (void) const;


                  Component * getDrawObjectPrototype(void) const;

                  Layer * getSelectedBackground(void) const;

                  Layer * getFocusedBackground(void) const;

                  Layer * getSelectedForeground(void) const;

                  Layer * getFocusedForeground(void) const;

                  Border * getSelectedBorder (void) const;

                  Border * getFocusedBorder  (void) const;

                  Color4f             &editSelectedTextColor(void);
            const Color4f             &getSelectedTextColor (void) const;

                  Color4f             &editFocusedTextColor(void);
            const Color4f             &getFocusedTextColor (void) const;

                  bool                &editFocusedTextColorHasPriority(void);
                  bool                 getFocusedTextColorHasPriority (void) const;

                  bool                &editFocusedBorderHasPriority(void);
                  bool                 getFocusedBorderHasPriority (void) const;

                  bool                &editFocusedBackgroundHasPriority(void);
                  bool                 getFocusedBackgroundHasPriority (void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Set                                 */
    /*! \{                                                                 */

            void setDrawObjectPrototype(Component * const value);
            void setSelectedBackground(Layer * const value);
            void setFocusedBackground(Layer * const value);
            void setSelectedForeground(Layer * const value);
            void setFocusedForeground(Layer * const value);
            void setSelectedBorder (Border * const value);
            void setFocusedBorder  (Border * const value);
            void setSelectedTextColor(const Color4f &value);
            void setFocusedTextColor(const Color4f &value);
            void setFocusedTextColorHasPriority(const bool value);
            void setFocusedBorderHasPriority(const bool value);
            void setFocusedBackgroundHasPriority(const bool value);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                Ptr Field Set                                 */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                Ptr MField Set                                */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Binary Access                              */
    /*! \{                                                                 */

    virtual UInt32 getBinSize (ConstFieldMaskArg  whichField);
    virtual void   copyToBin  (BinaryDataHandler &pMem,
                               ConstFieldMaskArg  whichField);
    virtual void   copyFromBin(BinaryDataHandler &pMem,
                               ConstFieldMaskArg  whichField);


    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Construction                               */
    /*! \{                                                                 */

    static  DefaultComboBoxComponentGeneratorTransitPtr  create          (void);
    static  DefaultComboBoxComponentGenerator           *createEmpty     (void);

    static  DefaultComboBoxComponentGeneratorTransitPtr  createLocal     (
                                               BitVector bFlags = FCLocal::All);

    static  DefaultComboBoxComponentGenerator            *createEmptyLocal(
                                              BitVector bFlags = FCLocal::All);

    static  DefaultComboBoxComponentGeneratorTransitPtr  createDependent  (BitVector bFlags);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Copy                                   */
    /*! \{                                                                 */

    virtual FieldContainerTransitPtr shallowCopy     (void) const;
    virtual FieldContainerTransitPtr shallowCopyLocal(
                                       BitVector bFlags = FCLocal::All) const;
    virtual FieldContainerTransitPtr shallowCopyDependent(
                                                      BitVector bFlags) const;

    /*! \}                                                                 */
    /*=========================  PROTECTED  ===============================*/

  protected:

    static TypeObject _type;

    static       void   classDescInserter(TypeObject &oType);
    static const Char8 *getClassname     (void             );

    /*---------------------------------------------------------------------*/
    /*! \name                      Fields                                  */
    /*! \{                                                                 */

    SFUnrecComponentPtr _sfDrawObjectPrototype;
    SFUnrecLayerPtr   _sfSelectedBackground;
    SFUnrecLayerPtr   _sfFocusedBackground;
    SFUnrecLayerPtr   _sfSelectedForeground;
    SFUnrecLayerPtr   _sfFocusedForeground;
    SFUnrecBorderPtr  _sfSelectedBorder;
    SFUnrecBorderPtr  _sfFocusedBorder;
    SFColor4f         _sfSelectedTextColor;
    SFColor4f         _sfFocusedTextColor;
    SFBool            _sfFocusedTextColorHasPriority;
    SFBool            _sfFocusedBorderHasPriority;
    SFBool            _sfFocusedBackgroundHasPriority;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Constructors                               */
    /*! \{                                                                 */

    DefaultComboBoxComponentGeneratorBase(void);
    DefaultComboBoxComponentGeneratorBase(const DefaultComboBoxComponentGeneratorBase &source);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Destructors                                */
    /*! \{                                                                 */

    virtual ~DefaultComboBoxComponentGeneratorBase(void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                     onCreate                                */
    /*! \{                                                                 */

    void onCreate(const DefaultComboBoxComponentGenerator *source = NULL);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Generic Field Access                      */
    /*! \{                                                                 */

    GetFieldHandlePtr  getHandleDrawObjectPrototype (void) const;
    EditFieldHandlePtr editHandleDrawObjectPrototype(void);
    GetFieldHandlePtr  getHandleSelectedBackground (void) const;
    EditFieldHandlePtr editHandleSelectedBackground(void);
    GetFieldHandlePtr  getHandleFocusedBackground (void) const;
    EditFieldHandlePtr editHandleFocusedBackground(void);
    GetFieldHandlePtr  getHandleSelectedForeground (void) const;
    EditFieldHandlePtr editHandleSelectedForeground(void);
    GetFieldHandlePtr  getHandleFocusedForeground (void) const;
    EditFieldHandlePtr editHandleFocusedForeground(void);
    GetFieldHandlePtr  getHandleSelectedBorder  (void) const;
    EditFieldHandlePtr editHandleSelectedBorder (void);
    GetFieldHandlePtr  getHandleFocusedBorder   (void) const;
    EditFieldHandlePtr editHandleFocusedBorder  (void);
    GetFieldHandlePtr  getHandleSelectedTextColor (void) const;
    EditFieldHandlePtr editHandleSelectedTextColor(void);
    GetFieldHandlePtr  getHandleFocusedTextColor (void) const;
    EditFieldHandlePtr editHandleFocusedTextColor(void);
    GetFieldHandlePtr  getHandleFocusedTextColorHasPriority (void) const;
    EditFieldHandlePtr editHandleFocusedTextColorHasPriority(void);
    GetFieldHandlePtr  getHandleFocusedBorderHasPriority (void) const;
    EditFieldHandlePtr editHandleFocusedBorderHasPriority(void);
    GetFieldHandlePtr  getHandleFocusedBackgroundHasPriority (void) const;
    EditFieldHandlePtr editHandleFocusedBackgroundHasPriority(void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

#ifdef OSG_MT_CPTR_ASPECT
    virtual void execSyncV(      FieldContainer    &oFrom,
                                 ConstFieldMaskArg  whichField,
                                 AspectOffsetStore &oOffsets,
                                 ConstFieldMaskArg  syncMode  ,
                           const UInt32             uiSyncInfo);

            void execSync (      DefaultComboBoxComponentGeneratorBase *pFrom,
                                 ConstFieldMaskArg  whichField,
                                 AspectOffsetStore &oOffsets,
                                 ConstFieldMaskArg  syncMode  ,
                           const UInt32             uiSyncInfo);
#endif

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Edit                                   */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                     Aspect Create                            */
    /*! \{                                                                 */

#ifdef OSG_MT_CPTR_ASPECT
    virtual FieldContainer *createAspectCopy(
                                    const FieldContainer *pRefAspect) const;
#endif

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Edit                                   */
    /*! \{                                                                 */
    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

    virtual void resolveLinks(void);

    /*! \}                                                                 */
    /*==========================  PRIVATE  ================================*/

  private:
    /*---------------------------------------------------------------------*/

    // prohibit default functions (move to 'public' if you need one)
    void operator =(const DefaultComboBoxComponentGeneratorBase &source);
};

typedef DefaultComboBoxComponentGeneratorBase *DefaultComboBoxComponentGeneratorBaseP;

OSG_END_NAMESPACE

#endif /* _OSGDEFAULTCOMBOBOXCOMPONENTGENERATORBASE_H_ */
