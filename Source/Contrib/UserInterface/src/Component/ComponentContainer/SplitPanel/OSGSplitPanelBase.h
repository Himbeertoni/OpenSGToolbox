/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact:  David Kabala (djkabala@gmail.com)                             *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class SplitPanel
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#ifndef _OSGSPLITPANELBASE_H_
#define _OSGSPLITPANELBASE_H_
#ifdef __sgi
#pragma once
#endif


#include "OSGConfig.h"
#include "OSGContribUserInterfaceDef.h"

//#include "OSGBaseTypes.h"

#include "OSGComponentContainer.h" // Parent

#include "OSGComponentFields.h"         // MinComponent type
#include "OSGSysFields.h"               // DividerSize type
#include "OSGUIDrawObjectCanvasFields.h" // DividerDrawObject type

#include "OSGSplitPanelFields.h"

OSG_BEGIN_NAMESPACE

class SplitPanel;

//! \brief SplitPanel Base Class.

class OSG_CONTRIBUSERINTERFACE_DLLMAPPING SplitPanelBase : public ComponentContainer
{
  public:

    typedef ComponentContainer Inherited;
    typedef ComponentContainer ParentContainer;

    typedef Inherited::TypeObject TypeObject;
    typedef TypeObject::InitPhase InitPhase;

    OSG_GEN_INTERNALPTR(SplitPanel);

    /*==========================  PUBLIC  =================================*/

  public:

    enum
    {
        MinComponentFieldId = Inherited::NextFieldId,
        MaxComponentFieldId = MinComponentFieldId + 1,
        DividerSizeFieldId = MaxComponentFieldId + 1,
        DividerPositionFieldId = DividerSizeFieldId + 1,
        MinDividerPositionFieldId = DividerPositionFieldId + 1,
        MaxDividerPositionFieldId = MinDividerPositionFieldId + 1,
        DividerDrawObjectFieldId = MaxDividerPositionFieldId + 1,
        ExpandableFieldId = DividerDrawObjectFieldId + 1,
        OrientationFieldId = ExpandableFieldId + 1,
        NextFieldId = OrientationFieldId + 1
    };

    static const OSG::BitVector MinComponentFieldMask =
        (TypeTraits<BitVector>::One << MinComponentFieldId);
    static const OSG::BitVector MaxComponentFieldMask =
        (TypeTraits<BitVector>::One << MaxComponentFieldId);
    static const OSG::BitVector DividerSizeFieldMask =
        (TypeTraits<BitVector>::One << DividerSizeFieldId);
    static const OSG::BitVector DividerPositionFieldMask =
        (TypeTraits<BitVector>::One << DividerPositionFieldId);
    static const OSG::BitVector MinDividerPositionFieldMask =
        (TypeTraits<BitVector>::One << MinDividerPositionFieldId);
    static const OSG::BitVector MaxDividerPositionFieldMask =
        (TypeTraits<BitVector>::One << MaxDividerPositionFieldId);
    static const OSG::BitVector DividerDrawObjectFieldMask =
        (TypeTraits<BitVector>::One << DividerDrawObjectFieldId);
    static const OSG::BitVector ExpandableFieldMask =
        (TypeTraits<BitVector>::One << ExpandableFieldId);
    static const OSG::BitVector OrientationFieldMask =
        (TypeTraits<BitVector>::One << OrientationFieldId);
    static const OSG::BitVector NextFieldMask =
        (TypeTraits<BitVector>::One << NextFieldId);
        
    typedef SFUnrecComponentPtr SFMinComponentType;
    typedef SFUnrecComponentPtr SFMaxComponentType;
    typedef SFUInt32          SFDividerSizeType;
    typedef SFReal32          SFDividerPositionType;
    typedef SFReal32          SFMinDividerPositionType;
    typedef SFReal32          SFMaxDividerPositionType;
    typedef SFUnrecUIDrawObjectCanvasPtr SFDividerDrawObjectType;
    typedef SFBool            SFExpandableType;
    typedef SFUInt32          SFOrientationType;

    /*---------------------------------------------------------------------*/
    /*! \name                    Class Get                                 */
    /*! \{                                                                 */

    static FieldContainerType &getClassType   (void);
    static UInt32              getClassTypeId (void);
    static UInt16              getClassGroupId(void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                FieldContainer Get                            */
    /*! \{                                                                 */

    virtual       FieldContainerType &getType         (void);
    virtual const FieldContainerType &getType         (void) const;

    virtual       UInt32              getContainerSize(void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Get                                 */
    /*! \{                                                                 */

            const SFUnrecComponentPtr *getSFMinComponent   (void) const;
                  SFUnrecComponentPtr *editSFMinComponent   (void);
            const SFUnrecComponentPtr *getSFMaxComponent   (void) const;
                  SFUnrecComponentPtr *editSFMaxComponent   (void);

                  SFUInt32            *editSFDividerSize    (void);
            const SFUInt32            *getSFDividerSize     (void) const;

                  SFReal32            *editSFDividerPosition(void);
            const SFReal32            *getSFDividerPosition (void) const;

                  SFReal32            *editSFMinDividerPosition(void);
            const SFReal32            *getSFMinDividerPosition (void) const;

                  SFReal32            *editSFMaxDividerPosition(void);
            const SFReal32            *getSFMaxDividerPosition (void) const;
            const SFUnrecUIDrawObjectCanvasPtr *getSFDividerDrawObject(void) const;
                  SFUnrecUIDrawObjectCanvasPtr *editSFDividerDrawObject(void);

                  SFBool              *editSFExpandable     (void);
            const SFBool              *getSFExpandable      (void) const;

                  SFUInt32            *editSFOrientation    (void);
            const SFUInt32            *getSFOrientation     (void) const;


                  Component * getMinComponent   (void) const;

                  Component * getMaxComponent   (void) const;

                  UInt32              &editDividerSize    (void);
                  UInt32               getDividerSize     (void) const;

                  Real32              &editDividerPosition(void);
                  Real32               getDividerPosition (void) const;

                  Real32              &editMinDividerPosition(void);
                  Real32               getMinDividerPosition (void) const;

                  Real32              &editMaxDividerPosition(void);
                  Real32               getMaxDividerPosition (void) const;

                  UIDrawObjectCanvas * getDividerDrawObject(void) const;

                  bool                &editExpandable     (void);
                  bool                 getExpandable      (void) const;

                  UInt32              &editOrientation    (void);
                  UInt32               getOrientation     (void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Set                                 */
    /*! \{                                                                 */

            void setMinComponent   (Component * const value);
            void setMaxComponent   (Component * const value);
            void setDividerSize    (const UInt32 value);
            void setDividerPosition(const Real32 value);
            void setMinDividerPosition(const Real32 value);
            void setMaxDividerPosition(const Real32 value);
            void setDividerDrawObject(UIDrawObjectCanvas * const value);
            void setExpandable     (const bool value);
            void setOrientation    (const UInt32 value);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                Ptr Field Set                                 */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                Ptr MField Set                                */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Binary Access                              */
    /*! \{                                                                 */

    virtual UInt32 getBinSize (ConstFieldMaskArg  whichField);
    virtual void   copyToBin  (BinaryDataHandler &pMem,
                               ConstFieldMaskArg  whichField);
    virtual void   copyFromBin(BinaryDataHandler &pMem,
                               ConstFieldMaskArg  whichField);


    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Construction                               */
    /*! \{                                                                 */

    static  SplitPanelTransitPtr  create          (void);
    static  SplitPanel           *createEmpty     (void);

    static  SplitPanelTransitPtr  createLocal     (
                                               BitVector bFlags = FCLocal::All);

    static  SplitPanel            *createEmptyLocal(
                                              BitVector bFlags = FCLocal::All);

    static  SplitPanelTransitPtr  createDependent  (BitVector bFlags);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Copy                                   */
    /*! \{                                                                 */

    virtual FieldContainerTransitPtr shallowCopy     (void) const;
    virtual FieldContainerTransitPtr shallowCopyLocal(
                                       BitVector bFlags = FCLocal::All) const;
    virtual FieldContainerTransitPtr shallowCopyDependent(
                                                      BitVector bFlags) const;

    /*! \}                                                                 */
    /*=========================  PROTECTED  ===============================*/

  protected:

    static TypeObject _type;

    static       void   classDescInserter(TypeObject &oType);
    static const Char8 *getClassname     (void             );

    /*---------------------------------------------------------------------*/
    /*! \name                      Fields                                  */
    /*! \{                                                                 */

    SFUnrecComponentPtr _sfMinComponent;
    SFUnrecComponentPtr _sfMaxComponent;
    SFUInt32          _sfDividerSize;
    SFReal32          _sfDividerPosition;
    SFReal32          _sfMinDividerPosition;
    SFReal32          _sfMaxDividerPosition;
    SFUnrecUIDrawObjectCanvasPtr _sfDividerDrawObject;
    SFBool            _sfExpandable;
    SFUInt32          _sfOrientation;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Constructors                               */
    /*! \{                                                                 */

    SplitPanelBase(void);
    SplitPanelBase(const SplitPanelBase &source);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Destructors                                */
    /*! \{                                                                 */

    virtual ~SplitPanelBase(void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                     onCreate                                */
    /*! \{                                                                 */

    void onCreate(const SplitPanel *source = NULL);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Generic Field Access                      */
    /*! \{                                                                 */

    GetFieldHandlePtr  getHandleMinComponent    (void) const;
    EditFieldHandlePtr editHandleMinComponent   (void);
    GetFieldHandlePtr  getHandleMaxComponent    (void) const;
    EditFieldHandlePtr editHandleMaxComponent   (void);
    GetFieldHandlePtr  getHandleDividerSize     (void) const;
    EditFieldHandlePtr editHandleDividerSize    (void);
    GetFieldHandlePtr  getHandleDividerPosition (void) const;
    EditFieldHandlePtr editHandleDividerPosition(void);
    GetFieldHandlePtr  getHandleMinDividerPosition (void) const;
    EditFieldHandlePtr editHandleMinDividerPosition(void);
    GetFieldHandlePtr  getHandleMaxDividerPosition (void) const;
    EditFieldHandlePtr editHandleMaxDividerPosition(void);
    GetFieldHandlePtr  getHandleDividerDrawObject (void) const;
    EditFieldHandlePtr editHandleDividerDrawObject(void);
    GetFieldHandlePtr  getHandleExpandable      (void) const;
    EditFieldHandlePtr editHandleExpandable     (void);
    GetFieldHandlePtr  getHandleOrientation     (void) const;
    EditFieldHandlePtr editHandleOrientation    (void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

#ifdef OSG_MT_CPTR_ASPECT
    virtual void execSyncV(      FieldContainer    &oFrom,
                                 ConstFieldMaskArg  whichField,
                                 AspectOffsetStore &oOffsets,
                                 ConstFieldMaskArg  syncMode  ,
                           const UInt32             uiSyncInfo);

            void execSync (      SplitPanelBase *pFrom,
                                 ConstFieldMaskArg  whichField,
                                 AspectOffsetStore &oOffsets,
                                 ConstFieldMaskArg  syncMode  ,
                           const UInt32             uiSyncInfo);
#endif

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Edit                                   */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                     Aspect Create                            */
    /*! \{                                                                 */

#ifdef OSG_MT_CPTR_ASPECT
    virtual FieldContainer *createAspectCopy(
                                    const FieldContainer *pRefAspect) const;
#endif

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Edit                                   */
    /*! \{                                                                 */
    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

    virtual void resolveLinks(void);

    /*! \}                                                                 */
    /*==========================  PRIVATE  ================================*/

  private:
    /*---------------------------------------------------------------------*/

    // prohibit default functions (move to 'public' if you need one)
    void operator =(const SplitPanelBase &source);
};

typedef SplitPanelBase *SplitPanelBaseP;

OSG_END_NAMESPACE

#endif /* _OSGSPLITPANELBASE_H_ */
