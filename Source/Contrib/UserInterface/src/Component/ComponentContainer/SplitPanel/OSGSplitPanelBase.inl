/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *   contact:  David Kabala (djkabala@gmail.com)                             *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class SplitPanel!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

OSG_BEGIN_NAMESPACE


//! access the type of the class
inline
OSG::FieldContainerType &SplitPanelBase::getClassType(void)
{
    return _type;
}

//! access the numerical type of the class
inline
OSG::UInt32 SplitPanelBase::getClassTypeId(void)
{
    return _type.getId();
}

inline
OSG::UInt16 SplitPanelBase::getClassGroupId(void)
{
    return _type.getGroupId();
}

/*------------------------------ get -----------------------------------*/


//! Get the value of the SplitPanel::_sfMinComponent field.
inline
Component * SplitPanelBase::getMinComponent(void) const
{
    return _sfMinComponent.getValue();
}

//! Set the value of the SplitPanel::_sfMinComponent field.
inline
void SplitPanelBase::setMinComponent(Component * const value)
{
    editSField(MinComponentFieldMask);

    _sfMinComponent.setValue(value);
}

//! Get the value of the SplitPanel::_sfMaxComponent field.
inline
Component * SplitPanelBase::getMaxComponent(void) const
{
    return _sfMaxComponent.getValue();
}

//! Set the value of the SplitPanel::_sfMaxComponent field.
inline
void SplitPanelBase::setMaxComponent(Component * const value)
{
    editSField(MaxComponentFieldMask);

    _sfMaxComponent.setValue(value);
}
//! Get the value of the SplitPanel::_sfDividerSize field.

inline
UInt32 &SplitPanelBase::editDividerSize(void)
{
    editSField(DividerSizeFieldMask);

    return _sfDividerSize.getValue();
}

//! Get the value of the SplitPanel::_sfDividerSize field.
inline
      UInt32  SplitPanelBase::getDividerSize(void) const
{
    return _sfDividerSize.getValue();
}

//! Set the value of the SplitPanel::_sfDividerSize field.
inline
void SplitPanelBase::setDividerSize(const UInt32 value)
{
    editSField(DividerSizeFieldMask);

    _sfDividerSize.setValue(value);
}
//! Get the value of the SplitPanel::_sfDividerPosition field.

inline
Real32 &SplitPanelBase::editDividerPosition(void)
{
    editSField(DividerPositionFieldMask);

    return _sfDividerPosition.getValue();
}

//! Get the value of the SplitPanel::_sfDividerPosition field.
inline
      Real32  SplitPanelBase::getDividerPosition(void) const
{
    return _sfDividerPosition.getValue();
}

//! Set the value of the SplitPanel::_sfDividerPosition field.
inline
void SplitPanelBase::setDividerPosition(const Real32 value)
{
    editSField(DividerPositionFieldMask);

    _sfDividerPosition.setValue(value);
}
//! Get the value of the SplitPanel::_sfMinDividerPosition field.

inline
Real32 &SplitPanelBase::editMinDividerPosition(void)
{
    editSField(MinDividerPositionFieldMask);

    return _sfMinDividerPosition.getValue();
}

//! Get the value of the SplitPanel::_sfMinDividerPosition field.
inline
      Real32  SplitPanelBase::getMinDividerPosition(void) const
{
    return _sfMinDividerPosition.getValue();
}

//! Set the value of the SplitPanel::_sfMinDividerPosition field.
inline
void SplitPanelBase::setMinDividerPosition(const Real32 value)
{
    editSField(MinDividerPositionFieldMask);

    _sfMinDividerPosition.setValue(value);
}
//! Get the value of the SplitPanel::_sfMaxDividerPosition field.

inline
Real32 &SplitPanelBase::editMaxDividerPosition(void)
{
    editSField(MaxDividerPositionFieldMask);

    return _sfMaxDividerPosition.getValue();
}

//! Get the value of the SplitPanel::_sfMaxDividerPosition field.
inline
      Real32  SplitPanelBase::getMaxDividerPosition(void) const
{
    return _sfMaxDividerPosition.getValue();
}

//! Set the value of the SplitPanel::_sfMaxDividerPosition field.
inline
void SplitPanelBase::setMaxDividerPosition(const Real32 value)
{
    editSField(MaxDividerPositionFieldMask);

    _sfMaxDividerPosition.setValue(value);
}

//! Get the value of the SplitPanel::_sfDividerDrawObject field.
inline
UIDrawObjectCanvas * SplitPanelBase::getDividerDrawObject(void) const
{
    return _sfDividerDrawObject.getValue();
}

//! Set the value of the SplitPanel::_sfDividerDrawObject field.
inline
void SplitPanelBase::setDividerDrawObject(UIDrawObjectCanvas * const value)
{
    editSField(DividerDrawObjectFieldMask);

    _sfDividerDrawObject.setValue(value);
}
//! Get the value of the SplitPanel::_sfExpandable field.

inline
bool &SplitPanelBase::editExpandable(void)
{
    editSField(ExpandableFieldMask);

    return _sfExpandable.getValue();
}

//! Get the value of the SplitPanel::_sfExpandable field.
inline
      bool  SplitPanelBase::getExpandable(void) const
{
    return _sfExpandable.getValue();
}

//! Set the value of the SplitPanel::_sfExpandable field.
inline
void SplitPanelBase::setExpandable(const bool value)
{
    editSField(ExpandableFieldMask);

    _sfExpandable.setValue(value);
}
//! Get the value of the SplitPanel::_sfOrientation field.

inline
UInt32 &SplitPanelBase::editOrientation(void)
{
    editSField(OrientationFieldMask);

    return _sfOrientation.getValue();
}

//! Get the value of the SplitPanel::_sfOrientation field.
inline
      UInt32  SplitPanelBase::getOrientation(void) const
{
    return _sfOrientation.getValue();
}

//! Set the value of the SplitPanel::_sfOrientation field.
inline
void SplitPanelBase::setOrientation(const UInt32 value)
{
    editSField(OrientationFieldMask);

    _sfOrientation.setValue(value);
}


#ifdef OSG_MT_CPTR_ASPECT
inline
void SplitPanelBase::execSync (      SplitPanelBase *pFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    Inherited::execSync(pFrom, whichField, oOffsets, syncMode, uiSyncInfo);

    if(FieldBits::NoField != (MinComponentFieldMask & whichField))
        _sfMinComponent.syncWith(pFrom->_sfMinComponent);

    if(FieldBits::NoField != (MaxComponentFieldMask & whichField))
        _sfMaxComponent.syncWith(pFrom->_sfMaxComponent);

    if(FieldBits::NoField != (DividerSizeFieldMask & whichField))
        _sfDividerSize.syncWith(pFrom->_sfDividerSize);

    if(FieldBits::NoField != (DividerPositionFieldMask & whichField))
        _sfDividerPosition.syncWith(pFrom->_sfDividerPosition);

    if(FieldBits::NoField != (MinDividerPositionFieldMask & whichField))
        _sfMinDividerPosition.syncWith(pFrom->_sfMinDividerPosition);

    if(FieldBits::NoField != (MaxDividerPositionFieldMask & whichField))
        _sfMaxDividerPosition.syncWith(pFrom->_sfMaxDividerPosition);

    if(FieldBits::NoField != (DividerDrawObjectFieldMask & whichField))
        _sfDividerDrawObject.syncWith(pFrom->_sfDividerDrawObject);

    if(FieldBits::NoField != (ExpandableFieldMask & whichField))
        _sfExpandable.syncWith(pFrom->_sfExpandable);

    if(FieldBits::NoField != (OrientationFieldMask & whichField))
        _sfOrientation.syncWith(pFrom->_sfOrientation);
}
#endif


inline
const Char8 *SplitPanelBase::getClassname(void)
{
    return "SplitPanel";
}
OSG_GEN_CONTAINERPTR(SplitPanel);

OSG_END_NAMESPACE

