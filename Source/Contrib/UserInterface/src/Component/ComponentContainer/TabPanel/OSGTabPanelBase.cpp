/*---------------------------------------------------------------------------*\
 *                     OpenSG ToolBox UserInterface                          *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                         www.vrac.iastate.edu                              *
 *                                                                           *
 *                          Authors: David Kabala                            *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class TabPanel!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#define OSG_COMPILETABPANELINST

#include <stdlib.h>
#include <stdio.h>

#include <OpenSG/OSGConfig.h>

#include "OSGTabPanelBase.h"
#include "OSGTabPanel.h"


OSG_BEGIN_NAMESPACE

const OSG::BitVector  TabPanelBase::TabsFieldMask = 
    (TypeTraits<BitVector>::One << TabPanelBase::TabsFieldId);

const OSG::BitVector  TabPanelBase::TabContentsFieldMask = 
    (TypeTraits<BitVector>::One << TabPanelBase::TabContentsFieldId);

const OSG::BitVector  TabPanelBase::TabPlacementFieldMask = 
    (TypeTraits<BitVector>::One << TabPanelBase::TabPlacementFieldId);

const OSG::BitVector  TabPanelBase::TabAlignmentFieldMask = 
    (TypeTraits<BitVector>::One << TabPanelBase::TabAlignmentFieldId);

const OSG::BitVector  TabPanelBase::TabRotationFieldMask = 
    (TypeTraits<BitVector>::One << TabPanelBase::TabRotationFieldId);

const OSG::BitVector  TabPanelBase::TabBorderInsetsFieldMask = 
    (TypeTraits<BitVector>::One << TabPanelBase::TabBorderInsetsFieldId);

const OSG::BitVector  TabPanelBase::TabBorderFieldMask = 
    (TypeTraits<BitVector>::One << TabPanelBase::TabBorderFieldId);

const OSG::BitVector  TabPanelBase::TabBackgroundFieldMask = 
    (TypeTraits<BitVector>::One << TabPanelBase::TabBackgroundFieldId);

const OSG::BitVector  TabPanelBase::TabDisabledBorderFieldMask = 
    (TypeTraits<BitVector>::One << TabPanelBase::TabDisabledBorderFieldId);

const OSG::BitVector  TabPanelBase::TabDisabledBackgroundFieldMask = 
    (TypeTraits<BitVector>::One << TabPanelBase::TabDisabledBackgroundFieldId);

const OSG::BitVector  TabPanelBase::TabFocusedBorderFieldMask = 
    (TypeTraits<BitVector>::One << TabPanelBase::TabFocusedBorderFieldId);

const OSG::BitVector  TabPanelBase::TabFocusedBackgroundFieldMask = 
    (TypeTraits<BitVector>::One << TabPanelBase::TabFocusedBackgroundFieldId);

const OSG::BitVector  TabPanelBase::TabRolloverBorderFieldMask = 
    (TypeTraits<BitVector>::One << TabPanelBase::TabRolloverBorderFieldId);

const OSG::BitVector  TabPanelBase::TabRolloverBackgroundFieldMask = 
    (TypeTraits<BitVector>::One << TabPanelBase::TabRolloverBackgroundFieldId);

const OSG::BitVector  TabPanelBase::TabActiveBorderFieldMask = 
    (TypeTraits<BitVector>::One << TabPanelBase::TabActiveBorderFieldId);

const OSG::BitVector  TabPanelBase::TabActiveBackgroundFieldMask = 
    (TypeTraits<BitVector>::One << TabPanelBase::TabActiveBackgroundFieldId);

const OSG::BitVector  TabPanelBase::ContentBorderInsetsFieldMask = 
    (TypeTraits<BitVector>::One << TabPanelBase::ContentBorderInsetsFieldId);

const OSG::BitVector  TabPanelBase::ContentBorderFieldMask = 
    (TypeTraits<BitVector>::One << TabPanelBase::ContentBorderFieldId);

const OSG::BitVector  TabPanelBase::ContentBackgroundFieldMask = 
    (TypeTraits<BitVector>::One << TabPanelBase::ContentBackgroundFieldId);

const OSG::BitVector  TabPanelBase::ContentDisabledBorderFieldMask = 
    (TypeTraits<BitVector>::One << TabPanelBase::ContentDisabledBorderFieldId);

const OSG::BitVector  TabPanelBase::ContentDisabledBackgroundFieldMask = 
    (TypeTraits<BitVector>::One << TabPanelBase::ContentDisabledBackgroundFieldId);

const OSG::BitVector  TabPanelBase::ContentRolloverBorderFieldMask = 
    (TypeTraits<BitVector>::One << TabPanelBase::ContentRolloverBorderFieldId);

const OSG::BitVector  TabPanelBase::ContentRolloverBackgroundFieldMask = 
    (TypeTraits<BitVector>::One << TabPanelBase::ContentRolloverBackgroundFieldId);

const OSG::BitVector  TabPanelBase::SelectionModelFieldMask = 
    (TypeTraits<BitVector>::One << TabPanelBase::SelectionModelFieldId);

const OSG::BitVector TabPanelBase::MTInfluenceMask = 
    (Inherited::MTInfluenceMask) | 
    (static_cast<BitVector>(0x0) << Inherited::NextFieldId); 


// Field descriptions

/*! \var ComponentPtr    TabPanelBase::_mfTabs
    
*/
/*! \var ComponentPtr    TabPanelBase::_mfTabContents
    
*/
/*! \var UInt32          TabPanelBase::_sfTabPlacement
    
*/
/*! \var Real32          TabPanelBase::_sfTabAlignment
    
*/
/*! \var UInt32          TabPanelBase::_sfTabRotation
    
*/
/*! \var Vec2f           TabPanelBase::_sfTabBorderInsets
    
*/
/*! \var BorderPtr       TabPanelBase::_sfTabBorder
    
*/
/*! \var LayerPtr        TabPanelBase::_sfTabBackground
    
*/
/*! \var BorderPtr       TabPanelBase::_sfTabDisabledBorder
    
*/
/*! \var LayerPtr        TabPanelBase::_sfTabDisabledBackground
    
*/
/*! \var BorderPtr       TabPanelBase::_sfTabFocusedBorder
    
*/
/*! \var LayerPtr        TabPanelBase::_sfTabFocusedBackground
    
*/
/*! \var BorderPtr       TabPanelBase::_sfTabRolloverBorder
    
*/
/*! \var LayerPtr        TabPanelBase::_sfTabRolloverBackground
    
*/
/*! \var BorderPtr       TabPanelBase::_sfTabActiveBorder
    
*/
/*! \var LayerPtr        TabPanelBase::_sfTabActiveBackground
    
*/
/*! \var Vec2f           TabPanelBase::_sfContentBorderInsets
    
*/
/*! \var BorderPtr       TabPanelBase::_sfContentBorder
    
*/
/*! \var LayerPtr        TabPanelBase::_sfContentBackground
    
*/
/*! \var BorderPtr       TabPanelBase::_sfContentDisabledBorder
    
*/
/*! \var LayerPtr        TabPanelBase::_sfContentDisabledBackground
    
*/
/*! \var BorderPtr       TabPanelBase::_sfContentRolloverBorder
    
*/
/*! \var LayerPtr        TabPanelBase::_sfContentRolloverBackground
    
*/
/*! \var SingleSelectionModelPtr TabPanelBase::_sfSelectionModel
    
*/

//! TabPanel description

FieldDescription *TabPanelBase::_desc[] = 
{
    new FieldDescription(MFComponentPtr::getClassType(), 
                     "Tabs", 
                     TabsFieldId, TabsFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&TabPanelBase::editMFTabs)),
    new FieldDescription(MFComponentPtr::getClassType(), 
                     "TabContents", 
                     TabContentsFieldId, TabContentsFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&TabPanelBase::editMFTabContents)),
    new FieldDescription(SFUInt32::getClassType(), 
                     "TabPlacement", 
                     TabPlacementFieldId, TabPlacementFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&TabPanelBase::editSFTabPlacement)),
    new FieldDescription(SFReal32::getClassType(), 
                     "TabAlignment", 
                     TabAlignmentFieldId, TabAlignmentFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&TabPanelBase::editSFTabAlignment)),
    new FieldDescription(SFUInt32::getClassType(), 
                     "TabRotation", 
                     TabRotationFieldId, TabRotationFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&TabPanelBase::editSFTabRotation)),
    new FieldDescription(SFVec2f::getClassType(), 
                     "TabBorderInsets", 
                     TabBorderInsetsFieldId, TabBorderInsetsFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&TabPanelBase::editSFTabBorderInsets)),
    new FieldDescription(SFBorderPtr::getClassType(), 
                     "TabBorder", 
                     TabBorderFieldId, TabBorderFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&TabPanelBase::editSFTabBorder)),
    new FieldDescription(SFLayerPtr::getClassType(), 
                     "TabBackground", 
                     TabBackgroundFieldId, TabBackgroundFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&TabPanelBase::editSFTabBackground)),
    new FieldDescription(SFBorderPtr::getClassType(), 
                     "TabDisabledBorder", 
                     TabDisabledBorderFieldId, TabDisabledBorderFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&TabPanelBase::editSFTabDisabledBorder)),
    new FieldDescription(SFLayerPtr::getClassType(), 
                     "TabDisabledBackground", 
                     TabDisabledBackgroundFieldId, TabDisabledBackgroundFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&TabPanelBase::editSFTabDisabledBackground)),
    new FieldDescription(SFBorderPtr::getClassType(), 
                     "TabFocusedBorder", 
                     TabFocusedBorderFieldId, TabFocusedBorderFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&TabPanelBase::editSFTabFocusedBorder)),
    new FieldDescription(SFLayerPtr::getClassType(), 
                     "TabFocusedBackground", 
                     TabFocusedBackgroundFieldId, TabFocusedBackgroundFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&TabPanelBase::editSFTabFocusedBackground)),
    new FieldDescription(SFBorderPtr::getClassType(), 
                     "TabRolloverBorder", 
                     TabRolloverBorderFieldId, TabRolloverBorderFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&TabPanelBase::editSFTabRolloverBorder)),
    new FieldDescription(SFLayerPtr::getClassType(), 
                     "TabRolloverBackground", 
                     TabRolloverBackgroundFieldId, TabRolloverBackgroundFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&TabPanelBase::editSFTabRolloverBackground)),
    new FieldDescription(SFBorderPtr::getClassType(), 
                     "TabActiveBorder", 
                     TabActiveBorderFieldId, TabActiveBorderFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&TabPanelBase::editSFTabActiveBorder)),
    new FieldDescription(SFLayerPtr::getClassType(), 
                     "TabActiveBackground", 
                     TabActiveBackgroundFieldId, TabActiveBackgroundFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&TabPanelBase::editSFTabActiveBackground)),
    new FieldDescription(SFVec2f::getClassType(), 
                     "ContentBorderInsets", 
                     ContentBorderInsetsFieldId, ContentBorderInsetsFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&TabPanelBase::editSFContentBorderInsets)),
    new FieldDescription(SFBorderPtr::getClassType(), 
                     "ContentBorder", 
                     ContentBorderFieldId, ContentBorderFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&TabPanelBase::editSFContentBorder)),
    new FieldDescription(SFLayerPtr::getClassType(), 
                     "ContentBackground", 
                     ContentBackgroundFieldId, ContentBackgroundFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&TabPanelBase::editSFContentBackground)),
    new FieldDescription(SFBorderPtr::getClassType(), 
                     "ContentDisabledBorder", 
                     ContentDisabledBorderFieldId, ContentDisabledBorderFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&TabPanelBase::editSFContentDisabledBorder)),
    new FieldDescription(SFLayerPtr::getClassType(), 
                     "ContentDisabledBackground", 
                     ContentDisabledBackgroundFieldId, ContentDisabledBackgroundFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&TabPanelBase::editSFContentDisabledBackground)),
    new FieldDescription(SFBorderPtr::getClassType(), 
                     "ContentRolloverBorder", 
                     ContentRolloverBorderFieldId, ContentRolloverBorderFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&TabPanelBase::editSFContentRolloverBorder)),
    new FieldDescription(SFLayerPtr::getClassType(), 
                     "ContentRolloverBackground", 
                     ContentRolloverBackgroundFieldId, ContentRolloverBackgroundFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&TabPanelBase::editSFContentRolloverBackground)),
    new FieldDescription(SFSingleSelectionModelPtr::getClassType(), 
                     "SelectionModel", 
                     SelectionModelFieldId, SelectionModelFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&TabPanelBase::editSFSelectionModel))
};


FieldContainerType TabPanelBase::_type(
    "TabPanel",
    "Container",
    NULL,
    reinterpret_cast<PrototypeCreateF>(&TabPanelBase::createEmpty),
    TabPanel::initMethod,
    _desc,
    sizeof(_desc));

//OSG_FIELD_CONTAINER_DEF(TabPanelBase, TabPanelPtr)

/*------------------------------ get -----------------------------------*/

FieldContainerType &TabPanelBase::getType(void) 
{
    return _type; 
} 

const FieldContainerType &TabPanelBase::getType(void) const 
{
    return _type;
} 


FieldContainerPtr TabPanelBase::shallowCopy(void) const 
{ 
    TabPanelPtr returnValue; 

    newPtr(returnValue, dynamic_cast<const TabPanel *>(this)); 

    return returnValue; 
}

UInt32 TabPanelBase::getContainerSize(void) const 
{ 
    return sizeof(TabPanel); 
}


#if !defined(OSG_FIXED_MFIELDSYNC)
void TabPanelBase::executeSync(      FieldContainer &other,
                                    const BitVector      &whichField)
{
    this->executeSyncImpl(static_cast<TabPanelBase *>(&other),
                          whichField);
}
#else
void TabPanelBase::executeSync(      FieldContainer &other,
                                    const BitVector      &whichField,                                    const SyncInfo       &sInfo     )
{
    this->executeSyncImpl((TabPanelBase *) &other, whichField, sInfo);
}
void TabPanelBase::execBeginEdit(const BitVector &whichField, 
                                            UInt32     uiAspect,
                                            UInt32     uiContainerSize) 
{
    this->execBeginEditImpl(whichField, uiAspect, uiContainerSize);
}

void TabPanelBase::onDestroyAspect(UInt32 uiId, UInt32 uiAspect)
{
    Inherited::onDestroyAspect(uiId, uiAspect);

    _mfTabs.terminateShare(uiAspect, this->getContainerSize());
    _mfTabContents.terminateShare(uiAspect, this->getContainerSize());
}
#endif

/*------------------------- constructors ----------------------------------*/

#ifdef OSG_WIN32_ICL
#pragma warning (disable : 383)
#endif

TabPanelBase::TabPanelBase(void) :
    _mfTabs                   (), 
    _mfTabContents            (), 
    _sfTabPlacement           (UInt32(0)), 
    _sfTabAlignment           (Real32(0.5f)), 
    _sfTabRotation            (UInt32(0)), 
    _sfTabBorderInsets        (Vec2f(0.0f,0.0f)), 
    _sfTabBorder              (BorderPtr(NullFC)), 
    _sfTabBackground          (LayerPtr(NullFC)), 
    _sfTabDisabledBorder      (BorderPtr(NullFC)), 
    _sfTabDisabledBackground  (LayerPtr(NullFC)), 
    _sfTabFocusedBorder       (BorderPtr(NullFC)), 
    _sfTabFocusedBackground   (LayerPtr(NullFC)), 
    _sfTabRolloverBorder      (BorderPtr(NullFC)), 
    _sfTabRolloverBackground  (LayerPtr(NullFC)), 
    _sfTabActiveBorder        (BorderPtr(NullFC)), 
    _sfTabActiveBackground    (LayerPtr(NullFC)), 
    _sfContentBorderInsets    (Vec2f(0.0f,0.0f)), 
    _sfContentBorder          (BorderPtr(NullFC)), 
    _sfContentBackground      (LayerPtr(NullFC)), 
    _sfContentDisabledBorder  (BorderPtr(NullFC)), 
    _sfContentDisabledBackground(LayerPtr(NullFC)), 
    _sfContentRolloverBorder  (BorderPtr(NullFC)), 
    _sfContentRolloverBackground(LayerPtr(NullFC)), 
    _sfSelectionModel         (SingleSelectionModelPtr(NullFC)), 
    Inherited() 
{
}

#ifdef OSG_WIN32_ICL
#pragma warning (default : 383)
#endif

TabPanelBase::TabPanelBase(const TabPanelBase &source) :
    _mfTabs                   (source._mfTabs                   ), 
    _mfTabContents            (source._mfTabContents            ), 
    _sfTabPlacement           (source._sfTabPlacement           ), 
    _sfTabAlignment           (source._sfTabAlignment           ), 
    _sfTabRotation            (source._sfTabRotation            ), 
    _sfTabBorderInsets        (source._sfTabBorderInsets        ), 
    _sfTabBorder              (source._sfTabBorder              ), 
    _sfTabBackground          (source._sfTabBackground          ), 
    _sfTabDisabledBorder      (source._sfTabDisabledBorder      ), 
    _sfTabDisabledBackground  (source._sfTabDisabledBackground  ), 
    _sfTabFocusedBorder       (source._sfTabFocusedBorder       ), 
    _sfTabFocusedBackground   (source._sfTabFocusedBackground   ), 
    _sfTabRolloverBorder      (source._sfTabRolloverBorder      ), 
    _sfTabRolloverBackground  (source._sfTabRolloverBackground  ), 
    _sfTabActiveBorder        (source._sfTabActiveBorder        ), 
    _sfTabActiveBackground    (source._sfTabActiveBackground    ), 
    _sfContentBorderInsets    (source._sfContentBorderInsets    ), 
    _sfContentBorder          (source._sfContentBorder          ), 
    _sfContentBackground      (source._sfContentBackground      ), 
    _sfContentDisabledBorder  (source._sfContentDisabledBorder  ), 
    _sfContentDisabledBackground(source._sfContentDisabledBackground), 
    _sfContentRolloverBorder  (source._sfContentRolloverBorder  ), 
    _sfContentRolloverBackground(source._sfContentRolloverBackground), 
    _sfSelectionModel         (source._sfSelectionModel         ), 
    Inherited                 (source)
{
}

/*-------------------------- destructors ----------------------------------*/

TabPanelBase::~TabPanelBase(void)
{
}

/*------------------------------ access -----------------------------------*/

UInt32 TabPanelBase::getBinSize(const BitVector &whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (TabsFieldMask & whichField))
    {
        returnValue += _mfTabs.getBinSize();
    }

    if(FieldBits::NoField != (TabContentsFieldMask & whichField))
    {
        returnValue += _mfTabContents.getBinSize();
    }

    if(FieldBits::NoField != (TabPlacementFieldMask & whichField))
    {
        returnValue += _sfTabPlacement.getBinSize();
    }

    if(FieldBits::NoField != (TabAlignmentFieldMask & whichField))
    {
        returnValue += _sfTabAlignment.getBinSize();
    }

    if(FieldBits::NoField != (TabRotationFieldMask & whichField))
    {
        returnValue += _sfTabRotation.getBinSize();
    }

    if(FieldBits::NoField != (TabBorderInsetsFieldMask & whichField))
    {
        returnValue += _sfTabBorderInsets.getBinSize();
    }

    if(FieldBits::NoField != (TabBorderFieldMask & whichField))
    {
        returnValue += _sfTabBorder.getBinSize();
    }

    if(FieldBits::NoField != (TabBackgroundFieldMask & whichField))
    {
        returnValue += _sfTabBackground.getBinSize();
    }

    if(FieldBits::NoField != (TabDisabledBorderFieldMask & whichField))
    {
        returnValue += _sfTabDisabledBorder.getBinSize();
    }

    if(FieldBits::NoField != (TabDisabledBackgroundFieldMask & whichField))
    {
        returnValue += _sfTabDisabledBackground.getBinSize();
    }

    if(FieldBits::NoField != (TabFocusedBorderFieldMask & whichField))
    {
        returnValue += _sfTabFocusedBorder.getBinSize();
    }

    if(FieldBits::NoField != (TabFocusedBackgroundFieldMask & whichField))
    {
        returnValue += _sfTabFocusedBackground.getBinSize();
    }

    if(FieldBits::NoField != (TabRolloverBorderFieldMask & whichField))
    {
        returnValue += _sfTabRolloverBorder.getBinSize();
    }

    if(FieldBits::NoField != (TabRolloverBackgroundFieldMask & whichField))
    {
        returnValue += _sfTabRolloverBackground.getBinSize();
    }

    if(FieldBits::NoField != (TabActiveBorderFieldMask & whichField))
    {
        returnValue += _sfTabActiveBorder.getBinSize();
    }

    if(FieldBits::NoField != (TabActiveBackgroundFieldMask & whichField))
    {
        returnValue += _sfTabActiveBackground.getBinSize();
    }

    if(FieldBits::NoField != (ContentBorderInsetsFieldMask & whichField))
    {
        returnValue += _sfContentBorderInsets.getBinSize();
    }

    if(FieldBits::NoField != (ContentBorderFieldMask & whichField))
    {
        returnValue += _sfContentBorder.getBinSize();
    }

    if(FieldBits::NoField != (ContentBackgroundFieldMask & whichField))
    {
        returnValue += _sfContentBackground.getBinSize();
    }

    if(FieldBits::NoField != (ContentDisabledBorderFieldMask & whichField))
    {
        returnValue += _sfContentDisabledBorder.getBinSize();
    }

    if(FieldBits::NoField != (ContentDisabledBackgroundFieldMask & whichField))
    {
        returnValue += _sfContentDisabledBackground.getBinSize();
    }

    if(FieldBits::NoField != (ContentRolloverBorderFieldMask & whichField))
    {
        returnValue += _sfContentRolloverBorder.getBinSize();
    }

    if(FieldBits::NoField != (ContentRolloverBackgroundFieldMask & whichField))
    {
        returnValue += _sfContentRolloverBackground.getBinSize();
    }

    if(FieldBits::NoField != (SelectionModelFieldMask & whichField))
    {
        returnValue += _sfSelectionModel.getBinSize();
    }


    return returnValue;
}

void TabPanelBase::copyToBin(      BinaryDataHandler &pMem,
                                  const BitVector         &whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (TabsFieldMask & whichField))
    {
        _mfTabs.copyToBin(pMem);
    }

    if(FieldBits::NoField != (TabContentsFieldMask & whichField))
    {
        _mfTabContents.copyToBin(pMem);
    }

    if(FieldBits::NoField != (TabPlacementFieldMask & whichField))
    {
        _sfTabPlacement.copyToBin(pMem);
    }

    if(FieldBits::NoField != (TabAlignmentFieldMask & whichField))
    {
        _sfTabAlignment.copyToBin(pMem);
    }

    if(FieldBits::NoField != (TabRotationFieldMask & whichField))
    {
        _sfTabRotation.copyToBin(pMem);
    }

    if(FieldBits::NoField != (TabBorderInsetsFieldMask & whichField))
    {
        _sfTabBorderInsets.copyToBin(pMem);
    }

    if(FieldBits::NoField != (TabBorderFieldMask & whichField))
    {
        _sfTabBorder.copyToBin(pMem);
    }

    if(FieldBits::NoField != (TabBackgroundFieldMask & whichField))
    {
        _sfTabBackground.copyToBin(pMem);
    }

    if(FieldBits::NoField != (TabDisabledBorderFieldMask & whichField))
    {
        _sfTabDisabledBorder.copyToBin(pMem);
    }

    if(FieldBits::NoField != (TabDisabledBackgroundFieldMask & whichField))
    {
        _sfTabDisabledBackground.copyToBin(pMem);
    }

    if(FieldBits::NoField != (TabFocusedBorderFieldMask & whichField))
    {
        _sfTabFocusedBorder.copyToBin(pMem);
    }

    if(FieldBits::NoField != (TabFocusedBackgroundFieldMask & whichField))
    {
        _sfTabFocusedBackground.copyToBin(pMem);
    }

    if(FieldBits::NoField != (TabRolloverBorderFieldMask & whichField))
    {
        _sfTabRolloverBorder.copyToBin(pMem);
    }

    if(FieldBits::NoField != (TabRolloverBackgroundFieldMask & whichField))
    {
        _sfTabRolloverBackground.copyToBin(pMem);
    }

    if(FieldBits::NoField != (TabActiveBorderFieldMask & whichField))
    {
        _sfTabActiveBorder.copyToBin(pMem);
    }

    if(FieldBits::NoField != (TabActiveBackgroundFieldMask & whichField))
    {
        _sfTabActiveBackground.copyToBin(pMem);
    }

    if(FieldBits::NoField != (ContentBorderInsetsFieldMask & whichField))
    {
        _sfContentBorderInsets.copyToBin(pMem);
    }

    if(FieldBits::NoField != (ContentBorderFieldMask & whichField))
    {
        _sfContentBorder.copyToBin(pMem);
    }

    if(FieldBits::NoField != (ContentBackgroundFieldMask & whichField))
    {
        _sfContentBackground.copyToBin(pMem);
    }

    if(FieldBits::NoField != (ContentDisabledBorderFieldMask & whichField))
    {
        _sfContentDisabledBorder.copyToBin(pMem);
    }

    if(FieldBits::NoField != (ContentDisabledBackgroundFieldMask & whichField))
    {
        _sfContentDisabledBackground.copyToBin(pMem);
    }

    if(FieldBits::NoField != (ContentRolloverBorderFieldMask & whichField))
    {
        _sfContentRolloverBorder.copyToBin(pMem);
    }

    if(FieldBits::NoField != (ContentRolloverBackgroundFieldMask & whichField))
    {
        _sfContentRolloverBackground.copyToBin(pMem);
    }

    if(FieldBits::NoField != (SelectionModelFieldMask & whichField))
    {
        _sfSelectionModel.copyToBin(pMem);
    }


}

void TabPanelBase::copyFromBin(      BinaryDataHandler &pMem,
                                    const BitVector    &whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (TabsFieldMask & whichField))
    {
        _mfTabs.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (TabContentsFieldMask & whichField))
    {
        _mfTabContents.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (TabPlacementFieldMask & whichField))
    {
        _sfTabPlacement.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (TabAlignmentFieldMask & whichField))
    {
        _sfTabAlignment.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (TabRotationFieldMask & whichField))
    {
        _sfTabRotation.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (TabBorderInsetsFieldMask & whichField))
    {
        _sfTabBorderInsets.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (TabBorderFieldMask & whichField))
    {
        _sfTabBorder.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (TabBackgroundFieldMask & whichField))
    {
        _sfTabBackground.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (TabDisabledBorderFieldMask & whichField))
    {
        _sfTabDisabledBorder.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (TabDisabledBackgroundFieldMask & whichField))
    {
        _sfTabDisabledBackground.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (TabFocusedBorderFieldMask & whichField))
    {
        _sfTabFocusedBorder.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (TabFocusedBackgroundFieldMask & whichField))
    {
        _sfTabFocusedBackground.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (TabRolloverBorderFieldMask & whichField))
    {
        _sfTabRolloverBorder.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (TabRolloverBackgroundFieldMask & whichField))
    {
        _sfTabRolloverBackground.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (TabActiveBorderFieldMask & whichField))
    {
        _sfTabActiveBorder.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (TabActiveBackgroundFieldMask & whichField))
    {
        _sfTabActiveBackground.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (ContentBorderInsetsFieldMask & whichField))
    {
        _sfContentBorderInsets.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (ContentBorderFieldMask & whichField))
    {
        _sfContentBorder.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (ContentBackgroundFieldMask & whichField))
    {
        _sfContentBackground.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (ContentDisabledBorderFieldMask & whichField))
    {
        _sfContentDisabledBorder.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (ContentDisabledBackgroundFieldMask & whichField))
    {
        _sfContentDisabledBackground.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (ContentRolloverBorderFieldMask & whichField))
    {
        _sfContentRolloverBorder.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (ContentRolloverBackgroundFieldMask & whichField))
    {
        _sfContentRolloverBackground.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (SelectionModelFieldMask & whichField))
    {
        _sfSelectionModel.copyFromBin(pMem);
    }


}

#if !defined(OSG_FIXED_MFIELDSYNC)
void TabPanelBase::executeSyncImpl(      TabPanelBase *pOther,
                                        const BitVector         &whichField)
{

    Inherited::executeSyncImpl(pOther, whichField);

    if(FieldBits::NoField != (TabsFieldMask & whichField))
        _mfTabs.syncWith(pOther->_mfTabs);

    if(FieldBits::NoField != (TabContentsFieldMask & whichField))
        _mfTabContents.syncWith(pOther->_mfTabContents);

    if(FieldBits::NoField != (TabPlacementFieldMask & whichField))
        _sfTabPlacement.syncWith(pOther->_sfTabPlacement);

    if(FieldBits::NoField != (TabAlignmentFieldMask & whichField))
        _sfTabAlignment.syncWith(pOther->_sfTabAlignment);

    if(FieldBits::NoField != (TabRotationFieldMask & whichField))
        _sfTabRotation.syncWith(pOther->_sfTabRotation);

    if(FieldBits::NoField != (TabBorderInsetsFieldMask & whichField))
        _sfTabBorderInsets.syncWith(pOther->_sfTabBorderInsets);

    if(FieldBits::NoField != (TabBorderFieldMask & whichField))
        _sfTabBorder.syncWith(pOther->_sfTabBorder);

    if(FieldBits::NoField != (TabBackgroundFieldMask & whichField))
        _sfTabBackground.syncWith(pOther->_sfTabBackground);

    if(FieldBits::NoField != (TabDisabledBorderFieldMask & whichField))
        _sfTabDisabledBorder.syncWith(pOther->_sfTabDisabledBorder);

    if(FieldBits::NoField != (TabDisabledBackgroundFieldMask & whichField))
        _sfTabDisabledBackground.syncWith(pOther->_sfTabDisabledBackground);

    if(FieldBits::NoField != (TabFocusedBorderFieldMask & whichField))
        _sfTabFocusedBorder.syncWith(pOther->_sfTabFocusedBorder);

    if(FieldBits::NoField != (TabFocusedBackgroundFieldMask & whichField))
        _sfTabFocusedBackground.syncWith(pOther->_sfTabFocusedBackground);

    if(FieldBits::NoField != (TabRolloverBorderFieldMask & whichField))
        _sfTabRolloverBorder.syncWith(pOther->_sfTabRolloverBorder);

    if(FieldBits::NoField != (TabRolloverBackgroundFieldMask & whichField))
        _sfTabRolloverBackground.syncWith(pOther->_sfTabRolloverBackground);

    if(FieldBits::NoField != (TabActiveBorderFieldMask & whichField))
        _sfTabActiveBorder.syncWith(pOther->_sfTabActiveBorder);

    if(FieldBits::NoField != (TabActiveBackgroundFieldMask & whichField))
        _sfTabActiveBackground.syncWith(pOther->_sfTabActiveBackground);

    if(FieldBits::NoField != (ContentBorderInsetsFieldMask & whichField))
        _sfContentBorderInsets.syncWith(pOther->_sfContentBorderInsets);

    if(FieldBits::NoField != (ContentBorderFieldMask & whichField))
        _sfContentBorder.syncWith(pOther->_sfContentBorder);

    if(FieldBits::NoField != (ContentBackgroundFieldMask & whichField))
        _sfContentBackground.syncWith(pOther->_sfContentBackground);

    if(FieldBits::NoField != (ContentDisabledBorderFieldMask & whichField))
        _sfContentDisabledBorder.syncWith(pOther->_sfContentDisabledBorder);

    if(FieldBits::NoField != (ContentDisabledBackgroundFieldMask & whichField))
        _sfContentDisabledBackground.syncWith(pOther->_sfContentDisabledBackground);

    if(FieldBits::NoField != (ContentRolloverBorderFieldMask & whichField))
        _sfContentRolloverBorder.syncWith(pOther->_sfContentRolloverBorder);

    if(FieldBits::NoField != (ContentRolloverBackgroundFieldMask & whichField))
        _sfContentRolloverBackground.syncWith(pOther->_sfContentRolloverBackground);

    if(FieldBits::NoField != (SelectionModelFieldMask & whichField))
        _sfSelectionModel.syncWith(pOther->_sfSelectionModel);


}
#else
void TabPanelBase::executeSyncImpl(      TabPanelBase *pOther,
                                        const BitVector         &whichField,
                                        const SyncInfo          &sInfo      )
{

    Inherited::executeSyncImpl(pOther, whichField, sInfo);

    if(FieldBits::NoField != (TabPlacementFieldMask & whichField))
        _sfTabPlacement.syncWith(pOther->_sfTabPlacement);

    if(FieldBits::NoField != (TabAlignmentFieldMask & whichField))
        _sfTabAlignment.syncWith(pOther->_sfTabAlignment);

    if(FieldBits::NoField != (TabRotationFieldMask & whichField))
        _sfTabRotation.syncWith(pOther->_sfTabRotation);

    if(FieldBits::NoField != (TabBorderInsetsFieldMask & whichField))
        _sfTabBorderInsets.syncWith(pOther->_sfTabBorderInsets);

    if(FieldBits::NoField != (TabBorderFieldMask & whichField))
        _sfTabBorder.syncWith(pOther->_sfTabBorder);

    if(FieldBits::NoField != (TabBackgroundFieldMask & whichField))
        _sfTabBackground.syncWith(pOther->_sfTabBackground);

    if(FieldBits::NoField != (TabDisabledBorderFieldMask & whichField))
        _sfTabDisabledBorder.syncWith(pOther->_sfTabDisabledBorder);

    if(FieldBits::NoField != (TabDisabledBackgroundFieldMask & whichField))
        _sfTabDisabledBackground.syncWith(pOther->_sfTabDisabledBackground);

    if(FieldBits::NoField != (TabFocusedBorderFieldMask & whichField))
        _sfTabFocusedBorder.syncWith(pOther->_sfTabFocusedBorder);

    if(FieldBits::NoField != (TabFocusedBackgroundFieldMask & whichField))
        _sfTabFocusedBackground.syncWith(pOther->_sfTabFocusedBackground);

    if(FieldBits::NoField != (TabRolloverBorderFieldMask & whichField))
        _sfTabRolloverBorder.syncWith(pOther->_sfTabRolloverBorder);

    if(FieldBits::NoField != (TabRolloverBackgroundFieldMask & whichField))
        _sfTabRolloverBackground.syncWith(pOther->_sfTabRolloverBackground);

    if(FieldBits::NoField != (TabActiveBorderFieldMask & whichField))
        _sfTabActiveBorder.syncWith(pOther->_sfTabActiveBorder);

    if(FieldBits::NoField != (TabActiveBackgroundFieldMask & whichField))
        _sfTabActiveBackground.syncWith(pOther->_sfTabActiveBackground);

    if(FieldBits::NoField != (ContentBorderInsetsFieldMask & whichField))
        _sfContentBorderInsets.syncWith(pOther->_sfContentBorderInsets);

    if(FieldBits::NoField != (ContentBorderFieldMask & whichField))
        _sfContentBorder.syncWith(pOther->_sfContentBorder);

    if(FieldBits::NoField != (ContentBackgroundFieldMask & whichField))
        _sfContentBackground.syncWith(pOther->_sfContentBackground);

    if(FieldBits::NoField != (ContentDisabledBorderFieldMask & whichField))
        _sfContentDisabledBorder.syncWith(pOther->_sfContentDisabledBorder);

    if(FieldBits::NoField != (ContentDisabledBackgroundFieldMask & whichField))
        _sfContentDisabledBackground.syncWith(pOther->_sfContentDisabledBackground);

    if(FieldBits::NoField != (ContentRolloverBorderFieldMask & whichField))
        _sfContentRolloverBorder.syncWith(pOther->_sfContentRolloverBorder);

    if(FieldBits::NoField != (ContentRolloverBackgroundFieldMask & whichField))
        _sfContentRolloverBackground.syncWith(pOther->_sfContentRolloverBackground);

    if(FieldBits::NoField != (SelectionModelFieldMask & whichField))
        _sfSelectionModel.syncWith(pOther->_sfSelectionModel);


    if(FieldBits::NoField != (TabsFieldMask & whichField))
        _mfTabs.syncWith(pOther->_mfTabs, sInfo);

    if(FieldBits::NoField != (TabContentsFieldMask & whichField))
        _mfTabContents.syncWith(pOther->_mfTabContents, sInfo);


}

void TabPanelBase::execBeginEditImpl (const BitVector &whichField, 
                                                 UInt32     uiAspect,
                                                 UInt32     uiContainerSize)
{
    Inherited::execBeginEditImpl(whichField, uiAspect, uiContainerSize);

    if(FieldBits::NoField != (TabsFieldMask & whichField))
        _mfTabs.beginEdit(uiAspect, uiContainerSize);

    if(FieldBits::NoField != (TabContentsFieldMask & whichField))
        _mfTabContents.beginEdit(uiAspect, uiContainerSize);

}
#endif



OSG_END_NAMESPACE

#include <OpenSG/OSGSFieldTypeDef.inl>
#include <OpenSG/OSGMFieldTypeDef.inl>

OSG_BEGIN_NAMESPACE

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldDataTraits<TabPanelPtr>::_type("TabPanelPtr", "ContainerPtr");
#endif

OSG_DLLEXPORT_SFIELD_DEF1(TabPanelPtr, OSG_USERINTERFACELIB_DLLTMPLMAPPING);
OSG_DLLEXPORT_MFIELD_DEF1(TabPanelPtr, OSG_USERINTERFACELIB_DLLTMPLMAPPING);


OSG_END_NAMESPACE

