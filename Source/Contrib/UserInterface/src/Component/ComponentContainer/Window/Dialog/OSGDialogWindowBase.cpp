/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact:  David Kabala (djkabala@gmail.com), Mark Stenerson             *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class DialogWindow!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>
#include <boost/assign/list_of.hpp>

#include "OSGConfig.h"



#include "OSGTextureObjChunk.h"         // ErrorIcon Class

#include "OSGDialogWindowBase.h"
#include "OSGDialogWindow.h"

#include <boost/bind.hpp>

#include "OSGEvent.h"

#ifdef WIN32 // turn off 'this' : used in base member initializer list warning
#pragma warning(disable:4355)
#endif

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::DialogWindow
    A UI Dialog Window.
 */

/***************************************************************************\
 *                        Field Documentation                              *
\***************************************************************************/

/*! \var TextureObjChunk * DialogWindowBase::_sfErrorIcon
    
*/

/*! \var TextureObjChunk * DialogWindowBase::_sfQuestionIcon
    
*/

/*! \var TextureObjChunk * DialogWindowBase::_sfDefaultIcon
    
*/

/*! \var bool            DialogWindowBase::_sfShowCancel
    
*/

/*! \var std::string     DialogWindowBase::_sfInputValues
    
*/


/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldTraits<DialogWindow *>::_type("DialogWindowPtr", "InternalWindowPtr");
#endif

OSG_FIELDTRAITS_GETTYPE(DialogWindow *)

OSG_EXPORT_PTR_SFIELD_FULL(PointerSField,
                           DialogWindow *,
                           0);

OSG_EXPORT_PTR_MFIELD_FULL(PointerMField,
                           DialogWindow *,
                           0);

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

void DialogWindowBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new SFUnrecTextureObjChunkPtr::Description(
        SFUnrecTextureObjChunkPtr::getClassType(),
        "ErrorIcon",
        "",
        ErrorIconFieldId, ErrorIconFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&DialogWindow::editHandleErrorIcon),
        static_cast<FieldGetMethodSig >(&DialogWindow::getHandleErrorIcon));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecTextureObjChunkPtr::Description(
        SFUnrecTextureObjChunkPtr::getClassType(),
        "QuestionIcon",
        "",
        QuestionIconFieldId, QuestionIconFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&DialogWindow::editHandleQuestionIcon),
        static_cast<FieldGetMethodSig >(&DialogWindow::getHandleQuestionIcon));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecTextureObjChunkPtr::Description(
        SFUnrecTextureObjChunkPtr::getClassType(),
        "DefaultIcon",
        "",
        DefaultIconFieldId, DefaultIconFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&DialogWindow::editHandleDefaultIcon),
        static_cast<FieldGetMethodSig >(&DialogWindow::getHandleDefaultIcon));

    oType.addInitialDesc(pDesc);

    pDesc = new SFBool::Description(
        SFBool::getClassType(),
        "ShowCancel",
        "",
        ShowCancelFieldId, ShowCancelFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&DialogWindow::editHandleShowCancel),
        static_cast<FieldGetMethodSig >(&DialogWindow::getHandleShowCancel));

    oType.addInitialDesc(pDesc);

    pDesc = new SFString::Description(
        SFString::getClassType(),
        "InputValues",
        "",
        InputValuesFieldId, InputValuesFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&DialogWindow::editHandleInputValues),
        static_cast<FieldGetMethodSig >(&DialogWindow::getHandleInputValues));

    oType.addInitialDesc(pDesc);
}


DialogWindowBase::TypeObject DialogWindowBase::_type(
    DialogWindowBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    0,
    NULL,
    DialogWindow::initMethod,
    DialogWindow::exitMethod,
    reinterpret_cast<InitalInsertDescFunc>(&DialogWindow::classDescInserter),
    false,
    0,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "\tname=\"DialogWindow\"\n"
    "\tparent=\"InternalWindow\"\n"
    "    library=\"ContribUserInterface\"\n"
    "    pointerfieldtypes=\"both\"\n"
    "    structure=\"abstract\"\n"
    "    systemcomponent=\"true\"\n"
    "    parentsystemcomponent=\"true\"\n"
    "    decoratable=\"false\"\n"
    "    useLocalIncludes=\"false\"\n"
    "    isNodeCore=\"false\"\n"
    "    authors=\"David Kabala (djkabala@gmail.com), Mark Stenerson             \"\n"
    "    parentProducer=\"AbstractWindow\"\n"
    ">\n"
    "A UI Dialog Window.\n"
    "\t<Field\n"
    "\t\tname=\"ErrorIcon\"\n"
    "\t\ttype=\"TextureObjChunk\"\n"
    "        category=\"pointer\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"NULL\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"QuestionIcon\"\n"
    "\t\ttype=\"TextureObjChunk\"\n"
    "        category=\"pointer\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"NULL\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"DefaultIcon\"\n"
    "\t\ttype=\"TextureObjChunk\"\n"
    "        category=\"pointer\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"NULL\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"ShowCancel\"\n"
    "\t\ttype=\"bool\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"true\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"InputValues\"\n"
    "\t\ttype=\"std::string\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<ProducedMethod\n"
    "\t\tname=\"DialogWindowClosing\"\n"
    "\t\ttype=\"DialogWindowEventPtr\"\n"
    "\t>\n"
    "\t</ProducedMethod>\n"
    "\t<ProducedMethod\n"
    "\t\tname=\"DialogWindowClosed\"\n"
    "\t\ttype=\"DialogWindowEventPtr\"\n"
    "\t>\n"
    "\t</ProducedMethod>\n"
    "</FieldContainer>\n",
    "A UI Dialog Window.\n"
    );

//! DialogWindow Produced Methods

MethodDescription *DialogWindowBase::_methodDesc[] =
{
    new MethodDescription("DialogWindowClosing", 
                    "",
                     DialogWindowClosingMethodId, 
                     SFUnrecEventPtr::getClassType(),
                     FunctorAccessMethod()),
    new MethodDescription("DialogWindowClosed", 
                    "",
                     DialogWindowClosedMethodId, 
                     SFUnrecEventPtr::getClassType(),
                     FunctorAccessMethod())
};

EventProducerType DialogWindowBase::_producerType(
    "DialogWindowProducerType",
    "AbstractWindowProducerType",
    "",
    InitEventProducerFunctor(),
    _methodDesc,
    sizeof(_methodDesc));

/*------------------------------ get -----------------------------------*/

FieldContainerType &DialogWindowBase::getType(void)
{
    return _type;
}

const FieldContainerType &DialogWindowBase::getType(void) const
{
    return _type;
}

const EventProducerType &DialogWindowBase::getProducerType(void) const
{
    return _producerType;
}

UInt32 DialogWindowBase::getContainerSize(void) const
{
    return sizeof(DialogWindow);
}

/*------------------------- decorator get ------------------------------*/


//! Get the DialogWindow::_sfErrorIcon field.
const SFUnrecTextureObjChunkPtr *DialogWindowBase::getSFErrorIcon(void) const
{
    return &_sfErrorIcon;
}

SFUnrecTextureObjChunkPtr *DialogWindowBase::editSFErrorIcon      (void)
{
    editSField(ErrorIconFieldMask);

    return &_sfErrorIcon;
}

//! Get the DialogWindow::_sfQuestionIcon field.
const SFUnrecTextureObjChunkPtr *DialogWindowBase::getSFQuestionIcon(void) const
{
    return &_sfQuestionIcon;
}

SFUnrecTextureObjChunkPtr *DialogWindowBase::editSFQuestionIcon   (void)
{
    editSField(QuestionIconFieldMask);

    return &_sfQuestionIcon;
}

//! Get the DialogWindow::_sfDefaultIcon field.
const SFUnrecTextureObjChunkPtr *DialogWindowBase::getSFDefaultIcon(void) const
{
    return &_sfDefaultIcon;
}

SFUnrecTextureObjChunkPtr *DialogWindowBase::editSFDefaultIcon    (void)
{
    editSField(DefaultIconFieldMask);

    return &_sfDefaultIcon;
}

SFBool *DialogWindowBase::editSFShowCancel(void)
{
    editSField(ShowCancelFieldMask);

    return &_sfShowCancel;
}

const SFBool *DialogWindowBase::getSFShowCancel(void) const
{
    return &_sfShowCancel;
}


SFString *DialogWindowBase::editSFInputValues(void)
{
    editSField(InputValuesFieldMask);

    return &_sfInputValues;
}

const SFString *DialogWindowBase::getSFInputValues(void) const
{
    return &_sfInputValues;
}






/*------------------------------ access -----------------------------------*/

UInt32 DialogWindowBase::getBinSize(ConstFieldMaskArg whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (ErrorIconFieldMask & whichField))
    {
        returnValue += _sfErrorIcon.getBinSize();
    }
    if(FieldBits::NoField != (QuestionIconFieldMask & whichField))
    {
        returnValue += _sfQuestionIcon.getBinSize();
    }
    if(FieldBits::NoField != (DefaultIconFieldMask & whichField))
    {
        returnValue += _sfDefaultIcon.getBinSize();
    }
    if(FieldBits::NoField != (ShowCancelFieldMask & whichField))
    {
        returnValue += _sfShowCancel.getBinSize();
    }
    if(FieldBits::NoField != (InputValuesFieldMask & whichField))
    {
        returnValue += _sfInputValues.getBinSize();
    }

    return returnValue;
}

void DialogWindowBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (ErrorIconFieldMask & whichField))
    {
        _sfErrorIcon.copyToBin(pMem);
    }
    if(FieldBits::NoField != (QuestionIconFieldMask & whichField))
    {
        _sfQuestionIcon.copyToBin(pMem);
    }
    if(FieldBits::NoField != (DefaultIconFieldMask & whichField))
    {
        _sfDefaultIcon.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ShowCancelFieldMask & whichField))
    {
        _sfShowCancel.copyToBin(pMem);
    }
    if(FieldBits::NoField != (InputValuesFieldMask & whichField))
    {
        _sfInputValues.copyToBin(pMem);
    }
}

void DialogWindowBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (ErrorIconFieldMask & whichField))
    {
        _sfErrorIcon.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (QuestionIconFieldMask & whichField))
    {
        _sfQuestionIcon.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (DefaultIconFieldMask & whichField))
    {
        _sfDefaultIcon.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ShowCancelFieldMask & whichField))
    {
        _sfShowCancel.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (InputValuesFieldMask & whichField))
    {
        _sfInputValues.copyFromBin(pMem);
    }
}




/*------------------------- constructors ----------------------------------*/

DialogWindowBase::DialogWindowBase(void) :
    Inherited(),
    _sfErrorIcon              (NULL),
    _sfQuestionIcon           (NULL),
    _sfDefaultIcon            (NULL),
    _sfShowCancel             (bool(true)),
    _sfInputValues            ()
{
    _Producer.setType(&_producerType);
}

DialogWindowBase::DialogWindowBase(const DialogWindowBase &source) :
    Inherited(source),
    _sfErrorIcon              (NULL),
    _sfQuestionIcon           (NULL),
    _sfDefaultIcon            (NULL),
    _sfShowCancel             (source._sfShowCancel             ),
    _sfInputValues            (source._sfInputValues            )
{
}


/*-------------------------- destructors ----------------------------------*/

DialogWindowBase::~DialogWindowBase(void)
{
}

void DialogWindowBase::onCreate(const DialogWindow *source)
{
    Inherited::onCreate(source);

    if(source != NULL)
    {
        DialogWindow *pThis = static_cast<DialogWindow *>(this);

        pThis->setErrorIcon(source->getErrorIcon());

        pThis->setQuestionIcon(source->getQuestionIcon());

        pThis->setDefaultIcon(source->getDefaultIcon());
    }
}

GetFieldHandlePtr DialogWindowBase::getHandleErrorIcon       (void) const
{
    SFUnrecTextureObjChunkPtr::GetHandlePtr returnValue(
        new  SFUnrecTextureObjChunkPtr::GetHandle(
             &_sfErrorIcon,
             this->getType().getFieldDesc(ErrorIconFieldId),
             const_cast<DialogWindowBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr DialogWindowBase::editHandleErrorIcon      (void)
{
    SFUnrecTextureObjChunkPtr::EditHandlePtr returnValue(
        new  SFUnrecTextureObjChunkPtr::EditHandle(
             &_sfErrorIcon,
             this->getType().getFieldDesc(ErrorIconFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&DialogWindow::setErrorIcon,
                    static_cast<DialogWindow *>(this), _1));

    editSField(ErrorIconFieldMask);

    return returnValue;
}

GetFieldHandlePtr DialogWindowBase::getHandleQuestionIcon    (void) const
{
    SFUnrecTextureObjChunkPtr::GetHandlePtr returnValue(
        new  SFUnrecTextureObjChunkPtr::GetHandle(
             &_sfQuestionIcon,
             this->getType().getFieldDesc(QuestionIconFieldId),
             const_cast<DialogWindowBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr DialogWindowBase::editHandleQuestionIcon   (void)
{
    SFUnrecTextureObjChunkPtr::EditHandlePtr returnValue(
        new  SFUnrecTextureObjChunkPtr::EditHandle(
             &_sfQuestionIcon,
             this->getType().getFieldDesc(QuestionIconFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&DialogWindow::setQuestionIcon,
                    static_cast<DialogWindow *>(this), _1));

    editSField(QuestionIconFieldMask);

    return returnValue;
}

GetFieldHandlePtr DialogWindowBase::getHandleDefaultIcon     (void) const
{
    SFUnrecTextureObjChunkPtr::GetHandlePtr returnValue(
        new  SFUnrecTextureObjChunkPtr::GetHandle(
             &_sfDefaultIcon,
             this->getType().getFieldDesc(DefaultIconFieldId),
             const_cast<DialogWindowBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr DialogWindowBase::editHandleDefaultIcon    (void)
{
    SFUnrecTextureObjChunkPtr::EditHandlePtr returnValue(
        new  SFUnrecTextureObjChunkPtr::EditHandle(
             &_sfDefaultIcon,
             this->getType().getFieldDesc(DefaultIconFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&DialogWindow::setDefaultIcon,
                    static_cast<DialogWindow *>(this), _1));

    editSField(DefaultIconFieldMask);

    return returnValue;
}

GetFieldHandlePtr DialogWindowBase::getHandleShowCancel      (void) const
{
    SFBool::GetHandlePtr returnValue(
        new  SFBool::GetHandle(
             &_sfShowCancel,
             this->getType().getFieldDesc(ShowCancelFieldId),
             const_cast<DialogWindowBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr DialogWindowBase::editHandleShowCancel     (void)
{
    SFBool::EditHandlePtr returnValue(
        new  SFBool::EditHandle(
             &_sfShowCancel,
             this->getType().getFieldDesc(ShowCancelFieldId),
             this));


    editSField(ShowCancelFieldMask);

    return returnValue;
}

GetFieldHandlePtr DialogWindowBase::getHandleInputValues     (void) const
{
    SFString::GetHandlePtr returnValue(
        new  SFString::GetHandle(
             &_sfInputValues,
             this->getType().getFieldDesc(InputValuesFieldId),
             const_cast<DialogWindowBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr DialogWindowBase::editHandleInputValues    (void)
{
    SFString::EditHandlePtr returnValue(
        new  SFString::EditHandle(
             &_sfInputValues,
             this->getType().getFieldDesc(InputValuesFieldId),
             this));


    editSField(InputValuesFieldMask);

    return returnValue;
}


#ifdef OSG_MT_CPTR_ASPECT
void DialogWindowBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    DialogWindow *pThis = static_cast<DialogWindow *>(this);

    pThis->execSync(static_cast<DialogWindow *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif



void DialogWindowBase::resolveLinks(void)
{
    Inherited::resolveLinks();

    static_cast<DialogWindow *>(this)->setErrorIcon(NULL);

    static_cast<DialogWindow *>(this)->setQuestionIcon(NULL);

    static_cast<DialogWindow *>(this)->setDefaultIcon(NULL);


}


OSG_END_NAMESPACE
