/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *   contact:  David Kabala (djkabala@gmail.com)                             *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class Titlebar!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

OSG_BEGIN_NAMESPACE


//! access the type of the class
inline
OSG::FieldContainerType &TitlebarBase::getClassType(void)
{
    return _type;
}

//! access the numerical type of the class
inline
OSG::UInt32 TitlebarBase::getClassTypeId(void)
{
    return _type.getId();
}

inline
OSG::UInt16 TitlebarBase::getClassGroupId(void)
{
    return _type.getGroupId();
}

/*------------------------------ get -----------------------------------*/


//! Get the value of the Titlebar::_sfIconifyButton field.
inline
Button * TitlebarBase::getIconifyButton(void) const
{
    return _sfIconifyButton.getValue();
}

//! Set the value of the Titlebar::_sfIconifyButton field.
inline
void TitlebarBase::setIconifyButton(Button * const value)
{
    editSField(IconifyButtonFieldMask);

    _sfIconifyButton.setValue(value);
}

//! Get the value of the Titlebar::_sfMaximizeButton field.
inline
Button * TitlebarBase::getMaximizeButton(void) const
{
    return _sfMaximizeButton.getValue();
}

//! Set the value of the Titlebar::_sfMaximizeButton field.
inline
void TitlebarBase::setMaximizeButton(Button * const value)
{
    editSField(MaximizeButtonFieldMask);

    _sfMaximizeButton.setValue(value);
}

//! Get the value of the Titlebar::_sfCloseButton field.
inline
Button * TitlebarBase::getCloseButton(void) const
{
    return _sfCloseButton.getValue();
}

//! Set the value of the Titlebar::_sfCloseButton field.
inline
void TitlebarBase::setCloseButton(Button * const value)
{
    editSField(CloseButtonFieldMask);

    _sfCloseButton.setValue(value);
}

//! Get the value of the Titlebar::_sfTitleLabel field.
inline
Label * TitlebarBase::getTitleLabel(void) const
{
    return _sfTitleLabel.getValue();
}

//! Set the value of the Titlebar::_sfTitleLabel field.
inline
void TitlebarBase::setTitleLabel(Label * const value)
{
    editSField(TitleLabelFieldMask);

    _sfTitleLabel.setValue(value);
}

//! Get the value of the Titlebar::_sfFrameIcon field.
inline
UIDrawObjectCanvas * TitlebarBase::getFrameIcon(void) const
{
    return _sfFrameIcon.getValue();
}

//! Set the value of the Titlebar::_sfFrameIcon field.
inline
void TitlebarBase::setFrameIcon(UIDrawObjectCanvas * const value)
{
    editSField(FrameIconFieldMask);

    _sfFrameIcon.setValue(value);
}
//! Get the value of the Titlebar::_sfDrawClose field.

inline
bool &TitlebarBase::editDrawClose(void)
{
    editSField(DrawCloseFieldMask);

    return _sfDrawClose.getValue();
}

//! Get the value of the Titlebar::_sfDrawClose field.
inline
      bool  TitlebarBase::getDrawClose(void) const
{
    return _sfDrawClose.getValue();
}

//! Set the value of the Titlebar::_sfDrawClose field.
inline
void TitlebarBase::setDrawClose(const bool value)
{
    editSField(DrawCloseFieldMask);

    _sfDrawClose.setValue(value);
}
//! Get the value of the Titlebar::_sfDrawMaximize field.

inline
bool &TitlebarBase::editDrawMaximize(void)
{
    editSField(DrawMaximizeFieldMask);

    return _sfDrawMaximize.getValue();
}

//! Get the value of the Titlebar::_sfDrawMaximize field.
inline
      bool  TitlebarBase::getDrawMaximize(void) const
{
    return _sfDrawMaximize.getValue();
}

//! Set the value of the Titlebar::_sfDrawMaximize field.
inline
void TitlebarBase::setDrawMaximize(const bool value)
{
    editSField(DrawMaximizeFieldMask);

    _sfDrawMaximize.setValue(value);
}
//! Get the value of the Titlebar::_sfDrawIconify field.

inline
bool &TitlebarBase::editDrawIconify(void)
{
    editSField(DrawIconifyFieldMask);

    return _sfDrawIconify.getValue();
}

//! Get the value of the Titlebar::_sfDrawIconify field.
inline
      bool  TitlebarBase::getDrawIconify(void) const
{
    return _sfDrawIconify.getValue();
}

//! Set the value of the Titlebar::_sfDrawIconify field.
inline
void TitlebarBase::setDrawIconify(const bool value)
{
    editSField(DrawIconifyFieldMask);

    _sfDrawIconify.setValue(value);
}


#ifdef OSG_MT_CPTR_ASPECT
inline
void TitlebarBase::execSync (      TitlebarBase *pFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    Inherited::execSync(pFrom, whichField, oOffsets, syncMode, uiSyncInfo);

    if(FieldBits::NoField != (IconifyButtonFieldMask & whichField))
        _sfIconifyButton.syncWith(pFrom->_sfIconifyButton);

    if(FieldBits::NoField != (MaximizeButtonFieldMask & whichField))
        _sfMaximizeButton.syncWith(pFrom->_sfMaximizeButton);

    if(FieldBits::NoField != (CloseButtonFieldMask & whichField))
        _sfCloseButton.syncWith(pFrom->_sfCloseButton);

    if(FieldBits::NoField != (TitleLabelFieldMask & whichField))
        _sfTitleLabel.syncWith(pFrom->_sfTitleLabel);

    if(FieldBits::NoField != (FrameIconFieldMask & whichField))
        _sfFrameIcon.syncWith(pFrom->_sfFrameIcon);

    if(FieldBits::NoField != (DrawCloseFieldMask & whichField))
        _sfDrawClose.syncWith(pFrom->_sfDrawClose);

    if(FieldBits::NoField != (DrawMaximizeFieldMask & whichField))
        _sfDrawMaximize.syncWith(pFrom->_sfDrawMaximize);

    if(FieldBits::NoField != (DrawIconifyFieldMask & whichField))
        _sfDrawIconify.syncWith(pFrom->_sfDrawIconify);
}
#endif


inline
const Char8 *TitlebarBase::getClassname(void)
{
    return "Titlebar";
}
OSG_GEN_CONTAINERPTR(Titlebar);

OSG_END_NAMESPACE

