/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact:  David Kabala (djkabala@gmail.com)                             *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class MenuBar!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>
#include <boost/assign/list_of.hpp>

#include "OSGConfig.h"



#include "OSGSingleSelectionModel.h"    // SelectionModel Class

#include "OSGMenuBarBase.h"
#include "OSGMenuBar.h"

#include <boost/bind.hpp>

#ifdef WIN32 // turn off 'this' : used in base member initializer list warning
#pragma warning(disable:4355)
#endif

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::MenuBar
    A UI MenuBar.
 */

/***************************************************************************\
 *                        Field Documentation                              *
\***************************************************************************/

/*! \var Real32          MenuBarBase::_sfMenuDelay
    
*/

/*! \var SingleSelectionModel * MenuBarBase::_sfSelectionModel
    
*/


/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldTraits<MenuBar *>::_type("MenuBarPtr", "ComponentContainerPtr");
#endif

OSG_FIELDTRAITS_GETTYPE(MenuBar *)

OSG_EXPORT_PTR_SFIELD_FULL(PointerSField,
                           MenuBar *,
                           0);

OSG_EXPORT_PTR_MFIELD_FULL(PointerMField,
                           MenuBar *,
                           0);

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

void MenuBarBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new SFReal32::Description(
        SFReal32::getClassType(),
        "MenuDelay",
        "",
        MenuDelayFieldId, MenuDelayFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&MenuBar::editHandleMenuDelay),
        static_cast<FieldGetMethodSig >(&MenuBar::getHandleMenuDelay));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecSingleSelectionModelPtr::Description(
        SFUnrecSingleSelectionModelPtr::getClassType(),
        "SelectionModel",
        "",
        SelectionModelFieldId, SelectionModelFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&MenuBar::editHandleSelectionModel),
        static_cast<FieldGetMethodSig >(&MenuBar::getHandleSelectionModel));

    oType.addInitialDesc(pDesc);
}


MenuBarBase::TypeObject MenuBarBase::_type(
    MenuBarBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    0,
    reinterpret_cast<PrototypeCreateF>(&MenuBarBase::createEmptyLocal),
    MenuBar::initMethod,
    MenuBar::exitMethod,
    reinterpret_cast<InitalInsertDescFunc>(&MenuBar::classDescInserter),
    false,
    0,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "\tname=\"MenuBar\"\n"
    "\tparent=\"ComponentContainer\"\n"
    "    library=\"ContribUserInterface\"\n"
    "    pointerfieldtypes=\"both\"\n"
    "\tstructure=\"concrete\"\n"
    "    systemcomponent=\"true\"\n"
    "    parentsystemcomponent=\"true\"\n"
    "    decoratable=\"false\"\n"
    "    useLocalIncludes=\"false\"\n"
    "    isNodeCore=\"false\"\n"
    "    authors=\"David Kabala (djkabala@gmail.com)                             \"\n"
    ">\n"
    "A UI MenuBar.\n"
    "\t<Field\n"
    "\t\tname=\"MenuDelay\"\n"
    "\t\ttype=\"Real32\"\n"
    "\t\tcategory=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"0.5\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"SelectionModel\"\n"
    "\t\ttype=\"SingleSelectionModel\"\n"
    "\t\tcategory=\"pointer\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"NULL\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "</FieldContainer>\n",
    "A UI MenuBar.\n"
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &MenuBarBase::getType(void)
{
    return _type;
}

const FieldContainerType &MenuBarBase::getType(void) const
{
    return _type;
}

UInt32 MenuBarBase::getContainerSize(void) const
{
    return sizeof(MenuBar);
}

/*------------------------- decorator get ------------------------------*/


SFReal32 *MenuBarBase::editSFMenuDelay(void)
{
    editSField(MenuDelayFieldMask);

    return &_sfMenuDelay;
}

const SFReal32 *MenuBarBase::getSFMenuDelay(void) const
{
    return &_sfMenuDelay;
}


//! Get the MenuBar::_sfSelectionModel field.
const SFUnrecSingleSelectionModelPtr *MenuBarBase::getSFSelectionModel(void) const
{
    return &_sfSelectionModel;
}

SFUnrecSingleSelectionModelPtr *MenuBarBase::editSFSelectionModel (void)
{
    editSField(SelectionModelFieldMask);

    return &_sfSelectionModel;
}





/*------------------------------ access -----------------------------------*/

UInt32 MenuBarBase::getBinSize(ConstFieldMaskArg whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (MenuDelayFieldMask & whichField))
    {
        returnValue += _sfMenuDelay.getBinSize();
    }
    if(FieldBits::NoField != (SelectionModelFieldMask & whichField))
    {
        returnValue += _sfSelectionModel.getBinSize();
    }

    return returnValue;
}

void MenuBarBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (MenuDelayFieldMask & whichField))
    {
        _sfMenuDelay.copyToBin(pMem);
    }
    if(FieldBits::NoField != (SelectionModelFieldMask & whichField))
    {
        _sfSelectionModel.copyToBin(pMem);
    }
}

void MenuBarBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (MenuDelayFieldMask & whichField))
    {
        _sfMenuDelay.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (SelectionModelFieldMask & whichField))
    {
        _sfSelectionModel.copyFromBin(pMem);
    }
}

//! create a new instance of the class
MenuBarTransitPtr MenuBarBase::createLocal(BitVector bFlags)
{
    MenuBarTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyLocal(bFlags);

        fc = dynamic_pointer_cast<MenuBar>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class, copy the container flags
MenuBarTransitPtr MenuBarBase::createDependent(BitVector bFlags)
{
    MenuBarTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyDependent(bFlags);

        fc = dynamic_pointer_cast<MenuBar>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class
MenuBarTransitPtr MenuBarBase::create(void)
{
    MenuBarTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopy();

        fc = dynamic_pointer_cast<MenuBar>(tmpPtr);
    }

    return fc;
}

MenuBar *MenuBarBase::createEmptyLocal(BitVector bFlags)
{
    MenuBar *returnValue;

    newPtr<MenuBar>(returnValue, bFlags);

    returnValue->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

//! create an empty new instance of the class, do not copy the prototype
MenuBar *MenuBarBase::createEmpty(void)
{
    MenuBar *returnValue;

    newPtr<MenuBar>(returnValue, Thread::getCurrentLocalFlags());

    returnValue->_pFieldFlags->_bNamespaceMask &=
        ~Thread::getCurrentLocalFlags();

    return returnValue;
}


FieldContainerTransitPtr MenuBarBase::shallowCopyLocal(
    BitVector bFlags) const
{
    MenuBar *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const MenuBar *>(this), bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

FieldContainerTransitPtr MenuBarBase::shallowCopyDependent(
    BitVector bFlags) const
{
    MenuBar *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const MenuBar *>(this), ~bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask = bFlags;

    return returnValue;
}

FieldContainerTransitPtr MenuBarBase::shallowCopy(void) const
{
    MenuBar *tmpPtr;

    newPtr(tmpPtr,
           dynamic_cast<const MenuBar *>(this),
           Thread::getCurrentLocalFlags());

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~Thread::getCurrentLocalFlags();

    FieldContainerTransitPtr returnValue(tmpPtr);

    return returnValue;
}




/*------------------------- constructors ----------------------------------*/

MenuBarBase::MenuBarBase(void) :
    Inherited(),
    _sfMenuDelay              (Real32(0.5)),
    _sfSelectionModel         (NULL)
{
}

MenuBarBase::MenuBarBase(const MenuBarBase &source) :
    Inherited(source),
    _sfMenuDelay              (source._sfMenuDelay              ),
    _sfSelectionModel         (NULL)
{
}


/*-------------------------- destructors ----------------------------------*/

MenuBarBase::~MenuBarBase(void)
{
}

void MenuBarBase::onCreate(const MenuBar *source)
{
    Inherited::onCreate(source);

    if(source != NULL)
    {
        MenuBar *pThis = static_cast<MenuBar *>(this);

        pThis->setSelectionModel(source->getSelectionModel());
    }
}

GetFieldHandlePtr MenuBarBase::getHandleMenuDelay       (void) const
{
    SFReal32::GetHandlePtr returnValue(
        new  SFReal32::GetHandle(
             &_sfMenuDelay,
             this->getType().getFieldDesc(MenuDelayFieldId),
             const_cast<MenuBarBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr MenuBarBase::editHandleMenuDelay      (void)
{
    SFReal32::EditHandlePtr returnValue(
        new  SFReal32::EditHandle(
             &_sfMenuDelay,
             this->getType().getFieldDesc(MenuDelayFieldId),
             this));


    editSField(MenuDelayFieldMask);

    return returnValue;
}

GetFieldHandlePtr MenuBarBase::getHandleSelectionModel  (void) const
{
    SFUnrecSingleSelectionModelPtr::GetHandlePtr returnValue(
        new  SFUnrecSingleSelectionModelPtr::GetHandle(
             &_sfSelectionModel,
             this->getType().getFieldDesc(SelectionModelFieldId),
             const_cast<MenuBarBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr MenuBarBase::editHandleSelectionModel (void)
{
    SFUnrecSingleSelectionModelPtr::EditHandlePtr returnValue(
        new  SFUnrecSingleSelectionModelPtr::EditHandle(
             &_sfSelectionModel,
             this->getType().getFieldDesc(SelectionModelFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&MenuBar::setSelectionModel,
                    static_cast<MenuBar *>(this), _1));

    editSField(SelectionModelFieldMask);

    return returnValue;
}


#ifdef OSG_MT_CPTR_ASPECT
void MenuBarBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    MenuBar *pThis = static_cast<MenuBar *>(this);

    pThis->execSync(static_cast<MenuBar *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif


#ifdef OSG_MT_CPTR_ASPECT
FieldContainer *MenuBarBase::createAspectCopy(
    const FieldContainer *pRefAspect) const
{
    MenuBar *returnValue;

    newAspectCopy(returnValue,
                  dynamic_cast<const MenuBar *>(pRefAspect),
                  dynamic_cast<const MenuBar *>(this));

    return returnValue;
}
#endif

void MenuBarBase::resolveLinks(void)
{
    Inherited::resolveLinks();

    static_cast<MenuBar *>(this)->setSelectionModel(NULL);


}


OSG_END_NAMESPACE
