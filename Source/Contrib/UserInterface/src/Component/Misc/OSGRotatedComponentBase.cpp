/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact:  David Kabala (djkabala@gmail.com)                             *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class RotatedComponent!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>
#include <boost/assign/list_of.hpp>

#include "OSGConfig.h"



#include "OSGComponent.h"               // InternalComponent Class

#include "OSGRotatedComponentBase.h"
#include "OSGRotatedComponent.h"

#include <boost/bind.hpp>

#ifdef WIN32 // turn off 'this' : used in base member initializer list warning
#pragma warning(disable:4355)
#endif

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::RotatedComponent
    A UI Rotated Component.
 */

/***************************************************************************\
 *                        Field Documentation                              *
\***************************************************************************/

/*! \var Real32          RotatedComponentBase::_sfAngle
    Angle To Rotate the internal Component CCW In Radians
*/

/*! \var Component *     RotatedComponentBase::_sfInternalComponent
    
*/

/*! \var UInt32          RotatedComponentBase::_sfResizePolicy
    
*/


/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldTraits<RotatedComponent *>::_type("RotatedComponentPtr", "ComponentContainerPtr");
#endif

OSG_FIELDTRAITS_GETTYPE(RotatedComponent *)

OSG_EXPORT_PTR_SFIELD_FULL(PointerSField,
                           RotatedComponent *,
                           0);

OSG_EXPORT_PTR_MFIELD_FULL(PointerMField,
                           RotatedComponent *,
                           0);

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

void RotatedComponentBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new SFReal32::Description(
        SFReal32::getClassType(),
        "Angle",
        "Angle To Rotate the internal Component CCW In Radians\n",
        AngleFieldId, AngleFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&RotatedComponent::editHandleAngle),
        static_cast<FieldGetMethodSig >(&RotatedComponent::getHandleAngle));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecComponentPtr::Description(
        SFUnrecComponentPtr::getClassType(),
        "InternalComponent",
        "",
        InternalComponentFieldId, InternalComponentFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&RotatedComponent::editHandleInternalComponent),
        static_cast<FieldGetMethodSig >(&RotatedComponent::getHandleInternalComponent));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUInt32::Description(
        SFUInt32::getClassType(),
        "ResizePolicy",
        "",
        ResizePolicyFieldId, ResizePolicyFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&RotatedComponent::editHandleResizePolicy),
        static_cast<FieldGetMethodSig >(&RotatedComponent::getHandleResizePolicy));

    oType.addInitialDesc(pDesc);
}


RotatedComponentBase::TypeObject RotatedComponentBase::_type(
    RotatedComponentBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    0,
    reinterpret_cast<PrototypeCreateF>(&RotatedComponentBase::createEmptyLocal),
    RotatedComponent::initMethod,
    RotatedComponent::exitMethod,
    reinterpret_cast<InitalInsertDescFunc>(&RotatedComponent::classDescInserter),
    false,
    0,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "\tname=\"RotatedComponent\"\n"
    "\tparent=\"ComponentContainer\"\n"
    "    library=\"ContribUserInterface\"\n"
    "    pointerfieldtypes=\"both\"\n"
    "\tstructure=\"concrete\"\n"
    "    systemcomponent=\"true\"\n"
    "    parentsystemcomponent=\"true\"\n"
    "    decoratable=\"false\"\n"
    "    useLocalIncludes=\"false\"\n"
    "    isNodeCore=\"false\"\n"
    "    authors=\"David Kabala (djkabala@gmail.com)                             \"\n"
    ">\n"
    "A UI Rotated Component.\n"
    "\t<Field\n"
    "\t\tname=\"Angle\"\n"
    "\t\ttype=\"Real32\"\n"
    "\t\tcategory=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"0.0\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "    Angle To Rotate the internal Component CCW In Radians\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"InternalComponent\"\n"
    "\t\ttype=\"Component\"\n"
    "\t\tcategory=\"pointer\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"NULL\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"ResizePolicy\"\n"
    "\t\ttype=\"UInt32\"\n"
    "\t\tcategory=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"RotatedComponent::RESIZE_TO_MIN\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "</FieldContainer>\n",
    "A UI Rotated Component.\n"
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &RotatedComponentBase::getType(void)
{
    return _type;
}

const FieldContainerType &RotatedComponentBase::getType(void) const
{
    return _type;
}

UInt32 RotatedComponentBase::getContainerSize(void) const
{
    return sizeof(RotatedComponent);
}

/*------------------------- decorator get ------------------------------*/


SFReal32 *RotatedComponentBase::editSFAngle(void)
{
    editSField(AngleFieldMask);

    return &_sfAngle;
}

const SFReal32 *RotatedComponentBase::getSFAngle(void) const
{
    return &_sfAngle;
}


//! Get the RotatedComponent::_sfInternalComponent field.
const SFUnrecComponentPtr *RotatedComponentBase::getSFInternalComponent(void) const
{
    return &_sfInternalComponent;
}

SFUnrecComponentPtr *RotatedComponentBase::editSFInternalComponent(void)
{
    editSField(InternalComponentFieldMask);

    return &_sfInternalComponent;
}

SFUInt32 *RotatedComponentBase::editSFResizePolicy(void)
{
    editSField(ResizePolicyFieldMask);

    return &_sfResizePolicy;
}

const SFUInt32 *RotatedComponentBase::getSFResizePolicy(void) const
{
    return &_sfResizePolicy;
}






/*------------------------------ access -----------------------------------*/

UInt32 RotatedComponentBase::getBinSize(ConstFieldMaskArg whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (AngleFieldMask & whichField))
    {
        returnValue += _sfAngle.getBinSize();
    }
    if(FieldBits::NoField != (InternalComponentFieldMask & whichField))
    {
        returnValue += _sfInternalComponent.getBinSize();
    }
    if(FieldBits::NoField != (ResizePolicyFieldMask & whichField))
    {
        returnValue += _sfResizePolicy.getBinSize();
    }

    return returnValue;
}

void RotatedComponentBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (AngleFieldMask & whichField))
    {
        _sfAngle.copyToBin(pMem);
    }
    if(FieldBits::NoField != (InternalComponentFieldMask & whichField))
    {
        _sfInternalComponent.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ResizePolicyFieldMask & whichField))
    {
        _sfResizePolicy.copyToBin(pMem);
    }
}

void RotatedComponentBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (AngleFieldMask & whichField))
    {
        _sfAngle.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (InternalComponentFieldMask & whichField))
    {
        _sfInternalComponent.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ResizePolicyFieldMask & whichField))
    {
        _sfResizePolicy.copyFromBin(pMem);
    }
}

//! create a new instance of the class
RotatedComponentTransitPtr RotatedComponentBase::createLocal(BitVector bFlags)
{
    RotatedComponentTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyLocal(bFlags);

        fc = dynamic_pointer_cast<RotatedComponent>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class, copy the container flags
RotatedComponentTransitPtr RotatedComponentBase::createDependent(BitVector bFlags)
{
    RotatedComponentTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyDependent(bFlags);

        fc = dynamic_pointer_cast<RotatedComponent>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class
RotatedComponentTransitPtr RotatedComponentBase::create(void)
{
    RotatedComponentTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopy();

        fc = dynamic_pointer_cast<RotatedComponent>(tmpPtr);
    }

    return fc;
}

RotatedComponent *RotatedComponentBase::createEmptyLocal(BitVector bFlags)
{
    RotatedComponent *returnValue;

    newPtr<RotatedComponent>(returnValue, bFlags);

    returnValue->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

//! create an empty new instance of the class, do not copy the prototype
RotatedComponent *RotatedComponentBase::createEmpty(void)
{
    RotatedComponent *returnValue;

    newPtr<RotatedComponent>(returnValue, Thread::getCurrentLocalFlags());

    returnValue->_pFieldFlags->_bNamespaceMask &=
        ~Thread::getCurrentLocalFlags();

    return returnValue;
}


FieldContainerTransitPtr RotatedComponentBase::shallowCopyLocal(
    BitVector bFlags) const
{
    RotatedComponent *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const RotatedComponent *>(this), bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

FieldContainerTransitPtr RotatedComponentBase::shallowCopyDependent(
    BitVector bFlags) const
{
    RotatedComponent *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const RotatedComponent *>(this), ~bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask = bFlags;

    return returnValue;
}

FieldContainerTransitPtr RotatedComponentBase::shallowCopy(void) const
{
    RotatedComponent *tmpPtr;

    newPtr(tmpPtr,
           dynamic_cast<const RotatedComponent *>(this),
           Thread::getCurrentLocalFlags());

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~Thread::getCurrentLocalFlags();

    FieldContainerTransitPtr returnValue(tmpPtr);

    return returnValue;
}




/*------------------------- constructors ----------------------------------*/

RotatedComponentBase::RotatedComponentBase(void) :
    Inherited(),
    _sfAngle                  (Real32(0.0)),
    _sfInternalComponent      (NULL),
    _sfResizePolicy           (UInt32(RotatedComponent::RESIZE_TO_MIN))
{
}

RotatedComponentBase::RotatedComponentBase(const RotatedComponentBase &source) :
    Inherited(source),
    _sfAngle                  (source._sfAngle                  ),
    _sfInternalComponent      (NULL),
    _sfResizePolicy           (source._sfResizePolicy           )
{
}


/*-------------------------- destructors ----------------------------------*/

RotatedComponentBase::~RotatedComponentBase(void)
{
}

void RotatedComponentBase::onCreate(const RotatedComponent *source)
{
    Inherited::onCreate(source);

    if(source != NULL)
    {
        RotatedComponent *pThis = static_cast<RotatedComponent *>(this);

        pThis->setInternalComponent(source->getInternalComponent());
    }
}

GetFieldHandlePtr RotatedComponentBase::getHandleAngle           (void) const
{
    SFReal32::GetHandlePtr returnValue(
        new  SFReal32::GetHandle(
             &_sfAngle,
             this->getType().getFieldDesc(AngleFieldId),
             const_cast<RotatedComponentBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr RotatedComponentBase::editHandleAngle          (void)
{
    SFReal32::EditHandlePtr returnValue(
        new  SFReal32::EditHandle(
             &_sfAngle,
             this->getType().getFieldDesc(AngleFieldId),
             this));


    editSField(AngleFieldMask);

    return returnValue;
}

GetFieldHandlePtr RotatedComponentBase::getHandleInternalComponent (void) const
{
    SFUnrecComponentPtr::GetHandlePtr returnValue(
        new  SFUnrecComponentPtr::GetHandle(
             &_sfInternalComponent,
             this->getType().getFieldDesc(InternalComponentFieldId),
             const_cast<RotatedComponentBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr RotatedComponentBase::editHandleInternalComponent(void)
{
    SFUnrecComponentPtr::EditHandlePtr returnValue(
        new  SFUnrecComponentPtr::EditHandle(
             &_sfInternalComponent,
             this->getType().getFieldDesc(InternalComponentFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&RotatedComponent::setInternalComponent,
                    static_cast<RotatedComponent *>(this), _1));

    editSField(InternalComponentFieldMask);

    return returnValue;
}

GetFieldHandlePtr RotatedComponentBase::getHandleResizePolicy    (void) const
{
    SFUInt32::GetHandlePtr returnValue(
        new  SFUInt32::GetHandle(
             &_sfResizePolicy,
             this->getType().getFieldDesc(ResizePolicyFieldId),
             const_cast<RotatedComponentBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr RotatedComponentBase::editHandleResizePolicy   (void)
{
    SFUInt32::EditHandlePtr returnValue(
        new  SFUInt32::EditHandle(
             &_sfResizePolicy,
             this->getType().getFieldDesc(ResizePolicyFieldId),
             this));


    editSField(ResizePolicyFieldMask);

    return returnValue;
}


#ifdef OSG_MT_CPTR_ASPECT
void RotatedComponentBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    RotatedComponent *pThis = static_cast<RotatedComponent *>(this);

    pThis->execSync(static_cast<RotatedComponent *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif


#ifdef OSG_MT_CPTR_ASPECT
FieldContainer *RotatedComponentBase::createAspectCopy(
    const FieldContainer *pRefAspect) const
{
    RotatedComponent *returnValue;

    newAspectCopy(returnValue,
                  dynamic_cast<const RotatedComponent *>(pRefAspect),
                  dynamic_cast<const RotatedComponent *>(this));

    return returnValue;
}
#endif

void RotatedComponentBase::resolveLinks(void)
{
    Inherited::resolveLinks();

    static_cast<RotatedComponent *>(this)->setInternalComponent(NULL);


}


OSG_END_NAMESPACE
