/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact:  David Kabala (djkabala@gmail.com)                             *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class Separator!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>
#include <boost/assign/list_of.hpp>

#include "OSGConfig.h"




#include "OSGSeparatorBase.h"
#include "OSGSeparator.h"

#include <boost/bind.hpp>

#ifdef WIN32 // turn off 'this' : used in base member initializer list warning
#pragma warning(disable:4355)
#endif

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::Separator
    A UI Separator.
 */

/***************************************************************************\
 *                        Field Documentation                              *
\***************************************************************************/

/*! \var UInt32          SeparatorBase::_sfOrientation
    
*/

/*! \var Real32          SeparatorBase::_sfSeparatorSize
    
*/

/*! \var Color4f         SeparatorBase::_sfColor
    
*/


/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldTraits<Separator *>::_type("SeparatorPtr", "ComponentPtr");
#endif

OSG_FIELDTRAITS_GETTYPE(Separator *)

OSG_EXPORT_PTR_SFIELD_FULL(PointerSField,
                           Separator *,
                           0);

OSG_EXPORT_PTR_MFIELD_FULL(PointerMField,
                           Separator *,
                           0);

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

void SeparatorBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new SFUInt32::Description(
        SFUInt32::getClassType(),
        "Orientation",
        "",
        OrientationFieldId, OrientationFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&Separator::editHandleOrientation),
        static_cast<FieldGetMethodSig >(&Separator::getHandleOrientation));

    oType.addInitialDesc(pDesc);

    pDesc = new SFReal32::Description(
        SFReal32::getClassType(),
        "SeparatorSize",
        "",
        SeparatorSizeFieldId, SeparatorSizeFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&Separator::editHandleSeparatorSize),
        static_cast<FieldGetMethodSig >(&Separator::getHandleSeparatorSize));

    oType.addInitialDesc(pDesc);

    pDesc = new SFColor4f::Description(
        SFColor4f::getClassType(),
        "Color",
        "",
        ColorFieldId, ColorFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&Separator::editHandleColor),
        static_cast<FieldGetMethodSig >(&Separator::getHandleColor));

    oType.addInitialDesc(pDesc);
}


SeparatorBase::TypeObject SeparatorBase::_type(
    SeparatorBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    0,
    reinterpret_cast<PrototypeCreateF>(&SeparatorBase::createEmptyLocal),
    Separator::initMethod,
    Separator::exitMethod,
    reinterpret_cast<InitalInsertDescFunc>(&Separator::classDescInserter),
    false,
    0,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "\tname=\"Separator\"\n"
    "\tparent=\"Component\"\n"
    "    library=\"ContribUserInterface\"\n"
    "    pointerfieldtypes=\"both\"\n"
    "\tstructure=\"concrete\"\n"
    "    systemcomponent=\"true\"\n"
    "    parentsystemcomponent=\"true\"\n"
    "    decoratable=\"false\"\n"
    "    useLocalIncludes=\"false\"\n"
    "    isNodeCore=\"false\"\n"
    "    authors=\"David Kabala (djkabala@gmail.com)                             \"\n"
    ">\n"
    "A UI Separator.\n"
    "\t<Field\n"
    "\t\tname=\"Orientation\"\n"
    "\t\ttype=\"UInt32\"\n"
    "\t\tcategory=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t\tdefaultValue=\"Separator::VERTICAL_ORIENTATION\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"SeparatorSize\"\n"
    "\t\ttype=\"Real32\"\n"
    "\t\tcategory=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t\tdefaultValue=\"1.0f\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"Color\"\n"
    "\t\ttype=\"Color4f\"\n"
    "\t\tcategory=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t\tdefaultValue=\"Color4f(0.0f,0.0f,0.0f,1.0f)\"\n"
    "\t>\n"
    "\t</Field>\n"
    "</FieldContainer>\n",
    "A UI Separator.\n"
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &SeparatorBase::getType(void)
{
    return _type;
}

const FieldContainerType &SeparatorBase::getType(void) const
{
    return _type;
}

UInt32 SeparatorBase::getContainerSize(void) const
{
    return sizeof(Separator);
}

/*------------------------- decorator get ------------------------------*/


SFUInt32 *SeparatorBase::editSFOrientation(void)
{
    editSField(OrientationFieldMask);

    return &_sfOrientation;
}

const SFUInt32 *SeparatorBase::getSFOrientation(void) const
{
    return &_sfOrientation;
}


SFReal32 *SeparatorBase::editSFSeparatorSize(void)
{
    editSField(SeparatorSizeFieldMask);

    return &_sfSeparatorSize;
}

const SFReal32 *SeparatorBase::getSFSeparatorSize(void) const
{
    return &_sfSeparatorSize;
}


SFColor4f *SeparatorBase::editSFColor(void)
{
    editSField(ColorFieldMask);

    return &_sfColor;
}

const SFColor4f *SeparatorBase::getSFColor(void) const
{
    return &_sfColor;
}






/*------------------------------ access -----------------------------------*/

UInt32 SeparatorBase::getBinSize(ConstFieldMaskArg whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (OrientationFieldMask & whichField))
    {
        returnValue += _sfOrientation.getBinSize();
    }
    if(FieldBits::NoField != (SeparatorSizeFieldMask & whichField))
    {
        returnValue += _sfSeparatorSize.getBinSize();
    }
    if(FieldBits::NoField != (ColorFieldMask & whichField))
    {
        returnValue += _sfColor.getBinSize();
    }

    return returnValue;
}

void SeparatorBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (OrientationFieldMask & whichField))
    {
        _sfOrientation.copyToBin(pMem);
    }
    if(FieldBits::NoField != (SeparatorSizeFieldMask & whichField))
    {
        _sfSeparatorSize.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ColorFieldMask & whichField))
    {
        _sfColor.copyToBin(pMem);
    }
}

void SeparatorBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (OrientationFieldMask & whichField))
    {
        _sfOrientation.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (SeparatorSizeFieldMask & whichField))
    {
        _sfSeparatorSize.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ColorFieldMask & whichField))
    {
        _sfColor.copyFromBin(pMem);
    }
}

//! create a new instance of the class
SeparatorTransitPtr SeparatorBase::createLocal(BitVector bFlags)
{
    SeparatorTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyLocal(bFlags);

        fc = dynamic_pointer_cast<Separator>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class, copy the container flags
SeparatorTransitPtr SeparatorBase::createDependent(BitVector bFlags)
{
    SeparatorTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyDependent(bFlags);

        fc = dynamic_pointer_cast<Separator>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class
SeparatorTransitPtr SeparatorBase::create(void)
{
    SeparatorTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopy();

        fc = dynamic_pointer_cast<Separator>(tmpPtr);
    }

    return fc;
}

Separator *SeparatorBase::createEmptyLocal(BitVector bFlags)
{
    Separator *returnValue;

    newPtr<Separator>(returnValue, bFlags);

    returnValue->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

//! create an empty new instance of the class, do not copy the prototype
Separator *SeparatorBase::createEmpty(void)
{
    Separator *returnValue;

    newPtr<Separator>(returnValue, Thread::getCurrentLocalFlags());

    returnValue->_pFieldFlags->_bNamespaceMask &=
        ~Thread::getCurrentLocalFlags();

    return returnValue;
}


FieldContainerTransitPtr SeparatorBase::shallowCopyLocal(
    BitVector bFlags) const
{
    Separator *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const Separator *>(this), bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

FieldContainerTransitPtr SeparatorBase::shallowCopyDependent(
    BitVector bFlags) const
{
    Separator *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const Separator *>(this), ~bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask = bFlags;

    return returnValue;
}

FieldContainerTransitPtr SeparatorBase::shallowCopy(void) const
{
    Separator *tmpPtr;

    newPtr(tmpPtr,
           dynamic_cast<const Separator *>(this),
           Thread::getCurrentLocalFlags());

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~Thread::getCurrentLocalFlags();

    FieldContainerTransitPtr returnValue(tmpPtr);

    return returnValue;
}




/*------------------------- constructors ----------------------------------*/

SeparatorBase::SeparatorBase(void) :
    Inherited(),
    _sfOrientation            (UInt32(Separator::VERTICAL_ORIENTATION)),
    _sfSeparatorSize          (Real32(1.0f)),
    _sfColor                  (Color4f(Color4f(0.0f,0.0f,0.0f,1.0f)))
{
}

SeparatorBase::SeparatorBase(const SeparatorBase &source) :
    Inherited(source),
    _sfOrientation            (source._sfOrientation            ),
    _sfSeparatorSize          (source._sfSeparatorSize          ),
    _sfColor                  (source._sfColor                  )
{
}


/*-------------------------- destructors ----------------------------------*/

SeparatorBase::~SeparatorBase(void)
{
}


GetFieldHandlePtr SeparatorBase::getHandleOrientation     (void) const
{
    SFUInt32::GetHandlePtr returnValue(
        new  SFUInt32::GetHandle(
             &_sfOrientation,
             this->getType().getFieldDesc(OrientationFieldId),
             const_cast<SeparatorBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr SeparatorBase::editHandleOrientation    (void)
{
    SFUInt32::EditHandlePtr returnValue(
        new  SFUInt32::EditHandle(
             &_sfOrientation,
             this->getType().getFieldDesc(OrientationFieldId),
             this));


    editSField(OrientationFieldMask);

    return returnValue;
}

GetFieldHandlePtr SeparatorBase::getHandleSeparatorSize   (void) const
{
    SFReal32::GetHandlePtr returnValue(
        new  SFReal32::GetHandle(
             &_sfSeparatorSize,
             this->getType().getFieldDesc(SeparatorSizeFieldId),
             const_cast<SeparatorBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr SeparatorBase::editHandleSeparatorSize  (void)
{
    SFReal32::EditHandlePtr returnValue(
        new  SFReal32::EditHandle(
             &_sfSeparatorSize,
             this->getType().getFieldDesc(SeparatorSizeFieldId),
             this));


    editSField(SeparatorSizeFieldMask);

    return returnValue;
}

GetFieldHandlePtr SeparatorBase::getHandleColor           (void) const
{
    SFColor4f::GetHandlePtr returnValue(
        new  SFColor4f::GetHandle(
             &_sfColor,
             this->getType().getFieldDesc(ColorFieldId),
             const_cast<SeparatorBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr SeparatorBase::editHandleColor          (void)
{
    SFColor4f::EditHandlePtr returnValue(
        new  SFColor4f::EditHandle(
             &_sfColor,
             this->getType().getFieldDesc(ColorFieldId),
             this));


    editSField(ColorFieldMask);

    return returnValue;
}


#ifdef OSG_MT_CPTR_ASPECT
void SeparatorBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    Separator *pThis = static_cast<Separator *>(this);

    pThis->execSync(static_cast<Separator *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif


#ifdef OSG_MT_CPTR_ASPECT
FieldContainer *SeparatorBase::createAspectCopy(
    const FieldContainer *pRefAspect) const
{
    Separator *returnValue;

    newAspectCopy(returnValue,
                  dynamic_cast<const Separator *>(pRefAspect),
                  dynamic_cast<const Separator *>(this));

    return returnValue;
}
#endif

void SeparatorBase::resolveLinks(void)
{
    Inherited::resolveLinks();


}


OSG_END_NAMESPACE
