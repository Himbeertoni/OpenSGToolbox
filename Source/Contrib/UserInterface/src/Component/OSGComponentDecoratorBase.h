/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact:  David Kabala (djkabala@gmail.com)                             *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class ComponentDecorator
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#ifndef _OSGCOMPONENTDECORATORBASE_H_
#define _OSGCOMPONENTDECORATORBASE_H_
#ifdef __sgi
#pragma once
#endif


#include "OSGConfig.h"
#include "OSGContribUserInterfaceDef.h"

//#include "OSGBaseTypes.h"

#include "OSGComponent.h" // Parent

#include "OSGComponentFields.h" // Decoratee type

#include "OSGComponentDecoratorFields.h"

//Event Producer Headers
#include "OSGEventProducer.h"
#include "OSGEventProducerType.h"
#include "OSGMethodDescription.h"
#include "OSGEventProducerPtrType.h"

OSG_BEGIN_NAMESPACE

class ComponentDecorator;

//! \brief ComponentDecorator Base Class.

class OSG_CONTRIBUSERINTERFACE_DLLMAPPING ComponentDecoratorBase : public Component
{
  public:

    typedef Component Inherited;
    typedef Component ParentContainer;

    typedef Inherited::TypeObject TypeObject;
    typedef TypeObject::InitPhase InitPhase;

    OSG_GEN_INTERNALPTR(ComponentDecorator);

    /*==========================  PUBLIC  =================================*/

  public:

    enum
    {
        DecorateeFieldId        = Inherited::NextFieldId,
        NextFieldId             = DecorateeFieldId          + 1
    };

    static const OSG::BitVector DecorateeFieldMask =
        (TypeTraits<BitVector>::One << DecorateeFieldId);

    enum
    {
        MouseMovedMethodId = 1,
        MouseDraggedMethodId = MouseMovedMethodId + 1,
        MouseClickedMethodId = MouseDraggedMethodId + 1,
        MouseEnteredMethodId = MouseClickedMethodId + 1,
        MouseExitedMethodId = MouseEnteredMethodId + 1,
        MousePressedMethodId = MouseExitedMethodId + 1,
        MouseReleasedMethodId = MousePressedMethodId + 1,
        MouseWheelMovedMethodId = MouseReleasedMethodId + 1,
        KeyPressedMethodId = MouseWheelMovedMethodId + 1,
        KeyReleasedMethodId = KeyPressedMethodId + 1,
        KeyTypedMethodId = KeyReleasedMethodId + 1,
        FocusGainedMethodId = KeyTypedMethodId + 1,
        FocusLostMethodId = FocusGainedMethodId + 1,
        ComponentHiddenMethodId = FocusLostMethodId + 1,
        ComponentVisibleMethodId = ComponentHiddenMethodId + 1,
        ComponentMovedMethodId = ComponentVisibleMethodId + 1,
        ComponentResizedMethodId = ComponentMovedMethodId + 1,
        ComponentEnabledMethodId = ComponentResizedMethodId + 1,
        ComponentDisabledMethodId = ComponentEnabledMethodId + 1,
        NextProducedMethodId = ComponentDisabledMethodId + 1
    };

    /*---------------------------------------------------------------------*/
    /*! \name                    Class Get                                 */
    /*! \{                                                                 */

    static FieldContainerType &getClassType   (void);
    static UInt32              getClassTypeId (void);
    static UInt16              getClassGroupId(void);
    static const  EventProducerType  &getProducerClassType  (void);
    static        UInt32              getProducerClassTypeId(void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                FieldContainer Get                            */
    /*! \{                                                                 */

    virtual       FieldContainerType &getType         (void);
    virtual const FieldContainerType &getType         (void) const;

    virtual       UInt32              getContainerSize(void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Get                                 */
    /*! \{                                                                 */

    virtual       const SFUnrecComponentPtr *getSFDecoratee(void) const;

    virtual       SFPnt2f             *editSFPosition       (void);
    virtual const SFPnt2f             *getSFPosition        (void) const;

    virtual       SFVec2f             *editSFMinSize        (void);
    virtual const SFVec2f             *getSFMinSize         (void) const;

    virtual       SFVec2f             *editSFMaxSize        (void);
    virtual const SFVec2f             *getSFMaxSize         (void) const;

    virtual       SFVec2f             *editSFPreferredSize  (void);
    virtual const SFVec2f             *getSFPreferredSize   (void) const;

    virtual       SFVec2f             *editSFSize           (void);
    virtual const SFVec2f             *getSFSize            (void) const;

    virtual       SFBool              *editSFVisible        (void);
    virtual const SFBool              *getSFVisible         (void) const;

    virtual       SFBool              *editSFEnabled        (void);
    virtual const SFBool              *getSFEnabled         (void) const;

    virtual       SFBool              *editSFFocused        (void);
    virtual const SFBool              *getSFFocused         (void) const;
    virtual const SFUnrecLayoutConstraintsPtr *getSFConstraints    (void) const;
    virtual       SFUnrecLayoutConstraintsPtr *editSFConstraints    (void);
    virtual const SFUnrecBorderPtr    *getSFBorder         (void) const;
    virtual       SFUnrecBorderPtr    *editSFBorder         (void);
    virtual const SFUnrecLayerPtr     *getSFBackground     (void) const;
    virtual       SFUnrecLayerPtr     *editSFBackground     (void);
    virtual const SFUnrecBorderPtr    *getSFDisabledBorder (void) const;
    virtual       SFUnrecBorderPtr    *editSFDisabledBorder (void);
    virtual const SFUnrecLayerPtr     *getSFDisabledBackground(void) const;
    virtual       SFUnrecLayerPtr     *editSFDisabledBackground(void);

    virtual       SFBool              *editSFDragEnabled    (void);
    virtual const SFBool              *getSFDragEnabled     (void) const;
    virtual const SFUnrecTransferHandlerPtr *getSFTransferHandler(void) const;
    virtual       SFUnrecTransferHandlerPtr *editSFTransferHandler(void);
    virtual const SFUnrecBorderPtr    *getSFFocusedBorder  (void) const;
    virtual       SFUnrecBorderPtr    *editSFFocusedBorder  (void);
    virtual const SFUnrecLayerPtr     *getSFFocusedBackground(void) const;
    virtual       SFUnrecLayerPtr     *editSFFocusedBackground(void);
    virtual const SFUnrecBorderPtr    *getSFRolloverBorder (void) const;
    virtual       SFUnrecBorderPtr    *editSFRolloverBorder (void);
    virtual const SFUnrecLayerPtr     *getSFRolloverBackground(void) const;
    virtual       SFUnrecLayerPtr     *editSFRolloverBackground(void);

    virtual       SFString            *editSFToolTipText    (void);
    virtual const SFString            *getSFToolTipText     (void) const;

    virtual       SFReal32            *editSFOpacity        (void);
    virtual const SFReal32            *getSFOpacity         (void) const;
    virtual const SFUnrecComponentContainerPtr *getSFParentContainer(void) const;
    virtual       SFUnrecComponentContainerPtr *editSFParentContainer(void);
    virtual const SFUnrecInternalWindowPtr *getSFParentWindow   (void) const;
    virtual       SFUnrecInternalWindowPtr *editSFParentWindow   (void);

    virtual       SFBool              *editSFClipping       (void);
    virtual const SFBool              *getSFClipping        (void) const;
    virtual const SFUnrecPopupMenuPtr *getSFPopupMenu      (void) const;
    virtual       SFUnrecPopupMenuPtr *editSFPopupMenu      (void);
    virtual const SFUnrecLayerPtr     *getSFFocusedForeground(void) const;
    virtual       SFUnrecLayerPtr     *editSFFocusedForeground(void);
    virtual const SFUnrecLayerPtr     *getSFRolloverForeground(void) const;
    virtual       SFUnrecLayerPtr     *editSFRolloverForeground(void);
    virtual const SFUnrecLayerPtr     *getSFDisabledForeground(void) const;
    virtual       SFUnrecLayerPtr     *editSFDisabledForeground(void);
    virtual const SFUnrecLayerPtr     *getSFForeground     (void) const;
    virtual       SFUnrecLayerPtr     *editSFForeground     (void);

    virtual       SFUInt32            *editSFCursor         (void);
    virtual const SFUInt32            *getSFCursor          (void) const;

    virtual             Component *getDecoratee(void) const;

    virtual       Pnt2f               &editPosition       (void);
    virtual const Pnt2f               &getPosition        (void) const;

    virtual       Vec2f               &editMinSize        (void);
    virtual const Vec2f               &getMinSize         (void) const;

    virtual       Vec2f               &editMaxSize        (void);
    virtual const Vec2f               &getMaxSize         (void) const;

    virtual       Vec2f               &editPreferredSize  (void);
    virtual const Vec2f               &getPreferredSize   (void) const;

    virtual       Vec2f               &editSize           (void);
    virtual const Vec2f               &getSize            (void) const;

    virtual       bool                &editVisible        (void);
    virtual       bool                 getVisible         (void) const;

    virtual       bool                &editEnabled        (void);
    virtual       bool                 getEnabled         (void) const;

    virtual       bool                &editFocused        (void);
    virtual       bool                 getFocused         (void) const;

    virtual       LayoutConstraints * getConstraints    (void) const;

    virtual       Border * getBorder         (void) const;

    virtual       Layer * getBackground     (void) const;

    virtual       Border * getDisabledBorder (void) const;

    virtual       Layer * getDisabledBackground(void) const;

    virtual       bool                &editDragEnabled    (void);
    virtual       bool                 getDragEnabled     (void) const;

    virtual       TransferHandler * getTransferHandler(void) const;

    virtual       Border * getFocusedBorder  (void) const;

    virtual       Layer * getFocusedBackground(void) const;

    virtual       Border * getRolloverBorder (void) const;

    virtual       Layer * getRolloverBackground(void) const;

    virtual       std::string         &editToolTipText    (void);
    virtual const std::string         &getToolTipText     (void) const;

    virtual       Real32              &editOpacity        (void);
    virtual       Real32               getOpacity         (void) const;

    virtual       ComponentContainer * getParentContainer(void) const;

    virtual       InternalWindow * getParentWindow   (void) const;

    virtual       bool                &editClipping       (void);
    virtual       bool                 getClipping        (void) const;

    virtual       PopupMenu * getPopupMenu      (void) const;

    virtual       Layer * getFocusedForeground(void) const;

    virtual       Layer * getRolloverForeground(void) const;

    virtual       Layer * getDisabledForeground(void) const;

    virtual       Layer * getForeground     (void) const;

    virtual       UInt32              &editCursor         (void);
    virtual       UInt32               getCursor          (void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Set                                 */
    /*! \{                                                                 */

    virtual       void setDecoratee      (Component * const value);
    virtual void setPosition       (const Pnt2f &value);
    virtual void setMinSize        (const Vec2f &value);
    virtual void setMaxSize        (const Vec2f &value);
    virtual void setPreferredSize  (const Vec2f &value);
    virtual void setSize           (const Vec2f &value);
    virtual void setVisible        (const bool value);
    virtual void setEnabled        (const bool value);
    virtual void setFocused        (const bool value);
    virtual void setConstraints    (LayoutConstraints * const value);
    virtual void setBorder         (Border * const value);
    virtual void setBackground     (Layer * const value);
    virtual void setDisabledBorder (Border * const value);
    virtual void setDisabledBackground(Layer * const value);
    virtual void setDragEnabled    (const bool value);
    virtual void setTransferHandler(TransferHandler * const value);
    virtual void setFocusedBorder  (Border * const value);
    virtual void setFocusedBackground(Layer * const value);
    virtual void setRolloverBorder (Border * const value);
    virtual void setRolloverBackground(Layer * const value);
    virtual void setToolTipText    (const std::string &value);
    virtual void setOpacity        (const Real32 value);
    virtual void setParentContainer(ComponentContainer * const value);
    virtual void setParentWindow   (InternalWindow * const value);
    virtual void setClipping       (const bool value);
    virtual void setPopupMenu      (PopupMenu * const value);
    virtual void setFocusedForeground(Layer * const value);
    virtual void setRolloverForeground(Layer * const value);
    virtual void setDisabledForeground(Layer * const value);
    virtual void setForeground     (Layer * const value);
    virtual void setCursor         (const UInt32 value);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                Ptr Field Set                                 */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                Ptr MField Set                                */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Binary Access                              */
    /*! \{                                                                 */

    virtual UInt32 getBinSize (ConstFieldMaskArg  whichField);
    virtual void   copyToBin  (BinaryDataHandler &pMem,
                               ConstFieldMaskArg  whichField);
    virtual void   copyFromBin(BinaryDataHandler &pMem,
                               ConstFieldMaskArg  whichField);


    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                Method Produced Get                           */
    /*! \{                                                                 */

    virtual const EventProducerType &getProducerType(void) const; 

    EventConnection          attachActivity             (ActivityRefPtr TheActivity,
                                                         UInt32 ProducedEventId);
    bool                     isActivityAttached         (ActivityRefPtr TheActivity,
                                                         UInt32 ProducedEventId) const;
    UInt32                   getNumActivitiesAttached   (UInt32 ProducedEventId) const;
    ActivityRefPtr           getAttachedActivity        (UInt32 ProducedEventId,
                                                         UInt32 ActivityIndex) const;
    void                     detachActivity             (ActivityRefPtr TheActivity,
                                                         UInt32 ProducedEventId);
    UInt32                   getNumProducedEvents       (void) const;
    const MethodDescription *getProducedEventDescription(const std::string &ProducedEventName) const;
    const MethodDescription *getProducedEventDescription(UInt32 ProducedEventId) const;
    UInt32                   getProducedEventId         (const std::string &ProducedEventName) const;

    SFEventProducerPtr *editSFEventProducer(void);
    EventProducerPtr   &editEventProducer  (void);

    /*! \}                                                                 */
    /*=========================  PROTECTED  ===============================*/

  protected:
    /*---------------------------------------------------------------------*/
    /*! \name                    Event Producer                            */
    /*! \{                                                                 */
    EventProducer _Producer;
    
    GetFieldHandlePtr  getHandleEventProducer        (void) const;
    EditFieldHandlePtr editHandleEventProducer       (void);

    /*! \}                                                                 */

    static TypeObject _type;

    static       void   classDescInserter(TypeObject &oType);
    static const Char8 *getClassname     (void             );

    /*---------------------------------------------------------------------*/
    /*! \name                      Fields                                  */
    /*! \{                                                                 */

    SFUnrecComponentPtr _sfDecoratee;
    SFEventProducerPtr _sfEventProducer;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Constructors                               */
    /*! \{                                                                 */

    ComponentDecoratorBase(void);
    ComponentDecoratorBase(const ComponentDecoratorBase &source);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Destructors                                */
    /*! \{                                                                 */

    virtual ~ComponentDecoratorBase(void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                     onCreate                                */
    /*! \{                                                                 */

    void onCreate(const ComponentDecorator *source = NULL);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Generic Field Access                      */
    /*! \{                                                                 */

    GetFieldHandlePtr  getHandleDecoratee (void) const;
    EditFieldHandlePtr editHandleDecoratee(void);

    GetFieldHandlePtr  getHandlePosition        (void) const;
    EditFieldHandlePtr editHandlePosition       (void);
    GetFieldHandlePtr  getHandleClipBounds      (void) const;
    EditFieldHandlePtr editHandleClipBounds     (void);
    GetFieldHandlePtr  getHandleMinSize         (void) const;
    EditFieldHandlePtr editHandleMinSize        (void);
    GetFieldHandlePtr  getHandleMaxSize         (void) const;
    EditFieldHandlePtr editHandleMaxSize        (void);
    GetFieldHandlePtr  getHandlePreferredSize   (void) const;
    EditFieldHandlePtr editHandlePreferredSize  (void);
    GetFieldHandlePtr  getHandleSize            (void) const;
    EditFieldHandlePtr editHandleSize           (void);
    GetFieldHandlePtr  getHandleVisible         (void) const;
    EditFieldHandlePtr editHandleVisible        (void);
    GetFieldHandlePtr  getHandleEnabled         (void) const;
    EditFieldHandlePtr editHandleEnabled        (void);
    GetFieldHandlePtr  getHandleFocused         (void) const;
    EditFieldHandlePtr editHandleFocused        (void);
    GetFieldHandlePtr  getHandleConstraints     (void) const;
    EditFieldHandlePtr editHandleConstraints    (void);
    GetFieldHandlePtr  getHandleBorder          (void) const;
    EditFieldHandlePtr editHandleBorder         (void);
    GetFieldHandlePtr  getHandleBackground      (void) const;
    EditFieldHandlePtr editHandleBackground     (void);
    GetFieldHandlePtr  getHandleDisabledBorder  (void) const;
    EditFieldHandlePtr editHandleDisabledBorder (void);
    GetFieldHandlePtr  getHandleDisabledBackground (void) const;
    EditFieldHandlePtr editHandleDisabledBackground(void);
    GetFieldHandlePtr  getHandleDragEnabled     (void) const;
    EditFieldHandlePtr editHandleDragEnabled    (void);
    GetFieldHandlePtr  getHandleTransferHandler (void) const;
    EditFieldHandlePtr editHandleTransferHandler(void);
    GetFieldHandlePtr  getHandleFocusedBorder   (void) const;
    EditFieldHandlePtr editHandleFocusedBorder  (void);
    GetFieldHandlePtr  getHandleFocusedBackground (void) const;
    EditFieldHandlePtr editHandleFocusedBackground(void);
    GetFieldHandlePtr  getHandleRolloverBorder  (void) const;
    EditFieldHandlePtr editHandleRolloverBorder (void);
    GetFieldHandlePtr  getHandleRolloverBackground (void) const;
    EditFieldHandlePtr editHandleRolloverBackground(void);
    GetFieldHandlePtr  getHandleToolTipText     (void) const;
    EditFieldHandlePtr editHandleToolTipText    (void);
    GetFieldHandlePtr  getHandleOpacity         (void) const;
    EditFieldHandlePtr editHandleOpacity        (void);
    GetFieldHandlePtr  getHandleParentContainer (void) const;
    EditFieldHandlePtr editHandleParentContainer(void);
    GetFieldHandlePtr  getHandleParentWindow    (void) const;
    EditFieldHandlePtr editHandleParentWindow   (void);
    GetFieldHandlePtr  getHandleClipping        (void) const;
    EditFieldHandlePtr editHandleClipping       (void);
    GetFieldHandlePtr  getHandlePopupMenu       (void) const;
    EditFieldHandlePtr editHandlePopupMenu      (void);
    GetFieldHandlePtr  getHandleFocusedForeground (void) const;
    EditFieldHandlePtr editHandleFocusedForeground(void);
    GetFieldHandlePtr  getHandleRolloverForeground (void) const;
    EditFieldHandlePtr editHandleRolloverForeground(void);
    GetFieldHandlePtr  getHandleDisabledForeground (void) const;
    EditFieldHandlePtr editHandleDisabledForeground(void);
    GetFieldHandlePtr  getHandleForeground      (void) const;
    EditFieldHandlePtr editHandleForeground     (void);
    GetFieldHandlePtr  getHandleCursor          (void) const;
    EditFieldHandlePtr editHandleCursor         (void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Get                                 */
    /*! \{                                                                 */


    virtual       SFPnt4f             *editSFClipBounds     (void);
    virtual const SFPnt4f             *getSFClipBounds      (void) const;


    virtual       Pnt4f               &editClipBounds     (void);
    virtual const Pnt4f               &getClipBounds      (void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Set                                 */
    /*! \{                                                                 */

    virtual void setClipBounds     (const Pnt4f &value);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                Ptr MField Set                                */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

#ifdef OSG_MT_CPTR_ASPECT
    virtual void execSyncV(      FieldContainer    &oFrom,
                                 ConstFieldMaskArg  whichField,
                                 AspectOffsetStore &oOffsets,
                                 ConstFieldMaskArg  syncMode  ,
                           const UInt32             uiSyncInfo);

            void execSync (      ComponentDecoratorBase *pFrom,
                                 ConstFieldMaskArg  whichField,
                                 AspectOffsetStore &oOffsets,
                                 ConstFieldMaskArg  syncMode  ,
                           const UInt32             uiSyncInfo);
#endif

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Edit                                   */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                     Aspect Create                            */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Edit                                   */
    /*! \{                                                                 */
    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

    virtual void resolveLinks(void);

    /*! \}                                                                 */
    /*==========================  PRIVATE  ================================*/

  private:
    /*---------------------------------------------------------------------*/
    static MethodDescription   *_methodDesc[];
    static EventProducerType _producerType;


    // prohibit default functions (move to 'public' if you need one)
    void operator =(const ComponentDecoratorBase &source);
};

typedef ComponentDecoratorBase *ComponentDecoratorBaseP;

OSG_END_NAMESPACE

#endif /* _OSGCOMPONENTDECORATORBASE_H_ */
