/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact:  David Kabala (djkabala@gmail.com)                             *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class ScrollPanel!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>
#include <boost/assign/list_of.hpp>

#include "OSGConfig.h"


#include "Component/Scroll/OSGScrollPanel.h"   // VerticalScrollBarDisplayPolicy default header
#include "Component/Scroll/OSGScrollPanel.h"   // HorizontalScrollBarDisplayPolicy default header
#include "Component/Scroll/OSGScrollPanel.h"   // VerticalResizePolicy default header
#include "Component/Scroll/OSGScrollPanel.h"   // HorizontalResizePolicy default header
#include "Component/Scroll/OSGScrollPanel.h"   // VerticalScrollBarAlignment default header
#include "Component/Scroll/OSGScrollPanel.h"   // HorizontalScrollBarAlignment default header

#include "OSGUIViewport.h"              // View Class
#include "OSGScrollBar.h"               // InternalVerticalScrollBar Class
#include "OSGDefaultBoundedRangeModel.h" // VerticalRangeModel Class

#include "OSGScrollPanelBase.h"
#include "OSGScrollPanel.h"

#include <boost/bind.hpp>

#ifdef WIN32 // turn off 'this' : used in base member initializer list warning
#pragma warning(disable:4355)
#endif

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::ScrollPanel
    A UI ScrollPanel
 */

/***************************************************************************\
 *                        Field Documentation                              *
\***************************************************************************/

/*! \var UIViewport *    ScrollPanelBase::_sfView
    
*/

/*! \var ScrollBar *     ScrollPanelBase::_sfInternalVerticalScrollBar
    
*/

/*! \var ScrollBar *     ScrollPanelBase::_sfInternalHorizontalScrollBar
    
*/

/*! \var UInt32          ScrollPanelBase::_sfVerticalScrollBarDisplayPolicy
    
*/

/*! \var UInt32          ScrollPanelBase::_sfHorizontalScrollBarDisplayPolicy
    
*/

/*! \var UInt32          ScrollPanelBase::_sfVerticalResizePolicy
    
*/

/*! \var UInt32          ScrollPanelBase::_sfHorizontalResizePolicy
    
*/

/*! \var UInt32          ScrollPanelBase::_sfVerticalScrollBarAlignment
    
*/

/*! \var UInt32          ScrollPanelBase::_sfHorizontalScrollBarAlignment
    
*/

/*! \var DefaultBoundedRangeModel * ScrollPanelBase::_sfVerticalRangeModel
    
*/

/*! \var DefaultBoundedRangeModel * ScrollPanelBase::_sfHorizontalRangeModel
    
*/


/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldTraits<ScrollPanel *>::_type("ScrollPanelPtr", "ComponentContainerPtr");
#endif

OSG_FIELDTRAITS_GETTYPE(ScrollPanel *)

OSG_EXPORT_PTR_SFIELD_FULL(PointerSField,
                           ScrollPanel *,
                           0);

OSG_EXPORT_PTR_MFIELD_FULL(PointerMField,
                           ScrollPanel *,
                           0);

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

void ScrollPanelBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new SFUnrecUIViewportPtr::Description(
        SFUnrecUIViewportPtr::getClassType(),
        "View",
        "",
        ViewFieldId, ViewFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&ScrollPanel::editHandleView),
        static_cast<FieldGetMethodSig >(&ScrollPanel::getHandleView));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecScrollBarPtr::Description(
        SFUnrecScrollBarPtr::getClassType(),
        "InternalVerticalScrollBar",
        "",
        InternalVerticalScrollBarFieldId, InternalVerticalScrollBarFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&ScrollPanel::editHandleInternalVerticalScrollBar),
        static_cast<FieldGetMethodSig >(&ScrollPanel::getHandleInternalVerticalScrollBar));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecScrollBarPtr::Description(
        SFUnrecScrollBarPtr::getClassType(),
        "InternalHorizontalScrollBar",
        "",
        InternalHorizontalScrollBarFieldId, InternalHorizontalScrollBarFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&ScrollPanel::editHandleInternalHorizontalScrollBar),
        static_cast<FieldGetMethodSig >(&ScrollPanel::getHandleInternalHorizontalScrollBar));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUInt32::Description(
        SFUInt32::getClassType(),
        "VerticalScrollBarDisplayPolicy",
        "",
        VerticalScrollBarDisplayPolicyFieldId, VerticalScrollBarDisplayPolicyFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&ScrollPanel::editHandleVerticalScrollBarDisplayPolicy),
        static_cast<FieldGetMethodSig >(&ScrollPanel::getHandleVerticalScrollBarDisplayPolicy));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUInt32::Description(
        SFUInt32::getClassType(),
        "HorizontalScrollBarDisplayPolicy",
        "",
        HorizontalScrollBarDisplayPolicyFieldId, HorizontalScrollBarDisplayPolicyFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&ScrollPanel::editHandleHorizontalScrollBarDisplayPolicy),
        static_cast<FieldGetMethodSig >(&ScrollPanel::getHandleHorizontalScrollBarDisplayPolicy));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUInt32::Description(
        SFUInt32::getClassType(),
        "VerticalResizePolicy",
        "",
        VerticalResizePolicyFieldId, VerticalResizePolicyFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&ScrollPanel::editHandleVerticalResizePolicy),
        static_cast<FieldGetMethodSig >(&ScrollPanel::getHandleVerticalResizePolicy));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUInt32::Description(
        SFUInt32::getClassType(),
        "HorizontalResizePolicy",
        "",
        HorizontalResizePolicyFieldId, HorizontalResizePolicyFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&ScrollPanel::editHandleHorizontalResizePolicy),
        static_cast<FieldGetMethodSig >(&ScrollPanel::getHandleHorizontalResizePolicy));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUInt32::Description(
        SFUInt32::getClassType(),
        "VerticalScrollBarAlignment",
        "",
        VerticalScrollBarAlignmentFieldId, VerticalScrollBarAlignmentFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&ScrollPanel::editHandleVerticalScrollBarAlignment),
        static_cast<FieldGetMethodSig >(&ScrollPanel::getHandleVerticalScrollBarAlignment));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUInt32::Description(
        SFUInt32::getClassType(),
        "HorizontalScrollBarAlignment",
        "",
        HorizontalScrollBarAlignmentFieldId, HorizontalScrollBarAlignmentFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&ScrollPanel::editHandleHorizontalScrollBarAlignment),
        static_cast<FieldGetMethodSig >(&ScrollPanel::getHandleHorizontalScrollBarAlignment));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecDefaultBoundedRangeModelPtr::Description(
        SFUnrecDefaultBoundedRangeModelPtr::getClassType(),
        "VerticalRangeModel",
        "",
        VerticalRangeModelFieldId, VerticalRangeModelFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&ScrollPanel::editHandleVerticalRangeModel),
        static_cast<FieldGetMethodSig >(&ScrollPanel::getHandleVerticalRangeModel));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecDefaultBoundedRangeModelPtr::Description(
        SFUnrecDefaultBoundedRangeModelPtr::getClassType(),
        "HorizontalRangeModel",
        "",
        HorizontalRangeModelFieldId, HorizontalRangeModelFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&ScrollPanel::editHandleHorizontalRangeModel),
        static_cast<FieldGetMethodSig >(&ScrollPanel::getHandleHorizontalRangeModel));

    oType.addInitialDesc(pDesc);
}


ScrollPanelBase::TypeObject ScrollPanelBase::_type(
    ScrollPanelBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    0,
    reinterpret_cast<PrototypeCreateF>(&ScrollPanelBase::createEmptyLocal),
    ScrollPanel::initMethod,
    ScrollPanel::exitMethod,
    reinterpret_cast<InitalInsertDescFunc>(&ScrollPanel::classDescInserter),
    false,
    0,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "\tname=\"ScrollPanel\"\n"
    "\tparent=\"ComponentContainer\"\n"
    "    library=\"ContribUserInterface\"\n"
    "    pointerfieldtypes=\"both\"\n"
    "\tstructure=\"concrete\"\n"
    "    systemcomponent=\"true\"\n"
    "    parentsystemcomponent=\"true\"\n"
    "\tdecoratable=\"false\"\n"
    "    useLocalIncludes=\"false\"\n"
    "    isNodeCore=\"false\"\n"
    "    authors=\"David Kabala (djkabala@gmail.com)                             \"\n"
    ">\n"
    "A UI ScrollPanel\n"
    "\t<Field\n"
    "\t\tname=\"View\"\n"
    "\t\ttype=\"UIViewport\"\n"
    "\t\tcategory=\"pointer\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"protected\"\n"
    "\t\tdefaultValue=\"NULL\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"InternalVerticalScrollBar\"\n"
    "\t\ttype=\"ScrollBar\"\n"
    "\t\tcategory=\"pointer\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"protected\"\n"
    "\t\tdefaultValue=\"NULL\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"InternalHorizontalScrollBar\"\n"
    "\t\ttype=\"ScrollBar\"\n"
    "\t\tcategory=\"pointer\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"protected\"\n"
    "\t\tdefaultValue=\"NULL\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"VerticalScrollBarDisplayPolicy\"\n"
    "\t\ttype=\"UInt32\"\n"
    "\t\tcategory=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t\tdefaultHeader=\"Component/Scroll/OSGScrollPanel.h\"\n"
    "\t\tdefaultValue=\"ScrollPanel::SCROLLBAR_AS_NEEDED\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"HorizontalScrollBarDisplayPolicy\"\n"
    "\t\ttype=\"UInt32\"\n"
    "\t\tcategory=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t\tdefaultHeader=\"Component/Scroll/OSGScrollPanel.h\"\n"
    "\t\tdefaultValue=\"ScrollPanel::SCROLLBAR_AS_NEEDED\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"VerticalResizePolicy\"\n"
    "\t\ttype=\"UInt32\"\n"
    "\t\tcategory=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t\tdefaultHeader=\"Component/Scroll/OSGScrollPanel.h\"\n"
    "\t\tdefaultValue=\"ScrollPanel::NO_RESIZE\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"HorizontalResizePolicy\"\n"
    "\t\ttype=\"UInt32\"\n"
    "\t\tcategory=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t\tdefaultHeader=\"Component/Scroll/OSGScrollPanel.h\"\n"
    "\t\tdefaultValue=\"ScrollPanel::NO_RESIZE\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"VerticalScrollBarAlignment\"\n"
    "\t\ttype=\"UInt32\"\n"
    "\t\tcategory=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t\tdefaultHeader=\"Component/Scroll/OSGScrollPanel.h\"\n"
    "\t\tdefaultValue=\"ScrollPanel::SCROLLBAR_ALIGN_RIGHT\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"HorizontalScrollBarAlignment\"\n"
    "\t\ttype=\"UInt32\"\n"
    "\t\tcategory=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t\tdefaultHeader=\"Component/Scroll/OSGScrollPanel.h\"\n"
    "\t\tdefaultValue=\"ScrollPanel::SCROLLBAR_ALIGN_BOTTOM\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"VerticalRangeModel\"\n"
    "\t\ttype=\"DefaultBoundedRangeModel\"\n"
    "\t\tcategory=\"pointer\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t\tdefaultValue=\"NULL\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"HorizontalRangeModel\"\n"
    "\t\ttype=\"DefaultBoundedRangeModel\"\n"
    "\t\tcategory=\"pointer\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t\tdefaultValue=\"NULL\"\n"
    "\t>\n"
    "\t</Field>\n"
    "</FieldContainer>\n",
    "A UI ScrollPanel\n"
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &ScrollPanelBase::getType(void)
{
    return _type;
}

const FieldContainerType &ScrollPanelBase::getType(void) const
{
    return _type;
}

UInt32 ScrollPanelBase::getContainerSize(void) const
{
    return sizeof(ScrollPanel);
}

/*------------------------- decorator get ------------------------------*/


//! Get the ScrollPanel::_sfView field.
const SFUnrecUIViewportPtr *ScrollPanelBase::getSFView(void) const
{
    return &_sfView;
}

SFUnrecUIViewportPtr *ScrollPanelBase::editSFView           (void)
{
    editSField(ViewFieldMask);

    return &_sfView;
}

//! Get the ScrollPanel::_sfInternalVerticalScrollBar field.
const SFUnrecScrollBarPtr *ScrollPanelBase::getSFInternalVerticalScrollBar(void) const
{
    return &_sfInternalVerticalScrollBar;
}

SFUnrecScrollBarPtr *ScrollPanelBase::editSFInternalVerticalScrollBar(void)
{
    editSField(InternalVerticalScrollBarFieldMask);

    return &_sfInternalVerticalScrollBar;
}

//! Get the ScrollPanel::_sfInternalHorizontalScrollBar field.
const SFUnrecScrollBarPtr *ScrollPanelBase::getSFInternalHorizontalScrollBar(void) const
{
    return &_sfInternalHorizontalScrollBar;
}

SFUnrecScrollBarPtr *ScrollPanelBase::editSFInternalHorizontalScrollBar(void)
{
    editSField(InternalHorizontalScrollBarFieldMask);

    return &_sfInternalHorizontalScrollBar;
}

SFUInt32 *ScrollPanelBase::editSFVerticalScrollBarDisplayPolicy(void)
{
    editSField(VerticalScrollBarDisplayPolicyFieldMask);

    return &_sfVerticalScrollBarDisplayPolicy;
}

const SFUInt32 *ScrollPanelBase::getSFVerticalScrollBarDisplayPolicy(void) const
{
    return &_sfVerticalScrollBarDisplayPolicy;
}


SFUInt32 *ScrollPanelBase::editSFHorizontalScrollBarDisplayPolicy(void)
{
    editSField(HorizontalScrollBarDisplayPolicyFieldMask);

    return &_sfHorizontalScrollBarDisplayPolicy;
}

const SFUInt32 *ScrollPanelBase::getSFHorizontalScrollBarDisplayPolicy(void) const
{
    return &_sfHorizontalScrollBarDisplayPolicy;
}


SFUInt32 *ScrollPanelBase::editSFVerticalResizePolicy(void)
{
    editSField(VerticalResizePolicyFieldMask);

    return &_sfVerticalResizePolicy;
}

const SFUInt32 *ScrollPanelBase::getSFVerticalResizePolicy(void) const
{
    return &_sfVerticalResizePolicy;
}


SFUInt32 *ScrollPanelBase::editSFHorizontalResizePolicy(void)
{
    editSField(HorizontalResizePolicyFieldMask);

    return &_sfHorizontalResizePolicy;
}

const SFUInt32 *ScrollPanelBase::getSFHorizontalResizePolicy(void) const
{
    return &_sfHorizontalResizePolicy;
}


SFUInt32 *ScrollPanelBase::editSFVerticalScrollBarAlignment(void)
{
    editSField(VerticalScrollBarAlignmentFieldMask);

    return &_sfVerticalScrollBarAlignment;
}

const SFUInt32 *ScrollPanelBase::getSFVerticalScrollBarAlignment(void) const
{
    return &_sfVerticalScrollBarAlignment;
}


SFUInt32 *ScrollPanelBase::editSFHorizontalScrollBarAlignment(void)
{
    editSField(HorizontalScrollBarAlignmentFieldMask);

    return &_sfHorizontalScrollBarAlignment;
}

const SFUInt32 *ScrollPanelBase::getSFHorizontalScrollBarAlignment(void) const
{
    return &_sfHorizontalScrollBarAlignment;
}


//! Get the ScrollPanel::_sfVerticalRangeModel field.
const SFUnrecDefaultBoundedRangeModelPtr *ScrollPanelBase::getSFVerticalRangeModel(void) const
{
    return &_sfVerticalRangeModel;
}

SFUnrecDefaultBoundedRangeModelPtr *ScrollPanelBase::editSFVerticalRangeModel(void)
{
    editSField(VerticalRangeModelFieldMask);

    return &_sfVerticalRangeModel;
}

//! Get the ScrollPanel::_sfHorizontalRangeModel field.
const SFUnrecDefaultBoundedRangeModelPtr *ScrollPanelBase::getSFHorizontalRangeModel(void) const
{
    return &_sfHorizontalRangeModel;
}

SFUnrecDefaultBoundedRangeModelPtr *ScrollPanelBase::editSFHorizontalRangeModel(void)
{
    editSField(HorizontalRangeModelFieldMask);

    return &_sfHorizontalRangeModel;
}





/*------------------------------ access -----------------------------------*/

UInt32 ScrollPanelBase::getBinSize(ConstFieldMaskArg whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (ViewFieldMask & whichField))
    {
        returnValue += _sfView.getBinSize();
    }
    if(FieldBits::NoField != (InternalVerticalScrollBarFieldMask & whichField))
    {
        returnValue += _sfInternalVerticalScrollBar.getBinSize();
    }
    if(FieldBits::NoField != (InternalHorizontalScrollBarFieldMask & whichField))
    {
        returnValue += _sfInternalHorizontalScrollBar.getBinSize();
    }
    if(FieldBits::NoField != (VerticalScrollBarDisplayPolicyFieldMask & whichField))
    {
        returnValue += _sfVerticalScrollBarDisplayPolicy.getBinSize();
    }
    if(FieldBits::NoField != (HorizontalScrollBarDisplayPolicyFieldMask & whichField))
    {
        returnValue += _sfHorizontalScrollBarDisplayPolicy.getBinSize();
    }
    if(FieldBits::NoField != (VerticalResizePolicyFieldMask & whichField))
    {
        returnValue += _sfVerticalResizePolicy.getBinSize();
    }
    if(FieldBits::NoField != (HorizontalResizePolicyFieldMask & whichField))
    {
        returnValue += _sfHorizontalResizePolicy.getBinSize();
    }
    if(FieldBits::NoField != (VerticalScrollBarAlignmentFieldMask & whichField))
    {
        returnValue += _sfVerticalScrollBarAlignment.getBinSize();
    }
    if(FieldBits::NoField != (HorizontalScrollBarAlignmentFieldMask & whichField))
    {
        returnValue += _sfHorizontalScrollBarAlignment.getBinSize();
    }
    if(FieldBits::NoField != (VerticalRangeModelFieldMask & whichField))
    {
        returnValue += _sfVerticalRangeModel.getBinSize();
    }
    if(FieldBits::NoField != (HorizontalRangeModelFieldMask & whichField))
    {
        returnValue += _sfHorizontalRangeModel.getBinSize();
    }

    return returnValue;
}

void ScrollPanelBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (ViewFieldMask & whichField))
    {
        _sfView.copyToBin(pMem);
    }
    if(FieldBits::NoField != (InternalVerticalScrollBarFieldMask & whichField))
    {
        _sfInternalVerticalScrollBar.copyToBin(pMem);
    }
    if(FieldBits::NoField != (InternalHorizontalScrollBarFieldMask & whichField))
    {
        _sfInternalHorizontalScrollBar.copyToBin(pMem);
    }
    if(FieldBits::NoField != (VerticalScrollBarDisplayPolicyFieldMask & whichField))
    {
        _sfVerticalScrollBarDisplayPolicy.copyToBin(pMem);
    }
    if(FieldBits::NoField != (HorizontalScrollBarDisplayPolicyFieldMask & whichField))
    {
        _sfHorizontalScrollBarDisplayPolicy.copyToBin(pMem);
    }
    if(FieldBits::NoField != (VerticalResizePolicyFieldMask & whichField))
    {
        _sfVerticalResizePolicy.copyToBin(pMem);
    }
    if(FieldBits::NoField != (HorizontalResizePolicyFieldMask & whichField))
    {
        _sfHorizontalResizePolicy.copyToBin(pMem);
    }
    if(FieldBits::NoField != (VerticalScrollBarAlignmentFieldMask & whichField))
    {
        _sfVerticalScrollBarAlignment.copyToBin(pMem);
    }
    if(FieldBits::NoField != (HorizontalScrollBarAlignmentFieldMask & whichField))
    {
        _sfHorizontalScrollBarAlignment.copyToBin(pMem);
    }
    if(FieldBits::NoField != (VerticalRangeModelFieldMask & whichField))
    {
        _sfVerticalRangeModel.copyToBin(pMem);
    }
    if(FieldBits::NoField != (HorizontalRangeModelFieldMask & whichField))
    {
        _sfHorizontalRangeModel.copyToBin(pMem);
    }
}

void ScrollPanelBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (ViewFieldMask & whichField))
    {
        _sfView.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (InternalVerticalScrollBarFieldMask & whichField))
    {
        _sfInternalVerticalScrollBar.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (InternalHorizontalScrollBarFieldMask & whichField))
    {
        _sfInternalHorizontalScrollBar.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (VerticalScrollBarDisplayPolicyFieldMask & whichField))
    {
        _sfVerticalScrollBarDisplayPolicy.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (HorizontalScrollBarDisplayPolicyFieldMask & whichField))
    {
        _sfHorizontalScrollBarDisplayPolicy.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (VerticalResizePolicyFieldMask & whichField))
    {
        _sfVerticalResizePolicy.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (HorizontalResizePolicyFieldMask & whichField))
    {
        _sfHorizontalResizePolicy.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (VerticalScrollBarAlignmentFieldMask & whichField))
    {
        _sfVerticalScrollBarAlignment.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (HorizontalScrollBarAlignmentFieldMask & whichField))
    {
        _sfHorizontalScrollBarAlignment.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (VerticalRangeModelFieldMask & whichField))
    {
        _sfVerticalRangeModel.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (HorizontalRangeModelFieldMask & whichField))
    {
        _sfHorizontalRangeModel.copyFromBin(pMem);
    }
}

//! create a new instance of the class
ScrollPanelTransitPtr ScrollPanelBase::createLocal(BitVector bFlags)
{
    ScrollPanelTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyLocal(bFlags);

        fc = dynamic_pointer_cast<ScrollPanel>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class, copy the container flags
ScrollPanelTransitPtr ScrollPanelBase::createDependent(BitVector bFlags)
{
    ScrollPanelTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyDependent(bFlags);

        fc = dynamic_pointer_cast<ScrollPanel>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class
ScrollPanelTransitPtr ScrollPanelBase::create(void)
{
    ScrollPanelTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopy();

        fc = dynamic_pointer_cast<ScrollPanel>(tmpPtr);
    }

    return fc;
}

ScrollPanel *ScrollPanelBase::createEmptyLocal(BitVector bFlags)
{
    ScrollPanel *returnValue;

    newPtr<ScrollPanel>(returnValue, bFlags);

    returnValue->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

//! create an empty new instance of the class, do not copy the prototype
ScrollPanel *ScrollPanelBase::createEmpty(void)
{
    ScrollPanel *returnValue;

    newPtr<ScrollPanel>(returnValue, Thread::getCurrentLocalFlags());

    returnValue->_pFieldFlags->_bNamespaceMask &=
        ~Thread::getCurrentLocalFlags();

    return returnValue;
}


FieldContainerTransitPtr ScrollPanelBase::shallowCopyLocal(
    BitVector bFlags) const
{
    ScrollPanel *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const ScrollPanel *>(this), bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

FieldContainerTransitPtr ScrollPanelBase::shallowCopyDependent(
    BitVector bFlags) const
{
    ScrollPanel *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const ScrollPanel *>(this), ~bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask = bFlags;

    return returnValue;
}

FieldContainerTransitPtr ScrollPanelBase::shallowCopy(void) const
{
    ScrollPanel *tmpPtr;

    newPtr(tmpPtr,
           dynamic_cast<const ScrollPanel *>(this),
           Thread::getCurrentLocalFlags());

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~Thread::getCurrentLocalFlags();

    FieldContainerTransitPtr returnValue(tmpPtr);

    return returnValue;
}




/*------------------------- constructors ----------------------------------*/

ScrollPanelBase::ScrollPanelBase(void) :
    Inherited(),
    _sfView                   (NULL),
    _sfInternalVerticalScrollBar(NULL),
    _sfInternalHorizontalScrollBar(NULL),
    _sfVerticalScrollBarDisplayPolicy(UInt32(ScrollPanel::SCROLLBAR_AS_NEEDED)),
    _sfHorizontalScrollBarDisplayPolicy(UInt32(ScrollPanel::SCROLLBAR_AS_NEEDED)),
    _sfVerticalResizePolicy   (UInt32(ScrollPanel::NO_RESIZE)),
    _sfHorizontalResizePolicy (UInt32(ScrollPanel::NO_RESIZE)),
    _sfVerticalScrollBarAlignment(UInt32(ScrollPanel::SCROLLBAR_ALIGN_RIGHT)),
    _sfHorizontalScrollBarAlignment(UInt32(ScrollPanel::SCROLLBAR_ALIGN_BOTTOM)),
    _sfVerticalRangeModel     (NULL),
    _sfHorizontalRangeModel   (NULL)
{
}

ScrollPanelBase::ScrollPanelBase(const ScrollPanelBase &source) :
    Inherited(source),
    _sfView                   (NULL),
    _sfInternalVerticalScrollBar(NULL),
    _sfInternalHorizontalScrollBar(NULL),
    _sfVerticalScrollBarDisplayPolicy(source._sfVerticalScrollBarDisplayPolicy),
    _sfHorizontalScrollBarDisplayPolicy(source._sfHorizontalScrollBarDisplayPolicy),
    _sfVerticalResizePolicy   (source._sfVerticalResizePolicy   ),
    _sfHorizontalResizePolicy (source._sfHorizontalResizePolicy ),
    _sfVerticalScrollBarAlignment(source._sfVerticalScrollBarAlignment),
    _sfHorizontalScrollBarAlignment(source._sfHorizontalScrollBarAlignment),
    _sfVerticalRangeModel     (NULL),
    _sfHorizontalRangeModel   (NULL)
{
}


/*-------------------------- destructors ----------------------------------*/

ScrollPanelBase::~ScrollPanelBase(void)
{
}

void ScrollPanelBase::onCreate(const ScrollPanel *source)
{
    Inherited::onCreate(source);

    if(source != NULL)
    {
        ScrollPanel *pThis = static_cast<ScrollPanel *>(this);

        pThis->setView(source->getView());

        pThis->setInternalVerticalScrollBar(source->getInternalVerticalScrollBar());

        pThis->setInternalHorizontalScrollBar(source->getInternalHorizontalScrollBar());

        pThis->setVerticalRangeModel(source->getVerticalRangeModel());

        pThis->setHorizontalRangeModel(source->getHorizontalRangeModel());
    }
}

GetFieldHandlePtr ScrollPanelBase::getHandleView            (void) const
{
    SFUnrecUIViewportPtr::GetHandlePtr returnValue(
        new  SFUnrecUIViewportPtr::GetHandle(
             &_sfView,
             this->getType().getFieldDesc(ViewFieldId),
             const_cast<ScrollPanelBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ScrollPanelBase::editHandleView           (void)
{
    SFUnrecUIViewportPtr::EditHandlePtr returnValue(
        new  SFUnrecUIViewportPtr::EditHandle(
             &_sfView,
             this->getType().getFieldDesc(ViewFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&ScrollPanel::setView,
                    static_cast<ScrollPanel *>(this), _1));

    editSField(ViewFieldMask);

    return returnValue;
}

GetFieldHandlePtr ScrollPanelBase::getHandleInternalVerticalScrollBar (void) const
{
    SFUnrecScrollBarPtr::GetHandlePtr returnValue(
        new  SFUnrecScrollBarPtr::GetHandle(
             &_sfInternalVerticalScrollBar,
             this->getType().getFieldDesc(InternalVerticalScrollBarFieldId),
             const_cast<ScrollPanelBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ScrollPanelBase::editHandleInternalVerticalScrollBar(void)
{
    SFUnrecScrollBarPtr::EditHandlePtr returnValue(
        new  SFUnrecScrollBarPtr::EditHandle(
             &_sfInternalVerticalScrollBar,
             this->getType().getFieldDesc(InternalVerticalScrollBarFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&ScrollPanel::setInternalVerticalScrollBar,
                    static_cast<ScrollPanel *>(this), _1));

    editSField(InternalVerticalScrollBarFieldMask);

    return returnValue;
}

GetFieldHandlePtr ScrollPanelBase::getHandleInternalHorizontalScrollBar (void) const
{
    SFUnrecScrollBarPtr::GetHandlePtr returnValue(
        new  SFUnrecScrollBarPtr::GetHandle(
             &_sfInternalHorizontalScrollBar,
             this->getType().getFieldDesc(InternalHorizontalScrollBarFieldId),
             const_cast<ScrollPanelBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ScrollPanelBase::editHandleInternalHorizontalScrollBar(void)
{
    SFUnrecScrollBarPtr::EditHandlePtr returnValue(
        new  SFUnrecScrollBarPtr::EditHandle(
             &_sfInternalHorizontalScrollBar,
             this->getType().getFieldDesc(InternalHorizontalScrollBarFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&ScrollPanel::setInternalHorizontalScrollBar,
                    static_cast<ScrollPanel *>(this), _1));

    editSField(InternalHorizontalScrollBarFieldMask);

    return returnValue;
}

GetFieldHandlePtr ScrollPanelBase::getHandleVerticalScrollBarDisplayPolicy (void) const
{
    SFUInt32::GetHandlePtr returnValue(
        new  SFUInt32::GetHandle(
             &_sfVerticalScrollBarDisplayPolicy,
             this->getType().getFieldDesc(VerticalScrollBarDisplayPolicyFieldId),
             const_cast<ScrollPanelBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ScrollPanelBase::editHandleVerticalScrollBarDisplayPolicy(void)
{
    SFUInt32::EditHandlePtr returnValue(
        new  SFUInt32::EditHandle(
             &_sfVerticalScrollBarDisplayPolicy,
             this->getType().getFieldDesc(VerticalScrollBarDisplayPolicyFieldId),
             this));


    editSField(VerticalScrollBarDisplayPolicyFieldMask);

    return returnValue;
}

GetFieldHandlePtr ScrollPanelBase::getHandleHorizontalScrollBarDisplayPolicy (void) const
{
    SFUInt32::GetHandlePtr returnValue(
        new  SFUInt32::GetHandle(
             &_sfHorizontalScrollBarDisplayPolicy,
             this->getType().getFieldDesc(HorizontalScrollBarDisplayPolicyFieldId),
             const_cast<ScrollPanelBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ScrollPanelBase::editHandleHorizontalScrollBarDisplayPolicy(void)
{
    SFUInt32::EditHandlePtr returnValue(
        new  SFUInt32::EditHandle(
             &_sfHorizontalScrollBarDisplayPolicy,
             this->getType().getFieldDesc(HorizontalScrollBarDisplayPolicyFieldId),
             this));


    editSField(HorizontalScrollBarDisplayPolicyFieldMask);

    return returnValue;
}

GetFieldHandlePtr ScrollPanelBase::getHandleVerticalResizePolicy (void) const
{
    SFUInt32::GetHandlePtr returnValue(
        new  SFUInt32::GetHandle(
             &_sfVerticalResizePolicy,
             this->getType().getFieldDesc(VerticalResizePolicyFieldId),
             const_cast<ScrollPanelBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ScrollPanelBase::editHandleVerticalResizePolicy(void)
{
    SFUInt32::EditHandlePtr returnValue(
        new  SFUInt32::EditHandle(
             &_sfVerticalResizePolicy,
             this->getType().getFieldDesc(VerticalResizePolicyFieldId),
             this));


    editSField(VerticalResizePolicyFieldMask);

    return returnValue;
}

GetFieldHandlePtr ScrollPanelBase::getHandleHorizontalResizePolicy (void) const
{
    SFUInt32::GetHandlePtr returnValue(
        new  SFUInt32::GetHandle(
             &_sfHorizontalResizePolicy,
             this->getType().getFieldDesc(HorizontalResizePolicyFieldId),
             const_cast<ScrollPanelBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ScrollPanelBase::editHandleHorizontalResizePolicy(void)
{
    SFUInt32::EditHandlePtr returnValue(
        new  SFUInt32::EditHandle(
             &_sfHorizontalResizePolicy,
             this->getType().getFieldDesc(HorizontalResizePolicyFieldId),
             this));


    editSField(HorizontalResizePolicyFieldMask);

    return returnValue;
}

GetFieldHandlePtr ScrollPanelBase::getHandleVerticalScrollBarAlignment (void) const
{
    SFUInt32::GetHandlePtr returnValue(
        new  SFUInt32::GetHandle(
             &_sfVerticalScrollBarAlignment,
             this->getType().getFieldDesc(VerticalScrollBarAlignmentFieldId),
             const_cast<ScrollPanelBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ScrollPanelBase::editHandleVerticalScrollBarAlignment(void)
{
    SFUInt32::EditHandlePtr returnValue(
        new  SFUInt32::EditHandle(
             &_sfVerticalScrollBarAlignment,
             this->getType().getFieldDesc(VerticalScrollBarAlignmentFieldId),
             this));


    editSField(VerticalScrollBarAlignmentFieldMask);

    return returnValue;
}

GetFieldHandlePtr ScrollPanelBase::getHandleHorizontalScrollBarAlignment (void) const
{
    SFUInt32::GetHandlePtr returnValue(
        new  SFUInt32::GetHandle(
             &_sfHorizontalScrollBarAlignment,
             this->getType().getFieldDesc(HorizontalScrollBarAlignmentFieldId),
             const_cast<ScrollPanelBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ScrollPanelBase::editHandleHorizontalScrollBarAlignment(void)
{
    SFUInt32::EditHandlePtr returnValue(
        new  SFUInt32::EditHandle(
             &_sfHorizontalScrollBarAlignment,
             this->getType().getFieldDesc(HorizontalScrollBarAlignmentFieldId),
             this));


    editSField(HorizontalScrollBarAlignmentFieldMask);

    return returnValue;
}

GetFieldHandlePtr ScrollPanelBase::getHandleVerticalRangeModel (void) const
{
    SFUnrecDefaultBoundedRangeModelPtr::GetHandlePtr returnValue(
        new  SFUnrecDefaultBoundedRangeModelPtr::GetHandle(
             &_sfVerticalRangeModel,
             this->getType().getFieldDesc(VerticalRangeModelFieldId),
             const_cast<ScrollPanelBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ScrollPanelBase::editHandleVerticalRangeModel(void)
{
    SFUnrecDefaultBoundedRangeModelPtr::EditHandlePtr returnValue(
        new  SFUnrecDefaultBoundedRangeModelPtr::EditHandle(
             &_sfVerticalRangeModel,
             this->getType().getFieldDesc(VerticalRangeModelFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&ScrollPanel::setVerticalRangeModel,
                    static_cast<ScrollPanel *>(this), _1));

    editSField(VerticalRangeModelFieldMask);

    return returnValue;
}

GetFieldHandlePtr ScrollPanelBase::getHandleHorizontalRangeModel (void) const
{
    SFUnrecDefaultBoundedRangeModelPtr::GetHandlePtr returnValue(
        new  SFUnrecDefaultBoundedRangeModelPtr::GetHandle(
             &_sfHorizontalRangeModel,
             this->getType().getFieldDesc(HorizontalRangeModelFieldId),
             const_cast<ScrollPanelBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ScrollPanelBase::editHandleHorizontalRangeModel(void)
{
    SFUnrecDefaultBoundedRangeModelPtr::EditHandlePtr returnValue(
        new  SFUnrecDefaultBoundedRangeModelPtr::EditHandle(
             &_sfHorizontalRangeModel,
             this->getType().getFieldDesc(HorizontalRangeModelFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&ScrollPanel::setHorizontalRangeModel,
                    static_cast<ScrollPanel *>(this), _1));

    editSField(HorizontalRangeModelFieldMask);

    return returnValue;
}


#ifdef OSG_MT_CPTR_ASPECT
void ScrollPanelBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    ScrollPanel *pThis = static_cast<ScrollPanel *>(this);

    pThis->execSync(static_cast<ScrollPanel *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif


#ifdef OSG_MT_CPTR_ASPECT
FieldContainer *ScrollPanelBase::createAspectCopy(
    const FieldContainer *pRefAspect) const
{
    ScrollPanel *returnValue;

    newAspectCopy(returnValue,
                  dynamic_cast<const ScrollPanel *>(pRefAspect),
                  dynamic_cast<const ScrollPanel *>(this));

    return returnValue;
}
#endif

void ScrollPanelBase::resolveLinks(void)
{
    Inherited::resolveLinks();

    static_cast<ScrollPanel *>(this)->setView(NULL);

    static_cast<ScrollPanel *>(this)->setInternalVerticalScrollBar(NULL);

    static_cast<ScrollPanel *>(this)->setInternalHorizontalScrollBar(NULL);

    static_cast<ScrollPanel *>(this)->setVerticalRangeModel(NULL);

    static_cast<ScrollPanel *>(this)->setHorizontalRangeModel(NULL);


}


OSG_END_NAMESPACE
