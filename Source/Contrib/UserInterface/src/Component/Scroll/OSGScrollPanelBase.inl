/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *   contact:  David Kabala (djkabala@gmail.com)                             *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class ScrollPanel!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

OSG_BEGIN_NAMESPACE


//! access the type of the class
inline
OSG::FieldContainerType &ScrollPanelBase::getClassType(void)
{
    return _type;
}

//! access the numerical type of the class
inline
OSG::UInt32 ScrollPanelBase::getClassTypeId(void)
{
    return _type.getId();
}

inline
OSG::UInt16 ScrollPanelBase::getClassGroupId(void)
{
    return _type.getGroupId();
}

/*------------------------------ get -----------------------------------*/


//! Get the value of the ScrollPanel::_sfView field.
inline
UIViewport * ScrollPanelBase::getView(void) const
{
    return _sfView.getValue();
}

//! Set the value of the ScrollPanel::_sfView field.
inline
void ScrollPanelBase::setView(UIViewport * const value)
{
    editSField(ViewFieldMask);

    _sfView.setValue(value);
}

//! Get the value of the ScrollPanel::_sfInternalVerticalScrollBar field.
inline
ScrollBar * ScrollPanelBase::getInternalVerticalScrollBar(void) const
{
    return _sfInternalVerticalScrollBar.getValue();
}

//! Set the value of the ScrollPanel::_sfInternalVerticalScrollBar field.
inline
void ScrollPanelBase::setInternalVerticalScrollBar(ScrollBar * const value)
{
    editSField(InternalVerticalScrollBarFieldMask);

    _sfInternalVerticalScrollBar.setValue(value);
}

//! Get the value of the ScrollPanel::_sfInternalHorizontalScrollBar field.
inline
ScrollBar * ScrollPanelBase::getInternalHorizontalScrollBar(void) const
{
    return _sfInternalHorizontalScrollBar.getValue();
}

//! Set the value of the ScrollPanel::_sfInternalHorizontalScrollBar field.
inline
void ScrollPanelBase::setInternalHorizontalScrollBar(ScrollBar * const value)
{
    editSField(InternalHorizontalScrollBarFieldMask);

    _sfInternalHorizontalScrollBar.setValue(value);
}
//! Get the value of the ScrollPanel::_sfVerticalScrollBarDisplayPolicy field.

inline
UInt32 &ScrollPanelBase::editVerticalScrollBarDisplayPolicy(void)
{
    editSField(VerticalScrollBarDisplayPolicyFieldMask);

    return _sfVerticalScrollBarDisplayPolicy.getValue();
}

//! Get the value of the ScrollPanel::_sfVerticalScrollBarDisplayPolicy field.
inline
      UInt32  ScrollPanelBase::getVerticalScrollBarDisplayPolicy(void) const
{
    return _sfVerticalScrollBarDisplayPolicy.getValue();
}

//! Set the value of the ScrollPanel::_sfVerticalScrollBarDisplayPolicy field.
inline
void ScrollPanelBase::setVerticalScrollBarDisplayPolicy(const UInt32 value)
{
    editSField(VerticalScrollBarDisplayPolicyFieldMask);

    _sfVerticalScrollBarDisplayPolicy.setValue(value);
}
//! Get the value of the ScrollPanel::_sfHorizontalScrollBarDisplayPolicy field.

inline
UInt32 &ScrollPanelBase::editHorizontalScrollBarDisplayPolicy(void)
{
    editSField(HorizontalScrollBarDisplayPolicyFieldMask);

    return _sfHorizontalScrollBarDisplayPolicy.getValue();
}

//! Get the value of the ScrollPanel::_sfHorizontalScrollBarDisplayPolicy field.
inline
      UInt32  ScrollPanelBase::getHorizontalScrollBarDisplayPolicy(void) const
{
    return _sfHorizontalScrollBarDisplayPolicy.getValue();
}

//! Set the value of the ScrollPanel::_sfHorizontalScrollBarDisplayPolicy field.
inline
void ScrollPanelBase::setHorizontalScrollBarDisplayPolicy(const UInt32 value)
{
    editSField(HorizontalScrollBarDisplayPolicyFieldMask);

    _sfHorizontalScrollBarDisplayPolicy.setValue(value);
}
//! Get the value of the ScrollPanel::_sfVerticalResizePolicy field.

inline
UInt32 &ScrollPanelBase::editVerticalResizePolicy(void)
{
    editSField(VerticalResizePolicyFieldMask);

    return _sfVerticalResizePolicy.getValue();
}

//! Get the value of the ScrollPanel::_sfVerticalResizePolicy field.
inline
      UInt32  ScrollPanelBase::getVerticalResizePolicy(void) const
{
    return _sfVerticalResizePolicy.getValue();
}

//! Set the value of the ScrollPanel::_sfVerticalResizePolicy field.
inline
void ScrollPanelBase::setVerticalResizePolicy(const UInt32 value)
{
    editSField(VerticalResizePolicyFieldMask);

    _sfVerticalResizePolicy.setValue(value);
}
//! Get the value of the ScrollPanel::_sfHorizontalResizePolicy field.

inline
UInt32 &ScrollPanelBase::editHorizontalResizePolicy(void)
{
    editSField(HorizontalResizePolicyFieldMask);

    return _sfHorizontalResizePolicy.getValue();
}

//! Get the value of the ScrollPanel::_sfHorizontalResizePolicy field.
inline
      UInt32  ScrollPanelBase::getHorizontalResizePolicy(void) const
{
    return _sfHorizontalResizePolicy.getValue();
}

//! Set the value of the ScrollPanel::_sfHorizontalResizePolicy field.
inline
void ScrollPanelBase::setHorizontalResizePolicy(const UInt32 value)
{
    editSField(HorizontalResizePolicyFieldMask);

    _sfHorizontalResizePolicy.setValue(value);
}
//! Get the value of the ScrollPanel::_sfVerticalScrollBarAlignment field.

inline
UInt32 &ScrollPanelBase::editVerticalScrollBarAlignment(void)
{
    editSField(VerticalScrollBarAlignmentFieldMask);

    return _sfVerticalScrollBarAlignment.getValue();
}

//! Get the value of the ScrollPanel::_sfVerticalScrollBarAlignment field.
inline
      UInt32  ScrollPanelBase::getVerticalScrollBarAlignment(void) const
{
    return _sfVerticalScrollBarAlignment.getValue();
}

//! Set the value of the ScrollPanel::_sfVerticalScrollBarAlignment field.
inline
void ScrollPanelBase::setVerticalScrollBarAlignment(const UInt32 value)
{
    editSField(VerticalScrollBarAlignmentFieldMask);

    _sfVerticalScrollBarAlignment.setValue(value);
}
//! Get the value of the ScrollPanel::_sfHorizontalScrollBarAlignment field.

inline
UInt32 &ScrollPanelBase::editHorizontalScrollBarAlignment(void)
{
    editSField(HorizontalScrollBarAlignmentFieldMask);

    return _sfHorizontalScrollBarAlignment.getValue();
}

//! Get the value of the ScrollPanel::_sfHorizontalScrollBarAlignment field.
inline
      UInt32  ScrollPanelBase::getHorizontalScrollBarAlignment(void) const
{
    return _sfHorizontalScrollBarAlignment.getValue();
}

//! Set the value of the ScrollPanel::_sfHorizontalScrollBarAlignment field.
inline
void ScrollPanelBase::setHorizontalScrollBarAlignment(const UInt32 value)
{
    editSField(HorizontalScrollBarAlignmentFieldMask);

    _sfHorizontalScrollBarAlignment.setValue(value);
}

//! Get the value of the ScrollPanel::_sfVerticalRangeModel field.
inline
DefaultBoundedRangeModel * ScrollPanelBase::getVerticalRangeModel(void) const
{
    return _sfVerticalRangeModel.getValue();
}

//! Set the value of the ScrollPanel::_sfVerticalRangeModel field.
inline
void ScrollPanelBase::setVerticalRangeModel(DefaultBoundedRangeModel * const value)
{
    editSField(VerticalRangeModelFieldMask);

    _sfVerticalRangeModel.setValue(value);
}

//! Get the value of the ScrollPanel::_sfHorizontalRangeModel field.
inline
DefaultBoundedRangeModel * ScrollPanelBase::getHorizontalRangeModel(void) const
{
    return _sfHorizontalRangeModel.getValue();
}

//! Set the value of the ScrollPanel::_sfHorizontalRangeModel field.
inline
void ScrollPanelBase::setHorizontalRangeModel(DefaultBoundedRangeModel * const value)
{
    editSField(HorizontalRangeModelFieldMask);

    _sfHorizontalRangeModel.setValue(value);
}


#ifdef OSG_MT_CPTR_ASPECT
inline
void ScrollPanelBase::execSync (      ScrollPanelBase *pFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    Inherited::execSync(pFrom, whichField, oOffsets, syncMode, uiSyncInfo);

    if(FieldBits::NoField != (ViewFieldMask & whichField))
        _sfView.syncWith(pFrom->_sfView);

    if(FieldBits::NoField != (InternalVerticalScrollBarFieldMask & whichField))
        _sfInternalVerticalScrollBar.syncWith(pFrom->_sfInternalVerticalScrollBar);

    if(FieldBits::NoField != (InternalHorizontalScrollBarFieldMask & whichField))
        _sfInternalHorizontalScrollBar.syncWith(pFrom->_sfInternalHorizontalScrollBar);

    if(FieldBits::NoField != (VerticalScrollBarDisplayPolicyFieldMask & whichField))
        _sfVerticalScrollBarDisplayPolicy.syncWith(pFrom->_sfVerticalScrollBarDisplayPolicy);

    if(FieldBits::NoField != (HorizontalScrollBarDisplayPolicyFieldMask & whichField))
        _sfHorizontalScrollBarDisplayPolicy.syncWith(pFrom->_sfHorizontalScrollBarDisplayPolicy);

    if(FieldBits::NoField != (VerticalResizePolicyFieldMask & whichField))
        _sfVerticalResizePolicy.syncWith(pFrom->_sfVerticalResizePolicy);

    if(FieldBits::NoField != (HorizontalResizePolicyFieldMask & whichField))
        _sfHorizontalResizePolicy.syncWith(pFrom->_sfHorizontalResizePolicy);

    if(FieldBits::NoField != (VerticalScrollBarAlignmentFieldMask & whichField))
        _sfVerticalScrollBarAlignment.syncWith(pFrom->_sfVerticalScrollBarAlignment);

    if(FieldBits::NoField != (HorizontalScrollBarAlignmentFieldMask & whichField))
        _sfHorizontalScrollBarAlignment.syncWith(pFrom->_sfHorizontalScrollBarAlignment);

    if(FieldBits::NoField != (VerticalRangeModelFieldMask & whichField))
        _sfVerticalRangeModel.syncWith(pFrom->_sfVerticalRangeModel);

    if(FieldBits::NoField != (HorizontalRangeModelFieldMask & whichField))
        _sfHorizontalRangeModel.syncWith(pFrom->_sfHorizontalRangeModel);
}
#endif


inline
const Char8 *ScrollPanelBase::getClassname(void)
{
    return "ScrollPanel";
}
OSG_GEN_CONTAINERPTR(ScrollPanel);

OSG_END_NAMESPACE

