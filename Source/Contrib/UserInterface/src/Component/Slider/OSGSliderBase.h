/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact:  David Kabala (djkabala@gmail.com)                             *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class Slider
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#ifndef _OSGSLIDERBASE_H_
#define _OSGSLIDERBASE_H_
#ifdef __sgi
#pragma once
#endif


#include "OSGConfig.h"
#include "OSGContribUserInterfaceDef.h"

//#include "OSGBaseTypes.h"

#include "OSGComponentContainer.h" // Parent

#include "OSGButtonFields.h"            // KnobButton type
#include "OSGSysFields.h"               // Orientation type
#include "OSGVecFields.h"               // MajorTickPositions type
#include "OSGFieldContainerMapFields.h" // LabelMap type
#include "OSGLabelFields.h"             // LabelPrototype type
#include "OSGUIDrawObjectCanvasFields.h" // TrackDrawObject type
#include "OSGUIDrawObjectFields.h"      // MajorTickDrawObjects type
#include "OSGBoundedRangeModelFields.h" // RangeModel type

#include "OSGSliderFields.h"

OSG_BEGIN_NAMESPACE

class Slider;

//! \brief Slider Base Class.

class OSG_CONTRIBUSERINTERFACE_DLLMAPPING SliderBase : public ComponentContainer
{
  public:

    typedef ComponentContainer Inherited;
    typedef ComponentContainer ParentContainer;

    typedef Inherited::TypeObject TypeObject;
    typedef TypeObject::InitPhase InitPhase;

    OSG_GEN_INTERNALPTR(Slider);

    /*==========================  PUBLIC  =================================*/

  public:

    enum
    {
        KnobButtonFieldId = Inherited::NextFieldId,
        OrientationFieldId = KnobButtonFieldId + 1,
        MajorTickSpacingFieldId = OrientationFieldId + 1,
        MajorTickPositionsFieldId = MajorTickSpacingFieldId + 1,
        MinorTickSpacingFieldId = MajorTickPositionsFieldId + 1,
        MinorTickPositionsFieldId = MinorTickSpacingFieldId + 1,
        SnapToTicksFieldId = MinorTickPositionsFieldId + 1,
        DrawMajorTicksFieldId = SnapToTicksFieldId + 1,
        DrawTrackFieldId = DrawMajorTicksFieldId + 1,
        DrawMinorTicksFieldId = DrawTrackFieldId + 1,
        DrawLabelsFieldId = DrawMinorTicksFieldId + 1,
        InvertedFieldId = DrawLabelsFieldId + 1,
        LabelMapFieldId = InvertedFieldId + 1,
        LabelPrototypeFieldId = LabelMapFieldId + 1,
        TrackDrawObjectFieldId = LabelPrototypeFieldId + 1,
        MinTrackDrawObjectFieldId = TrackDrawObjectFieldId + 1,
        MaxTrackDrawObjectFieldId = MinTrackDrawObjectFieldId + 1,
        MajorTickDrawObjectsFieldId = MaxTrackDrawObjectFieldId + 1,
        MinorTickDrawObjectsFieldId = MajorTickDrawObjectsFieldId + 1,
        TrackInsetFieldId = MinorTickDrawObjectsFieldId + 1,
        TrackToTickOffsetFieldId = TrackInsetFieldId + 1,
        TrackToLabelOffsetFieldId = TrackToTickOffsetFieldId + 1,
        AlignmentFieldId = TrackToLabelOffsetFieldId + 1,
        TicksOnRightBottomFieldId = AlignmentFieldId + 1,
        RangeModelFieldId = TicksOnRightBottomFieldId + 1,
        NextFieldId = RangeModelFieldId + 1
    };

    static const OSG::BitVector KnobButtonFieldMask =
        (TypeTraits<BitVector>::One << KnobButtonFieldId);
    static const OSG::BitVector OrientationFieldMask =
        (TypeTraits<BitVector>::One << OrientationFieldId);
    static const OSG::BitVector MajorTickSpacingFieldMask =
        (TypeTraits<BitVector>::One << MajorTickSpacingFieldId);
    static const OSG::BitVector MajorTickPositionsFieldMask =
        (TypeTraits<BitVector>::One << MajorTickPositionsFieldId);
    static const OSG::BitVector MinorTickSpacingFieldMask =
        (TypeTraits<BitVector>::One << MinorTickSpacingFieldId);
    static const OSG::BitVector MinorTickPositionsFieldMask =
        (TypeTraits<BitVector>::One << MinorTickPositionsFieldId);
    static const OSG::BitVector SnapToTicksFieldMask =
        (TypeTraits<BitVector>::One << SnapToTicksFieldId);
    static const OSG::BitVector DrawMajorTicksFieldMask =
        (TypeTraits<BitVector>::One << DrawMajorTicksFieldId);
    static const OSG::BitVector DrawTrackFieldMask =
        (TypeTraits<BitVector>::One << DrawTrackFieldId);
    static const OSG::BitVector DrawMinorTicksFieldMask =
        (TypeTraits<BitVector>::One << DrawMinorTicksFieldId);
    static const OSG::BitVector DrawLabelsFieldMask =
        (TypeTraits<BitVector>::One << DrawLabelsFieldId);
    static const OSG::BitVector InvertedFieldMask =
        (TypeTraits<BitVector>::One << InvertedFieldId);
    static const OSG::BitVector LabelMapFieldMask =
        (TypeTraits<BitVector>::One << LabelMapFieldId);
    static const OSG::BitVector LabelPrototypeFieldMask =
        (TypeTraits<BitVector>::One << LabelPrototypeFieldId);
    static const OSG::BitVector TrackDrawObjectFieldMask =
        (TypeTraits<BitVector>::One << TrackDrawObjectFieldId);
    static const OSG::BitVector MinTrackDrawObjectFieldMask =
        (TypeTraits<BitVector>::One << MinTrackDrawObjectFieldId);
    static const OSG::BitVector MaxTrackDrawObjectFieldMask =
        (TypeTraits<BitVector>::One << MaxTrackDrawObjectFieldId);
    static const OSG::BitVector MajorTickDrawObjectsFieldMask =
        (TypeTraits<BitVector>::One << MajorTickDrawObjectsFieldId);
    static const OSG::BitVector MinorTickDrawObjectsFieldMask =
        (TypeTraits<BitVector>::One << MinorTickDrawObjectsFieldId);
    static const OSG::BitVector TrackInsetFieldMask =
        (TypeTraits<BitVector>::One << TrackInsetFieldId);
    static const OSG::BitVector TrackToTickOffsetFieldMask =
        (TypeTraits<BitVector>::One << TrackToTickOffsetFieldId);
    static const OSG::BitVector TrackToLabelOffsetFieldMask =
        (TypeTraits<BitVector>::One << TrackToLabelOffsetFieldId);
    static const OSG::BitVector AlignmentFieldMask =
        (TypeTraits<BitVector>::One << AlignmentFieldId);
    static const OSG::BitVector TicksOnRightBottomFieldMask =
        (TypeTraits<BitVector>::One << TicksOnRightBottomFieldId);
    static const OSG::BitVector RangeModelFieldMask =
        (TypeTraits<BitVector>::One << RangeModelFieldId);
    static const OSG::BitVector NextFieldMask =
        (TypeTraits<BitVector>::One << NextFieldId);
        
    typedef SFUnrecButtonPtr  SFKnobButtonType;
    typedef SFUInt32          SFOrientationType;
    typedef SFUInt32          SFMajorTickSpacingType;
    typedef MFPnt2f           MFMajorTickPositionsType;
    typedef SFUInt32          SFMinorTickSpacingType;
    typedef MFPnt2f           MFMinorTickPositionsType;
    typedef SFBool            SFSnapToTicksType;
    typedef SFBool            SFDrawMajorTicksType;
    typedef SFBool            SFDrawTrackType;
    typedef SFBool            SFDrawMinorTicksType;
    typedef SFBool            SFDrawLabelsType;
    typedef SFBool            SFInvertedType;
    typedef SFFieldContainerMap SFLabelMapType;
    typedef SFUnrecLabelPtr   SFLabelPrototypeType;
    typedef SFUnrecUIDrawObjectCanvasPtr SFTrackDrawObjectType;
    typedef SFUnrecUIDrawObjectCanvasPtr SFMinTrackDrawObjectType;
    typedef SFUnrecUIDrawObjectCanvasPtr SFMaxTrackDrawObjectType;
    typedef MFUnrecUIDrawObjectPtr MFMajorTickDrawObjectsType;
    typedef MFUnrecUIDrawObjectPtr MFMinorTickDrawObjectsType;
    typedef SFInt32           SFTrackInsetType;
    typedef SFInt32           SFTrackToTickOffsetType;
    typedef SFInt32           SFTrackToLabelOffsetType;
    typedef SFReal32          SFAlignmentType;
    typedef SFBool            SFTicksOnRightBottomType;
    typedef SFUnrecBoundedRangeModelPtr SFRangeModelType;

    /*---------------------------------------------------------------------*/
    /*! \name                    Class Get                                 */
    /*! \{                                                                 */

    static FieldContainerType &getClassType   (void);
    static UInt32              getClassTypeId (void);
    static UInt16              getClassGroupId(void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                FieldContainer Get                            */
    /*! \{                                                                 */

    virtual       FieldContainerType &getType         (void);
    virtual const FieldContainerType &getType         (void) const;

    virtual       UInt32              getContainerSize(void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Get                                 */
    /*! \{                                                                 */

            const SFUnrecButtonPtr    *getSFKnobButton     (void) const;
                  SFUnrecButtonPtr    *editSFKnobButton     (void);

                  SFUInt32            *editSFOrientation    (void);
            const SFUInt32            *getSFOrientation     (void) const;

                  SFUInt32            *editSFMajorTickSpacing(void);
            const SFUInt32            *getSFMajorTickSpacing (void) const;

                  SFUInt32            *editSFMinorTickSpacing(void);
            const SFUInt32            *getSFMinorTickSpacing (void) const;

                  SFBool              *editSFSnapToTicks    (void);
            const SFBool              *getSFSnapToTicks     (void) const;

                  SFBool              *editSFDrawMajorTicks (void);
            const SFBool              *getSFDrawMajorTicks  (void) const;

                  SFBool              *editSFDrawTrack      (void);
            const SFBool              *getSFDrawTrack       (void) const;

                  SFBool              *editSFDrawMinorTicks (void);
            const SFBool              *getSFDrawMinorTicks  (void) const;

                  SFBool              *editSFDrawLabels     (void);
            const SFBool              *getSFDrawLabels      (void) const;

                  SFBool              *editSFInverted       (void);
            const SFBool              *getSFInverted        (void) const;

                  SFFieldContainerMap *editSFLabelMap       (void);
            const SFFieldContainerMap *getSFLabelMap        (void) const;
            const SFUnrecLabelPtr     *getSFLabelPrototype (void) const;
                  SFUnrecLabelPtr     *editSFLabelPrototype (void);
            const SFUnrecUIDrawObjectCanvasPtr *getSFTrackDrawObject(void) const;
                  SFUnrecUIDrawObjectCanvasPtr *editSFTrackDrawObject(void);
            const SFUnrecUIDrawObjectCanvasPtr *getSFMinTrackDrawObject(void) const;
                  SFUnrecUIDrawObjectCanvasPtr *editSFMinTrackDrawObject(void);
            const SFUnrecUIDrawObjectCanvasPtr *getSFMaxTrackDrawObject(void) const;
                  SFUnrecUIDrawObjectCanvasPtr *editSFMaxTrackDrawObject(void);
            const MFUnrecUIDrawObjectPtr *getMFMajorTickDrawObjects(void) const;
                  MFUnrecUIDrawObjectPtr *editMFMajorTickDrawObjects(void);
            const MFUnrecUIDrawObjectPtr *getMFMinorTickDrawObjects(void) const;
                  MFUnrecUIDrawObjectPtr *editMFMinorTickDrawObjects(void);

                  SFInt32             *editSFTrackInset     (void);
            const SFInt32             *getSFTrackInset      (void) const;

                  SFInt32             *editSFTrackToTickOffset(void);
            const SFInt32             *getSFTrackToTickOffset (void) const;

                  SFInt32             *editSFTrackToLabelOffset(void);
            const SFInt32             *getSFTrackToLabelOffset (void) const;

                  SFReal32            *editSFAlignment      (void);
            const SFReal32            *getSFAlignment       (void) const;

                  SFBool              *editSFTicksOnRightBottom(void);
            const SFBool              *getSFTicksOnRightBottom (void) const;
            const SFUnrecBoundedRangeModelPtr *getSFRangeModel     (void) const;
                  SFUnrecBoundedRangeModelPtr *editSFRangeModel     (void);


                  Button * getKnobButton     (void) const;

                  UInt32              &editOrientation    (void);
                  UInt32               getOrientation     (void) const;

                  UInt32              &editMajorTickSpacing(void);
                  UInt32               getMajorTickSpacing (void) const;

                  UInt32              &editMinorTickSpacing(void);
                  UInt32               getMinorTickSpacing (void) const;

                  bool                &editSnapToTicks    (void);
                  bool                 getSnapToTicks     (void) const;

                  bool                &editDrawMajorTicks (void);
                  bool                 getDrawMajorTicks  (void) const;

                  bool                &editDrawTrack      (void);
                  bool                 getDrawTrack       (void) const;

                  bool                &editDrawMinorTicks (void);
                  bool                 getDrawMinorTicks  (void) const;

                  bool                &editDrawLabels     (void);
                  bool                 getDrawLabels      (void) const;

                  bool                &editInverted       (void);
                  bool                 getInverted        (void) const;

                  FieldContainerMap   &editLabelMap       (void);
            const FieldContainerMap   &getLabelMap        (void) const;

                  Label * getLabelPrototype (void) const;

                  UIDrawObjectCanvas * getTrackDrawObject(void) const;

                  UIDrawObjectCanvas * getMinTrackDrawObject(void) const;

                  UIDrawObjectCanvas * getMaxTrackDrawObject(void) const;

                  UIDrawObject * getMajorTickDrawObjects(const UInt32 index) const;

                  UIDrawObject * getMinorTickDrawObjects(const UInt32 index) const;

                  Int32               &editTrackInset     (void);
                  Int32                getTrackInset      (void) const;

                  Int32               &editTrackToTickOffset(void);
                  Int32                getTrackToTickOffset (void) const;

                  Int32               &editTrackToLabelOffset(void);
                  Int32                getTrackToLabelOffset (void) const;

                  Real32              &editAlignment      (void);
                  Real32               getAlignment       (void) const;

                  bool                &editTicksOnRightBottom(void);
                  bool                 getTicksOnRightBottom (void) const;

                  BoundedRangeModel * getRangeModel     (void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Set                                 */
    /*! \{                                                                 */

            void setKnobButton     (Button * const value);
            void setOrientation    (const UInt32 value);
            void setMajorTickSpacing(const UInt32 value);
            void setMinorTickSpacing(const UInt32 value);
            void setSnapToTicks    (const bool value);
            void setDrawMajorTicks (const bool value);
            void setDrawTrack      (const bool value);
            void setDrawMinorTicks (const bool value);
            void setDrawLabels     (const bool value);
            void setInverted       (const bool value);
            void setLabelMap       (const FieldContainerMap &value);
            void setLabelPrototype (Label * const value);
            void setTrackDrawObject(UIDrawObjectCanvas * const value);
            void setMinTrackDrawObject(UIDrawObjectCanvas * const value);
            void setMaxTrackDrawObject(UIDrawObjectCanvas * const value);
            void setTrackInset     (const Int32 value);
            void setTrackToTickOffset(const Int32 value);
            void setTrackToLabelOffset(const Int32 value);
            void setAlignment      (const Real32 value);
            void setTicksOnRightBottom(const bool value);
            void setRangeModel     (BoundedRangeModel * const value);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                Ptr Field Set                                 */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                Ptr MField Set                                */
    /*! \{                                                                 */

    void pushToMajorTickDrawObjects           (UIDrawObject * const value   );
    void assignMajorTickDrawObjects          (const MFUnrecUIDrawObjectPtr &value);
    void removeFromMajorTickDrawObjects (UInt32               uiIndex );
    void removeObjFromMajorTickDrawObjects(UIDrawObject * const value   );
    void clearMajorTickDrawObjects            (void                         );

    void pushToMinorTickDrawObjects           (UIDrawObject * const value   );
    void assignMinorTickDrawObjects          (const MFUnrecUIDrawObjectPtr &value);
    void removeFromMinorTickDrawObjects (UInt32               uiIndex );
    void removeObjFromMinorTickDrawObjects(UIDrawObject * const value   );
    void clearMinorTickDrawObjects            (void                         );

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Binary Access                              */
    /*! \{                                                                 */

    virtual UInt32 getBinSize (ConstFieldMaskArg  whichField);
    virtual void   copyToBin  (BinaryDataHandler &pMem,
                               ConstFieldMaskArg  whichField);
    virtual void   copyFromBin(BinaryDataHandler &pMem,
                               ConstFieldMaskArg  whichField);


    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Construction                               */
    /*! \{                                                                 */

    static  SliderTransitPtr  create          (void);
    static  Slider           *createEmpty     (void);

    static  SliderTransitPtr  createLocal     (
                                               BitVector bFlags = FCLocal::All);

    static  Slider            *createEmptyLocal(
                                              BitVector bFlags = FCLocal::All);

    static  SliderTransitPtr  createDependent  (BitVector bFlags);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Copy                                   */
    /*! \{                                                                 */

    virtual FieldContainerTransitPtr shallowCopy     (void) const;
    virtual FieldContainerTransitPtr shallowCopyLocal(
                                       BitVector bFlags = FCLocal::All) const;
    virtual FieldContainerTransitPtr shallowCopyDependent(
                                                      BitVector bFlags) const;

    /*! \}                                                                 */
    /*=========================  PROTECTED  ===============================*/

  protected:

    static TypeObject _type;

    static       void   classDescInserter(TypeObject &oType);
    static const Char8 *getClassname     (void             );

    /*---------------------------------------------------------------------*/
    /*! \name                      Fields                                  */
    /*! \{                                                                 */

    SFUnrecButtonPtr  _sfKnobButton;
    SFUInt32          _sfOrientation;
    SFUInt32          _sfMajorTickSpacing;
    MFPnt2f           _mfMajorTickPositions;
    SFUInt32          _sfMinorTickSpacing;
    MFPnt2f           _mfMinorTickPositions;
    SFBool            _sfSnapToTicks;
    SFBool            _sfDrawMajorTicks;
    SFBool            _sfDrawTrack;
    SFBool            _sfDrawMinorTicks;
    SFBool            _sfDrawLabels;
    SFBool            _sfInverted;
    SFFieldContainerMap _sfLabelMap;
    SFUnrecLabelPtr   _sfLabelPrototype;
    SFUnrecUIDrawObjectCanvasPtr _sfTrackDrawObject;
    SFUnrecUIDrawObjectCanvasPtr _sfMinTrackDrawObject;
    SFUnrecUIDrawObjectCanvasPtr _sfMaxTrackDrawObject;
    MFUnrecUIDrawObjectPtr _mfMajorTickDrawObjects;
    MFUnrecUIDrawObjectPtr _mfMinorTickDrawObjects;
    SFInt32           _sfTrackInset;
    SFInt32           _sfTrackToTickOffset;
    SFInt32           _sfTrackToLabelOffset;
    SFReal32          _sfAlignment;
    SFBool            _sfTicksOnRightBottom;
    SFUnrecBoundedRangeModelPtr _sfRangeModel;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Constructors                               */
    /*! \{                                                                 */

    SliderBase(void);
    SliderBase(const SliderBase &source);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Destructors                                */
    /*! \{                                                                 */

    virtual ~SliderBase(void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                     onCreate                                */
    /*! \{                                                                 */

    void onCreate(const Slider *source = NULL);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Generic Field Access                      */
    /*! \{                                                                 */

    GetFieldHandlePtr  getHandleKnobButton      (void) const;
    EditFieldHandlePtr editHandleKnobButton     (void);
    GetFieldHandlePtr  getHandleOrientation     (void) const;
    EditFieldHandlePtr editHandleOrientation    (void);
    GetFieldHandlePtr  getHandleMajorTickSpacing (void) const;
    EditFieldHandlePtr editHandleMajorTickSpacing(void);
    GetFieldHandlePtr  getHandleMajorTickPositions (void) const;
    EditFieldHandlePtr editHandleMajorTickPositions(void);
    GetFieldHandlePtr  getHandleMinorTickSpacing (void) const;
    EditFieldHandlePtr editHandleMinorTickSpacing(void);
    GetFieldHandlePtr  getHandleMinorTickPositions (void) const;
    EditFieldHandlePtr editHandleMinorTickPositions(void);
    GetFieldHandlePtr  getHandleSnapToTicks     (void) const;
    EditFieldHandlePtr editHandleSnapToTicks    (void);
    GetFieldHandlePtr  getHandleDrawMajorTicks  (void) const;
    EditFieldHandlePtr editHandleDrawMajorTicks (void);
    GetFieldHandlePtr  getHandleDrawTrack       (void) const;
    EditFieldHandlePtr editHandleDrawTrack      (void);
    GetFieldHandlePtr  getHandleDrawMinorTicks  (void) const;
    EditFieldHandlePtr editHandleDrawMinorTicks (void);
    GetFieldHandlePtr  getHandleDrawLabels      (void) const;
    EditFieldHandlePtr editHandleDrawLabels     (void);
    GetFieldHandlePtr  getHandleInverted        (void) const;
    EditFieldHandlePtr editHandleInverted       (void);
    GetFieldHandlePtr  getHandleLabelMap        (void) const;
    EditFieldHandlePtr editHandleLabelMap       (void);
    GetFieldHandlePtr  getHandleLabelPrototype  (void) const;
    EditFieldHandlePtr editHandleLabelPrototype (void);
    GetFieldHandlePtr  getHandleTrackDrawObject (void) const;
    EditFieldHandlePtr editHandleTrackDrawObject(void);
    GetFieldHandlePtr  getHandleMinTrackDrawObject (void) const;
    EditFieldHandlePtr editHandleMinTrackDrawObject(void);
    GetFieldHandlePtr  getHandleMaxTrackDrawObject (void) const;
    EditFieldHandlePtr editHandleMaxTrackDrawObject(void);
    GetFieldHandlePtr  getHandleMajorTickDrawObjects (void) const;
    EditFieldHandlePtr editHandleMajorTickDrawObjects(void);
    GetFieldHandlePtr  getHandleMinorTickDrawObjects (void) const;
    EditFieldHandlePtr editHandleMinorTickDrawObjects(void);
    GetFieldHandlePtr  getHandleTrackInset      (void) const;
    EditFieldHandlePtr editHandleTrackInset     (void);
    GetFieldHandlePtr  getHandleTrackToTickOffset (void) const;
    EditFieldHandlePtr editHandleTrackToTickOffset(void);
    GetFieldHandlePtr  getHandleTrackToLabelOffset (void) const;
    EditFieldHandlePtr editHandleTrackToLabelOffset(void);
    GetFieldHandlePtr  getHandleAlignment       (void) const;
    EditFieldHandlePtr editHandleAlignment      (void);
    GetFieldHandlePtr  getHandleTicksOnRightBottom (void) const;
    EditFieldHandlePtr editHandleTicksOnRightBottom(void);
    GetFieldHandlePtr  getHandleRangeModel      (void) const;
    EditFieldHandlePtr editHandleRangeModel     (void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Get                                 */
    /*! \{                                                                 */


                  MFPnt2f             *editMFMajorTickPositions(void);
            const MFPnt2f             *getMFMajorTickPositions (void) const;

                  MFPnt2f             *editMFMinorTickPositions(void);
            const MFPnt2f             *getMFMinorTickPositions (void) const;


                  Pnt2f               &editMajorTickPositions(const UInt32 index);
            const Pnt2f               &getMajorTickPositions (const UInt32 index) const;

                  Pnt2f               &editMinorTickPositions(const UInt32 index);
            const Pnt2f               &getMinorTickPositions (const UInt32 index) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Set                                 */
    /*! \{                                                                 */


    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                Ptr MField Set                                */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

#ifdef OSG_MT_CPTR_ASPECT
    virtual void execSyncV(      FieldContainer    &oFrom,
                                 ConstFieldMaskArg  whichField,
                                 AspectOffsetStore &oOffsets,
                                 ConstFieldMaskArg  syncMode  ,
                           const UInt32             uiSyncInfo);

            void execSync (      SliderBase *pFrom,
                                 ConstFieldMaskArg  whichField,
                                 AspectOffsetStore &oOffsets,
                                 ConstFieldMaskArg  syncMode  ,
                           const UInt32             uiSyncInfo);
#endif

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Edit                                   */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                     Aspect Create                            */
    /*! \{                                                                 */

#ifdef OSG_MT_CPTR_ASPECT
    virtual FieldContainer *createAspectCopy(
                                    const FieldContainer *pRefAspect) const;
#endif

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Edit                                   */
    /*! \{                                                                 */
    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

    virtual void resolveLinks(void);

    /*! \}                                                                 */
    /*==========================  PRIVATE  ================================*/

  private:
    /*---------------------------------------------------------------------*/

    // prohibit default functions (move to 'public' if you need one)
    void operator =(const SliderBase &source);
};

typedef SliderBase *SliderBaseP;

OSG_END_NAMESPACE

#endif /* _OSGSLIDERBASE_H_ */
