/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *   contact:  David Kabala (djkabala@gmail.com)                             *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class Slider!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

OSG_BEGIN_NAMESPACE


//! access the type of the class
inline
OSG::FieldContainerType &SliderBase::getClassType(void)
{
    return _type;
}

//! access the numerical type of the class
inline
OSG::UInt32 SliderBase::getClassTypeId(void)
{
    return _type.getId();
}

inline
OSG::UInt16 SliderBase::getClassGroupId(void)
{
    return _type.getGroupId();
}

/*------------------------------ get -----------------------------------*/


//! Get the value of the Slider::_sfKnobButton field.
inline
Button * SliderBase::getKnobButton(void) const
{
    return _sfKnobButton.getValue();
}

//! Set the value of the Slider::_sfKnobButton field.
inline
void SliderBase::setKnobButton(Button * const value)
{
    editSField(KnobButtonFieldMask);

    _sfKnobButton.setValue(value);
}
//! Get the value of the Slider::_sfOrientation field.

inline
UInt32 &SliderBase::editOrientation(void)
{
    editSField(OrientationFieldMask);

    return _sfOrientation.getValue();
}

//! Get the value of the Slider::_sfOrientation field.
inline
      UInt32  SliderBase::getOrientation(void) const
{
    return _sfOrientation.getValue();
}

//! Set the value of the Slider::_sfOrientation field.
inline
void SliderBase::setOrientation(const UInt32 value)
{
    editSField(OrientationFieldMask);

    _sfOrientation.setValue(value);
}
//! Get the value of the Slider::_sfMajorTickSpacing field.

inline
UInt32 &SliderBase::editMajorTickSpacing(void)
{
    editSField(MajorTickSpacingFieldMask);

    return _sfMajorTickSpacing.getValue();
}

//! Get the value of the Slider::_sfMajorTickSpacing field.
inline
      UInt32  SliderBase::getMajorTickSpacing(void) const
{
    return _sfMajorTickSpacing.getValue();
}

//! Set the value of the Slider::_sfMajorTickSpacing field.
inline
void SliderBase::setMajorTickSpacing(const UInt32 value)
{
    editSField(MajorTickSpacingFieldMask);

    _sfMajorTickSpacing.setValue(value);
}
//! Get the value of the Slider::_sfMinorTickSpacing field.

inline
UInt32 &SliderBase::editMinorTickSpacing(void)
{
    editSField(MinorTickSpacingFieldMask);

    return _sfMinorTickSpacing.getValue();
}

//! Get the value of the Slider::_sfMinorTickSpacing field.
inline
      UInt32  SliderBase::getMinorTickSpacing(void) const
{
    return _sfMinorTickSpacing.getValue();
}

//! Set the value of the Slider::_sfMinorTickSpacing field.
inline
void SliderBase::setMinorTickSpacing(const UInt32 value)
{
    editSField(MinorTickSpacingFieldMask);

    _sfMinorTickSpacing.setValue(value);
}
//! Get the value of the Slider::_sfSnapToTicks field.

inline
bool &SliderBase::editSnapToTicks(void)
{
    editSField(SnapToTicksFieldMask);

    return _sfSnapToTicks.getValue();
}

//! Get the value of the Slider::_sfSnapToTicks field.
inline
      bool  SliderBase::getSnapToTicks(void) const
{
    return _sfSnapToTicks.getValue();
}

//! Set the value of the Slider::_sfSnapToTicks field.
inline
void SliderBase::setSnapToTicks(const bool value)
{
    editSField(SnapToTicksFieldMask);

    _sfSnapToTicks.setValue(value);
}
//! Get the value of the Slider::_sfDrawMajorTicks field.

inline
bool &SliderBase::editDrawMajorTicks(void)
{
    editSField(DrawMajorTicksFieldMask);

    return _sfDrawMajorTicks.getValue();
}

//! Get the value of the Slider::_sfDrawMajorTicks field.
inline
      bool  SliderBase::getDrawMajorTicks(void) const
{
    return _sfDrawMajorTicks.getValue();
}

//! Set the value of the Slider::_sfDrawMajorTicks field.
inline
void SliderBase::setDrawMajorTicks(const bool value)
{
    editSField(DrawMajorTicksFieldMask);

    _sfDrawMajorTicks.setValue(value);
}
//! Get the value of the Slider::_sfDrawTrack field.

inline
bool &SliderBase::editDrawTrack(void)
{
    editSField(DrawTrackFieldMask);

    return _sfDrawTrack.getValue();
}

//! Get the value of the Slider::_sfDrawTrack field.
inline
      bool  SliderBase::getDrawTrack(void) const
{
    return _sfDrawTrack.getValue();
}

//! Set the value of the Slider::_sfDrawTrack field.
inline
void SliderBase::setDrawTrack(const bool value)
{
    editSField(DrawTrackFieldMask);

    _sfDrawTrack.setValue(value);
}
//! Get the value of the Slider::_sfDrawMinorTicks field.

inline
bool &SliderBase::editDrawMinorTicks(void)
{
    editSField(DrawMinorTicksFieldMask);

    return _sfDrawMinorTicks.getValue();
}

//! Get the value of the Slider::_sfDrawMinorTicks field.
inline
      bool  SliderBase::getDrawMinorTicks(void) const
{
    return _sfDrawMinorTicks.getValue();
}

//! Set the value of the Slider::_sfDrawMinorTicks field.
inline
void SliderBase::setDrawMinorTicks(const bool value)
{
    editSField(DrawMinorTicksFieldMask);

    _sfDrawMinorTicks.setValue(value);
}
//! Get the value of the Slider::_sfDrawLabels field.

inline
bool &SliderBase::editDrawLabels(void)
{
    editSField(DrawLabelsFieldMask);

    return _sfDrawLabels.getValue();
}

//! Get the value of the Slider::_sfDrawLabels field.
inline
      bool  SliderBase::getDrawLabels(void) const
{
    return _sfDrawLabels.getValue();
}

//! Set the value of the Slider::_sfDrawLabels field.
inline
void SliderBase::setDrawLabels(const bool value)
{
    editSField(DrawLabelsFieldMask);

    _sfDrawLabels.setValue(value);
}
//! Get the value of the Slider::_sfInverted field.

inline
bool &SliderBase::editInverted(void)
{
    editSField(InvertedFieldMask);

    return _sfInverted.getValue();
}

//! Get the value of the Slider::_sfInverted field.
inline
      bool  SliderBase::getInverted(void) const
{
    return _sfInverted.getValue();
}

//! Set the value of the Slider::_sfInverted field.
inline
void SliderBase::setInverted(const bool value)
{
    editSField(InvertedFieldMask);

    _sfInverted.setValue(value);
}
//! Get the value of the Slider::_sfLabelMap field.

inline
FieldContainerMap &SliderBase::editLabelMap(void)
{
    editSField(LabelMapFieldMask);

    return _sfLabelMap.getValue();
}

//! Get the value of the Slider::_sfLabelMap field.
inline
const FieldContainerMap &SliderBase::getLabelMap(void) const
{
    return _sfLabelMap.getValue();
}

//! Set the value of the Slider::_sfLabelMap field.
inline
void SliderBase::setLabelMap(const FieldContainerMap &value)
{
    editSField(LabelMapFieldMask);

    _sfLabelMap.setValue(value);
}

//! Get the value of the Slider::_sfLabelPrototype field.
inline
Label * SliderBase::getLabelPrototype(void) const
{
    return _sfLabelPrototype.getValue();
}

//! Set the value of the Slider::_sfLabelPrototype field.
inline
void SliderBase::setLabelPrototype(Label * const value)
{
    editSField(LabelPrototypeFieldMask);

    _sfLabelPrototype.setValue(value);
}

//! Get the value of the Slider::_sfTrackDrawObject field.
inline
UIDrawObjectCanvas * SliderBase::getTrackDrawObject(void) const
{
    return _sfTrackDrawObject.getValue();
}

//! Set the value of the Slider::_sfTrackDrawObject field.
inline
void SliderBase::setTrackDrawObject(UIDrawObjectCanvas * const value)
{
    editSField(TrackDrawObjectFieldMask);

    _sfTrackDrawObject.setValue(value);
}

//! Get the value of the Slider::_sfMinTrackDrawObject field.
inline
UIDrawObjectCanvas * SliderBase::getMinTrackDrawObject(void) const
{
    return _sfMinTrackDrawObject.getValue();
}

//! Set the value of the Slider::_sfMinTrackDrawObject field.
inline
void SliderBase::setMinTrackDrawObject(UIDrawObjectCanvas * const value)
{
    editSField(MinTrackDrawObjectFieldMask);

    _sfMinTrackDrawObject.setValue(value);
}

//! Get the value of the Slider::_sfMaxTrackDrawObject field.
inline
UIDrawObjectCanvas * SliderBase::getMaxTrackDrawObject(void) const
{
    return _sfMaxTrackDrawObject.getValue();
}

//! Set the value of the Slider::_sfMaxTrackDrawObject field.
inline
void SliderBase::setMaxTrackDrawObject(UIDrawObjectCanvas * const value)
{
    editSField(MaxTrackDrawObjectFieldMask);

    _sfMaxTrackDrawObject.setValue(value);
}
//! Get the value of the Slider::_sfTrackInset field.

inline
Int32 &SliderBase::editTrackInset(void)
{
    editSField(TrackInsetFieldMask);

    return _sfTrackInset.getValue();
}

//! Get the value of the Slider::_sfTrackInset field.
inline
      Int32  SliderBase::getTrackInset(void) const
{
    return _sfTrackInset.getValue();
}

//! Set the value of the Slider::_sfTrackInset field.
inline
void SliderBase::setTrackInset(const Int32 value)
{
    editSField(TrackInsetFieldMask);

    _sfTrackInset.setValue(value);
}
//! Get the value of the Slider::_sfTrackToTickOffset field.

inline
Int32 &SliderBase::editTrackToTickOffset(void)
{
    editSField(TrackToTickOffsetFieldMask);

    return _sfTrackToTickOffset.getValue();
}

//! Get the value of the Slider::_sfTrackToTickOffset field.
inline
      Int32  SliderBase::getTrackToTickOffset(void) const
{
    return _sfTrackToTickOffset.getValue();
}

//! Set the value of the Slider::_sfTrackToTickOffset field.
inline
void SliderBase::setTrackToTickOffset(const Int32 value)
{
    editSField(TrackToTickOffsetFieldMask);

    _sfTrackToTickOffset.setValue(value);
}
//! Get the value of the Slider::_sfTrackToLabelOffset field.

inline
Int32 &SliderBase::editTrackToLabelOffset(void)
{
    editSField(TrackToLabelOffsetFieldMask);

    return _sfTrackToLabelOffset.getValue();
}

//! Get the value of the Slider::_sfTrackToLabelOffset field.
inline
      Int32  SliderBase::getTrackToLabelOffset(void) const
{
    return _sfTrackToLabelOffset.getValue();
}

//! Set the value of the Slider::_sfTrackToLabelOffset field.
inline
void SliderBase::setTrackToLabelOffset(const Int32 value)
{
    editSField(TrackToLabelOffsetFieldMask);

    _sfTrackToLabelOffset.setValue(value);
}
//! Get the value of the Slider::_sfAlignment field.

inline
Real32 &SliderBase::editAlignment(void)
{
    editSField(AlignmentFieldMask);

    return _sfAlignment.getValue();
}

//! Get the value of the Slider::_sfAlignment field.
inline
      Real32  SliderBase::getAlignment(void) const
{
    return _sfAlignment.getValue();
}

//! Set the value of the Slider::_sfAlignment field.
inline
void SliderBase::setAlignment(const Real32 value)
{
    editSField(AlignmentFieldMask);

    _sfAlignment.setValue(value);
}
//! Get the value of the Slider::_sfTicksOnRightBottom field.

inline
bool &SliderBase::editTicksOnRightBottom(void)
{
    editSField(TicksOnRightBottomFieldMask);

    return _sfTicksOnRightBottom.getValue();
}

//! Get the value of the Slider::_sfTicksOnRightBottom field.
inline
      bool  SliderBase::getTicksOnRightBottom(void) const
{
    return _sfTicksOnRightBottom.getValue();
}

//! Set the value of the Slider::_sfTicksOnRightBottom field.
inline
void SliderBase::setTicksOnRightBottom(const bool value)
{
    editSField(TicksOnRightBottomFieldMask);

    _sfTicksOnRightBottom.setValue(value);
}

//! Get the value of the Slider::_sfRangeModel field.
inline
BoundedRangeModel * SliderBase::getRangeModel(void) const
{
    return _sfRangeModel.getValue();
}

//! Set the value of the Slider::_sfRangeModel field.
inline
void SliderBase::setRangeModel(BoundedRangeModel * const value)
{
    editSField(RangeModelFieldMask);

    _sfRangeModel.setValue(value);
}

//! Get the value of the \a index element the Slider::_mfMajorTickPositions field.
inline
const Pnt2f &SliderBase::getMajorTickPositions(const UInt32 index) const
{
    return _mfMajorTickPositions[index];
}

inline
Pnt2f &SliderBase::editMajorTickPositions(const UInt32 index)
{
    editMField(MajorTickPositionsFieldMask, _mfMajorTickPositions);

    return _mfMajorTickPositions[index];
}


//! Get the value of the \a index element the Slider::_mfMinorTickPositions field.
inline
const Pnt2f &SliderBase::getMinorTickPositions(const UInt32 index) const
{
    return _mfMinorTickPositions[index];
}

inline
Pnt2f &SliderBase::editMinorTickPositions(const UInt32 index)
{
    editMField(MinorTickPositionsFieldMask, _mfMinorTickPositions);

    return _mfMinorTickPositions[index];
}


//! Get the value of the \a index element the Slider::_mfMajorTickDrawObjects field.
inline
UIDrawObject * SliderBase::getMajorTickDrawObjects(const UInt32 index) const
{
    return _mfMajorTickDrawObjects[index];
}

//! Get the value of the \a index element the Slider::_mfMinorTickDrawObjects field.
inline
UIDrawObject * SliderBase::getMinorTickDrawObjects(const UInt32 index) const
{
    return _mfMinorTickDrawObjects[index];
}


#ifdef OSG_MT_CPTR_ASPECT
inline
void SliderBase::execSync (      SliderBase *pFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    Inherited::execSync(pFrom, whichField, oOffsets, syncMode, uiSyncInfo);

    if(FieldBits::NoField != (KnobButtonFieldMask & whichField))
        _sfKnobButton.syncWith(pFrom->_sfKnobButton);

    if(FieldBits::NoField != (OrientationFieldMask & whichField))
        _sfOrientation.syncWith(pFrom->_sfOrientation);

    if(FieldBits::NoField != (MajorTickSpacingFieldMask & whichField))
        _sfMajorTickSpacing.syncWith(pFrom->_sfMajorTickSpacing);

    if(FieldBits::NoField != (MajorTickPositionsFieldMask & whichField))
        _mfMajorTickPositions.syncWith(pFrom->_mfMajorTickPositions,
                                syncMode,
                                uiSyncInfo,
                                oOffsets);

    if(FieldBits::NoField != (MinorTickSpacingFieldMask & whichField))
        _sfMinorTickSpacing.syncWith(pFrom->_sfMinorTickSpacing);

    if(FieldBits::NoField != (MinorTickPositionsFieldMask & whichField))
        _mfMinorTickPositions.syncWith(pFrom->_mfMinorTickPositions,
                                syncMode,
                                uiSyncInfo,
                                oOffsets);

    if(FieldBits::NoField != (SnapToTicksFieldMask & whichField))
        _sfSnapToTicks.syncWith(pFrom->_sfSnapToTicks);

    if(FieldBits::NoField != (DrawMajorTicksFieldMask & whichField))
        _sfDrawMajorTicks.syncWith(pFrom->_sfDrawMajorTicks);

    if(FieldBits::NoField != (DrawTrackFieldMask & whichField))
        _sfDrawTrack.syncWith(pFrom->_sfDrawTrack);

    if(FieldBits::NoField != (DrawMinorTicksFieldMask & whichField))
        _sfDrawMinorTicks.syncWith(pFrom->_sfDrawMinorTicks);

    if(FieldBits::NoField != (DrawLabelsFieldMask & whichField))
        _sfDrawLabels.syncWith(pFrom->_sfDrawLabels);

    if(FieldBits::NoField != (InvertedFieldMask & whichField))
        _sfInverted.syncWith(pFrom->_sfInverted);

    if(FieldBits::NoField != (LabelMapFieldMask & whichField))
        _sfLabelMap.syncWith(pFrom->_sfLabelMap);

    if(FieldBits::NoField != (LabelPrototypeFieldMask & whichField))
        _sfLabelPrototype.syncWith(pFrom->_sfLabelPrototype);

    if(FieldBits::NoField != (TrackDrawObjectFieldMask & whichField))
        _sfTrackDrawObject.syncWith(pFrom->_sfTrackDrawObject);

    if(FieldBits::NoField != (MinTrackDrawObjectFieldMask & whichField))
        _sfMinTrackDrawObject.syncWith(pFrom->_sfMinTrackDrawObject);

    if(FieldBits::NoField != (MaxTrackDrawObjectFieldMask & whichField))
        _sfMaxTrackDrawObject.syncWith(pFrom->_sfMaxTrackDrawObject);

    if(FieldBits::NoField != (MajorTickDrawObjectsFieldMask & whichField))
        _mfMajorTickDrawObjects.syncWith(pFrom->_mfMajorTickDrawObjects,
                                syncMode,
                                uiSyncInfo,
                                oOffsets);

    if(FieldBits::NoField != (MinorTickDrawObjectsFieldMask & whichField))
        _mfMinorTickDrawObjects.syncWith(pFrom->_mfMinorTickDrawObjects,
                                syncMode,
                                uiSyncInfo,
                                oOffsets);

    if(FieldBits::NoField != (TrackInsetFieldMask & whichField))
        _sfTrackInset.syncWith(pFrom->_sfTrackInset);

    if(FieldBits::NoField != (TrackToTickOffsetFieldMask & whichField))
        _sfTrackToTickOffset.syncWith(pFrom->_sfTrackToTickOffset);

    if(FieldBits::NoField != (TrackToLabelOffsetFieldMask & whichField))
        _sfTrackToLabelOffset.syncWith(pFrom->_sfTrackToLabelOffset);

    if(FieldBits::NoField != (AlignmentFieldMask & whichField))
        _sfAlignment.syncWith(pFrom->_sfAlignment);

    if(FieldBits::NoField != (TicksOnRightBottomFieldMask & whichField))
        _sfTicksOnRightBottom.syncWith(pFrom->_sfTicksOnRightBottom);

    if(FieldBits::NoField != (RangeModelFieldMask & whichField))
        _sfRangeModel.syncWith(pFrom->_sfRangeModel);
}
#endif


inline
const Char8 *SliderBase::getClassname(void)
{
    return "Slider";
}
OSG_GEN_CONTAINERPTR(Slider);

OSG_END_NAMESPACE

