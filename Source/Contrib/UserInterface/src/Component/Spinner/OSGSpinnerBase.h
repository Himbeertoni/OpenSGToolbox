/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact:  David Kabala (djkabala@gmail.com)                             *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class Spinner
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#ifndef _OSGSPINNERBASE_H_
#define _OSGSPINNERBASE_H_
#ifdef __sgi
#pragma once
#endif


#include "OSGConfig.h"
#include "OSGContribUserInterfaceDef.h"

//#include "OSGBaseTypes.h"

#include "OSGComponentContainer.h" // Parent

#include "OSGButtonFields.h"            // NextButton type
#include "OSGComponentFields.h"         // Editor type
#include "OSGSysFields.h"               // Orientation type

#include "OSGSpinnerFields.h"

OSG_BEGIN_NAMESPACE

class Spinner;

//! \brief Spinner Base Class.

class OSG_CONTRIBUSERINTERFACE_DLLMAPPING SpinnerBase : public ComponentContainer
{
  public:

    typedef ComponentContainer Inherited;
    typedef ComponentContainer ParentContainer;

    typedef Inherited::TypeObject TypeObject;
    typedef TypeObject::InitPhase InitPhase;

    OSG_GEN_INTERNALPTR(Spinner);

    /*==========================  PUBLIC  =================================*/

  public:

    enum
    {
        NextButtonFieldId = Inherited::NextFieldId,
        PreviousButtonFieldId = NextButtonFieldId + 1,
        EditorFieldId = PreviousButtonFieldId + 1,
        OrientationFieldId = EditorFieldId + 1,
        EditorToButtonOffsetFieldId = OrientationFieldId + 1,
        NextFieldId = EditorToButtonOffsetFieldId + 1
    };

    static const OSG::BitVector NextButtonFieldMask =
        (TypeTraits<BitVector>::One << NextButtonFieldId);
    static const OSG::BitVector PreviousButtonFieldMask =
        (TypeTraits<BitVector>::One << PreviousButtonFieldId);
    static const OSG::BitVector EditorFieldMask =
        (TypeTraits<BitVector>::One << EditorFieldId);
    static const OSG::BitVector OrientationFieldMask =
        (TypeTraits<BitVector>::One << OrientationFieldId);
    static const OSG::BitVector EditorToButtonOffsetFieldMask =
        (TypeTraits<BitVector>::One << EditorToButtonOffsetFieldId);
    static const OSG::BitVector NextFieldMask =
        (TypeTraits<BitVector>::One << NextFieldId);
        
    typedef SFUnrecButtonPtr  SFNextButtonType;
    typedef SFUnrecButtonPtr  SFPreviousButtonType;
    typedef SFUnrecComponentPtr SFEditorType;
    typedef SFUInt32          SFOrientationType;
    typedef SFUInt32          SFEditorToButtonOffsetType;

    /*---------------------------------------------------------------------*/
    /*! \name                    Class Get                                 */
    /*! \{                                                                 */

    static FieldContainerType &getClassType   (void);
    static UInt32              getClassTypeId (void);
    static UInt16              getClassGroupId(void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                FieldContainer Get                            */
    /*! \{                                                                 */

    virtual       FieldContainerType &getType         (void);
    virtual const FieldContainerType &getType         (void) const;

    virtual       UInt32              getContainerSize(void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Get                                 */
    /*! \{                                                                 */

            const SFUnrecButtonPtr    *getSFNextButton     (void) const;
                  SFUnrecButtonPtr    *editSFNextButton     (void);
            const SFUnrecButtonPtr    *getSFPreviousButton (void) const;
                  SFUnrecButtonPtr    *editSFPreviousButton (void);
            const SFUnrecComponentPtr *getSFEditor         (void) const;
                  SFUnrecComponentPtr *editSFEditor         (void);

                  SFUInt32            *editSFOrientation    (void);
            const SFUInt32            *getSFOrientation     (void) const;

                  SFUInt32            *editSFEditorToButtonOffset(void);
            const SFUInt32            *getSFEditorToButtonOffset (void) const;


                  Button * getNextButton     (void) const;

                  Button * getPreviousButton (void) const;

                  Component * getEditor         (void) const;

                  UInt32              &editOrientation    (void);
                  UInt32               getOrientation     (void) const;

                  UInt32              &editEditorToButtonOffset(void);
                  UInt32               getEditorToButtonOffset (void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Set                                 */
    /*! \{                                                                 */

            void setNextButton     (Button * const value);
            void setPreviousButton (Button * const value);
            void setEditor         (Component * const value);
            void setOrientation    (const UInt32 value);
            void setEditorToButtonOffset(const UInt32 value);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                Ptr Field Set                                 */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                Ptr MField Set                                */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Binary Access                              */
    /*! \{                                                                 */

    virtual UInt32 getBinSize (ConstFieldMaskArg  whichField);
    virtual void   copyToBin  (BinaryDataHandler &pMem,
                               ConstFieldMaskArg  whichField);
    virtual void   copyFromBin(BinaryDataHandler &pMem,
                               ConstFieldMaskArg  whichField);


    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Construction                               */
    /*! \{                                                                 */

    static  SpinnerTransitPtr  create          (void);
    static  Spinner           *createEmpty     (void);

    static  SpinnerTransitPtr  createLocal     (
                                               BitVector bFlags = FCLocal::All);

    static  Spinner            *createEmptyLocal(
                                              BitVector bFlags = FCLocal::All);

    static  SpinnerTransitPtr  createDependent  (BitVector bFlags);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Copy                                   */
    /*! \{                                                                 */

    virtual FieldContainerTransitPtr shallowCopy     (void) const;
    virtual FieldContainerTransitPtr shallowCopyLocal(
                                       BitVector bFlags = FCLocal::All) const;
    virtual FieldContainerTransitPtr shallowCopyDependent(
                                                      BitVector bFlags) const;

    /*! \}                                                                 */
    /*=========================  PROTECTED  ===============================*/

  protected:

    static TypeObject _type;

    static       void   classDescInserter(TypeObject &oType);
    static const Char8 *getClassname     (void             );

    /*---------------------------------------------------------------------*/
    /*! \name                      Fields                                  */
    /*! \{                                                                 */

    SFUnrecButtonPtr  _sfNextButton;
    SFUnrecButtonPtr  _sfPreviousButton;
    SFUnrecComponentPtr _sfEditor;
    SFUInt32          _sfOrientation;
    SFUInt32          _sfEditorToButtonOffset;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Constructors                               */
    /*! \{                                                                 */

    SpinnerBase(void);
    SpinnerBase(const SpinnerBase &source);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Destructors                                */
    /*! \{                                                                 */

    virtual ~SpinnerBase(void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                     onCreate                                */
    /*! \{                                                                 */

    void onCreate(const Spinner *source = NULL);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Generic Field Access                      */
    /*! \{                                                                 */

    GetFieldHandlePtr  getHandleNextButton      (void) const;
    EditFieldHandlePtr editHandleNextButton     (void);
    GetFieldHandlePtr  getHandlePreviousButton  (void) const;
    EditFieldHandlePtr editHandlePreviousButton (void);
    GetFieldHandlePtr  getHandleEditor          (void) const;
    EditFieldHandlePtr editHandleEditor         (void);
    GetFieldHandlePtr  getHandleOrientation     (void) const;
    EditFieldHandlePtr editHandleOrientation    (void);
    GetFieldHandlePtr  getHandleEditorToButtonOffset (void) const;
    EditFieldHandlePtr editHandleEditorToButtonOffset(void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

#ifdef OSG_MT_CPTR_ASPECT
    virtual void execSyncV(      FieldContainer    &oFrom,
                                 ConstFieldMaskArg  whichField,
                                 AspectOffsetStore &oOffsets,
                                 ConstFieldMaskArg  syncMode  ,
                           const UInt32             uiSyncInfo);

            void execSync (      SpinnerBase *pFrom,
                                 ConstFieldMaskArg  whichField,
                                 AspectOffsetStore &oOffsets,
                                 ConstFieldMaskArg  syncMode  ,
                           const UInt32             uiSyncInfo);
#endif

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Edit                                   */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                     Aspect Create                            */
    /*! \{                                                                 */

#ifdef OSG_MT_CPTR_ASPECT
    virtual FieldContainer *createAspectCopy(
                                    const FieldContainer *pRefAspect) const;
#endif

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Edit                                   */
    /*! \{                                                                 */
    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

    virtual void resolveLinks(void);

    /*! \}                                                                 */
    /*==========================  PRIVATE  ================================*/

  private:
    /*---------------------------------------------------------------------*/

    // prohibit default functions (move to 'public' if you need one)
    void operator =(const SpinnerBase &source);
};

typedef SpinnerBase *SpinnerBaseP;

OSG_END_NAMESPACE

#endif /* _OSGSPINNERBASE_H_ */
