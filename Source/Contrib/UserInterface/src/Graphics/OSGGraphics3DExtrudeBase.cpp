/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact:  David Kabala (djkabala@gmail.com)                             *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class Graphics3DExtrude!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>
#include <boost/assign/list_of.hpp>

#include "OSGConfig.h"



#include "OSGDepthChunk.h"              // UIDepth Class
#include "OSGMaterial.h"                // Material Class

#include "OSGGraphics3DExtrudeBase.h"
#include "OSGGraphics3DExtrude.h"

#include <boost/bind.hpp>

#ifdef WIN32 // turn off 'this' : used in base member initializer list warning
#pragma warning(disable:4355)
#endif

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::Graphics3DExtrude
    A Concrete 3D Extrution UI Graphics.
 */

/***************************************************************************\
 *                        Field Documentation                              *
\***************************************************************************/

/*! \var DepthChunk *    Graphics3DExtrudeBase::_sfUIDepth
    
*/

/*! \var Real32          Graphics3DExtrudeBase::_sfExtrudeLength
    
*/

/*! \var Real32          Graphics3DExtrudeBase::_sfInternalClipPlaneOffset
    
*/

/*! \var Real32          Graphics3DExtrudeBase::_sfTextOffset
    
*/

/*! \var bool            Graphics3DExtrudeBase::_sfEnable3DText
    
*/

/*! \var bool            Graphics3DExtrudeBase::_sfEnableLighting
    
*/

/*! \var Material *      Graphics3DExtrudeBase::_sfMaterial
    
*/


/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldTraits<Graphics3DExtrude *>::_type("Graphics3DExtrudePtr", "GraphicsPtr");
#endif

OSG_FIELDTRAITS_GETTYPE(Graphics3DExtrude *)

OSG_EXPORT_PTR_SFIELD_FULL(PointerSField,
                           Graphics3DExtrude *,
                           0);

OSG_EXPORT_PTR_MFIELD_FULL(PointerMField,
                           Graphics3DExtrude *,
                           0);

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

void Graphics3DExtrudeBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new SFUnrecDepthChunkPtr::Description(
        SFUnrecDepthChunkPtr::getClassType(),
        "UIDepth",
        "",
        UIDepthFieldId, UIDepthFieldMask,
        true,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&Graphics3DExtrude::editHandleUIDepth),
        static_cast<FieldGetMethodSig >(&Graphics3DExtrude::getHandleUIDepth));

    oType.addInitialDesc(pDesc);

    pDesc = new SFReal32::Description(
        SFReal32::getClassType(),
        "ExtrudeLength",
        "",
        ExtrudeLengthFieldId, ExtrudeLengthFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&Graphics3DExtrude::editHandleExtrudeLength),
        static_cast<FieldGetMethodSig >(&Graphics3DExtrude::getHandleExtrudeLength));

    oType.addInitialDesc(pDesc);

    pDesc = new SFReal32::Description(
        SFReal32::getClassType(),
        "InternalClipPlaneOffset",
        "",
        InternalClipPlaneOffsetFieldId, InternalClipPlaneOffsetFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&Graphics3DExtrude::editHandleInternalClipPlaneOffset),
        static_cast<FieldGetMethodSig >(&Graphics3DExtrude::getHandleInternalClipPlaneOffset));

    oType.addInitialDesc(pDesc);

    pDesc = new SFReal32::Description(
        SFReal32::getClassType(),
        "TextOffset",
        "",
        TextOffsetFieldId, TextOffsetFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&Graphics3DExtrude::editHandleTextOffset),
        static_cast<FieldGetMethodSig >(&Graphics3DExtrude::getHandleTextOffset));

    oType.addInitialDesc(pDesc);

    pDesc = new SFBool::Description(
        SFBool::getClassType(),
        "Enable3DText",
        "",
        Enable3DTextFieldId, Enable3DTextFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&Graphics3DExtrude::editHandleEnable3DText),
        static_cast<FieldGetMethodSig >(&Graphics3DExtrude::getHandleEnable3DText));

    oType.addInitialDesc(pDesc);

    pDesc = new SFBool::Description(
        SFBool::getClassType(),
        "EnableLighting",
        "",
        EnableLightingFieldId, EnableLightingFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&Graphics3DExtrude::editHandleEnableLighting),
        static_cast<FieldGetMethodSig >(&Graphics3DExtrude::getHandleEnableLighting));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecMaterialPtr::Description(
        SFUnrecMaterialPtr::getClassType(),
        "Material",
        "",
        MaterialFieldId, MaterialFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&Graphics3DExtrude::editHandleMaterial),
        static_cast<FieldGetMethodSig >(&Graphics3DExtrude::getHandleMaterial));

    oType.addInitialDesc(pDesc);
}


Graphics3DExtrudeBase::TypeObject Graphics3DExtrudeBase::_type(
    Graphics3DExtrudeBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    0,
    reinterpret_cast<PrototypeCreateF>(&Graphics3DExtrudeBase::createEmptyLocal),
    Graphics3DExtrude::initMethod,
    Graphics3DExtrude::exitMethod,
    reinterpret_cast<InitalInsertDescFunc>(&Graphics3DExtrude::classDescInserter),
    false,
    0,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "\tname=\"Graphics3DExtrude\"\n"
    "\tparent=\"Graphics\"\n"
    "    library=\"ContribUserInterface\"\n"
    "    pointerfieldtypes=\"both\"\n"
    "\tstructure=\"concrete\"\n"
    "    systemcomponent=\"true\"\n"
    "    parentsystemcomponent=\"true\"\n"
    "    decoratable=\"false\"\n"
    "    useLocalIncludes=\"false\"\n"
    "    isNodeCore=\"false\"\n"
    "    authors=\"David Kabala (djkabala@gmail.com)                             \"\n"
    ">\n"
    "A Concrete 3D Extrution UI Graphics.\n"
    "\t<Field\n"
    "\t\tname=\"UIDepth\"\n"
    "\t\ttype=\"DepthChunk\"\n"
    "        category=\"pointer\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"internal\"\n"
    "\t\taccess=\"protected\"\n"
    "\t\tdefaultValue=\"NULL\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"ExtrudeLength\"\n"
    "\t\ttype=\"Real32\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t\tdefaultValue=\"1.0\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"InternalClipPlaneOffset\"\n"
    "\t\ttype=\"Real32\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t\tdefaultValue=\"0.0001\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"TextOffset\"\n"
    "\t\ttype=\"Real32\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t\tdefaultValue=\"0.0001\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"Enable3DText\"\n"
    "\t\ttype=\"bool\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t\tdefaultValue=\"false\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"EnableLighting\"\n"
    "\t\ttype=\"bool\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t\tdefaultValue=\"false\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"Material\"\n"
    "\t\ttype=\"Material\"\n"
    "        category=\"pointer\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t\tdefaultValue=\"NULL\"\n"
    "\t>\n"
    "\t</Field>\n"
    "</FieldContainer>\n",
    "A Concrete 3D Extrution UI Graphics.\n"
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &Graphics3DExtrudeBase::getType(void)
{
    return _type;
}

const FieldContainerType &Graphics3DExtrudeBase::getType(void) const
{
    return _type;
}

UInt32 Graphics3DExtrudeBase::getContainerSize(void) const
{
    return sizeof(Graphics3DExtrude);
}

/*------------------------- decorator get ------------------------------*/


//! Get the Graphics3DExtrude::_sfUIDepth field.
const SFUnrecDepthChunkPtr *Graphics3DExtrudeBase::getSFUIDepth(void) const
{
    return &_sfUIDepth;
}

SFUnrecDepthChunkPtr *Graphics3DExtrudeBase::editSFUIDepth        (void)
{
    editSField(UIDepthFieldMask);

    return &_sfUIDepth;
}

SFReal32 *Graphics3DExtrudeBase::editSFExtrudeLength(void)
{
    editSField(ExtrudeLengthFieldMask);

    return &_sfExtrudeLength;
}

const SFReal32 *Graphics3DExtrudeBase::getSFExtrudeLength(void) const
{
    return &_sfExtrudeLength;
}


SFReal32 *Graphics3DExtrudeBase::editSFInternalClipPlaneOffset(void)
{
    editSField(InternalClipPlaneOffsetFieldMask);

    return &_sfInternalClipPlaneOffset;
}

const SFReal32 *Graphics3DExtrudeBase::getSFInternalClipPlaneOffset(void) const
{
    return &_sfInternalClipPlaneOffset;
}


SFReal32 *Graphics3DExtrudeBase::editSFTextOffset(void)
{
    editSField(TextOffsetFieldMask);

    return &_sfTextOffset;
}

const SFReal32 *Graphics3DExtrudeBase::getSFTextOffset(void) const
{
    return &_sfTextOffset;
}


SFBool *Graphics3DExtrudeBase::editSFEnable3DText(void)
{
    editSField(Enable3DTextFieldMask);

    return &_sfEnable3DText;
}

const SFBool *Graphics3DExtrudeBase::getSFEnable3DText(void) const
{
    return &_sfEnable3DText;
}


SFBool *Graphics3DExtrudeBase::editSFEnableLighting(void)
{
    editSField(EnableLightingFieldMask);

    return &_sfEnableLighting;
}

const SFBool *Graphics3DExtrudeBase::getSFEnableLighting(void) const
{
    return &_sfEnableLighting;
}


//! Get the Graphics3DExtrude::_sfMaterial field.
const SFUnrecMaterialPtr *Graphics3DExtrudeBase::getSFMaterial(void) const
{
    return &_sfMaterial;
}

SFUnrecMaterialPtr  *Graphics3DExtrudeBase::editSFMaterial       (void)
{
    editSField(MaterialFieldMask);

    return &_sfMaterial;
}





/*------------------------------ access -----------------------------------*/

UInt32 Graphics3DExtrudeBase::getBinSize(ConstFieldMaskArg whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (UIDepthFieldMask & whichField))
    {
        returnValue += _sfUIDepth.getBinSize();
    }
    if(FieldBits::NoField != (ExtrudeLengthFieldMask & whichField))
    {
        returnValue += _sfExtrudeLength.getBinSize();
    }
    if(FieldBits::NoField != (InternalClipPlaneOffsetFieldMask & whichField))
    {
        returnValue += _sfInternalClipPlaneOffset.getBinSize();
    }
    if(FieldBits::NoField != (TextOffsetFieldMask & whichField))
    {
        returnValue += _sfTextOffset.getBinSize();
    }
    if(FieldBits::NoField != (Enable3DTextFieldMask & whichField))
    {
        returnValue += _sfEnable3DText.getBinSize();
    }
    if(FieldBits::NoField != (EnableLightingFieldMask & whichField))
    {
        returnValue += _sfEnableLighting.getBinSize();
    }
    if(FieldBits::NoField != (MaterialFieldMask & whichField))
    {
        returnValue += _sfMaterial.getBinSize();
    }

    return returnValue;
}

void Graphics3DExtrudeBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (UIDepthFieldMask & whichField))
    {
        _sfUIDepth.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ExtrudeLengthFieldMask & whichField))
    {
        _sfExtrudeLength.copyToBin(pMem);
    }
    if(FieldBits::NoField != (InternalClipPlaneOffsetFieldMask & whichField))
    {
        _sfInternalClipPlaneOffset.copyToBin(pMem);
    }
    if(FieldBits::NoField != (TextOffsetFieldMask & whichField))
    {
        _sfTextOffset.copyToBin(pMem);
    }
    if(FieldBits::NoField != (Enable3DTextFieldMask & whichField))
    {
        _sfEnable3DText.copyToBin(pMem);
    }
    if(FieldBits::NoField != (EnableLightingFieldMask & whichField))
    {
        _sfEnableLighting.copyToBin(pMem);
    }
    if(FieldBits::NoField != (MaterialFieldMask & whichField))
    {
        _sfMaterial.copyToBin(pMem);
    }
}

void Graphics3DExtrudeBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (UIDepthFieldMask & whichField))
    {
        _sfUIDepth.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ExtrudeLengthFieldMask & whichField))
    {
        _sfExtrudeLength.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (InternalClipPlaneOffsetFieldMask & whichField))
    {
        _sfInternalClipPlaneOffset.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (TextOffsetFieldMask & whichField))
    {
        _sfTextOffset.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (Enable3DTextFieldMask & whichField))
    {
        _sfEnable3DText.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (EnableLightingFieldMask & whichField))
    {
        _sfEnableLighting.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (MaterialFieldMask & whichField))
    {
        _sfMaterial.copyFromBin(pMem);
    }
}

//! create a new instance of the class
Graphics3DExtrudeTransitPtr Graphics3DExtrudeBase::createLocal(BitVector bFlags)
{
    Graphics3DExtrudeTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyLocal(bFlags);

        fc = dynamic_pointer_cast<Graphics3DExtrude>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class, copy the container flags
Graphics3DExtrudeTransitPtr Graphics3DExtrudeBase::createDependent(BitVector bFlags)
{
    Graphics3DExtrudeTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyDependent(bFlags);

        fc = dynamic_pointer_cast<Graphics3DExtrude>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class
Graphics3DExtrudeTransitPtr Graphics3DExtrudeBase::create(void)
{
    Graphics3DExtrudeTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopy();

        fc = dynamic_pointer_cast<Graphics3DExtrude>(tmpPtr);
    }

    return fc;
}

Graphics3DExtrude *Graphics3DExtrudeBase::createEmptyLocal(BitVector bFlags)
{
    Graphics3DExtrude *returnValue;

    newPtr<Graphics3DExtrude>(returnValue, bFlags);

    returnValue->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

//! create an empty new instance of the class, do not copy the prototype
Graphics3DExtrude *Graphics3DExtrudeBase::createEmpty(void)
{
    Graphics3DExtrude *returnValue;

    newPtr<Graphics3DExtrude>(returnValue, Thread::getCurrentLocalFlags());

    returnValue->_pFieldFlags->_bNamespaceMask &=
        ~Thread::getCurrentLocalFlags();

    return returnValue;
}


FieldContainerTransitPtr Graphics3DExtrudeBase::shallowCopyLocal(
    BitVector bFlags) const
{
    Graphics3DExtrude *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const Graphics3DExtrude *>(this), bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

FieldContainerTransitPtr Graphics3DExtrudeBase::shallowCopyDependent(
    BitVector bFlags) const
{
    Graphics3DExtrude *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const Graphics3DExtrude *>(this), ~bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask = bFlags;

    return returnValue;
}

FieldContainerTransitPtr Graphics3DExtrudeBase::shallowCopy(void) const
{
    Graphics3DExtrude *tmpPtr;

    newPtr(tmpPtr,
           dynamic_cast<const Graphics3DExtrude *>(this),
           Thread::getCurrentLocalFlags());

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~Thread::getCurrentLocalFlags();

    FieldContainerTransitPtr returnValue(tmpPtr);

    return returnValue;
}




/*------------------------- constructors ----------------------------------*/

Graphics3DExtrudeBase::Graphics3DExtrudeBase(void) :
    Inherited(),
    _sfUIDepth                (NULL),
    _sfExtrudeLength          (Real32(1.0)),
    _sfInternalClipPlaneOffset(Real32(0.0001)),
    _sfTextOffset             (Real32(0.0001)),
    _sfEnable3DText           (bool(false)),
    _sfEnableLighting         (bool(false)),
    _sfMaterial               (NULL)
{
}

Graphics3DExtrudeBase::Graphics3DExtrudeBase(const Graphics3DExtrudeBase &source) :
    Inherited(source),
    _sfUIDepth                (NULL),
    _sfExtrudeLength          (source._sfExtrudeLength          ),
    _sfInternalClipPlaneOffset(source._sfInternalClipPlaneOffset),
    _sfTextOffset             (source._sfTextOffset             ),
    _sfEnable3DText           (source._sfEnable3DText           ),
    _sfEnableLighting         (source._sfEnableLighting         ),
    _sfMaterial               (NULL)
{
}


/*-------------------------- destructors ----------------------------------*/

Graphics3DExtrudeBase::~Graphics3DExtrudeBase(void)
{
}

void Graphics3DExtrudeBase::onCreate(const Graphics3DExtrude *source)
{
    Inherited::onCreate(source);

    if(source != NULL)
    {
        Graphics3DExtrude *pThis = static_cast<Graphics3DExtrude *>(this);

        pThis->setUIDepth(source->getUIDepth());

        pThis->setMaterial(source->getMaterial());
    }
}

GetFieldHandlePtr Graphics3DExtrudeBase::getHandleUIDepth         (void) const
{
    SFUnrecDepthChunkPtr::GetHandlePtr returnValue(
        new  SFUnrecDepthChunkPtr::GetHandle(
             &_sfUIDepth,
             this->getType().getFieldDesc(UIDepthFieldId),
             const_cast<Graphics3DExtrudeBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr Graphics3DExtrudeBase::editHandleUIDepth        (void)
{
    SFUnrecDepthChunkPtr::EditHandlePtr returnValue(
        new  SFUnrecDepthChunkPtr::EditHandle(
             &_sfUIDepth,
             this->getType().getFieldDesc(UIDepthFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&Graphics3DExtrude::setUIDepth,
                    static_cast<Graphics3DExtrude *>(this), _1));

    editSField(UIDepthFieldMask);

    return returnValue;
}

GetFieldHandlePtr Graphics3DExtrudeBase::getHandleExtrudeLength   (void) const
{
    SFReal32::GetHandlePtr returnValue(
        new  SFReal32::GetHandle(
             &_sfExtrudeLength,
             this->getType().getFieldDesc(ExtrudeLengthFieldId),
             const_cast<Graphics3DExtrudeBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr Graphics3DExtrudeBase::editHandleExtrudeLength  (void)
{
    SFReal32::EditHandlePtr returnValue(
        new  SFReal32::EditHandle(
             &_sfExtrudeLength,
             this->getType().getFieldDesc(ExtrudeLengthFieldId),
             this));


    editSField(ExtrudeLengthFieldMask);

    return returnValue;
}

GetFieldHandlePtr Graphics3DExtrudeBase::getHandleInternalClipPlaneOffset (void) const
{
    SFReal32::GetHandlePtr returnValue(
        new  SFReal32::GetHandle(
             &_sfInternalClipPlaneOffset,
             this->getType().getFieldDesc(InternalClipPlaneOffsetFieldId),
             const_cast<Graphics3DExtrudeBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr Graphics3DExtrudeBase::editHandleInternalClipPlaneOffset(void)
{
    SFReal32::EditHandlePtr returnValue(
        new  SFReal32::EditHandle(
             &_sfInternalClipPlaneOffset,
             this->getType().getFieldDesc(InternalClipPlaneOffsetFieldId),
             this));


    editSField(InternalClipPlaneOffsetFieldMask);

    return returnValue;
}

GetFieldHandlePtr Graphics3DExtrudeBase::getHandleTextOffset      (void) const
{
    SFReal32::GetHandlePtr returnValue(
        new  SFReal32::GetHandle(
             &_sfTextOffset,
             this->getType().getFieldDesc(TextOffsetFieldId),
             const_cast<Graphics3DExtrudeBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr Graphics3DExtrudeBase::editHandleTextOffset     (void)
{
    SFReal32::EditHandlePtr returnValue(
        new  SFReal32::EditHandle(
             &_sfTextOffset,
             this->getType().getFieldDesc(TextOffsetFieldId),
             this));


    editSField(TextOffsetFieldMask);

    return returnValue;
}

GetFieldHandlePtr Graphics3DExtrudeBase::getHandleEnable3DText    (void) const
{
    SFBool::GetHandlePtr returnValue(
        new  SFBool::GetHandle(
             &_sfEnable3DText,
             this->getType().getFieldDesc(Enable3DTextFieldId),
             const_cast<Graphics3DExtrudeBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr Graphics3DExtrudeBase::editHandleEnable3DText   (void)
{
    SFBool::EditHandlePtr returnValue(
        new  SFBool::EditHandle(
             &_sfEnable3DText,
             this->getType().getFieldDesc(Enable3DTextFieldId),
             this));


    editSField(Enable3DTextFieldMask);

    return returnValue;
}

GetFieldHandlePtr Graphics3DExtrudeBase::getHandleEnableLighting  (void) const
{
    SFBool::GetHandlePtr returnValue(
        new  SFBool::GetHandle(
             &_sfEnableLighting,
             this->getType().getFieldDesc(EnableLightingFieldId),
             const_cast<Graphics3DExtrudeBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr Graphics3DExtrudeBase::editHandleEnableLighting (void)
{
    SFBool::EditHandlePtr returnValue(
        new  SFBool::EditHandle(
             &_sfEnableLighting,
             this->getType().getFieldDesc(EnableLightingFieldId),
             this));


    editSField(EnableLightingFieldMask);

    return returnValue;
}

GetFieldHandlePtr Graphics3DExtrudeBase::getHandleMaterial        (void) const
{
    SFUnrecMaterialPtr::GetHandlePtr returnValue(
        new  SFUnrecMaterialPtr::GetHandle(
             &_sfMaterial,
             this->getType().getFieldDesc(MaterialFieldId),
             const_cast<Graphics3DExtrudeBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr Graphics3DExtrudeBase::editHandleMaterial       (void)
{
    SFUnrecMaterialPtr::EditHandlePtr returnValue(
        new  SFUnrecMaterialPtr::EditHandle(
             &_sfMaterial,
             this->getType().getFieldDesc(MaterialFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&Graphics3DExtrude::setMaterial,
                    static_cast<Graphics3DExtrude *>(this), _1));

    editSField(MaterialFieldMask);

    return returnValue;
}


#ifdef OSG_MT_CPTR_ASPECT
void Graphics3DExtrudeBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    Graphics3DExtrude *pThis = static_cast<Graphics3DExtrude *>(this);

    pThis->execSync(static_cast<Graphics3DExtrude *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif


#ifdef OSG_MT_CPTR_ASPECT
FieldContainer *Graphics3DExtrudeBase::createAspectCopy(
    const FieldContainer *pRefAspect) const
{
    Graphics3DExtrude *returnValue;

    newAspectCopy(returnValue,
                  dynamic_cast<const Graphics3DExtrude *>(pRefAspect),
                  dynamic_cast<const Graphics3DExtrude *>(this));

    return returnValue;
}
#endif

void Graphics3DExtrudeBase::resolveLinks(void)
{
    Inherited::resolveLinks();

    static_cast<Graphics3DExtrude *>(this)->setUIDepth(NULL);

    static_cast<Graphics3DExtrude *>(this)->setMaterial(NULL);


}


OSG_END_NAMESPACE
