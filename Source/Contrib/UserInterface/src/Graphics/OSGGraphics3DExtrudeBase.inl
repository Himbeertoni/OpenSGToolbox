/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *   contact:  David Kabala (djkabala@gmail.com)                             *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class Graphics3DExtrude!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

OSG_BEGIN_NAMESPACE


//! access the type of the class
inline
OSG::FieldContainerType &Graphics3DExtrudeBase::getClassType(void)
{
    return _type;
}

//! access the numerical type of the class
inline
OSG::UInt32 Graphics3DExtrudeBase::getClassTypeId(void)
{
    return _type.getId();
}

inline
OSG::UInt16 Graphics3DExtrudeBase::getClassGroupId(void)
{
    return _type.getGroupId();
}

/*------------------------------ get -----------------------------------*/


//! Get the value of the Graphics3DExtrude::_sfUIDepth field.
inline
DepthChunk * Graphics3DExtrudeBase::getUIDepth(void) const
{
    return _sfUIDepth.getValue();
}

//! Set the value of the Graphics3DExtrude::_sfUIDepth field.
inline
void Graphics3DExtrudeBase::setUIDepth(DepthChunk * const value)
{
    editSField(UIDepthFieldMask);

    _sfUIDepth.setValue(value);
}
//! Get the value of the Graphics3DExtrude::_sfExtrudeLength field.

inline
Real32 &Graphics3DExtrudeBase::editExtrudeLength(void)
{
    editSField(ExtrudeLengthFieldMask);

    return _sfExtrudeLength.getValue();
}

//! Get the value of the Graphics3DExtrude::_sfExtrudeLength field.
inline
      Real32  Graphics3DExtrudeBase::getExtrudeLength(void) const
{
    return _sfExtrudeLength.getValue();
}

//! Set the value of the Graphics3DExtrude::_sfExtrudeLength field.
inline
void Graphics3DExtrudeBase::setExtrudeLength(const Real32 value)
{
    editSField(ExtrudeLengthFieldMask);

    _sfExtrudeLength.setValue(value);
}
//! Get the value of the Graphics3DExtrude::_sfInternalClipPlaneOffset field.

inline
Real32 &Graphics3DExtrudeBase::editInternalClipPlaneOffset(void)
{
    editSField(InternalClipPlaneOffsetFieldMask);

    return _sfInternalClipPlaneOffset.getValue();
}

//! Get the value of the Graphics3DExtrude::_sfInternalClipPlaneOffset field.
inline
      Real32  Graphics3DExtrudeBase::getInternalClipPlaneOffset(void) const
{
    return _sfInternalClipPlaneOffset.getValue();
}

//! Set the value of the Graphics3DExtrude::_sfInternalClipPlaneOffset field.
inline
void Graphics3DExtrudeBase::setInternalClipPlaneOffset(const Real32 value)
{
    editSField(InternalClipPlaneOffsetFieldMask);

    _sfInternalClipPlaneOffset.setValue(value);
}
//! Get the value of the Graphics3DExtrude::_sfTextOffset field.

inline
Real32 &Graphics3DExtrudeBase::editTextOffset(void)
{
    editSField(TextOffsetFieldMask);

    return _sfTextOffset.getValue();
}

//! Get the value of the Graphics3DExtrude::_sfTextOffset field.
inline
      Real32  Graphics3DExtrudeBase::getTextOffset(void) const
{
    return _sfTextOffset.getValue();
}

//! Set the value of the Graphics3DExtrude::_sfTextOffset field.
inline
void Graphics3DExtrudeBase::setTextOffset(const Real32 value)
{
    editSField(TextOffsetFieldMask);

    _sfTextOffset.setValue(value);
}
//! Get the value of the Graphics3DExtrude::_sfEnable3DText field.

inline
bool &Graphics3DExtrudeBase::editEnable3DText(void)
{
    editSField(Enable3DTextFieldMask);

    return _sfEnable3DText.getValue();
}

//! Get the value of the Graphics3DExtrude::_sfEnable3DText field.
inline
      bool  Graphics3DExtrudeBase::getEnable3DText(void) const
{
    return _sfEnable3DText.getValue();
}

//! Set the value of the Graphics3DExtrude::_sfEnable3DText field.
inline
void Graphics3DExtrudeBase::setEnable3DText(const bool value)
{
    editSField(Enable3DTextFieldMask);

    _sfEnable3DText.setValue(value);
}
//! Get the value of the Graphics3DExtrude::_sfEnableLighting field.

inline
bool &Graphics3DExtrudeBase::editEnableLighting(void)
{
    editSField(EnableLightingFieldMask);

    return _sfEnableLighting.getValue();
}

//! Get the value of the Graphics3DExtrude::_sfEnableLighting field.
inline
      bool  Graphics3DExtrudeBase::getEnableLighting(void) const
{
    return _sfEnableLighting.getValue();
}

//! Set the value of the Graphics3DExtrude::_sfEnableLighting field.
inline
void Graphics3DExtrudeBase::setEnableLighting(const bool value)
{
    editSField(EnableLightingFieldMask);

    _sfEnableLighting.setValue(value);
}

//! Get the value of the Graphics3DExtrude::_sfMaterial field.
inline
Material * Graphics3DExtrudeBase::getMaterial(void) const
{
    return _sfMaterial.getValue();
}

//! Set the value of the Graphics3DExtrude::_sfMaterial field.
inline
void Graphics3DExtrudeBase::setMaterial(Material * const value)
{
    editSField(MaterialFieldMask);

    _sfMaterial.setValue(value);
}


#ifdef OSG_MT_CPTR_ASPECT
inline
void Graphics3DExtrudeBase::execSync (      Graphics3DExtrudeBase *pFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    Inherited::execSync(pFrom, whichField, oOffsets, syncMode, uiSyncInfo);

    if(FieldBits::NoField != (UIDepthFieldMask & whichField))
        _sfUIDepth.syncWith(pFrom->_sfUIDepth);

    if(FieldBits::NoField != (ExtrudeLengthFieldMask & whichField))
        _sfExtrudeLength.syncWith(pFrom->_sfExtrudeLength);

    if(FieldBits::NoField != (InternalClipPlaneOffsetFieldMask & whichField))
        _sfInternalClipPlaneOffset.syncWith(pFrom->_sfInternalClipPlaneOffset);

    if(FieldBits::NoField != (TextOffsetFieldMask & whichField))
        _sfTextOffset.syncWith(pFrom->_sfTextOffset);

    if(FieldBits::NoField != (Enable3DTextFieldMask & whichField))
        _sfEnable3DText.syncWith(pFrom->_sfEnable3DText);

    if(FieldBits::NoField != (EnableLightingFieldMask & whichField))
        _sfEnableLighting.syncWith(pFrom->_sfEnableLighting);

    if(FieldBits::NoField != (MaterialFieldMask & whichField))
        _sfMaterial.syncWith(pFrom->_sfMaterial);
}
#endif


inline
const Char8 *Graphics3DExtrudeBase::getClassname(void)
{
    return "Graphics3DExtrude";
}
OSG_GEN_CONTAINERPTR(Graphics3DExtrude);

OSG_END_NAMESPACE

