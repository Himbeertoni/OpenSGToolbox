/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact:  David Kabala (djkabala@gmail.com)                             *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class Graphics!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>
#include <boost/assign/list_of.hpp>

#include "OSGConfig.h"




#include "OSGGraphicsBase.h"
#include "OSGGraphics.h"

#include <boost/bind.hpp>

#ifdef WIN32 // turn off 'this' : used in base member initializer list warning
#pragma warning(disable:4355)
#endif

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::Graphics
    A UI Graphics Interface.
 */

/***************************************************************************\
 *                        Field Documentation                              *
\***************************************************************************/

/*! \var Real32          GraphicsBase::_sfOpacity
    
*/

/*! \var bool            GraphicsBase::_sfEnablePointAntiAliasing
    
*/

/*! \var bool            GraphicsBase::_sfEnableLineAntiAliasing
    
*/

/*! \var bool            GraphicsBase::_sfEnablePolygonAntiAliasing
    
*/


/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldTraits<Graphics *>::_type("GraphicsPtr", "AttachmentContainerPtr");
#endif

OSG_FIELDTRAITS_GETTYPE(Graphics *)

OSG_EXPORT_PTR_SFIELD_FULL(PointerSField,
                           Graphics *,
                           0);

OSG_EXPORT_PTR_MFIELD_FULL(PointerMField,
                           Graphics *,
                           0);

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

void GraphicsBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new SFReal32::Description(
        SFReal32::getClassType(),
        "Opacity",
        "",
        OpacityFieldId, OpacityFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&Graphics::editHandleOpacity),
        static_cast<FieldGetMethodSig >(&Graphics::getHandleOpacity));

    oType.addInitialDesc(pDesc);

    pDesc = new SFBool::Description(
        SFBool::getClassType(),
        "EnablePointAntiAliasing",
        "",
        EnablePointAntiAliasingFieldId, EnablePointAntiAliasingFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&Graphics::editHandleEnablePointAntiAliasing),
        static_cast<FieldGetMethodSig >(&Graphics::getHandleEnablePointAntiAliasing));

    oType.addInitialDesc(pDesc);

    pDesc = new SFBool::Description(
        SFBool::getClassType(),
        "EnableLineAntiAliasing",
        "",
        EnableLineAntiAliasingFieldId, EnableLineAntiAliasingFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&Graphics::editHandleEnableLineAntiAliasing),
        static_cast<FieldGetMethodSig >(&Graphics::getHandleEnableLineAntiAliasing));

    oType.addInitialDesc(pDesc);

    pDesc = new SFBool::Description(
        SFBool::getClassType(),
        "EnablePolygonAntiAliasing",
        "",
        EnablePolygonAntiAliasingFieldId, EnablePolygonAntiAliasingFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&Graphics::editHandleEnablePolygonAntiAliasing),
        static_cast<FieldGetMethodSig >(&Graphics::getHandleEnablePolygonAntiAliasing));

    oType.addInitialDesc(pDesc);
}


GraphicsBase::TypeObject GraphicsBase::_type(
    GraphicsBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    0,
    NULL,
    Graphics::initMethod,
    Graphics::exitMethod,
    reinterpret_cast<InitalInsertDescFunc>(&Graphics::classDescInserter),
    false,
    0,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "\tname=\"Graphics\"\n"
    "\tparent=\"AttachmentContainer\"\n"
    "    library=\"ContribUserInterface\"\n"
    "    pointerfieldtypes=\"both\"\n"
    "\tstructure=\"abstract\"\n"
    "    systemcomponent=\"true\"\n"
    "    parentsystemcomponent=\"true\"\n"
    "    decoratable=\"false\"\n"
    "    useLocalIncludes=\"false\"\n"
    "    isNodeCore=\"false\"\n"
    "    authors=\"David Kabala (djkabala@gmail.com)                             \"\n"
    ">\n"
    "A UI Graphics Interface.\n"
    "\t<Field\n"
    "\t\tname=\"Opacity\"\n"
    "\t\ttype=\"Real32\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"1.0\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"EnablePointAntiAliasing\"\n"
    "\t\ttype=\"bool\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"true\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"EnableLineAntiAliasing\"\n"
    "\t\ttype=\"bool\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"true\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"EnablePolygonAntiAliasing\"\n"
    "\t\ttype=\"bool\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"false\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "</FieldContainer>\n",
    "A UI Graphics Interface.\n"
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &GraphicsBase::getType(void)
{
    return _type;
}

const FieldContainerType &GraphicsBase::getType(void) const
{
    return _type;
}

UInt32 GraphicsBase::getContainerSize(void) const
{
    return sizeof(Graphics);
}

/*------------------------- decorator get ------------------------------*/


SFReal32 *GraphicsBase::editSFOpacity(void)
{
    editSField(OpacityFieldMask);

    return &_sfOpacity;
}

const SFReal32 *GraphicsBase::getSFOpacity(void) const
{
    return &_sfOpacity;
}


SFBool *GraphicsBase::editSFEnablePointAntiAliasing(void)
{
    editSField(EnablePointAntiAliasingFieldMask);

    return &_sfEnablePointAntiAliasing;
}

const SFBool *GraphicsBase::getSFEnablePointAntiAliasing(void) const
{
    return &_sfEnablePointAntiAliasing;
}


SFBool *GraphicsBase::editSFEnableLineAntiAliasing(void)
{
    editSField(EnableLineAntiAliasingFieldMask);

    return &_sfEnableLineAntiAliasing;
}

const SFBool *GraphicsBase::getSFEnableLineAntiAliasing(void) const
{
    return &_sfEnableLineAntiAliasing;
}


SFBool *GraphicsBase::editSFEnablePolygonAntiAliasing(void)
{
    editSField(EnablePolygonAntiAliasingFieldMask);

    return &_sfEnablePolygonAntiAliasing;
}

const SFBool *GraphicsBase::getSFEnablePolygonAntiAliasing(void) const
{
    return &_sfEnablePolygonAntiAliasing;
}






/*------------------------------ access -----------------------------------*/

UInt32 GraphicsBase::getBinSize(ConstFieldMaskArg whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (OpacityFieldMask & whichField))
    {
        returnValue += _sfOpacity.getBinSize();
    }
    if(FieldBits::NoField != (EnablePointAntiAliasingFieldMask & whichField))
    {
        returnValue += _sfEnablePointAntiAliasing.getBinSize();
    }
    if(FieldBits::NoField != (EnableLineAntiAliasingFieldMask & whichField))
    {
        returnValue += _sfEnableLineAntiAliasing.getBinSize();
    }
    if(FieldBits::NoField != (EnablePolygonAntiAliasingFieldMask & whichField))
    {
        returnValue += _sfEnablePolygonAntiAliasing.getBinSize();
    }

    return returnValue;
}

void GraphicsBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (OpacityFieldMask & whichField))
    {
        _sfOpacity.copyToBin(pMem);
    }
    if(FieldBits::NoField != (EnablePointAntiAliasingFieldMask & whichField))
    {
        _sfEnablePointAntiAliasing.copyToBin(pMem);
    }
    if(FieldBits::NoField != (EnableLineAntiAliasingFieldMask & whichField))
    {
        _sfEnableLineAntiAliasing.copyToBin(pMem);
    }
    if(FieldBits::NoField != (EnablePolygonAntiAliasingFieldMask & whichField))
    {
        _sfEnablePolygonAntiAliasing.copyToBin(pMem);
    }
}

void GraphicsBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (OpacityFieldMask & whichField))
    {
        _sfOpacity.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (EnablePointAntiAliasingFieldMask & whichField))
    {
        _sfEnablePointAntiAliasing.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (EnableLineAntiAliasingFieldMask & whichField))
    {
        _sfEnableLineAntiAliasing.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (EnablePolygonAntiAliasingFieldMask & whichField))
    {
        _sfEnablePolygonAntiAliasing.copyFromBin(pMem);
    }
}




/*------------------------- constructors ----------------------------------*/

GraphicsBase::GraphicsBase(void) :
    Inherited(),
    _sfOpacity                (Real32(1.0)),
    _sfEnablePointAntiAliasing(bool(true)),
    _sfEnableLineAntiAliasing (bool(true)),
    _sfEnablePolygonAntiAliasing(bool(false))
{
}

GraphicsBase::GraphicsBase(const GraphicsBase &source) :
    Inherited(source),
    _sfOpacity                (source._sfOpacity                ),
    _sfEnablePointAntiAliasing(source._sfEnablePointAntiAliasing),
    _sfEnableLineAntiAliasing (source._sfEnableLineAntiAliasing ),
    _sfEnablePolygonAntiAliasing(source._sfEnablePolygonAntiAliasing)
{
}


/*-------------------------- destructors ----------------------------------*/

GraphicsBase::~GraphicsBase(void)
{
}


GetFieldHandlePtr GraphicsBase::getHandleOpacity         (void) const
{
    SFReal32::GetHandlePtr returnValue(
        new  SFReal32::GetHandle(
             &_sfOpacity,
             this->getType().getFieldDesc(OpacityFieldId),
             const_cast<GraphicsBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr GraphicsBase::editHandleOpacity        (void)
{
    SFReal32::EditHandlePtr returnValue(
        new  SFReal32::EditHandle(
             &_sfOpacity,
             this->getType().getFieldDesc(OpacityFieldId),
             this));


    editSField(OpacityFieldMask);

    return returnValue;
}

GetFieldHandlePtr GraphicsBase::getHandleEnablePointAntiAliasing (void) const
{
    SFBool::GetHandlePtr returnValue(
        new  SFBool::GetHandle(
             &_sfEnablePointAntiAliasing,
             this->getType().getFieldDesc(EnablePointAntiAliasingFieldId),
             const_cast<GraphicsBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr GraphicsBase::editHandleEnablePointAntiAliasing(void)
{
    SFBool::EditHandlePtr returnValue(
        new  SFBool::EditHandle(
             &_sfEnablePointAntiAliasing,
             this->getType().getFieldDesc(EnablePointAntiAliasingFieldId),
             this));


    editSField(EnablePointAntiAliasingFieldMask);

    return returnValue;
}

GetFieldHandlePtr GraphicsBase::getHandleEnableLineAntiAliasing (void) const
{
    SFBool::GetHandlePtr returnValue(
        new  SFBool::GetHandle(
             &_sfEnableLineAntiAliasing,
             this->getType().getFieldDesc(EnableLineAntiAliasingFieldId),
             const_cast<GraphicsBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr GraphicsBase::editHandleEnableLineAntiAliasing(void)
{
    SFBool::EditHandlePtr returnValue(
        new  SFBool::EditHandle(
             &_sfEnableLineAntiAliasing,
             this->getType().getFieldDesc(EnableLineAntiAliasingFieldId),
             this));


    editSField(EnableLineAntiAliasingFieldMask);

    return returnValue;
}

GetFieldHandlePtr GraphicsBase::getHandleEnablePolygonAntiAliasing (void) const
{
    SFBool::GetHandlePtr returnValue(
        new  SFBool::GetHandle(
             &_sfEnablePolygonAntiAliasing,
             this->getType().getFieldDesc(EnablePolygonAntiAliasingFieldId),
             const_cast<GraphicsBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr GraphicsBase::editHandleEnablePolygonAntiAliasing(void)
{
    SFBool::EditHandlePtr returnValue(
        new  SFBool::EditHandle(
             &_sfEnablePolygonAntiAliasing,
             this->getType().getFieldDesc(EnablePolygonAntiAliasingFieldId),
             this));


    editSField(EnablePolygonAntiAliasingFieldMask);

    return returnValue;
}


#ifdef OSG_MT_CPTR_ASPECT
void GraphicsBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    Graphics *pThis = static_cast<Graphics *>(this);

    pThis->execSync(static_cast<Graphics *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif



void GraphicsBase::resolveLinks(void)
{
    Inherited::resolveLinks();


}


OSG_END_NAMESPACE
