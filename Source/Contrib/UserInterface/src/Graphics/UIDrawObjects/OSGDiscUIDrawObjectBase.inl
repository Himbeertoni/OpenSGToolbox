/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *   contact:  David Kabala (djkabala@gmail.com)                             *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class DiscUIDrawObject!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

OSG_BEGIN_NAMESPACE


//! access the type of the class
inline
OSG::FieldContainerType &DiscUIDrawObjectBase::getClassType(void)
{
    return _type;
}

//! access the numerical type of the class
inline
OSG::UInt32 DiscUIDrawObjectBase::getClassTypeId(void)
{
    return _type.getId();
}

inline
OSG::UInt16 DiscUIDrawObjectBase::getClassGroupId(void)
{
    return _type.getGroupId();
}

/*------------------------------ get -----------------------------------*/

//! Get the value of the DiscUIDrawObject::_sfCenter field.

inline
Pnt2f &DiscUIDrawObjectBase::editCenter(void)
{
    editSField(CenterFieldMask);

    return _sfCenter.getValue();
}

//! Get the value of the DiscUIDrawObject::_sfCenter field.
inline
const Pnt2f &DiscUIDrawObjectBase::getCenter(void) const
{
    return _sfCenter.getValue();
}

//! Set the value of the DiscUIDrawObject::_sfCenter field.
inline
void DiscUIDrawObjectBase::setCenter(const Pnt2f &value)
{
    editSField(CenterFieldMask);

    _sfCenter.setValue(value);
}
//! Get the value of the DiscUIDrawObject::_sfWidth field.

inline
Real32 &DiscUIDrawObjectBase::editWidth(void)
{
    editSField(WidthFieldMask);

    return _sfWidth.getValue();
}

//! Get the value of the DiscUIDrawObject::_sfWidth field.
inline
      Real32  DiscUIDrawObjectBase::getWidth(void) const
{
    return _sfWidth.getValue();
}

//! Set the value of the DiscUIDrawObject::_sfWidth field.
inline
void DiscUIDrawObjectBase::setWidth(const Real32 value)
{
    editSField(WidthFieldMask);

    _sfWidth.setValue(value);
}
//! Get the value of the DiscUIDrawObject::_sfHeight field.

inline
Real32 &DiscUIDrawObjectBase::editHeight(void)
{
    editSField(HeightFieldMask);

    return _sfHeight.getValue();
}

//! Get the value of the DiscUIDrawObject::_sfHeight field.
inline
      Real32  DiscUIDrawObjectBase::getHeight(void) const
{
    return _sfHeight.getValue();
}

//! Set the value of the DiscUIDrawObject::_sfHeight field.
inline
void DiscUIDrawObjectBase::setHeight(const Real32 value)
{
    editSField(HeightFieldMask);

    _sfHeight.setValue(value);
}
//! Get the value of the DiscUIDrawObject::_sfStartAngleRad field.

inline
Real32 &DiscUIDrawObjectBase::editStartAngleRad(void)
{
    editSField(StartAngleRadFieldMask);

    return _sfStartAngleRad.getValue();
}

//! Get the value of the DiscUIDrawObject::_sfStartAngleRad field.
inline
      Real32  DiscUIDrawObjectBase::getStartAngleRad(void) const
{
    return _sfStartAngleRad.getValue();
}

//! Set the value of the DiscUIDrawObject::_sfStartAngleRad field.
inline
void DiscUIDrawObjectBase::setStartAngleRad(const Real32 value)
{
    editSField(StartAngleRadFieldMask);

    _sfStartAngleRad.setValue(value);
}
//! Get the value of the DiscUIDrawObject::_sfEndAngleRad field.

inline
Real32 &DiscUIDrawObjectBase::editEndAngleRad(void)
{
    editSField(EndAngleRadFieldMask);

    return _sfEndAngleRad.getValue();
}

//! Get the value of the DiscUIDrawObject::_sfEndAngleRad field.
inline
      Real32  DiscUIDrawObjectBase::getEndAngleRad(void) const
{
    return _sfEndAngleRad.getValue();
}

//! Set the value of the DiscUIDrawObject::_sfEndAngleRad field.
inline
void DiscUIDrawObjectBase::setEndAngleRad(const Real32 value)
{
    editSField(EndAngleRadFieldMask);

    _sfEndAngleRad.setValue(value);
}
//! Get the value of the DiscUIDrawObject::_sfSubDivisions field.

inline
UInt16 &DiscUIDrawObjectBase::editSubDivisions(void)
{
    editSField(SubDivisionsFieldMask);

    return _sfSubDivisions.getValue();
}

//! Get the value of the DiscUIDrawObject::_sfSubDivisions field.
inline
      UInt16  DiscUIDrawObjectBase::getSubDivisions(void) const
{
    return _sfSubDivisions.getValue();
}

//! Set the value of the DiscUIDrawObject::_sfSubDivisions field.
inline
void DiscUIDrawObjectBase::setSubDivisions(const UInt16 value)
{
    editSField(SubDivisionsFieldMask);

    _sfSubDivisions.setValue(value);
}
//! Get the value of the DiscUIDrawObject::_sfCenterColor field.

inline
Color4f &DiscUIDrawObjectBase::editCenterColor(void)
{
    editSField(CenterColorFieldMask);

    return _sfCenterColor.getValue();
}

//! Get the value of the DiscUIDrawObject::_sfCenterColor field.
inline
const Color4f &DiscUIDrawObjectBase::getCenterColor(void) const
{
    return _sfCenterColor.getValue();
}

//! Set the value of the DiscUIDrawObject::_sfCenterColor field.
inline
void DiscUIDrawObjectBase::setCenterColor(const Color4f &value)
{
    editSField(CenterColorFieldMask);

    _sfCenterColor.setValue(value);
}
//! Get the value of the DiscUIDrawObject::_sfOuterColor field.

inline
Color4f &DiscUIDrawObjectBase::editOuterColor(void)
{
    editSField(OuterColorFieldMask);

    return _sfOuterColor.getValue();
}

//! Get the value of the DiscUIDrawObject::_sfOuterColor field.
inline
const Color4f &DiscUIDrawObjectBase::getOuterColor(void) const
{
    return _sfOuterColor.getValue();
}

//! Set the value of the DiscUIDrawObject::_sfOuterColor field.
inline
void DiscUIDrawObjectBase::setOuterColor(const Color4f &value)
{
    editSField(OuterColorFieldMask);

    _sfOuterColor.setValue(value);
}
//! Get the value of the DiscUIDrawObject::_sfOpacity field.

inline
Real32 &DiscUIDrawObjectBase::editOpacity(void)
{
    editSField(OpacityFieldMask);

    return _sfOpacity.getValue();
}

//! Get the value of the DiscUIDrawObject::_sfOpacity field.
inline
      Real32  DiscUIDrawObjectBase::getOpacity(void) const
{
    return _sfOpacity.getValue();
}

//! Set the value of the DiscUIDrawObject::_sfOpacity field.
inline
void DiscUIDrawObjectBase::setOpacity(const Real32 value)
{
    editSField(OpacityFieldMask);

    _sfOpacity.setValue(value);
}


#ifdef OSG_MT_CPTR_ASPECT
inline
void DiscUIDrawObjectBase::execSync (      DiscUIDrawObjectBase *pFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    Inherited::execSync(pFrom, whichField, oOffsets, syncMode, uiSyncInfo);

    if(FieldBits::NoField != (CenterFieldMask & whichField))
        _sfCenter.syncWith(pFrom->_sfCenter);

    if(FieldBits::NoField != (WidthFieldMask & whichField))
        _sfWidth.syncWith(pFrom->_sfWidth);

    if(FieldBits::NoField != (HeightFieldMask & whichField))
        _sfHeight.syncWith(pFrom->_sfHeight);

    if(FieldBits::NoField != (StartAngleRadFieldMask & whichField))
        _sfStartAngleRad.syncWith(pFrom->_sfStartAngleRad);

    if(FieldBits::NoField != (EndAngleRadFieldMask & whichField))
        _sfEndAngleRad.syncWith(pFrom->_sfEndAngleRad);

    if(FieldBits::NoField != (SubDivisionsFieldMask & whichField))
        _sfSubDivisions.syncWith(pFrom->_sfSubDivisions);

    if(FieldBits::NoField != (CenterColorFieldMask & whichField))
        _sfCenterColor.syncWith(pFrom->_sfCenterColor);

    if(FieldBits::NoField != (OuterColorFieldMask & whichField))
        _sfOuterColor.syncWith(pFrom->_sfOuterColor);

    if(FieldBits::NoField != (OpacityFieldMask & whichField))
        _sfOpacity.syncWith(pFrom->_sfOpacity);
}
#endif


inline
const Char8 *DiscUIDrawObjectBase::getClassname(void)
{
    return "DiscUIDrawObject";
}
OSG_GEN_CONTAINERPTR(DiscUIDrawObject);

OSG_END_NAMESPACE

