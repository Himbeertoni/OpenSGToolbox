/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact:  David Kabala (djkabala@gmail.com)                             *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class MultiColoredQuadUIDrawObject!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>
#include <boost/assign/list_of.hpp>

#include "OSGConfig.h"




#include "OSGMultiColoredQuadUIDrawObjectBase.h"
#include "OSGMultiColoredQuadUIDrawObject.h"

#include <boost/bind.hpp>

#ifdef WIN32 // turn off 'this' : used in base member initializer list warning
#pragma warning(disable:4355)
#endif

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::MultiColoredQuadUIDrawObject
    A UI MultiColoredQuadUIDrawObject.
 */

/***************************************************************************\
 *                        Field Documentation                              *
\***************************************************************************/

/*! \var Pnt2f           MultiColoredQuadUIDrawObjectBase::_sfPoint1
    
*/

/*! \var Pnt2f           MultiColoredQuadUIDrawObjectBase::_sfPoint2
    
*/

/*! \var Pnt2f           MultiColoredQuadUIDrawObjectBase::_sfPoint3
    
*/

/*! \var Pnt2f           MultiColoredQuadUIDrawObjectBase::_sfPoint4
    
*/

/*! \var Color4f         MultiColoredQuadUIDrawObjectBase::_sfColor1
    
*/

/*! \var Color4f         MultiColoredQuadUIDrawObjectBase::_sfColor2
    
*/

/*! \var Color4f         MultiColoredQuadUIDrawObjectBase::_sfColor3
    
*/

/*! \var Color4f         MultiColoredQuadUIDrawObjectBase::_sfColor4
    
*/

/*! \var Real32          MultiColoredQuadUIDrawObjectBase::_sfOpacity
    
*/


/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldTraits<MultiColoredQuadUIDrawObject *>::_type("MultiColoredQuadUIDrawObjectPtr", "UIDrawObjectPtr");
#endif

OSG_FIELDTRAITS_GETTYPE(MultiColoredQuadUIDrawObject *)

OSG_EXPORT_PTR_SFIELD_FULL(PointerSField,
                           MultiColoredQuadUIDrawObject *,
                           0);

OSG_EXPORT_PTR_MFIELD_FULL(PointerMField,
                           MultiColoredQuadUIDrawObject *,
                           0);

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

void MultiColoredQuadUIDrawObjectBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new SFPnt2f::Description(
        SFPnt2f::getClassType(),
        "Point1",
        "",
        Point1FieldId, Point1FieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&MultiColoredQuadUIDrawObject::editHandlePoint1),
        static_cast<FieldGetMethodSig >(&MultiColoredQuadUIDrawObject::getHandlePoint1));

    oType.addInitialDesc(pDesc);

    pDesc = new SFPnt2f::Description(
        SFPnt2f::getClassType(),
        "Point2",
        "",
        Point2FieldId, Point2FieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&MultiColoredQuadUIDrawObject::editHandlePoint2),
        static_cast<FieldGetMethodSig >(&MultiColoredQuadUIDrawObject::getHandlePoint2));

    oType.addInitialDesc(pDesc);

    pDesc = new SFPnt2f::Description(
        SFPnt2f::getClassType(),
        "Point3",
        "",
        Point3FieldId, Point3FieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&MultiColoredQuadUIDrawObject::editHandlePoint3),
        static_cast<FieldGetMethodSig >(&MultiColoredQuadUIDrawObject::getHandlePoint3));

    oType.addInitialDesc(pDesc);

    pDesc = new SFPnt2f::Description(
        SFPnt2f::getClassType(),
        "Point4",
        "",
        Point4FieldId, Point4FieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&MultiColoredQuadUIDrawObject::editHandlePoint4),
        static_cast<FieldGetMethodSig >(&MultiColoredQuadUIDrawObject::getHandlePoint4));

    oType.addInitialDesc(pDesc);

    pDesc = new SFColor4f::Description(
        SFColor4f::getClassType(),
        "Color1",
        "",
        Color1FieldId, Color1FieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&MultiColoredQuadUIDrawObject::editHandleColor1),
        static_cast<FieldGetMethodSig >(&MultiColoredQuadUIDrawObject::getHandleColor1));

    oType.addInitialDesc(pDesc);

    pDesc = new SFColor4f::Description(
        SFColor4f::getClassType(),
        "Color2",
        "",
        Color2FieldId, Color2FieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&MultiColoredQuadUIDrawObject::editHandleColor2),
        static_cast<FieldGetMethodSig >(&MultiColoredQuadUIDrawObject::getHandleColor2));

    oType.addInitialDesc(pDesc);

    pDesc = new SFColor4f::Description(
        SFColor4f::getClassType(),
        "Color3",
        "",
        Color3FieldId, Color3FieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&MultiColoredQuadUIDrawObject::editHandleColor3),
        static_cast<FieldGetMethodSig >(&MultiColoredQuadUIDrawObject::getHandleColor3));

    oType.addInitialDesc(pDesc);

    pDesc = new SFColor4f::Description(
        SFColor4f::getClassType(),
        "Color4",
        "",
        Color4FieldId, Color4FieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&MultiColoredQuadUIDrawObject::editHandleColor4),
        static_cast<FieldGetMethodSig >(&MultiColoredQuadUIDrawObject::getHandleColor4));

    oType.addInitialDesc(pDesc);

    pDesc = new SFReal32::Description(
        SFReal32::getClassType(),
        "Opacity",
        "",
        OpacityFieldId, OpacityFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&MultiColoredQuadUIDrawObject::editHandleOpacity),
        static_cast<FieldGetMethodSig >(&MultiColoredQuadUIDrawObject::getHandleOpacity));

    oType.addInitialDesc(pDesc);
}


MultiColoredQuadUIDrawObjectBase::TypeObject MultiColoredQuadUIDrawObjectBase::_type(
    MultiColoredQuadUIDrawObjectBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    0,
    reinterpret_cast<PrototypeCreateF>(&MultiColoredQuadUIDrawObjectBase::createEmptyLocal),
    MultiColoredQuadUIDrawObject::initMethod,
    MultiColoredQuadUIDrawObject::exitMethod,
    reinterpret_cast<InitalInsertDescFunc>(&MultiColoredQuadUIDrawObject::classDescInserter),
    false,
    0,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "\tname=\"MultiColoredQuadUIDrawObject\"\n"
    "\tparent=\"UIDrawObject\"\n"
    "    library=\"ContribUserInterface\"\n"
    "    pointerfieldtypes=\"both\"\n"
    "\tstructure=\"concrete\"\n"
    "    systemcomponent=\"true\"\n"
    "    parentsystemcomponent=\"true\"\n"
    "    decoratable=\"false\"\n"
    "    useLocalIncludes=\"false\"\n"
    "    isNodeCore=\"false\"\n"
    "    authors=\"David Kabala (djkabala@gmail.com)                             \"\n"
    ">\n"
    "A UI MultiColoredQuadUIDrawObject.\n"
    "\t<Field\n"
    "\t\tname=\"Point1\"\n"
    "\t\ttype=\"Pnt2f\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t\tdefaultValue=\"0,0\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"Point2\"\n"
    "\t\ttype=\"Pnt2f\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t\tdefaultValue=\"0,1\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"Point3\"\n"
    "\t\ttype=\"Pnt2f\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t\tdefaultValue=\"1,1\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"Point4\"\n"
    "\t\ttype=\"Pnt2f\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t\tdefaultValue=\"1,0\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"Color1\"\n"
    "\t\ttype=\"Color4f\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t\tdefaultValue=\"1.0,1.0,1.0,1.0\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"Color2\"\n"
    "\t\ttype=\"Color4f\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t\tdefaultValue=\"1.0,1.0,1.0,1.0\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"Color3\"\n"
    "\t\ttype=\"Color4f\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t\tdefaultValue=\"1.0,1.0,1.0,1.0\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"Color4\"\n"
    "\t\ttype=\"Color4f\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t\tdefaultValue=\"1.0,1.0,1.0,1.0\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"Opacity\"\n"
    "\t\ttype=\"Real32\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t\tdefaultValue=\"1.0\"\n"
    "\t>\n"
    "\t</Field>\n"
    "</FieldContainer>\n",
    "A UI MultiColoredQuadUIDrawObject.\n"
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &MultiColoredQuadUIDrawObjectBase::getType(void)
{
    return _type;
}

const FieldContainerType &MultiColoredQuadUIDrawObjectBase::getType(void) const
{
    return _type;
}

UInt32 MultiColoredQuadUIDrawObjectBase::getContainerSize(void) const
{
    return sizeof(MultiColoredQuadUIDrawObject);
}

/*------------------------- decorator get ------------------------------*/


SFPnt2f *MultiColoredQuadUIDrawObjectBase::editSFPoint1(void)
{
    editSField(Point1FieldMask);

    return &_sfPoint1;
}

const SFPnt2f *MultiColoredQuadUIDrawObjectBase::getSFPoint1(void) const
{
    return &_sfPoint1;
}


SFPnt2f *MultiColoredQuadUIDrawObjectBase::editSFPoint2(void)
{
    editSField(Point2FieldMask);

    return &_sfPoint2;
}

const SFPnt2f *MultiColoredQuadUIDrawObjectBase::getSFPoint2(void) const
{
    return &_sfPoint2;
}


SFPnt2f *MultiColoredQuadUIDrawObjectBase::editSFPoint3(void)
{
    editSField(Point3FieldMask);

    return &_sfPoint3;
}

const SFPnt2f *MultiColoredQuadUIDrawObjectBase::getSFPoint3(void) const
{
    return &_sfPoint3;
}


SFPnt2f *MultiColoredQuadUIDrawObjectBase::editSFPoint4(void)
{
    editSField(Point4FieldMask);

    return &_sfPoint4;
}

const SFPnt2f *MultiColoredQuadUIDrawObjectBase::getSFPoint4(void) const
{
    return &_sfPoint4;
}


SFColor4f *MultiColoredQuadUIDrawObjectBase::editSFColor1(void)
{
    editSField(Color1FieldMask);

    return &_sfColor1;
}

const SFColor4f *MultiColoredQuadUIDrawObjectBase::getSFColor1(void) const
{
    return &_sfColor1;
}


SFColor4f *MultiColoredQuadUIDrawObjectBase::editSFColor2(void)
{
    editSField(Color2FieldMask);

    return &_sfColor2;
}

const SFColor4f *MultiColoredQuadUIDrawObjectBase::getSFColor2(void) const
{
    return &_sfColor2;
}


SFColor4f *MultiColoredQuadUIDrawObjectBase::editSFColor3(void)
{
    editSField(Color3FieldMask);

    return &_sfColor3;
}

const SFColor4f *MultiColoredQuadUIDrawObjectBase::getSFColor3(void) const
{
    return &_sfColor3;
}


SFColor4f *MultiColoredQuadUIDrawObjectBase::editSFColor4(void)
{
    editSField(Color4FieldMask);

    return &_sfColor4;
}

const SFColor4f *MultiColoredQuadUIDrawObjectBase::getSFColor4(void) const
{
    return &_sfColor4;
}


SFReal32 *MultiColoredQuadUIDrawObjectBase::editSFOpacity(void)
{
    editSField(OpacityFieldMask);

    return &_sfOpacity;
}

const SFReal32 *MultiColoredQuadUIDrawObjectBase::getSFOpacity(void) const
{
    return &_sfOpacity;
}






/*------------------------------ access -----------------------------------*/

UInt32 MultiColoredQuadUIDrawObjectBase::getBinSize(ConstFieldMaskArg whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (Point1FieldMask & whichField))
    {
        returnValue += _sfPoint1.getBinSize();
    }
    if(FieldBits::NoField != (Point2FieldMask & whichField))
    {
        returnValue += _sfPoint2.getBinSize();
    }
    if(FieldBits::NoField != (Point3FieldMask & whichField))
    {
        returnValue += _sfPoint3.getBinSize();
    }
    if(FieldBits::NoField != (Point4FieldMask & whichField))
    {
        returnValue += _sfPoint4.getBinSize();
    }
    if(FieldBits::NoField != (Color1FieldMask & whichField))
    {
        returnValue += _sfColor1.getBinSize();
    }
    if(FieldBits::NoField != (Color2FieldMask & whichField))
    {
        returnValue += _sfColor2.getBinSize();
    }
    if(FieldBits::NoField != (Color3FieldMask & whichField))
    {
        returnValue += _sfColor3.getBinSize();
    }
    if(FieldBits::NoField != (Color4FieldMask & whichField))
    {
        returnValue += _sfColor4.getBinSize();
    }
    if(FieldBits::NoField != (OpacityFieldMask & whichField))
    {
        returnValue += _sfOpacity.getBinSize();
    }

    return returnValue;
}

void MultiColoredQuadUIDrawObjectBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (Point1FieldMask & whichField))
    {
        _sfPoint1.copyToBin(pMem);
    }
    if(FieldBits::NoField != (Point2FieldMask & whichField))
    {
        _sfPoint2.copyToBin(pMem);
    }
    if(FieldBits::NoField != (Point3FieldMask & whichField))
    {
        _sfPoint3.copyToBin(pMem);
    }
    if(FieldBits::NoField != (Point4FieldMask & whichField))
    {
        _sfPoint4.copyToBin(pMem);
    }
    if(FieldBits::NoField != (Color1FieldMask & whichField))
    {
        _sfColor1.copyToBin(pMem);
    }
    if(FieldBits::NoField != (Color2FieldMask & whichField))
    {
        _sfColor2.copyToBin(pMem);
    }
    if(FieldBits::NoField != (Color3FieldMask & whichField))
    {
        _sfColor3.copyToBin(pMem);
    }
    if(FieldBits::NoField != (Color4FieldMask & whichField))
    {
        _sfColor4.copyToBin(pMem);
    }
    if(FieldBits::NoField != (OpacityFieldMask & whichField))
    {
        _sfOpacity.copyToBin(pMem);
    }
}

void MultiColoredQuadUIDrawObjectBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (Point1FieldMask & whichField))
    {
        _sfPoint1.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (Point2FieldMask & whichField))
    {
        _sfPoint2.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (Point3FieldMask & whichField))
    {
        _sfPoint3.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (Point4FieldMask & whichField))
    {
        _sfPoint4.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (Color1FieldMask & whichField))
    {
        _sfColor1.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (Color2FieldMask & whichField))
    {
        _sfColor2.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (Color3FieldMask & whichField))
    {
        _sfColor3.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (Color4FieldMask & whichField))
    {
        _sfColor4.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (OpacityFieldMask & whichField))
    {
        _sfOpacity.copyFromBin(pMem);
    }
}

//! create a new instance of the class
MultiColoredQuadUIDrawObjectTransitPtr MultiColoredQuadUIDrawObjectBase::createLocal(BitVector bFlags)
{
    MultiColoredQuadUIDrawObjectTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyLocal(bFlags);

        fc = dynamic_pointer_cast<MultiColoredQuadUIDrawObject>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class, copy the container flags
MultiColoredQuadUIDrawObjectTransitPtr MultiColoredQuadUIDrawObjectBase::createDependent(BitVector bFlags)
{
    MultiColoredQuadUIDrawObjectTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyDependent(bFlags);

        fc = dynamic_pointer_cast<MultiColoredQuadUIDrawObject>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class
MultiColoredQuadUIDrawObjectTransitPtr MultiColoredQuadUIDrawObjectBase::create(void)
{
    MultiColoredQuadUIDrawObjectTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopy();

        fc = dynamic_pointer_cast<MultiColoredQuadUIDrawObject>(tmpPtr);
    }

    return fc;
}

MultiColoredQuadUIDrawObject *MultiColoredQuadUIDrawObjectBase::createEmptyLocal(BitVector bFlags)
{
    MultiColoredQuadUIDrawObject *returnValue;

    newPtr<MultiColoredQuadUIDrawObject>(returnValue, bFlags);

    returnValue->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

//! create an empty new instance of the class, do not copy the prototype
MultiColoredQuadUIDrawObject *MultiColoredQuadUIDrawObjectBase::createEmpty(void)
{
    MultiColoredQuadUIDrawObject *returnValue;

    newPtr<MultiColoredQuadUIDrawObject>(returnValue, Thread::getCurrentLocalFlags());

    returnValue->_pFieldFlags->_bNamespaceMask &=
        ~Thread::getCurrentLocalFlags();

    return returnValue;
}


FieldContainerTransitPtr MultiColoredQuadUIDrawObjectBase::shallowCopyLocal(
    BitVector bFlags) const
{
    MultiColoredQuadUIDrawObject *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const MultiColoredQuadUIDrawObject *>(this), bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

FieldContainerTransitPtr MultiColoredQuadUIDrawObjectBase::shallowCopyDependent(
    BitVector bFlags) const
{
    MultiColoredQuadUIDrawObject *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const MultiColoredQuadUIDrawObject *>(this), ~bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask = bFlags;

    return returnValue;
}

FieldContainerTransitPtr MultiColoredQuadUIDrawObjectBase::shallowCopy(void) const
{
    MultiColoredQuadUIDrawObject *tmpPtr;

    newPtr(tmpPtr,
           dynamic_cast<const MultiColoredQuadUIDrawObject *>(this),
           Thread::getCurrentLocalFlags());

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~Thread::getCurrentLocalFlags();

    FieldContainerTransitPtr returnValue(tmpPtr);

    return returnValue;
}




/*------------------------- constructors ----------------------------------*/

MultiColoredQuadUIDrawObjectBase::MultiColoredQuadUIDrawObjectBase(void) :
    Inherited(),
    _sfPoint1                 (Pnt2f(0,0)),
    _sfPoint2                 (Pnt2f(0,1)),
    _sfPoint3                 (Pnt2f(1,1)),
    _sfPoint4                 (Pnt2f(1,0)),
    _sfColor1                 (Color4f(1.0,1.0,1.0,1.0)),
    _sfColor2                 (Color4f(1.0,1.0,1.0,1.0)),
    _sfColor3                 (Color4f(1.0,1.0,1.0,1.0)),
    _sfColor4                 (Color4f(1.0,1.0,1.0,1.0)),
    _sfOpacity                (Real32(1.0))
{
}

MultiColoredQuadUIDrawObjectBase::MultiColoredQuadUIDrawObjectBase(const MultiColoredQuadUIDrawObjectBase &source) :
    Inherited(source),
    _sfPoint1                 (source._sfPoint1                 ),
    _sfPoint2                 (source._sfPoint2                 ),
    _sfPoint3                 (source._sfPoint3                 ),
    _sfPoint4                 (source._sfPoint4                 ),
    _sfColor1                 (source._sfColor1                 ),
    _sfColor2                 (source._sfColor2                 ),
    _sfColor3                 (source._sfColor3                 ),
    _sfColor4                 (source._sfColor4                 ),
    _sfOpacity                (source._sfOpacity                )
{
}


/*-------------------------- destructors ----------------------------------*/

MultiColoredQuadUIDrawObjectBase::~MultiColoredQuadUIDrawObjectBase(void)
{
}


GetFieldHandlePtr MultiColoredQuadUIDrawObjectBase::getHandlePoint1          (void) const
{
    SFPnt2f::GetHandlePtr returnValue(
        new  SFPnt2f::GetHandle(
             &_sfPoint1,
             this->getType().getFieldDesc(Point1FieldId),
             const_cast<MultiColoredQuadUIDrawObjectBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr MultiColoredQuadUIDrawObjectBase::editHandlePoint1         (void)
{
    SFPnt2f::EditHandlePtr returnValue(
        new  SFPnt2f::EditHandle(
             &_sfPoint1,
             this->getType().getFieldDesc(Point1FieldId),
             this));


    editSField(Point1FieldMask);

    return returnValue;
}

GetFieldHandlePtr MultiColoredQuadUIDrawObjectBase::getHandlePoint2          (void) const
{
    SFPnt2f::GetHandlePtr returnValue(
        new  SFPnt2f::GetHandle(
             &_sfPoint2,
             this->getType().getFieldDesc(Point2FieldId),
             const_cast<MultiColoredQuadUIDrawObjectBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr MultiColoredQuadUIDrawObjectBase::editHandlePoint2         (void)
{
    SFPnt2f::EditHandlePtr returnValue(
        new  SFPnt2f::EditHandle(
             &_sfPoint2,
             this->getType().getFieldDesc(Point2FieldId),
             this));


    editSField(Point2FieldMask);

    return returnValue;
}

GetFieldHandlePtr MultiColoredQuadUIDrawObjectBase::getHandlePoint3          (void) const
{
    SFPnt2f::GetHandlePtr returnValue(
        new  SFPnt2f::GetHandle(
             &_sfPoint3,
             this->getType().getFieldDesc(Point3FieldId),
             const_cast<MultiColoredQuadUIDrawObjectBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr MultiColoredQuadUIDrawObjectBase::editHandlePoint3         (void)
{
    SFPnt2f::EditHandlePtr returnValue(
        new  SFPnt2f::EditHandle(
             &_sfPoint3,
             this->getType().getFieldDesc(Point3FieldId),
             this));


    editSField(Point3FieldMask);

    return returnValue;
}

GetFieldHandlePtr MultiColoredQuadUIDrawObjectBase::getHandlePoint4          (void) const
{
    SFPnt2f::GetHandlePtr returnValue(
        new  SFPnt2f::GetHandle(
             &_sfPoint4,
             this->getType().getFieldDesc(Point4FieldId),
             const_cast<MultiColoredQuadUIDrawObjectBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr MultiColoredQuadUIDrawObjectBase::editHandlePoint4         (void)
{
    SFPnt2f::EditHandlePtr returnValue(
        new  SFPnt2f::EditHandle(
             &_sfPoint4,
             this->getType().getFieldDesc(Point4FieldId),
             this));


    editSField(Point4FieldMask);

    return returnValue;
}

GetFieldHandlePtr MultiColoredQuadUIDrawObjectBase::getHandleColor1          (void) const
{
    SFColor4f::GetHandlePtr returnValue(
        new  SFColor4f::GetHandle(
             &_sfColor1,
             this->getType().getFieldDesc(Color1FieldId),
             const_cast<MultiColoredQuadUIDrawObjectBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr MultiColoredQuadUIDrawObjectBase::editHandleColor1         (void)
{
    SFColor4f::EditHandlePtr returnValue(
        new  SFColor4f::EditHandle(
             &_sfColor1,
             this->getType().getFieldDesc(Color1FieldId),
             this));


    editSField(Color1FieldMask);

    return returnValue;
}

GetFieldHandlePtr MultiColoredQuadUIDrawObjectBase::getHandleColor2          (void) const
{
    SFColor4f::GetHandlePtr returnValue(
        new  SFColor4f::GetHandle(
             &_sfColor2,
             this->getType().getFieldDesc(Color2FieldId),
             const_cast<MultiColoredQuadUIDrawObjectBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr MultiColoredQuadUIDrawObjectBase::editHandleColor2         (void)
{
    SFColor4f::EditHandlePtr returnValue(
        new  SFColor4f::EditHandle(
             &_sfColor2,
             this->getType().getFieldDesc(Color2FieldId),
             this));


    editSField(Color2FieldMask);

    return returnValue;
}

GetFieldHandlePtr MultiColoredQuadUIDrawObjectBase::getHandleColor3          (void) const
{
    SFColor4f::GetHandlePtr returnValue(
        new  SFColor4f::GetHandle(
             &_sfColor3,
             this->getType().getFieldDesc(Color3FieldId),
             const_cast<MultiColoredQuadUIDrawObjectBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr MultiColoredQuadUIDrawObjectBase::editHandleColor3         (void)
{
    SFColor4f::EditHandlePtr returnValue(
        new  SFColor4f::EditHandle(
             &_sfColor3,
             this->getType().getFieldDesc(Color3FieldId),
             this));


    editSField(Color3FieldMask);

    return returnValue;
}

GetFieldHandlePtr MultiColoredQuadUIDrawObjectBase::getHandleColor4          (void) const
{
    SFColor4f::GetHandlePtr returnValue(
        new  SFColor4f::GetHandle(
             &_sfColor4,
             this->getType().getFieldDesc(Color4FieldId),
             const_cast<MultiColoredQuadUIDrawObjectBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr MultiColoredQuadUIDrawObjectBase::editHandleColor4         (void)
{
    SFColor4f::EditHandlePtr returnValue(
        new  SFColor4f::EditHandle(
             &_sfColor4,
             this->getType().getFieldDesc(Color4FieldId),
             this));


    editSField(Color4FieldMask);

    return returnValue;
}

GetFieldHandlePtr MultiColoredQuadUIDrawObjectBase::getHandleOpacity         (void) const
{
    SFReal32::GetHandlePtr returnValue(
        new  SFReal32::GetHandle(
             &_sfOpacity,
             this->getType().getFieldDesc(OpacityFieldId),
             const_cast<MultiColoredQuadUIDrawObjectBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr MultiColoredQuadUIDrawObjectBase::editHandleOpacity        (void)
{
    SFReal32::EditHandlePtr returnValue(
        new  SFReal32::EditHandle(
             &_sfOpacity,
             this->getType().getFieldDesc(OpacityFieldId),
             this));


    editSField(OpacityFieldMask);

    return returnValue;
}


#ifdef OSG_MT_CPTR_ASPECT
void MultiColoredQuadUIDrawObjectBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    MultiColoredQuadUIDrawObject *pThis = static_cast<MultiColoredQuadUIDrawObject *>(this);

    pThis->execSync(static_cast<MultiColoredQuadUIDrawObject *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif


#ifdef OSG_MT_CPTR_ASPECT
FieldContainer *MultiColoredQuadUIDrawObjectBase::createAspectCopy(
    const FieldContainer *pRefAspect) const
{
    MultiColoredQuadUIDrawObject *returnValue;

    newAspectCopy(returnValue,
                  dynamic_cast<const MultiColoredQuadUIDrawObject *>(pRefAspect),
                  dynamic_cast<const MultiColoredQuadUIDrawObject *>(this));

    return returnValue;
}
#endif

void MultiColoredQuadUIDrawObjectBase::resolveLinks(void)
{
    Inherited::resolveLinks();


}


OSG_END_NAMESPACE
