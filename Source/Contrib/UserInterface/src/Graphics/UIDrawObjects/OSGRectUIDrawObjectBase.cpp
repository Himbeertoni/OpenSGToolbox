/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact:  David Kabala (djkabala@gmail.com)                             *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class RectUIDrawObject!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>
#include <boost/assign/list_of.hpp>

#include "OSGConfig.h"




#include "OSGRectUIDrawObjectBase.h"
#include "OSGRectUIDrawObject.h"

#include <boost/bind.hpp>

#ifdef WIN32 // turn off 'this' : used in base member initializer list warning
#pragma warning(disable:4355)
#endif

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::RectUIDrawObject
    A UI RectUIDrawObject.
 */

/***************************************************************************\
 *                        Field Documentation                              *
\***************************************************************************/

/*! \var Pnt2f           RectUIDrawObjectBase::_sfTopLeft
    
*/

/*! \var Pnt2f           RectUIDrawObjectBase::_sfBottomRight
    
*/

/*! \var Color4f         RectUIDrawObjectBase::_sfColor
    
*/

/*! \var Real32          RectUIDrawObjectBase::_sfOpacity
    
*/


/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldTraits<RectUIDrawObject *>::_type("RectUIDrawObjectPtr", "UIDrawObjectPtr");
#endif

OSG_FIELDTRAITS_GETTYPE(RectUIDrawObject *)

OSG_EXPORT_PTR_SFIELD_FULL(PointerSField,
                           RectUIDrawObject *,
                           0);

OSG_EXPORT_PTR_MFIELD_FULL(PointerMField,
                           RectUIDrawObject *,
                           0);

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

void RectUIDrawObjectBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new SFPnt2f::Description(
        SFPnt2f::getClassType(),
        "TopLeft",
        "",
        TopLeftFieldId, TopLeftFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&RectUIDrawObject::editHandleTopLeft),
        static_cast<FieldGetMethodSig >(&RectUIDrawObject::getHandleTopLeft));

    oType.addInitialDesc(pDesc);

    pDesc = new SFPnt2f::Description(
        SFPnt2f::getClassType(),
        "BottomRight",
        "",
        BottomRightFieldId, BottomRightFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&RectUIDrawObject::editHandleBottomRight),
        static_cast<FieldGetMethodSig >(&RectUIDrawObject::getHandleBottomRight));

    oType.addInitialDesc(pDesc);

    pDesc = new SFColor4f::Description(
        SFColor4f::getClassType(),
        "Color",
        "",
        ColorFieldId, ColorFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&RectUIDrawObject::editHandleColor),
        static_cast<FieldGetMethodSig >(&RectUIDrawObject::getHandleColor));

    oType.addInitialDesc(pDesc);

    pDesc = new SFReal32::Description(
        SFReal32::getClassType(),
        "Opacity",
        "",
        OpacityFieldId, OpacityFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&RectUIDrawObject::editHandleOpacity),
        static_cast<FieldGetMethodSig >(&RectUIDrawObject::getHandleOpacity));

    oType.addInitialDesc(pDesc);
}


RectUIDrawObjectBase::TypeObject RectUIDrawObjectBase::_type(
    RectUIDrawObjectBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    0,
    reinterpret_cast<PrototypeCreateF>(&RectUIDrawObjectBase::createEmptyLocal),
    RectUIDrawObject::initMethod,
    RectUIDrawObject::exitMethod,
    reinterpret_cast<InitalInsertDescFunc>(&RectUIDrawObject::classDescInserter),
    false,
    0,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "\tname=\"RectUIDrawObject\"\n"
    "\tparent=\"UIDrawObject\"\n"
    "    library=\"ContribUserInterface\"\n"
    "    pointerfieldtypes=\"both\"\n"
    "\tstructure=\"concrete\"\n"
    "    systemcomponent=\"true\"\n"
    "    parentsystemcomponent=\"true\"\n"
    "    decoratable=\"false\"\n"
    "    useLocalIncludes=\"false\"\n"
    "    isNodeCore=\"false\"\n"
    "    authors=\"David Kabala (djkabala@gmail.com)                             \"\n"
    ">\n"
    "A UI RectUIDrawObject.\n"
    "\t<Field\n"
    "\t\tname=\"TopLeft\"\n"
    "\t\ttype=\"Pnt2f\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t\tdefaultValue=\"0,0\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"BottomRight\"\n"
    "\t\ttype=\"Pnt2f\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t\tdefaultValue=\"0,0\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"Color\"\n"
    "\t\ttype=\"Color4f\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t\tdefaultValue=\"1.0,1.0,1.0,1.0\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"Opacity\"\n"
    "\t\ttype=\"Real32\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t\tdefaultValue=\"1.0\"\n"
    "\t>\n"
    "\t</Field>\n"
    "</FieldContainer>\n",
    "A UI RectUIDrawObject.\n"
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &RectUIDrawObjectBase::getType(void)
{
    return _type;
}

const FieldContainerType &RectUIDrawObjectBase::getType(void) const
{
    return _type;
}

UInt32 RectUIDrawObjectBase::getContainerSize(void) const
{
    return sizeof(RectUIDrawObject);
}

/*------------------------- decorator get ------------------------------*/


SFPnt2f *RectUIDrawObjectBase::editSFTopLeft(void)
{
    editSField(TopLeftFieldMask);

    return &_sfTopLeft;
}

const SFPnt2f *RectUIDrawObjectBase::getSFTopLeft(void) const
{
    return &_sfTopLeft;
}


SFPnt2f *RectUIDrawObjectBase::editSFBottomRight(void)
{
    editSField(BottomRightFieldMask);

    return &_sfBottomRight;
}

const SFPnt2f *RectUIDrawObjectBase::getSFBottomRight(void) const
{
    return &_sfBottomRight;
}


SFColor4f *RectUIDrawObjectBase::editSFColor(void)
{
    editSField(ColorFieldMask);

    return &_sfColor;
}

const SFColor4f *RectUIDrawObjectBase::getSFColor(void) const
{
    return &_sfColor;
}


SFReal32 *RectUIDrawObjectBase::editSFOpacity(void)
{
    editSField(OpacityFieldMask);

    return &_sfOpacity;
}

const SFReal32 *RectUIDrawObjectBase::getSFOpacity(void) const
{
    return &_sfOpacity;
}






/*------------------------------ access -----------------------------------*/

UInt32 RectUIDrawObjectBase::getBinSize(ConstFieldMaskArg whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (TopLeftFieldMask & whichField))
    {
        returnValue += _sfTopLeft.getBinSize();
    }
    if(FieldBits::NoField != (BottomRightFieldMask & whichField))
    {
        returnValue += _sfBottomRight.getBinSize();
    }
    if(FieldBits::NoField != (ColorFieldMask & whichField))
    {
        returnValue += _sfColor.getBinSize();
    }
    if(FieldBits::NoField != (OpacityFieldMask & whichField))
    {
        returnValue += _sfOpacity.getBinSize();
    }

    return returnValue;
}

void RectUIDrawObjectBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (TopLeftFieldMask & whichField))
    {
        _sfTopLeft.copyToBin(pMem);
    }
    if(FieldBits::NoField != (BottomRightFieldMask & whichField))
    {
        _sfBottomRight.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ColorFieldMask & whichField))
    {
        _sfColor.copyToBin(pMem);
    }
    if(FieldBits::NoField != (OpacityFieldMask & whichField))
    {
        _sfOpacity.copyToBin(pMem);
    }
}

void RectUIDrawObjectBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (TopLeftFieldMask & whichField))
    {
        _sfTopLeft.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (BottomRightFieldMask & whichField))
    {
        _sfBottomRight.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ColorFieldMask & whichField))
    {
        _sfColor.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (OpacityFieldMask & whichField))
    {
        _sfOpacity.copyFromBin(pMem);
    }
}

//! create a new instance of the class
RectUIDrawObjectTransitPtr RectUIDrawObjectBase::createLocal(BitVector bFlags)
{
    RectUIDrawObjectTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyLocal(bFlags);

        fc = dynamic_pointer_cast<RectUIDrawObject>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class, copy the container flags
RectUIDrawObjectTransitPtr RectUIDrawObjectBase::createDependent(BitVector bFlags)
{
    RectUIDrawObjectTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyDependent(bFlags);

        fc = dynamic_pointer_cast<RectUIDrawObject>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class
RectUIDrawObjectTransitPtr RectUIDrawObjectBase::create(void)
{
    RectUIDrawObjectTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopy();

        fc = dynamic_pointer_cast<RectUIDrawObject>(tmpPtr);
    }

    return fc;
}

RectUIDrawObject *RectUIDrawObjectBase::createEmptyLocal(BitVector bFlags)
{
    RectUIDrawObject *returnValue;

    newPtr<RectUIDrawObject>(returnValue, bFlags);

    returnValue->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

//! create an empty new instance of the class, do not copy the prototype
RectUIDrawObject *RectUIDrawObjectBase::createEmpty(void)
{
    RectUIDrawObject *returnValue;

    newPtr<RectUIDrawObject>(returnValue, Thread::getCurrentLocalFlags());

    returnValue->_pFieldFlags->_bNamespaceMask &=
        ~Thread::getCurrentLocalFlags();

    return returnValue;
}


FieldContainerTransitPtr RectUIDrawObjectBase::shallowCopyLocal(
    BitVector bFlags) const
{
    RectUIDrawObject *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const RectUIDrawObject *>(this), bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

FieldContainerTransitPtr RectUIDrawObjectBase::shallowCopyDependent(
    BitVector bFlags) const
{
    RectUIDrawObject *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const RectUIDrawObject *>(this), ~bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask = bFlags;

    return returnValue;
}

FieldContainerTransitPtr RectUIDrawObjectBase::shallowCopy(void) const
{
    RectUIDrawObject *tmpPtr;

    newPtr(tmpPtr,
           dynamic_cast<const RectUIDrawObject *>(this),
           Thread::getCurrentLocalFlags());

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~Thread::getCurrentLocalFlags();

    FieldContainerTransitPtr returnValue(tmpPtr);

    return returnValue;
}




/*------------------------- constructors ----------------------------------*/

RectUIDrawObjectBase::RectUIDrawObjectBase(void) :
    Inherited(),
    _sfTopLeft                (Pnt2f(0,0)),
    _sfBottomRight            (Pnt2f(0,0)),
    _sfColor                  (Color4f(1.0,1.0,1.0,1.0)),
    _sfOpacity                (Real32(1.0))
{
}

RectUIDrawObjectBase::RectUIDrawObjectBase(const RectUIDrawObjectBase &source) :
    Inherited(source),
    _sfTopLeft                (source._sfTopLeft                ),
    _sfBottomRight            (source._sfBottomRight            ),
    _sfColor                  (source._sfColor                  ),
    _sfOpacity                (source._sfOpacity                )
{
}


/*-------------------------- destructors ----------------------------------*/

RectUIDrawObjectBase::~RectUIDrawObjectBase(void)
{
}


GetFieldHandlePtr RectUIDrawObjectBase::getHandleTopLeft         (void) const
{
    SFPnt2f::GetHandlePtr returnValue(
        new  SFPnt2f::GetHandle(
             &_sfTopLeft,
             this->getType().getFieldDesc(TopLeftFieldId),
             const_cast<RectUIDrawObjectBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr RectUIDrawObjectBase::editHandleTopLeft        (void)
{
    SFPnt2f::EditHandlePtr returnValue(
        new  SFPnt2f::EditHandle(
             &_sfTopLeft,
             this->getType().getFieldDesc(TopLeftFieldId),
             this));


    editSField(TopLeftFieldMask);

    return returnValue;
}

GetFieldHandlePtr RectUIDrawObjectBase::getHandleBottomRight     (void) const
{
    SFPnt2f::GetHandlePtr returnValue(
        new  SFPnt2f::GetHandle(
             &_sfBottomRight,
             this->getType().getFieldDesc(BottomRightFieldId),
             const_cast<RectUIDrawObjectBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr RectUIDrawObjectBase::editHandleBottomRight    (void)
{
    SFPnt2f::EditHandlePtr returnValue(
        new  SFPnt2f::EditHandle(
             &_sfBottomRight,
             this->getType().getFieldDesc(BottomRightFieldId),
             this));


    editSField(BottomRightFieldMask);

    return returnValue;
}

GetFieldHandlePtr RectUIDrawObjectBase::getHandleColor           (void) const
{
    SFColor4f::GetHandlePtr returnValue(
        new  SFColor4f::GetHandle(
             &_sfColor,
             this->getType().getFieldDesc(ColorFieldId),
             const_cast<RectUIDrawObjectBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr RectUIDrawObjectBase::editHandleColor          (void)
{
    SFColor4f::EditHandlePtr returnValue(
        new  SFColor4f::EditHandle(
             &_sfColor,
             this->getType().getFieldDesc(ColorFieldId),
             this));


    editSField(ColorFieldMask);

    return returnValue;
}

GetFieldHandlePtr RectUIDrawObjectBase::getHandleOpacity         (void) const
{
    SFReal32::GetHandlePtr returnValue(
        new  SFReal32::GetHandle(
             &_sfOpacity,
             this->getType().getFieldDesc(OpacityFieldId),
             const_cast<RectUIDrawObjectBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr RectUIDrawObjectBase::editHandleOpacity        (void)
{
    SFReal32::EditHandlePtr returnValue(
        new  SFReal32::EditHandle(
             &_sfOpacity,
             this->getType().getFieldDesc(OpacityFieldId),
             this));


    editSField(OpacityFieldMask);

    return returnValue;
}


#ifdef OSG_MT_CPTR_ASPECT
void RectUIDrawObjectBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    RectUIDrawObject *pThis = static_cast<RectUIDrawObject *>(this);

    pThis->execSync(static_cast<RectUIDrawObject *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif


#ifdef OSG_MT_CPTR_ASPECT
FieldContainer *RectUIDrawObjectBase::createAspectCopy(
    const FieldContainer *pRefAspect) const
{
    RectUIDrawObject *returnValue;

    newAspectCopy(returnValue,
                  dynamic_cast<const RectUIDrawObject *>(pRefAspect),
                  dynamic_cast<const RectUIDrawObject *>(this));

    return returnValue;
}
#endif

void RectUIDrawObjectBase::resolveLinks(void)
{
    Inherited::resolveLinks();


}


OSG_END_NAMESPACE
