/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact:  David Kabala (djkabala@gmail.com)                             *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class TextUIDrawObject!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>
#include <boost/assign/list_of.hpp>

#include "OSGConfig.h"



#include "OSGUIFont.h"                  // Font Class

#include "OSGTextUIDrawObjectBase.h"
#include "OSGTextUIDrawObject.h"

#include <boost/bind.hpp>

#ifdef WIN32 // turn off 'this' : used in base member initializer list warning
#pragma warning(disable:4355)
#endif

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::TextUIDrawObject
    A UI TextUIDrawObject.
 */

/***************************************************************************\
 *                        Field Documentation                              *
\***************************************************************************/

/*! \var Pnt2f           TextUIDrawObjectBase::_sfPosition
    
*/

/*! \var std::string     TextUIDrawObjectBase::_sfText
    
*/

/*! \var UIFont *        TextUIDrawObjectBase::_sfFont
    
*/

/*! \var Color4f         TextUIDrawObjectBase::_sfColor
    
*/

/*! \var Real32          TextUIDrawObjectBase::_sfOpacity
    
*/


/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldTraits<TextUIDrawObject *>::_type("TextUIDrawObjectPtr", "UIDrawObjectPtr");
#endif

OSG_FIELDTRAITS_GETTYPE(TextUIDrawObject *)

OSG_EXPORT_PTR_SFIELD_FULL(PointerSField,
                           TextUIDrawObject *,
                           0);

OSG_EXPORT_PTR_MFIELD_FULL(PointerMField,
                           TextUIDrawObject *,
                           0);

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

void TextUIDrawObjectBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new SFPnt2f::Description(
        SFPnt2f::getClassType(),
        "Position",
        "",
        PositionFieldId, PositionFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&TextUIDrawObject::editHandlePosition),
        static_cast<FieldGetMethodSig >(&TextUIDrawObject::getHandlePosition));

    oType.addInitialDesc(pDesc);

    pDesc = new SFString::Description(
        SFString::getClassType(),
        "Text",
        "",
        TextFieldId, TextFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&TextUIDrawObject::editHandleText),
        static_cast<FieldGetMethodSig >(&TextUIDrawObject::getHandleText));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecUIFontPtr::Description(
        SFUnrecUIFontPtr::getClassType(),
        "Font",
        "",
        FontFieldId, FontFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&TextUIDrawObject::editHandleFont),
        static_cast<FieldGetMethodSig >(&TextUIDrawObject::getHandleFont));

    oType.addInitialDesc(pDesc);

    pDesc = new SFColor4f::Description(
        SFColor4f::getClassType(),
        "Color",
        "",
        ColorFieldId, ColorFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&TextUIDrawObject::editHandleColor),
        static_cast<FieldGetMethodSig >(&TextUIDrawObject::getHandleColor));

    oType.addInitialDesc(pDesc);

    pDesc = new SFReal32::Description(
        SFReal32::getClassType(),
        "Opacity",
        "",
        OpacityFieldId, OpacityFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&TextUIDrawObject::editHandleOpacity),
        static_cast<FieldGetMethodSig >(&TextUIDrawObject::getHandleOpacity));

    oType.addInitialDesc(pDesc);
}


TextUIDrawObjectBase::TypeObject TextUIDrawObjectBase::_type(
    TextUIDrawObjectBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    0,
    reinterpret_cast<PrototypeCreateF>(&TextUIDrawObjectBase::createEmptyLocal),
    TextUIDrawObject::initMethod,
    TextUIDrawObject::exitMethod,
    reinterpret_cast<InitalInsertDescFunc>(&TextUIDrawObject::classDescInserter),
    false,
    0,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "\tname=\"TextUIDrawObject\"\n"
    "\tparent=\"UIDrawObject\"\n"
    "    library=\"ContribUserInterface\"\n"
    "    pointerfieldtypes=\"both\"\n"
    "\tstructure=\"concrete\"\n"
    "    systemcomponent=\"true\"\n"
    "    parentsystemcomponent=\"true\"\n"
    "    decoratable=\"false\"\n"
    "    useLocalIncludes=\"false\"\n"
    "    isNodeCore=\"false\"\n"
    "    authors=\"David Kabala (djkabala@gmail.com)                             \"\n"
    ">\n"
    "A UI TextUIDrawObject.\n"
    "\t<Field\n"
    "\t\tname=\"Position\"\n"
    "\t\ttype=\"Pnt2f\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t\tdefaultValue=\"0,0\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"Text\"\n"
    "\t\ttype=\"std::string\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t\tdefaultValue=\"\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"Font\"\n"
    "\t\ttype=\"UIFont\"\n"
    "        category=\"pointer\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "        defaultValue=\"NULL\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"Color\"\n"
    "\t\ttype=\"Color4f\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t\tdefaultValue=\"1.0,1.0,1.0,1.0\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"Opacity\"\n"
    "\t\ttype=\"Real32\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t\tdefaultValue=\"1.0\"\n"
    "\t>\n"
    "\t</Field>\n"
    "</FieldContainer>\n",
    "A UI TextUIDrawObject.\n"
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &TextUIDrawObjectBase::getType(void)
{
    return _type;
}

const FieldContainerType &TextUIDrawObjectBase::getType(void) const
{
    return _type;
}

UInt32 TextUIDrawObjectBase::getContainerSize(void) const
{
    return sizeof(TextUIDrawObject);
}

/*------------------------- decorator get ------------------------------*/


SFPnt2f *TextUIDrawObjectBase::editSFPosition(void)
{
    editSField(PositionFieldMask);

    return &_sfPosition;
}

const SFPnt2f *TextUIDrawObjectBase::getSFPosition(void) const
{
    return &_sfPosition;
}


SFString *TextUIDrawObjectBase::editSFText(void)
{
    editSField(TextFieldMask);

    return &_sfText;
}

const SFString *TextUIDrawObjectBase::getSFText(void) const
{
    return &_sfText;
}


//! Get the TextUIDrawObject::_sfFont field.
const SFUnrecUIFontPtr *TextUIDrawObjectBase::getSFFont(void) const
{
    return &_sfFont;
}

SFUnrecUIFontPtr    *TextUIDrawObjectBase::editSFFont           (void)
{
    editSField(FontFieldMask);

    return &_sfFont;
}

SFColor4f *TextUIDrawObjectBase::editSFColor(void)
{
    editSField(ColorFieldMask);

    return &_sfColor;
}

const SFColor4f *TextUIDrawObjectBase::getSFColor(void) const
{
    return &_sfColor;
}


SFReal32 *TextUIDrawObjectBase::editSFOpacity(void)
{
    editSField(OpacityFieldMask);

    return &_sfOpacity;
}

const SFReal32 *TextUIDrawObjectBase::getSFOpacity(void) const
{
    return &_sfOpacity;
}






/*------------------------------ access -----------------------------------*/

UInt32 TextUIDrawObjectBase::getBinSize(ConstFieldMaskArg whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (PositionFieldMask & whichField))
    {
        returnValue += _sfPosition.getBinSize();
    }
    if(FieldBits::NoField != (TextFieldMask & whichField))
    {
        returnValue += _sfText.getBinSize();
    }
    if(FieldBits::NoField != (FontFieldMask & whichField))
    {
        returnValue += _sfFont.getBinSize();
    }
    if(FieldBits::NoField != (ColorFieldMask & whichField))
    {
        returnValue += _sfColor.getBinSize();
    }
    if(FieldBits::NoField != (OpacityFieldMask & whichField))
    {
        returnValue += _sfOpacity.getBinSize();
    }

    return returnValue;
}

void TextUIDrawObjectBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (PositionFieldMask & whichField))
    {
        _sfPosition.copyToBin(pMem);
    }
    if(FieldBits::NoField != (TextFieldMask & whichField))
    {
        _sfText.copyToBin(pMem);
    }
    if(FieldBits::NoField != (FontFieldMask & whichField))
    {
        _sfFont.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ColorFieldMask & whichField))
    {
        _sfColor.copyToBin(pMem);
    }
    if(FieldBits::NoField != (OpacityFieldMask & whichField))
    {
        _sfOpacity.copyToBin(pMem);
    }
}

void TextUIDrawObjectBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (PositionFieldMask & whichField))
    {
        _sfPosition.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (TextFieldMask & whichField))
    {
        _sfText.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (FontFieldMask & whichField))
    {
        _sfFont.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ColorFieldMask & whichField))
    {
        _sfColor.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (OpacityFieldMask & whichField))
    {
        _sfOpacity.copyFromBin(pMem);
    }
}

//! create a new instance of the class
TextUIDrawObjectTransitPtr TextUIDrawObjectBase::createLocal(BitVector bFlags)
{
    TextUIDrawObjectTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyLocal(bFlags);

        fc = dynamic_pointer_cast<TextUIDrawObject>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class, copy the container flags
TextUIDrawObjectTransitPtr TextUIDrawObjectBase::createDependent(BitVector bFlags)
{
    TextUIDrawObjectTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyDependent(bFlags);

        fc = dynamic_pointer_cast<TextUIDrawObject>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class
TextUIDrawObjectTransitPtr TextUIDrawObjectBase::create(void)
{
    TextUIDrawObjectTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopy();

        fc = dynamic_pointer_cast<TextUIDrawObject>(tmpPtr);
    }

    return fc;
}

TextUIDrawObject *TextUIDrawObjectBase::createEmptyLocal(BitVector bFlags)
{
    TextUIDrawObject *returnValue;

    newPtr<TextUIDrawObject>(returnValue, bFlags);

    returnValue->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

//! create an empty new instance of the class, do not copy the prototype
TextUIDrawObject *TextUIDrawObjectBase::createEmpty(void)
{
    TextUIDrawObject *returnValue;

    newPtr<TextUIDrawObject>(returnValue, Thread::getCurrentLocalFlags());

    returnValue->_pFieldFlags->_bNamespaceMask &=
        ~Thread::getCurrentLocalFlags();

    return returnValue;
}


FieldContainerTransitPtr TextUIDrawObjectBase::shallowCopyLocal(
    BitVector bFlags) const
{
    TextUIDrawObject *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const TextUIDrawObject *>(this), bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

FieldContainerTransitPtr TextUIDrawObjectBase::shallowCopyDependent(
    BitVector bFlags) const
{
    TextUIDrawObject *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const TextUIDrawObject *>(this), ~bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask = bFlags;

    return returnValue;
}

FieldContainerTransitPtr TextUIDrawObjectBase::shallowCopy(void) const
{
    TextUIDrawObject *tmpPtr;

    newPtr(tmpPtr,
           dynamic_cast<const TextUIDrawObject *>(this),
           Thread::getCurrentLocalFlags());

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~Thread::getCurrentLocalFlags();

    FieldContainerTransitPtr returnValue(tmpPtr);

    return returnValue;
}




/*------------------------- constructors ----------------------------------*/

TextUIDrawObjectBase::TextUIDrawObjectBase(void) :
    Inherited(),
    _sfPosition               (Pnt2f(0,0)),
    _sfText                   (),
    _sfFont                   (NULL),
    _sfColor                  (Color4f(1.0,1.0,1.0,1.0)),
    _sfOpacity                (Real32(1.0))
{
}

TextUIDrawObjectBase::TextUIDrawObjectBase(const TextUIDrawObjectBase &source) :
    Inherited(source),
    _sfPosition               (source._sfPosition               ),
    _sfText                   (source._sfText                   ),
    _sfFont                   (NULL),
    _sfColor                  (source._sfColor                  ),
    _sfOpacity                (source._sfOpacity                )
{
}


/*-------------------------- destructors ----------------------------------*/

TextUIDrawObjectBase::~TextUIDrawObjectBase(void)
{
}

void TextUIDrawObjectBase::onCreate(const TextUIDrawObject *source)
{
    Inherited::onCreate(source);

    if(source != NULL)
    {
        TextUIDrawObject *pThis = static_cast<TextUIDrawObject *>(this);

        pThis->setFont(source->getFont());
    }
}

GetFieldHandlePtr TextUIDrawObjectBase::getHandlePosition        (void) const
{
    SFPnt2f::GetHandlePtr returnValue(
        new  SFPnt2f::GetHandle(
             &_sfPosition,
             this->getType().getFieldDesc(PositionFieldId),
             const_cast<TextUIDrawObjectBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr TextUIDrawObjectBase::editHandlePosition       (void)
{
    SFPnt2f::EditHandlePtr returnValue(
        new  SFPnt2f::EditHandle(
             &_sfPosition,
             this->getType().getFieldDesc(PositionFieldId),
             this));


    editSField(PositionFieldMask);

    return returnValue;
}

GetFieldHandlePtr TextUIDrawObjectBase::getHandleText            (void) const
{
    SFString::GetHandlePtr returnValue(
        new  SFString::GetHandle(
             &_sfText,
             this->getType().getFieldDesc(TextFieldId),
             const_cast<TextUIDrawObjectBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr TextUIDrawObjectBase::editHandleText           (void)
{
    SFString::EditHandlePtr returnValue(
        new  SFString::EditHandle(
             &_sfText,
             this->getType().getFieldDesc(TextFieldId),
             this));


    editSField(TextFieldMask);

    return returnValue;
}

GetFieldHandlePtr TextUIDrawObjectBase::getHandleFont            (void) const
{
    SFUnrecUIFontPtr::GetHandlePtr returnValue(
        new  SFUnrecUIFontPtr::GetHandle(
             &_sfFont,
             this->getType().getFieldDesc(FontFieldId),
             const_cast<TextUIDrawObjectBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr TextUIDrawObjectBase::editHandleFont           (void)
{
    SFUnrecUIFontPtr::EditHandlePtr returnValue(
        new  SFUnrecUIFontPtr::EditHandle(
             &_sfFont,
             this->getType().getFieldDesc(FontFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&TextUIDrawObject::setFont,
                    static_cast<TextUIDrawObject *>(this), _1));

    editSField(FontFieldMask);

    return returnValue;
}

GetFieldHandlePtr TextUIDrawObjectBase::getHandleColor           (void) const
{
    SFColor4f::GetHandlePtr returnValue(
        new  SFColor4f::GetHandle(
             &_sfColor,
             this->getType().getFieldDesc(ColorFieldId),
             const_cast<TextUIDrawObjectBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr TextUIDrawObjectBase::editHandleColor          (void)
{
    SFColor4f::EditHandlePtr returnValue(
        new  SFColor4f::EditHandle(
             &_sfColor,
             this->getType().getFieldDesc(ColorFieldId),
             this));


    editSField(ColorFieldMask);

    return returnValue;
}

GetFieldHandlePtr TextUIDrawObjectBase::getHandleOpacity         (void) const
{
    SFReal32::GetHandlePtr returnValue(
        new  SFReal32::GetHandle(
             &_sfOpacity,
             this->getType().getFieldDesc(OpacityFieldId),
             const_cast<TextUIDrawObjectBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr TextUIDrawObjectBase::editHandleOpacity        (void)
{
    SFReal32::EditHandlePtr returnValue(
        new  SFReal32::EditHandle(
             &_sfOpacity,
             this->getType().getFieldDesc(OpacityFieldId),
             this));


    editSField(OpacityFieldMask);

    return returnValue;
}


#ifdef OSG_MT_CPTR_ASPECT
void TextUIDrawObjectBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    TextUIDrawObject *pThis = static_cast<TextUIDrawObject *>(this);

    pThis->execSync(static_cast<TextUIDrawObject *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif


#ifdef OSG_MT_CPTR_ASPECT
FieldContainer *TextUIDrawObjectBase::createAspectCopy(
    const FieldContainer *pRefAspect) const
{
    TextUIDrawObject *returnValue;

    newAspectCopy(returnValue,
                  dynamic_cast<const TextUIDrawObject *>(pRefAspect),
                  dynamic_cast<const TextUIDrawObject *>(this));

    return returnValue;
}
#endif

void TextUIDrawObjectBase::resolveLinks(void)
{
    Inherited::resolveLinks();

    static_cast<TextUIDrawObject *>(this)->setFont(NULL);


}


OSG_END_NAMESPACE
