/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact:  David Kabala (djkabala@gmail.com)                             *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class CompoundLayer!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>
#include <boost/assign/list_of.hpp>

#include "OSGConfig.h"



#include "OSGLayer.h"                   // Backgrounds Class

#include "OSGCompoundLayerBase.h"
#include "OSGCompoundLayer.h"

#include <boost/bind.hpp>

#ifdef WIN32 // turn off 'this' : used in base member initializer list warning
#pragma warning(disable:4355)
#endif

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::CompoundLayer
    UI Compound Background.
 */

/***************************************************************************\
 *                        Field Documentation                              *
\***************************************************************************/

/*! \var Layer *         CompoundLayerBase::_mfBackgrounds
    
*/


/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldTraits<CompoundLayer *>::_type("CompoundLayerPtr", "LayerPtr");
#endif

OSG_FIELDTRAITS_GETTYPE(CompoundLayer *)

OSG_EXPORT_PTR_SFIELD_FULL(PointerSField,
                           CompoundLayer *,
                           0);

OSG_EXPORT_PTR_MFIELD_FULL(PointerMField,
                           CompoundLayer *,
                           0);

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

void CompoundLayerBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new MFUnrecLayerPtr::Description(
        MFUnrecLayerPtr::getClassType(),
        "Backgrounds",
        "",
        BackgroundsFieldId, BackgroundsFieldMask,
        false,
        (Field::MFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&CompoundLayer::editHandleBackgrounds),
        static_cast<FieldGetMethodSig >(&CompoundLayer::getHandleBackgrounds));

    oType.addInitialDesc(pDesc);
}


CompoundLayerBase::TypeObject CompoundLayerBase::_type(
    CompoundLayerBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    0,
    reinterpret_cast<PrototypeCreateF>(&CompoundLayerBase::createEmptyLocal),
    CompoundLayer::initMethod,
    CompoundLayer::exitMethod,
    reinterpret_cast<InitalInsertDescFunc>(&CompoundLayer::classDescInserter),
    false,
    0,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "\tname=\"CompoundLayer\"\n"
    "\tparent=\"Layer\"\n"
    "    library=\"ContribUserInterface\"\n"
    "    pointerfieldtypes=\"both\"\n"
    "\tstructure=\"concrete\"\n"
    "    systemcomponent=\"true\"\n"
    "    parentsystemcomponent=\"true\"\n"
    "    decoratable=\"false\"\n"
    "    useLocalIncludes=\"false\"\n"
    "    isNodeCore=\"false\"\n"
    "    authors=\"David Kabala (djkabala@gmail.com)                             \"\n"
    ">\n"
    "UI Compound Background.\n"
    "\t<Field\n"
    "\t\tname=\"Backgrounds\"\n"
    "\t\ttype=\"Layer\"\n"
    "        category=\"pointer\"\n"
    "\t\tcardinality=\"multi\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "</FieldContainer>\n",
    "UI Compound Background.\n"
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &CompoundLayerBase::getType(void)
{
    return _type;
}

const FieldContainerType &CompoundLayerBase::getType(void) const
{
    return _type;
}

UInt32 CompoundLayerBase::getContainerSize(void) const
{
    return sizeof(CompoundLayer);
}

/*------------------------- decorator get ------------------------------*/


//! Get the CompoundLayer::_mfBackgrounds field.
const MFUnrecLayerPtr *CompoundLayerBase::getMFBackgrounds(void) const
{
    return &_mfBackgrounds;
}

MFUnrecLayerPtr     *CompoundLayerBase::editMFBackgrounds    (void)
{
    editMField(BackgroundsFieldMask, _mfBackgrounds);

    return &_mfBackgrounds;
}



void CompoundLayerBase::pushToBackgrounds(Layer * const value)
{
    editMField(BackgroundsFieldMask, _mfBackgrounds);

    _mfBackgrounds.push_back(value);
}

void CompoundLayerBase::assignBackgrounds(const MFUnrecLayerPtr   &value)
{
    MFUnrecLayerPtr  ::const_iterator elemIt  =
        value.begin();
    MFUnrecLayerPtr  ::const_iterator elemEnd =
        value.end  ();

    static_cast<CompoundLayer *>(this)->clearBackgrounds();

    while(elemIt != elemEnd)
    {
        this->pushToBackgrounds(*elemIt);

        ++elemIt;
    }
}

void CompoundLayerBase::removeFromBackgrounds(UInt32 uiIndex)
{
    if(uiIndex < _mfBackgrounds.size())
    {
        editMField(BackgroundsFieldMask, _mfBackgrounds);

        _mfBackgrounds.erase(uiIndex);
    }
}

void CompoundLayerBase::removeObjFromBackgrounds(Layer * const value)
{
    Int32 iElemIdx = _mfBackgrounds.findIndex(value);

    if(iElemIdx != -1)
    {
        editMField(BackgroundsFieldMask, _mfBackgrounds);

        _mfBackgrounds.erase(iElemIdx);
    }
}
void CompoundLayerBase::clearBackgrounds(void)
{
    editMField(BackgroundsFieldMask, _mfBackgrounds);


    _mfBackgrounds.clear();
}



/*------------------------------ access -----------------------------------*/

UInt32 CompoundLayerBase::getBinSize(ConstFieldMaskArg whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (BackgroundsFieldMask & whichField))
    {
        returnValue += _mfBackgrounds.getBinSize();
    }

    return returnValue;
}

void CompoundLayerBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (BackgroundsFieldMask & whichField))
    {
        _mfBackgrounds.copyToBin(pMem);
    }
}

void CompoundLayerBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (BackgroundsFieldMask & whichField))
    {
        _mfBackgrounds.copyFromBin(pMem);
    }
}

//! create a new instance of the class
CompoundLayerTransitPtr CompoundLayerBase::createLocal(BitVector bFlags)
{
    CompoundLayerTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyLocal(bFlags);

        fc = dynamic_pointer_cast<CompoundLayer>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class, copy the container flags
CompoundLayerTransitPtr CompoundLayerBase::createDependent(BitVector bFlags)
{
    CompoundLayerTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyDependent(bFlags);

        fc = dynamic_pointer_cast<CompoundLayer>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class
CompoundLayerTransitPtr CompoundLayerBase::create(void)
{
    CompoundLayerTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopy();

        fc = dynamic_pointer_cast<CompoundLayer>(tmpPtr);
    }

    return fc;
}

CompoundLayer *CompoundLayerBase::createEmptyLocal(BitVector bFlags)
{
    CompoundLayer *returnValue;

    newPtr<CompoundLayer>(returnValue, bFlags);

    returnValue->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

//! create an empty new instance of the class, do not copy the prototype
CompoundLayer *CompoundLayerBase::createEmpty(void)
{
    CompoundLayer *returnValue;

    newPtr<CompoundLayer>(returnValue, Thread::getCurrentLocalFlags());

    returnValue->_pFieldFlags->_bNamespaceMask &=
        ~Thread::getCurrentLocalFlags();

    return returnValue;
}


FieldContainerTransitPtr CompoundLayerBase::shallowCopyLocal(
    BitVector bFlags) const
{
    CompoundLayer *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const CompoundLayer *>(this), bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

FieldContainerTransitPtr CompoundLayerBase::shallowCopyDependent(
    BitVector bFlags) const
{
    CompoundLayer *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const CompoundLayer *>(this), ~bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask = bFlags;

    return returnValue;
}

FieldContainerTransitPtr CompoundLayerBase::shallowCopy(void) const
{
    CompoundLayer *tmpPtr;

    newPtr(tmpPtr,
           dynamic_cast<const CompoundLayer *>(this),
           Thread::getCurrentLocalFlags());

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~Thread::getCurrentLocalFlags();

    FieldContainerTransitPtr returnValue(tmpPtr);

    return returnValue;
}




/*------------------------- constructors ----------------------------------*/

CompoundLayerBase::CompoundLayerBase(void) :
    Inherited(),
    _mfBackgrounds            ()
{
}

CompoundLayerBase::CompoundLayerBase(const CompoundLayerBase &source) :
    Inherited(source),
    _mfBackgrounds            ()
{
}


/*-------------------------- destructors ----------------------------------*/

CompoundLayerBase::~CompoundLayerBase(void)
{
}

void CompoundLayerBase::onCreate(const CompoundLayer *source)
{
    Inherited::onCreate(source);

    if(source != NULL)
    {
        CompoundLayer *pThis = static_cast<CompoundLayer *>(this);

        MFUnrecLayerPtr::const_iterator BackgroundsIt  =
            source->_mfBackgrounds.begin();
        MFUnrecLayerPtr::const_iterator BackgroundsEnd =
            source->_mfBackgrounds.end  ();

        while(BackgroundsIt != BackgroundsEnd)
        {
            pThis->pushToBackgrounds(*BackgroundsIt);

            ++BackgroundsIt;
        }
    }
}

GetFieldHandlePtr CompoundLayerBase::getHandleBackgrounds     (void) const
{
    MFUnrecLayerPtr::GetHandlePtr returnValue(
        new  MFUnrecLayerPtr::GetHandle(
             &_mfBackgrounds,
             this->getType().getFieldDesc(BackgroundsFieldId),
             const_cast<CompoundLayerBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr CompoundLayerBase::editHandleBackgrounds    (void)
{
    MFUnrecLayerPtr::EditHandlePtr returnValue(
        new  MFUnrecLayerPtr::EditHandle(
             &_mfBackgrounds,
             this->getType().getFieldDesc(BackgroundsFieldId),
             this));

    returnValue->setAddMethod(
        boost::bind(&CompoundLayer::pushToBackgrounds,
                    static_cast<CompoundLayer *>(this), _1));
    returnValue->setRemoveMethod(
        boost::bind(&CompoundLayer::removeFromBackgrounds,
                    static_cast<CompoundLayer *>(this), _1));
    returnValue->setRemoveObjMethod(
        boost::bind(&CompoundLayer::removeObjFromBackgrounds,
                    static_cast<CompoundLayer *>(this), _1));
    returnValue->setClearMethod(
        boost::bind(&CompoundLayer::clearBackgrounds,
                    static_cast<CompoundLayer *>(this)));

    editMField(BackgroundsFieldMask, _mfBackgrounds);

    return returnValue;
}


#ifdef OSG_MT_CPTR_ASPECT
void CompoundLayerBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    CompoundLayer *pThis = static_cast<CompoundLayer *>(this);

    pThis->execSync(static_cast<CompoundLayer *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif


#ifdef OSG_MT_CPTR_ASPECT
FieldContainer *CompoundLayerBase::createAspectCopy(
    const FieldContainer *pRefAspect) const
{
    CompoundLayer *returnValue;

    newAspectCopy(returnValue,
                  dynamic_cast<const CompoundLayer *>(pRefAspect),
                  dynamic_cast<const CompoundLayer *>(this));

    return returnValue;
}
#endif

void CompoundLayerBase::resolveLinks(void)
{
    Inherited::resolveLinks();

    static_cast<CompoundLayer *>(this)->clearBackgrounds();


}


OSG_END_NAMESPACE
