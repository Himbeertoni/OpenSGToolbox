/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact:  David Kabala (djkabala@gmail.com)                             *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class PatternLayer!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>
#include <boost/assign/list_of.hpp>

#include "OSGConfig.h"



#include "OSGTextureObjChunk.h"         // Texture Class
#include "OSGTextureTransformChunk.h"   // Transformation Class

#include "OSGPatternLayerBase.h"
#include "OSGPatternLayer.h"

#include <boost/bind.hpp>

#ifdef WIN32 // turn off 'this' : used in base member initializer list warning
#pragma warning(disable:4355)
#endif

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::PatternLayer
    UI Texture Background.
 */

/***************************************************************************\
 *                        Field Documentation                              *
\***************************************************************************/

/*! \var TextureObjChunk * PatternLayerBase::_sfTexture
    
*/

/*! \var TextureTransformChunk * PatternLayerBase::_sfTransformation
    
*/

/*! \var Color4f         PatternLayerBase::_sfColor
    
*/

/*! \var Vec2f           PatternLayerBase::_sfPatternSize
    
*/

/*! \var Real32          PatternLayerBase::_sfVerticalAlignment
    
*/

/*! \var Real32          PatternLayerBase::_sfHorizontalAlignment
    
*/

/*! \var UInt32          PatternLayerBase::_sfHorizontalRepeat
    
*/

/*! \var UInt32          PatternLayerBase::_sfVerticalRepeat
    
*/

/*! \var Real32          PatternLayerBase::_sfHorizontalRepeatValue
    
*/

/*! \var Real32          PatternLayerBase::_sfVerticalRepeatValue
    
*/

/*! \var Vec2f           PatternLayerBase::_sfTopLeftTextureCoord
    
*/

/*! \var Vec2f           PatternLayerBase::_sfBottomRightTextureCoord
    
*/


/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldTraits<PatternLayer *>::_type("PatternLayerPtr", "LayerPtr");
#endif

OSG_FIELDTRAITS_GETTYPE(PatternLayer *)

OSG_EXPORT_PTR_SFIELD_FULL(PointerSField,
                           PatternLayer *,
                           0);

OSG_EXPORT_PTR_MFIELD_FULL(PointerMField,
                           PatternLayer *,
                           0);

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

void PatternLayerBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new SFUnrecTextureObjChunkPtr::Description(
        SFUnrecTextureObjChunkPtr::getClassType(),
        "Texture",
        "",
        TextureFieldId, TextureFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&PatternLayer::editHandleTexture),
        static_cast<FieldGetMethodSig >(&PatternLayer::getHandleTexture));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecTextureTransformChunkPtr::Description(
        SFUnrecTextureTransformChunkPtr::getClassType(),
        "Transformation",
        "",
        TransformationFieldId, TransformationFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&PatternLayer::editHandleTransformation),
        static_cast<FieldGetMethodSig >(&PatternLayer::getHandleTransformation));

    oType.addInitialDesc(pDesc);

    pDesc = new SFColor4f::Description(
        SFColor4f::getClassType(),
        "Color",
        "",
        ColorFieldId, ColorFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&PatternLayer::editHandleColor),
        static_cast<FieldGetMethodSig >(&PatternLayer::getHandleColor));

    oType.addInitialDesc(pDesc);

    pDesc = new SFVec2f::Description(
        SFVec2f::getClassType(),
        "PatternSize",
        "",
        PatternSizeFieldId, PatternSizeFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&PatternLayer::editHandlePatternSize),
        static_cast<FieldGetMethodSig >(&PatternLayer::getHandlePatternSize));

    oType.addInitialDesc(pDesc);

    pDesc = new SFReal32::Description(
        SFReal32::getClassType(),
        "VerticalAlignment",
        "",
        VerticalAlignmentFieldId, VerticalAlignmentFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&PatternLayer::editHandleVerticalAlignment),
        static_cast<FieldGetMethodSig >(&PatternLayer::getHandleVerticalAlignment));

    oType.addInitialDesc(pDesc);

    pDesc = new SFReal32::Description(
        SFReal32::getClassType(),
        "HorizontalAlignment",
        "",
        HorizontalAlignmentFieldId, HorizontalAlignmentFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&PatternLayer::editHandleHorizontalAlignment),
        static_cast<FieldGetMethodSig >(&PatternLayer::getHandleHorizontalAlignment));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUInt32::Description(
        SFUInt32::getClassType(),
        "HorizontalRepeat",
        "",
        HorizontalRepeatFieldId, HorizontalRepeatFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&PatternLayer::editHandleHorizontalRepeat),
        static_cast<FieldGetMethodSig >(&PatternLayer::getHandleHorizontalRepeat));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUInt32::Description(
        SFUInt32::getClassType(),
        "VerticalRepeat",
        "",
        VerticalRepeatFieldId, VerticalRepeatFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&PatternLayer::editHandleVerticalRepeat),
        static_cast<FieldGetMethodSig >(&PatternLayer::getHandleVerticalRepeat));

    oType.addInitialDesc(pDesc);

    pDesc = new SFReal32::Description(
        SFReal32::getClassType(),
        "HorizontalRepeatValue",
        "",
        HorizontalRepeatValueFieldId, HorizontalRepeatValueFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&PatternLayer::editHandleHorizontalRepeatValue),
        static_cast<FieldGetMethodSig >(&PatternLayer::getHandleHorizontalRepeatValue));

    oType.addInitialDesc(pDesc);

    pDesc = new SFReal32::Description(
        SFReal32::getClassType(),
        "VerticalRepeatValue",
        "",
        VerticalRepeatValueFieldId, VerticalRepeatValueFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&PatternLayer::editHandleVerticalRepeatValue),
        static_cast<FieldGetMethodSig >(&PatternLayer::getHandleVerticalRepeatValue));

    oType.addInitialDesc(pDesc);

    pDesc = new SFVec2f::Description(
        SFVec2f::getClassType(),
        "TopLeftTextureCoord",
        "",
        TopLeftTextureCoordFieldId, TopLeftTextureCoordFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&PatternLayer::editHandleTopLeftTextureCoord),
        static_cast<FieldGetMethodSig >(&PatternLayer::getHandleTopLeftTextureCoord));

    oType.addInitialDesc(pDesc);

    pDesc = new SFVec2f::Description(
        SFVec2f::getClassType(),
        "BottomRightTextureCoord",
        "",
        BottomRightTextureCoordFieldId, BottomRightTextureCoordFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&PatternLayer::editHandleBottomRightTextureCoord),
        static_cast<FieldGetMethodSig >(&PatternLayer::getHandleBottomRightTextureCoord));

    oType.addInitialDesc(pDesc);
}


PatternLayerBase::TypeObject PatternLayerBase::_type(
    PatternLayerBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    0,
    reinterpret_cast<PrototypeCreateF>(&PatternLayerBase::createEmptyLocal),
    PatternLayer::initMethod,
    PatternLayer::exitMethod,
    reinterpret_cast<InitalInsertDescFunc>(&PatternLayer::classDescInserter),
    false,
    0,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "\tname=\"PatternLayer\"\n"
    "\tparent=\"Layer\"\n"
    "    library=\"ContribUserInterface\"\n"
    "    pointerfieldtypes=\"both\"\n"
    "\tstructure=\"concrete\"\n"
    "    systemcomponent=\"true\"\n"
    "    parentsystemcomponent=\"true\"\n"
    "    decoratable=\"false\"\n"
    "    useLocalIncludes=\"false\"\n"
    "    isNodeCore=\"false\"\n"
    "    authors=\"David Kabala (djkabala@gmail.com)                             \"\n"
    ">\n"
    "UI Texture Background.\n"
    "\t<Field\n"
    "\t\tname=\"Texture\"\n"
    "\t\ttype=\"TextureObjChunk\"\n"
    "        category=\"pointer\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t\tdefaultValue=\"NULL\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"Transformation\"\n"
    "\t\ttype=\"TextureTransformChunk\"\n"
    "        category=\"pointer\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t\tdefaultValue=\"NULL\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"Color\"\n"
    "\t\ttype=\"Color4f\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t\tdefaultValue=\"1.0f,1.0f,1.0f,1.0f\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"PatternSize\"\n"
    "\t\ttype=\"Vec2f\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"-1,-1\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"VerticalAlignment\"\n"
    "\t\ttype=\"Real32\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"0.5\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"HorizontalAlignment\"\n"
    "\t\ttype=\"Real32\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"0.5\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"HorizontalRepeat\"\n"
    "\t\ttype=\"UInt32\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"PatternLayer::PATTERN_REPEAT_BY_POINT\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"VerticalRepeat\"\n"
    "\t\ttype=\"UInt32\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"PatternLayer::PATTERN_REPEAT_BY_POINT\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"HorizontalRepeatValue\"\n"
    "\t\ttype=\"Real32\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"1\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"VerticalRepeatValue\"\n"
    "\t\ttype=\"Real32\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"1\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t\n"
    "\t<Field\n"
    "\t\tname=\"TopLeftTextureCoord\"\n"
    "\t\ttype=\"Vec2f\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"0.0,0.0\"\n"
    "\t\taccess=\"protected\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"BottomRightTextureCoord\"\n"
    "\t\ttype=\"Vec2f\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"1.0,1.0\"\n"
    "\t\taccess=\"protected\"\n"
    "\t>\n"
    "\t</Field>\n"
    "</FieldContainer>\n",
    "UI Texture Background.\n"
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &PatternLayerBase::getType(void)
{
    return _type;
}

const FieldContainerType &PatternLayerBase::getType(void) const
{
    return _type;
}

UInt32 PatternLayerBase::getContainerSize(void) const
{
    return sizeof(PatternLayer);
}

/*------------------------- decorator get ------------------------------*/


//! Get the PatternLayer::_sfTexture field.
const SFUnrecTextureObjChunkPtr *PatternLayerBase::getSFTexture(void) const
{
    return &_sfTexture;
}

SFUnrecTextureObjChunkPtr *PatternLayerBase::editSFTexture        (void)
{
    editSField(TextureFieldMask);

    return &_sfTexture;
}

//! Get the PatternLayer::_sfTransformation field.
const SFUnrecTextureTransformChunkPtr *PatternLayerBase::getSFTransformation(void) const
{
    return &_sfTransformation;
}

SFUnrecTextureTransformChunkPtr *PatternLayerBase::editSFTransformation (void)
{
    editSField(TransformationFieldMask);

    return &_sfTransformation;
}

SFColor4f *PatternLayerBase::editSFColor(void)
{
    editSField(ColorFieldMask);

    return &_sfColor;
}

const SFColor4f *PatternLayerBase::getSFColor(void) const
{
    return &_sfColor;
}


SFVec2f *PatternLayerBase::editSFPatternSize(void)
{
    editSField(PatternSizeFieldMask);

    return &_sfPatternSize;
}

const SFVec2f *PatternLayerBase::getSFPatternSize(void) const
{
    return &_sfPatternSize;
}


SFReal32 *PatternLayerBase::editSFVerticalAlignment(void)
{
    editSField(VerticalAlignmentFieldMask);

    return &_sfVerticalAlignment;
}

const SFReal32 *PatternLayerBase::getSFVerticalAlignment(void) const
{
    return &_sfVerticalAlignment;
}


SFReal32 *PatternLayerBase::editSFHorizontalAlignment(void)
{
    editSField(HorizontalAlignmentFieldMask);

    return &_sfHorizontalAlignment;
}

const SFReal32 *PatternLayerBase::getSFHorizontalAlignment(void) const
{
    return &_sfHorizontalAlignment;
}


SFUInt32 *PatternLayerBase::editSFHorizontalRepeat(void)
{
    editSField(HorizontalRepeatFieldMask);

    return &_sfHorizontalRepeat;
}

const SFUInt32 *PatternLayerBase::getSFHorizontalRepeat(void) const
{
    return &_sfHorizontalRepeat;
}


SFUInt32 *PatternLayerBase::editSFVerticalRepeat(void)
{
    editSField(VerticalRepeatFieldMask);

    return &_sfVerticalRepeat;
}

const SFUInt32 *PatternLayerBase::getSFVerticalRepeat(void) const
{
    return &_sfVerticalRepeat;
}


SFReal32 *PatternLayerBase::editSFHorizontalRepeatValue(void)
{
    editSField(HorizontalRepeatValueFieldMask);

    return &_sfHorizontalRepeatValue;
}

const SFReal32 *PatternLayerBase::getSFHorizontalRepeatValue(void) const
{
    return &_sfHorizontalRepeatValue;
}


SFReal32 *PatternLayerBase::editSFVerticalRepeatValue(void)
{
    editSField(VerticalRepeatValueFieldMask);

    return &_sfVerticalRepeatValue;
}

const SFReal32 *PatternLayerBase::getSFVerticalRepeatValue(void) const
{
    return &_sfVerticalRepeatValue;
}


SFVec2f *PatternLayerBase::editSFTopLeftTextureCoord(void)
{
    editSField(TopLeftTextureCoordFieldMask);

    return &_sfTopLeftTextureCoord;
}

const SFVec2f *PatternLayerBase::getSFTopLeftTextureCoord(void) const
{
    return &_sfTopLeftTextureCoord;
}


SFVec2f *PatternLayerBase::editSFBottomRightTextureCoord(void)
{
    editSField(BottomRightTextureCoordFieldMask);

    return &_sfBottomRightTextureCoord;
}

const SFVec2f *PatternLayerBase::getSFBottomRightTextureCoord(void) const
{
    return &_sfBottomRightTextureCoord;
}






/*------------------------------ access -----------------------------------*/

UInt32 PatternLayerBase::getBinSize(ConstFieldMaskArg whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (TextureFieldMask & whichField))
    {
        returnValue += _sfTexture.getBinSize();
    }
    if(FieldBits::NoField != (TransformationFieldMask & whichField))
    {
        returnValue += _sfTransformation.getBinSize();
    }
    if(FieldBits::NoField != (ColorFieldMask & whichField))
    {
        returnValue += _sfColor.getBinSize();
    }
    if(FieldBits::NoField != (PatternSizeFieldMask & whichField))
    {
        returnValue += _sfPatternSize.getBinSize();
    }
    if(FieldBits::NoField != (VerticalAlignmentFieldMask & whichField))
    {
        returnValue += _sfVerticalAlignment.getBinSize();
    }
    if(FieldBits::NoField != (HorizontalAlignmentFieldMask & whichField))
    {
        returnValue += _sfHorizontalAlignment.getBinSize();
    }
    if(FieldBits::NoField != (HorizontalRepeatFieldMask & whichField))
    {
        returnValue += _sfHorizontalRepeat.getBinSize();
    }
    if(FieldBits::NoField != (VerticalRepeatFieldMask & whichField))
    {
        returnValue += _sfVerticalRepeat.getBinSize();
    }
    if(FieldBits::NoField != (HorizontalRepeatValueFieldMask & whichField))
    {
        returnValue += _sfHorizontalRepeatValue.getBinSize();
    }
    if(FieldBits::NoField != (VerticalRepeatValueFieldMask & whichField))
    {
        returnValue += _sfVerticalRepeatValue.getBinSize();
    }
    if(FieldBits::NoField != (TopLeftTextureCoordFieldMask & whichField))
    {
        returnValue += _sfTopLeftTextureCoord.getBinSize();
    }
    if(FieldBits::NoField != (BottomRightTextureCoordFieldMask & whichField))
    {
        returnValue += _sfBottomRightTextureCoord.getBinSize();
    }

    return returnValue;
}

void PatternLayerBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (TextureFieldMask & whichField))
    {
        _sfTexture.copyToBin(pMem);
    }
    if(FieldBits::NoField != (TransformationFieldMask & whichField))
    {
        _sfTransformation.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ColorFieldMask & whichField))
    {
        _sfColor.copyToBin(pMem);
    }
    if(FieldBits::NoField != (PatternSizeFieldMask & whichField))
    {
        _sfPatternSize.copyToBin(pMem);
    }
    if(FieldBits::NoField != (VerticalAlignmentFieldMask & whichField))
    {
        _sfVerticalAlignment.copyToBin(pMem);
    }
    if(FieldBits::NoField != (HorizontalAlignmentFieldMask & whichField))
    {
        _sfHorizontalAlignment.copyToBin(pMem);
    }
    if(FieldBits::NoField != (HorizontalRepeatFieldMask & whichField))
    {
        _sfHorizontalRepeat.copyToBin(pMem);
    }
    if(FieldBits::NoField != (VerticalRepeatFieldMask & whichField))
    {
        _sfVerticalRepeat.copyToBin(pMem);
    }
    if(FieldBits::NoField != (HorizontalRepeatValueFieldMask & whichField))
    {
        _sfHorizontalRepeatValue.copyToBin(pMem);
    }
    if(FieldBits::NoField != (VerticalRepeatValueFieldMask & whichField))
    {
        _sfVerticalRepeatValue.copyToBin(pMem);
    }
    if(FieldBits::NoField != (TopLeftTextureCoordFieldMask & whichField))
    {
        _sfTopLeftTextureCoord.copyToBin(pMem);
    }
    if(FieldBits::NoField != (BottomRightTextureCoordFieldMask & whichField))
    {
        _sfBottomRightTextureCoord.copyToBin(pMem);
    }
}

void PatternLayerBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (TextureFieldMask & whichField))
    {
        _sfTexture.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (TransformationFieldMask & whichField))
    {
        _sfTransformation.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ColorFieldMask & whichField))
    {
        _sfColor.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (PatternSizeFieldMask & whichField))
    {
        _sfPatternSize.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (VerticalAlignmentFieldMask & whichField))
    {
        _sfVerticalAlignment.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (HorizontalAlignmentFieldMask & whichField))
    {
        _sfHorizontalAlignment.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (HorizontalRepeatFieldMask & whichField))
    {
        _sfHorizontalRepeat.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (VerticalRepeatFieldMask & whichField))
    {
        _sfVerticalRepeat.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (HorizontalRepeatValueFieldMask & whichField))
    {
        _sfHorizontalRepeatValue.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (VerticalRepeatValueFieldMask & whichField))
    {
        _sfVerticalRepeatValue.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (TopLeftTextureCoordFieldMask & whichField))
    {
        _sfTopLeftTextureCoord.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (BottomRightTextureCoordFieldMask & whichField))
    {
        _sfBottomRightTextureCoord.copyFromBin(pMem);
    }
}

//! create a new instance of the class
PatternLayerTransitPtr PatternLayerBase::createLocal(BitVector bFlags)
{
    PatternLayerTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyLocal(bFlags);

        fc = dynamic_pointer_cast<PatternLayer>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class, copy the container flags
PatternLayerTransitPtr PatternLayerBase::createDependent(BitVector bFlags)
{
    PatternLayerTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyDependent(bFlags);

        fc = dynamic_pointer_cast<PatternLayer>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class
PatternLayerTransitPtr PatternLayerBase::create(void)
{
    PatternLayerTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopy();

        fc = dynamic_pointer_cast<PatternLayer>(tmpPtr);
    }

    return fc;
}

PatternLayer *PatternLayerBase::createEmptyLocal(BitVector bFlags)
{
    PatternLayer *returnValue;

    newPtr<PatternLayer>(returnValue, bFlags);

    returnValue->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

//! create an empty new instance of the class, do not copy the prototype
PatternLayer *PatternLayerBase::createEmpty(void)
{
    PatternLayer *returnValue;

    newPtr<PatternLayer>(returnValue, Thread::getCurrentLocalFlags());

    returnValue->_pFieldFlags->_bNamespaceMask &=
        ~Thread::getCurrentLocalFlags();

    return returnValue;
}


FieldContainerTransitPtr PatternLayerBase::shallowCopyLocal(
    BitVector bFlags) const
{
    PatternLayer *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const PatternLayer *>(this), bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

FieldContainerTransitPtr PatternLayerBase::shallowCopyDependent(
    BitVector bFlags) const
{
    PatternLayer *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const PatternLayer *>(this), ~bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask = bFlags;

    return returnValue;
}

FieldContainerTransitPtr PatternLayerBase::shallowCopy(void) const
{
    PatternLayer *tmpPtr;

    newPtr(tmpPtr,
           dynamic_cast<const PatternLayer *>(this),
           Thread::getCurrentLocalFlags());

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~Thread::getCurrentLocalFlags();

    FieldContainerTransitPtr returnValue(tmpPtr);

    return returnValue;
}




/*------------------------- constructors ----------------------------------*/

PatternLayerBase::PatternLayerBase(void) :
    Inherited(),
    _sfTexture                (NULL),
    _sfTransformation         (NULL),
    _sfColor                  (Color4f(1.0f,1.0f,1.0f,1.0f)),
    _sfPatternSize            (Vec2f(-1,-1)),
    _sfVerticalAlignment      (Real32(0.5)),
    _sfHorizontalAlignment    (Real32(0.5)),
    _sfHorizontalRepeat       (UInt32(PatternLayer::PATTERN_REPEAT_BY_POINT)),
    _sfVerticalRepeat         (UInt32(PatternLayer::PATTERN_REPEAT_BY_POINT)),
    _sfHorizontalRepeatValue  (Real32(1)),
    _sfVerticalRepeatValue    (Real32(1)),
    _sfTopLeftTextureCoord    (Vec2f(0.0,0.0)),
    _sfBottomRightTextureCoord(Vec2f(1.0,1.0))
{
}

PatternLayerBase::PatternLayerBase(const PatternLayerBase &source) :
    Inherited(source),
    _sfTexture                (NULL),
    _sfTransformation         (NULL),
    _sfColor                  (source._sfColor                  ),
    _sfPatternSize            (source._sfPatternSize            ),
    _sfVerticalAlignment      (source._sfVerticalAlignment      ),
    _sfHorizontalAlignment    (source._sfHorizontalAlignment    ),
    _sfHorizontalRepeat       (source._sfHorizontalRepeat       ),
    _sfVerticalRepeat         (source._sfVerticalRepeat         ),
    _sfHorizontalRepeatValue  (source._sfHorizontalRepeatValue  ),
    _sfVerticalRepeatValue    (source._sfVerticalRepeatValue    ),
    _sfTopLeftTextureCoord    (source._sfTopLeftTextureCoord    ),
    _sfBottomRightTextureCoord(source._sfBottomRightTextureCoord)
{
}


/*-------------------------- destructors ----------------------------------*/

PatternLayerBase::~PatternLayerBase(void)
{
}

void PatternLayerBase::onCreate(const PatternLayer *source)
{
    Inherited::onCreate(source);

    if(source != NULL)
    {
        PatternLayer *pThis = static_cast<PatternLayer *>(this);

        pThis->setTexture(source->getTexture());

        pThis->setTransformation(source->getTransformation());
    }
}

GetFieldHandlePtr PatternLayerBase::getHandleTexture         (void) const
{
    SFUnrecTextureObjChunkPtr::GetHandlePtr returnValue(
        new  SFUnrecTextureObjChunkPtr::GetHandle(
             &_sfTexture,
             this->getType().getFieldDesc(TextureFieldId),
             const_cast<PatternLayerBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr PatternLayerBase::editHandleTexture        (void)
{
    SFUnrecTextureObjChunkPtr::EditHandlePtr returnValue(
        new  SFUnrecTextureObjChunkPtr::EditHandle(
             &_sfTexture,
             this->getType().getFieldDesc(TextureFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&PatternLayer::setTexture,
                    static_cast<PatternLayer *>(this), _1));

    editSField(TextureFieldMask);

    return returnValue;
}

GetFieldHandlePtr PatternLayerBase::getHandleTransformation  (void) const
{
    SFUnrecTextureTransformChunkPtr::GetHandlePtr returnValue(
        new  SFUnrecTextureTransformChunkPtr::GetHandle(
             &_sfTransformation,
             this->getType().getFieldDesc(TransformationFieldId),
             const_cast<PatternLayerBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr PatternLayerBase::editHandleTransformation (void)
{
    SFUnrecTextureTransformChunkPtr::EditHandlePtr returnValue(
        new  SFUnrecTextureTransformChunkPtr::EditHandle(
             &_sfTransformation,
             this->getType().getFieldDesc(TransformationFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&PatternLayer::setTransformation,
                    static_cast<PatternLayer *>(this), _1));

    editSField(TransformationFieldMask);

    return returnValue;
}

GetFieldHandlePtr PatternLayerBase::getHandleColor           (void) const
{
    SFColor4f::GetHandlePtr returnValue(
        new  SFColor4f::GetHandle(
             &_sfColor,
             this->getType().getFieldDesc(ColorFieldId),
             const_cast<PatternLayerBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr PatternLayerBase::editHandleColor          (void)
{
    SFColor4f::EditHandlePtr returnValue(
        new  SFColor4f::EditHandle(
             &_sfColor,
             this->getType().getFieldDesc(ColorFieldId),
             this));


    editSField(ColorFieldMask);

    return returnValue;
}

GetFieldHandlePtr PatternLayerBase::getHandlePatternSize     (void) const
{
    SFVec2f::GetHandlePtr returnValue(
        new  SFVec2f::GetHandle(
             &_sfPatternSize,
             this->getType().getFieldDesc(PatternSizeFieldId),
             const_cast<PatternLayerBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr PatternLayerBase::editHandlePatternSize    (void)
{
    SFVec2f::EditHandlePtr returnValue(
        new  SFVec2f::EditHandle(
             &_sfPatternSize,
             this->getType().getFieldDesc(PatternSizeFieldId),
             this));


    editSField(PatternSizeFieldMask);

    return returnValue;
}

GetFieldHandlePtr PatternLayerBase::getHandleVerticalAlignment (void) const
{
    SFReal32::GetHandlePtr returnValue(
        new  SFReal32::GetHandle(
             &_sfVerticalAlignment,
             this->getType().getFieldDesc(VerticalAlignmentFieldId),
             const_cast<PatternLayerBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr PatternLayerBase::editHandleVerticalAlignment(void)
{
    SFReal32::EditHandlePtr returnValue(
        new  SFReal32::EditHandle(
             &_sfVerticalAlignment,
             this->getType().getFieldDesc(VerticalAlignmentFieldId),
             this));


    editSField(VerticalAlignmentFieldMask);

    return returnValue;
}

GetFieldHandlePtr PatternLayerBase::getHandleHorizontalAlignment (void) const
{
    SFReal32::GetHandlePtr returnValue(
        new  SFReal32::GetHandle(
             &_sfHorizontalAlignment,
             this->getType().getFieldDesc(HorizontalAlignmentFieldId),
             const_cast<PatternLayerBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr PatternLayerBase::editHandleHorizontalAlignment(void)
{
    SFReal32::EditHandlePtr returnValue(
        new  SFReal32::EditHandle(
             &_sfHorizontalAlignment,
             this->getType().getFieldDesc(HorizontalAlignmentFieldId),
             this));


    editSField(HorizontalAlignmentFieldMask);

    return returnValue;
}

GetFieldHandlePtr PatternLayerBase::getHandleHorizontalRepeat (void) const
{
    SFUInt32::GetHandlePtr returnValue(
        new  SFUInt32::GetHandle(
             &_sfHorizontalRepeat,
             this->getType().getFieldDesc(HorizontalRepeatFieldId),
             const_cast<PatternLayerBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr PatternLayerBase::editHandleHorizontalRepeat(void)
{
    SFUInt32::EditHandlePtr returnValue(
        new  SFUInt32::EditHandle(
             &_sfHorizontalRepeat,
             this->getType().getFieldDesc(HorizontalRepeatFieldId),
             this));


    editSField(HorizontalRepeatFieldMask);

    return returnValue;
}

GetFieldHandlePtr PatternLayerBase::getHandleVerticalRepeat  (void) const
{
    SFUInt32::GetHandlePtr returnValue(
        new  SFUInt32::GetHandle(
             &_sfVerticalRepeat,
             this->getType().getFieldDesc(VerticalRepeatFieldId),
             const_cast<PatternLayerBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr PatternLayerBase::editHandleVerticalRepeat (void)
{
    SFUInt32::EditHandlePtr returnValue(
        new  SFUInt32::EditHandle(
             &_sfVerticalRepeat,
             this->getType().getFieldDesc(VerticalRepeatFieldId),
             this));


    editSField(VerticalRepeatFieldMask);

    return returnValue;
}

GetFieldHandlePtr PatternLayerBase::getHandleHorizontalRepeatValue (void) const
{
    SFReal32::GetHandlePtr returnValue(
        new  SFReal32::GetHandle(
             &_sfHorizontalRepeatValue,
             this->getType().getFieldDesc(HorizontalRepeatValueFieldId),
             const_cast<PatternLayerBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr PatternLayerBase::editHandleHorizontalRepeatValue(void)
{
    SFReal32::EditHandlePtr returnValue(
        new  SFReal32::EditHandle(
             &_sfHorizontalRepeatValue,
             this->getType().getFieldDesc(HorizontalRepeatValueFieldId),
             this));


    editSField(HorizontalRepeatValueFieldMask);

    return returnValue;
}

GetFieldHandlePtr PatternLayerBase::getHandleVerticalRepeatValue (void) const
{
    SFReal32::GetHandlePtr returnValue(
        new  SFReal32::GetHandle(
             &_sfVerticalRepeatValue,
             this->getType().getFieldDesc(VerticalRepeatValueFieldId),
             const_cast<PatternLayerBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr PatternLayerBase::editHandleVerticalRepeatValue(void)
{
    SFReal32::EditHandlePtr returnValue(
        new  SFReal32::EditHandle(
             &_sfVerticalRepeatValue,
             this->getType().getFieldDesc(VerticalRepeatValueFieldId),
             this));


    editSField(VerticalRepeatValueFieldMask);

    return returnValue;
}

GetFieldHandlePtr PatternLayerBase::getHandleTopLeftTextureCoord (void) const
{
    SFVec2f::GetHandlePtr returnValue(
        new  SFVec2f::GetHandle(
             &_sfTopLeftTextureCoord,
             this->getType().getFieldDesc(TopLeftTextureCoordFieldId),
             const_cast<PatternLayerBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr PatternLayerBase::editHandleTopLeftTextureCoord(void)
{
    SFVec2f::EditHandlePtr returnValue(
        new  SFVec2f::EditHandle(
             &_sfTopLeftTextureCoord,
             this->getType().getFieldDesc(TopLeftTextureCoordFieldId),
             this));


    editSField(TopLeftTextureCoordFieldMask);

    return returnValue;
}

GetFieldHandlePtr PatternLayerBase::getHandleBottomRightTextureCoord (void) const
{
    SFVec2f::GetHandlePtr returnValue(
        new  SFVec2f::GetHandle(
             &_sfBottomRightTextureCoord,
             this->getType().getFieldDesc(BottomRightTextureCoordFieldId),
             const_cast<PatternLayerBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr PatternLayerBase::editHandleBottomRightTextureCoord(void)
{
    SFVec2f::EditHandlePtr returnValue(
        new  SFVec2f::EditHandle(
             &_sfBottomRightTextureCoord,
             this->getType().getFieldDesc(BottomRightTextureCoordFieldId),
             this));


    editSField(BottomRightTextureCoordFieldMask);

    return returnValue;
}


#ifdef OSG_MT_CPTR_ASPECT
void PatternLayerBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    PatternLayer *pThis = static_cast<PatternLayer *>(this);

    pThis->execSync(static_cast<PatternLayer *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif


#ifdef OSG_MT_CPTR_ASPECT
FieldContainer *PatternLayerBase::createAspectCopy(
    const FieldContainer *pRefAspect) const
{
    PatternLayer *returnValue;

    newAspectCopy(returnValue,
                  dynamic_cast<const PatternLayer *>(pRefAspect),
                  dynamic_cast<const PatternLayer *>(this));

    return returnValue;
}
#endif

void PatternLayerBase::resolveLinks(void)
{
    Inherited::resolveLinks();

    static_cast<PatternLayer *>(this)->setTexture(NULL);

    static_cast<PatternLayer *>(this)->setTransformation(NULL);


}


OSG_END_NAMESPACE
