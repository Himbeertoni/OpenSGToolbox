/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact:  David Kabala (djkabala@gmail.com)                             *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class PatternLayer
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#ifndef _OSGPATTERNLAYERBASE_H_
#define _OSGPATTERNLAYERBASE_H_
#ifdef __sgi
#pragma once
#endif


#include "OSGConfig.h"
#include "OSGContribUserInterfaceDef.h"

//#include "OSGBaseTypes.h"

#include "OSGLayer.h" // Parent

#include "OSGTextureObjChunkFields.h"   // Texture type
#include "OSGTextureTransformChunkFields.h" // Transformation type
#include "OSGBaseFields.h"              // Color type
#include "OSGVecFields.h"               // PatternSize type
#include "OSGSysFields.h"               // VerticalAlignment type

#include "OSGPatternLayerFields.h"

OSG_BEGIN_NAMESPACE

class PatternLayer;

//! \brief PatternLayer Base Class.

class OSG_CONTRIBUSERINTERFACE_DLLMAPPING PatternLayerBase : public Layer
{
  public:

    typedef Layer Inherited;
    typedef Layer ParentContainer;

    typedef Inherited::TypeObject TypeObject;
    typedef TypeObject::InitPhase InitPhase;

    OSG_GEN_INTERNALPTR(PatternLayer);

    /*==========================  PUBLIC  =================================*/

  public:

    enum
    {
        TextureFieldId = Inherited::NextFieldId,
        TransformationFieldId = TextureFieldId + 1,
        ColorFieldId = TransformationFieldId + 1,
        PatternSizeFieldId = ColorFieldId + 1,
        VerticalAlignmentFieldId = PatternSizeFieldId + 1,
        HorizontalAlignmentFieldId = VerticalAlignmentFieldId + 1,
        HorizontalRepeatFieldId = HorizontalAlignmentFieldId + 1,
        VerticalRepeatFieldId = HorizontalRepeatFieldId + 1,
        HorizontalRepeatValueFieldId = VerticalRepeatFieldId + 1,
        VerticalRepeatValueFieldId = HorizontalRepeatValueFieldId + 1,
        TopLeftTextureCoordFieldId = VerticalRepeatValueFieldId + 1,
        BottomRightTextureCoordFieldId = TopLeftTextureCoordFieldId + 1,
        NextFieldId = BottomRightTextureCoordFieldId + 1
    };

    static const OSG::BitVector TextureFieldMask =
        (TypeTraits<BitVector>::One << TextureFieldId);
    static const OSG::BitVector TransformationFieldMask =
        (TypeTraits<BitVector>::One << TransformationFieldId);
    static const OSG::BitVector ColorFieldMask =
        (TypeTraits<BitVector>::One << ColorFieldId);
    static const OSG::BitVector PatternSizeFieldMask =
        (TypeTraits<BitVector>::One << PatternSizeFieldId);
    static const OSG::BitVector VerticalAlignmentFieldMask =
        (TypeTraits<BitVector>::One << VerticalAlignmentFieldId);
    static const OSG::BitVector HorizontalAlignmentFieldMask =
        (TypeTraits<BitVector>::One << HorizontalAlignmentFieldId);
    static const OSG::BitVector HorizontalRepeatFieldMask =
        (TypeTraits<BitVector>::One << HorizontalRepeatFieldId);
    static const OSG::BitVector VerticalRepeatFieldMask =
        (TypeTraits<BitVector>::One << VerticalRepeatFieldId);
    static const OSG::BitVector HorizontalRepeatValueFieldMask =
        (TypeTraits<BitVector>::One << HorizontalRepeatValueFieldId);
    static const OSG::BitVector VerticalRepeatValueFieldMask =
        (TypeTraits<BitVector>::One << VerticalRepeatValueFieldId);
    static const OSG::BitVector TopLeftTextureCoordFieldMask =
        (TypeTraits<BitVector>::One << TopLeftTextureCoordFieldId);
    static const OSG::BitVector BottomRightTextureCoordFieldMask =
        (TypeTraits<BitVector>::One << BottomRightTextureCoordFieldId);
    static const OSG::BitVector NextFieldMask =
        (TypeTraits<BitVector>::One << NextFieldId);
        
    typedef SFUnrecTextureObjChunkPtr SFTextureType;
    typedef SFUnrecTextureTransformChunkPtr SFTransformationType;
    typedef SFColor4f         SFColorType;
    typedef SFVec2f           SFPatternSizeType;
    typedef SFReal32          SFVerticalAlignmentType;
    typedef SFReal32          SFHorizontalAlignmentType;
    typedef SFUInt32          SFHorizontalRepeatType;
    typedef SFUInt32          SFVerticalRepeatType;
    typedef SFReal32          SFHorizontalRepeatValueType;
    typedef SFReal32          SFVerticalRepeatValueType;
    typedef SFVec2f           SFTopLeftTextureCoordType;
    typedef SFVec2f           SFBottomRightTextureCoordType;

    /*---------------------------------------------------------------------*/
    /*! \name                    Class Get                                 */
    /*! \{                                                                 */

    static FieldContainerType &getClassType   (void);
    static UInt32              getClassTypeId (void);
    static UInt16              getClassGroupId(void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                FieldContainer Get                            */
    /*! \{                                                                 */

    virtual       FieldContainerType &getType         (void);
    virtual const FieldContainerType &getType         (void) const;

    virtual       UInt32              getContainerSize(void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Get                                 */
    /*! \{                                                                 */

            const SFUnrecTextureObjChunkPtr *getSFTexture        (void) const;
                  SFUnrecTextureObjChunkPtr *editSFTexture        (void);
            const SFUnrecTextureTransformChunkPtr *getSFTransformation (void) const;
                  SFUnrecTextureTransformChunkPtr *editSFTransformation (void);

                  SFColor4f           *editSFColor          (void);
            const SFColor4f           *getSFColor           (void) const;

                  SFVec2f             *editSFPatternSize    (void);
            const SFVec2f             *getSFPatternSize     (void) const;

                  SFReal32            *editSFVerticalAlignment(void);
            const SFReal32            *getSFVerticalAlignment (void) const;

                  SFReal32            *editSFHorizontalAlignment(void);
            const SFReal32            *getSFHorizontalAlignment (void) const;

                  SFUInt32            *editSFHorizontalRepeat(void);
            const SFUInt32            *getSFHorizontalRepeat (void) const;

                  SFUInt32            *editSFVerticalRepeat (void);
            const SFUInt32            *getSFVerticalRepeat  (void) const;

                  SFReal32            *editSFHorizontalRepeatValue(void);
            const SFReal32            *getSFHorizontalRepeatValue (void) const;

                  SFReal32            *editSFVerticalRepeatValue(void);
            const SFReal32            *getSFVerticalRepeatValue (void) const;


                  TextureObjChunk * getTexture        (void) const;

                  TextureTransformChunk * getTransformation (void) const;

                  Color4f             &editColor          (void);
            const Color4f             &getColor           (void) const;

                  Vec2f               &editPatternSize    (void);
            const Vec2f               &getPatternSize     (void) const;

                  Real32              &editVerticalAlignment(void);
                  Real32               getVerticalAlignment (void) const;

                  Real32              &editHorizontalAlignment(void);
                  Real32               getHorizontalAlignment (void) const;

                  UInt32              &editHorizontalRepeat(void);
                  UInt32               getHorizontalRepeat (void) const;

                  UInt32              &editVerticalRepeat (void);
                  UInt32               getVerticalRepeat  (void) const;

                  Real32              &editHorizontalRepeatValue(void);
                  Real32               getHorizontalRepeatValue (void) const;

                  Real32              &editVerticalRepeatValue(void);
                  Real32               getVerticalRepeatValue (void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Set                                 */
    /*! \{                                                                 */

            void setTexture        (TextureObjChunk * const value);
            void setTransformation (TextureTransformChunk * const value);
            void setColor          (const Color4f &value);
            void setPatternSize    (const Vec2f &value);
            void setVerticalAlignment(const Real32 value);
            void setHorizontalAlignment(const Real32 value);
            void setHorizontalRepeat(const UInt32 value);
            void setVerticalRepeat (const UInt32 value);
            void setHorizontalRepeatValue(const Real32 value);
            void setVerticalRepeatValue(const Real32 value);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                Ptr Field Set                                 */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                Ptr MField Set                                */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Binary Access                              */
    /*! \{                                                                 */

    virtual UInt32 getBinSize (ConstFieldMaskArg  whichField);
    virtual void   copyToBin  (BinaryDataHandler &pMem,
                               ConstFieldMaskArg  whichField);
    virtual void   copyFromBin(BinaryDataHandler &pMem,
                               ConstFieldMaskArg  whichField);


    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Construction                               */
    /*! \{                                                                 */

    static  PatternLayerTransitPtr  create          (void);
    static  PatternLayer           *createEmpty     (void);

    static  PatternLayerTransitPtr  createLocal     (
                                               BitVector bFlags = FCLocal::All);

    static  PatternLayer            *createEmptyLocal(
                                              BitVector bFlags = FCLocal::All);

    static  PatternLayerTransitPtr  createDependent  (BitVector bFlags);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Copy                                   */
    /*! \{                                                                 */

    virtual FieldContainerTransitPtr shallowCopy     (void) const;
    virtual FieldContainerTransitPtr shallowCopyLocal(
                                       BitVector bFlags = FCLocal::All) const;
    virtual FieldContainerTransitPtr shallowCopyDependent(
                                                      BitVector bFlags) const;

    /*! \}                                                                 */
    /*=========================  PROTECTED  ===============================*/

  protected:

    static TypeObject _type;

    static       void   classDescInserter(TypeObject &oType);
    static const Char8 *getClassname     (void             );

    /*---------------------------------------------------------------------*/
    /*! \name                      Fields                                  */
    /*! \{                                                                 */

    SFUnrecTextureObjChunkPtr _sfTexture;
    SFUnrecTextureTransformChunkPtr _sfTransformation;
    SFColor4f         _sfColor;
    SFVec2f           _sfPatternSize;
    SFReal32          _sfVerticalAlignment;
    SFReal32          _sfHorizontalAlignment;
    SFUInt32          _sfHorizontalRepeat;
    SFUInt32          _sfVerticalRepeat;
    SFReal32          _sfHorizontalRepeatValue;
    SFReal32          _sfVerticalRepeatValue;
    SFVec2f           _sfTopLeftTextureCoord;
    SFVec2f           _sfBottomRightTextureCoord;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Constructors                               */
    /*! \{                                                                 */

    PatternLayerBase(void);
    PatternLayerBase(const PatternLayerBase &source);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Destructors                                */
    /*! \{                                                                 */

    virtual ~PatternLayerBase(void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                     onCreate                                */
    /*! \{                                                                 */

    void onCreate(const PatternLayer *source = NULL);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Generic Field Access                      */
    /*! \{                                                                 */

    GetFieldHandlePtr  getHandleTexture         (void) const;
    EditFieldHandlePtr editHandleTexture        (void);
    GetFieldHandlePtr  getHandleTransformation  (void) const;
    EditFieldHandlePtr editHandleTransformation (void);
    GetFieldHandlePtr  getHandleColor           (void) const;
    EditFieldHandlePtr editHandleColor          (void);
    GetFieldHandlePtr  getHandlePatternSize     (void) const;
    EditFieldHandlePtr editHandlePatternSize    (void);
    GetFieldHandlePtr  getHandleVerticalAlignment (void) const;
    EditFieldHandlePtr editHandleVerticalAlignment(void);
    GetFieldHandlePtr  getHandleHorizontalAlignment (void) const;
    EditFieldHandlePtr editHandleHorizontalAlignment(void);
    GetFieldHandlePtr  getHandleHorizontalRepeat (void) const;
    EditFieldHandlePtr editHandleHorizontalRepeat(void);
    GetFieldHandlePtr  getHandleVerticalRepeat  (void) const;
    EditFieldHandlePtr editHandleVerticalRepeat (void);
    GetFieldHandlePtr  getHandleHorizontalRepeatValue (void) const;
    EditFieldHandlePtr editHandleHorizontalRepeatValue(void);
    GetFieldHandlePtr  getHandleVerticalRepeatValue (void) const;
    EditFieldHandlePtr editHandleVerticalRepeatValue(void);
    GetFieldHandlePtr  getHandleTopLeftTextureCoord (void) const;
    EditFieldHandlePtr editHandleTopLeftTextureCoord(void);
    GetFieldHandlePtr  getHandleBottomRightTextureCoord (void) const;
    EditFieldHandlePtr editHandleBottomRightTextureCoord(void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Get                                 */
    /*! \{                                                                 */


                  SFVec2f             *editSFTopLeftTextureCoord(void);
            const SFVec2f             *getSFTopLeftTextureCoord (void) const;

                  SFVec2f             *editSFBottomRightTextureCoord(void);
            const SFVec2f             *getSFBottomRightTextureCoord (void) const;


                  Vec2f               &editTopLeftTextureCoord(void);
            const Vec2f               &getTopLeftTextureCoord (void) const;

                  Vec2f               &editBottomRightTextureCoord(void);
            const Vec2f               &getBottomRightTextureCoord (void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Set                                 */
    /*! \{                                                                 */

            void setTopLeftTextureCoord(const Vec2f &value);
            void setBottomRightTextureCoord(const Vec2f &value);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                Ptr MField Set                                */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

#ifdef OSG_MT_CPTR_ASPECT
    virtual void execSyncV(      FieldContainer    &oFrom,
                                 ConstFieldMaskArg  whichField,
                                 AspectOffsetStore &oOffsets,
                                 ConstFieldMaskArg  syncMode  ,
                           const UInt32             uiSyncInfo);

            void execSync (      PatternLayerBase *pFrom,
                                 ConstFieldMaskArg  whichField,
                                 AspectOffsetStore &oOffsets,
                                 ConstFieldMaskArg  syncMode  ,
                           const UInt32             uiSyncInfo);
#endif

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Edit                                   */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                     Aspect Create                            */
    /*! \{                                                                 */

#ifdef OSG_MT_CPTR_ASPECT
    virtual FieldContainer *createAspectCopy(
                                    const FieldContainer *pRefAspect) const;
#endif

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Edit                                   */
    /*! \{                                                                 */
    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

    virtual void resolveLinks(void);

    /*! \}                                                                 */
    /*==========================  PRIVATE  ================================*/

  private:
    /*---------------------------------------------------------------------*/

    // prohibit default functions (move to 'public' if you need one)
    void operator =(const PatternLayerBase &source);
};

typedef PatternLayerBase *PatternLayerBaseP;

OSG_END_NAMESPACE

#endif /* _OSGPATTERNLAYERBASE_H_ */
