/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact:  David Kabala (djkabala@gmail.com)                             *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class BoxLayout!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>
#include <boost/assign/list_of.hpp>

#include "OSGConfig.h"




#include "OSGBoxLayoutBase.h"
#include "OSGBoxLayout.h"

#include <boost/bind.hpp>

#ifdef WIN32 // turn off 'this' : used in base member initializer list warning
#pragma warning(disable:4355)
#endif

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::BoxLayout
    A UI BoxLayout.
 */

/***************************************************************************\
 *                        Field Documentation                              *
\***************************************************************************/

/*! \var UInt32          BoxLayoutBase::_sfOrientation
    
*/

/*! \var Real32          BoxLayoutBase::_sfMajorAxisAlignment
    
*/

/*! \var Real32          BoxLayoutBase::_sfMinorAxisAlignment
    
*/

/*! \var Real32          BoxLayoutBase::_sfComponentAlignment
    
*/

/*! \var Real32          BoxLayoutBase::_sfMajorAxisMinimumGap
    
*/

/*! \var Real32          BoxLayoutBase::_sfMajorAxisMaximumGap
    
*/


/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldTraits<BoxLayout *>::_type("BoxLayoutPtr", "LayoutPtr");
#endif

OSG_FIELDTRAITS_GETTYPE(BoxLayout *)

OSG_EXPORT_PTR_SFIELD_FULL(PointerSField,
                           BoxLayout *,
                           0);

OSG_EXPORT_PTR_MFIELD_FULL(PointerMField,
                           BoxLayout *,
                           0);

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

void BoxLayoutBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new SFUInt32::Description(
        SFUInt32::getClassType(),
        "Orientation",
        "",
        OrientationFieldId, OrientationFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&BoxLayout::editHandleOrientation),
        static_cast<FieldGetMethodSig >(&BoxLayout::getHandleOrientation));

    oType.addInitialDesc(pDesc);

    pDesc = new SFReal32::Description(
        SFReal32::getClassType(),
        "MajorAxisAlignment",
        "",
        MajorAxisAlignmentFieldId, MajorAxisAlignmentFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&BoxLayout::editHandleMajorAxisAlignment),
        static_cast<FieldGetMethodSig >(&BoxLayout::getHandleMajorAxisAlignment));

    oType.addInitialDesc(pDesc);

    pDesc = new SFReal32::Description(
        SFReal32::getClassType(),
        "MinorAxisAlignment",
        "",
        MinorAxisAlignmentFieldId, MinorAxisAlignmentFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&BoxLayout::editHandleMinorAxisAlignment),
        static_cast<FieldGetMethodSig >(&BoxLayout::getHandleMinorAxisAlignment));

    oType.addInitialDesc(pDesc);

    pDesc = new SFReal32::Description(
        SFReal32::getClassType(),
        "ComponentAlignment",
        "",
        ComponentAlignmentFieldId, ComponentAlignmentFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&BoxLayout::editHandleComponentAlignment),
        static_cast<FieldGetMethodSig >(&BoxLayout::getHandleComponentAlignment));

    oType.addInitialDesc(pDesc);

    pDesc = new SFReal32::Description(
        SFReal32::getClassType(),
        "MajorAxisMinimumGap",
        "",
        MajorAxisMinimumGapFieldId, MajorAxisMinimumGapFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&BoxLayout::editHandleMajorAxisMinimumGap),
        static_cast<FieldGetMethodSig >(&BoxLayout::getHandleMajorAxisMinimumGap));

    oType.addInitialDesc(pDesc);

    pDesc = new SFReal32::Description(
        SFReal32::getClassType(),
        "MajorAxisMaximumGap",
        "",
        MajorAxisMaximumGapFieldId, MajorAxisMaximumGapFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&BoxLayout::editHandleMajorAxisMaximumGap),
        static_cast<FieldGetMethodSig >(&BoxLayout::getHandleMajorAxisMaximumGap));

    oType.addInitialDesc(pDesc);
}


BoxLayoutBase::TypeObject BoxLayoutBase::_type(
    BoxLayoutBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    0,
    reinterpret_cast<PrototypeCreateF>(&BoxLayoutBase::createEmptyLocal),
    BoxLayout::initMethod,
    BoxLayout::exitMethod,
    reinterpret_cast<InitalInsertDescFunc>(&BoxLayout::classDescInserter),
    false,
    0,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "\tname=\"BoxLayout\"\n"
    "\tparent=\"Layout\"\n"
    "    library=\"ContribUserInterface\"\n"
    "    pointerfieldtypes=\"both\"\n"
    "\tstructure=\"concrete\"\n"
    "    systemcomponent=\"true\"\n"
    "    parentsystemcomponent=\"true\"\n"
    "    decoratable=\"false\"\n"
    "    useLocalIncludes=\"false\"\n"
    "    isNodeCore=\"false\"\n"
    "    authors=\"David Kabala (djkabala@gmail.com)                             \"\n"
    ">\n"
    "A UI BoxLayout.\n"
    "\t<Field\n"
    "\t\tname=\"Orientation\"\n"
    "\t\ttype=\"UInt32\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"BoxLayout::HORIZONTAL_ORIENTATION\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"MajorAxisAlignment\"\n"
    "\t\ttype=\"Real32\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"0.5f\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"MinorAxisAlignment\"\n"
    "\t\ttype=\"Real32\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"0.5f\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"ComponentAlignment\"\n"
    "\t\ttype=\"Real32\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"0.5f\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"MajorAxisMinimumGap\"\n"
    "\t\ttype=\"Real32\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"2.0f\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"MajorAxisMaximumGap\"\n"
    "\t\ttype=\"Real32\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"100000000.0f\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "</FieldContainer>\n",
    "A UI BoxLayout.\n"
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &BoxLayoutBase::getType(void)
{
    return _type;
}

const FieldContainerType &BoxLayoutBase::getType(void) const
{
    return _type;
}

UInt32 BoxLayoutBase::getContainerSize(void) const
{
    return sizeof(BoxLayout);
}

/*------------------------- decorator get ------------------------------*/


SFUInt32 *BoxLayoutBase::editSFOrientation(void)
{
    editSField(OrientationFieldMask);

    return &_sfOrientation;
}

const SFUInt32 *BoxLayoutBase::getSFOrientation(void) const
{
    return &_sfOrientation;
}


SFReal32 *BoxLayoutBase::editSFMajorAxisAlignment(void)
{
    editSField(MajorAxisAlignmentFieldMask);

    return &_sfMajorAxisAlignment;
}

const SFReal32 *BoxLayoutBase::getSFMajorAxisAlignment(void) const
{
    return &_sfMajorAxisAlignment;
}


SFReal32 *BoxLayoutBase::editSFMinorAxisAlignment(void)
{
    editSField(MinorAxisAlignmentFieldMask);

    return &_sfMinorAxisAlignment;
}

const SFReal32 *BoxLayoutBase::getSFMinorAxisAlignment(void) const
{
    return &_sfMinorAxisAlignment;
}


SFReal32 *BoxLayoutBase::editSFComponentAlignment(void)
{
    editSField(ComponentAlignmentFieldMask);

    return &_sfComponentAlignment;
}

const SFReal32 *BoxLayoutBase::getSFComponentAlignment(void) const
{
    return &_sfComponentAlignment;
}


SFReal32 *BoxLayoutBase::editSFMajorAxisMinimumGap(void)
{
    editSField(MajorAxisMinimumGapFieldMask);

    return &_sfMajorAxisMinimumGap;
}

const SFReal32 *BoxLayoutBase::getSFMajorAxisMinimumGap(void) const
{
    return &_sfMajorAxisMinimumGap;
}


SFReal32 *BoxLayoutBase::editSFMajorAxisMaximumGap(void)
{
    editSField(MajorAxisMaximumGapFieldMask);

    return &_sfMajorAxisMaximumGap;
}

const SFReal32 *BoxLayoutBase::getSFMajorAxisMaximumGap(void) const
{
    return &_sfMajorAxisMaximumGap;
}






/*------------------------------ access -----------------------------------*/

UInt32 BoxLayoutBase::getBinSize(ConstFieldMaskArg whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (OrientationFieldMask & whichField))
    {
        returnValue += _sfOrientation.getBinSize();
    }
    if(FieldBits::NoField != (MajorAxisAlignmentFieldMask & whichField))
    {
        returnValue += _sfMajorAxisAlignment.getBinSize();
    }
    if(FieldBits::NoField != (MinorAxisAlignmentFieldMask & whichField))
    {
        returnValue += _sfMinorAxisAlignment.getBinSize();
    }
    if(FieldBits::NoField != (ComponentAlignmentFieldMask & whichField))
    {
        returnValue += _sfComponentAlignment.getBinSize();
    }
    if(FieldBits::NoField != (MajorAxisMinimumGapFieldMask & whichField))
    {
        returnValue += _sfMajorAxisMinimumGap.getBinSize();
    }
    if(FieldBits::NoField != (MajorAxisMaximumGapFieldMask & whichField))
    {
        returnValue += _sfMajorAxisMaximumGap.getBinSize();
    }

    return returnValue;
}

void BoxLayoutBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (OrientationFieldMask & whichField))
    {
        _sfOrientation.copyToBin(pMem);
    }
    if(FieldBits::NoField != (MajorAxisAlignmentFieldMask & whichField))
    {
        _sfMajorAxisAlignment.copyToBin(pMem);
    }
    if(FieldBits::NoField != (MinorAxisAlignmentFieldMask & whichField))
    {
        _sfMinorAxisAlignment.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ComponentAlignmentFieldMask & whichField))
    {
        _sfComponentAlignment.copyToBin(pMem);
    }
    if(FieldBits::NoField != (MajorAxisMinimumGapFieldMask & whichField))
    {
        _sfMajorAxisMinimumGap.copyToBin(pMem);
    }
    if(FieldBits::NoField != (MajorAxisMaximumGapFieldMask & whichField))
    {
        _sfMajorAxisMaximumGap.copyToBin(pMem);
    }
}

void BoxLayoutBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (OrientationFieldMask & whichField))
    {
        _sfOrientation.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (MajorAxisAlignmentFieldMask & whichField))
    {
        _sfMajorAxisAlignment.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (MinorAxisAlignmentFieldMask & whichField))
    {
        _sfMinorAxisAlignment.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ComponentAlignmentFieldMask & whichField))
    {
        _sfComponentAlignment.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (MajorAxisMinimumGapFieldMask & whichField))
    {
        _sfMajorAxisMinimumGap.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (MajorAxisMaximumGapFieldMask & whichField))
    {
        _sfMajorAxisMaximumGap.copyFromBin(pMem);
    }
}

//! create a new instance of the class
BoxLayoutTransitPtr BoxLayoutBase::createLocal(BitVector bFlags)
{
    BoxLayoutTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyLocal(bFlags);

        fc = dynamic_pointer_cast<BoxLayout>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class, copy the container flags
BoxLayoutTransitPtr BoxLayoutBase::createDependent(BitVector bFlags)
{
    BoxLayoutTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyDependent(bFlags);

        fc = dynamic_pointer_cast<BoxLayout>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class
BoxLayoutTransitPtr BoxLayoutBase::create(void)
{
    BoxLayoutTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopy();

        fc = dynamic_pointer_cast<BoxLayout>(tmpPtr);
    }

    return fc;
}

BoxLayout *BoxLayoutBase::createEmptyLocal(BitVector bFlags)
{
    BoxLayout *returnValue;

    newPtr<BoxLayout>(returnValue, bFlags);

    returnValue->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

//! create an empty new instance of the class, do not copy the prototype
BoxLayout *BoxLayoutBase::createEmpty(void)
{
    BoxLayout *returnValue;

    newPtr<BoxLayout>(returnValue, Thread::getCurrentLocalFlags());

    returnValue->_pFieldFlags->_bNamespaceMask &=
        ~Thread::getCurrentLocalFlags();

    return returnValue;
}


FieldContainerTransitPtr BoxLayoutBase::shallowCopyLocal(
    BitVector bFlags) const
{
    BoxLayout *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const BoxLayout *>(this), bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

FieldContainerTransitPtr BoxLayoutBase::shallowCopyDependent(
    BitVector bFlags) const
{
    BoxLayout *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const BoxLayout *>(this), ~bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask = bFlags;

    return returnValue;
}

FieldContainerTransitPtr BoxLayoutBase::shallowCopy(void) const
{
    BoxLayout *tmpPtr;

    newPtr(tmpPtr,
           dynamic_cast<const BoxLayout *>(this),
           Thread::getCurrentLocalFlags());

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~Thread::getCurrentLocalFlags();

    FieldContainerTransitPtr returnValue(tmpPtr);

    return returnValue;
}




/*------------------------- constructors ----------------------------------*/

BoxLayoutBase::BoxLayoutBase(void) :
    Inherited(),
    _sfOrientation            (UInt32(BoxLayout::HORIZONTAL_ORIENTATION)),
    _sfMajorAxisAlignment     (Real32(0.5f)),
    _sfMinorAxisAlignment     (Real32(0.5f)),
    _sfComponentAlignment     (Real32(0.5f)),
    _sfMajorAxisMinimumGap    (Real32(2.0f)),
    _sfMajorAxisMaximumGap    (Real32(100000000.0f))
{
}

BoxLayoutBase::BoxLayoutBase(const BoxLayoutBase &source) :
    Inherited(source),
    _sfOrientation            (source._sfOrientation            ),
    _sfMajorAxisAlignment     (source._sfMajorAxisAlignment     ),
    _sfMinorAxisAlignment     (source._sfMinorAxisAlignment     ),
    _sfComponentAlignment     (source._sfComponentAlignment     ),
    _sfMajorAxisMinimumGap    (source._sfMajorAxisMinimumGap    ),
    _sfMajorAxisMaximumGap    (source._sfMajorAxisMaximumGap    )
{
}


/*-------------------------- destructors ----------------------------------*/

BoxLayoutBase::~BoxLayoutBase(void)
{
}


GetFieldHandlePtr BoxLayoutBase::getHandleOrientation     (void) const
{
    SFUInt32::GetHandlePtr returnValue(
        new  SFUInt32::GetHandle(
             &_sfOrientation,
             this->getType().getFieldDesc(OrientationFieldId),
             const_cast<BoxLayoutBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr BoxLayoutBase::editHandleOrientation    (void)
{
    SFUInt32::EditHandlePtr returnValue(
        new  SFUInt32::EditHandle(
             &_sfOrientation,
             this->getType().getFieldDesc(OrientationFieldId),
             this));


    editSField(OrientationFieldMask);

    return returnValue;
}

GetFieldHandlePtr BoxLayoutBase::getHandleMajorAxisAlignment (void) const
{
    SFReal32::GetHandlePtr returnValue(
        new  SFReal32::GetHandle(
             &_sfMajorAxisAlignment,
             this->getType().getFieldDesc(MajorAxisAlignmentFieldId),
             const_cast<BoxLayoutBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr BoxLayoutBase::editHandleMajorAxisAlignment(void)
{
    SFReal32::EditHandlePtr returnValue(
        new  SFReal32::EditHandle(
             &_sfMajorAxisAlignment,
             this->getType().getFieldDesc(MajorAxisAlignmentFieldId),
             this));


    editSField(MajorAxisAlignmentFieldMask);

    return returnValue;
}

GetFieldHandlePtr BoxLayoutBase::getHandleMinorAxisAlignment (void) const
{
    SFReal32::GetHandlePtr returnValue(
        new  SFReal32::GetHandle(
             &_sfMinorAxisAlignment,
             this->getType().getFieldDesc(MinorAxisAlignmentFieldId),
             const_cast<BoxLayoutBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr BoxLayoutBase::editHandleMinorAxisAlignment(void)
{
    SFReal32::EditHandlePtr returnValue(
        new  SFReal32::EditHandle(
             &_sfMinorAxisAlignment,
             this->getType().getFieldDesc(MinorAxisAlignmentFieldId),
             this));


    editSField(MinorAxisAlignmentFieldMask);

    return returnValue;
}

GetFieldHandlePtr BoxLayoutBase::getHandleComponentAlignment (void) const
{
    SFReal32::GetHandlePtr returnValue(
        new  SFReal32::GetHandle(
             &_sfComponentAlignment,
             this->getType().getFieldDesc(ComponentAlignmentFieldId),
             const_cast<BoxLayoutBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr BoxLayoutBase::editHandleComponentAlignment(void)
{
    SFReal32::EditHandlePtr returnValue(
        new  SFReal32::EditHandle(
             &_sfComponentAlignment,
             this->getType().getFieldDesc(ComponentAlignmentFieldId),
             this));


    editSField(ComponentAlignmentFieldMask);

    return returnValue;
}

GetFieldHandlePtr BoxLayoutBase::getHandleMajorAxisMinimumGap (void) const
{
    SFReal32::GetHandlePtr returnValue(
        new  SFReal32::GetHandle(
             &_sfMajorAxisMinimumGap,
             this->getType().getFieldDesc(MajorAxisMinimumGapFieldId),
             const_cast<BoxLayoutBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr BoxLayoutBase::editHandleMajorAxisMinimumGap(void)
{
    SFReal32::EditHandlePtr returnValue(
        new  SFReal32::EditHandle(
             &_sfMajorAxisMinimumGap,
             this->getType().getFieldDesc(MajorAxisMinimumGapFieldId),
             this));


    editSField(MajorAxisMinimumGapFieldMask);

    return returnValue;
}

GetFieldHandlePtr BoxLayoutBase::getHandleMajorAxisMaximumGap (void) const
{
    SFReal32::GetHandlePtr returnValue(
        new  SFReal32::GetHandle(
             &_sfMajorAxisMaximumGap,
             this->getType().getFieldDesc(MajorAxisMaximumGapFieldId),
             const_cast<BoxLayoutBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr BoxLayoutBase::editHandleMajorAxisMaximumGap(void)
{
    SFReal32::EditHandlePtr returnValue(
        new  SFReal32::EditHandle(
             &_sfMajorAxisMaximumGap,
             this->getType().getFieldDesc(MajorAxisMaximumGapFieldId),
             this));


    editSField(MajorAxisMaximumGapFieldMask);

    return returnValue;
}


#ifdef OSG_MT_CPTR_ASPECT
void BoxLayoutBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    BoxLayout *pThis = static_cast<BoxLayout *>(this);

    pThis->execSync(static_cast<BoxLayout *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif


#ifdef OSG_MT_CPTR_ASPECT
FieldContainer *BoxLayoutBase::createAspectCopy(
    const FieldContainer *pRefAspect) const
{
    BoxLayout *returnValue;

    newAspectCopy(returnValue,
                  dynamic_cast<const BoxLayout *>(pRefAspect),
                  dynamic_cast<const BoxLayout *>(this));

    return returnValue;
}
#endif

void BoxLayoutBase::resolveLinks(void)
{
    Inherited::resolveLinks();


}


OSG_END_NAMESPACE
