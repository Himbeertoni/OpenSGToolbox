/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact:  David Kabala (djkabala@gmail.com)                             *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class GridLayout!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>
#include <boost/assign/list_of.hpp>

#include "OSGConfig.h"




#include "OSGGridLayoutBase.h"
#include "OSGGridLayout.h"

#include <boost/bind.hpp>

#ifdef WIN32 // turn off 'this' : used in base member initializer list warning
#pragma warning(disable:4355)
#endif

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::GridLayout
    A UI GridLayout.
 */

/***************************************************************************\
 *                        Field Documentation                              *
\***************************************************************************/

/*! \var UInt32          GridLayoutBase::_sfRows
    
*/

/*! \var UInt32          GridLayoutBase::_sfColumns
    
*/

/*! \var Real32          GridLayoutBase::_sfHorizontalGap
    
*/

/*! \var Real32          GridLayoutBase::_sfVerticalGap
    
*/


/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldTraits<GridLayout *>::_type("GridLayoutPtr", "LayoutPtr");
#endif

OSG_FIELDTRAITS_GETTYPE(GridLayout *)

OSG_EXPORT_PTR_SFIELD_FULL(PointerSField,
                           GridLayout *,
                           0);

OSG_EXPORT_PTR_MFIELD_FULL(PointerMField,
                           GridLayout *,
                           0);

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

void GridLayoutBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new SFUInt32::Description(
        SFUInt32::getClassType(),
        "Rows",
        "",
        RowsFieldId, RowsFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&GridLayout::editHandleRows),
        static_cast<FieldGetMethodSig >(&GridLayout::getHandleRows));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUInt32::Description(
        SFUInt32::getClassType(),
        "Columns",
        "",
        ColumnsFieldId, ColumnsFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&GridLayout::editHandleColumns),
        static_cast<FieldGetMethodSig >(&GridLayout::getHandleColumns));

    oType.addInitialDesc(pDesc);

    pDesc = new SFReal32::Description(
        SFReal32::getClassType(),
        "HorizontalGap",
        "",
        HorizontalGapFieldId, HorizontalGapFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&GridLayout::editHandleHorizontalGap),
        static_cast<FieldGetMethodSig >(&GridLayout::getHandleHorizontalGap));

    oType.addInitialDesc(pDesc);

    pDesc = new SFReal32::Description(
        SFReal32::getClassType(),
        "VerticalGap",
        "",
        VerticalGapFieldId, VerticalGapFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&GridLayout::editHandleVerticalGap),
        static_cast<FieldGetMethodSig >(&GridLayout::getHandleVerticalGap));

    oType.addInitialDesc(pDesc);
}


GridLayoutBase::TypeObject GridLayoutBase::_type(
    GridLayoutBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    0,
    reinterpret_cast<PrototypeCreateF>(&GridLayoutBase::createEmptyLocal),
    GridLayout::initMethod,
    GridLayout::exitMethod,
    reinterpret_cast<InitalInsertDescFunc>(&GridLayout::classDescInserter),
    false,
    0,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "\tname=\"GridLayout\"\n"
    "\tparent=\"Layout\"\n"
    "    library=\"ContribUserInterface\"\n"
    "    pointerfieldtypes=\"both\"\n"
    "\tstructure=\"concrete\"\n"
    "    systemcomponent=\"true\"\n"
    "    parentsystemcomponent=\"true\"\n"
    "    decoratable=\"false\"\n"
    "    useLocalIncludes=\"false\"\n"
    "    isNodeCore=\"false\"\n"
    "    authors=\"David Kabala (djkabala@gmail.com)                             \"\n"
    ">\n"
    "A UI GridLayout.\n"
    "\t<Field\n"
    "\t\tname=\"Rows\"\n"
    "\t\ttype=\"UInt32\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"2\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"Columns\"\n"
    "\t\ttype=\"UInt32\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"2\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"HorizontalGap\"\n"
    "\t\ttype=\"Real32\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"10\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"VerticalGap\"\n"
    "\t\ttype=\"Real32\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"10\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "</FieldContainer>\n",
    "A UI GridLayout.\n"
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &GridLayoutBase::getType(void)
{
    return _type;
}

const FieldContainerType &GridLayoutBase::getType(void) const
{
    return _type;
}

UInt32 GridLayoutBase::getContainerSize(void) const
{
    return sizeof(GridLayout);
}

/*------------------------- decorator get ------------------------------*/


SFUInt32 *GridLayoutBase::editSFRows(void)
{
    editSField(RowsFieldMask);

    return &_sfRows;
}

const SFUInt32 *GridLayoutBase::getSFRows(void) const
{
    return &_sfRows;
}


SFUInt32 *GridLayoutBase::editSFColumns(void)
{
    editSField(ColumnsFieldMask);

    return &_sfColumns;
}

const SFUInt32 *GridLayoutBase::getSFColumns(void) const
{
    return &_sfColumns;
}


SFReal32 *GridLayoutBase::editSFHorizontalGap(void)
{
    editSField(HorizontalGapFieldMask);

    return &_sfHorizontalGap;
}

const SFReal32 *GridLayoutBase::getSFHorizontalGap(void) const
{
    return &_sfHorizontalGap;
}


SFReal32 *GridLayoutBase::editSFVerticalGap(void)
{
    editSField(VerticalGapFieldMask);

    return &_sfVerticalGap;
}

const SFReal32 *GridLayoutBase::getSFVerticalGap(void) const
{
    return &_sfVerticalGap;
}






/*------------------------------ access -----------------------------------*/

UInt32 GridLayoutBase::getBinSize(ConstFieldMaskArg whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (RowsFieldMask & whichField))
    {
        returnValue += _sfRows.getBinSize();
    }
    if(FieldBits::NoField != (ColumnsFieldMask & whichField))
    {
        returnValue += _sfColumns.getBinSize();
    }
    if(FieldBits::NoField != (HorizontalGapFieldMask & whichField))
    {
        returnValue += _sfHorizontalGap.getBinSize();
    }
    if(FieldBits::NoField != (VerticalGapFieldMask & whichField))
    {
        returnValue += _sfVerticalGap.getBinSize();
    }

    return returnValue;
}

void GridLayoutBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (RowsFieldMask & whichField))
    {
        _sfRows.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ColumnsFieldMask & whichField))
    {
        _sfColumns.copyToBin(pMem);
    }
    if(FieldBits::NoField != (HorizontalGapFieldMask & whichField))
    {
        _sfHorizontalGap.copyToBin(pMem);
    }
    if(FieldBits::NoField != (VerticalGapFieldMask & whichField))
    {
        _sfVerticalGap.copyToBin(pMem);
    }
}

void GridLayoutBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (RowsFieldMask & whichField))
    {
        _sfRows.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ColumnsFieldMask & whichField))
    {
        _sfColumns.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (HorizontalGapFieldMask & whichField))
    {
        _sfHorizontalGap.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (VerticalGapFieldMask & whichField))
    {
        _sfVerticalGap.copyFromBin(pMem);
    }
}

//! create a new instance of the class
GridLayoutTransitPtr GridLayoutBase::createLocal(BitVector bFlags)
{
    GridLayoutTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyLocal(bFlags);

        fc = dynamic_pointer_cast<GridLayout>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class, copy the container flags
GridLayoutTransitPtr GridLayoutBase::createDependent(BitVector bFlags)
{
    GridLayoutTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyDependent(bFlags);

        fc = dynamic_pointer_cast<GridLayout>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class
GridLayoutTransitPtr GridLayoutBase::create(void)
{
    GridLayoutTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopy();

        fc = dynamic_pointer_cast<GridLayout>(tmpPtr);
    }

    return fc;
}

GridLayout *GridLayoutBase::createEmptyLocal(BitVector bFlags)
{
    GridLayout *returnValue;

    newPtr<GridLayout>(returnValue, bFlags);

    returnValue->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

//! create an empty new instance of the class, do not copy the prototype
GridLayout *GridLayoutBase::createEmpty(void)
{
    GridLayout *returnValue;

    newPtr<GridLayout>(returnValue, Thread::getCurrentLocalFlags());

    returnValue->_pFieldFlags->_bNamespaceMask &=
        ~Thread::getCurrentLocalFlags();

    return returnValue;
}


FieldContainerTransitPtr GridLayoutBase::shallowCopyLocal(
    BitVector bFlags) const
{
    GridLayout *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const GridLayout *>(this), bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

FieldContainerTransitPtr GridLayoutBase::shallowCopyDependent(
    BitVector bFlags) const
{
    GridLayout *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const GridLayout *>(this), ~bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask = bFlags;

    return returnValue;
}

FieldContainerTransitPtr GridLayoutBase::shallowCopy(void) const
{
    GridLayout *tmpPtr;

    newPtr(tmpPtr,
           dynamic_cast<const GridLayout *>(this),
           Thread::getCurrentLocalFlags());

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~Thread::getCurrentLocalFlags();

    FieldContainerTransitPtr returnValue(tmpPtr);

    return returnValue;
}




/*------------------------- constructors ----------------------------------*/

GridLayoutBase::GridLayoutBase(void) :
    Inherited(),
    _sfRows                   (UInt32(2)),
    _sfColumns                (UInt32(2)),
    _sfHorizontalGap          (Real32(10)),
    _sfVerticalGap            (Real32(10))
{
}

GridLayoutBase::GridLayoutBase(const GridLayoutBase &source) :
    Inherited(source),
    _sfRows                   (source._sfRows                   ),
    _sfColumns                (source._sfColumns                ),
    _sfHorizontalGap          (source._sfHorizontalGap          ),
    _sfVerticalGap            (source._sfVerticalGap            )
{
}


/*-------------------------- destructors ----------------------------------*/

GridLayoutBase::~GridLayoutBase(void)
{
}


GetFieldHandlePtr GridLayoutBase::getHandleRows            (void) const
{
    SFUInt32::GetHandlePtr returnValue(
        new  SFUInt32::GetHandle(
             &_sfRows,
             this->getType().getFieldDesc(RowsFieldId),
             const_cast<GridLayoutBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr GridLayoutBase::editHandleRows           (void)
{
    SFUInt32::EditHandlePtr returnValue(
        new  SFUInt32::EditHandle(
             &_sfRows,
             this->getType().getFieldDesc(RowsFieldId),
             this));


    editSField(RowsFieldMask);

    return returnValue;
}

GetFieldHandlePtr GridLayoutBase::getHandleColumns         (void) const
{
    SFUInt32::GetHandlePtr returnValue(
        new  SFUInt32::GetHandle(
             &_sfColumns,
             this->getType().getFieldDesc(ColumnsFieldId),
             const_cast<GridLayoutBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr GridLayoutBase::editHandleColumns        (void)
{
    SFUInt32::EditHandlePtr returnValue(
        new  SFUInt32::EditHandle(
             &_sfColumns,
             this->getType().getFieldDesc(ColumnsFieldId),
             this));


    editSField(ColumnsFieldMask);

    return returnValue;
}

GetFieldHandlePtr GridLayoutBase::getHandleHorizontalGap   (void) const
{
    SFReal32::GetHandlePtr returnValue(
        new  SFReal32::GetHandle(
             &_sfHorizontalGap,
             this->getType().getFieldDesc(HorizontalGapFieldId),
             const_cast<GridLayoutBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr GridLayoutBase::editHandleHorizontalGap  (void)
{
    SFReal32::EditHandlePtr returnValue(
        new  SFReal32::EditHandle(
             &_sfHorizontalGap,
             this->getType().getFieldDesc(HorizontalGapFieldId),
             this));


    editSField(HorizontalGapFieldMask);

    return returnValue;
}

GetFieldHandlePtr GridLayoutBase::getHandleVerticalGap     (void) const
{
    SFReal32::GetHandlePtr returnValue(
        new  SFReal32::GetHandle(
             &_sfVerticalGap,
             this->getType().getFieldDesc(VerticalGapFieldId),
             const_cast<GridLayoutBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr GridLayoutBase::editHandleVerticalGap    (void)
{
    SFReal32::EditHandlePtr returnValue(
        new  SFReal32::EditHandle(
             &_sfVerticalGap,
             this->getType().getFieldDesc(VerticalGapFieldId),
             this));


    editSField(VerticalGapFieldMask);

    return returnValue;
}


#ifdef OSG_MT_CPTR_ASPECT
void GridLayoutBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    GridLayout *pThis = static_cast<GridLayout *>(this);

    pThis->execSync(static_cast<GridLayout *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif


#ifdef OSG_MT_CPTR_ASPECT
FieldContainer *GridLayoutBase::createAspectCopy(
    const FieldContainer *pRefAspect) const
{
    GridLayout *returnValue;

    newAspectCopy(returnValue,
                  dynamic_cast<const GridLayout *>(pRefAspect),
                  dynamic_cast<const GridLayout *>(this));

    return returnValue;
}
#endif

void GridLayoutBase::resolveLinks(void)
{
    Inherited::resolveLinks();


}


OSG_END_NAMESPACE
