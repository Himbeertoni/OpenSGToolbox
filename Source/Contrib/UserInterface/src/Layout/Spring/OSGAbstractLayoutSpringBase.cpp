/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact:  David Kabala (djkabala@gmail.com)                             *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class AbstractLayoutSpring!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>
#include <boost/assign/list_of.hpp>

#include "OSGConfig.h"




#include "OSGAbstractLayoutSpringBase.h"
#include "OSGAbstractLayoutSpring.h"

#include <boost/bind.hpp>

#ifdef WIN32 // turn off 'this' : used in base member initializer list warning
#pragma warning(disable:4355)
#endif

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::AbstractLayoutSpring
    A UI AbstractLayoutSpring.
 */

/***************************************************************************\
 *                        Field Documentation                              *
\***************************************************************************/

/*! \var Real32          AbstractLayoutSpringBase::_sfSize
    
*/


/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldTraits<AbstractLayoutSpring *>::_type("AbstractLayoutSpringPtr", "LayoutSpringPtr");
#endif

OSG_FIELDTRAITS_GETTYPE(AbstractLayoutSpring *)

OSG_EXPORT_PTR_SFIELD_FULL(PointerSField,
                           AbstractLayoutSpring *,
                           0);

OSG_EXPORT_PTR_MFIELD_FULL(PointerMField,
                           AbstractLayoutSpring *,
                           0);

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

void AbstractLayoutSpringBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new SFReal32::Description(
        SFReal32::getClassType(),
        "Size",
        "",
        SizeFieldId, SizeFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&AbstractLayoutSpring::editHandleSize),
        static_cast<FieldGetMethodSig >(&AbstractLayoutSpring::getHandleSize));

    oType.addInitialDesc(pDesc);
}


AbstractLayoutSpringBase::TypeObject AbstractLayoutSpringBase::_type(
    AbstractLayoutSpringBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    0,
    NULL,
    AbstractLayoutSpring::initMethod,
    AbstractLayoutSpring::exitMethod,
    reinterpret_cast<InitalInsertDescFunc>(&AbstractLayoutSpring::classDescInserter),
    false,
    0,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "\tname=\"AbstractLayoutSpring\"\n"
    "\tparent=\"LayoutSpring\"\n"
    "    library=\"ContribUserInterface\"\n"
    "    pointerfieldtypes=\"both\"\n"
    "\tstructure=\"abstract\"\n"
    "    systemcomponent=\"true\"\n"
    "    parentsystemcomponent=\"true\"\n"
    "    decoratable=\"false\"\n"
    "    useLocalIncludes=\"false\"\n"
    "    isNodeCore=\"false\"\n"
    "    authors=\"David Kabala (djkabala@gmail.com)                             \"\n"
    ">\n"
    "A UI AbstractLayoutSpring.\n"
    "\t<Field\n"
    "\t\tname=\"Size\"\n"
    "\t\ttype=\"Real32\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "\t\tdefaultValue=\"LayoutSpring::VALUE_NOT_SET\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "   </Field>\n"
    "</FieldContainer>\n",
    "A UI AbstractLayoutSpring.\n"
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &AbstractLayoutSpringBase::getType(void)
{
    return _type;
}

const FieldContainerType &AbstractLayoutSpringBase::getType(void) const
{
    return _type;
}

UInt32 AbstractLayoutSpringBase::getContainerSize(void) const
{
    return sizeof(AbstractLayoutSpring);
}

/*------------------------- decorator get ------------------------------*/


SFReal32 *AbstractLayoutSpringBase::editSFSize(void)
{
    editSField(SizeFieldMask);

    return &_sfSize;
}

const SFReal32 *AbstractLayoutSpringBase::getSFSize(void) const
{
    return &_sfSize;
}






/*------------------------------ access -----------------------------------*/

UInt32 AbstractLayoutSpringBase::getBinSize(ConstFieldMaskArg whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (SizeFieldMask & whichField))
    {
        returnValue += _sfSize.getBinSize();
    }

    return returnValue;
}

void AbstractLayoutSpringBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (SizeFieldMask & whichField))
    {
        _sfSize.copyToBin(pMem);
    }
}

void AbstractLayoutSpringBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (SizeFieldMask & whichField))
    {
        _sfSize.copyFromBin(pMem);
    }
}




/*------------------------- constructors ----------------------------------*/

AbstractLayoutSpringBase::AbstractLayoutSpringBase(void) :
    Inherited(),
    _sfSize                   (Real32(LayoutSpring::VALUE_NOT_SET))
{
}

AbstractLayoutSpringBase::AbstractLayoutSpringBase(const AbstractLayoutSpringBase &source) :
    Inherited(source),
    _sfSize                   (source._sfSize                   )
{
}


/*-------------------------- destructors ----------------------------------*/

AbstractLayoutSpringBase::~AbstractLayoutSpringBase(void)
{
}


GetFieldHandlePtr AbstractLayoutSpringBase::getHandleSize            (void) const
{
    SFReal32::GetHandlePtr returnValue(
        new  SFReal32::GetHandle(
             &_sfSize,
             this->getType().getFieldDesc(SizeFieldId),
             const_cast<AbstractLayoutSpringBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr AbstractLayoutSpringBase::editHandleSize           (void)
{
    SFReal32::EditHandlePtr returnValue(
        new  SFReal32::EditHandle(
             &_sfSize,
             this->getType().getFieldDesc(SizeFieldId),
             this));


    editSField(SizeFieldMask);

    return returnValue;
}


#ifdef OSG_MT_CPTR_ASPECT
void AbstractLayoutSpringBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    AbstractLayoutSpring *pThis = static_cast<AbstractLayoutSpring *>(this);

    pThis->execSync(static_cast<AbstractLayoutSpring *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif



void AbstractLayoutSpringBase::resolveLinks(void)
{
    Inherited::resolveLinks();


}


OSG_END_NAMESPACE
