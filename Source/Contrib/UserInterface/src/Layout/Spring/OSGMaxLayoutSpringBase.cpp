/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact:  David Kabala (djkabala@gmail.com)                             *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class MaxLayoutSpring!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>
#include <boost/assign/list_of.hpp>

#include "OSGConfig.h"




#include "OSGMaxLayoutSpringBase.h"
#include "OSGMaxLayoutSpring.h"

#include <boost/bind.hpp>

#ifdef WIN32 // turn off 'this' : used in base member initializer list warning
#pragma warning(disable:4355)
#endif

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::MaxLayoutSpring
    A UI Max LayoutSpring.
 */

/***************************************************************************\
 *                        Field Documentation                              *
\***************************************************************************/


/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldTraits<MaxLayoutSpring *>::_type("MaxLayoutSpringPtr", "CompoundLayoutSpringPtr");
#endif

OSG_FIELDTRAITS_GETTYPE(MaxLayoutSpring *)

OSG_EXPORT_PTR_SFIELD_FULL(PointerSField,
                           MaxLayoutSpring *,
                           0);

OSG_EXPORT_PTR_MFIELD_FULL(PointerMField,
                           MaxLayoutSpring *,
                           0);

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

void MaxLayoutSpringBase::classDescInserter(TypeObject &oType)
{
}


MaxLayoutSpringBase::TypeObject MaxLayoutSpringBase::_type(
    MaxLayoutSpringBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    0,
    reinterpret_cast<PrototypeCreateF>(&MaxLayoutSpringBase::createEmptyLocal),
    MaxLayoutSpring::initMethod,
    MaxLayoutSpring::exitMethod,
    reinterpret_cast<InitalInsertDescFunc>(&MaxLayoutSpring::classDescInserter),
    false,
    0,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "\tname=\"MaxLayoutSpring\"\n"
    "\tparent=\"CompoundLayoutSpring\"\n"
    "    library=\"ContribUserInterface\"\n"
    "    pointerfieldtypes=\"both\"\n"
    "\tstructure=\"concrete\"\n"
    "    systemcomponent=\"true\"\n"
    "    parentsystemcomponent=\"true\"\n"
    "    decoratable=\"false\"\n"
    "    useLocalIncludes=\"false\"\n"
    "    isNodeCore=\"false\"\n"
    "    authors=\"David Kabala (djkabala@gmail.com)                             \"\n"
    ">\n"
    "A UI Max LayoutSpring.\n"
    "</FieldContainer>\n",
    "A UI Max LayoutSpring.\n"
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &MaxLayoutSpringBase::getType(void)
{
    return _type;
}

const FieldContainerType &MaxLayoutSpringBase::getType(void) const
{
    return _type;
}

UInt32 MaxLayoutSpringBase::getContainerSize(void) const
{
    return sizeof(MaxLayoutSpring);
}

/*------------------------- decorator get ------------------------------*/






/*------------------------------ access -----------------------------------*/

UInt32 MaxLayoutSpringBase::getBinSize(ConstFieldMaskArg whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);


    return returnValue;
}

void MaxLayoutSpringBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

}

void MaxLayoutSpringBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

}

//! create a new instance of the class
MaxLayoutSpringTransitPtr MaxLayoutSpringBase::createLocal(BitVector bFlags)
{
    MaxLayoutSpringTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyLocal(bFlags);

        fc = dynamic_pointer_cast<MaxLayoutSpring>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class, copy the container flags
MaxLayoutSpringTransitPtr MaxLayoutSpringBase::createDependent(BitVector bFlags)
{
    MaxLayoutSpringTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyDependent(bFlags);

        fc = dynamic_pointer_cast<MaxLayoutSpring>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class
MaxLayoutSpringTransitPtr MaxLayoutSpringBase::create(void)
{
    MaxLayoutSpringTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopy();

        fc = dynamic_pointer_cast<MaxLayoutSpring>(tmpPtr);
    }

    return fc;
}

MaxLayoutSpring *MaxLayoutSpringBase::createEmptyLocal(BitVector bFlags)
{
    MaxLayoutSpring *returnValue;

    newPtr<MaxLayoutSpring>(returnValue, bFlags);

    returnValue->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

//! create an empty new instance of the class, do not copy the prototype
MaxLayoutSpring *MaxLayoutSpringBase::createEmpty(void)
{
    MaxLayoutSpring *returnValue;

    newPtr<MaxLayoutSpring>(returnValue, Thread::getCurrentLocalFlags());

    returnValue->_pFieldFlags->_bNamespaceMask &=
        ~Thread::getCurrentLocalFlags();

    return returnValue;
}


FieldContainerTransitPtr MaxLayoutSpringBase::shallowCopyLocal(
    BitVector bFlags) const
{
    MaxLayoutSpring *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const MaxLayoutSpring *>(this), bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

FieldContainerTransitPtr MaxLayoutSpringBase::shallowCopyDependent(
    BitVector bFlags) const
{
    MaxLayoutSpring *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const MaxLayoutSpring *>(this), ~bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask = bFlags;

    return returnValue;
}

FieldContainerTransitPtr MaxLayoutSpringBase::shallowCopy(void) const
{
    MaxLayoutSpring *tmpPtr;

    newPtr(tmpPtr,
           dynamic_cast<const MaxLayoutSpring *>(this),
           Thread::getCurrentLocalFlags());

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~Thread::getCurrentLocalFlags();

    FieldContainerTransitPtr returnValue(tmpPtr);

    return returnValue;
}




/*------------------------- constructors ----------------------------------*/

MaxLayoutSpringBase::MaxLayoutSpringBase(void) :
    Inherited()
{
}

MaxLayoutSpringBase::MaxLayoutSpringBase(const MaxLayoutSpringBase &source) :
    Inherited(source)
{
}


/*-------------------------- destructors ----------------------------------*/

MaxLayoutSpringBase::~MaxLayoutSpringBase(void)
{
}



#ifdef OSG_MT_CPTR_ASPECT
void MaxLayoutSpringBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    MaxLayoutSpring *pThis = static_cast<MaxLayoutSpring *>(this);

    pThis->execSync(static_cast<MaxLayoutSpring *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif


#ifdef OSG_MT_CPTR_ASPECT
FieldContainer *MaxLayoutSpringBase::createAspectCopy(
    const FieldContainer *pRefAspect) const
{
    MaxLayoutSpring *returnValue;

    newAspectCopy(returnValue,
                  dynamic_cast<const MaxLayoutSpring *>(pRefAspect),
                  dynamic_cast<const MaxLayoutSpring *>(this));

    return returnValue;
}
#endif

void MaxLayoutSpringBase::resolveLinks(void)
{
    Inherited::resolveLinks();


}


OSG_END_NAMESPACE
