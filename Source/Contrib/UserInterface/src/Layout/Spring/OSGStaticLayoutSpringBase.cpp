/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact:  David Kabala (djkabala@gmail.com)                             *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class StaticLayoutSpring!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>
#include <boost/assign/list_of.hpp>

#include "OSGConfig.h"




#include "OSGStaticLayoutSpringBase.h"
#include "OSGStaticLayoutSpring.h"

#include <boost/bind.hpp>

#ifdef WIN32 // turn off 'this' : used in base member initializer list warning
#pragma warning(disable:4355)
#endif

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::StaticLayoutSpring
    A UI Static LayoutSpring.
 */

/***************************************************************************\
 *                        Field Documentation                              *
\***************************************************************************/

/*! \var Real32          StaticLayoutSpringBase::_sfMinimum
    
*/

/*! \var Real32          StaticLayoutSpringBase::_sfMaximum
    
*/

/*! \var Real32          StaticLayoutSpringBase::_sfPreferred
    
*/


/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldTraits<StaticLayoutSpring *>::_type("StaticLayoutSpringPtr", "AbstractLayoutSpringPtr");
#endif

OSG_FIELDTRAITS_GETTYPE(StaticLayoutSpring *)

OSG_EXPORT_PTR_SFIELD_FULL(PointerSField,
                           StaticLayoutSpring *,
                           0);

OSG_EXPORT_PTR_MFIELD_FULL(PointerMField,
                           StaticLayoutSpring *,
                           0);

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

void StaticLayoutSpringBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new SFReal32::Description(
        SFReal32::getClassType(),
        "Minimum",
        "",
        MinimumFieldId, MinimumFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&StaticLayoutSpring::editHandleMinimum),
        static_cast<FieldGetMethodSig >(&StaticLayoutSpring::getHandleMinimum));

    oType.addInitialDesc(pDesc);

    pDesc = new SFReal32::Description(
        SFReal32::getClassType(),
        "Maximum",
        "",
        MaximumFieldId, MaximumFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&StaticLayoutSpring::editHandleMaximum),
        static_cast<FieldGetMethodSig >(&StaticLayoutSpring::getHandleMaximum));

    oType.addInitialDesc(pDesc);

    pDesc = new SFReal32::Description(
        SFReal32::getClassType(),
        "Preferred",
        "",
        PreferredFieldId, PreferredFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&StaticLayoutSpring::editHandlePreferred),
        static_cast<FieldGetMethodSig >(&StaticLayoutSpring::getHandlePreferred));

    oType.addInitialDesc(pDesc);
}


StaticLayoutSpringBase::TypeObject StaticLayoutSpringBase::_type(
    StaticLayoutSpringBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    0,
    reinterpret_cast<PrototypeCreateF>(&StaticLayoutSpringBase::createEmptyLocal),
    StaticLayoutSpring::initMethod,
    StaticLayoutSpring::exitMethod,
    reinterpret_cast<InitalInsertDescFunc>(&StaticLayoutSpring::classDescInserter),
    false,
    0,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "\tname=\"StaticLayoutSpring\"\n"
    "\tparent=\"AbstractLayoutSpring\"\n"
    "    library=\"ContribUserInterface\"\n"
    "    pointerfieldtypes=\"both\"\n"
    "\tstructure=\"concrete\"\n"
    "    systemcomponent=\"true\"\n"
    "    parentsystemcomponent=\"true\"\n"
    "    decoratable=\"false\"\n"
    "    useLocalIncludes=\"false\"\n"
    "    isNodeCore=\"false\"\n"
    "    authors=\"David Kabala (djkabala@gmail.com)                             \"\n"
    ">\n"
    "A UI Static LayoutSpring.\n"
    "\t<Field\n"
    "\t\tname=\"Minimum\"\n"
    "\t\ttype=\"Real32\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "      visibility=\"external\"\n"
    "\t\tdefaultValue=\"LayoutSpring::VALUE_NOT_SET\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "   </Field>\n"
    "\t<Field\n"
    "\t\tname=\"Maximum\"\n"
    "\t\ttype=\"Real32\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "      visibility=\"external\"\n"
    "\t\tdefaultValue=\"LayoutSpring::VALUE_NOT_SET\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "   </Field>\n"
    "\t<Field\n"
    "\t\tname=\"Preferred\"\n"
    "\t\ttype=\"Real32\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "      visibility=\"external\"\n"
    "\t\tdefaultValue=\"LayoutSpring::VALUE_NOT_SET\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "   </Field>\n"
    "</FieldContainer>\n",
    "A UI Static LayoutSpring.\n"
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &StaticLayoutSpringBase::getType(void)
{
    return _type;
}

const FieldContainerType &StaticLayoutSpringBase::getType(void) const
{
    return _type;
}

UInt32 StaticLayoutSpringBase::getContainerSize(void) const
{
    return sizeof(StaticLayoutSpring);
}

/*------------------------- decorator get ------------------------------*/


SFReal32 *StaticLayoutSpringBase::editSFMinimum(void)
{
    editSField(MinimumFieldMask);

    return &_sfMinimum;
}

const SFReal32 *StaticLayoutSpringBase::getSFMinimum(void) const
{
    return &_sfMinimum;
}


SFReal32 *StaticLayoutSpringBase::editSFMaximum(void)
{
    editSField(MaximumFieldMask);

    return &_sfMaximum;
}

const SFReal32 *StaticLayoutSpringBase::getSFMaximum(void) const
{
    return &_sfMaximum;
}


SFReal32 *StaticLayoutSpringBase::editSFPreferred(void)
{
    editSField(PreferredFieldMask);

    return &_sfPreferred;
}

const SFReal32 *StaticLayoutSpringBase::getSFPreferred(void) const
{
    return &_sfPreferred;
}






/*------------------------------ access -----------------------------------*/

UInt32 StaticLayoutSpringBase::getBinSize(ConstFieldMaskArg whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (MinimumFieldMask & whichField))
    {
        returnValue += _sfMinimum.getBinSize();
    }
    if(FieldBits::NoField != (MaximumFieldMask & whichField))
    {
        returnValue += _sfMaximum.getBinSize();
    }
    if(FieldBits::NoField != (PreferredFieldMask & whichField))
    {
        returnValue += _sfPreferred.getBinSize();
    }

    return returnValue;
}

void StaticLayoutSpringBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (MinimumFieldMask & whichField))
    {
        _sfMinimum.copyToBin(pMem);
    }
    if(FieldBits::NoField != (MaximumFieldMask & whichField))
    {
        _sfMaximum.copyToBin(pMem);
    }
    if(FieldBits::NoField != (PreferredFieldMask & whichField))
    {
        _sfPreferred.copyToBin(pMem);
    }
}

void StaticLayoutSpringBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (MinimumFieldMask & whichField))
    {
        _sfMinimum.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (MaximumFieldMask & whichField))
    {
        _sfMaximum.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (PreferredFieldMask & whichField))
    {
        _sfPreferred.copyFromBin(pMem);
    }
}

//! create a new instance of the class
StaticLayoutSpringTransitPtr StaticLayoutSpringBase::createLocal(BitVector bFlags)
{
    StaticLayoutSpringTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyLocal(bFlags);

        fc = dynamic_pointer_cast<StaticLayoutSpring>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class, copy the container flags
StaticLayoutSpringTransitPtr StaticLayoutSpringBase::createDependent(BitVector bFlags)
{
    StaticLayoutSpringTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyDependent(bFlags);

        fc = dynamic_pointer_cast<StaticLayoutSpring>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class
StaticLayoutSpringTransitPtr StaticLayoutSpringBase::create(void)
{
    StaticLayoutSpringTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopy();

        fc = dynamic_pointer_cast<StaticLayoutSpring>(tmpPtr);
    }

    return fc;
}

StaticLayoutSpring *StaticLayoutSpringBase::createEmptyLocal(BitVector bFlags)
{
    StaticLayoutSpring *returnValue;

    newPtr<StaticLayoutSpring>(returnValue, bFlags);

    returnValue->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

//! create an empty new instance of the class, do not copy the prototype
StaticLayoutSpring *StaticLayoutSpringBase::createEmpty(void)
{
    StaticLayoutSpring *returnValue;

    newPtr<StaticLayoutSpring>(returnValue, Thread::getCurrentLocalFlags());

    returnValue->_pFieldFlags->_bNamespaceMask &=
        ~Thread::getCurrentLocalFlags();

    return returnValue;
}


FieldContainerTransitPtr StaticLayoutSpringBase::shallowCopyLocal(
    BitVector bFlags) const
{
    StaticLayoutSpring *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const StaticLayoutSpring *>(this), bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

FieldContainerTransitPtr StaticLayoutSpringBase::shallowCopyDependent(
    BitVector bFlags) const
{
    StaticLayoutSpring *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const StaticLayoutSpring *>(this), ~bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask = bFlags;

    return returnValue;
}

FieldContainerTransitPtr StaticLayoutSpringBase::shallowCopy(void) const
{
    StaticLayoutSpring *tmpPtr;

    newPtr(tmpPtr,
           dynamic_cast<const StaticLayoutSpring *>(this),
           Thread::getCurrentLocalFlags());

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~Thread::getCurrentLocalFlags();

    FieldContainerTransitPtr returnValue(tmpPtr);

    return returnValue;
}




/*------------------------- constructors ----------------------------------*/

StaticLayoutSpringBase::StaticLayoutSpringBase(void) :
    Inherited(),
    _sfMinimum                (Real32(LayoutSpring::VALUE_NOT_SET)),
    _sfMaximum                (Real32(LayoutSpring::VALUE_NOT_SET)),
    _sfPreferred              (Real32(LayoutSpring::VALUE_NOT_SET))
{
}

StaticLayoutSpringBase::StaticLayoutSpringBase(const StaticLayoutSpringBase &source) :
    Inherited(source),
    _sfMinimum                (source._sfMinimum                ),
    _sfMaximum                (source._sfMaximum                ),
    _sfPreferred              (source._sfPreferred              )
{
}


/*-------------------------- destructors ----------------------------------*/

StaticLayoutSpringBase::~StaticLayoutSpringBase(void)
{
}


GetFieldHandlePtr StaticLayoutSpringBase::getHandleMinimum         (void) const
{
    SFReal32::GetHandlePtr returnValue(
        new  SFReal32::GetHandle(
             &_sfMinimum,
             this->getType().getFieldDesc(MinimumFieldId),
             const_cast<StaticLayoutSpringBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr StaticLayoutSpringBase::editHandleMinimum        (void)
{
    SFReal32::EditHandlePtr returnValue(
        new  SFReal32::EditHandle(
             &_sfMinimum,
             this->getType().getFieldDesc(MinimumFieldId),
             this));


    editSField(MinimumFieldMask);

    return returnValue;
}

GetFieldHandlePtr StaticLayoutSpringBase::getHandleMaximum         (void) const
{
    SFReal32::GetHandlePtr returnValue(
        new  SFReal32::GetHandle(
             &_sfMaximum,
             this->getType().getFieldDesc(MaximumFieldId),
             const_cast<StaticLayoutSpringBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr StaticLayoutSpringBase::editHandleMaximum        (void)
{
    SFReal32::EditHandlePtr returnValue(
        new  SFReal32::EditHandle(
             &_sfMaximum,
             this->getType().getFieldDesc(MaximumFieldId),
             this));


    editSField(MaximumFieldMask);

    return returnValue;
}

GetFieldHandlePtr StaticLayoutSpringBase::getHandlePreferred       (void) const
{
    SFReal32::GetHandlePtr returnValue(
        new  SFReal32::GetHandle(
             &_sfPreferred,
             this->getType().getFieldDesc(PreferredFieldId),
             const_cast<StaticLayoutSpringBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr StaticLayoutSpringBase::editHandlePreferred      (void)
{
    SFReal32::EditHandlePtr returnValue(
        new  SFReal32::EditHandle(
             &_sfPreferred,
             this->getType().getFieldDesc(PreferredFieldId),
             this));


    editSField(PreferredFieldMask);

    return returnValue;
}


#ifdef OSG_MT_CPTR_ASPECT
void StaticLayoutSpringBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    StaticLayoutSpring *pThis = static_cast<StaticLayoutSpring *>(this);

    pThis->execSync(static_cast<StaticLayoutSpring *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif


#ifdef OSG_MT_CPTR_ASPECT
FieldContainer *StaticLayoutSpringBase::createAspectCopy(
    const FieldContainer *pRefAspect) const
{
    StaticLayoutSpring *returnValue;

    newAspectCopy(returnValue,
                  dynamic_cast<const StaticLayoutSpring *>(pRefAspect),
                  dynamic_cast<const StaticLayoutSpring *>(this));

    return returnValue;
}
#endif

void StaticLayoutSpringBase::resolveLinks(void)
{
    Inherited::resolveLinks();


}


OSG_END_NAMESPACE
