/*---------------------------------------------------------------------------*\
 *                     OpenSG ToolBox UserInterface                          *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                         www.vrac.iastate.edu                              *
 *                                                                           *
 *                          Authors: David Kabala                            *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class DocumentEvent!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#define OSG_COMPILEDOCUMENTEVENTINST

#include <stdlib.h>
#include <stdio.h>

#include <OpenSG/OSGConfig.h>

#include "OSGDocumentEventBase.h"
#include "OSGDocumentEvent.h"


OSG_BEGIN_NAMESPACE

const OSG::BitVector  DocumentEventBase::DocumentFieldMask = 
    (TypeTraits<BitVector>::One << DocumentEventBase::DocumentFieldId);

const OSG::BitVector  DocumentEventBase::OffsetFieldMask = 
    (TypeTraits<BitVector>::One << DocumentEventBase::OffsetFieldId);

const OSG::BitVector  DocumentEventBase::LengthFieldMask = 
    (TypeTraits<BitVector>::One << DocumentEventBase::LengthFieldId);

const OSG::BitVector DocumentEventBase::MTInfluenceMask = 
    (Inherited::MTInfluenceMask) | 
    (static_cast<BitVector>(0x0) << Inherited::NextFieldId); 


// Field descriptions

/*! \var DocumentPtr     DocumentEventBase::_sfDocument
    
*/
/*! \var Int32           DocumentEventBase::_sfOffset
    
*/
/*! \var UInt32          DocumentEventBase::_sfLength
    
*/

//! DocumentEvent description

FieldDescription *DocumentEventBase::_desc[] = 
{
    new FieldDescription(SFDocumentPtr::getClassType(), 
                     "Document", 
                     DocumentFieldId, DocumentFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&DocumentEventBase::editSFDocument)),
    new FieldDescription(SFInt32::getClassType(), 
                     "Offset", 
                     OffsetFieldId, OffsetFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&DocumentEventBase::editSFOffset)),
    new FieldDescription(SFUInt32::getClassType(), 
                     "Length", 
                     LengthFieldId, LengthFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&DocumentEventBase::editSFLength))
};


FieldContainerType DocumentEventBase::_type(
    "DocumentEvent",
    "Event",
    NULL,
    reinterpret_cast<PrototypeCreateF>(&DocumentEventBase::createEmpty),
    DocumentEvent::initMethod,
    _desc,
    sizeof(_desc));

//OSG_FIELD_CONTAINER_DEF(DocumentEventBase, DocumentEventPtr)

/*------------------------------ get -----------------------------------*/

FieldContainerType &DocumentEventBase::getType(void) 
{
    return _type; 
} 

const FieldContainerType &DocumentEventBase::getType(void) const 
{
    return _type;
} 


FieldContainerPtr DocumentEventBase::shallowCopy(void) const 
{ 
    DocumentEventPtr returnValue; 

    newPtr(returnValue, dynamic_cast<const DocumentEvent *>(this)); 

    return returnValue; 
}

UInt32 DocumentEventBase::getContainerSize(void) const 
{ 
    return sizeof(DocumentEvent); 
}


#if !defined(OSG_FIXED_MFIELDSYNC)
void DocumentEventBase::executeSync(      FieldContainer &other,
                                    const BitVector      &whichField)
{
    this->executeSyncImpl(static_cast<DocumentEventBase *>(&other),
                          whichField);
}
#else
void DocumentEventBase::executeSync(      FieldContainer &other,
                                    const BitVector      &whichField,                                    const SyncInfo       &sInfo     )
{
    this->executeSyncImpl((DocumentEventBase *) &other, whichField, sInfo);
}
void DocumentEventBase::execBeginEdit(const BitVector &whichField, 
                                            UInt32     uiAspect,
                                            UInt32     uiContainerSize) 
{
    this->execBeginEditImpl(whichField, uiAspect, uiContainerSize);
}

void DocumentEventBase::onDestroyAspect(UInt32 uiId, UInt32 uiAspect)
{
    Inherited::onDestroyAspect(uiId, uiAspect);

}
#endif

/*------------------------- constructors ----------------------------------*/

#ifdef OSG_WIN32_ICL
#pragma warning (disable : 383)
#endif

DocumentEventBase::DocumentEventBase(void) :
    _sfDocument               (DocumentPtr(NullFC)), 
    _sfOffset                 (Int32(-1)), 
    _sfLength                 (UInt32(0)), 
    Inherited() 
{
}

#ifdef OSG_WIN32_ICL
#pragma warning (default : 383)
#endif

DocumentEventBase::DocumentEventBase(const DocumentEventBase &source) :
    _sfDocument               (source._sfDocument               ), 
    _sfOffset                 (source._sfOffset                 ), 
    _sfLength                 (source._sfLength                 ), 
    Inherited                 (source)
{
}

/*-------------------------- destructors ----------------------------------*/

DocumentEventBase::~DocumentEventBase(void)
{
}

/*------------------------------ access -----------------------------------*/

UInt32 DocumentEventBase::getBinSize(const BitVector &whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (DocumentFieldMask & whichField))
    {
        returnValue += _sfDocument.getBinSize();
    }

    if(FieldBits::NoField != (OffsetFieldMask & whichField))
    {
        returnValue += _sfOffset.getBinSize();
    }

    if(FieldBits::NoField != (LengthFieldMask & whichField))
    {
        returnValue += _sfLength.getBinSize();
    }


    return returnValue;
}

void DocumentEventBase::copyToBin(      BinaryDataHandler &pMem,
                                  const BitVector         &whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (DocumentFieldMask & whichField))
    {
        _sfDocument.copyToBin(pMem);
    }

    if(FieldBits::NoField != (OffsetFieldMask & whichField))
    {
        _sfOffset.copyToBin(pMem);
    }

    if(FieldBits::NoField != (LengthFieldMask & whichField))
    {
        _sfLength.copyToBin(pMem);
    }


}

void DocumentEventBase::copyFromBin(      BinaryDataHandler &pMem,
                                    const BitVector    &whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (DocumentFieldMask & whichField))
    {
        _sfDocument.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (OffsetFieldMask & whichField))
    {
        _sfOffset.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (LengthFieldMask & whichField))
    {
        _sfLength.copyFromBin(pMem);
    }


}

#if !defined(OSG_FIXED_MFIELDSYNC)
void DocumentEventBase::executeSyncImpl(      DocumentEventBase *pOther,
                                        const BitVector         &whichField)
{

    Inherited::executeSyncImpl(pOther, whichField);

    if(FieldBits::NoField != (DocumentFieldMask & whichField))
        _sfDocument.syncWith(pOther->_sfDocument);

    if(FieldBits::NoField != (OffsetFieldMask & whichField))
        _sfOffset.syncWith(pOther->_sfOffset);

    if(FieldBits::NoField != (LengthFieldMask & whichField))
        _sfLength.syncWith(pOther->_sfLength);


}
#else
void DocumentEventBase::executeSyncImpl(      DocumentEventBase *pOther,
                                        const BitVector         &whichField,
                                        const SyncInfo          &sInfo      )
{

    Inherited::executeSyncImpl(pOther, whichField, sInfo);

    if(FieldBits::NoField != (DocumentFieldMask & whichField))
        _sfDocument.syncWith(pOther->_sfDocument);

    if(FieldBits::NoField != (OffsetFieldMask & whichField))
        _sfOffset.syncWith(pOther->_sfOffset);

    if(FieldBits::NoField != (LengthFieldMask & whichField))
        _sfLength.syncWith(pOther->_sfLength);



}

void DocumentEventBase::execBeginEditImpl (const BitVector &whichField, 
                                                 UInt32     uiAspect,
                                                 UInt32     uiContainerSize)
{
    Inherited::execBeginEditImpl(whichField, uiAspect, uiContainerSize);

}
#endif



OSG_END_NAMESPACE

#include <OpenSG/OSGSFieldTypeDef.inl>

OSG_BEGIN_NAMESPACE

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldDataTraits<DocumentEventPtr>::_type("DocumentEventPtr", "EventPtr");
#endif

OSG_DLLEXPORT_SFIELD_DEF1(DocumentEventPtr, OSG_USERINTERFACELIB_DLLTMPLMAPPING);


OSG_END_NAMESPACE

