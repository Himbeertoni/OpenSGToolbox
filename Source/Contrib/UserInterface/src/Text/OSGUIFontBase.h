/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact:  David Kabala (djkabala@gmail.com)                             *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class UIFont
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#ifndef _OSGUIFONTBASE_H_
#define _OSGUIFONTBASE_H_
#ifdef __sgi
#pragma once
#endif


#include "OSGConfig.h"
#include "OSGContribUserInterfaceDef.h"

//#include "OSGBaseTypes.h"

#include "OSGAttachmentContainer.h" // Parent

#include "OSGBaseFields.h"              // Family type
#include "OSGSysFields.h"               // GlyphPixelSize type
#include "OSGTextureObjChunkFields.h"   // Texture type

#include "OSGUIFontFields.h"

OSG_BEGIN_NAMESPACE

class UIFont;

//! \brief UIFont Base Class.

class OSG_CONTRIBUSERINTERFACE_DLLMAPPING UIFontBase : public AttachmentContainer
{
  public:

    typedef AttachmentContainer Inherited;
    typedef AttachmentContainer ParentContainer;

    typedef Inherited::TypeObject TypeObject;
    typedef TypeObject::InitPhase InitPhase;

    OSG_GEN_INTERNALPTR(UIFont);

    /*==========================  PUBLIC  =================================*/

  public:

    enum
    {
        FamilyFieldId = Inherited::NextFieldId,
        GlyphPixelSizeFieldId = FamilyFieldId + 1,
        SizeFieldId = GlyphPixelSizeFieldId + 1,
        GapFieldId = SizeFieldId + 1,
        TextureWidthFieldId = GapFieldId + 1,
        StyleFieldId = TextureWidthFieldId + 1,
        AntiAliasingFieldId = StyleFieldId + 1,
        TextureFieldId = AntiAliasingFieldId + 1,
        NextFieldId = TextureFieldId + 1
    };

    static const OSG::BitVector FamilyFieldMask =
        (TypeTraits<BitVector>::One << FamilyFieldId);
    static const OSG::BitVector GlyphPixelSizeFieldMask =
        (TypeTraits<BitVector>::One << GlyphPixelSizeFieldId);
    static const OSG::BitVector SizeFieldMask =
        (TypeTraits<BitVector>::One << SizeFieldId);
    static const OSG::BitVector GapFieldMask =
        (TypeTraits<BitVector>::One << GapFieldId);
    static const OSG::BitVector TextureWidthFieldMask =
        (TypeTraits<BitVector>::One << TextureWidthFieldId);
    static const OSG::BitVector StyleFieldMask =
        (TypeTraits<BitVector>::One << StyleFieldId);
    static const OSG::BitVector AntiAliasingFieldMask =
        (TypeTraits<BitVector>::One << AntiAliasingFieldId);
    static const OSG::BitVector TextureFieldMask =
        (TypeTraits<BitVector>::One << TextureFieldId);
    static const OSG::BitVector NextFieldMask =
        (TypeTraits<BitVector>::One << NextFieldId);
        
    typedef SFString          SFFamilyType;
    typedef SFUInt32          SFGlyphPixelSizeType;
    typedef SFUInt32          SFSizeType;
    typedef SFUInt32          SFGapType;
    typedef SFUInt32          SFTextureWidthType;
    typedef SFUInt32          SFStyleType;
    typedef SFBool            SFAntiAliasingType;
    typedef SFUnrecTextureObjChunkPtr SFTextureType;

    /*---------------------------------------------------------------------*/
    /*! \name                    Class Get                                 */
    /*! \{                                                                 */

    static FieldContainerType &getClassType   (void);
    static UInt32              getClassTypeId (void);
    static UInt16              getClassGroupId(void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                FieldContainer Get                            */
    /*! \{                                                                 */

    virtual       FieldContainerType &getType         (void);
    virtual const FieldContainerType &getType         (void) const;

    virtual       UInt32              getContainerSize(void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Get                                 */
    /*! \{                                                                 */


                  SFString            *editSFFamily         (void);
            const SFString            *getSFFamily          (void) const;

                  SFUInt32            *editSFGlyphPixelSize (void);
            const SFUInt32            *getSFGlyphPixelSize  (void) const;

                  SFUInt32            *editSFSize           (void);
            const SFUInt32            *getSFSize            (void) const;

                  SFUInt32            *editSFGap            (void);
            const SFUInt32            *getSFGap             (void) const;

                  SFUInt32            *editSFTextureWidth   (void);
            const SFUInt32            *getSFTextureWidth    (void) const;

                  SFUInt32            *editSFStyle          (void);
            const SFUInt32            *getSFStyle           (void) const;

                  SFBool              *editSFAntiAliasing   (void);
            const SFBool              *getSFAntiAliasing    (void) const;
            const SFUnrecTextureObjChunkPtr *getSFTexture        (void) const;
                  SFUnrecTextureObjChunkPtr *editSFTexture        (void);


                  std::string         &editFamily         (void);
            const std::string         &getFamily          (void) const;

                  UInt32              &editGlyphPixelSize (void);
                  UInt32               getGlyphPixelSize  (void) const;

                  UInt32              &editSize           (void);
                  UInt32               getSize            (void) const;

                  UInt32              &editGap            (void);
                  UInt32               getGap             (void) const;

                  UInt32              &editTextureWidth   (void);
                  UInt32               getTextureWidth    (void) const;

                  UInt32              &editStyle          (void);
                  UInt32               getStyle           (void) const;

                  bool                &editAntiAliasing   (void);
                  bool                 getAntiAliasing    (void) const;

                  TextureObjChunk * getTexture        (void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Set                                 */
    /*! \{                                                                 */

            void setFamily         (const std::string &value);
            void setGlyphPixelSize (const UInt32 value);
            void setSize           (const UInt32 value);
            void setGap            (const UInt32 value);
            void setTextureWidth   (const UInt32 value);
            void setStyle          (const UInt32 value);
            void setAntiAliasing   (const bool value);
            void setTexture        (TextureObjChunk * const value);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                Ptr Field Set                                 */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                Ptr MField Set                                */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Binary Access                              */
    /*! \{                                                                 */

    virtual UInt32 getBinSize (ConstFieldMaskArg  whichField);
    virtual void   copyToBin  (BinaryDataHandler &pMem,
                               ConstFieldMaskArg  whichField);
    virtual void   copyFromBin(BinaryDataHandler &pMem,
                               ConstFieldMaskArg  whichField);


    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Construction                               */
    /*! \{                                                                 */

    static  UIFontTransitPtr  create          (void);
    static  UIFont           *createEmpty     (void);

    static  UIFontTransitPtr  createLocal     (
                                               BitVector bFlags = FCLocal::All);

    static  UIFont            *createEmptyLocal(
                                              BitVector bFlags = FCLocal::All);

    static  UIFontTransitPtr  createDependent  (BitVector bFlags);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Copy                                   */
    /*! \{                                                                 */

    virtual FieldContainerTransitPtr shallowCopy     (void) const;
    virtual FieldContainerTransitPtr shallowCopyLocal(
                                       BitVector bFlags = FCLocal::All) const;
    virtual FieldContainerTransitPtr shallowCopyDependent(
                                                      BitVector bFlags) const;

    /*! \}                                                                 */
    /*=========================  PROTECTED  ===============================*/

  protected:

    static TypeObject _type;

    static       void   classDescInserter(TypeObject &oType);
    static const Char8 *getClassname     (void             );

    /*---------------------------------------------------------------------*/
    /*! \name                      Fields                                  */
    /*! \{                                                                 */

    SFString          _sfFamily;
    SFUInt32          _sfGlyphPixelSize;
    SFUInt32          _sfSize;
    SFUInt32          _sfGap;
    SFUInt32          _sfTextureWidth;
    SFUInt32          _sfStyle;
    SFBool            _sfAntiAliasing;
    SFUnrecTextureObjChunkPtr _sfTexture;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Constructors                               */
    /*! \{                                                                 */

    UIFontBase(void);
    UIFontBase(const UIFontBase &source);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Destructors                                */
    /*! \{                                                                 */

    virtual ~UIFontBase(void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                     onCreate                                */
    /*! \{                                                                 */

    void onCreate(const UIFont *source = NULL);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Generic Field Access                      */
    /*! \{                                                                 */

    GetFieldHandlePtr  getHandleFamily          (void) const;
    EditFieldHandlePtr editHandleFamily         (void);
    GetFieldHandlePtr  getHandleGlyphPixelSize  (void) const;
    EditFieldHandlePtr editHandleGlyphPixelSize (void);
    GetFieldHandlePtr  getHandleSize            (void) const;
    EditFieldHandlePtr editHandleSize           (void);
    GetFieldHandlePtr  getHandleGap             (void) const;
    EditFieldHandlePtr editHandleGap            (void);
    GetFieldHandlePtr  getHandleTextureWidth    (void) const;
    EditFieldHandlePtr editHandleTextureWidth   (void);
    GetFieldHandlePtr  getHandleStyle           (void) const;
    EditFieldHandlePtr editHandleStyle          (void);
    GetFieldHandlePtr  getHandleAntiAliasing    (void) const;
    EditFieldHandlePtr editHandleAntiAliasing   (void);
    GetFieldHandlePtr  getHandleTexture         (void) const;
    EditFieldHandlePtr editHandleTexture        (void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

#ifdef OSG_MT_CPTR_ASPECT
    virtual void execSyncV(      FieldContainer    &oFrom,
                                 ConstFieldMaskArg  whichField,
                                 AspectOffsetStore &oOffsets,
                                 ConstFieldMaskArg  syncMode  ,
                           const UInt32             uiSyncInfo);

            void execSync (      UIFontBase *pFrom,
                                 ConstFieldMaskArg  whichField,
                                 AspectOffsetStore &oOffsets,
                                 ConstFieldMaskArg  syncMode  ,
                           const UInt32             uiSyncInfo);
#endif

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Edit                                   */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                     Aspect Create                            */
    /*! \{                                                                 */

#ifdef OSG_MT_CPTR_ASPECT
    virtual FieldContainer *createAspectCopy(
                                    const FieldContainer *pRefAspect) const;
#endif

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Edit                                   */
    /*! \{                                                                 */
    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

    virtual void resolveLinks(void);

    /*! \}                                                                 */
    /*==========================  PRIVATE  ================================*/

  private:
    /*---------------------------------------------------------------------*/

    // prohibit default functions (move to 'public' if you need one)
    void operator =(const UIFontBase &source);
};

typedef UIFontBase *UIFontBaseP;

OSG_END_NAMESPACE

#endif /* _OSGUIFONTBASE_H_ */
