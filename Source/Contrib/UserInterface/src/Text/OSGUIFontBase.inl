/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *   contact:  David Kabala (djkabala@gmail.com)                             *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class UIFont!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

OSG_BEGIN_NAMESPACE


//! access the type of the class
inline
OSG::FieldContainerType &UIFontBase::getClassType(void)
{
    return _type;
}

//! access the numerical type of the class
inline
OSG::UInt32 UIFontBase::getClassTypeId(void)
{
    return _type.getId();
}

inline
OSG::UInt16 UIFontBase::getClassGroupId(void)
{
    return _type.getGroupId();
}

/*------------------------------ get -----------------------------------*/

//! Get the value of the UIFont::_sfFamily field.

inline
std::string &UIFontBase::editFamily(void)
{
    editSField(FamilyFieldMask);

    return _sfFamily.getValue();
}

//! Get the value of the UIFont::_sfFamily field.
inline
const std::string &UIFontBase::getFamily(void) const
{
    return _sfFamily.getValue();
}

//! Set the value of the UIFont::_sfFamily field.
inline
void UIFontBase::setFamily(const std::string &value)
{
    editSField(FamilyFieldMask);

    _sfFamily.setValue(value);
}
//! Get the value of the UIFont::_sfGlyphPixelSize field.

inline
UInt32 &UIFontBase::editGlyphPixelSize(void)
{
    editSField(GlyphPixelSizeFieldMask);

    return _sfGlyphPixelSize.getValue();
}

//! Get the value of the UIFont::_sfGlyphPixelSize field.
inline
      UInt32  UIFontBase::getGlyphPixelSize(void) const
{
    return _sfGlyphPixelSize.getValue();
}

//! Set the value of the UIFont::_sfGlyphPixelSize field.
inline
void UIFontBase::setGlyphPixelSize(const UInt32 value)
{
    editSField(GlyphPixelSizeFieldMask);

    _sfGlyphPixelSize.setValue(value);
}
//! Get the value of the UIFont::_sfSize field.

inline
UInt32 &UIFontBase::editSize(void)
{
    editSField(SizeFieldMask);

    return _sfSize.getValue();
}

//! Get the value of the UIFont::_sfSize field.
inline
      UInt32  UIFontBase::getSize(void) const
{
    return _sfSize.getValue();
}

//! Set the value of the UIFont::_sfSize field.
inline
void UIFontBase::setSize(const UInt32 value)
{
    editSField(SizeFieldMask);

    _sfSize.setValue(value);
}
//! Get the value of the UIFont::_sfGap field.

inline
UInt32 &UIFontBase::editGap(void)
{
    editSField(GapFieldMask);

    return _sfGap.getValue();
}

//! Get the value of the UIFont::_sfGap field.
inline
      UInt32  UIFontBase::getGap(void) const
{
    return _sfGap.getValue();
}

//! Set the value of the UIFont::_sfGap field.
inline
void UIFontBase::setGap(const UInt32 value)
{
    editSField(GapFieldMask);

    _sfGap.setValue(value);
}
//! Get the value of the UIFont::_sfTextureWidth field.

inline
UInt32 &UIFontBase::editTextureWidth(void)
{
    editSField(TextureWidthFieldMask);

    return _sfTextureWidth.getValue();
}

//! Get the value of the UIFont::_sfTextureWidth field.
inline
      UInt32  UIFontBase::getTextureWidth(void) const
{
    return _sfTextureWidth.getValue();
}

//! Set the value of the UIFont::_sfTextureWidth field.
inline
void UIFontBase::setTextureWidth(const UInt32 value)
{
    editSField(TextureWidthFieldMask);

    _sfTextureWidth.setValue(value);
}
//! Get the value of the UIFont::_sfStyle field.

inline
UInt32 &UIFontBase::editStyle(void)
{
    editSField(StyleFieldMask);

    return _sfStyle.getValue();
}

//! Get the value of the UIFont::_sfStyle field.
inline
      UInt32  UIFontBase::getStyle(void) const
{
    return _sfStyle.getValue();
}

//! Set the value of the UIFont::_sfStyle field.
inline
void UIFontBase::setStyle(const UInt32 value)
{
    editSField(StyleFieldMask);

    _sfStyle.setValue(value);
}
//! Get the value of the UIFont::_sfAntiAliasing field.

inline
bool &UIFontBase::editAntiAliasing(void)
{
    editSField(AntiAliasingFieldMask);

    return _sfAntiAliasing.getValue();
}

//! Get the value of the UIFont::_sfAntiAliasing field.
inline
      bool  UIFontBase::getAntiAliasing(void) const
{
    return _sfAntiAliasing.getValue();
}

//! Set the value of the UIFont::_sfAntiAliasing field.
inline
void UIFontBase::setAntiAliasing(const bool value)
{
    editSField(AntiAliasingFieldMask);

    _sfAntiAliasing.setValue(value);
}

//! Get the value of the UIFont::_sfTexture field.
inline
TextureObjChunk * UIFontBase::getTexture(void) const
{
    return _sfTexture.getValue();
}

//! Set the value of the UIFont::_sfTexture field.
inline
void UIFontBase::setTexture(TextureObjChunk * const value)
{
    editSField(TextureFieldMask);

    _sfTexture.setValue(value);
}


#ifdef OSG_MT_CPTR_ASPECT
inline
void UIFontBase::execSync (      UIFontBase *pFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    Inherited::execSync(pFrom, whichField, oOffsets, syncMode, uiSyncInfo);

    if(FieldBits::NoField != (FamilyFieldMask & whichField))
        _sfFamily.syncWith(pFrom->_sfFamily);

    if(FieldBits::NoField != (GlyphPixelSizeFieldMask & whichField))
        _sfGlyphPixelSize.syncWith(pFrom->_sfGlyphPixelSize);

    if(FieldBits::NoField != (SizeFieldMask & whichField))
        _sfSize.syncWith(pFrom->_sfSize);

    if(FieldBits::NoField != (GapFieldMask & whichField))
        _sfGap.syncWith(pFrom->_sfGap);

    if(FieldBits::NoField != (TextureWidthFieldMask & whichField))
        _sfTextureWidth.syncWith(pFrom->_sfTextureWidth);

    if(FieldBits::NoField != (StyleFieldMask & whichField))
        _sfStyle.syncWith(pFrom->_sfStyle);

    if(FieldBits::NoField != (AntiAliasingFieldMask & whichField))
        _sfAntiAliasing.syncWith(pFrom->_sfAntiAliasing);

    if(FieldBits::NoField != (TextureFieldMask & whichField))
        _sfTexture.syncWith(pFrom->_sfTexture);
}
#endif


inline
const Char8 *UIFontBase::getClassname(void)
{
    return "UIFont";
}
OSG_GEN_CONTAINERPTR(UIFont);

OSG_END_NAMESPACE

