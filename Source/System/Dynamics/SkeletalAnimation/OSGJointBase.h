/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact:  David Kabala (djkabala@gmail.com), David Naylor               *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class Joint
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#ifndef _OSGJOINTBASE_H_
#define _OSGJOINTBASE_H_
#ifdef __sgi
#pragma once
#endif


#include "OSGConfig.h"
#include "OSGDynamicsDef.h"

//#include "OSGBaseTypes.h"

#include "OSGAttachmentContainer.h" // Parent

#include "OSGMathFields.h"              // RelativeTransformation type
#include "OSGJointFields.h"             // ChildJoints type
#include "OSGSkeletonFields.h"          // ParentSkeleton type
#include "OSGSysFields.h"               // UseParentTranslation type

#include "OSGJointFields.h"

OSG_BEGIN_NAMESPACE

class Joint;

//! \brief Joint Base Class.

class OSG_DYNAMICS_DLLMAPPING JointBase : public AttachmentContainer
{
  public:

    typedef AttachmentContainer Inherited;
    typedef AttachmentContainer ParentContainer;

    typedef Inherited::TypeObject TypeObject;
    typedef TypeObject::InitPhase InitPhase;

    OSG_GEN_INTERNALPTR(Joint);

    /*==========================  PUBLIC  =================================*/

  public:

    enum
    {
        RelativeTransformationFieldId = Inherited::NextFieldId,
        BindRelativeTransformationFieldId = RelativeTransformationFieldId + 1,
        ChildJointsFieldId = BindRelativeTransformationFieldId + 1,
        ParentJointFieldId = ChildJointsFieldId + 1,
        ParentSkeletonFieldId = ParentJointFieldId + 1,
        UseParentTranslationFieldId = ParentSkeletonFieldId + 1,
        NextFieldId = UseParentTranslationFieldId + 1
    };

    static const OSG::BitVector RelativeTransformationFieldMask =
        (TypeTraits<BitVector>::One << RelativeTransformationFieldId);
    static const OSG::BitVector BindRelativeTransformationFieldMask =
        (TypeTraits<BitVector>::One << BindRelativeTransformationFieldId);
    static const OSG::BitVector ChildJointsFieldMask =
        (TypeTraits<BitVector>::One << ChildJointsFieldId);
    static const OSG::BitVector ParentJointFieldMask =
        (TypeTraits<BitVector>::One << ParentJointFieldId);
    static const OSG::BitVector ParentSkeletonFieldMask =
        (TypeTraits<BitVector>::One << ParentSkeletonFieldId);
    static const OSG::BitVector UseParentTranslationFieldMask =
        (TypeTraits<BitVector>::One << UseParentTranslationFieldId);
    static const OSG::BitVector NextFieldMask =
        (TypeTraits<BitVector>::One << NextFieldId);
        
    typedef SFMatrix          SFRelativeTransformationType;
    typedef SFMatrix          SFBindRelativeTransformationType;
    typedef MFUnrecJointPtr   MFChildJointsType;
    typedef SFUnrecJointPtr   SFParentJointType;
    typedef SFUnrecSkeletonPtr SFParentSkeletonType;
    typedef SFBool            SFUseParentTranslationType;

    /*---------------------------------------------------------------------*/
    /*! \name                    Class Get                                 */
    /*! \{                                                                 */

    static FieldContainerType &getClassType   (void);
    static UInt32              getClassTypeId (void);
    static UInt16              getClassGroupId(void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                FieldContainer Get                            */
    /*! \{                                                                 */

    virtual       FieldContainerType &getType         (void);
    virtual const FieldContainerType &getType         (void) const;

    virtual       UInt32              getContainerSize(void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Get                                 */
    /*! \{                                                                 */


                  SFMatrix            *editSFRelativeTransformation(void);
            const SFMatrix            *getSFRelativeTransformation (void) const;

                  SFMatrix            *editSFBindRelativeTransformation(void);
            const SFMatrix            *getSFBindRelativeTransformation (void) const;
            const MFUnrecJointPtr     *getMFChildJoints    (void) const;
                  MFUnrecJointPtr     *editMFChildJoints    (void);
            const SFUnrecJointPtr     *getSFParentJoint    (void) const;
                  SFUnrecJointPtr     *editSFParentJoint    (void);
            const SFUnrecSkeletonPtr  *getSFParentSkeleton (void) const;
                  SFUnrecSkeletonPtr  *editSFParentSkeleton (void);

                  SFBool              *editSFUseParentTranslation(void);
            const SFBool              *getSFUseParentTranslation (void) const;


                  Matrix              &editRelativeTransformation(void);
            const Matrix              &getRelativeTransformation (void) const;

                  Matrix              &editBindRelativeTransformation(void);
            const Matrix              &getBindRelativeTransformation (void) const;

                  Joint * getChildJoints    (const UInt32 index) const;

                  Joint * getParentJoint    (void) const;

                  Skeleton * getParentSkeleton (void) const;

                  bool                &editUseParentTranslation(void);
                  bool                 getUseParentTranslation (void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Set                                 */
    /*! \{                                                                 */

            void setRelativeTransformation(const Matrix &value);
            void setBindRelativeTransformation(const Matrix &value);
            void setParentJoint    (Joint * const value);
            void setParentSkeleton (Skeleton * const value);
            void setUseParentTranslation(const bool value);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                Ptr Field Set                                 */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                Ptr MField Set                                */
    /*! \{                                                                 */

    void pushToChildJoints           (Joint * const value   );
    void assignChildJoints          (const MFUnrecJointPtr   &value);
    void removeFromChildJoints (UInt32               uiIndex );
    void removeObjFromChildJoints(Joint * const value   );
    void clearChildJoints            (void                         );

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Binary Access                              */
    /*! \{                                                                 */

    virtual UInt32 getBinSize (ConstFieldMaskArg  whichField);
    virtual void   copyToBin  (BinaryDataHandler &pMem,
                               ConstFieldMaskArg  whichField);
    virtual void   copyFromBin(BinaryDataHandler &pMem,
                               ConstFieldMaskArg  whichField);


    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Construction                               */
    /*! \{                                                                 */

    static  JointTransitPtr  create          (void);
    static  Joint           *createEmpty     (void);

    static  JointTransitPtr  createLocal     (
                                               BitVector bFlags = FCLocal::All);

    static  Joint            *createEmptyLocal(
                                              BitVector bFlags = FCLocal::All);

    static  JointTransitPtr  createDependent  (BitVector bFlags);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Copy                                   */
    /*! \{                                                                 */

    virtual FieldContainerTransitPtr shallowCopy     (void) const;
    virtual FieldContainerTransitPtr shallowCopyLocal(
                                       BitVector bFlags = FCLocal::All) const;
    virtual FieldContainerTransitPtr shallowCopyDependent(
                                                      BitVector bFlags) const;

    /*! \}                                                                 */
    /*=========================  PROTECTED  ===============================*/

  protected:

    static TypeObject _type;

    static       void   classDescInserter(TypeObject &oType);
    static const Char8 *getClassname     (void             );

    /*---------------------------------------------------------------------*/
    /*! \name                      Fields                                  */
    /*! \{                                                                 */

    SFMatrix          _sfRelativeTransformation;
    SFMatrix          _sfBindRelativeTransformation;
    MFUnrecJointPtr   _mfChildJoints;
    SFUnrecJointPtr   _sfParentJoint;
    SFUnrecSkeletonPtr _sfParentSkeleton;
    SFBool            _sfUseParentTranslation;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Constructors                               */
    /*! \{                                                                 */

    JointBase(void);
    JointBase(const JointBase &source);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Destructors                                */
    /*! \{                                                                 */

    virtual ~JointBase(void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                     onCreate                                */
    /*! \{                                                                 */

    void onCreate(const Joint *source = NULL);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Generic Field Access                      */
    /*! \{                                                                 */

    GetFieldHandlePtr  getHandleRelativeTransformation (void) const;
    EditFieldHandlePtr editHandleRelativeTransformation(void);
    GetFieldHandlePtr  getHandleBindRelativeTransformation (void) const;
    EditFieldHandlePtr editHandleBindRelativeTransformation(void);
    GetFieldHandlePtr  getHandleChildJoints     (void) const;
    EditFieldHandlePtr editHandleChildJoints    (void);
    GetFieldHandlePtr  getHandleParentJoint     (void) const;
    EditFieldHandlePtr editHandleParentJoint    (void);
    GetFieldHandlePtr  getHandleParentSkeleton  (void) const;
    EditFieldHandlePtr editHandleParentSkeleton (void);
    GetFieldHandlePtr  getHandleUseParentTranslation (void) const;
    EditFieldHandlePtr editHandleUseParentTranslation(void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

#ifdef OSG_MT_CPTR_ASPECT
    virtual void execSyncV(      FieldContainer    &oFrom,
                                 ConstFieldMaskArg  whichField,
                                 AspectOffsetStore &oOffsets,
                                 ConstFieldMaskArg  syncMode  ,
                           const UInt32             uiSyncInfo);

            void execSync (      JointBase *pFrom,
                                 ConstFieldMaskArg  whichField,
                                 AspectOffsetStore &oOffsets,
                                 ConstFieldMaskArg  syncMode  ,
                           const UInt32             uiSyncInfo);
#endif

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Edit                                   */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                     Aspect Create                            */
    /*! \{                                                                 */

#ifdef OSG_MT_CPTR_ASPECT
    virtual FieldContainer *createAspectCopy(
                                    const FieldContainer *pRefAspect) const;
#endif

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Edit                                   */
    /*! \{                                                                 */
    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

    virtual void resolveLinks(void);

    /*! \}                                                                 */
    /*==========================  PRIVATE  ================================*/

  private:
    /*---------------------------------------------------------------------*/

    // prohibit default functions (move to 'public' if you need one)
    void operator =(const JointBase &source);
};

typedef JointBase *JointBaseP;

OSG_END_NAMESPACE

#endif /* _OSGJOINTBASE_H_ */
