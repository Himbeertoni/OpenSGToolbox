/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact:  David Kabala (djkabala@gmail.com), David Naylor               *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class SkeletonAnimation
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#ifndef _OSGSKELETONANIMATIONBASE_H_
#define _OSGSKELETONANIMATIONBASE_H_
#ifdef __sgi
#pragma once
#endif


#include "OSGConfig.h"
#include "OSGTBAnimationDef.h"

//#include "OSGBaseTypes.h"

#include "OSGAnimation.h" // Parent

#include "OSGKeyframeAnimatorFields.h"  // TransformationAnimators type
#include "OSGJointFields.h"             // AnimatorJoints type
#include "OSGSkeletonFields.h"          // Skeleton type
#include "OSGSysFields.h"               // InterpolationType type

#include "OSGSkeletonAnimationFields.h"

OSG_BEGIN_NAMESPACE

class SkeletonAnimation;

//! \brief SkeletonAnimation Base Class.

class OSG_TBANIMATION_DLLMAPPING SkeletonAnimationBase : public Animation
{
  public:

    typedef Animation Inherited;
    typedef Animation ParentContainer;

    typedef Inherited::TypeObject TypeObject;
    typedef TypeObject::InitPhase InitPhase;

    OSG_GEN_INTERNALPTR(SkeletonAnimation);

    /*==========================  PUBLIC  =================================*/

  public:

    enum
    {
        TransformationAnimatorsFieldId = Inherited::NextFieldId,
        AnimatorJointsFieldId = TransformationAnimatorsFieldId + 1,
        SkeletonFieldId = AnimatorJointsFieldId + 1,
        InterpolationTypeFieldId = SkeletonFieldId + 1,
        NextFieldId = InterpolationTypeFieldId + 1
    };

    static const OSG::BitVector TransformationAnimatorsFieldMask =
        (TypeTraits<BitVector>::One << TransformationAnimatorsFieldId);
    static const OSG::BitVector AnimatorJointsFieldMask =
        (TypeTraits<BitVector>::One << AnimatorJointsFieldId);
    static const OSG::BitVector SkeletonFieldMask =
        (TypeTraits<BitVector>::One << SkeletonFieldId);
    static const OSG::BitVector InterpolationTypeFieldMask =
        (TypeTraits<BitVector>::One << InterpolationTypeFieldId);
    static const OSG::BitVector NextFieldMask =
        (TypeTraits<BitVector>::One << NextFieldId);
        
    typedef MFUnrecKeyframeAnimatorPtr MFTransformationAnimatorsType;
    typedef MFUnrecJointPtr   MFAnimatorJointsType;
    typedef SFUnrecSkeletonPtr SFSkeletonType;
    typedef SFUInt32          SFInterpolationTypeType;

    /*---------------------------------------------------------------------*/
    /*! \name                    Class Get                                 */
    /*! \{                                                                 */

    static FieldContainerType &getClassType   (void);
    static UInt32              getClassTypeId (void);
    static UInt16              getClassGroupId(void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                FieldContainer Get                            */
    /*! \{                                                                 */

    virtual       FieldContainerType &getType         (void);
    virtual const FieldContainerType &getType         (void) const;

    virtual       UInt32              getContainerSize(void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Get                                 */
    /*! \{                                                                 */

            const SFUnrecSkeletonPtr  *getSFSkeleton       (void) const;
                  SFUnrecSkeletonPtr  *editSFSkeleton       (void);

                  SFUInt32            *editSFInterpolationType(void);
            const SFUInt32            *getSFInterpolationType (void) const;


                  Skeleton * getSkeleton       (void) const;

                  UInt32              &editInterpolationType(void);
                  UInt32               getInterpolationType (void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Set                                 */
    /*! \{                                                                 */

            void setSkeleton       (Skeleton * const value);
            void setInterpolationType(const UInt32 value);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                Ptr Field Set                                 */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                Ptr MField Set                                */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Binary Access                              */
    /*! \{                                                                 */

    virtual UInt32 getBinSize (ConstFieldMaskArg  whichField);
    virtual void   copyToBin  (BinaryDataHandler &pMem,
                               ConstFieldMaskArg  whichField);
    virtual void   copyFromBin(BinaryDataHandler &pMem,
                               ConstFieldMaskArg  whichField);


    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Construction                               */
    /*! \{                                                                 */

    static  SkeletonAnimationTransitPtr  create          (void);
    static  SkeletonAnimation           *createEmpty     (void);

    static  SkeletonAnimationTransitPtr  createLocal     (
                                               BitVector bFlags = FCLocal::All);

    static  SkeletonAnimation            *createEmptyLocal(
                                              BitVector bFlags = FCLocal::All);

    static  SkeletonAnimationTransitPtr  createDependent  (BitVector bFlags);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Copy                                   */
    /*! \{                                                                 */

    virtual FieldContainerTransitPtr shallowCopy     (void) const;
    virtual FieldContainerTransitPtr shallowCopyLocal(
                                       BitVector bFlags = FCLocal::All) const;
    virtual FieldContainerTransitPtr shallowCopyDependent(
                                                      BitVector bFlags) const;

    /*! \}                                                                 */
    /*=========================  PROTECTED  ===============================*/

  protected:

    static TypeObject _type;

    static       void   classDescInserter(TypeObject &oType);
    static const Char8 *getClassname     (void             );

    /*---------------------------------------------------------------------*/
    /*! \name                      Fields                                  */
    /*! \{                                                                 */

    MFUnrecKeyframeAnimatorPtr _mfTransformationAnimators;
    MFUnrecJointPtr   _mfAnimatorJoints;
    SFUnrecSkeletonPtr _sfSkeleton;
    SFUInt32          _sfInterpolationType;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Constructors                               */
    /*! \{                                                                 */

    SkeletonAnimationBase(void);
    SkeletonAnimationBase(const SkeletonAnimationBase &source);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Destructors                                */
    /*! \{                                                                 */

    virtual ~SkeletonAnimationBase(void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                     onCreate                                */
    /*! \{                                                                 */

    void onCreate(const SkeletonAnimation *source = NULL);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Generic Field Access                      */
    /*! \{                                                                 */

    GetFieldHandlePtr  getHandleTransformationAnimators (void) const;
    EditFieldHandlePtr editHandleTransformationAnimators(void);
    GetFieldHandlePtr  getHandleAnimatorJoints  (void) const;
    EditFieldHandlePtr editHandleAnimatorJoints (void);
    GetFieldHandlePtr  getHandleSkeleton        (void) const;
    EditFieldHandlePtr editHandleSkeleton       (void);
    GetFieldHandlePtr  getHandleInterpolationType (void) const;
    EditFieldHandlePtr editHandleInterpolationType(void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Get                                 */
    /*! \{                                                                 */

            const MFUnrecKeyframeAnimatorPtr *getMFTransformationAnimators (void) const;
                  MFUnrecKeyframeAnimatorPtr *editMFTransformationAnimators(void);
            const MFUnrecJointPtr     *getMFAnimatorJoints  (void) const;
                  MFUnrecJointPtr     *editMFAnimatorJoints (void);


                  KeyframeAnimator * getTransformationAnimators(const UInt32 index) const;

                  Joint * getAnimatorJoints (const UInt32 index) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Set                                 */
    /*! \{                                                                 */


    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                Ptr MField Set                                */
    /*! \{                                                                 */

    void pushToTransformationAnimators           (KeyframeAnimator * const value   );
    void assignTransformationAnimators           (const MFUnrecKeyframeAnimatorPtr &value);
    void removeFromTransformationAnimators (UInt32                uiIndex );
    void removeObjFromTransformationAnimators(KeyframeAnimator * const value   );
    void clearTransformationAnimators            (void                          );

    void pushToAnimatorJoints           (Joint * const value   );
    void assignAnimatorJoints           (const MFUnrecJointPtr   &value);
    void removeFromAnimatorJoints (UInt32                uiIndex );
    void removeObjFromAnimatorJoints(Joint * const value   );
    void clearAnimatorJoints            (void                          );

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

#ifdef OSG_MT_CPTR_ASPECT
    virtual void execSyncV(      FieldContainer    &oFrom,
                                 ConstFieldMaskArg  whichField,
                                 AspectOffsetStore &oOffsets,
                                 ConstFieldMaskArg  syncMode  ,
                           const UInt32             uiSyncInfo);

            void execSync (      SkeletonAnimationBase *pFrom,
                                 ConstFieldMaskArg  whichField,
                                 AspectOffsetStore &oOffsets,
                                 ConstFieldMaskArg  syncMode  ,
                           const UInt32             uiSyncInfo);
#endif

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Edit                                   */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                     Aspect Create                            */
    /*! \{                                                                 */

#ifdef OSG_MT_CPTR_ASPECT
    virtual FieldContainer *createAspectCopy(
                                    const FieldContainer *pRefAspect) const;
#endif

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Edit                                   */
    /*! \{                                                                 */
    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

    virtual void resolveLinks(void);

    /*! \}                                                                 */
    /*==========================  PRIVATE  ================================*/

  private:
    /*---------------------------------------------------------------------*/

    // prohibit default functions (move to 'public' if you need one)
    void operator =(const SkeletonAnimationBase &source);
};

typedef SkeletonAnimationBase *SkeletonAnimationBaseP;

OSG_END_NAMESPACE

#endif /* _OSGSKELETONANIMATIONBASE_H_ */
