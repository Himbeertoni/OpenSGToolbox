/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact:  David Kabala (djkabala@gmail.com), David Naylor               *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class SkeletonBlendedAnimation!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>
#include <boost/assign/list_of.hpp>

#include "OSGConfig.h"



#include "OSGSkeletonAnimation.h"       // SkeletonAnimations Class

#include "OSGSkeletonBlendedAnimationBase.h"
#include "OSGSkeletonBlendedAnimation.h"

#include <boost/bind.hpp>

#ifdef WIN32 // turn off 'this' : used in base member initializer list warning
#pragma warning(disable:4355)
#endif

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::SkeletonBlendedAnimation
    
 */

/***************************************************************************\
 *                        Field Documentation                              *
\***************************************************************************/

/*! \var SkeletonAnimation * SkeletonBlendedAnimationBase::_mfSkeletonAnimations
    
*/

/*! \var Real32          SkeletonBlendedAnimationBase::_mfBlendAmounts
    
*/

/*! \var UInt8           SkeletonBlendedAnimationBase::_mfOverrideStatuses
    
*/


/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldTraits<SkeletonBlendedAnimation *>::_type("SkeletonBlendedAnimationPtr", "AnimationPtr");
#endif

OSG_FIELDTRAITS_GETTYPE(SkeletonBlendedAnimation *)

OSG_EXPORT_PTR_SFIELD_FULL(PointerSField,
                           SkeletonBlendedAnimation *,
                           0);

OSG_EXPORT_PTR_MFIELD_FULL(PointerMField,
                           SkeletonBlendedAnimation *,
                           0);

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

void SkeletonBlendedAnimationBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new MFUnrecSkeletonAnimationPtr::Description(
        MFUnrecSkeletonAnimationPtr::getClassType(),
        "SkeletonAnimations",
        "",
        SkeletonAnimationsFieldId, SkeletonAnimationsFieldMask,
        false,
        (Field::MFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&SkeletonBlendedAnimation::editHandleSkeletonAnimations),
        static_cast<FieldGetMethodSig >(&SkeletonBlendedAnimation::getHandleSkeletonAnimations));

    oType.addInitialDesc(pDesc);

    pDesc = new MFReal32::Description(
        MFReal32::getClassType(),
        "BlendAmounts",
        "",
        BlendAmountsFieldId, BlendAmountsFieldMask,
        false,
        (Field::MFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&SkeletonBlendedAnimation::editHandleBlendAmounts),
        static_cast<FieldGetMethodSig >(&SkeletonBlendedAnimation::getHandleBlendAmounts));

    oType.addInitialDesc(pDesc);

    pDesc = new MFUInt8::Description(
        MFUInt8::getClassType(),
        "OverrideStatuses",
        "",
        OverrideStatusesFieldId, OverrideStatusesFieldMask,
        false,
        (Field::MFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&SkeletonBlendedAnimation::editHandleOverrideStatuses),
        static_cast<FieldGetMethodSig >(&SkeletonBlendedAnimation::getHandleOverrideStatuses));

    oType.addInitialDesc(pDesc);
}


SkeletonBlendedAnimationBase::TypeObject SkeletonBlendedAnimationBase::_type(
    SkeletonBlendedAnimationBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    0,
    reinterpret_cast<PrototypeCreateF>(&SkeletonBlendedAnimationBase::createEmptyLocal),
    SkeletonBlendedAnimation::initMethod,
    SkeletonBlendedAnimation::exitMethod,
    reinterpret_cast<InitalInsertDescFunc>(&SkeletonBlendedAnimation::classDescInserter),
    false,
    0,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "\tname=\"SkeletonBlendedAnimation\"\n"
    "\tparent=\"Animation\"\n"
    "    library=\"Dynamics\"\n"
    "\tpointerfieldtypes=\"both\"\n"
    "\tstructure=\"concrete\"\n"
    "\tsystemcomponent=\"true\"\n"
    "\tparentsystemcomponent=\"true\"\n"
    "\tdecoratable=\"false\"\n"
    "    isNodeCore=\"false\"\n"
    "    authors=\"David Kabala (djkabala@gmail.com), David Naylor               \"\n"
    ">\n"
    "\t<Field\n"
    "\t\tname=\"SkeletonAnimations\"\n"
    "\t\ttype=\"SkeletonAnimation\"\n"
    "        category=\"pointer\"\n"
    "\t\tcardinality=\"multi\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"protected\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"BlendAmounts\"\n"
    "\t\ttype=\"Real32\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"multi\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"protected\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"OverrideStatuses\"\n"
    "\t\ttype=\"UInt8\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"multi\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"protected\"\n"
    "\t>\n"
    "\t</Field>\n"
    "</FieldContainer>\n",
    ""
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &SkeletonBlendedAnimationBase::getType(void)
{
    return _type;
}

const FieldContainerType &SkeletonBlendedAnimationBase::getType(void) const
{
    return _type;
}

UInt32 SkeletonBlendedAnimationBase::getContainerSize(void) const
{
    return sizeof(SkeletonBlendedAnimation);
}

/*------------------------- decorator get ------------------------------*/


//! Get the SkeletonBlendedAnimation::_mfSkeletonAnimations field.
const MFUnrecSkeletonAnimationPtr *SkeletonBlendedAnimationBase::getMFSkeletonAnimations(void) const
{
    return &_mfSkeletonAnimations;
}

MFUnrecSkeletonAnimationPtr *SkeletonBlendedAnimationBase::editMFSkeletonAnimations(void)
{
    editMField(SkeletonAnimationsFieldMask, _mfSkeletonAnimations);

    return &_mfSkeletonAnimations;
}

MFReal32 *SkeletonBlendedAnimationBase::editMFBlendAmounts(void)
{
    editMField(BlendAmountsFieldMask, _mfBlendAmounts);

    return &_mfBlendAmounts;
}

const MFReal32 *SkeletonBlendedAnimationBase::getMFBlendAmounts(void) const
{
    return &_mfBlendAmounts;
}


MFUInt8 *SkeletonBlendedAnimationBase::editMFOverrideStatuses(void)
{
    editMField(OverrideStatusesFieldMask, _mfOverrideStatuses);

    return &_mfOverrideStatuses;
}

const MFUInt8 *SkeletonBlendedAnimationBase::getMFOverrideStatuses(void) const
{
    return &_mfOverrideStatuses;
}




void SkeletonBlendedAnimationBase::pushToSkeletonAnimations(SkeletonAnimation * const value)
{
    editMField(SkeletonAnimationsFieldMask, _mfSkeletonAnimations);

    _mfSkeletonAnimations.push_back(value);
}

void SkeletonBlendedAnimationBase::assignSkeletonAnimations(const MFUnrecSkeletonAnimationPtr &value)
{
    MFUnrecSkeletonAnimationPtr::const_iterator elemIt  =
        value.begin();
    MFUnrecSkeletonAnimationPtr::const_iterator elemEnd =
        value.end  ();

    static_cast<SkeletonBlendedAnimation *>(this)->clearSkeletonAnimations();

    while(elemIt != elemEnd)
    {
        this->pushToSkeletonAnimations(*elemIt);

        ++elemIt;
    }
}

void SkeletonBlendedAnimationBase::removeFromSkeletonAnimations(UInt32 uiIndex)
{
    if(uiIndex < _mfSkeletonAnimations.size())
    {
        editMField(SkeletonAnimationsFieldMask, _mfSkeletonAnimations);

        _mfSkeletonAnimations.erase(uiIndex);
    }
}

void SkeletonBlendedAnimationBase::removeObjFromSkeletonAnimations(SkeletonAnimation * const value)
{
    Int32 iElemIdx = _mfSkeletonAnimations.findIndex(value);

    if(iElemIdx != -1)
    {
        editMField(SkeletonAnimationsFieldMask, _mfSkeletonAnimations);

        _mfSkeletonAnimations.erase(iElemIdx);
    }
}
void SkeletonBlendedAnimationBase::clearSkeletonAnimations(void)
{
    editMField(SkeletonAnimationsFieldMask, _mfSkeletonAnimations);


    _mfSkeletonAnimations.clear();
}



/*------------------------------ access -----------------------------------*/

UInt32 SkeletonBlendedAnimationBase::getBinSize(ConstFieldMaskArg whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (SkeletonAnimationsFieldMask & whichField))
    {
        returnValue += _mfSkeletonAnimations.getBinSize();
    }
    if(FieldBits::NoField != (BlendAmountsFieldMask & whichField))
    {
        returnValue += _mfBlendAmounts.getBinSize();
    }
    if(FieldBits::NoField != (OverrideStatusesFieldMask & whichField))
    {
        returnValue += _mfOverrideStatuses.getBinSize();
    }

    return returnValue;
}

void SkeletonBlendedAnimationBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (SkeletonAnimationsFieldMask & whichField))
    {
        _mfSkeletonAnimations.copyToBin(pMem);
    }
    if(FieldBits::NoField != (BlendAmountsFieldMask & whichField))
    {
        _mfBlendAmounts.copyToBin(pMem);
    }
    if(FieldBits::NoField != (OverrideStatusesFieldMask & whichField))
    {
        _mfOverrideStatuses.copyToBin(pMem);
    }
}

void SkeletonBlendedAnimationBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (SkeletonAnimationsFieldMask & whichField))
    {
        _mfSkeletonAnimations.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (BlendAmountsFieldMask & whichField))
    {
        _mfBlendAmounts.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (OverrideStatusesFieldMask & whichField))
    {
        _mfOverrideStatuses.copyFromBin(pMem);
    }
}

//! create a new instance of the class
SkeletonBlendedAnimationTransitPtr SkeletonBlendedAnimationBase::createLocal(BitVector bFlags)
{
    SkeletonBlendedAnimationTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyLocal(bFlags);

        fc = dynamic_pointer_cast<SkeletonBlendedAnimation>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class, copy the container flags
SkeletonBlendedAnimationTransitPtr SkeletonBlendedAnimationBase::createDependent(BitVector bFlags)
{
    SkeletonBlendedAnimationTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyDependent(bFlags);

        fc = dynamic_pointer_cast<SkeletonBlendedAnimation>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class
SkeletonBlendedAnimationTransitPtr SkeletonBlendedAnimationBase::create(void)
{
    SkeletonBlendedAnimationTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopy();

        fc = dynamic_pointer_cast<SkeletonBlendedAnimation>(tmpPtr);
    }

    return fc;
}

SkeletonBlendedAnimation *SkeletonBlendedAnimationBase::createEmptyLocal(BitVector bFlags)
{
    SkeletonBlendedAnimation *returnValue;

    newPtr<SkeletonBlendedAnimation>(returnValue, bFlags);

    returnValue->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

//! create an empty new instance of the class, do not copy the prototype
SkeletonBlendedAnimation *SkeletonBlendedAnimationBase::createEmpty(void)
{
    SkeletonBlendedAnimation *returnValue;

    newPtr<SkeletonBlendedAnimation>(returnValue, Thread::getCurrentLocalFlags());

    returnValue->_pFieldFlags->_bNamespaceMask &=
        ~Thread::getCurrentLocalFlags();

    return returnValue;
}


FieldContainerTransitPtr SkeletonBlendedAnimationBase::shallowCopyLocal(
    BitVector bFlags) const
{
    SkeletonBlendedAnimation *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const SkeletonBlendedAnimation *>(this), bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

FieldContainerTransitPtr SkeletonBlendedAnimationBase::shallowCopyDependent(
    BitVector bFlags) const
{
    SkeletonBlendedAnimation *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const SkeletonBlendedAnimation *>(this), ~bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask = bFlags;

    return returnValue;
}

FieldContainerTransitPtr SkeletonBlendedAnimationBase::shallowCopy(void) const
{
    SkeletonBlendedAnimation *tmpPtr;

    newPtr(tmpPtr,
           dynamic_cast<const SkeletonBlendedAnimation *>(this),
           Thread::getCurrentLocalFlags());

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~Thread::getCurrentLocalFlags();

    FieldContainerTransitPtr returnValue(tmpPtr);

    return returnValue;
}




/*------------------------- constructors ----------------------------------*/

SkeletonBlendedAnimationBase::SkeletonBlendedAnimationBase(void) :
    Inherited(),
    _mfSkeletonAnimations     (),
    _mfBlendAmounts           (),
    _mfOverrideStatuses       ()
{
}

SkeletonBlendedAnimationBase::SkeletonBlendedAnimationBase(const SkeletonBlendedAnimationBase &source) :
    Inherited(source),
    _mfSkeletonAnimations     (),
    _mfBlendAmounts           (source._mfBlendAmounts           ),
    _mfOverrideStatuses       (source._mfOverrideStatuses       )
{
}


/*-------------------------- destructors ----------------------------------*/

SkeletonBlendedAnimationBase::~SkeletonBlendedAnimationBase(void)
{
}

void SkeletonBlendedAnimationBase::onCreate(const SkeletonBlendedAnimation *source)
{
    Inherited::onCreate(source);

    if(source != NULL)
    {
        SkeletonBlendedAnimation *pThis = static_cast<SkeletonBlendedAnimation *>(this);

        MFUnrecSkeletonAnimationPtr::const_iterator SkeletonAnimationsIt  =
            source->_mfSkeletonAnimations.begin();
        MFUnrecSkeletonAnimationPtr::const_iterator SkeletonAnimationsEnd =
            source->_mfSkeletonAnimations.end  ();

        while(SkeletonAnimationsIt != SkeletonAnimationsEnd)
        {
            pThis->pushToSkeletonAnimations(*SkeletonAnimationsIt);

            ++SkeletonAnimationsIt;
        }
    }
}

GetFieldHandlePtr SkeletonBlendedAnimationBase::getHandleSkeletonAnimations (void) const
{
    MFUnrecSkeletonAnimationPtr::GetHandlePtr returnValue(
        new  MFUnrecSkeletonAnimationPtr::GetHandle(
             &_mfSkeletonAnimations,
             this->getType().getFieldDesc(SkeletonAnimationsFieldId),
             const_cast<SkeletonBlendedAnimationBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr SkeletonBlendedAnimationBase::editHandleSkeletonAnimations(void)
{
    MFUnrecSkeletonAnimationPtr::EditHandlePtr returnValue(
        new  MFUnrecSkeletonAnimationPtr::EditHandle(
             &_mfSkeletonAnimations,
             this->getType().getFieldDesc(SkeletonAnimationsFieldId),
             this));

    returnValue->setAddMethod(
        boost::bind(&SkeletonBlendedAnimation::pushToSkeletonAnimations,
                    static_cast<SkeletonBlendedAnimation *>(this), _1));
    returnValue->setRemoveMethod(
        boost::bind(&SkeletonBlendedAnimation::removeFromSkeletonAnimations,
                    static_cast<SkeletonBlendedAnimation *>(this), _1));
    returnValue->setRemoveObjMethod(
        boost::bind(&SkeletonBlendedAnimation::removeObjFromSkeletonAnimations,
                    static_cast<SkeletonBlendedAnimation *>(this), _1));
    returnValue->setClearMethod(
        boost::bind(&SkeletonBlendedAnimation::clearSkeletonAnimations,
                    static_cast<SkeletonBlendedAnimation *>(this)));

    editMField(SkeletonAnimationsFieldMask, _mfSkeletonAnimations);

    return returnValue;
}

GetFieldHandlePtr SkeletonBlendedAnimationBase::getHandleBlendAmounts    (void) const
{
    MFReal32::GetHandlePtr returnValue(
        new  MFReal32::GetHandle(
             &_mfBlendAmounts,
             this->getType().getFieldDesc(BlendAmountsFieldId),
             const_cast<SkeletonBlendedAnimationBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr SkeletonBlendedAnimationBase::editHandleBlendAmounts   (void)
{
    MFReal32::EditHandlePtr returnValue(
        new  MFReal32::EditHandle(
             &_mfBlendAmounts,
             this->getType().getFieldDesc(BlendAmountsFieldId),
             this));


    editMField(BlendAmountsFieldMask, _mfBlendAmounts);

    return returnValue;
}

GetFieldHandlePtr SkeletonBlendedAnimationBase::getHandleOverrideStatuses (void) const
{
    MFUInt8::GetHandlePtr returnValue(
        new  MFUInt8::GetHandle(
             &_mfOverrideStatuses,
             this->getType().getFieldDesc(OverrideStatusesFieldId),
             const_cast<SkeletonBlendedAnimationBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr SkeletonBlendedAnimationBase::editHandleOverrideStatuses(void)
{
    MFUInt8::EditHandlePtr returnValue(
        new  MFUInt8::EditHandle(
             &_mfOverrideStatuses,
             this->getType().getFieldDesc(OverrideStatusesFieldId),
             this));


    editMField(OverrideStatusesFieldMask, _mfOverrideStatuses);

    return returnValue;
}


#ifdef OSG_MT_CPTR_ASPECT
void SkeletonBlendedAnimationBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    SkeletonBlendedAnimation *pThis = static_cast<SkeletonBlendedAnimation *>(this);

    pThis->execSync(static_cast<SkeletonBlendedAnimation *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif


#ifdef OSG_MT_CPTR_ASPECT
FieldContainer *SkeletonBlendedAnimationBase::createAspectCopy(
    const FieldContainer *pRefAspect) const
{
    SkeletonBlendedAnimation *returnValue;

    newAspectCopy(returnValue,
                  dynamic_cast<const SkeletonBlendedAnimation *>(pRefAspect),
                  dynamic_cast<const SkeletonBlendedAnimation *>(this));

    return returnValue;
}
#endif

void SkeletonBlendedAnimationBase::resolveLinks(void)
{
    Inherited::resolveLinks();

    static_cast<SkeletonBlendedAnimation *>(this)->clearSkeletonAnimations();

#ifdef OSG_MT_CPTR_ASPECT
    AspectOffsetStore oOffsets;

    _pAspectStore->fillOffsetArray(oOffsets, this);
#endif

#ifdef OSG_MT_CPTR_ASPECT
    _mfBlendAmounts.terminateShare(Thread::getCurrentAspect(),
                                      oOffsets);
#endif
#ifdef OSG_MT_CPTR_ASPECT
    _mfOverrideStatuses.terminateShare(Thread::getCurrentAspect(),
                                      oOffsets);
#endif
}


OSG_END_NAMESPACE
