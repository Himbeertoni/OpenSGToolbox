/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact:  David Kabala (djkabala@gmail.com), David Naylor               *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class SkeletonBlendedGeometry!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>
#include <boost/assign/list_of.hpp>

#include "OSGConfig.h"



#include "OSGGeometry.h"                // BaseGeometry Class
#include "OSGGeoIntegralProperty.h"     // InternalWeightIndexes Class
#include "OSGGeoVectorProperty.h"       // InternalWeights Class
#include "OSGJoint.h"                   // InternalJoints Class

#include "OSGSkeletonBlendedGeometryBase.h"
#include "OSGSkeletonBlendedGeometry.h"

#include <boost/bind.hpp>

#include "OSGEvent.h"

#ifdef WIN32 // turn off 'this' : used in base member initializer list warning
#pragma warning(disable:4355)
#endif

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::SkeletonBlendedGeometry
    
 */

/***************************************************************************\
 *                        Field Documentation                              *
\***************************************************************************/

/*! \var Geometry *      SkeletonBlendedGeometryBase::_sfBaseGeometry
    
*/

/*! \var GeoIntegralProperty * SkeletonBlendedGeometryBase::_sfInternalWeightIndexes
    
*/

/*! \var GeoVectorProperty * SkeletonBlendedGeometryBase::_sfInternalWeights
    
*/

/*! \var UInt32          SkeletonBlendedGeometryBase::_sfBlendMode
    
*/

/*! \var Joint *         SkeletonBlendedGeometryBase::_mfInternalJoints
    
*/

/*! \var Matrix          SkeletonBlendedGeometryBase::_mfInternalJointBindTransformations
    
*/

/*! \var Matrix          SkeletonBlendedGeometryBase::_mfInternalJointInvBindTransformations
    
*/

/*! \var Matrix          SkeletonBlendedGeometryBase::_sfBindTransformation
    
*/


/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldTraits<SkeletonBlendedGeometry *>::_type("SkeletonBlendedGeometryPtr", "GeometryPtr");
#endif

OSG_FIELDTRAITS_GETTYPE(SkeletonBlendedGeometry *)

OSG_EXPORT_PTR_SFIELD_FULL(PointerSField,
                           SkeletonBlendedGeometry *,
                           0);

OSG_EXPORT_PTR_MFIELD_FULL(PointerMField,
                           SkeletonBlendedGeometry *,
                           0);

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

void SkeletonBlendedGeometryBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new SFUnrecGeometryPtr::Description(
        SFUnrecGeometryPtr::getClassType(),
        "BaseGeometry",
        "",
        BaseGeometryFieldId, BaseGeometryFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&SkeletonBlendedGeometry::editHandleBaseGeometry),
        static_cast<FieldGetMethodSig >(&SkeletonBlendedGeometry::getHandleBaseGeometry));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecChildGeoIntegralPropertyPtr::Description(
        SFUnrecChildGeoIntegralPropertyPtr::getClassType(),
        "InternalWeightIndexes",
        "",
        InternalWeightIndexesFieldId, InternalWeightIndexesFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&SkeletonBlendedGeometry::editHandleInternalWeightIndexes),
        static_cast<FieldGetMethodSig >(&SkeletonBlendedGeometry::getHandleInternalWeightIndexes));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecChildGeoVectorPropertyPtr::Description(
        SFUnrecChildGeoVectorPropertyPtr::getClassType(),
        "InternalWeights",
        "",
        InternalWeightsFieldId, InternalWeightsFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&SkeletonBlendedGeometry::editHandleInternalWeights),
        static_cast<FieldGetMethodSig >(&SkeletonBlendedGeometry::getHandleInternalWeights));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUInt32::Description(
        SFUInt32::getClassType(),
        "BlendMode",
        "",
        BlendModeFieldId, BlendModeFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&SkeletonBlendedGeometry::editHandleBlendMode),
        static_cast<FieldGetMethodSig >(&SkeletonBlendedGeometry::getHandleBlendMode));

    oType.addInitialDesc(pDesc);

    pDesc = new MFUnrecJointPtr::Description(
        MFUnrecJointPtr::getClassType(),
        "InternalJoints",
        "",
        InternalJointsFieldId, InternalJointsFieldMask,
        false,
        (Field::MFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&SkeletonBlendedGeometry::editHandleInternalJoints),
        static_cast<FieldGetMethodSig >(&SkeletonBlendedGeometry::getHandleInternalJoints));

    oType.addInitialDesc(pDesc);

    pDesc = new MFMatrix::Description(
        MFMatrix::getClassType(),
        "InternalJointBindTransformations",
        "",
        InternalJointBindTransformationsFieldId, InternalJointBindTransformationsFieldMask,
        false,
        (Field::MFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&SkeletonBlendedGeometry::editHandleInternalJointBindTransformations),
        static_cast<FieldGetMethodSig >(&SkeletonBlendedGeometry::getHandleInternalJointBindTransformations));

    oType.addInitialDesc(pDesc);

    pDesc = new MFMatrix::Description(
        MFMatrix::getClassType(),
        "InternalJointInvBindTransformations",
        "",
        InternalJointInvBindTransformationsFieldId, InternalJointInvBindTransformationsFieldMask,
        false,
        (Field::MFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&SkeletonBlendedGeometry::editHandleInternalJointInvBindTransformations),
        static_cast<FieldGetMethodSig >(&SkeletonBlendedGeometry::getHandleInternalJointInvBindTransformations));

    oType.addInitialDesc(pDesc);

    pDesc = new SFMatrix::Description(
        SFMatrix::getClassType(),
        "BindTransformation",
        "",
        BindTransformationFieldId, BindTransformationFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&SkeletonBlendedGeometry::editHandleBindTransformation),
        static_cast<FieldGetMethodSig >(&SkeletonBlendedGeometry::getHandleBindTransformation));

    oType.addInitialDesc(pDesc);
    pDesc = new SFEventProducerPtr::Description(
        SFEventProducerPtr::getClassType(),
        "EventProducer",
        "Event Producer",
        EventProducerFieldId,EventProducerFieldMask,
        true,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast     <FieldEditMethodSig>(&SkeletonBlendedGeometry::editHandleEventProducer),
        static_cast     <FieldGetMethodSig >(&SkeletonBlendedGeometry::getHandleEventProducer));

    oType.addInitialDesc(pDesc);
}


SkeletonBlendedGeometryBase::TypeObject SkeletonBlendedGeometryBase::_type(
    SkeletonBlendedGeometryBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    0,
    reinterpret_cast<PrototypeCreateF>(&SkeletonBlendedGeometryBase::createEmptyLocal),
    SkeletonBlendedGeometry::initMethod,
    SkeletonBlendedGeometry::exitMethod,
    reinterpret_cast<InitalInsertDescFunc>(&SkeletonBlendedGeometry::classDescInserter),
    false,
    0,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "\tname=\"SkeletonBlendedGeometry\"\n"
    "\tparent=\"Geometry\"\n"
    "    library=\"TBAnimation\"\n"
    "\tpointerfieldtypes=\"both\"\n"
    "\tstructure=\"concrete\"\n"
    "\tsystemcomponent=\"true\"\n"
    "\tparentsystemcomponent=\"true\"\n"
    "\tdecoratable=\"false\"\n"
    "    isNodeCore=\"false\"\n"
    "    authors=\"David Kabala (djkabala@gmail.com), David Naylor               \"\n"
    ">\n"
    "\t<Field\n"
    "\t\tname=\"BaseGeometry\"\n"
    "\t\ttype=\"Geometry\"\n"
    "        category=\"pointer\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"InternalWeightIndexes\"\n"
    "\t\ttype=\"GeoIntegralProperty\"\n"
    "        category=\"childpointer\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"protected\"\n"
    "\t\tchildParentType=\"FieldContainer\"\n"
    "\t\tlinkParentField=\"Parents\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"InternalWeights\"\n"
    "\t\ttype=\"GeoVectorProperty\"\n"
    "        category=\"childpointer\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t\tchildParentType=\"FieldContainer\"\n"
    "\t\tlinkParentField=\"Parents\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"BlendMode\"\n"
    "\t\ttype=\"UInt32\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"InternalJoints\"\n"
    "\t\ttype=\"Joint\"\n"
    "        category=\"pointer\"\n"
    "\t\tcardinality=\"multi\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"protected\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"InternalJointBindTransformations\"\n"
    "\t\ttype=\"Matrix\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"multi\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"protected\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"InternalJointInvBindTransformations\"\n"
    "\t\ttype=\"Matrix\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"multi\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"protected\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"BindTransformation\"\n"
    "\t\ttype=\"Matrix\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"protected\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<ProducedMethod\n"
    "\t\tname=\"SkeletonChanged\"\n"
    "\t\ttype=\"SkeletonEvent\"\n"
    "\t>\n"
    "\t</ProducedMethod>\n"
    "</FieldContainer>\n",
    ""
    );

//! SkeletonBlendedGeometry Produced Methods

MethodDescription *SkeletonBlendedGeometryBase::_methodDesc[] =
{
    new MethodDescription("SkeletonChanged", 
                    "",
                     SkeletonChangedMethodId, 
                     SFUnrecEventPtr::getClassType(),
                     FunctorAccessMethod())
};

EventProducerType SkeletonBlendedGeometryBase::_producerType(
    "SkeletonBlendedGeometryProducerType",
    "EventProducerType",
    "",
    InitEventProducerFunctor(),
    _methodDesc,
    sizeof(_methodDesc));

/*------------------------------ get -----------------------------------*/

FieldContainerType &SkeletonBlendedGeometryBase::getType(void)
{
    return _type;
}

const FieldContainerType &SkeletonBlendedGeometryBase::getType(void) const
{
    return _type;
}

const EventProducerType &SkeletonBlendedGeometryBase::getProducerType(void) const
{
    return _producerType;
}

UInt32 SkeletonBlendedGeometryBase::getContainerSize(void) const
{
    return sizeof(SkeletonBlendedGeometry);
}

/*------------------------- decorator get ------------------------------*/


//! Get the SkeletonBlendedGeometry::_sfBaseGeometry field.
const SFUnrecGeometryPtr *SkeletonBlendedGeometryBase::getSFBaseGeometry(void) const
{
    return &_sfBaseGeometry;
}

SFUnrecGeometryPtr  *SkeletonBlendedGeometryBase::editSFBaseGeometry   (void)
{
    editSField(BaseGeometryFieldMask);

    return &_sfBaseGeometry;
}

//! Get the SkeletonBlendedGeometry::_sfInternalWeightIndexes field.
const SFUnrecChildGeoIntegralPropertyPtr *SkeletonBlendedGeometryBase::getSFInternalWeightIndexes(void) const
{
    return &_sfInternalWeightIndexes;
}

SFUnrecChildGeoIntegralPropertyPtr *SkeletonBlendedGeometryBase::editSFInternalWeightIndexes(void)
{
    editSField(InternalWeightIndexesFieldMask);

    return &_sfInternalWeightIndexes;
}

//! Get the SkeletonBlendedGeometry::_sfInternalWeights field.
const SFUnrecChildGeoVectorPropertyPtr *SkeletonBlendedGeometryBase::getSFInternalWeights(void) const
{
    return &_sfInternalWeights;
}

SFUnrecChildGeoVectorPropertyPtr *SkeletonBlendedGeometryBase::editSFInternalWeights(void)
{
    editSField(InternalWeightsFieldMask);

    return &_sfInternalWeights;
}

SFUInt32 *SkeletonBlendedGeometryBase::editSFBlendMode(void)
{
    editSField(BlendModeFieldMask);

    return &_sfBlendMode;
}

const SFUInt32 *SkeletonBlendedGeometryBase::getSFBlendMode(void) const
{
    return &_sfBlendMode;
}


//! Get the SkeletonBlendedGeometry::_mfInternalJoints field.
const MFUnrecJointPtr *SkeletonBlendedGeometryBase::getMFInternalJoints(void) const
{
    return &_mfInternalJoints;
}

MFUnrecJointPtr     *SkeletonBlendedGeometryBase::editMFInternalJoints (void)
{
    editMField(InternalJointsFieldMask, _mfInternalJoints);

    return &_mfInternalJoints;
}

MFMatrix *SkeletonBlendedGeometryBase::editMFInternalJointBindTransformations(void)
{
    editMField(InternalJointBindTransformationsFieldMask, _mfInternalJointBindTransformations);

    return &_mfInternalJointBindTransformations;
}

const MFMatrix *SkeletonBlendedGeometryBase::getMFInternalJointBindTransformations(void) const
{
    return &_mfInternalJointBindTransformations;
}


MFMatrix *SkeletonBlendedGeometryBase::editMFInternalJointInvBindTransformations(void)
{
    editMField(InternalJointInvBindTransformationsFieldMask, _mfInternalJointInvBindTransformations);

    return &_mfInternalJointInvBindTransformations;
}

const MFMatrix *SkeletonBlendedGeometryBase::getMFInternalJointInvBindTransformations(void) const
{
    return &_mfInternalJointInvBindTransformations;
}


SFMatrix *SkeletonBlendedGeometryBase::editSFBindTransformation(void)
{
    editSField(BindTransformationFieldMask);

    return &_sfBindTransformation;
}

const SFMatrix *SkeletonBlendedGeometryBase::getSFBindTransformation(void) const
{
    return &_sfBindTransformation;
}




void SkeletonBlendedGeometryBase::pushToInternalJoints(Joint * const value)
{
    editMField(InternalJointsFieldMask, _mfInternalJoints);

    _mfInternalJoints.push_back(value);
}

void SkeletonBlendedGeometryBase::assignInternalJoints(const MFUnrecJointPtr   &value)
{
    MFUnrecJointPtr  ::const_iterator elemIt  =
        value.begin();
    MFUnrecJointPtr  ::const_iterator elemEnd =
        value.end  ();

    static_cast<SkeletonBlendedGeometry *>(this)->clearInternalJoints();

    while(elemIt != elemEnd)
    {
        this->pushToInternalJoints(*elemIt);

        ++elemIt;
    }
}

void SkeletonBlendedGeometryBase::removeFromInternalJoints(UInt32 uiIndex)
{
    if(uiIndex < _mfInternalJoints.size())
    {
        editMField(InternalJointsFieldMask, _mfInternalJoints);

        _mfInternalJoints.erase(uiIndex);
    }
}

void SkeletonBlendedGeometryBase::removeObjFromInternalJoints(Joint * const value)
{
    Int32 iElemIdx = _mfInternalJoints.findIndex(value);

    if(iElemIdx != -1)
    {
        editMField(InternalJointsFieldMask, _mfInternalJoints);

        _mfInternalJoints.erase(iElemIdx);
    }
}
void SkeletonBlendedGeometryBase::clearInternalJoints(void)
{
    editMField(InternalJointsFieldMask, _mfInternalJoints);


    _mfInternalJoints.clear();
}



/*------------------------------ access -----------------------------------*/

UInt32 SkeletonBlendedGeometryBase::getBinSize(ConstFieldMaskArg whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (BaseGeometryFieldMask & whichField))
    {
        returnValue += _sfBaseGeometry.getBinSize();
    }
    if(FieldBits::NoField != (InternalWeightIndexesFieldMask & whichField))
    {
        returnValue += _sfInternalWeightIndexes.getBinSize();
    }
    if(FieldBits::NoField != (InternalWeightsFieldMask & whichField))
    {
        returnValue += _sfInternalWeights.getBinSize();
    }
    if(FieldBits::NoField != (BlendModeFieldMask & whichField))
    {
        returnValue += _sfBlendMode.getBinSize();
    }
    if(FieldBits::NoField != (InternalJointsFieldMask & whichField))
    {
        returnValue += _mfInternalJoints.getBinSize();
    }
    if(FieldBits::NoField != (InternalJointBindTransformationsFieldMask & whichField))
    {
        returnValue += _mfInternalJointBindTransformations.getBinSize();
    }
    if(FieldBits::NoField != (InternalJointInvBindTransformationsFieldMask & whichField))
    {
        returnValue += _mfInternalJointInvBindTransformations.getBinSize();
    }
    if(FieldBits::NoField != (BindTransformationFieldMask & whichField))
    {
        returnValue += _sfBindTransformation.getBinSize();
    }
    if(FieldBits::NoField != (EventProducerFieldMask & whichField))
    {
        returnValue += _sfEventProducer.getBinSize();
    }

    return returnValue;
}

void SkeletonBlendedGeometryBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (BaseGeometryFieldMask & whichField))
    {
        _sfBaseGeometry.copyToBin(pMem);
    }
    if(FieldBits::NoField != (InternalWeightIndexesFieldMask & whichField))
    {
        _sfInternalWeightIndexes.copyToBin(pMem);
    }
    if(FieldBits::NoField != (InternalWeightsFieldMask & whichField))
    {
        _sfInternalWeights.copyToBin(pMem);
    }
    if(FieldBits::NoField != (BlendModeFieldMask & whichField))
    {
        _sfBlendMode.copyToBin(pMem);
    }
    if(FieldBits::NoField != (InternalJointsFieldMask & whichField))
    {
        _mfInternalJoints.copyToBin(pMem);
    }
    if(FieldBits::NoField != (InternalJointBindTransformationsFieldMask & whichField))
    {
        _mfInternalJointBindTransformations.copyToBin(pMem);
    }
    if(FieldBits::NoField != (InternalJointInvBindTransformationsFieldMask & whichField))
    {
        _mfInternalJointInvBindTransformations.copyToBin(pMem);
    }
    if(FieldBits::NoField != (BindTransformationFieldMask & whichField))
    {
        _sfBindTransformation.copyToBin(pMem);
    }
    if(FieldBits::NoField != (EventProducerFieldMask & whichField))
    {
        _sfEventProducer.copyToBin(pMem);
    }
}

void SkeletonBlendedGeometryBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (BaseGeometryFieldMask & whichField))
    {
        _sfBaseGeometry.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (InternalWeightIndexesFieldMask & whichField))
    {
        _sfInternalWeightIndexes.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (InternalWeightsFieldMask & whichField))
    {
        _sfInternalWeights.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (BlendModeFieldMask & whichField))
    {
        _sfBlendMode.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (InternalJointsFieldMask & whichField))
    {
        _mfInternalJoints.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (InternalJointBindTransformationsFieldMask & whichField))
    {
        _mfInternalJointBindTransformations.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (InternalJointInvBindTransformationsFieldMask & whichField))
    {
        _mfInternalJointInvBindTransformations.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (BindTransformationFieldMask & whichField))
    {
        _sfBindTransformation.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (EventProducerFieldMask & whichField))
    {
        _sfEventProducer.copyFromBin(pMem);
    }
}

//! create a new instance of the class
SkeletonBlendedGeometryTransitPtr SkeletonBlendedGeometryBase::createLocal(BitVector bFlags)
{
    SkeletonBlendedGeometryTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyLocal(bFlags);

        fc = dynamic_pointer_cast<SkeletonBlendedGeometry>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class, copy the container flags
SkeletonBlendedGeometryTransitPtr SkeletonBlendedGeometryBase::createDependent(BitVector bFlags)
{
    SkeletonBlendedGeometryTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyDependent(bFlags);

        fc = dynamic_pointer_cast<SkeletonBlendedGeometry>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class
SkeletonBlendedGeometryTransitPtr SkeletonBlendedGeometryBase::create(void)
{
    SkeletonBlendedGeometryTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopy();

        fc = dynamic_pointer_cast<SkeletonBlendedGeometry>(tmpPtr);
    }

    return fc;
}

SkeletonBlendedGeometry *SkeletonBlendedGeometryBase::createEmptyLocal(BitVector bFlags)
{
    SkeletonBlendedGeometry *returnValue;

    newPtr<SkeletonBlendedGeometry>(returnValue, bFlags);

    returnValue->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

//! create an empty new instance of the class, do not copy the prototype
SkeletonBlendedGeometry *SkeletonBlendedGeometryBase::createEmpty(void)
{
    SkeletonBlendedGeometry *returnValue;

    newPtr<SkeletonBlendedGeometry>(returnValue, Thread::getCurrentLocalFlags());

    returnValue->_pFieldFlags->_bNamespaceMask &=
        ~Thread::getCurrentLocalFlags();

    return returnValue;
}


FieldContainerTransitPtr SkeletonBlendedGeometryBase::shallowCopyLocal(
    BitVector bFlags) const
{
    SkeletonBlendedGeometry *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const SkeletonBlendedGeometry *>(this), bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

FieldContainerTransitPtr SkeletonBlendedGeometryBase::shallowCopyDependent(
    BitVector bFlags) const
{
    SkeletonBlendedGeometry *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const SkeletonBlendedGeometry *>(this), ~bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask = bFlags;

    return returnValue;
}

FieldContainerTransitPtr SkeletonBlendedGeometryBase::shallowCopy(void) const
{
    SkeletonBlendedGeometry *tmpPtr;

    newPtr(tmpPtr,
           dynamic_cast<const SkeletonBlendedGeometry *>(this),
           Thread::getCurrentLocalFlags());

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~Thread::getCurrentLocalFlags();

    FieldContainerTransitPtr returnValue(tmpPtr);

    return returnValue;
}




/*------------------------- constructors ----------------------------------*/

SkeletonBlendedGeometryBase::SkeletonBlendedGeometryBase(void) :
    _Producer(&getProducerType()),
    Inherited(),
    _sfBaseGeometry           (NULL),
    _sfInternalWeightIndexes  (this,
                          InternalWeightIndexesFieldId,
                          GeoIntegralProperty::ParentsFieldId),
    _sfInternalWeights        (this,
                          InternalWeightsFieldId,
                          GeoVectorProperty::ParentsFieldId),
    _sfBlendMode              (),
    _mfInternalJoints         (),
    _mfInternalJointBindTransformations(),
    _mfInternalJointInvBindTransformations(),
    _sfBindTransformation     ()
    ,_sfEventProducer(&_Producer)
{
}

SkeletonBlendedGeometryBase::SkeletonBlendedGeometryBase(const SkeletonBlendedGeometryBase &source) :
    _Producer(&source.getProducerType()),
    Inherited(source),
    _sfBaseGeometry           (NULL),
    _sfInternalWeightIndexes  (this,
                          InternalWeightIndexesFieldId,
                          GeoIntegralProperty::ParentsFieldId),
    _sfInternalWeights        (this,
                          InternalWeightsFieldId,
                          GeoVectorProperty::ParentsFieldId),
    _sfBlendMode              (source._sfBlendMode              ),
    _mfInternalJoints         (),
    _mfInternalJointBindTransformations(source._mfInternalJointBindTransformations),
    _mfInternalJointInvBindTransformations(source._mfInternalJointInvBindTransformations),
    _sfBindTransformation     (source._sfBindTransformation     )
    ,_sfEventProducer(&_Producer)
{
}


/*-------------------------- destructors ----------------------------------*/

SkeletonBlendedGeometryBase::~SkeletonBlendedGeometryBase(void)
{
}

/*-------------------------------------------------------------------------*/
/* Child linking                                                           */

bool SkeletonBlendedGeometryBase::unlinkChild(
    FieldContainer * const pChild,
    UInt16           const childFieldId)
{
    if(childFieldId == InternalWeightIndexesFieldId)
    {
        GeoIntegralProperty * pTypedChild =
            dynamic_cast<GeoIntegralProperty *>(pChild);

        if(pTypedChild != NULL)
        {
            if(pTypedChild == _sfInternalWeightIndexes.getValue())
            {
                editSField(InternalWeightIndexesFieldMask);

                _sfInternalWeightIndexes.setValue(NULL);

                return true;
            }

            FWARNING(("SkeletonBlendedGeometryBase::unlinkParent: Child <-> "
                      "Parent link inconsistent.\n"));

            return false;
        }

        return false;
    }

    if(childFieldId == InternalWeightsFieldId)
    {
        GeoVectorProperty * pTypedChild =
            dynamic_cast<GeoVectorProperty *>(pChild);

        if(pTypedChild != NULL)
        {
            if(pTypedChild == _sfInternalWeights.getValue())
            {
                editSField(InternalWeightsFieldMask);

                _sfInternalWeights.setValue(NULL);

                return true;
            }

            FWARNING(("SkeletonBlendedGeometryBase::unlinkParent: Child <-> "
                      "Parent link inconsistent.\n"));

            return false;
        }

        return false;
    }


    return Inherited::unlinkChild(pChild, childFieldId);
}

void SkeletonBlendedGeometryBase::onCreate(const SkeletonBlendedGeometry *source)
{
    Inherited::onCreate(source);

    if(source != NULL)
    {
        SkeletonBlendedGeometry *pThis = static_cast<SkeletonBlendedGeometry *>(this);

        pThis->setBaseGeometry(source->getBaseGeometry());

        pThis->setInternalWeightIndexes(source->getInternalWeightIndexes());

        pThis->setInternalWeights(source->getInternalWeights());

        MFUnrecJointPtr::const_iterator InternalJointsIt  =
            source->_mfInternalJoints.begin();
        MFUnrecJointPtr::const_iterator InternalJointsEnd =
            source->_mfInternalJoints.end  ();

        while(InternalJointsIt != InternalJointsEnd)
        {
            pThis->pushToInternalJoints(*InternalJointsIt);

            ++InternalJointsIt;
        }
    }
}

GetFieldHandlePtr SkeletonBlendedGeometryBase::getHandleBaseGeometry    (void) const
{
    SFUnrecGeometryPtr::GetHandlePtr returnValue(
        new  SFUnrecGeometryPtr::GetHandle(
             &_sfBaseGeometry,
             this->getType().getFieldDesc(BaseGeometryFieldId),
             const_cast<SkeletonBlendedGeometryBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr SkeletonBlendedGeometryBase::editHandleBaseGeometry   (void)
{
    SFUnrecGeometryPtr::EditHandlePtr returnValue(
        new  SFUnrecGeometryPtr::EditHandle(
             &_sfBaseGeometry,
             this->getType().getFieldDesc(BaseGeometryFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&SkeletonBlendedGeometry::setBaseGeometry,
                    static_cast<SkeletonBlendedGeometry *>(this), _1));

    editSField(BaseGeometryFieldMask);

    return returnValue;
}

GetFieldHandlePtr SkeletonBlendedGeometryBase::getHandleInternalWeightIndexes (void) const
{
    SFUnrecChildGeoIntegralPropertyPtr::GetHandlePtr returnValue(
        new  SFUnrecChildGeoIntegralPropertyPtr::GetHandle(
             &_sfInternalWeightIndexes,
             this->getType().getFieldDesc(InternalWeightIndexesFieldId),
             const_cast<SkeletonBlendedGeometryBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr SkeletonBlendedGeometryBase::editHandleInternalWeightIndexes(void)
{
    SFUnrecChildGeoIntegralPropertyPtr::EditHandlePtr returnValue(
        new  SFUnrecChildGeoIntegralPropertyPtr::EditHandle(
             &_sfInternalWeightIndexes,
             this->getType().getFieldDesc(InternalWeightIndexesFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&SkeletonBlendedGeometry::setInternalWeightIndexes,
                    static_cast<SkeletonBlendedGeometry *>(this), _1));

    editSField(InternalWeightIndexesFieldMask);

    return returnValue;
}

GetFieldHandlePtr SkeletonBlendedGeometryBase::getHandleInternalWeights (void) const
{
    SFUnrecChildGeoVectorPropertyPtr::GetHandlePtr returnValue(
        new  SFUnrecChildGeoVectorPropertyPtr::GetHandle(
             &_sfInternalWeights,
             this->getType().getFieldDesc(InternalWeightsFieldId),
             const_cast<SkeletonBlendedGeometryBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr SkeletonBlendedGeometryBase::editHandleInternalWeights(void)
{
    SFUnrecChildGeoVectorPropertyPtr::EditHandlePtr returnValue(
        new  SFUnrecChildGeoVectorPropertyPtr::EditHandle(
             &_sfInternalWeights,
             this->getType().getFieldDesc(InternalWeightsFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&SkeletonBlendedGeometry::setInternalWeights,
                    static_cast<SkeletonBlendedGeometry *>(this), _1));

    editSField(InternalWeightsFieldMask);

    return returnValue;
}

GetFieldHandlePtr SkeletonBlendedGeometryBase::getHandleBlendMode       (void) const
{
    SFUInt32::GetHandlePtr returnValue(
        new  SFUInt32::GetHandle(
             &_sfBlendMode,
             this->getType().getFieldDesc(BlendModeFieldId),
             const_cast<SkeletonBlendedGeometryBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr SkeletonBlendedGeometryBase::editHandleBlendMode      (void)
{
    SFUInt32::EditHandlePtr returnValue(
        new  SFUInt32::EditHandle(
             &_sfBlendMode,
             this->getType().getFieldDesc(BlendModeFieldId),
             this));


    editSField(BlendModeFieldMask);

    return returnValue;
}

GetFieldHandlePtr SkeletonBlendedGeometryBase::getHandleInternalJoints  (void) const
{
    MFUnrecJointPtr::GetHandlePtr returnValue(
        new  MFUnrecJointPtr::GetHandle(
             &_mfInternalJoints,
             this->getType().getFieldDesc(InternalJointsFieldId),
             const_cast<SkeletonBlendedGeometryBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr SkeletonBlendedGeometryBase::editHandleInternalJoints (void)
{
    MFUnrecJointPtr::EditHandlePtr returnValue(
        new  MFUnrecJointPtr::EditHandle(
             &_mfInternalJoints,
             this->getType().getFieldDesc(InternalJointsFieldId),
             this));

    returnValue->setAddMethod(
        boost::bind(&SkeletonBlendedGeometry::pushToInternalJoints,
                    static_cast<SkeletonBlendedGeometry *>(this), _1));
    returnValue->setRemoveMethod(
        boost::bind(&SkeletonBlendedGeometry::removeFromInternalJoints,
                    static_cast<SkeletonBlendedGeometry *>(this), _1));
    returnValue->setRemoveObjMethod(
        boost::bind(&SkeletonBlendedGeometry::removeObjFromInternalJoints,
                    static_cast<SkeletonBlendedGeometry *>(this), _1));
    returnValue->setClearMethod(
        boost::bind(&SkeletonBlendedGeometry::clearInternalJoints,
                    static_cast<SkeletonBlendedGeometry *>(this)));

    editMField(InternalJointsFieldMask, _mfInternalJoints);

    return returnValue;
}

GetFieldHandlePtr SkeletonBlendedGeometryBase::getHandleInternalJointBindTransformations (void) const
{
    MFMatrix::GetHandlePtr returnValue(
        new  MFMatrix::GetHandle(
             &_mfInternalJointBindTransformations,
             this->getType().getFieldDesc(InternalJointBindTransformationsFieldId),
             const_cast<SkeletonBlendedGeometryBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr SkeletonBlendedGeometryBase::editHandleInternalJointBindTransformations(void)
{
    MFMatrix::EditHandlePtr returnValue(
        new  MFMatrix::EditHandle(
             &_mfInternalJointBindTransformations,
             this->getType().getFieldDesc(InternalJointBindTransformationsFieldId),
             this));


    editMField(InternalJointBindTransformationsFieldMask, _mfInternalJointBindTransformations);

    return returnValue;
}

GetFieldHandlePtr SkeletonBlendedGeometryBase::getHandleInternalJointInvBindTransformations (void) const
{
    MFMatrix::GetHandlePtr returnValue(
        new  MFMatrix::GetHandle(
             &_mfInternalJointInvBindTransformations,
             this->getType().getFieldDesc(InternalJointInvBindTransformationsFieldId),
             const_cast<SkeletonBlendedGeometryBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr SkeletonBlendedGeometryBase::editHandleInternalJointInvBindTransformations(void)
{
    MFMatrix::EditHandlePtr returnValue(
        new  MFMatrix::EditHandle(
             &_mfInternalJointInvBindTransformations,
             this->getType().getFieldDesc(InternalJointInvBindTransformationsFieldId),
             this));


    editMField(InternalJointInvBindTransformationsFieldMask, _mfInternalJointInvBindTransformations);

    return returnValue;
}

GetFieldHandlePtr SkeletonBlendedGeometryBase::getHandleBindTransformation (void) const
{
    SFMatrix::GetHandlePtr returnValue(
        new  SFMatrix::GetHandle(
             &_sfBindTransformation,
             this->getType().getFieldDesc(BindTransformationFieldId),
             const_cast<SkeletonBlendedGeometryBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr SkeletonBlendedGeometryBase::editHandleBindTransformation(void)
{
    SFMatrix::EditHandlePtr returnValue(
        new  SFMatrix::EditHandle(
             &_sfBindTransformation,
             this->getType().getFieldDesc(BindTransformationFieldId),
             this));


    editSField(BindTransformationFieldMask);

    return returnValue;
}


GetFieldHandlePtr SkeletonBlendedGeometryBase::getHandleEventProducer        (void) const
{
    SFEventProducerPtr::GetHandlePtr returnValue(
        new  SFEventProducerPtr::GetHandle(
             &_sfEventProducer,
             this->getType().getFieldDesc(EventProducerFieldId),
             const_cast<SkeletonBlendedGeometryBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr SkeletonBlendedGeometryBase::editHandleEventProducer       (void)
{
    SFEventProducerPtr::EditHandlePtr returnValue(
        new  SFEventProducerPtr::EditHandle(
             &_sfEventProducer,
             this->getType().getFieldDesc(EventProducerFieldId),
             this));


    editSField(EventProducerFieldMask);

    return returnValue;
}


#ifdef OSG_MT_CPTR_ASPECT
void SkeletonBlendedGeometryBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    SkeletonBlendedGeometry *pThis = static_cast<SkeletonBlendedGeometry *>(this);

    pThis->execSync(static_cast<SkeletonBlendedGeometry *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif


#ifdef OSG_MT_CPTR_ASPECT
FieldContainer *SkeletonBlendedGeometryBase::createAspectCopy(
    const FieldContainer *pRefAspect) const
{
    SkeletonBlendedGeometry *returnValue;

    newAspectCopy(returnValue,
                  dynamic_cast<const SkeletonBlendedGeometry *>(pRefAspect),
                  dynamic_cast<const SkeletonBlendedGeometry *>(this));

    return returnValue;
}
#endif

void SkeletonBlendedGeometryBase::resolveLinks(void)
{
    Inherited::resolveLinks();

    static_cast<SkeletonBlendedGeometry *>(this)->setBaseGeometry(NULL);

    static_cast<SkeletonBlendedGeometry *>(this)->setInternalWeightIndexes(NULL);

    static_cast<SkeletonBlendedGeometry *>(this)->setInternalWeights(NULL);

    static_cast<SkeletonBlendedGeometry *>(this)->clearInternalJoints();

#ifdef OSG_MT_CPTR_ASPECT
    AspectOffsetStore oOffsets;

    _pAspectStore->fillOffsetArray(oOffsets, this);
#endif

#ifdef OSG_MT_CPTR_ASPECT
    _mfInternalJointBindTransformations.terminateShare(Thread::getCurrentAspect(),
                                      oOffsets);
#endif
#ifdef OSG_MT_CPTR_ASPECT
    _mfInternalJointInvBindTransformations.terminateShare(Thread::getCurrentAspect(),
                                      oOffsets);
#endif
}


OSG_END_NAMESPACE
