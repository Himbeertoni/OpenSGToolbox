/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 * contact: David Kabala (djkabala@gmail.com)                                *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class PostShaderStageData!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>
#include <boost/assign/list_of.hpp>

#include "OSGConfig.h"



#include "OSGSimpleSHLChunk.h"          // ShaderChunk Class
#include "OSGChunkMaterial.h"           // ShaderMaterial Class
#include "OSGFrameBufferObject.h"       // RenderTarget Class
#include "OSGCamera.h"                  // Camera Class

#include "OSGPostShaderStageDataBase.h"
#include "OSGPostShaderStageData.h"

#include <boost/bind.hpp>

#ifdef WIN32 // turn off 'this' : used in base member initializer list warning
#pragma warning(disable:4355)
#endif

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::PostShaderStageData
    Data used for rendering by the Fog effect stage
 */

/***************************************************************************\
 *                        Field Documentation                              *
\***************************************************************************/

/*! \var SimpleSHLChunk * PostShaderStageDataBase::_sfShaderChunk
    
*/

/*! \var ChunkMaterial * PostShaderStageDataBase::_sfShaderMaterial
    
*/

/*! \var Int32           PostShaderStageDataBase::_sfWidth
    
*/

/*! \var Int32           PostShaderStageDataBase::_sfHeight
    
*/

/*! \var FrameBufferObject * PostShaderStageDataBase::_sfRenderTarget
    
*/

/*! \var Camera *        PostShaderStageDataBase::_sfCamera
    
*/


/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldTraits<PostShaderStageData *>::_type("PostShaderStageDataPtr", "StageDataPtr");
#endif

OSG_FIELDTRAITS_GETTYPE(PostShaderStageData *)

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

void PostShaderStageDataBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new SFUnrecSimpleSHLChunkPtr::Description(
        SFUnrecSimpleSHLChunkPtr::getClassType(),
        "ShaderChunk",
        "",
        ShaderChunkFieldId, ShaderChunkFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&PostShaderStageData::editHandleShaderChunk),
        static_cast<FieldGetMethodSig >(&PostShaderStageData::getHandleShaderChunk));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecChunkMaterialPtr::Description(
        SFUnrecChunkMaterialPtr::getClassType(),
        "ShaderMaterial",
        "",
        ShaderMaterialFieldId, ShaderMaterialFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&PostShaderStageData::editHandleShaderMaterial),
        static_cast<FieldGetMethodSig >(&PostShaderStageData::getHandleShaderMaterial));

    oType.addInitialDesc(pDesc);

    pDesc = new SFInt32::Description(
        SFInt32::getClassType(),
        "Width",
        "",
        WidthFieldId, WidthFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&PostShaderStageData::editHandleWidth),
        static_cast<FieldGetMethodSig >(&PostShaderStageData::getHandleWidth));

    oType.addInitialDesc(pDesc);

    pDesc = new SFInt32::Description(
        SFInt32::getClassType(),
        "Height",
        "",
        HeightFieldId, HeightFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&PostShaderStageData::editHandleHeight),
        static_cast<FieldGetMethodSig >(&PostShaderStageData::getHandleHeight));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecFrameBufferObjectPtr::Description(
        SFUnrecFrameBufferObjectPtr::getClassType(),
        "RenderTarget",
        "",
        RenderTargetFieldId, RenderTargetFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&PostShaderStageData::editHandleRenderTarget),
        static_cast<FieldGetMethodSig >(&PostShaderStageData::getHandleRenderTarget));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecCameraPtr::Description(
        SFUnrecCameraPtr::getClassType(),
        "Camera",
        "",
        CameraFieldId, CameraFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&PostShaderStageData::editHandleCamera),
        static_cast<FieldGetMethodSig >(&PostShaderStageData::getHandleCamera));

    oType.addInitialDesc(pDesc);
}


PostShaderStageDataBase::TypeObject PostShaderStageDataBase::_type(
    PostShaderStageDataBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    0,
    reinterpret_cast<PrototypeCreateF>(&PostShaderStageDataBase::createEmptyLocal),
    PostShaderStageData::initMethod,
    PostShaderStageData::exitMethod,
    reinterpret_cast<InitalInsertDescFunc>(&PostShaderStageData::classDescInserter),
    false,
    0,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "    name=\"PostShaderStageData\"\n"
    "    parent=\"StageData\"\n"
    "    library=\"EffectGroups\"\n"
    "    pointerfieldtypes=\"none\"\n"
    "    structure=\"concrete\"\n"
    "    systemcomponent=\"true\"\n"
    "    parentsystemcomponent=\"true\"\n"
    "    decoratable=\"false\"\n"
    "    useLocalIncludes=\"false\"\n"
    "    isNodeCore=\"false\"\n"
    "    docGroupBase=\"GrpEffectsGroupsMisc\"\n"
    "    authors=\"David Kabala (djkabala@gmail.com)\"\n"
    "    >\n"
    "    Data used for rendering by the Fog effect stage\n"
    "    <Field\n"
    "        name=\"ShaderChunk\"\n"
    "        type=\"SimpleSHLChunk\"\n"
    "        category=\"pointer\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        defaultValue=\"NULL\"\n"
    "        access=\"public\"\n"
    "        >\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"ShaderMaterial\"\n"
    "        type=\"ChunkMaterial\"\n"
    "        category=\"pointer\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        defaultValue=\"NULL\"\n"
    "        access=\"public\"\n"
    "        >\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"Width\"\n"
    "        type=\"Int32\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        defaultValue=\"0\"\n"
    "        access=\"public\"\n"
    "        >\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"Height\"\n"
    "        type=\"Int32\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        defaultValue=\"0\"\n"
    "        access=\"public\"\n"
    "        >\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"RenderTarget\"\n"
    "        type=\"FrameBufferObject\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        defaultValue=\"NULL\"\n"
    "        access=\"public\"\n"
    "        category=\"pointer\"\n"
    "        >\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"Camera\"\n"
    "        type=\"Camera\"\n"
    "        category=\"pointer\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        defaultValue=\"NULL\"\n"
    "        access=\"public\"\n"
    "        >\n"
    "    </Field>\n"
    "</FieldContainer>\n",
    "Data used for rendering by the Fog effect stage\n"
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &PostShaderStageDataBase::getType(void)
{
    return _type;
}

const FieldContainerType &PostShaderStageDataBase::getType(void) const
{
    return _type;
}

UInt32 PostShaderStageDataBase::getContainerSize(void) const
{
    return sizeof(PostShaderStageData);
}

/*------------------------- decorator get ------------------------------*/


//! Get the PostShaderStageData::_sfShaderChunk field.
const SFUnrecSimpleSHLChunkPtr *PostShaderStageDataBase::getSFShaderChunk(void) const
{
    return &_sfShaderChunk;
}

SFUnrecSimpleSHLChunkPtr *PostShaderStageDataBase::editSFShaderChunk    (void)
{
    editSField(ShaderChunkFieldMask);

    return &_sfShaderChunk;
}

//! Get the PostShaderStageData::_sfShaderMaterial field.
const SFUnrecChunkMaterialPtr *PostShaderStageDataBase::getSFShaderMaterial(void) const
{
    return &_sfShaderMaterial;
}

SFUnrecChunkMaterialPtr *PostShaderStageDataBase::editSFShaderMaterial (void)
{
    editSField(ShaderMaterialFieldMask);

    return &_sfShaderMaterial;
}

SFInt32 *PostShaderStageDataBase::editSFWidth(void)
{
    editSField(WidthFieldMask);

    return &_sfWidth;
}

const SFInt32 *PostShaderStageDataBase::getSFWidth(void) const
{
    return &_sfWidth;
}


SFInt32 *PostShaderStageDataBase::editSFHeight(void)
{
    editSField(HeightFieldMask);

    return &_sfHeight;
}

const SFInt32 *PostShaderStageDataBase::getSFHeight(void) const
{
    return &_sfHeight;
}


//! Get the PostShaderStageData::_sfRenderTarget field.
const SFUnrecFrameBufferObjectPtr *PostShaderStageDataBase::getSFRenderTarget(void) const
{
    return &_sfRenderTarget;
}

SFUnrecFrameBufferObjectPtr *PostShaderStageDataBase::editSFRenderTarget   (void)
{
    editSField(RenderTargetFieldMask);

    return &_sfRenderTarget;
}

//! Get the PostShaderStageData::_sfCamera field.
const SFUnrecCameraPtr *PostShaderStageDataBase::getSFCamera(void) const
{
    return &_sfCamera;
}

SFUnrecCameraPtr    *PostShaderStageDataBase::editSFCamera         (void)
{
    editSField(CameraFieldMask);

    return &_sfCamera;
}





/*------------------------------ access -----------------------------------*/

UInt32 PostShaderStageDataBase::getBinSize(ConstFieldMaskArg whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (ShaderChunkFieldMask & whichField))
    {
        returnValue += _sfShaderChunk.getBinSize();
    }
    if(FieldBits::NoField != (ShaderMaterialFieldMask & whichField))
    {
        returnValue += _sfShaderMaterial.getBinSize();
    }
    if(FieldBits::NoField != (WidthFieldMask & whichField))
    {
        returnValue += _sfWidth.getBinSize();
    }
    if(FieldBits::NoField != (HeightFieldMask & whichField))
    {
        returnValue += _sfHeight.getBinSize();
    }
    if(FieldBits::NoField != (RenderTargetFieldMask & whichField))
    {
        returnValue += _sfRenderTarget.getBinSize();
    }
    if(FieldBits::NoField != (CameraFieldMask & whichField))
    {
        returnValue += _sfCamera.getBinSize();
    }

    return returnValue;
}

void PostShaderStageDataBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (ShaderChunkFieldMask & whichField))
    {
        _sfShaderChunk.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ShaderMaterialFieldMask & whichField))
    {
        _sfShaderMaterial.copyToBin(pMem);
    }
    if(FieldBits::NoField != (WidthFieldMask & whichField))
    {
        _sfWidth.copyToBin(pMem);
    }
    if(FieldBits::NoField != (HeightFieldMask & whichField))
    {
        _sfHeight.copyToBin(pMem);
    }
    if(FieldBits::NoField != (RenderTargetFieldMask & whichField))
    {
        _sfRenderTarget.copyToBin(pMem);
    }
    if(FieldBits::NoField != (CameraFieldMask & whichField))
    {
        _sfCamera.copyToBin(pMem);
    }
}

void PostShaderStageDataBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (ShaderChunkFieldMask & whichField))
    {
        editSField(ShaderChunkFieldMask);
        _sfShaderChunk.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ShaderMaterialFieldMask & whichField))
    {
        editSField(ShaderMaterialFieldMask);
        _sfShaderMaterial.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (WidthFieldMask & whichField))
    {
        editSField(WidthFieldMask);
        _sfWidth.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (HeightFieldMask & whichField))
    {
        editSField(HeightFieldMask);
        _sfHeight.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (RenderTargetFieldMask & whichField))
    {
        editSField(RenderTargetFieldMask);
        _sfRenderTarget.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (CameraFieldMask & whichField))
    {
        editSField(CameraFieldMask);
        _sfCamera.copyFromBin(pMem);
    }
}

//! create a new instance of the class
PostShaderStageDataTransitPtr PostShaderStageDataBase::createLocal(BitVector bFlags)
{
    PostShaderStageDataTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyLocal(bFlags);

        fc = dynamic_pointer_cast<PostShaderStageData>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class, copy the container flags
PostShaderStageDataTransitPtr PostShaderStageDataBase::createDependent(BitVector bFlags)
{
    PostShaderStageDataTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyDependent(bFlags);

        fc = dynamic_pointer_cast<PostShaderStageData>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class
PostShaderStageDataTransitPtr PostShaderStageDataBase::create(void)
{
    PostShaderStageDataTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopy();

        fc = dynamic_pointer_cast<PostShaderStageData>(tmpPtr);
    }

    return fc;
}

PostShaderStageData *PostShaderStageDataBase::createEmptyLocal(BitVector bFlags)
{
    PostShaderStageData *returnValue;

    newPtr<PostShaderStageData>(returnValue, bFlags);

    returnValue->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

//! create an empty new instance of the class, do not copy the prototype
PostShaderStageData *PostShaderStageDataBase::createEmpty(void)
{
    PostShaderStageData *returnValue;

    newPtr<PostShaderStageData>(returnValue, Thread::getCurrentLocalFlags());

    returnValue->_pFieldFlags->_bNamespaceMask &=
        ~Thread::getCurrentLocalFlags();

    return returnValue;
}

FieldContainerTransitPtr PostShaderStageDataBase::shallowCopyLocal(
    BitVector bFlags) const
{
    PostShaderStageData *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const PostShaderStageData *>(this), bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

FieldContainerTransitPtr PostShaderStageDataBase::shallowCopyDependent(
    BitVector bFlags) const
{
    PostShaderStageData *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const PostShaderStageData *>(this), ~bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask = bFlags;

    return returnValue;
}

FieldContainerTransitPtr PostShaderStageDataBase::shallowCopy(void) const
{
    PostShaderStageData *tmpPtr;

    newPtr(tmpPtr,
           dynamic_cast<const PostShaderStageData *>(this),
           Thread::getCurrentLocalFlags());

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~Thread::getCurrentLocalFlags();

    FieldContainerTransitPtr returnValue(tmpPtr);

    return returnValue;
}



/*------------------------- constructors ----------------------------------*/

PostShaderStageDataBase::PostShaderStageDataBase(void) :
    Inherited(),
    _sfShaderChunk            (NULL),
    _sfShaderMaterial         (NULL),
    _sfWidth                  (Int32(0)),
    _sfHeight                 (Int32(0)),
    _sfRenderTarget           (NULL),
    _sfCamera                 (NULL)
{
}

PostShaderStageDataBase::PostShaderStageDataBase(const PostShaderStageDataBase &source) :
    Inherited(source),
    _sfShaderChunk            (NULL),
    _sfShaderMaterial         (NULL),
    _sfWidth                  (source._sfWidth                  ),
    _sfHeight                 (source._sfHeight                 ),
    _sfRenderTarget           (NULL),
    _sfCamera                 (NULL)
{
}


/*-------------------------- destructors ----------------------------------*/

PostShaderStageDataBase::~PostShaderStageDataBase(void)
{
}

void PostShaderStageDataBase::onCreate(const PostShaderStageData *source)
{
    Inherited::onCreate(source);

    if(source != NULL)
    {
        PostShaderStageData *pThis = static_cast<PostShaderStageData *>(this);

        pThis->setShaderChunk(source->getShaderChunk());

        pThis->setShaderMaterial(source->getShaderMaterial());

        pThis->setRenderTarget(source->getRenderTarget());

        pThis->setCamera(source->getCamera());
    }
}

GetFieldHandlePtr PostShaderStageDataBase::getHandleShaderChunk     (void) const
{
    SFUnrecSimpleSHLChunkPtr::GetHandlePtr returnValue(
        new  SFUnrecSimpleSHLChunkPtr::GetHandle(
             &_sfShaderChunk,
             this->getType().getFieldDesc(ShaderChunkFieldId),
             const_cast<PostShaderStageDataBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr PostShaderStageDataBase::editHandleShaderChunk    (void)
{
    SFUnrecSimpleSHLChunkPtr::EditHandlePtr returnValue(
        new  SFUnrecSimpleSHLChunkPtr::EditHandle(
             &_sfShaderChunk,
             this->getType().getFieldDesc(ShaderChunkFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&PostShaderStageData::setShaderChunk,
                    static_cast<PostShaderStageData *>(this), _1));

    editSField(ShaderChunkFieldMask);

    return returnValue;
}

GetFieldHandlePtr PostShaderStageDataBase::getHandleShaderMaterial  (void) const
{
    SFUnrecChunkMaterialPtr::GetHandlePtr returnValue(
        new  SFUnrecChunkMaterialPtr::GetHandle(
             &_sfShaderMaterial,
             this->getType().getFieldDesc(ShaderMaterialFieldId),
             const_cast<PostShaderStageDataBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr PostShaderStageDataBase::editHandleShaderMaterial (void)
{
    SFUnrecChunkMaterialPtr::EditHandlePtr returnValue(
        new  SFUnrecChunkMaterialPtr::EditHandle(
             &_sfShaderMaterial,
             this->getType().getFieldDesc(ShaderMaterialFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&PostShaderStageData::setShaderMaterial,
                    static_cast<PostShaderStageData *>(this), _1));

    editSField(ShaderMaterialFieldMask);

    return returnValue;
}

GetFieldHandlePtr PostShaderStageDataBase::getHandleWidth           (void) const
{
    SFInt32::GetHandlePtr returnValue(
        new  SFInt32::GetHandle(
             &_sfWidth,
             this->getType().getFieldDesc(WidthFieldId),
             const_cast<PostShaderStageDataBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr PostShaderStageDataBase::editHandleWidth          (void)
{
    SFInt32::EditHandlePtr returnValue(
        new  SFInt32::EditHandle(
             &_sfWidth,
             this->getType().getFieldDesc(WidthFieldId),
             this));


    editSField(WidthFieldMask);

    return returnValue;
}

GetFieldHandlePtr PostShaderStageDataBase::getHandleHeight          (void) const
{
    SFInt32::GetHandlePtr returnValue(
        new  SFInt32::GetHandle(
             &_sfHeight,
             this->getType().getFieldDesc(HeightFieldId),
             const_cast<PostShaderStageDataBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr PostShaderStageDataBase::editHandleHeight         (void)
{
    SFInt32::EditHandlePtr returnValue(
        new  SFInt32::EditHandle(
             &_sfHeight,
             this->getType().getFieldDesc(HeightFieldId),
             this));


    editSField(HeightFieldMask);

    return returnValue;
}

GetFieldHandlePtr PostShaderStageDataBase::getHandleRenderTarget    (void) const
{
    SFUnrecFrameBufferObjectPtr::GetHandlePtr returnValue(
        new  SFUnrecFrameBufferObjectPtr::GetHandle(
             &_sfRenderTarget,
             this->getType().getFieldDesc(RenderTargetFieldId),
             const_cast<PostShaderStageDataBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr PostShaderStageDataBase::editHandleRenderTarget   (void)
{
    SFUnrecFrameBufferObjectPtr::EditHandlePtr returnValue(
        new  SFUnrecFrameBufferObjectPtr::EditHandle(
             &_sfRenderTarget,
             this->getType().getFieldDesc(RenderTargetFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&PostShaderStageData::setRenderTarget,
                    static_cast<PostShaderStageData *>(this), _1));

    editSField(RenderTargetFieldMask);

    return returnValue;
}

GetFieldHandlePtr PostShaderStageDataBase::getHandleCamera          (void) const
{
    SFUnrecCameraPtr::GetHandlePtr returnValue(
        new  SFUnrecCameraPtr::GetHandle(
             &_sfCamera,
             this->getType().getFieldDesc(CameraFieldId),
             const_cast<PostShaderStageDataBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr PostShaderStageDataBase::editHandleCamera         (void)
{
    SFUnrecCameraPtr::EditHandlePtr returnValue(
        new  SFUnrecCameraPtr::EditHandle(
             &_sfCamera,
             this->getType().getFieldDesc(CameraFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&PostShaderStageData::setCamera,
                    static_cast<PostShaderStageData *>(this), _1));

    editSField(CameraFieldMask);

    return returnValue;
}



#ifdef OSG_MT_CPTR_ASPECT
void PostShaderStageDataBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    PostShaderStageData *pThis = static_cast<PostShaderStageData *>(this);

    pThis->execSync(static_cast<PostShaderStageData *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif


#ifdef OSG_MT_CPTR_ASPECT
FieldContainer *PostShaderStageDataBase::createAspectCopy(
    const FieldContainer *pRefAspect) const
{
    PostShaderStageData *returnValue;

    newAspectCopy(returnValue,
                  dynamic_cast<const PostShaderStageData *>(pRefAspect),
                  dynamic_cast<const PostShaderStageData *>(this));

    return returnValue;
}
#endif

void PostShaderStageDataBase::resolveLinks(void)
{
    Inherited::resolveLinks();

    static_cast<PostShaderStageData *>(this)->setShaderChunk(NULL);

    static_cast<PostShaderStageData *>(this)->setShaderMaterial(NULL);

    static_cast<PostShaderStageData *>(this)->setRenderTarget(NULL);

    static_cast<PostShaderStageData *>(this)->setCamera(NULL);


}


OSG_END_NAMESPACE
