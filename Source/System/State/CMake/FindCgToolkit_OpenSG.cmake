# - Find Cg Toolkit
# Find the native Cg Toolkit includes and library
# This module defines
#  CG_TOOLKIT_INCLUDE_DIR, where to find cg.h, etc.
#  CG_TOOLKIT_LIBRARIES, the libraries needed to use JPEG.
#  CG_TOOLKIT_FOUND, If false, do not try to use Cg.
# also defined, but not for general use are
#  CG_TOOLKIT_LIBRARY, where to find the JPEG library.

FIND_PATH(CG_TOOLKIT_INCLUDE_DIR Cg/cg.h)

SET(CG_NAMES_RELEASE ${CG_NAMES_RELEASE} libCg)
FIND_LIBRARY(CG_TOOLKIT_LIBRARY_RELEASE NAMES ${CG_NAMES_RELEASE} )

SET(CG_NAMES_DEBUG ${CG_NAMES_DEBUG} libCgd)
FIND_LIBRARY(CG_LIBRARY_DEBUG NAMES ${CG_NAMES_DEBUG} )

IF(CG_TOOLKIT_LIBRARY_DEBUG)
  SET(CG_TOOLKIT_LIBRARIES_FOUND TRUE)
  MARK_AS_ADVANCED(CG_TOOLKIT_LIBRARY_DEBUG)
ENDIF(CG_TOOLKIT_LIBRARY_DEBUG)

IF(CG_TOOLKIT_LIBRARY_RELEASE)
  SET(CG_TOOLKIT_LIBRARIES_FOUND TRUE)
  MARK_AS_ADVANCED(CG_TOOLKIT_LIBRARY_RELEASE)
ENDIF(CG_TOOLKIT_LIBRARY_RELEASE)

# handle the QUIETLY and REQUIRED arguments and set CG_FOUND to TRUE if 
# all listed variables are TRUE
INCLUDE(FindPackageHandleStandardArgs)
FIND_PACKAGE_HANDLE_STANDARD_ARGS(CG_TOOLKIT DEFAULT_MSG 
                                  CG_TOOLKIT_LIBRARIES_FOUND 
                                  CG_TOOLKIT_INCLUDE_DIR)

#IF(JPEG_FOUND)
#  SET(JPEG_LIBRARIES ${JPEG_LIBRARY})
#ENDIF(JPEG_FOUND)

# Deprecated declarations.
#SET (NATIVE_JPEG_INCLUDE_PATH ${JPEG_INCLUDE_DIR} )
#IF(JPEG_LIBRARY)
#  GET_FILENAME_COMPONENT (NATIVE_JPEG_LIB_PATH ${JPEG_LIBRARY} PATH)
#ENDIF(JPEG_LIBRARY)

MARK_AS_ADVANCED(JPEG_LIBRARIES_FOUND JPEG_INCLUDE_DIR )
