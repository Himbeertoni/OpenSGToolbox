/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact: dirk@opensg.org, gerrit.voss@vossg.org, jbehr@zgdv.de          *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class WindowEventProducer!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>
#include <boost/assign/list_of.hpp>

#include "OSGConfig.h"




#include "OSGWindowEventProducerBase.h"
#include "OSGWindowEventProducer.h"

#include <boost/bind.hpp>

#include "OSGEvent.h"

#ifdef WIN32 // turn off 'this' : used in base member initializer list warning
#pragma warning(disable:4355)
#endif

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::WindowEventProducer
    WindowEventProducer is the base class for all Window specific Event producers. It also contains code for Window Manipulation: Position, size, iconify, enable, visible, fullscreen, etc.
 */

/***************************************************************************\
 *                        Field Documentation                              *
\***************************************************************************/

/*! \var bool            WindowEventProducerBase::_sfEnabled
    
*/

/*! \var bool            WindowEventProducerBase::_sfUseCallbackForDraw
    
*/

/*! \var bool            WindowEventProducerBase::_sfUseCallbackForReshape
    
*/

/*! \var Time            WindowEventProducerBase::_sfLastUpdateTime
    
*/

/*! \var bool            WindowEventProducerBase::_sfLockCursor
    
*/


/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldTraits<WindowEventProducer *>::_type("WindowEventProducerPtr", "WindowPtr");
#endif

OSG_FIELDTRAITS_GETTYPE(WindowEventProducer *)

OSG_EXPORT_PTR_SFIELD_FULL(PointerSField,
                           WindowEventProducer *,
                           0);

OSG_EXPORT_PTR_MFIELD_FULL(PointerMField,
                           WindowEventProducer *,
                           0);

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

void WindowEventProducerBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new SFBool::Description(
        SFBool::getClassType(),
        "Enabled",
        "",
        EnabledFieldId, EnabledFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&WindowEventProducer::editHandleEnabled),
        static_cast<FieldGetMethodSig >(&WindowEventProducer::getHandleEnabled));

    oType.addInitialDesc(pDesc);

    pDesc = new SFBool::Description(
        SFBool::getClassType(),
        "UseCallbackForDraw",
        "",
        UseCallbackForDrawFieldId, UseCallbackForDrawFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&WindowEventProducer::editHandleUseCallbackForDraw),
        static_cast<FieldGetMethodSig >(&WindowEventProducer::getHandleUseCallbackForDraw));

    oType.addInitialDesc(pDesc);

    pDesc = new SFBool::Description(
        SFBool::getClassType(),
        "UseCallbackForReshape",
        "",
        UseCallbackForReshapeFieldId, UseCallbackForReshapeFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&WindowEventProducer::editHandleUseCallbackForReshape),
        static_cast<FieldGetMethodSig >(&WindowEventProducer::getHandleUseCallbackForReshape));

    oType.addInitialDesc(pDesc);

    pDesc = new SFTime::Description(
        SFTime::getClassType(),
        "LastUpdateTime",
        "",
        LastUpdateTimeFieldId, LastUpdateTimeFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&WindowEventProducer::editHandleLastUpdateTime),
        static_cast<FieldGetMethodSig >(&WindowEventProducer::getHandleLastUpdateTime));

    oType.addInitialDesc(pDesc);

    pDesc = new SFBool::Description(
        SFBool::getClassType(),
        "LockCursor",
        "",
        LockCursorFieldId, LockCursorFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&WindowEventProducer::editHandleLockCursor),
        static_cast<FieldGetMethodSig >(&WindowEventProducer::getHandleLockCursor));

    oType.addInitialDesc(pDesc);
    pDesc = new SFEventProducerPtr::Description(
        SFEventProducerPtr::getClassType(),
        "EventProducer",
        "Event Producer",
        EventProducerFieldId,EventProducerFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast     <FieldEditMethodSig>(&WindowEventProducer::editHandleEventProducer),
        static_cast     <FieldGetMethodSig >(&WindowEventProducer::getHandleEventProducer));

    oType.addInitialDesc(pDesc);
}


WindowEventProducerBase::TypeObject WindowEventProducerBase::_type(
    WindowEventProducerBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    0,
    NULL,
    WindowEventProducer::initMethod,
    WindowEventProducer::exitMethod,
    reinterpret_cast<InitalInsertDescFunc>(&WindowEventProducer::classDescInserter),
    false,
    0,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "\tname=\"WindowEventProducer\"\n"
    "\tparent=\"Window\"\n"
    "\tlibrary=\"System\"\n"
    "\tpointerfieldtypes=\"both\"\n"
    "\tstructure=\"abstract\"\n"
    "\tsystemcomponent=\"true\"\n"
    "\tparentsystemcomponent=\"true\"\n"
    ">\n"
    "WindowEventProducer is the base class for all Window specific Event producers. It also contains code for Window Manipulation: Position, size, iconify, enable, visible, fullscreen, etc.\n"
    "\t<Field\n"
    "\t\tname=\"Enabled\"\n"
    "\t\ttype=\"bool\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"UseCallbackForDraw\"\n"
    "\t\ttype=\"bool\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t\tdefaultValue=\"false\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"UseCallbackForReshape\"\n"
    "\t\ttype=\"bool\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t\tdefaultValue=\"false\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"LastUpdateTime\"\n"
    "\t\ttype=\"Time\"\n"
    "\t\tcardinality=\"single\"\n"
    "        category=\"data\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t\tdefaultValue=\"-1.0\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"LockCursor\"\n"
    "\t\ttype=\"bool\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t\tdefaultValue=\"false\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<ProducedMethod\n"
    "\t\tname=\"WindowOpened\"\n"
    "\t\ttype=\"WindowEventPtr\"\n"
    "\t>\n"
    "\t</ProducedMethod>\n"
    "\t<ProducedMethod\n"
    "\t\tname=\"WindowClosing\"\n"
    "\t\ttype=\"WindowEventPtr\"\n"
    "\t>\n"
    "\t</ProducedMethod>\n"
    "\t<ProducedMethod\n"
    "\t\tname=\"WindowClosed\"\n"
    "\t\ttype=\"WindowEventPtr\"\n"
    "\t>\n"
    "\t</ProducedMethod>\n"
    "\t<ProducedMethod\n"
    "\t\tname=\"WindowIconified\"\n"
    "\t\ttype=\"WindowEventPtr\"\n"
    "\t>\n"
    "\t</ProducedMethod>\n"
    "\t<ProducedMethod\n"
    "\t\tname=\"WindowDeiconified\"\n"
    "\t\ttype=\"WindowEventPtr\"\n"
    "\t>\n"
    "\t</ProducedMethod>\n"
    "\t<ProducedMethod\n"
    "\t\tname=\"WindowActivated\"\n"
    "\t\ttype=\"WindowEventPtr\"\n"
    "\t>\n"
    "\t</ProducedMethod>\n"
    "\t<ProducedMethod\n"
    "\t\tname=\"WindowDeactivated\"\n"
    "\t\ttype=\"WindowEventPtr\"\n"
    "\t>\n"
    "\t</ProducedMethod>\n"
    "\t<ProducedMethod\n"
    "\t\tname=\"WindowEntered\"\n"
    "\t\ttype=\"WindowEventPtr\"\n"
    "\t>\n"
    "\t</ProducedMethod>\n"
    "\t<ProducedMethod\n"
    "\t\tname=\"WindowExited\"\n"
    "\t\ttype=\"WindowEventPtr\"\n"
    "\t>\n"
    "\t</ProducedMethod>\n"
    "\t<ProducedMethod\n"
    "\t\tname=\"MouseClicked\"\n"
    "\t\ttype=\"MouseEventPtr\"\n"
    "\t>\n"
    "\t</ProducedMethod>\n"
    "\t<ProducedMethod\n"
    "\t\tname=\"MouseEntered\"\n"
    "\t\ttype=\"MouseEventPtr\"\n"
    "\t>\n"
    "\t</ProducedMethod>\n"
    "\t<ProducedMethod\n"
    "\t\tname=\"MouseExited\"\n"
    "\t\ttype=\"MouseEventPtr\"\n"
    "\t>\n"
    "\t</ProducedMethod>\n"
    "\t<ProducedMethod\n"
    "\t\tname=\"MousePressed\"\n"
    "\t\ttype=\"MouseEventPtr\"\n"
    "\t>\n"
    "\t</ProducedMethod>\n"
    "\t<ProducedMethod\n"
    "\t\tname=\"MouseReleased\"\n"
    "\t\ttype=\"MouseEventPtr\"\n"
    "\t>\n"
    "\t</ProducedMethod>\n"
    "\t<ProducedMethod\n"
    "\t\tname=\"MouseMoved\"\n"
    "\t\ttype=\"MouseEventPtr\"\n"
    "\t>\n"
    "\t</ProducedMethod>\n"
    "\t<ProducedMethod\n"
    "\t\tname=\"MouseDragged\"\n"
    "\t\ttype=\"MouseEventPtr\"\n"
    "\t>\n"
    "\t</ProducedMethod>\n"
    "\t<ProducedMethod\n"
    "\t\tname=\"MouseWheelMoved\"\n"
    "\t\ttype=\"MouseWheelEventPtr\"\n"
    "\t>\n"
    "\t</ProducedMethod>\n"
    "\t<ProducedMethod\n"
    "\t\tname=\"KeyPressed\"\n"
    "\t\ttype=\"KeyEventPtr\"\n"
    "\t>\n"
    "\t</ProducedMethod>\n"
    "\t<ProducedMethod\n"
    "\t\tname=\"KeyReleased\"\n"
    "\t\ttype=\"KeyEventPtr\"\n"
    "\t>\n"
    "\t</ProducedMethod>\n"
    "\t<ProducedMethod\n"
    "\t\tname=\"KeyTyped\"\n"
    "\t\ttype=\"KeyEventPtr\"\n"
    "\t>\n"
    "\t</ProducedMethod>\n"
    "\t<ProducedMethod\n"
    "\t\tname=\"Update\"\n"
    "\t\ttype=\"UpdateEventPtr\"\n"
    "\t>\n"
    "\t</ProducedMethod>\n"
    "</FieldContainer>\n",
    "WindowEventProducer is the base class for all Window specific Event producers. It also contains code for Window Manipulation: Position, size, iconify, enable, visible, fullscreen, etc.\n"
    );

//! WindowEventProducer Produced Methods

MethodDescription *WindowEventProducerBase::_methodDesc[] =
{
    new MethodDescription("WindowOpened", 
                    "",
                     WindowOpenedMethodId, 
                     SFUnrecEventPtr::getClassType(),
                     FunctorAccessMethod()),
    new MethodDescription("WindowClosing", 
                    "",
                     WindowClosingMethodId, 
                     SFUnrecEventPtr::getClassType(),
                     FunctorAccessMethod()),
    new MethodDescription("WindowClosed", 
                    "",
                     WindowClosedMethodId, 
                     SFUnrecEventPtr::getClassType(),
                     FunctorAccessMethod()),
    new MethodDescription("WindowIconified", 
                    "",
                     WindowIconifiedMethodId, 
                     SFUnrecEventPtr::getClassType(),
                     FunctorAccessMethod()),
    new MethodDescription("WindowDeiconified", 
                    "",
                     WindowDeiconifiedMethodId, 
                     SFUnrecEventPtr::getClassType(),
                     FunctorAccessMethod()),
    new MethodDescription("WindowActivated", 
                    "",
                     WindowActivatedMethodId, 
                     SFUnrecEventPtr::getClassType(),
                     FunctorAccessMethod()),
    new MethodDescription("WindowDeactivated", 
                    "",
                     WindowDeactivatedMethodId, 
                     SFUnrecEventPtr::getClassType(),
                     FunctorAccessMethod()),
    new MethodDescription("WindowEntered", 
                    "",
                     WindowEnteredMethodId, 
                     SFUnrecEventPtr::getClassType(),
                     FunctorAccessMethod()),
    new MethodDescription("WindowExited", 
                    "",
                     WindowExitedMethodId, 
                     SFUnrecEventPtr::getClassType(),
                     FunctorAccessMethod()),
    new MethodDescription("MouseClicked", 
                    "",
                     MouseClickedMethodId, 
                     SFUnrecEventPtr::getClassType(),
                     FunctorAccessMethod()),
    new MethodDescription("MouseEntered", 
                    "",
                     MouseEnteredMethodId, 
                     SFUnrecEventPtr::getClassType(),
                     FunctorAccessMethod()),
    new MethodDescription("MouseExited", 
                    "",
                     MouseExitedMethodId, 
                     SFUnrecEventPtr::getClassType(),
                     FunctorAccessMethod()),
    new MethodDescription("MousePressed", 
                    "",
                     MousePressedMethodId, 
                     SFUnrecEventPtr::getClassType(),
                     FunctorAccessMethod()),
    new MethodDescription("MouseReleased", 
                    "",
                     MouseReleasedMethodId, 
                     SFUnrecEventPtr::getClassType(),
                     FunctorAccessMethod()),
    new MethodDescription("MouseMoved", 
                    "",
                     MouseMovedMethodId, 
                     SFUnrecEventPtr::getClassType(),
                     FunctorAccessMethod()),
    new MethodDescription("MouseDragged", 
                    "",
                     MouseDraggedMethodId, 
                     SFUnrecEventPtr::getClassType(),
                     FunctorAccessMethod()),
    new MethodDescription("MouseWheelMoved", 
                    "",
                     MouseWheelMovedMethodId, 
                     SFUnrecEventPtr::getClassType(),
                     FunctorAccessMethod()),
    new MethodDescription("KeyPressed", 
                    "",
                     KeyPressedMethodId, 
                     SFUnrecEventPtr::getClassType(),
                     FunctorAccessMethod()),
    new MethodDescription("KeyReleased", 
                    "",
                     KeyReleasedMethodId, 
                     SFUnrecEventPtr::getClassType(),
                     FunctorAccessMethod()),
    new MethodDescription("KeyTyped", 
                    "",
                     KeyTypedMethodId, 
                     SFUnrecEventPtr::getClassType(),
                     FunctorAccessMethod()),
    new MethodDescription("Update", 
                    "",
                     UpdateMethodId, 
                     SFUnrecEventPtr::getClassType(),
                     FunctorAccessMethod())
};

EventProducerType WindowEventProducerBase::_producerType(
    "WindowEventProducerProducerType",
    "EventProducerType",
    "",
    InitEventProducerFunctor(),
    _methodDesc,
    sizeof(_methodDesc));

/*------------------------------ get -----------------------------------*/

FieldContainerType &WindowEventProducerBase::getType(void)
{
    return _type;
}

const FieldContainerType &WindowEventProducerBase::getType(void) const
{
    return _type;
}

const EventProducerType &WindowEventProducerBase::getProducerType(void) const
{
    return _producerType;
}

UInt32 WindowEventProducerBase::getContainerSize(void) const
{
    return sizeof(WindowEventProducer);
}

/*------------------------- decorator get ------------------------------*/


SFBool *WindowEventProducerBase::editSFEnabled(void)
{
    editSField(EnabledFieldMask);

    return &_sfEnabled;
}

const SFBool *WindowEventProducerBase::getSFEnabled(void) const
{
    return &_sfEnabled;
}


SFBool *WindowEventProducerBase::editSFUseCallbackForDraw(void)
{
    editSField(UseCallbackForDrawFieldMask);

    return &_sfUseCallbackForDraw;
}

const SFBool *WindowEventProducerBase::getSFUseCallbackForDraw(void) const
{
    return &_sfUseCallbackForDraw;
}


SFBool *WindowEventProducerBase::editSFUseCallbackForReshape(void)
{
    editSField(UseCallbackForReshapeFieldMask);

    return &_sfUseCallbackForReshape;
}

const SFBool *WindowEventProducerBase::getSFUseCallbackForReshape(void) const
{
    return &_sfUseCallbackForReshape;
}


SFTime *WindowEventProducerBase::editSFLastUpdateTime(void)
{
    editSField(LastUpdateTimeFieldMask);

    return &_sfLastUpdateTime;
}

const SFTime *WindowEventProducerBase::getSFLastUpdateTime(void) const
{
    return &_sfLastUpdateTime;
}


SFBool *WindowEventProducerBase::editSFLockCursor(void)
{
    editSField(LockCursorFieldMask);

    return &_sfLockCursor;
}

const SFBool *WindowEventProducerBase::getSFLockCursor(void) const
{
    return &_sfLockCursor;
}






/*------------------------------ access -----------------------------------*/

UInt32 WindowEventProducerBase::getBinSize(ConstFieldMaskArg whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (EnabledFieldMask & whichField))
    {
        returnValue += _sfEnabled.getBinSize();
    }
    if(FieldBits::NoField != (UseCallbackForDrawFieldMask & whichField))
    {
        returnValue += _sfUseCallbackForDraw.getBinSize();
    }
    if(FieldBits::NoField != (UseCallbackForReshapeFieldMask & whichField))
    {
        returnValue += _sfUseCallbackForReshape.getBinSize();
    }
    if(FieldBits::NoField != (LastUpdateTimeFieldMask & whichField))
    {
        returnValue += _sfLastUpdateTime.getBinSize();
    }
    if(FieldBits::NoField != (LockCursorFieldMask & whichField))
    {
        returnValue += _sfLockCursor.getBinSize();
    }
    if(FieldBits::NoField != (EventProducerFieldMask & whichField))
    {
        returnValue += _sfEventProducer.getBinSize();
    }

    return returnValue;
}

void WindowEventProducerBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (EnabledFieldMask & whichField))
    {
        _sfEnabled.copyToBin(pMem);
    }
    if(FieldBits::NoField != (UseCallbackForDrawFieldMask & whichField))
    {
        _sfUseCallbackForDraw.copyToBin(pMem);
    }
    if(FieldBits::NoField != (UseCallbackForReshapeFieldMask & whichField))
    {
        _sfUseCallbackForReshape.copyToBin(pMem);
    }
    if(FieldBits::NoField != (LastUpdateTimeFieldMask & whichField))
    {
        _sfLastUpdateTime.copyToBin(pMem);
    }
    if(FieldBits::NoField != (LockCursorFieldMask & whichField))
    {
        _sfLockCursor.copyToBin(pMem);
    }
    if(FieldBits::NoField != (EventProducerFieldMask & whichField))
    {
        _sfEventProducer.copyToBin(pMem);
    }
}

void WindowEventProducerBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (EnabledFieldMask & whichField))
    {
        _sfEnabled.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (UseCallbackForDrawFieldMask & whichField))
    {
        _sfUseCallbackForDraw.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (UseCallbackForReshapeFieldMask & whichField))
    {
        _sfUseCallbackForReshape.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (LastUpdateTimeFieldMask & whichField))
    {
        _sfLastUpdateTime.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (LockCursorFieldMask & whichField))
    {
        _sfLockCursor.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (EventProducerFieldMask & whichField))
    {
        _sfEventProducer.copyFromBin(pMem);
    }
}




/*------------------------- constructors ----------------------------------*/

WindowEventProducerBase::WindowEventProducerBase(void) :
    _Producer(&getProducerType()),
    Inherited(),
    _sfEnabled                (),
    _sfUseCallbackForDraw     (bool(false)),
    _sfUseCallbackForReshape  (bool(false)),
    _sfLastUpdateTime         (Time(-1.0)),
    _sfLockCursor             (bool(false))
    ,_sfEventProducer(&_Producer)
{
}

WindowEventProducerBase::WindowEventProducerBase(const WindowEventProducerBase &source) :
    _Producer(&source.getProducerType()),
    Inherited(source),
    _sfEnabled                (source._sfEnabled                ),
    _sfUseCallbackForDraw     (source._sfUseCallbackForDraw     ),
    _sfUseCallbackForReshape  (source._sfUseCallbackForReshape  ),
    _sfLastUpdateTime         (source._sfLastUpdateTime         ),
    _sfLockCursor             (source._sfLockCursor             )
    ,_sfEventProducer(&_Producer)
{
}


/*-------------------------- destructors ----------------------------------*/

WindowEventProducerBase::~WindowEventProducerBase(void)
{
}


GetFieldHandlePtr WindowEventProducerBase::getHandleEnabled         (void) const
{
    SFBool::GetHandlePtr returnValue(
        new  SFBool::GetHandle(
             &_sfEnabled,
             this->getType().getFieldDesc(EnabledFieldId),
             const_cast<WindowEventProducerBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr WindowEventProducerBase::editHandleEnabled        (void)
{
    SFBool::EditHandlePtr returnValue(
        new  SFBool::EditHandle(
             &_sfEnabled,
             this->getType().getFieldDesc(EnabledFieldId),
             this));


    editSField(EnabledFieldMask);

    return returnValue;
}

GetFieldHandlePtr WindowEventProducerBase::getHandleUseCallbackForDraw (void) const
{
    SFBool::GetHandlePtr returnValue(
        new  SFBool::GetHandle(
             &_sfUseCallbackForDraw,
             this->getType().getFieldDesc(UseCallbackForDrawFieldId),
             const_cast<WindowEventProducerBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr WindowEventProducerBase::editHandleUseCallbackForDraw(void)
{
    SFBool::EditHandlePtr returnValue(
        new  SFBool::EditHandle(
             &_sfUseCallbackForDraw,
             this->getType().getFieldDesc(UseCallbackForDrawFieldId),
             this));


    editSField(UseCallbackForDrawFieldMask);

    return returnValue;
}

GetFieldHandlePtr WindowEventProducerBase::getHandleUseCallbackForReshape (void) const
{
    SFBool::GetHandlePtr returnValue(
        new  SFBool::GetHandle(
             &_sfUseCallbackForReshape,
             this->getType().getFieldDesc(UseCallbackForReshapeFieldId),
             const_cast<WindowEventProducerBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr WindowEventProducerBase::editHandleUseCallbackForReshape(void)
{
    SFBool::EditHandlePtr returnValue(
        new  SFBool::EditHandle(
             &_sfUseCallbackForReshape,
             this->getType().getFieldDesc(UseCallbackForReshapeFieldId),
             this));


    editSField(UseCallbackForReshapeFieldMask);

    return returnValue;
}

GetFieldHandlePtr WindowEventProducerBase::getHandleLastUpdateTime  (void) const
{
    SFTime::GetHandlePtr returnValue(
        new  SFTime::GetHandle(
             &_sfLastUpdateTime,
             this->getType().getFieldDesc(LastUpdateTimeFieldId),
             const_cast<WindowEventProducerBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr WindowEventProducerBase::editHandleLastUpdateTime (void)
{
    SFTime::EditHandlePtr returnValue(
        new  SFTime::EditHandle(
             &_sfLastUpdateTime,
             this->getType().getFieldDesc(LastUpdateTimeFieldId),
             this));


    editSField(LastUpdateTimeFieldMask);

    return returnValue;
}

GetFieldHandlePtr WindowEventProducerBase::getHandleLockCursor      (void) const
{
    SFBool::GetHandlePtr returnValue(
        new  SFBool::GetHandle(
             &_sfLockCursor,
             this->getType().getFieldDesc(LockCursorFieldId),
             const_cast<WindowEventProducerBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr WindowEventProducerBase::editHandleLockCursor     (void)
{
    SFBool::EditHandlePtr returnValue(
        new  SFBool::EditHandle(
             &_sfLockCursor,
             this->getType().getFieldDesc(LockCursorFieldId),
             this));


    editSField(LockCursorFieldMask);

    return returnValue;
}


GetFieldHandlePtr WindowEventProducerBase::getHandleEventProducer        (void) const
{
    SFEventProducerPtr::GetHandlePtr returnValue(
        new  SFEventProducerPtr::GetHandle(
             &_sfEventProducer,
             this->getType().getFieldDesc(EventProducerFieldId),
             const_cast<WindowEventProducerBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr WindowEventProducerBase::editHandleEventProducer       (void)
{
    SFEventProducerPtr::EditHandlePtr returnValue(
        new  SFEventProducerPtr::EditHandle(
             &_sfEventProducer,
             this->getType().getFieldDesc(EventProducerFieldId),
             this));


    editSField(EventProducerFieldMask);

    return returnValue;
}


#ifdef OSG_MT_CPTR_ASPECT
void WindowEventProducerBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    WindowEventProducer *pThis = static_cast<WindowEventProducer *>(this);

    pThis->execSync(static_cast<WindowEventProducer *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif



void WindowEventProducerBase::resolveLinks(void)
{
    Inherited::resolveLinks();


}


OSG_END_NAMESPACE
