/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact: dirk@opensg.org, gerrit.voss@vossg.org, jbehr@zgdv.de          *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class WindowEventProducer
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#ifndef _OSGWINDOWEVENTPRODUCERBASE_H_
#define _OSGWINDOWEVENTPRODUCERBASE_H_
#ifdef __sgi
#pragma once
#endif


#include "OSGConfig.h"
#include "OSGSystemDef.h"

//#include "OSGBaseTypes.h"

#include "OSGWindow.h" // Parent

#include "OSGSysFields.h"               // Enabled type
#include "OSGBaseFields.h"              // LastUpdateTime type

#include "OSGWindowEventProducerFields.h"

//Event Producer Headerss
#include "OSGConsumableEventCombiner.h"
#include "OSGActivity.h"
#include <boost/signals2.hpp>

#include "OSGWindowEventFields.h"
#include "OSGWindowEventFields.h"
#include "OSGWindowEventFields.h"
#include "OSGWindowEventFields.h"
#include "OSGWindowEventFields.h"
#include "OSGWindowEventFields.h"
#include "OSGWindowEventFields.h"
#include "OSGWindowEventFields.h"
#include "OSGWindowEventFields.h"
#include "OSGMouseEventFields.h"
#include "OSGMouseEventFields.h"
#include "OSGMouseEventFields.h"
#include "OSGMouseEventFields.h"
#include "OSGMouseEventFields.h"
#include "OSGMouseEventFields.h"
#include "OSGMouseEventFields.h"
#include "OSGMouseWheelEventFields.h"
#include "OSGKeyEventFields.h"
#include "OSGKeyEventFields.h"
#include "OSGKeyEventFields.h"
#include "OSGUpdateEventFields.h"
OSG_BEGIN_NAMESPACE

class WindowEventProducer;

//! \brief WindowEventProducer Base Class.

class OSG_SYSTEM_DLLMAPPING WindowEventProducerBase : public Window
{
  public:

    typedef Window Inherited;
    typedef Window ParentContainer;

    typedef Inherited::TypeObject TypeObject;
    typedef TypeObject::InitPhase InitPhase;

    OSG_GEN_INTERNALPTR(WindowEventProducer);
    
    
    typedef WindowEvent        WindowOpenedEventType;
    typedef WindowEvent        WindowClosingEventType;
    typedef WindowEvent        WindowClosedEventType;
    typedef WindowEvent        WindowIconifiedEventType;
    typedef WindowEvent        WindowDeiconifiedEventType;
    typedef WindowEvent        WindowActivatedEventType;
    typedef WindowEvent        WindowDeactivatedEventType;
    typedef WindowEvent        WindowEnteredEventType;
    typedef WindowEvent        WindowExitedEventType;
    typedef MouseEvent         MouseClickedEventType;
    typedef MouseEvent         MouseEnteredEventType;
    typedef MouseEvent         MouseExitedEventType;
    typedef MouseEvent         MousePressedEventType;
    typedef MouseEvent         MouseReleasedEventType;
    typedef MouseEvent         MouseMovedEventType;
    typedef MouseEvent         MouseDraggedEventType;
    typedef MouseWheelEvent    MouseWheelMovedEventType;
    typedef KeyEvent           KeyPressedEventType;
    typedef KeyEvent           KeyReleasedEventType;
    typedef KeyEvent           KeyTypedEventType;
    typedef UpdateEvent        UpdateEventType;

    typedef boost::signals2::signal<void (Event* const            , UInt32)> BaseMethodType;
    typedef boost::signals2::signal<void (WindowEvent* const      , UInt32), ConsumableEventCombiner> WindowOpenedMethodType;
    typedef boost::signals2::signal<void (WindowEvent* const      , UInt32), ConsumableEventCombiner> WindowClosingMethodType;
    typedef boost::signals2::signal<void (WindowEvent* const      , UInt32), ConsumableEventCombiner> WindowClosedMethodType;
    typedef boost::signals2::signal<void (WindowEvent* const      , UInt32), ConsumableEventCombiner> WindowIconifiedMethodType;
    typedef boost::signals2::signal<void (WindowEvent* const      , UInt32), ConsumableEventCombiner> WindowDeiconifiedMethodType;
    typedef boost::signals2::signal<void (WindowEvent* const      , UInt32), ConsumableEventCombiner> WindowActivatedMethodType;
    typedef boost::signals2::signal<void (WindowEvent* const      , UInt32), ConsumableEventCombiner> WindowDeactivatedMethodType;
    typedef boost::signals2::signal<void (WindowEvent* const      , UInt32), ConsumableEventCombiner> WindowEnteredMethodType;
    typedef boost::signals2::signal<void (WindowEvent* const      , UInt32), ConsumableEventCombiner> WindowExitedMethodType;
    typedef boost::signals2::signal<void (MouseEvent* const       , UInt32), ConsumableEventCombiner> MouseClickedMethodType;
    typedef boost::signals2::signal<void (MouseEvent* const       , UInt32), ConsumableEventCombiner> MouseEnteredMethodType;
    typedef boost::signals2::signal<void (MouseEvent* const       , UInt32), ConsumableEventCombiner> MouseExitedMethodType;
    typedef boost::signals2::signal<void (MouseEvent* const       , UInt32), ConsumableEventCombiner> MousePressedMethodType;
    typedef boost::signals2::signal<void (MouseEvent* const       , UInt32), ConsumableEventCombiner> MouseReleasedMethodType;
    typedef boost::signals2::signal<void (MouseEvent* const       , UInt32), ConsumableEventCombiner> MouseMovedMethodType;
    typedef boost::signals2::signal<void (MouseEvent* const       , UInt32), ConsumableEventCombiner> MouseDraggedMethodType;
    typedef boost::signals2::signal<void (MouseWheelEvent* const  , UInt32), ConsumableEventCombiner> MouseWheelMovedMethodType;
    typedef boost::signals2::signal<void (KeyEvent* const         , UInt32), ConsumableEventCombiner> KeyPressedMethodType;
    typedef boost::signals2::signal<void (KeyEvent* const         , UInt32), ConsumableEventCombiner> KeyReleasedMethodType;
    typedef boost::signals2::signal<void (KeyEvent* const         , UInt32), ConsumableEventCombiner> KeyTypedMethodType;
    typedef boost::signals2::signal<void (UpdateEvent* const      , UInt32), ConsumableEventCombiner> UpdateMethodType;

    /*==========================  PUBLIC  =================================*/

  public:

    enum
    {
        EnabledFieldId = Inherited::NextFieldId,
        UseCallbackForDrawFieldId = EnabledFieldId + 1,
        UseCallbackForReshapeFieldId = UseCallbackForDrawFieldId + 1,
        LastUpdateTimeFieldId = UseCallbackForReshapeFieldId + 1,
        LockCursorFieldId = LastUpdateTimeFieldId + 1,
        NextFieldId = LockCursorFieldId + 1
    };

    static const OSG::BitVector EnabledFieldMask =
        (TypeTraits<BitVector>::One << EnabledFieldId);
    static const OSG::BitVector UseCallbackForDrawFieldMask =
        (TypeTraits<BitVector>::One << UseCallbackForDrawFieldId);
    static const OSG::BitVector UseCallbackForReshapeFieldMask =
        (TypeTraits<BitVector>::One << UseCallbackForReshapeFieldId);
    static const OSG::BitVector LastUpdateTimeFieldMask =
        (TypeTraits<BitVector>::One << LastUpdateTimeFieldId);
    static const OSG::BitVector LockCursorFieldMask =
        (TypeTraits<BitVector>::One << LockCursorFieldId);
    static const OSG::BitVector NextFieldMask =
        (TypeTraits<BitVector>::One << NextFieldId);
        
    typedef SFBool            SFEnabledType;
    typedef SFBool            SFUseCallbackForDrawType;
    typedef SFBool            SFUseCallbackForReshapeType;
    typedef SFTime            SFLastUpdateTimeType;
    typedef SFBool            SFLockCursorType;

    enum
    {
        WindowOpenedMethodId = 1,
        WindowClosingMethodId = WindowOpenedMethodId + 1,
        WindowClosedMethodId = WindowClosingMethodId + 1,
        WindowIconifiedMethodId = WindowClosedMethodId + 1,
        WindowDeiconifiedMethodId = WindowIconifiedMethodId + 1,
        WindowActivatedMethodId = WindowDeiconifiedMethodId + 1,
        WindowDeactivatedMethodId = WindowActivatedMethodId + 1,
        WindowEnteredMethodId = WindowDeactivatedMethodId + 1,
        WindowExitedMethodId = WindowEnteredMethodId + 1,
        MouseClickedMethodId = WindowExitedMethodId + 1,
        MouseEnteredMethodId = MouseClickedMethodId + 1,
        MouseExitedMethodId = MouseEnteredMethodId + 1,
        MousePressedMethodId = MouseExitedMethodId + 1,
        MouseReleasedMethodId = MousePressedMethodId + 1,
        MouseMovedMethodId = MouseReleasedMethodId + 1,
        MouseDraggedMethodId = MouseMovedMethodId + 1,
        MouseWheelMovedMethodId = MouseDraggedMethodId + 1,
        KeyPressedMethodId = MouseWheelMovedMethodId + 1,
        KeyReleasedMethodId = KeyPressedMethodId + 1,
        KeyTypedMethodId = KeyReleasedMethodId + 1,
        UpdateMethodId = KeyTypedMethodId + 1,
        NextProducedMethodId = UpdateMethodId + 1
    };

    /*---------------------------------------------------------------------*/
    /*! \name                    Class Get                                 */
    /*! \{                                                                 */

    static FieldContainerType &getClassType   (void);
    static UInt32              getClassTypeId (void);
    static UInt16              getClassGroupId(void);
    static const  EventProducerType  &getProducerClassType  (void);
    static        UInt32              getProducerClassTypeId(void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                FieldContainer Get                            */
    /*! \{                                                                 */

    virtual       FieldContainerType &getType         (void);
    virtual const FieldContainerType &getType         (void) const;

    virtual       UInt32              getContainerSize(void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Get                                 */
    /*! \{                                                                 */


                  SFBool              *editSFEnabled        (void);
            const SFBool              *getSFEnabled         (void) const;

                  SFBool              *editSFUseCallbackForDraw(void);
            const SFBool              *getSFUseCallbackForDraw (void) const;

                  SFBool              *editSFUseCallbackForReshape(void);
            const SFBool              *getSFUseCallbackForReshape (void) const;

                  SFTime              *editSFLastUpdateTime (void);
            const SFTime              *getSFLastUpdateTime  (void) const;

                  SFBool              *editSFLockCursor     (void);
            const SFBool              *getSFLockCursor      (void) const;


                  bool                &editEnabled        (void);
                  bool                 getEnabled         (void) const;

                  bool                &editUseCallbackForDraw(void);
                  bool                 getUseCallbackForDraw (void) const;

                  bool                &editUseCallbackForReshape(void);
                  bool                 getUseCallbackForReshape (void) const;

                  Time                &editLastUpdateTime (void);
            const Time                &getLastUpdateTime  (void) const;

                  bool                &editLockCursor     (void);
                  bool                 getLockCursor      (void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Set                                 */
    /*! \{                                                                 */

            void setEnabled        (const bool value);
            void setUseCallbackForDraw(const bool value);
            void setUseCallbackForReshape(const bool value);
            void setLastUpdateTime (const Time &value);
            void setLockCursor     (const bool value);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                Ptr MField Set                                */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Binary Access                              */
    /*! \{                                                                 */

    virtual UInt32 getBinSize (ConstFieldMaskArg  whichField);
    virtual void   copyToBin  (BinaryDataHandler &pMem,
                               ConstFieldMaskArg  whichField);
    virtual void   copyFromBin(BinaryDataHandler &pMem,
                               ConstFieldMaskArg  whichField);


    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                Method Produced Get                           */
    /*! \{                                                                 */

    virtual const EventProducerType &getProducerType(void) const; 
                                                         
    virtual UInt32                   getNumProducedEvents       (void                                ) const;
    virtual const MethodDescription *getProducedEventDescription(const std::string &ProducedEventName) const;
    virtual const MethodDescription *getProducedEventDescription(UInt32 ProducedEventId              ) const;
    virtual UInt32                   getProducedEventId         (const std::string &ProducedEventName) const;
    
    virtual boost::signals2::connection connectMethod(UInt32 methodId, 
                                              const BaseMethodType::slot_type &listener,
                                              boost::signals2::connect_position at= boost::signals2::at_back);
                                              
    virtual boost::signals2::connection connectMethod(UInt32 methodId, 
                                              const BaseMethodType::group_type &group,
                                              const BaseMethodType::slot_type &listener,
                                              boost::signals2::connect_position at= boost::signals2::at_back);
    
    virtual void   disconnectMethod        (UInt32 methodId, const BaseMethodType::group_type &group);
    virtual void   disconnectAllSlotsMethod(UInt32 methodId);
    virtual bool   isEmptyMethod           (UInt32 methodId) const;
    virtual UInt32 numSlotsMethod          (UInt32 methodId) const;

    /*! \}                                                                 */
    /*! \name                Method Access                                 */
    /*! \{                                                                 */
    
    //WindowOpened
    boost::signals2::connection connectWindowOpened   (const WindowOpenedMethodType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    boost::signals2::connection connectWindowOpened   (const WindowOpenedMethodType::group_type &group,
                                                       const WindowOpenedMethodType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    void   disconnectWindowOpened           (const WindowOpenedMethodType::group_type &group);
    void   disconnectAllSlotsWindowOpened   (void);
    bool   isEmptyWindowOpened              (void) const;
    UInt32 numSlotsWindowOpened             (void) const;
    
    //WindowClosing
    boost::signals2::connection connectWindowClosing  (const WindowClosingMethodType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    boost::signals2::connection connectWindowClosing  (const WindowClosingMethodType::group_type &group,
                                                       const WindowClosingMethodType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    void   disconnectWindowClosing          (const WindowClosingMethodType::group_type &group);
    void   disconnectAllSlotsWindowClosing  (void);
    bool   isEmptyWindowClosing             (void) const;
    UInt32 numSlotsWindowClosing            (void) const;
    
    //WindowClosed
    boost::signals2::connection connectWindowClosed   (const WindowClosedMethodType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    boost::signals2::connection connectWindowClosed   (const WindowClosedMethodType::group_type &group,
                                                       const WindowClosedMethodType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    void   disconnectWindowClosed           (const WindowClosedMethodType::group_type &group);
    void   disconnectAllSlotsWindowClosed   (void);
    bool   isEmptyWindowClosed              (void) const;
    UInt32 numSlotsWindowClosed             (void) const;
    
    //WindowIconified
    boost::signals2::connection connectWindowIconified(const WindowIconifiedMethodType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    boost::signals2::connection connectWindowIconified(const WindowIconifiedMethodType::group_type &group,
                                                       const WindowIconifiedMethodType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    void   disconnectWindowIconified        (const WindowIconifiedMethodType::group_type &group);
    void   disconnectAllSlotsWindowIconified(void);
    bool   isEmptyWindowIconified           (void) const;
    UInt32 numSlotsWindowIconified          (void) const;
    
    //WindowDeiconified
    boost::signals2::connection connectWindowDeiconified(const WindowDeiconifiedMethodType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    boost::signals2::connection connectWindowDeiconified(const WindowDeiconifiedMethodType::group_type &group,
                                                       const WindowDeiconifiedMethodType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    void   disconnectWindowDeiconified      (const WindowDeiconifiedMethodType::group_type &group);
    void   disconnectAllSlotsWindowDeiconified(void);
    bool   isEmptyWindowDeiconified         (void) const;
    UInt32 numSlotsWindowDeiconified        (void) const;
    
    //WindowActivated
    boost::signals2::connection connectWindowActivated(const WindowActivatedMethodType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    boost::signals2::connection connectWindowActivated(const WindowActivatedMethodType::group_type &group,
                                                       const WindowActivatedMethodType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    void   disconnectWindowActivated        (const WindowActivatedMethodType::group_type &group);
    void   disconnectAllSlotsWindowActivated(void);
    bool   isEmptyWindowActivated           (void) const;
    UInt32 numSlotsWindowActivated          (void) const;
    
    //WindowDeactivated
    boost::signals2::connection connectWindowDeactivated(const WindowDeactivatedMethodType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    boost::signals2::connection connectWindowDeactivated(const WindowDeactivatedMethodType::group_type &group,
                                                       const WindowDeactivatedMethodType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    void   disconnectWindowDeactivated      (const WindowDeactivatedMethodType::group_type &group);
    void   disconnectAllSlotsWindowDeactivated(void);
    bool   isEmptyWindowDeactivated         (void) const;
    UInt32 numSlotsWindowDeactivated        (void) const;
    
    //WindowEntered
    boost::signals2::connection connectWindowEntered  (const WindowEnteredMethodType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    boost::signals2::connection connectWindowEntered  (const WindowEnteredMethodType::group_type &group,
                                                       const WindowEnteredMethodType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    void   disconnectWindowEntered          (const WindowEnteredMethodType::group_type &group);
    void   disconnectAllSlotsWindowEntered  (void);
    bool   isEmptyWindowEntered             (void) const;
    UInt32 numSlotsWindowEntered            (void) const;
    
    //WindowExited
    boost::signals2::connection connectWindowExited   (const WindowExitedMethodType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    boost::signals2::connection connectWindowExited   (const WindowExitedMethodType::group_type &group,
                                                       const WindowExitedMethodType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    void   disconnectWindowExited           (const WindowExitedMethodType::group_type &group);
    void   disconnectAllSlotsWindowExited   (void);
    bool   isEmptyWindowExited              (void) const;
    UInt32 numSlotsWindowExited             (void) const;
    
    //MouseClicked
    boost::signals2::connection connectMouseClicked   (const MouseClickedMethodType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    boost::signals2::connection connectMouseClicked   (const MouseClickedMethodType::group_type &group,
                                                       const MouseClickedMethodType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    void   disconnectMouseClicked           (const MouseClickedMethodType::group_type &group);
    void   disconnectAllSlotsMouseClicked   (void);
    bool   isEmptyMouseClicked              (void) const;
    UInt32 numSlotsMouseClicked             (void) const;
    
    //MouseEntered
    boost::signals2::connection connectMouseEntered   (const MouseEnteredMethodType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    boost::signals2::connection connectMouseEntered   (const MouseEnteredMethodType::group_type &group,
                                                       const MouseEnteredMethodType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    void   disconnectMouseEntered           (const MouseEnteredMethodType::group_type &group);
    void   disconnectAllSlotsMouseEntered   (void);
    bool   isEmptyMouseEntered              (void) const;
    UInt32 numSlotsMouseEntered             (void) const;
    
    //MouseExited
    boost::signals2::connection connectMouseExited    (const MouseExitedMethodType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    boost::signals2::connection connectMouseExited    (const MouseExitedMethodType::group_type &group,
                                                       const MouseExitedMethodType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    void   disconnectMouseExited            (const MouseExitedMethodType::group_type &group);
    void   disconnectAllSlotsMouseExited    (void);
    bool   isEmptyMouseExited               (void) const;
    UInt32 numSlotsMouseExited              (void) const;
    
    //MousePressed
    boost::signals2::connection connectMousePressed   (const MousePressedMethodType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    boost::signals2::connection connectMousePressed   (const MousePressedMethodType::group_type &group,
                                                       const MousePressedMethodType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    void   disconnectMousePressed           (const MousePressedMethodType::group_type &group);
    void   disconnectAllSlotsMousePressed   (void);
    bool   isEmptyMousePressed              (void) const;
    UInt32 numSlotsMousePressed             (void) const;
    
    //MouseReleased
    boost::signals2::connection connectMouseReleased  (const MouseReleasedMethodType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    boost::signals2::connection connectMouseReleased  (const MouseReleasedMethodType::group_type &group,
                                                       const MouseReleasedMethodType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    void   disconnectMouseReleased          (const MouseReleasedMethodType::group_type &group);
    void   disconnectAllSlotsMouseReleased  (void);
    bool   isEmptyMouseReleased             (void) const;
    UInt32 numSlotsMouseReleased            (void) const;
    
    //MouseMoved
    boost::signals2::connection connectMouseMoved     (const MouseMovedMethodType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    boost::signals2::connection connectMouseMoved     (const MouseMovedMethodType::group_type &group,
                                                       const MouseMovedMethodType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    void   disconnectMouseMoved             (const MouseMovedMethodType::group_type &group);
    void   disconnectAllSlotsMouseMoved     (void);
    bool   isEmptyMouseMoved                (void) const;
    UInt32 numSlotsMouseMoved               (void) const;
    
    //MouseDragged
    boost::signals2::connection connectMouseDragged   (const MouseDraggedMethodType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    boost::signals2::connection connectMouseDragged   (const MouseDraggedMethodType::group_type &group,
                                                       const MouseDraggedMethodType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    void   disconnectMouseDragged           (const MouseDraggedMethodType::group_type &group);
    void   disconnectAllSlotsMouseDragged   (void);
    bool   isEmptyMouseDragged              (void) const;
    UInt32 numSlotsMouseDragged             (void) const;
    
    //MouseWheelMoved
    boost::signals2::connection connectMouseWheelMoved(const MouseWheelMovedMethodType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    boost::signals2::connection connectMouseWheelMoved(const MouseWheelMovedMethodType::group_type &group,
                                                       const MouseWheelMovedMethodType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    void   disconnectMouseWheelMoved        (const MouseWheelMovedMethodType::group_type &group);
    void   disconnectAllSlotsMouseWheelMoved(void);
    bool   isEmptyMouseWheelMoved           (void) const;
    UInt32 numSlotsMouseWheelMoved          (void) const;
    
    //KeyPressed
    boost::signals2::connection connectKeyPressed     (const KeyPressedMethodType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    boost::signals2::connection connectKeyPressed     (const KeyPressedMethodType::group_type &group,
                                                       const KeyPressedMethodType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    void   disconnectKeyPressed             (const KeyPressedMethodType::group_type &group);
    void   disconnectAllSlotsKeyPressed     (void);
    bool   isEmptyKeyPressed                (void) const;
    UInt32 numSlotsKeyPressed               (void) const;
    
    //KeyReleased
    boost::signals2::connection connectKeyReleased    (const KeyReleasedMethodType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    boost::signals2::connection connectKeyReleased    (const KeyReleasedMethodType::group_type &group,
                                                       const KeyReleasedMethodType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    void   disconnectKeyReleased            (const KeyReleasedMethodType::group_type &group);
    void   disconnectAllSlotsKeyReleased    (void);
    bool   isEmptyKeyReleased               (void) const;
    UInt32 numSlotsKeyReleased              (void) const;
    
    //KeyTyped
    boost::signals2::connection connectKeyTyped       (const KeyTypedMethodType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    boost::signals2::connection connectKeyTyped       (const KeyTypedMethodType::group_type &group,
                                                       const KeyTypedMethodType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    void   disconnectKeyTyped               (const KeyTypedMethodType::group_type &group);
    void   disconnectAllSlotsKeyTyped       (void);
    bool   isEmptyKeyTyped                  (void) const;
    UInt32 numSlotsKeyTyped                 (void) const;
    
    //Update
    boost::signals2::connection connectUpdate         (const UpdateMethodType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    boost::signals2::connection connectUpdate         (const UpdateMethodType::group_type &group,
                                                       const UpdateMethodType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    void   disconnectUpdate                 (const UpdateMethodType::group_type &group);
    void   disconnectAllSlotsUpdate         (void);
    bool   isEmptyUpdate                    (void) const;
    UInt32 numSlotsUpdate                   (void) const;
    
    
    /*! \}                                                                 */
    /*=========================  PROTECTED  ===============================*/

  protected:
    /*---------------------------------------------------------------------*/
    /*! \name                    Produced Method Signals                   */
    /*! \{                                                                 */

    //Event Method producers
    WindowOpenedMethodType _WindowOpenedMethod;
    WindowClosingMethodType _WindowClosingMethod;
    WindowClosedMethodType _WindowClosedMethod;
    WindowIconifiedMethodType _WindowIconifiedMethod;
    WindowDeiconifiedMethodType _WindowDeiconifiedMethod;
    WindowActivatedMethodType _WindowActivatedMethod;
    WindowDeactivatedMethodType _WindowDeactivatedMethod;
    WindowEnteredMethodType _WindowEnteredMethod;
    WindowExitedMethodType _WindowExitedMethod;
    MouseClickedMethodType _MouseClickedMethod;
    MouseEnteredMethodType _MouseEnteredMethod;
    MouseExitedMethodType _MouseExitedMethod;
    MousePressedMethodType _MousePressedMethod;
    MouseReleasedMethodType _MouseReleasedMethod;
    MouseMovedMethodType _MouseMovedMethod;
    MouseDraggedMethodType _MouseDraggedMethod;
    MouseWheelMovedMethodType _MouseWheelMovedMethod;
    KeyPressedMethodType _KeyPressedMethod;
    KeyReleasedMethodType _KeyReleasedMethod;
    KeyTypedMethodType _KeyTypedMethod;
    UpdateMethodType _UpdateMethod;
    /*! \}                                                                 */

    static TypeObject _type;

    static       void   classDescInserter(TypeObject &oType);
    static const Char8 *getClassname     (void             );

    /*---------------------------------------------------------------------*/
    /*! \name                      Fields                                  */
    /*! \{                                                                 */

    SFBool            _sfEnabled;
    SFBool            _sfUseCallbackForDraw;
    SFBool            _sfUseCallbackForReshape;
    SFTime            _sfLastUpdateTime;
    SFBool            _sfLockCursor;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Constructors                               */
    /*! \{                                                                 */

    WindowEventProducerBase(void);
    WindowEventProducerBase(const WindowEventProducerBase &source);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Destructors                                */
    /*! \{                                                                 */

    virtual ~WindowEventProducerBase(void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                     onCreate                                */
    /*! \{                                                                 */


    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Generic Field Access                      */
    /*! \{                                                                 */

    GetFieldHandlePtr  getHandleEnabled         (void) const;
    EditFieldHandlePtr editHandleEnabled        (void);
    GetFieldHandlePtr  getHandleUseCallbackForDraw (void) const;
    EditFieldHandlePtr editHandleUseCallbackForDraw(void);
    GetFieldHandlePtr  getHandleUseCallbackForReshape (void) const;
    EditFieldHandlePtr editHandleUseCallbackForReshape(void);
    GetFieldHandlePtr  getHandleLastUpdateTime  (void) const;
    EditFieldHandlePtr editHandleLastUpdateTime (void);
    GetFieldHandlePtr  getHandleLockCursor      (void) const;
    EditFieldHandlePtr editHandleLockCursor     (void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Generic Method Access                     */
    /*! \{                                                                 */

    GetMethodHandlePtr getHandleWindowOpenedSignal(void) const;
    GetMethodHandlePtr getHandleWindowClosingSignal(void) const;
    GetMethodHandlePtr getHandleWindowClosedSignal(void) const;
    GetMethodHandlePtr getHandleWindowIconifiedSignal(void) const;
    GetMethodHandlePtr getHandleWindowDeiconifiedSignal(void) const;
    GetMethodHandlePtr getHandleWindowActivatedSignal(void) const;
    GetMethodHandlePtr getHandleWindowDeactivatedSignal(void) const;
    GetMethodHandlePtr getHandleWindowEnteredSignal(void) const;
    GetMethodHandlePtr getHandleWindowExitedSignal(void) const;
    GetMethodHandlePtr getHandleMouseClickedSignal(void) const;
    GetMethodHandlePtr getHandleMouseEnteredSignal(void) const;
    GetMethodHandlePtr getHandleMouseExitedSignal(void) const;
    GetMethodHandlePtr getHandleMousePressedSignal(void) const;
    GetMethodHandlePtr getHandleMouseReleasedSignal(void) const;
    GetMethodHandlePtr getHandleMouseMovedSignal(void) const;
    GetMethodHandlePtr getHandleMouseDraggedSignal(void) const;
    GetMethodHandlePtr getHandleMouseWheelMovedSignal(void) const;
    GetMethodHandlePtr getHandleKeyPressedSignal(void) const;
    GetMethodHandlePtr getHandleKeyReleasedSignal(void) const;
    GetMethodHandlePtr getHandleKeyTypedSignal(void) const;
    GetMethodHandlePtr getHandleUpdateSignal(void) const;
    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Event Producer Firing                   */
    /*! \{                                                                 */

    virtual void produceEvent       (UInt32 methodId, Event* const e);
    
    void produceWindowOpened        (WindowOpenedEventType* const e);
    void produceWindowClosing       (WindowClosingEventType* const e);
    void produceWindowClosed        (WindowClosedEventType* const e);
    void produceWindowIconified     (WindowIconifiedEventType* const e);
    void produceWindowDeiconified   (WindowDeiconifiedEventType* const e);
    void produceWindowActivated     (WindowActivatedEventType* const e);
    void produceWindowDeactivated   (WindowDeactivatedEventType* const e);
    void produceWindowEntered       (WindowEnteredEventType* const e);
    void produceWindowExited        (WindowExitedEventType* const e);
    void produceMouseClicked        (MouseClickedEventType* const e);
    void produceMouseEntered        (MouseEnteredEventType* const e);
    void produceMouseExited         (MouseExitedEventType* const e);
    void produceMousePressed        (MousePressedEventType* const e);
    void produceMouseReleased       (MouseReleasedEventType* const e);
    void produceMouseMoved          (MouseMovedEventType* const e);
    void produceMouseDragged        (MouseDraggedEventType* const e);
    void produceMouseWheelMoved     (MouseWheelMovedEventType* const e);
    void produceKeyPressed          (KeyPressedEventType* const e);
    void produceKeyReleased         (KeyReleasedEventType* const e);
    void produceKeyTyped            (KeyTypedEventType* const e);
    void produceUpdate              (UpdateEventType* const e);
    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

#ifdef OSG_MT_CPTR_ASPECT
    virtual void execSyncV(      FieldContainer    &oFrom,
                                 ConstFieldMaskArg  whichField,
                                 AspectOffsetStore &oOffsets,
                                 ConstFieldMaskArg  syncMode  ,
                           const UInt32             uiSyncInfo);

            void execSync (      WindowEventProducerBase *pFrom,
                                 ConstFieldMaskArg  whichField,
                                 AspectOffsetStore &oOffsets,
                                 ConstFieldMaskArg  syncMode  ,
                           const UInt32             uiSyncInfo);
#endif

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Edit                                   */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                     Aspect Create                            */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Edit                                   */
    /*! \{                                                                 */
    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

    virtual void resolveLinks(void);

    /*! \}                                                                 */
    /*==========================  PRIVATE  ================================*/

  private:
    /*---------------------------------------------------------------------*/
    static MethodDescription   *_methodDesc[];
    static EventProducerType _producerType;


    // prohibit default functions (move to 'public' if you need one)
    void operator =(const WindowEventProducerBase &source);
};

typedef WindowEventProducerBase *WindowEventProducerBaseP;

OSG_END_NAMESPACE

#endif /* _OSGWINDOWEVENTPRODUCERBASE_H_ */
