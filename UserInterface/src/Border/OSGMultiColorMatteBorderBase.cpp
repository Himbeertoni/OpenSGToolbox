/*---------------------------------------------------------------------------*\
 *                     OpenSG ToolBox UserInterface                          *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                         www.vrac.iastate.edu                              *
 *                                                                           *
 *   Authors: David Kabala, Alden Peterson, Lee Zaniewski, Jonathan Flory    *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class MultiColorMatteBorder!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#define OSG_COMPILEMULTICOLORMATTEBORDERINST

#include <stdlib.h>
#include <stdio.h>

#include <OpenSG/OSGConfig.h>

#include "OSGMultiColorMatteBorderBase.h"
#include "OSGMultiColorMatteBorder.h"


OSG_BEGIN_NAMESPACE

const OSG::BitVector  MultiColorMatteBorderBase::LeftWidthFieldMask = 
    (TypeTraits<BitVector>::One << MultiColorMatteBorderBase::LeftWidthFieldId);

const OSG::BitVector  MultiColorMatteBorderBase::RightWidthFieldMask = 
    (TypeTraits<BitVector>::One << MultiColorMatteBorderBase::RightWidthFieldId);

const OSG::BitVector  MultiColorMatteBorderBase::TopWidthFieldMask = 
    (TypeTraits<BitVector>::One << MultiColorMatteBorderBase::TopWidthFieldId);

const OSG::BitVector  MultiColorMatteBorderBase::BottomWidthFieldMask = 
    (TypeTraits<BitVector>::One << MultiColorMatteBorderBase::BottomWidthFieldId);

const OSG::BitVector  MultiColorMatteBorderBase::LeftLineTopColorFieldMask = 
    (TypeTraits<BitVector>::One << MultiColorMatteBorderBase::LeftLineTopColorFieldId);

const OSG::BitVector  MultiColorMatteBorderBase::LeftLineBottomColorFieldMask = 
    (TypeTraits<BitVector>::One << MultiColorMatteBorderBase::LeftLineBottomColorFieldId);

const OSG::BitVector  MultiColorMatteBorderBase::TopLineLeftColorFieldMask = 
    (TypeTraits<BitVector>::One << MultiColorMatteBorderBase::TopLineLeftColorFieldId);

const OSG::BitVector  MultiColorMatteBorderBase::TopLineRightColorFieldMask = 
    (TypeTraits<BitVector>::One << MultiColorMatteBorderBase::TopLineRightColorFieldId);

const OSG::BitVector  MultiColorMatteBorderBase::RightLineTopColorFieldMask = 
    (TypeTraits<BitVector>::One << MultiColorMatteBorderBase::RightLineTopColorFieldId);

const OSG::BitVector  MultiColorMatteBorderBase::RightLineBottomColorFieldMask = 
    (TypeTraits<BitVector>::One << MultiColorMatteBorderBase::RightLineBottomColorFieldId);

const OSG::BitVector  MultiColorMatteBorderBase::BottomLineLeftColorFieldMask = 
    (TypeTraits<BitVector>::One << MultiColorMatteBorderBase::BottomLineLeftColorFieldId);

const OSG::BitVector  MultiColorMatteBorderBase::BottomLineRightColorFieldMask = 
    (TypeTraits<BitVector>::One << MultiColorMatteBorderBase::BottomLineRightColorFieldId);

const OSG::BitVector MultiColorMatteBorderBase::MTInfluenceMask = 
    (Inherited::MTInfluenceMask) | 
    (static_cast<BitVector>(0x0) << Inherited::NextFieldId); 


// Field descriptions

/*! \var Real32          MultiColorMatteBorderBase::_sfLeftWidth
    
*/
/*! \var Real32          MultiColorMatteBorderBase::_sfRightWidth
    
*/
/*! \var Real32          MultiColorMatteBorderBase::_sfTopWidth
    
*/
/*! \var Real32          MultiColorMatteBorderBase::_sfBottomWidth
    
*/
/*! \var Color4f         MultiColorMatteBorderBase::_sfLeftLineTopColor
    
*/
/*! \var Color4f         MultiColorMatteBorderBase::_sfLeftLineBottomColor
    
*/
/*! \var Color4f         MultiColorMatteBorderBase::_sfTopLineLeftColor
    
*/
/*! \var Color4f         MultiColorMatteBorderBase::_sfTopLineRightColor
    
*/
/*! \var Color4f         MultiColorMatteBorderBase::_sfRightLineTopColor
    
*/
/*! \var Color4f         MultiColorMatteBorderBase::_sfRightLineBottomColor
    
*/
/*! \var Color4f         MultiColorMatteBorderBase::_sfBottomLineLeftColor
    
*/
/*! \var Color4f         MultiColorMatteBorderBase::_sfBottomLineRightColor
    
*/

//! MultiColorMatteBorder description

FieldDescription *MultiColorMatteBorderBase::_desc[] = 
{
    new FieldDescription(SFReal32::getClassType(), 
                     "LeftWidth", 
                     LeftWidthFieldId, LeftWidthFieldMask,
                     false,
                     (FieldAccessMethod) &MultiColorMatteBorderBase::getSFLeftWidth),
    new FieldDescription(SFReal32::getClassType(), 
                     "RightWidth", 
                     RightWidthFieldId, RightWidthFieldMask,
                     false,
                     (FieldAccessMethod) &MultiColorMatteBorderBase::getSFRightWidth),
    new FieldDescription(SFReal32::getClassType(), 
                     "TopWidth", 
                     TopWidthFieldId, TopWidthFieldMask,
                     false,
                     (FieldAccessMethod) &MultiColorMatteBorderBase::getSFTopWidth),
    new FieldDescription(SFReal32::getClassType(), 
                     "BottomWidth", 
                     BottomWidthFieldId, BottomWidthFieldMask,
                     false,
                     (FieldAccessMethod) &MultiColorMatteBorderBase::getSFBottomWidth),
    new FieldDescription(SFColor4f::getClassType(), 
                     "LeftLineTopColor", 
                     LeftLineTopColorFieldId, LeftLineTopColorFieldMask,
                     false,
                     (FieldAccessMethod) &MultiColorMatteBorderBase::getSFLeftLineTopColor),
    new FieldDescription(SFColor4f::getClassType(), 
                     "LeftLineBottomColor", 
                     LeftLineBottomColorFieldId, LeftLineBottomColorFieldMask,
                     false,
                     (FieldAccessMethod) &MultiColorMatteBorderBase::getSFLeftLineBottomColor),
    new FieldDescription(SFColor4f::getClassType(), 
                     "TopLineLeftColor", 
                     TopLineLeftColorFieldId, TopLineLeftColorFieldMask,
                     false,
                     (FieldAccessMethod) &MultiColorMatteBorderBase::getSFTopLineLeftColor),
    new FieldDescription(SFColor4f::getClassType(), 
                     "TopLineRightColor", 
                     TopLineRightColorFieldId, TopLineRightColorFieldMask,
                     false,
                     (FieldAccessMethod) &MultiColorMatteBorderBase::getSFTopLineRightColor),
    new FieldDescription(SFColor4f::getClassType(), 
                     "RightLineTopColor", 
                     RightLineTopColorFieldId, RightLineTopColorFieldMask,
                     false,
                     (FieldAccessMethod) &MultiColorMatteBorderBase::getSFRightLineTopColor),
    new FieldDescription(SFColor4f::getClassType(), 
                     "RightLineBottomColor", 
                     RightLineBottomColorFieldId, RightLineBottomColorFieldMask,
                     false,
                     (FieldAccessMethod) &MultiColorMatteBorderBase::getSFRightLineBottomColor),
    new FieldDescription(SFColor4f::getClassType(), 
                     "BottomLineLeftColor", 
                     BottomLineLeftColorFieldId, BottomLineLeftColorFieldMask,
                     false,
                     (FieldAccessMethod) &MultiColorMatteBorderBase::getSFBottomLineLeftColor),
    new FieldDescription(SFColor4f::getClassType(), 
                     "BottomLineRightColor", 
                     BottomLineRightColorFieldId, BottomLineRightColorFieldMask,
                     false,
                     (FieldAccessMethod) &MultiColorMatteBorderBase::getSFBottomLineRightColor)
};


FieldContainerType MultiColorMatteBorderBase::_type(
    "MultiColorMatteBorder",
    "Border",
    NULL,
    (PrototypeCreateF) &MultiColorMatteBorderBase::createEmpty,
    MultiColorMatteBorder::initMethod,
    _desc,
    sizeof(_desc));

//OSG_FIELD_CONTAINER_DEF(MultiColorMatteBorderBase, MultiColorMatteBorderPtr)

/*------------------------------ get -----------------------------------*/

FieldContainerType &MultiColorMatteBorderBase::getType(void) 
{
    return _type; 
} 

const FieldContainerType &MultiColorMatteBorderBase::getType(void) const 
{
    return _type;
} 


FieldContainerPtr MultiColorMatteBorderBase::shallowCopy(void) const 
{ 
    MultiColorMatteBorderPtr returnValue; 

    newPtr(returnValue, dynamic_cast<const MultiColorMatteBorder *>(this)); 

    return returnValue; 
}

UInt32 MultiColorMatteBorderBase::getContainerSize(void) const 
{ 
    return sizeof(MultiColorMatteBorder); 
}


#if !defined(OSG_FIXED_MFIELDSYNC)
void MultiColorMatteBorderBase::executeSync(      FieldContainer &other,
                                    const BitVector      &whichField)
{
    this->executeSyncImpl((MultiColorMatteBorderBase *) &other, whichField);
}
#else
void MultiColorMatteBorderBase::executeSync(      FieldContainer &other,
                                    const BitVector      &whichField,                                    const SyncInfo       &sInfo     )
{
    this->executeSyncImpl((MultiColorMatteBorderBase *) &other, whichField, sInfo);
}
void MultiColorMatteBorderBase::execBeginEdit(const BitVector &whichField, 
                                            UInt32     uiAspect,
                                            UInt32     uiContainerSize) 
{
    this->execBeginEditImpl(whichField, uiAspect, uiContainerSize);
}

void MultiColorMatteBorderBase::onDestroyAspect(UInt32 uiId, UInt32 uiAspect)
{
    Inherited::onDestroyAspect(uiId, uiAspect);

}
#endif

/*------------------------- constructors ----------------------------------*/

#ifdef OSG_WIN32_ICL
#pragma warning (disable : 383)
#endif

MultiColorMatteBorderBase::MultiColorMatteBorderBase(void) :
    _sfLeftWidth              (Real32(1)), 
    _sfRightWidth             (Real32(1)), 
    _sfTopWidth               (Real32(1)), 
    _sfBottomWidth            (Real32(1)), 
    _sfLeftLineTopColor       (Color4f(0.0,0.0,0.0,1.0)), 
    _sfLeftLineBottomColor    (Color4f(0.0,0.0,0.0,1.0)), 
    _sfTopLineLeftColor       (Color4f(0.0,0.0,0.0,1.0)), 
    _sfTopLineRightColor      (Color4f(0.0,0.0,0.0,1.0)), 
    _sfRightLineTopColor      (Color4f(0.0,0.0,0.0,1.0)), 
    _sfRightLineBottomColor   (Color4f(0.0,0.0,0.0,1.0)), 
    _sfBottomLineLeftColor    (Color4f(0.0,0.0,0.0,1.0)), 
    _sfBottomLineRightColor   (Color4f(0.0,0.0,0.0,1.0)), 
    Inherited() 
{
}

#ifdef OSG_WIN32_ICL
#pragma warning (default : 383)
#endif

MultiColorMatteBorderBase::MultiColorMatteBorderBase(const MultiColorMatteBorderBase &source) :
    _sfLeftWidth              (source._sfLeftWidth              ), 
    _sfRightWidth             (source._sfRightWidth             ), 
    _sfTopWidth               (source._sfTopWidth               ), 
    _sfBottomWidth            (source._sfBottomWidth            ), 
    _sfLeftLineTopColor       (source._sfLeftLineTopColor       ), 
    _sfLeftLineBottomColor    (source._sfLeftLineBottomColor    ), 
    _sfTopLineLeftColor       (source._sfTopLineLeftColor       ), 
    _sfTopLineRightColor      (source._sfTopLineRightColor      ), 
    _sfRightLineTopColor      (source._sfRightLineTopColor      ), 
    _sfRightLineBottomColor   (source._sfRightLineBottomColor   ), 
    _sfBottomLineLeftColor    (source._sfBottomLineLeftColor    ), 
    _sfBottomLineRightColor   (source._sfBottomLineRightColor   ), 
    Inherited                 (source)
{
}

/*-------------------------- destructors ----------------------------------*/

MultiColorMatteBorderBase::~MultiColorMatteBorderBase(void)
{
}

/*------------------------------ access -----------------------------------*/

UInt32 MultiColorMatteBorderBase::getBinSize(const BitVector &whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (LeftWidthFieldMask & whichField))
    {
        returnValue += _sfLeftWidth.getBinSize();
    }

    if(FieldBits::NoField != (RightWidthFieldMask & whichField))
    {
        returnValue += _sfRightWidth.getBinSize();
    }

    if(FieldBits::NoField != (TopWidthFieldMask & whichField))
    {
        returnValue += _sfTopWidth.getBinSize();
    }

    if(FieldBits::NoField != (BottomWidthFieldMask & whichField))
    {
        returnValue += _sfBottomWidth.getBinSize();
    }

    if(FieldBits::NoField != (LeftLineTopColorFieldMask & whichField))
    {
        returnValue += _sfLeftLineTopColor.getBinSize();
    }

    if(FieldBits::NoField != (LeftLineBottomColorFieldMask & whichField))
    {
        returnValue += _sfLeftLineBottomColor.getBinSize();
    }

    if(FieldBits::NoField != (TopLineLeftColorFieldMask & whichField))
    {
        returnValue += _sfTopLineLeftColor.getBinSize();
    }

    if(FieldBits::NoField != (TopLineRightColorFieldMask & whichField))
    {
        returnValue += _sfTopLineRightColor.getBinSize();
    }

    if(FieldBits::NoField != (RightLineTopColorFieldMask & whichField))
    {
        returnValue += _sfRightLineTopColor.getBinSize();
    }

    if(FieldBits::NoField != (RightLineBottomColorFieldMask & whichField))
    {
        returnValue += _sfRightLineBottomColor.getBinSize();
    }

    if(FieldBits::NoField != (BottomLineLeftColorFieldMask & whichField))
    {
        returnValue += _sfBottomLineLeftColor.getBinSize();
    }

    if(FieldBits::NoField != (BottomLineRightColorFieldMask & whichField))
    {
        returnValue += _sfBottomLineRightColor.getBinSize();
    }


    return returnValue;
}

void MultiColorMatteBorderBase::copyToBin(      BinaryDataHandler &pMem,
                                  const BitVector         &whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (LeftWidthFieldMask & whichField))
    {
        _sfLeftWidth.copyToBin(pMem);
    }

    if(FieldBits::NoField != (RightWidthFieldMask & whichField))
    {
        _sfRightWidth.copyToBin(pMem);
    }

    if(FieldBits::NoField != (TopWidthFieldMask & whichField))
    {
        _sfTopWidth.copyToBin(pMem);
    }

    if(FieldBits::NoField != (BottomWidthFieldMask & whichField))
    {
        _sfBottomWidth.copyToBin(pMem);
    }

    if(FieldBits::NoField != (LeftLineTopColorFieldMask & whichField))
    {
        _sfLeftLineTopColor.copyToBin(pMem);
    }

    if(FieldBits::NoField != (LeftLineBottomColorFieldMask & whichField))
    {
        _sfLeftLineBottomColor.copyToBin(pMem);
    }

    if(FieldBits::NoField != (TopLineLeftColorFieldMask & whichField))
    {
        _sfTopLineLeftColor.copyToBin(pMem);
    }

    if(FieldBits::NoField != (TopLineRightColorFieldMask & whichField))
    {
        _sfTopLineRightColor.copyToBin(pMem);
    }

    if(FieldBits::NoField != (RightLineTopColorFieldMask & whichField))
    {
        _sfRightLineTopColor.copyToBin(pMem);
    }

    if(FieldBits::NoField != (RightLineBottomColorFieldMask & whichField))
    {
        _sfRightLineBottomColor.copyToBin(pMem);
    }

    if(FieldBits::NoField != (BottomLineLeftColorFieldMask & whichField))
    {
        _sfBottomLineLeftColor.copyToBin(pMem);
    }

    if(FieldBits::NoField != (BottomLineRightColorFieldMask & whichField))
    {
        _sfBottomLineRightColor.copyToBin(pMem);
    }


}

void MultiColorMatteBorderBase::copyFromBin(      BinaryDataHandler &pMem,
                                    const BitVector    &whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (LeftWidthFieldMask & whichField))
    {
        _sfLeftWidth.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (RightWidthFieldMask & whichField))
    {
        _sfRightWidth.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (TopWidthFieldMask & whichField))
    {
        _sfTopWidth.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (BottomWidthFieldMask & whichField))
    {
        _sfBottomWidth.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (LeftLineTopColorFieldMask & whichField))
    {
        _sfLeftLineTopColor.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (LeftLineBottomColorFieldMask & whichField))
    {
        _sfLeftLineBottomColor.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (TopLineLeftColorFieldMask & whichField))
    {
        _sfTopLineLeftColor.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (TopLineRightColorFieldMask & whichField))
    {
        _sfTopLineRightColor.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (RightLineTopColorFieldMask & whichField))
    {
        _sfRightLineTopColor.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (RightLineBottomColorFieldMask & whichField))
    {
        _sfRightLineBottomColor.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (BottomLineLeftColorFieldMask & whichField))
    {
        _sfBottomLineLeftColor.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (BottomLineRightColorFieldMask & whichField))
    {
        _sfBottomLineRightColor.copyFromBin(pMem);
    }


}

#if !defined(OSG_FIXED_MFIELDSYNC)
void MultiColorMatteBorderBase::executeSyncImpl(      MultiColorMatteBorderBase *pOther,
                                        const BitVector         &whichField)
{

    Inherited::executeSyncImpl(pOther, whichField);

    if(FieldBits::NoField != (LeftWidthFieldMask & whichField))
        _sfLeftWidth.syncWith(pOther->_sfLeftWidth);

    if(FieldBits::NoField != (RightWidthFieldMask & whichField))
        _sfRightWidth.syncWith(pOther->_sfRightWidth);

    if(FieldBits::NoField != (TopWidthFieldMask & whichField))
        _sfTopWidth.syncWith(pOther->_sfTopWidth);

    if(FieldBits::NoField != (BottomWidthFieldMask & whichField))
        _sfBottomWidth.syncWith(pOther->_sfBottomWidth);

    if(FieldBits::NoField != (LeftLineTopColorFieldMask & whichField))
        _sfLeftLineTopColor.syncWith(pOther->_sfLeftLineTopColor);

    if(FieldBits::NoField != (LeftLineBottomColorFieldMask & whichField))
        _sfLeftLineBottomColor.syncWith(pOther->_sfLeftLineBottomColor);

    if(FieldBits::NoField != (TopLineLeftColorFieldMask & whichField))
        _sfTopLineLeftColor.syncWith(pOther->_sfTopLineLeftColor);

    if(FieldBits::NoField != (TopLineRightColorFieldMask & whichField))
        _sfTopLineRightColor.syncWith(pOther->_sfTopLineRightColor);

    if(FieldBits::NoField != (RightLineTopColorFieldMask & whichField))
        _sfRightLineTopColor.syncWith(pOther->_sfRightLineTopColor);

    if(FieldBits::NoField != (RightLineBottomColorFieldMask & whichField))
        _sfRightLineBottomColor.syncWith(pOther->_sfRightLineBottomColor);

    if(FieldBits::NoField != (BottomLineLeftColorFieldMask & whichField))
        _sfBottomLineLeftColor.syncWith(pOther->_sfBottomLineLeftColor);

    if(FieldBits::NoField != (BottomLineRightColorFieldMask & whichField))
        _sfBottomLineRightColor.syncWith(pOther->_sfBottomLineRightColor);


}
#else
void MultiColorMatteBorderBase::executeSyncImpl(      MultiColorMatteBorderBase *pOther,
                                        const BitVector         &whichField,
                                        const SyncInfo          &sInfo      )
{

    Inherited::executeSyncImpl(pOther, whichField, sInfo);

    if(FieldBits::NoField != (LeftWidthFieldMask & whichField))
        _sfLeftWidth.syncWith(pOther->_sfLeftWidth);

    if(FieldBits::NoField != (RightWidthFieldMask & whichField))
        _sfRightWidth.syncWith(pOther->_sfRightWidth);

    if(FieldBits::NoField != (TopWidthFieldMask & whichField))
        _sfTopWidth.syncWith(pOther->_sfTopWidth);

    if(FieldBits::NoField != (BottomWidthFieldMask & whichField))
        _sfBottomWidth.syncWith(pOther->_sfBottomWidth);

    if(FieldBits::NoField != (LeftLineTopColorFieldMask & whichField))
        _sfLeftLineTopColor.syncWith(pOther->_sfLeftLineTopColor);

    if(FieldBits::NoField != (LeftLineBottomColorFieldMask & whichField))
        _sfLeftLineBottomColor.syncWith(pOther->_sfLeftLineBottomColor);

    if(FieldBits::NoField != (TopLineLeftColorFieldMask & whichField))
        _sfTopLineLeftColor.syncWith(pOther->_sfTopLineLeftColor);

    if(FieldBits::NoField != (TopLineRightColorFieldMask & whichField))
        _sfTopLineRightColor.syncWith(pOther->_sfTopLineRightColor);

    if(FieldBits::NoField != (RightLineTopColorFieldMask & whichField))
        _sfRightLineTopColor.syncWith(pOther->_sfRightLineTopColor);

    if(FieldBits::NoField != (RightLineBottomColorFieldMask & whichField))
        _sfRightLineBottomColor.syncWith(pOther->_sfRightLineBottomColor);

    if(FieldBits::NoField != (BottomLineLeftColorFieldMask & whichField))
        _sfBottomLineLeftColor.syncWith(pOther->_sfBottomLineLeftColor);

    if(FieldBits::NoField != (BottomLineRightColorFieldMask & whichField))
        _sfBottomLineRightColor.syncWith(pOther->_sfBottomLineRightColor);



}

void MultiColorMatteBorderBase::execBeginEditImpl (const BitVector &whichField, 
                                                 UInt32     uiAspect,
                                                 UInt32     uiContainerSize)
{
    Inherited::execBeginEditImpl(whichField, uiAspect, uiContainerSize);

}
#endif



OSG_END_NAMESPACE

#include <OpenSG/OSGSFieldTypeDef.inl>
#include <OpenSG/OSGMFieldTypeDef.inl>

OSG_BEGIN_NAMESPACE

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldDataTraits<MultiColorMatteBorderPtr>::_type("MultiColorMatteBorderPtr", "BorderPtr");
#endif

OSG_DLLEXPORT_SFIELD_DEF1(MultiColorMatteBorderPtr, OSG_USERINTERFACELIB_DLLTMPLMAPPING);
OSG_DLLEXPORT_MFIELD_DEF1(MultiColorMatteBorderPtr, OSG_USERINTERFACELIB_DLLTMPLMAPPING);


/*------------------------------------------------------------------------*/
/*                              cvs id's                                  */

#ifdef OSG_SGI_CC
#pragma set woff 1174
#endif

#ifdef OSG_LINUX_ICC
#pragma warning( disable : 177 )
#endif

namespace
{
    static Char8 cvsid_cpp       [] = "@(#)$Id: FCBaseTemplate_cpp.h,v 1.47 2006/03/17 17:03:19 pdaehne Exp $";
    static Char8 cvsid_hpp       [] = OSGMULTICOLORMATTEBORDERBASE_HEADER_CVSID;
    static Char8 cvsid_inl       [] = OSGMULTICOLORMATTEBORDERBASE_INLINE_CVSID;

    static Char8 cvsid_fields_hpp[] = OSGMULTICOLORMATTEBORDERFIELDS_HEADER_CVSID;
}

OSG_END_NAMESPACE

