/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2002 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact: dirk@opensg.org, gerrit.voss@vossg.org, jbehr@zgdv.de          *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class ShadowBorder!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#define OSG_COMPILESHADOWBORDERINST

#include <stdlib.h>
#include <stdio.h>

#include <OpenSG/OSGConfig.h>

#include "OSGShadowBorderBase.h"
#include "OSGShadowBorder.h"


OSG_BEGIN_NAMESPACE

const OSG::BitVector  ShadowBorderBase::TopOffsetFieldMask = 
    (TypeTraits<BitVector>::One << ShadowBorderBase::TopOffsetFieldId);

const OSG::BitVector  ShadowBorderBase::BottomOffsetFieldMask = 
    (TypeTraits<BitVector>::One << ShadowBorderBase::BottomOffsetFieldId);

const OSG::BitVector  ShadowBorderBase::LeftOffsetFieldMask = 
    (TypeTraits<BitVector>::One << ShadowBorderBase::LeftOffsetFieldId);

const OSG::BitVector  ShadowBorderBase::RightOffsetFieldMask = 
    (TypeTraits<BitVector>::One << ShadowBorderBase::RightOffsetFieldId);

const OSG::BitVector  ShadowBorderBase::InternalColorFieldMask = 
    (TypeTraits<BitVector>::One << ShadowBorderBase::InternalColorFieldId);

const OSG::BitVector  ShadowBorderBase::EdgeColorFieldMask = 
    (TypeTraits<BitVector>::One << ShadowBorderBase::EdgeColorFieldId);

const OSG::BitVector  ShadowBorderBase::InsideBorderFieldMask = 
    (TypeTraits<BitVector>::One << ShadowBorderBase::InsideBorderFieldId);

const OSG::BitVector  ShadowBorderBase::CornerRadiusFieldMask = 
    (TypeTraits<BitVector>::One << ShadowBorderBase::CornerRadiusFieldId);

const OSG::BitVector  ShadowBorderBase::InternalToEdgeColorLengthFieldMask = 
    (TypeTraits<BitVector>::One << ShadowBorderBase::InternalToEdgeColorLengthFieldId);

const OSG::BitVector ShadowBorderBase::MTInfluenceMask = 
    (Inherited::MTInfluenceMask) | 
    (static_cast<BitVector>(0x0) << Inherited::NextFieldId); 


// Field descriptions

/*! \var UInt32          ShadowBorderBase::_sfTopOffset
    
*/
/*! \var UInt32          ShadowBorderBase::_sfBottomOffset
    
*/
/*! \var UInt32          ShadowBorderBase::_sfLeftOffset
    
*/
/*! \var UInt32          ShadowBorderBase::_sfRightOffset
    
*/
/*! \var Color4f         ShadowBorderBase::_sfInternalColor
    
*/
/*! \var Color4f         ShadowBorderBase::_sfEdgeColor
    
*/
/*! \var BorderPtr       ShadowBorderBase::_sfInsideBorder
    
*/
/*! \var UInt32          ShadowBorderBase::_sfCornerRadius
    
*/
/*! \var UInt32          ShadowBorderBase::_sfInternalToEdgeColorLength
    
*/

//! ShadowBorder description

FieldDescription *ShadowBorderBase::_desc[] = 
{
    new FieldDescription(SFUInt32::getClassType(), 
                     "TopOffset", 
                     TopOffsetFieldId, TopOffsetFieldMask,
                     false,
                     (FieldAccessMethod) &ShadowBorderBase::getSFTopOffset),
    new FieldDescription(SFUInt32::getClassType(), 
                     "BottomOffset", 
                     BottomOffsetFieldId, BottomOffsetFieldMask,
                     false,
                     (FieldAccessMethod) &ShadowBorderBase::getSFBottomOffset),
    new FieldDescription(SFUInt32::getClassType(), 
                     "LeftOffset", 
                     LeftOffsetFieldId, LeftOffsetFieldMask,
                     false,
                     (FieldAccessMethod) &ShadowBorderBase::getSFLeftOffset),
    new FieldDescription(SFUInt32::getClassType(), 
                     "RightOffset", 
                     RightOffsetFieldId, RightOffsetFieldMask,
                     false,
                     (FieldAccessMethod) &ShadowBorderBase::getSFRightOffset),
    new FieldDescription(SFColor4f::getClassType(), 
                     "InternalColor", 
                     InternalColorFieldId, InternalColorFieldMask,
                     false,
                     (FieldAccessMethod) &ShadowBorderBase::getSFInternalColor),
    new FieldDescription(SFColor4f::getClassType(), 
                     "EdgeColor", 
                     EdgeColorFieldId, EdgeColorFieldMask,
                     false,
                     (FieldAccessMethod) &ShadowBorderBase::getSFEdgeColor),
    new FieldDescription(SFBorderPtr::getClassType(), 
                     "InsideBorder", 
                     InsideBorderFieldId, InsideBorderFieldMask,
                     false,
                     (FieldAccessMethod) &ShadowBorderBase::getSFInsideBorder),
    new FieldDescription(SFUInt32::getClassType(), 
                     "CornerRadius", 
                     CornerRadiusFieldId, CornerRadiusFieldMask,
                     false,
                     (FieldAccessMethod) &ShadowBorderBase::getSFCornerRadius),
    new FieldDescription(SFUInt32::getClassType(), 
                     "InternalToEdgeColorLength", 
                     InternalToEdgeColorLengthFieldId, InternalToEdgeColorLengthFieldMask,
                     false,
                     (FieldAccessMethod) &ShadowBorderBase::getSFInternalToEdgeColorLength)
};


FieldContainerType ShadowBorderBase::_type(
    "ShadowBorder",
    "Border",
    NULL,
    (PrototypeCreateF) &ShadowBorderBase::createEmpty,
    ShadowBorder::initMethod,
    _desc,
    sizeof(_desc));

//OSG_FIELD_CONTAINER_DEF(ShadowBorderBase, ShadowBorderPtr)

/*------------------------------ get -----------------------------------*/

FieldContainerType &ShadowBorderBase::getType(void) 
{
    return _type; 
} 

const FieldContainerType &ShadowBorderBase::getType(void) const 
{
    return _type;
} 


FieldContainerPtr ShadowBorderBase::shallowCopy(void) const 
{ 
    ShadowBorderPtr returnValue; 

    newPtr(returnValue, dynamic_cast<const ShadowBorder *>(this)); 

    return returnValue; 
}

UInt32 ShadowBorderBase::getContainerSize(void) const 
{ 
    return sizeof(ShadowBorder); 
}


#if !defined(OSG_FIXED_MFIELDSYNC)
void ShadowBorderBase::executeSync(      FieldContainer &other,
                                    const BitVector      &whichField)
{
    this->executeSyncImpl((ShadowBorderBase *) &other, whichField);
}
#else
void ShadowBorderBase::executeSync(      FieldContainer &other,
                                    const BitVector      &whichField,                                    const SyncInfo       &sInfo     )
{
    this->executeSyncImpl((ShadowBorderBase *) &other, whichField, sInfo);
}
void ShadowBorderBase::execBeginEdit(const BitVector &whichField, 
                                            UInt32     uiAspect,
                                            UInt32     uiContainerSize) 
{
    this->execBeginEditImpl(whichField, uiAspect, uiContainerSize);
}

void ShadowBorderBase::onDestroyAspect(UInt32 uiId, UInt32 uiAspect)
{
    Inherited::onDestroyAspect(uiId, uiAspect);

}
#endif

/*------------------------- constructors ----------------------------------*/

#ifdef OSG_WIN32_ICL
#pragma warning (disable : 383)
#endif

ShadowBorderBase::ShadowBorderBase(void) :
    _sfTopOffset              (UInt32(0)), 
    _sfBottomOffset           (UInt32(5)), 
    _sfLeftOffset             (UInt32(0)), 
    _sfRightOffset            (UInt32(5)), 
    _sfInternalColor          (Color4f(0.0,0.0,0.0,1.0)), 
    _sfEdgeColor              (Color4f(0.0,0.0,0.0,1.0)), 
    _sfInsideBorder           (BorderPtr(NullFC)), 
    _sfCornerRadius           (UInt32(3)), 
    _sfInternalToEdgeColorLength(UInt32(3)), 
    Inherited() 
{
}

#ifdef OSG_WIN32_ICL
#pragma warning (default : 383)
#endif

ShadowBorderBase::ShadowBorderBase(const ShadowBorderBase &source) :
    _sfTopOffset              (source._sfTopOffset              ), 
    _sfBottomOffset           (source._sfBottomOffset           ), 
    _sfLeftOffset             (source._sfLeftOffset             ), 
    _sfRightOffset            (source._sfRightOffset            ), 
    _sfInternalColor          (source._sfInternalColor          ), 
    _sfEdgeColor              (source._sfEdgeColor              ), 
    _sfInsideBorder           (source._sfInsideBorder           ), 
    _sfCornerRadius           (source._sfCornerRadius           ), 
    _sfInternalToEdgeColorLength(source._sfInternalToEdgeColorLength), 
    Inherited                 (source)
{
}

/*-------------------------- destructors ----------------------------------*/

ShadowBorderBase::~ShadowBorderBase(void)
{
}

/*------------------------------ access -----------------------------------*/

UInt32 ShadowBorderBase::getBinSize(const BitVector &whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (TopOffsetFieldMask & whichField))
    {
        returnValue += _sfTopOffset.getBinSize();
    }

    if(FieldBits::NoField != (BottomOffsetFieldMask & whichField))
    {
        returnValue += _sfBottomOffset.getBinSize();
    }

    if(FieldBits::NoField != (LeftOffsetFieldMask & whichField))
    {
        returnValue += _sfLeftOffset.getBinSize();
    }

    if(FieldBits::NoField != (RightOffsetFieldMask & whichField))
    {
        returnValue += _sfRightOffset.getBinSize();
    }

    if(FieldBits::NoField != (InternalColorFieldMask & whichField))
    {
        returnValue += _sfInternalColor.getBinSize();
    }

    if(FieldBits::NoField != (EdgeColorFieldMask & whichField))
    {
        returnValue += _sfEdgeColor.getBinSize();
    }

    if(FieldBits::NoField != (InsideBorderFieldMask & whichField))
    {
        returnValue += _sfInsideBorder.getBinSize();
    }

    if(FieldBits::NoField != (CornerRadiusFieldMask & whichField))
    {
        returnValue += _sfCornerRadius.getBinSize();
    }

    if(FieldBits::NoField != (InternalToEdgeColorLengthFieldMask & whichField))
    {
        returnValue += _sfInternalToEdgeColorLength.getBinSize();
    }


    return returnValue;
}

void ShadowBorderBase::copyToBin(      BinaryDataHandler &pMem,
                                  const BitVector         &whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (TopOffsetFieldMask & whichField))
    {
        _sfTopOffset.copyToBin(pMem);
    }

    if(FieldBits::NoField != (BottomOffsetFieldMask & whichField))
    {
        _sfBottomOffset.copyToBin(pMem);
    }

    if(FieldBits::NoField != (LeftOffsetFieldMask & whichField))
    {
        _sfLeftOffset.copyToBin(pMem);
    }

    if(FieldBits::NoField != (RightOffsetFieldMask & whichField))
    {
        _sfRightOffset.copyToBin(pMem);
    }

    if(FieldBits::NoField != (InternalColorFieldMask & whichField))
    {
        _sfInternalColor.copyToBin(pMem);
    }

    if(FieldBits::NoField != (EdgeColorFieldMask & whichField))
    {
        _sfEdgeColor.copyToBin(pMem);
    }

    if(FieldBits::NoField != (InsideBorderFieldMask & whichField))
    {
        _sfInsideBorder.copyToBin(pMem);
    }

    if(FieldBits::NoField != (CornerRadiusFieldMask & whichField))
    {
        _sfCornerRadius.copyToBin(pMem);
    }

    if(FieldBits::NoField != (InternalToEdgeColorLengthFieldMask & whichField))
    {
        _sfInternalToEdgeColorLength.copyToBin(pMem);
    }


}

void ShadowBorderBase::copyFromBin(      BinaryDataHandler &pMem,
                                    const BitVector    &whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (TopOffsetFieldMask & whichField))
    {
        _sfTopOffset.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (BottomOffsetFieldMask & whichField))
    {
        _sfBottomOffset.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (LeftOffsetFieldMask & whichField))
    {
        _sfLeftOffset.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (RightOffsetFieldMask & whichField))
    {
        _sfRightOffset.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (InternalColorFieldMask & whichField))
    {
        _sfInternalColor.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (EdgeColorFieldMask & whichField))
    {
        _sfEdgeColor.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (InsideBorderFieldMask & whichField))
    {
        _sfInsideBorder.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (CornerRadiusFieldMask & whichField))
    {
        _sfCornerRadius.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (InternalToEdgeColorLengthFieldMask & whichField))
    {
        _sfInternalToEdgeColorLength.copyFromBin(pMem);
    }


}

#if !defined(OSG_FIXED_MFIELDSYNC)
void ShadowBorderBase::executeSyncImpl(      ShadowBorderBase *pOther,
                                        const BitVector         &whichField)
{

    Inherited::executeSyncImpl(pOther, whichField);

    if(FieldBits::NoField != (TopOffsetFieldMask & whichField))
        _sfTopOffset.syncWith(pOther->_sfTopOffset);

    if(FieldBits::NoField != (BottomOffsetFieldMask & whichField))
        _sfBottomOffset.syncWith(pOther->_sfBottomOffset);

    if(FieldBits::NoField != (LeftOffsetFieldMask & whichField))
        _sfLeftOffset.syncWith(pOther->_sfLeftOffset);

    if(FieldBits::NoField != (RightOffsetFieldMask & whichField))
        _sfRightOffset.syncWith(pOther->_sfRightOffset);

    if(FieldBits::NoField != (InternalColorFieldMask & whichField))
        _sfInternalColor.syncWith(pOther->_sfInternalColor);

    if(FieldBits::NoField != (EdgeColorFieldMask & whichField))
        _sfEdgeColor.syncWith(pOther->_sfEdgeColor);

    if(FieldBits::NoField != (InsideBorderFieldMask & whichField))
        _sfInsideBorder.syncWith(pOther->_sfInsideBorder);

    if(FieldBits::NoField != (CornerRadiusFieldMask & whichField))
        _sfCornerRadius.syncWith(pOther->_sfCornerRadius);

    if(FieldBits::NoField != (InternalToEdgeColorLengthFieldMask & whichField))
        _sfInternalToEdgeColorLength.syncWith(pOther->_sfInternalToEdgeColorLength);


}
#else
void ShadowBorderBase::executeSyncImpl(      ShadowBorderBase *pOther,
                                        const BitVector         &whichField,
                                        const SyncInfo          &sInfo      )
{

    Inherited::executeSyncImpl(pOther, whichField, sInfo);

    if(FieldBits::NoField != (TopOffsetFieldMask & whichField))
        _sfTopOffset.syncWith(pOther->_sfTopOffset);

    if(FieldBits::NoField != (BottomOffsetFieldMask & whichField))
        _sfBottomOffset.syncWith(pOther->_sfBottomOffset);

    if(FieldBits::NoField != (LeftOffsetFieldMask & whichField))
        _sfLeftOffset.syncWith(pOther->_sfLeftOffset);

    if(FieldBits::NoField != (RightOffsetFieldMask & whichField))
        _sfRightOffset.syncWith(pOther->_sfRightOffset);

    if(FieldBits::NoField != (InternalColorFieldMask & whichField))
        _sfInternalColor.syncWith(pOther->_sfInternalColor);

    if(FieldBits::NoField != (EdgeColorFieldMask & whichField))
        _sfEdgeColor.syncWith(pOther->_sfEdgeColor);

    if(FieldBits::NoField != (InsideBorderFieldMask & whichField))
        _sfInsideBorder.syncWith(pOther->_sfInsideBorder);

    if(FieldBits::NoField != (CornerRadiusFieldMask & whichField))
        _sfCornerRadius.syncWith(pOther->_sfCornerRadius);

    if(FieldBits::NoField != (InternalToEdgeColorLengthFieldMask & whichField))
        _sfInternalToEdgeColorLength.syncWith(pOther->_sfInternalToEdgeColorLength);



}

void ShadowBorderBase::execBeginEditImpl (const BitVector &whichField, 
                                                 UInt32     uiAspect,
                                                 UInt32     uiContainerSize)
{
    Inherited::execBeginEditImpl(whichField, uiAspect, uiContainerSize);

}
#endif



OSG_END_NAMESPACE

#include <OpenSG/OSGSFieldTypeDef.inl>
#include <OpenSG/OSGMFieldTypeDef.inl>

OSG_BEGIN_NAMESPACE

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldDataTraits<ShadowBorderPtr>::_type("ShadowBorderPtr", "BorderPtr");
#endif

OSG_DLLEXPORT_SFIELD_DEF1(ShadowBorderPtr, OSG_USERINTERFACELIB_DLLTMPLMAPPING);
OSG_DLLEXPORT_MFIELD_DEF1(ShadowBorderPtr, OSG_USERINTERFACELIB_DLLTMPLMAPPING);


/*------------------------------------------------------------------------*/
/*                              cvs id's                                  */

#ifdef OSG_SGI_CC
#pragma set woff 1174
#endif

#ifdef OSG_LINUX_ICC
#pragma warning( disable : 177 )
#endif

namespace
{
    static Char8 cvsid_cpp       [] = "@(#)$Id: FCBaseTemplate_cpp.h,v 1.47 2006/03/17 17:03:19 pdaehne Exp $";
    static Char8 cvsid_hpp       [] = OSGSHADOWBORDERBASE_HEADER_CVSID;
    static Char8 cvsid_inl       [] = OSGSHADOWBORDERBASE_INLINE_CVSID;

    static Char8 cvsid_fields_hpp[] = OSGSHADOWBORDERFIELDS_HEADER_CVSID;
}

OSG_END_NAMESPACE

