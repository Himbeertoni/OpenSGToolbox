/*---------------------------------------------------------------------------*\
 *                     OpenSG ToolBox UserInterface                          *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                         www.vrac.iastate.edu                              *
 *                                                                           *
 *   Authors: David Kabala, Alden Peterson, Lee Zaniewski, Jonathan Flory    *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class RadioButton!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#define OSG_COMPILERADIOBUTTONINST

#include <stdlib.h>
#include <stdio.h>

#include <OpenSG/OSGConfig.h>

#include "OSGRadioButtonBase.h"
#include "OSGRadioButton.h"


OSG_BEGIN_NAMESPACE

const OSG::BitVector  RadioButtonBase::RadioDrawObjectFieldMask = 
    (TypeTraits<BitVector>::One << RadioButtonBase::RadioDrawObjectFieldId);

const OSG::BitVector  RadioButtonBase::SelectedRadioDrawObjectFieldMask = 
    (TypeTraits<BitVector>::One << RadioButtonBase::SelectedRadioDrawObjectFieldId);

const OSG::BitVector  RadioButtonBase::ActiveRadioDrawObjectFieldMask = 
    (TypeTraits<BitVector>::One << RadioButtonBase::ActiveRadioDrawObjectFieldId);

const OSG::BitVector  RadioButtonBase::ActiveSelectedRadioDrawObjectFieldMask = 
    (TypeTraits<BitVector>::One << RadioButtonBase::ActiveSelectedRadioDrawObjectFieldId);

const OSG::BitVector  RadioButtonBase::RolloverRadioDrawObjectFieldMask = 
    (TypeTraits<BitVector>::One << RadioButtonBase::RolloverRadioDrawObjectFieldId);

const OSG::BitVector  RadioButtonBase::RolloverSelectedRadioDrawObjectFieldMask = 
    (TypeTraits<BitVector>::One << RadioButtonBase::RolloverSelectedRadioDrawObjectFieldId);

const OSG::BitVector  RadioButtonBase::DisabledRadioDrawObjectFieldMask = 
    (TypeTraits<BitVector>::One << RadioButtonBase::DisabledRadioDrawObjectFieldId);

const OSG::BitVector  RadioButtonBase::DisabledSelectedRadioDrawObjectFieldMask = 
    (TypeTraits<BitVector>::One << RadioButtonBase::DisabledSelectedRadioDrawObjectFieldId);

const OSG::BitVector RadioButtonBase::MTInfluenceMask = 
    (Inherited::MTInfluenceMask) | 
    (static_cast<BitVector>(0x0) << Inherited::NextFieldId); 


// Field descriptions

/*! \var UIDrawObjectCanvasPtr RadioButtonBase::_sfRadioDrawObject
    
*/
/*! \var UIDrawObjectCanvasPtr RadioButtonBase::_sfSelectedRadioDrawObject
    
*/
/*! \var UIDrawObjectCanvasPtr RadioButtonBase::_sfActiveRadioDrawObject
    
*/
/*! \var UIDrawObjectCanvasPtr RadioButtonBase::_sfActiveSelectedRadioDrawObject
    
*/
/*! \var UIDrawObjectCanvasPtr RadioButtonBase::_sfRolloverRadioDrawObject
    
*/
/*! \var UIDrawObjectCanvasPtr RadioButtonBase::_sfRolloverSelectedRadioDrawObject
    
*/
/*! \var UIDrawObjectCanvasPtr RadioButtonBase::_sfDisabledRadioDrawObject
    
*/
/*! \var UIDrawObjectCanvasPtr RadioButtonBase::_sfDisabledSelectedRadioDrawObject
    
*/

//! RadioButton description

FieldDescription *RadioButtonBase::_desc[] = 
{
    new FieldDescription(SFUIDrawObjectCanvasPtr::getClassType(), 
                     "RadioDrawObject", 
                     RadioDrawObjectFieldId, RadioDrawObjectFieldMask,
                     false,
                     (FieldAccessMethod) &RadioButtonBase::getSFRadioDrawObject),
    new FieldDescription(SFUIDrawObjectCanvasPtr::getClassType(), 
                     "SelectedRadioDrawObject", 
                     SelectedRadioDrawObjectFieldId, SelectedRadioDrawObjectFieldMask,
                     false,
                     (FieldAccessMethod) &RadioButtonBase::getSFSelectedRadioDrawObject),
    new FieldDescription(SFUIDrawObjectCanvasPtr::getClassType(), 
                     "ActiveRadioDrawObject", 
                     ActiveRadioDrawObjectFieldId, ActiveRadioDrawObjectFieldMask,
                     false,
                     (FieldAccessMethod) &RadioButtonBase::getSFActiveRadioDrawObject),
    new FieldDescription(SFUIDrawObjectCanvasPtr::getClassType(), 
                     "ActiveSelectedRadioDrawObject", 
                     ActiveSelectedRadioDrawObjectFieldId, ActiveSelectedRadioDrawObjectFieldMask,
                     false,
                     (FieldAccessMethod) &RadioButtonBase::getSFActiveSelectedRadioDrawObject),
    new FieldDescription(SFUIDrawObjectCanvasPtr::getClassType(), 
                     "RolloverRadioDrawObject", 
                     RolloverRadioDrawObjectFieldId, RolloverRadioDrawObjectFieldMask,
                     false,
                     (FieldAccessMethod) &RadioButtonBase::getSFRolloverRadioDrawObject),
    new FieldDescription(SFUIDrawObjectCanvasPtr::getClassType(), 
                     "RolloverSelectedRadioDrawObject", 
                     RolloverSelectedRadioDrawObjectFieldId, RolloverSelectedRadioDrawObjectFieldMask,
                     false,
                     (FieldAccessMethod) &RadioButtonBase::getSFRolloverSelectedRadioDrawObject),
    new FieldDescription(SFUIDrawObjectCanvasPtr::getClassType(), 
                     "DisabledRadioDrawObject", 
                     DisabledRadioDrawObjectFieldId, DisabledRadioDrawObjectFieldMask,
                     false,
                     (FieldAccessMethod) &RadioButtonBase::getSFDisabledRadioDrawObject),
    new FieldDescription(SFUIDrawObjectCanvasPtr::getClassType(), 
                     "DisabledSelectedRadioDrawObject", 
                     DisabledSelectedRadioDrawObjectFieldId, DisabledSelectedRadioDrawObjectFieldMask,
                     false,
                     (FieldAccessMethod) &RadioButtonBase::getSFDisabledSelectedRadioDrawObject)
};


FieldContainerType RadioButtonBase::_type(
    "RadioButton",
    "ToggleButton",
    NULL,
    (PrototypeCreateF) &RadioButtonBase::createEmpty,
    RadioButton::initMethod,
    _desc,
    sizeof(_desc));

//OSG_FIELD_CONTAINER_DEF(RadioButtonBase, RadioButtonPtr)

/*------------------------------ get -----------------------------------*/

FieldContainerType &RadioButtonBase::getType(void) 
{
    return _type; 
} 

const FieldContainerType &RadioButtonBase::getType(void) const 
{
    return _type;
} 


FieldContainerPtr RadioButtonBase::shallowCopy(void) const 
{ 
    RadioButtonPtr returnValue; 

    newPtr(returnValue, dynamic_cast<const RadioButton *>(this)); 

    return returnValue; 
}

UInt32 RadioButtonBase::getContainerSize(void) const 
{ 
    return sizeof(RadioButton); 
}


#if !defined(OSG_FIXED_MFIELDSYNC)
void RadioButtonBase::executeSync(      FieldContainer &other,
                                    const BitVector      &whichField)
{
    this->executeSyncImpl((RadioButtonBase *) &other, whichField);
}
#else
void RadioButtonBase::executeSync(      FieldContainer &other,
                                    const BitVector      &whichField,                                    const SyncInfo       &sInfo     )
{
    this->executeSyncImpl((RadioButtonBase *) &other, whichField, sInfo);
}
void RadioButtonBase::execBeginEdit(const BitVector &whichField, 
                                            UInt32     uiAspect,
                                            UInt32     uiContainerSize) 
{
    this->execBeginEditImpl(whichField, uiAspect, uiContainerSize);
}

void RadioButtonBase::onDestroyAspect(UInt32 uiId, UInt32 uiAspect)
{
    Inherited::onDestroyAspect(uiId, uiAspect);

}
#endif

/*------------------------- constructors ----------------------------------*/

#ifdef OSG_WIN32_ICL
#pragma warning (disable : 383)
#endif

RadioButtonBase::RadioButtonBase(void) :
    _sfRadioDrawObject        (), 
    _sfSelectedRadioDrawObject(), 
    _sfActiveRadioDrawObject  (), 
    _sfActiveSelectedRadioDrawObject(), 
    _sfRolloverRadioDrawObject(), 
    _sfRolloverSelectedRadioDrawObject(), 
    _sfDisabledRadioDrawObject(), 
    _sfDisabledSelectedRadioDrawObject(), 
    Inherited() 
{
}

#ifdef OSG_WIN32_ICL
#pragma warning (default : 383)
#endif

RadioButtonBase::RadioButtonBase(const RadioButtonBase &source) :
    _sfRadioDrawObject        (source._sfRadioDrawObject        ), 
    _sfSelectedRadioDrawObject(source._sfSelectedRadioDrawObject), 
    _sfActiveRadioDrawObject  (source._sfActiveRadioDrawObject  ), 
    _sfActiveSelectedRadioDrawObject(source._sfActiveSelectedRadioDrawObject), 
    _sfRolloverRadioDrawObject(source._sfRolloverRadioDrawObject), 
    _sfRolloverSelectedRadioDrawObject(source._sfRolloverSelectedRadioDrawObject), 
    _sfDisabledRadioDrawObject(source._sfDisabledRadioDrawObject), 
    _sfDisabledSelectedRadioDrawObject(source._sfDisabledSelectedRadioDrawObject), 
    Inherited                 (source)
{
}

/*-------------------------- destructors ----------------------------------*/

RadioButtonBase::~RadioButtonBase(void)
{
}

/*------------------------------ access -----------------------------------*/

UInt32 RadioButtonBase::getBinSize(const BitVector &whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (RadioDrawObjectFieldMask & whichField))
    {
        returnValue += _sfRadioDrawObject.getBinSize();
    }

    if(FieldBits::NoField != (SelectedRadioDrawObjectFieldMask & whichField))
    {
        returnValue += _sfSelectedRadioDrawObject.getBinSize();
    }

    if(FieldBits::NoField != (ActiveRadioDrawObjectFieldMask & whichField))
    {
        returnValue += _sfActiveRadioDrawObject.getBinSize();
    }

    if(FieldBits::NoField != (ActiveSelectedRadioDrawObjectFieldMask & whichField))
    {
        returnValue += _sfActiveSelectedRadioDrawObject.getBinSize();
    }

    if(FieldBits::NoField != (RolloverRadioDrawObjectFieldMask & whichField))
    {
        returnValue += _sfRolloverRadioDrawObject.getBinSize();
    }

    if(FieldBits::NoField != (RolloverSelectedRadioDrawObjectFieldMask & whichField))
    {
        returnValue += _sfRolloverSelectedRadioDrawObject.getBinSize();
    }

    if(FieldBits::NoField != (DisabledRadioDrawObjectFieldMask & whichField))
    {
        returnValue += _sfDisabledRadioDrawObject.getBinSize();
    }

    if(FieldBits::NoField != (DisabledSelectedRadioDrawObjectFieldMask & whichField))
    {
        returnValue += _sfDisabledSelectedRadioDrawObject.getBinSize();
    }


    return returnValue;
}

void RadioButtonBase::copyToBin(      BinaryDataHandler &pMem,
                                  const BitVector         &whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (RadioDrawObjectFieldMask & whichField))
    {
        _sfRadioDrawObject.copyToBin(pMem);
    }

    if(FieldBits::NoField != (SelectedRadioDrawObjectFieldMask & whichField))
    {
        _sfSelectedRadioDrawObject.copyToBin(pMem);
    }

    if(FieldBits::NoField != (ActiveRadioDrawObjectFieldMask & whichField))
    {
        _sfActiveRadioDrawObject.copyToBin(pMem);
    }

    if(FieldBits::NoField != (ActiveSelectedRadioDrawObjectFieldMask & whichField))
    {
        _sfActiveSelectedRadioDrawObject.copyToBin(pMem);
    }

    if(FieldBits::NoField != (RolloverRadioDrawObjectFieldMask & whichField))
    {
        _sfRolloverRadioDrawObject.copyToBin(pMem);
    }

    if(FieldBits::NoField != (RolloverSelectedRadioDrawObjectFieldMask & whichField))
    {
        _sfRolloverSelectedRadioDrawObject.copyToBin(pMem);
    }

    if(FieldBits::NoField != (DisabledRadioDrawObjectFieldMask & whichField))
    {
        _sfDisabledRadioDrawObject.copyToBin(pMem);
    }

    if(FieldBits::NoField != (DisabledSelectedRadioDrawObjectFieldMask & whichField))
    {
        _sfDisabledSelectedRadioDrawObject.copyToBin(pMem);
    }


}

void RadioButtonBase::copyFromBin(      BinaryDataHandler &pMem,
                                    const BitVector    &whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (RadioDrawObjectFieldMask & whichField))
    {
        _sfRadioDrawObject.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (SelectedRadioDrawObjectFieldMask & whichField))
    {
        _sfSelectedRadioDrawObject.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (ActiveRadioDrawObjectFieldMask & whichField))
    {
        _sfActiveRadioDrawObject.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (ActiveSelectedRadioDrawObjectFieldMask & whichField))
    {
        _sfActiveSelectedRadioDrawObject.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (RolloverRadioDrawObjectFieldMask & whichField))
    {
        _sfRolloverRadioDrawObject.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (RolloverSelectedRadioDrawObjectFieldMask & whichField))
    {
        _sfRolloverSelectedRadioDrawObject.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (DisabledRadioDrawObjectFieldMask & whichField))
    {
        _sfDisabledRadioDrawObject.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (DisabledSelectedRadioDrawObjectFieldMask & whichField))
    {
        _sfDisabledSelectedRadioDrawObject.copyFromBin(pMem);
    }


}

#if !defined(OSG_FIXED_MFIELDSYNC)
void RadioButtonBase::executeSyncImpl(      RadioButtonBase *pOther,
                                        const BitVector         &whichField)
{

    Inherited::executeSyncImpl(pOther, whichField);

    if(FieldBits::NoField != (RadioDrawObjectFieldMask & whichField))
        _sfRadioDrawObject.syncWith(pOther->_sfRadioDrawObject);

    if(FieldBits::NoField != (SelectedRadioDrawObjectFieldMask & whichField))
        _sfSelectedRadioDrawObject.syncWith(pOther->_sfSelectedRadioDrawObject);

    if(FieldBits::NoField != (ActiveRadioDrawObjectFieldMask & whichField))
        _sfActiveRadioDrawObject.syncWith(pOther->_sfActiveRadioDrawObject);

    if(FieldBits::NoField != (ActiveSelectedRadioDrawObjectFieldMask & whichField))
        _sfActiveSelectedRadioDrawObject.syncWith(pOther->_sfActiveSelectedRadioDrawObject);

    if(FieldBits::NoField != (RolloverRadioDrawObjectFieldMask & whichField))
        _sfRolloverRadioDrawObject.syncWith(pOther->_sfRolloverRadioDrawObject);

    if(FieldBits::NoField != (RolloverSelectedRadioDrawObjectFieldMask & whichField))
        _sfRolloverSelectedRadioDrawObject.syncWith(pOther->_sfRolloverSelectedRadioDrawObject);

    if(FieldBits::NoField != (DisabledRadioDrawObjectFieldMask & whichField))
        _sfDisabledRadioDrawObject.syncWith(pOther->_sfDisabledRadioDrawObject);

    if(FieldBits::NoField != (DisabledSelectedRadioDrawObjectFieldMask & whichField))
        _sfDisabledSelectedRadioDrawObject.syncWith(pOther->_sfDisabledSelectedRadioDrawObject);


}
#else
void RadioButtonBase::executeSyncImpl(      RadioButtonBase *pOther,
                                        const BitVector         &whichField,
                                        const SyncInfo          &sInfo      )
{

    Inherited::executeSyncImpl(pOther, whichField, sInfo);

    if(FieldBits::NoField != (RadioDrawObjectFieldMask & whichField))
        _sfRadioDrawObject.syncWith(pOther->_sfRadioDrawObject);

    if(FieldBits::NoField != (SelectedRadioDrawObjectFieldMask & whichField))
        _sfSelectedRadioDrawObject.syncWith(pOther->_sfSelectedRadioDrawObject);

    if(FieldBits::NoField != (ActiveRadioDrawObjectFieldMask & whichField))
        _sfActiveRadioDrawObject.syncWith(pOther->_sfActiveRadioDrawObject);

    if(FieldBits::NoField != (ActiveSelectedRadioDrawObjectFieldMask & whichField))
        _sfActiveSelectedRadioDrawObject.syncWith(pOther->_sfActiveSelectedRadioDrawObject);

    if(FieldBits::NoField != (RolloverRadioDrawObjectFieldMask & whichField))
        _sfRolloverRadioDrawObject.syncWith(pOther->_sfRolloverRadioDrawObject);

    if(FieldBits::NoField != (RolloverSelectedRadioDrawObjectFieldMask & whichField))
        _sfRolloverSelectedRadioDrawObject.syncWith(pOther->_sfRolloverSelectedRadioDrawObject);

    if(FieldBits::NoField != (DisabledRadioDrawObjectFieldMask & whichField))
        _sfDisabledRadioDrawObject.syncWith(pOther->_sfDisabledRadioDrawObject);

    if(FieldBits::NoField != (DisabledSelectedRadioDrawObjectFieldMask & whichField))
        _sfDisabledSelectedRadioDrawObject.syncWith(pOther->_sfDisabledSelectedRadioDrawObject);



}

void RadioButtonBase::execBeginEditImpl (const BitVector &whichField, 
                                                 UInt32     uiAspect,
                                                 UInt32     uiContainerSize)
{
    Inherited::execBeginEditImpl(whichField, uiAspect, uiContainerSize);

}
#endif



OSG_END_NAMESPACE

#include <OpenSG/OSGSFieldTypeDef.inl>
#include <OpenSG/OSGMFieldTypeDef.inl>

OSG_BEGIN_NAMESPACE

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldDataTraits<RadioButtonPtr>::_type("RadioButtonPtr", "ToggleButtonPtr");
#endif

OSG_DLLEXPORT_SFIELD_DEF1(RadioButtonPtr, OSG_USERINTERFACELIB_DLLTMPLMAPPING);
OSG_DLLEXPORT_MFIELD_DEF1(RadioButtonPtr, OSG_USERINTERFACELIB_DLLTMPLMAPPING);


/*------------------------------------------------------------------------*/
/*                              cvs id's                                  */

#ifdef OSG_SGI_CC
#pragma set woff 1174
#endif

#ifdef OSG_LINUX_ICC
#pragma warning( disable : 177 )
#endif

namespace
{
    static Char8 cvsid_cpp       [] = "@(#)$Id: FCBaseTemplate_cpp.h,v 1.47 2006/03/17 17:03:19 pdaehne Exp $";
    static Char8 cvsid_hpp       [] = OSGRADIOBUTTONBASE_HEADER_CVSID;
    static Char8 cvsid_inl       [] = OSGRADIOBUTTONBASE_INLINE_CVSID;

    static Char8 cvsid_fields_hpp[] = OSGRADIOBUTTONFIELDS_HEADER_CVSID;
}

OSG_END_NAMESPACE

