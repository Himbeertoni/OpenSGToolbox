/*---------------------------------------------------------------------------*\
 *                     OpenSG ToolBox UserInterface                          *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                         www.vrac.iastate.edu                              *
 *                                                                           *
 *   Authors: David Kabala, Alden Peterson, Lee Zaniewski, Jonathan Flory    *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class DefaultComboBoxComponentGenerator!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#define OSG_COMPILEDEFAULTCOMBOBOXCOMPONENTGENERATORINST

#include <stdlib.h>
#include <stdio.h>

#include <OpenSG/OSGConfig.h>

#include "OSGDefaultComboBoxComponentGeneratorBase.h"
#include "OSGDefaultComboBoxComponentGenerator.h"


OSG_BEGIN_NAMESPACE

const OSG::BitVector  DefaultComboBoxComponentGeneratorBase::DrawObjectPrototypeFieldMask = 
    (TypeTraits<BitVector>::One << DefaultComboBoxComponentGeneratorBase::DrawObjectPrototypeFieldId);

const OSG::BitVector  DefaultComboBoxComponentGeneratorBase::SelectedBackgroundFieldMask = 
    (TypeTraits<BitVector>::One << DefaultComboBoxComponentGeneratorBase::SelectedBackgroundFieldId);

const OSG::BitVector  DefaultComboBoxComponentGeneratorBase::FocusedBackgroundFieldMask = 
    (TypeTraits<BitVector>::One << DefaultComboBoxComponentGeneratorBase::FocusedBackgroundFieldId);

const OSG::BitVector  DefaultComboBoxComponentGeneratorBase::SelectedForegroundFieldMask = 
    (TypeTraits<BitVector>::One << DefaultComboBoxComponentGeneratorBase::SelectedForegroundFieldId);

const OSG::BitVector  DefaultComboBoxComponentGeneratorBase::FocusedForegroundFieldMask = 
    (TypeTraits<BitVector>::One << DefaultComboBoxComponentGeneratorBase::FocusedForegroundFieldId);

const OSG::BitVector  DefaultComboBoxComponentGeneratorBase::SelectedBorderFieldMask = 
    (TypeTraits<BitVector>::One << DefaultComboBoxComponentGeneratorBase::SelectedBorderFieldId);

const OSG::BitVector  DefaultComboBoxComponentGeneratorBase::FocusedBorderFieldMask = 
    (TypeTraits<BitVector>::One << DefaultComboBoxComponentGeneratorBase::FocusedBorderFieldId);

const OSG::BitVector  DefaultComboBoxComponentGeneratorBase::SelectedTextColorFieldMask = 
    (TypeTraits<BitVector>::One << DefaultComboBoxComponentGeneratorBase::SelectedTextColorFieldId);

const OSG::BitVector  DefaultComboBoxComponentGeneratorBase::FocusedTextColorFieldMask = 
    (TypeTraits<BitVector>::One << DefaultComboBoxComponentGeneratorBase::FocusedTextColorFieldId);

const OSG::BitVector  DefaultComboBoxComponentGeneratorBase::FocusedTextColorHasPriorityFieldMask = 
    (TypeTraits<BitVector>::One << DefaultComboBoxComponentGeneratorBase::FocusedTextColorHasPriorityFieldId);

const OSG::BitVector  DefaultComboBoxComponentGeneratorBase::FocusedBorderHasPriorityFieldMask = 
    (TypeTraits<BitVector>::One << DefaultComboBoxComponentGeneratorBase::FocusedBorderHasPriorityFieldId);

const OSG::BitVector  DefaultComboBoxComponentGeneratorBase::FocusedBackgroundHasPriorityFieldMask = 
    (TypeTraits<BitVector>::One << DefaultComboBoxComponentGeneratorBase::FocusedBackgroundHasPriorityFieldId);

const OSG::BitVector DefaultComboBoxComponentGeneratorBase::MTInfluenceMask = 
    (Inherited::MTInfluenceMask) | 
    (static_cast<BitVector>(0x0) << Inherited::NextFieldId); 


// Field descriptions

/*! \var ComponentPtr    DefaultComboBoxComponentGeneratorBase::_sfDrawObjectPrototype
    
*/
/*! \var LayerPtr        DefaultComboBoxComponentGeneratorBase::_sfSelectedBackground
    
*/
/*! \var LayerPtr        DefaultComboBoxComponentGeneratorBase::_sfFocusedBackground
    
*/
/*! \var LayerPtr        DefaultComboBoxComponentGeneratorBase::_sfSelectedForeground
    
*/
/*! \var LayerPtr        DefaultComboBoxComponentGeneratorBase::_sfFocusedForeground
    
*/
/*! \var BorderPtr       DefaultComboBoxComponentGeneratorBase::_sfSelectedBorder
    
*/
/*! \var BorderPtr       DefaultComboBoxComponentGeneratorBase::_sfFocusedBorder
    
*/
/*! \var Color4f         DefaultComboBoxComponentGeneratorBase::_sfSelectedTextColor
    
*/
/*! \var Color4f         DefaultComboBoxComponentGeneratorBase::_sfFocusedTextColor
    
*/
/*! \var bool            DefaultComboBoxComponentGeneratorBase::_sfFocusedTextColorHasPriority
    
*/
/*! \var bool            DefaultComboBoxComponentGeneratorBase::_sfFocusedBorderHasPriority
    
*/
/*! \var bool            DefaultComboBoxComponentGeneratorBase::_sfFocusedBackgroundHasPriority
    
*/

//! DefaultComboBoxComponentGenerator description

FieldDescription *DefaultComboBoxComponentGeneratorBase::_desc[] = 
{
    new FieldDescription(SFComponentPtr::getClassType(), 
                     "DrawObjectPrototype", 
                     DrawObjectPrototypeFieldId, DrawObjectPrototypeFieldMask,
                     false,
                     (FieldAccessMethod) &DefaultComboBoxComponentGeneratorBase::getSFDrawObjectPrototype),
    new FieldDescription(SFLayerPtr::getClassType(), 
                     "SelectedBackground", 
                     SelectedBackgroundFieldId, SelectedBackgroundFieldMask,
                     false,
                     (FieldAccessMethod) &DefaultComboBoxComponentGeneratorBase::getSFSelectedBackground),
    new FieldDescription(SFLayerPtr::getClassType(), 
                     "FocusedBackground", 
                     FocusedBackgroundFieldId, FocusedBackgroundFieldMask,
                     false,
                     (FieldAccessMethod) &DefaultComboBoxComponentGeneratorBase::getSFFocusedBackground),
    new FieldDescription(SFLayerPtr::getClassType(), 
                     "SelectedForeground", 
                     SelectedForegroundFieldId, SelectedForegroundFieldMask,
                     false,
                     (FieldAccessMethod) &DefaultComboBoxComponentGeneratorBase::getSFSelectedForeground),
    new FieldDescription(SFLayerPtr::getClassType(), 
                     "FocusedForeground", 
                     FocusedForegroundFieldId, FocusedForegroundFieldMask,
                     false,
                     (FieldAccessMethod) &DefaultComboBoxComponentGeneratorBase::getSFFocusedForeground),
    new FieldDescription(SFBorderPtr::getClassType(), 
                     "SelectedBorder", 
                     SelectedBorderFieldId, SelectedBorderFieldMask,
                     false,
                     (FieldAccessMethod) &DefaultComboBoxComponentGeneratorBase::getSFSelectedBorder),
    new FieldDescription(SFBorderPtr::getClassType(), 
                     "FocusedBorder", 
                     FocusedBorderFieldId, FocusedBorderFieldMask,
                     false,
                     (FieldAccessMethod) &DefaultComboBoxComponentGeneratorBase::getSFFocusedBorder),
    new FieldDescription(SFColor4f::getClassType(), 
                     "SelectedTextColor", 
                     SelectedTextColorFieldId, SelectedTextColorFieldMask,
                     false,
                     (FieldAccessMethod) &DefaultComboBoxComponentGeneratorBase::getSFSelectedTextColor),
    new FieldDescription(SFColor4f::getClassType(), 
                     "FocusedTextColor", 
                     FocusedTextColorFieldId, FocusedTextColorFieldMask,
                     false,
                     (FieldAccessMethod) &DefaultComboBoxComponentGeneratorBase::getSFFocusedTextColor),
    new FieldDescription(SFBool::getClassType(), 
                     "FocusedTextColorHasPriority", 
                     FocusedTextColorHasPriorityFieldId, FocusedTextColorHasPriorityFieldMask,
                     false,
                     (FieldAccessMethod) &DefaultComboBoxComponentGeneratorBase::getSFFocusedTextColorHasPriority),
    new FieldDescription(SFBool::getClassType(), 
                     "FocusedBorderHasPriority", 
                     FocusedBorderHasPriorityFieldId, FocusedBorderHasPriorityFieldMask,
                     false,
                     (FieldAccessMethod) &DefaultComboBoxComponentGeneratorBase::getSFFocusedBorderHasPriority),
    new FieldDescription(SFBool::getClassType(), 
                     "FocusedBackgroundHasPriority", 
                     FocusedBackgroundHasPriorityFieldId, FocusedBackgroundHasPriorityFieldMask,
                     false,
                     (FieldAccessMethod) &DefaultComboBoxComponentGeneratorBase::getSFFocusedBackgroundHasPriority)
};


FieldContainerType DefaultComboBoxComponentGeneratorBase::_type(
    "DefaultComboBoxComponentGenerator",
    "ComboBoxComponentGenerator",
    NULL,
    (PrototypeCreateF) &DefaultComboBoxComponentGeneratorBase::createEmpty,
    DefaultComboBoxComponentGenerator::initMethod,
    _desc,
    sizeof(_desc));

//OSG_FIELD_CONTAINER_DEF(DefaultComboBoxComponentGeneratorBase, DefaultComboBoxComponentGeneratorPtr)

/*------------------------------ get -----------------------------------*/

FieldContainerType &DefaultComboBoxComponentGeneratorBase::getType(void) 
{
    return _type; 
} 

const FieldContainerType &DefaultComboBoxComponentGeneratorBase::getType(void) const 
{
    return _type;
} 


FieldContainerPtr DefaultComboBoxComponentGeneratorBase::shallowCopy(void) const 
{ 
    DefaultComboBoxComponentGeneratorPtr returnValue; 

    newPtr(returnValue, dynamic_cast<const DefaultComboBoxComponentGenerator *>(this)); 

    return returnValue; 
}

UInt32 DefaultComboBoxComponentGeneratorBase::getContainerSize(void) const 
{ 
    return sizeof(DefaultComboBoxComponentGenerator); 
}


#if !defined(OSG_FIXED_MFIELDSYNC)
void DefaultComboBoxComponentGeneratorBase::executeSync(      FieldContainer &other,
                                    const BitVector      &whichField)
{
    this->executeSyncImpl((DefaultComboBoxComponentGeneratorBase *) &other, whichField);
}
#else
void DefaultComboBoxComponentGeneratorBase::executeSync(      FieldContainer &other,
                                    const BitVector      &whichField,                                    const SyncInfo       &sInfo     )
{
    this->executeSyncImpl((DefaultComboBoxComponentGeneratorBase *) &other, whichField, sInfo);
}
void DefaultComboBoxComponentGeneratorBase::execBeginEdit(const BitVector &whichField, 
                                            UInt32     uiAspect,
                                            UInt32     uiContainerSize) 
{
    this->execBeginEditImpl(whichField, uiAspect, uiContainerSize);
}

void DefaultComboBoxComponentGeneratorBase::onDestroyAspect(UInt32 uiId, UInt32 uiAspect)
{
    Inherited::onDestroyAspect(uiId, uiAspect);

}
#endif

/*------------------------- constructors ----------------------------------*/

#ifdef OSG_WIN32_ICL
#pragma warning (disable : 383)
#endif

DefaultComboBoxComponentGeneratorBase::DefaultComboBoxComponentGeneratorBase(void) :
    _sfDrawObjectPrototype    (ComponentPtr(NullFC)), 
    _sfSelectedBackground     (LayerPtr(NullFC)), 
    _sfFocusedBackground      (LayerPtr(NullFC)), 
    _sfSelectedForeground     (LayerPtr(NullFC)), 
    _sfFocusedForeground      (LayerPtr(NullFC)), 
    _sfSelectedBorder         (BorderPtr(NullFC)), 
    _sfFocusedBorder          (BorderPtr(NullFC)), 
    _sfSelectedTextColor      (Color4f(0.0,0.0,0.0,1.0)), 
    _sfFocusedTextColor       (Color4f(0.0,0.0,0.0,1.0)), 
    _sfFocusedTextColorHasPriority(bool(true)), 
    _sfFocusedBorderHasPriority(bool(true)), 
    _sfFocusedBackgroundHasPriority(bool(true)), 
    Inherited() 
{
}

#ifdef OSG_WIN32_ICL
#pragma warning (default : 383)
#endif

DefaultComboBoxComponentGeneratorBase::DefaultComboBoxComponentGeneratorBase(const DefaultComboBoxComponentGeneratorBase &source) :
    _sfDrawObjectPrototype    (source._sfDrawObjectPrototype    ), 
    _sfSelectedBackground     (source._sfSelectedBackground     ), 
    _sfFocusedBackground      (source._sfFocusedBackground      ), 
    _sfSelectedForeground     (source._sfSelectedForeground     ), 
    _sfFocusedForeground      (source._sfFocusedForeground      ), 
    _sfSelectedBorder         (source._sfSelectedBorder         ), 
    _sfFocusedBorder          (source._sfFocusedBorder          ), 
    _sfSelectedTextColor      (source._sfSelectedTextColor      ), 
    _sfFocusedTextColor       (source._sfFocusedTextColor       ), 
    _sfFocusedTextColorHasPriority(source._sfFocusedTextColorHasPriority), 
    _sfFocusedBorderHasPriority(source._sfFocusedBorderHasPriority), 
    _sfFocusedBackgroundHasPriority(source._sfFocusedBackgroundHasPriority), 
    Inherited                 (source)
{
}

/*-------------------------- destructors ----------------------------------*/

DefaultComboBoxComponentGeneratorBase::~DefaultComboBoxComponentGeneratorBase(void)
{
}

/*------------------------------ access -----------------------------------*/

UInt32 DefaultComboBoxComponentGeneratorBase::getBinSize(const BitVector &whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (DrawObjectPrototypeFieldMask & whichField))
    {
        returnValue += _sfDrawObjectPrototype.getBinSize();
    }

    if(FieldBits::NoField != (SelectedBackgroundFieldMask & whichField))
    {
        returnValue += _sfSelectedBackground.getBinSize();
    }

    if(FieldBits::NoField != (FocusedBackgroundFieldMask & whichField))
    {
        returnValue += _sfFocusedBackground.getBinSize();
    }

    if(FieldBits::NoField != (SelectedForegroundFieldMask & whichField))
    {
        returnValue += _sfSelectedForeground.getBinSize();
    }

    if(FieldBits::NoField != (FocusedForegroundFieldMask & whichField))
    {
        returnValue += _sfFocusedForeground.getBinSize();
    }

    if(FieldBits::NoField != (SelectedBorderFieldMask & whichField))
    {
        returnValue += _sfSelectedBorder.getBinSize();
    }

    if(FieldBits::NoField != (FocusedBorderFieldMask & whichField))
    {
        returnValue += _sfFocusedBorder.getBinSize();
    }

    if(FieldBits::NoField != (SelectedTextColorFieldMask & whichField))
    {
        returnValue += _sfSelectedTextColor.getBinSize();
    }

    if(FieldBits::NoField != (FocusedTextColorFieldMask & whichField))
    {
        returnValue += _sfFocusedTextColor.getBinSize();
    }

    if(FieldBits::NoField != (FocusedTextColorHasPriorityFieldMask & whichField))
    {
        returnValue += _sfFocusedTextColorHasPriority.getBinSize();
    }

    if(FieldBits::NoField != (FocusedBorderHasPriorityFieldMask & whichField))
    {
        returnValue += _sfFocusedBorderHasPriority.getBinSize();
    }

    if(FieldBits::NoField != (FocusedBackgroundHasPriorityFieldMask & whichField))
    {
        returnValue += _sfFocusedBackgroundHasPriority.getBinSize();
    }


    return returnValue;
}

void DefaultComboBoxComponentGeneratorBase::copyToBin(      BinaryDataHandler &pMem,
                                  const BitVector         &whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (DrawObjectPrototypeFieldMask & whichField))
    {
        _sfDrawObjectPrototype.copyToBin(pMem);
    }

    if(FieldBits::NoField != (SelectedBackgroundFieldMask & whichField))
    {
        _sfSelectedBackground.copyToBin(pMem);
    }

    if(FieldBits::NoField != (FocusedBackgroundFieldMask & whichField))
    {
        _sfFocusedBackground.copyToBin(pMem);
    }

    if(FieldBits::NoField != (SelectedForegroundFieldMask & whichField))
    {
        _sfSelectedForeground.copyToBin(pMem);
    }

    if(FieldBits::NoField != (FocusedForegroundFieldMask & whichField))
    {
        _sfFocusedForeground.copyToBin(pMem);
    }

    if(FieldBits::NoField != (SelectedBorderFieldMask & whichField))
    {
        _sfSelectedBorder.copyToBin(pMem);
    }

    if(FieldBits::NoField != (FocusedBorderFieldMask & whichField))
    {
        _sfFocusedBorder.copyToBin(pMem);
    }

    if(FieldBits::NoField != (SelectedTextColorFieldMask & whichField))
    {
        _sfSelectedTextColor.copyToBin(pMem);
    }

    if(FieldBits::NoField != (FocusedTextColorFieldMask & whichField))
    {
        _sfFocusedTextColor.copyToBin(pMem);
    }

    if(FieldBits::NoField != (FocusedTextColorHasPriorityFieldMask & whichField))
    {
        _sfFocusedTextColorHasPriority.copyToBin(pMem);
    }

    if(FieldBits::NoField != (FocusedBorderHasPriorityFieldMask & whichField))
    {
        _sfFocusedBorderHasPriority.copyToBin(pMem);
    }

    if(FieldBits::NoField != (FocusedBackgroundHasPriorityFieldMask & whichField))
    {
        _sfFocusedBackgroundHasPriority.copyToBin(pMem);
    }


}

void DefaultComboBoxComponentGeneratorBase::copyFromBin(      BinaryDataHandler &pMem,
                                    const BitVector    &whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (DrawObjectPrototypeFieldMask & whichField))
    {
        _sfDrawObjectPrototype.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (SelectedBackgroundFieldMask & whichField))
    {
        _sfSelectedBackground.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (FocusedBackgroundFieldMask & whichField))
    {
        _sfFocusedBackground.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (SelectedForegroundFieldMask & whichField))
    {
        _sfSelectedForeground.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (FocusedForegroundFieldMask & whichField))
    {
        _sfFocusedForeground.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (SelectedBorderFieldMask & whichField))
    {
        _sfSelectedBorder.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (FocusedBorderFieldMask & whichField))
    {
        _sfFocusedBorder.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (SelectedTextColorFieldMask & whichField))
    {
        _sfSelectedTextColor.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (FocusedTextColorFieldMask & whichField))
    {
        _sfFocusedTextColor.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (FocusedTextColorHasPriorityFieldMask & whichField))
    {
        _sfFocusedTextColorHasPriority.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (FocusedBorderHasPriorityFieldMask & whichField))
    {
        _sfFocusedBorderHasPriority.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (FocusedBackgroundHasPriorityFieldMask & whichField))
    {
        _sfFocusedBackgroundHasPriority.copyFromBin(pMem);
    }


}

#if !defined(OSG_FIXED_MFIELDSYNC)
void DefaultComboBoxComponentGeneratorBase::executeSyncImpl(      DefaultComboBoxComponentGeneratorBase *pOther,
                                        const BitVector         &whichField)
{

    Inherited::executeSyncImpl(pOther, whichField);

    if(FieldBits::NoField != (DrawObjectPrototypeFieldMask & whichField))
        _sfDrawObjectPrototype.syncWith(pOther->_sfDrawObjectPrototype);

    if(FieldBits::NoField != (SelectedBackgroundFieldMask & whichField))
        _sfSelectedBackground.syncWith(pOther->_sfSelectedBackground);

    if(FieldBits::NoField != (FocusedBackgroundFieldMask & whichField))
        _sfFocusedBackground.syncWith(pOther->_sfFocusedBackground);

    if(FieldBits::NoField != (SelectedForegroundFieldMask & whichField))
        _sfSelectedForeground.syncWith(pOther->_sfSelectedForeground);

    if(FieldBits::NoField != (FocusedForegroundFieldMask & whichField))
        _sfFocusedForeground.syncWith(pOther->_sfFocusedForeground);

    if(FieldBits::NoField != (SelectedBorderFieldMask & whichField))
        _sfSelectedBorder.syncWith(pOther->_sfSelectedBorder);

    if(FieldBits::NoField != (FocusedBorderFieldMask & whichField))
        _sfFocusedBorder.syncWith(pOther->_sfFocusedBorder);

    if(FieldBits::NoField != (SelectedTextColorFieldMask & whichField))
        _sfSelectedTextColor.syncWith(pOther->_sfSelectedTextColor);

    if(FieldBits::NoField != (FocusedTextColorFieldMask & whichField))
        _sfFocusedTextColor.syncWith(pOther->_sfFocusedTextColor);

    if(FieldBits::NoField != (FocusedTextColorHasPriorityFieldMask & whichField))
        _sfFocusedTextColorHasPriority.syncWith(pOther->_sfFocusedTextColorHasPriority);

    if(FieldBits::NoField != (FocusedBorderHasPriorityFieldMask & whichField))
        _sfFocusedBorderHasPriority.syncWith(pOther->_sfFocusedBorderHasPriority);

    if(FieldBits::NoField != (FocusedBackgroundHasPriorityFieldMask & whichField))
        _sfFocusedBackgroundHasPriority.syncWith(pOther->_sfFocusedBackgroundHasPriority);


}
#else
void DefaultComboBoxComponentGeneratorBase::executeSyncImpl(      DefaultComboBoxComponentGeneratorBase *pOther,
                                        const BitVector         &whichField,
                                        const SyncInfo          &sInfo      )
{

    Inherited::executeSyncImpl(pOther, whichField, sInfo);

    if(FieldBits::NoField != (DrawObjectPrototypeFieldMask & whichField))
        _sfDrawObjectPrototype.syncWith(pOther->_sfDrawObjectPrototype);

    if(FieldBits::NoField != (SelectedBackgroundFieldMask & whichField))
        _sfSelectedBackground.syncWith(pOther->_sfSelectedBackground);

    if(FieldBits::NoField != (FocusedBackgroundFieldMask & whichField))
        _sfFocusedBackground.syncWith(pOther->_sfFocusedBackground);

    if(FieldBits::NoField != (SelectedForegroundFieldMask & whichField))
        _sfSelectedForeground.syncWith(pOther->_sfSelectedForeground);

    if(FieldBits::NoField != (FocusedForegroundFieldMask & whichField))
        _sfFocusedForeground.syncWith(pOther->_sfFocusedForeground);

    if(FieldBits::NoField != (SelectedBorderFieldMask & whichField))
        _sfSelectedBorder.syncWith(pOther->_sfSelectedBorder);

    if(FieldBits::NoField != (FocusedBorderFieldMask & whichField))
        _sfFocusedBorder.syncWith(pOther->_sfFocusedBorder);

    if(FieldBits::NoField != (SelectedTextColorFieldMask & whichField))
        _sfSelectedTextColor.syncWith(pOther->_sfSelectedTextColor);

    if(FieldBits::NoField != (FocusedTextColorFieldMask & whichField))
        _sfFocusedTextColor.syncWith(pOther->_sfFocusedTextColor);

    if(FieldBits::NoField != (FocusedTextColorHasPriorityFieldMask & whichField))
        _sfFocusedTextColorHasPriority.syncWith(pOther->_sfFocusedTextColorHasPriority);

    if(FieldBits::NoField != (FocusedBorderHasPriorityFieldMask & whichField))
        _sfFocusedBorderHasPriority.syncWith(pOther->_sfFocusedBorderHasPriority);

    if(FieldBits::NoField != (FocusedBackgroundHasPriorityFieldMask & whichField))
        _sfFocusedBackgroundHasPriority.syncWith(pOther->_sfFocusedBackgroundHasPriority);



}

void DefaultComboBoxComponentGeneratorBase::execBeginEditImpl (const BitVector &whichField, 
                                                 UInt32     uiAspect,
                                                 UInt32     uiContainerSize)
{
    Inherited::execBeginEditImpl(whichField, uiAspect, uiContainerSize);

}
#endif



OSG_END_NAMESPACE

#include <OpenSG/OSGSFieldTypeDef.inl>
#include <OpenSG/OSGMFieldTypeDef.inl>

OSG_BEGIN_NAMESPACE

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldDataTraits<DefaultComboBoxComponentGeneratorPtr>::_type("DefaultComboBoxComponentGeneratorPtr", "ComboBoxComponentGeneratorPtr");
#endif

OSG_DLLEXPORT_SFIELD_DEF1(DefaultComboBoxComponentGeneratorPtr, OSG_USERINTERFACELIB_DLLTMPLMAPPING);
OSG_DLLEXPORT_MFIELD_DEF1(DefaultComboBoxComponentGeneratorPtr, OSG_USERINTERFACELIB_DLLTMPLMAPPING);


/*------------------------------------------------------------------------*/
/*                              cvs id's                                  */

#ifdef OSG_SGI_CC
#pragma set woff 1174
#endif

#ifdef OSG_LINUX_ICC
#pragma warning( disable : 177 )
#endif

namespace
{
    static Char8 cvsid_cpp       [] = "@(#)$Id: FCBaseTemplate_cpp.h,v 1.47 2006/03/17 17:03:19 pdaehne Exp $";
    static Char8 cvsid_hpp       [] = OSGDEFAULTCOMBOBOXCOMPONENTGENERATORBASE_HEADER_CVSID;
    static Char8 cvsid_inl       [] = OSGDEFAULTCOMBOBOXCOMPONENTGENERATORBASE_INLINE_CVSID;

    static Char8 cvsid_fields_hpp[] = OSGDEFAULTCOMBOBOXCOMPONENTGENERATORFIELDS_HEADER_CVSID;
}

OSG_END_NAMESPACE

