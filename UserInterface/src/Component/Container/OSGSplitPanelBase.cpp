/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2002 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact: dirk@opensg.org, gerrit.voss@vossg.org, jbehr@zgdv.de          *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class SplitPanel!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#define OSG_COMPILESPLITPANELINST

#include <stdlib.h>
#include <stdio.h>

#include <OpenSG/OSGConfig.h>

#include "OSGSplitPanelBase.h"
#include "OSGSplitPanel.h"

#include <Util/OSGUIDefines.h>            // Alignment default header

OSG_BEGIN_NAMESPACE

const OSG::BitVector  SplitPanelBase::MinComponentFieldMask = 
    (TypeTraits<BitVector>::One << SplitPanelBase::MinComponentFieldId);

const OSG::BitVector  SplitPanelBase::MaxComponentFieldMask = 
    (TypeTraits<BitVector>::One << SplitPanelBase::MaxComponentFieldId);

const OSG::BitVector  SplitPanelBase::DividerSizeFieldMask = 
    (TypeTraits<BitVector>::One << SplitPanelBase::DividerSizeFieldId);

const OSG::BitVector  SplitPanelBase::DividerPositionFieldMask = 
    (TypeTraits<BitVector>::One << SplitPanelBase::DividerPositionFieldId);

const OSG::BitVector  SplitPanelBase::MinDividerPositionFieldMask = 
    (TypeTraits<BitVector>::One << SplitPanelBase::MinDividerPositionFieldId);

const OSG::BitVector  SplitPanelBase::MaxDividerPositionFieldMask = 
    (TypeTraits<BitVector>::One << SplitPanelBase::MaxDividerPositionFieldId);

const OSG::BitVector  SplitPanelBase::DividerDrawObjectFieldMask = 
    (TypeTraits<BitVector>::One << SplitPanelBase::DividerDrawObjectFieldId);

const OSG::BitVector  SplitPanelBase::ExpandableFieldMask = 
    (TypeTraits<BitVector>::One << SplitPanelBase::ExpandableFieldId);

const OSG::BitVector  SplitPanelBase::AlignmentFieldMask = 
    (TypeTraits<BitVector>::One << SplitPanelBase::AlignmentFieldId);

const OSG::BitVector SplitPanelBase::MTInfluenceMask = 
    (Inherited::MTInfluenceMask) | 
    (static_cast<BitVector>(0x0) << Inherited::NextFieldId); 


// Field descriptions

/*! \var ComponentPtr    SplitPanelBase::_sfMinComponent
    
*/
/*! \var ComponentPtr    SplitPanelBase::_sfMaxComponent
    
*/
/*! \var UInt32          SplitPanelBase::_sfDividerSize
    
*/
/*! \var Real32          SplitPanelBase::_sfDividerPosition
    
*/
/*! \var Real32          SplitPanelBase::_sfMinDividerPosition
    
*/
/*! \var Real32          SplitPanelBase::_sfMaxDividerPosition
    
*/
/*! \var UIDrawObjectCanvasPtr SplitPanelBase::_sfDividerDrawObject
    
*/
/*! \var bool            SplitPanelBase::_sfExpandable
    
*/
/*! \var UInt32          SplitPanelBase::_sfAlignment
    
*/

//! SplitPanel description

FieldDescription *SplitPanelBase::_desc[] = 
{
    new FieldDescription(SFComponentPtr::getClassType(), 
                     "MinComponent", 
                     MinComponentFieldId, MinComponentFieldMask,
                     false,
                     (FieldAccessMethod) &SplitPanelBase::getSFMinComponent),
    new FieldDescription(SFComponentPtr::getClassType(), 
                     "MaxComponent", 
                     MaxComponentFieldId, MaxComponentFieldMask,
                     false,
                     (FieldAccessMethod) &SplitPanelBase::getSFMaxComponent),
    new FieldDescription(SFUInt32::getClassType(), 
                     "DividerSize", 
                     DividerSizeFieldId, DividerSizeFieldMask,
                     false,
                     (FieldAccessMethod) &SplitPanelBase::getSFDividerSize),
    new FieldDescription(SFReal32::getClassType(), 
                     "DividerPosition", 
                     DividerPositionFieldId, DividerPositionFieldMask,
                     false,
                     (FieldAccessMethod) &SplitPanelBase::getSFDividerPosition),
    new FieldDescription(SFReal32::getClassType(), 
                     "MinDividerPosition", 
                     MinDividerPositionFieldId, MinDividerPositionFieldMask,
                     false,
                     (FieldAccessMethod) &SplitPanelBase::getSFMinDividerPosition),
    new FieldDescription(SFReal32::getClassType(), 
                     "MaxDividerPosition", 
                     MaxDividerPositionFieldId, MaxDividerPositionFieldMask,
                     false,
                     (FieldAccessMethod) &SplitPanelBase::getSFMaxDividerPosition),
    new FieldDescription(SFUIDrawObjectCanvasPtr::getClassType(), 
                     "DividerDrawObject", 
                     DividerDrawObjectFieldId, DividerDrawObjectFieldMask,
                     false,
                     (FieldAccessMethod) &SplitPanelBase::getSFDividerDrawObject),
    new FieldDescription(SFBool::getClassType(), 
                     "Expandable", 
                     ExpandableFieldId, ExpandableFieldMask,
                     false,
                     (FieldAccessMethod) &SplitPanelBase::getSFExpandable),
    new FieldDescription(SFUInt32::getClassType(), 
                     "Alignment", 
                     AlignmentFieldId, AlignmentFieldMask,
                     false,
                     (FieldAccessMethod) &SplitPanelBase::getSFAlignment)
};


FieldContainerType SplitPanelBase::_type(
    "SplitPanel",
    "Container",
    NULL,
    (PrototypeCreateF) &SplitPanelBase::createEmpty,
    SplitPanel::initMethod,
    _desc,
    sizeof(_desc));

//OSG_FIELD_CONTAINER_DEF(SplitPanelBase, SplitPanelPtr)

/*------------------------------ get -----------------------------------*/

FieldContainerType &SplitPanelBase::getType(void) 
{
    return _type; 
} 

const FieldContainerType &SplitPanelBase::getType(void) const 
{
    return _type;
} 


FieldContainerPtr SplitPanelBase::shallowCopy(void) const 
{ 
    SplitPanelPtr returnValue; 

    newPtr(returnValue, dynamic_cast<const SplitPanel *>(this)); 

    return returnValue; 
}

UInt32 SplitPanelBase::getContainerSize(void) const 
{ 
    return sizeof(SplitPanel); 
}


#if !defined(OSG_FIXED_MFIELDSYNC)
void SplitPanelBase::executeSync(      FieldContainer &other,
                                    const BitVector      &whichField)
{
    this->executeSyncImpl((SplitPanelBase *) &other, whichField);
}
#else
void SplitPanelBase::executeSync(      FieldContainer &other,
                                    const BitVector      &whichField,                                    const SyncInfo       &sInfo     )
{
    this->executeSyncImpl((SplitPanelBase *) &other, whichField, sInfo);
}
void SplitPanelBase::execBeginEdit(const BitVector &whichField, 
                                            UInt32     uiAspect,
                                            UInt32     uiContainerSize) 
{
    this->execBeginEditImpl(whichField, uiAspect, uiContainerSize);
}

void SplitPanelBase::onDestroyAspect(UInt32 uiId, UInt32 uiAspect)
{
    Inherited::onDestroyAspect(uiId, uiAspect);

}
#endif

/*------------------------- constructors ----------------------------------*/

#ifdef OSG_WIN32_ICL
#pragma warning (disable : 383)
#endif

SplitPanelBase::SplitPanelBase(void) :
    _sfMinComponent           (ComponentPtr(NullFC)), 
    _sfMaxComponent           (ComponentPtr(NullFC)), 
    _sfDividerSize            (UInt32(3)), 
    _sfDividerPosition        (Real32(0.5)), 
    _sfMinDividerPosition     (Real32(0.0)), 
    _sfMaxDividerPosition     (Real32(1.0)), 
    _sfDividerDrawObject      (UIDrawObjectCanvasPtr(NullFC)), 
    _sfExpandable             (bool(true)), 
    _sfAlignment              (UInt32(HORIZONTAL_ALIGNMENT)), 
    Inherited() 
{
}

#ifdef OSG_WIN32_ICL
#pragma warning (default : 383)
#endif

SplitPanelBase::SplitPanelBase(const SplitPanelBase &source) :
    _sfMinComponent           (source._sfMinComponent           ), 
    _sfMaxComponent           (source._sfMaxComponent           ), 
    _sfDividerSize            (source._sfDividerSize            ), 
    _sfDividerPosition        (source._sfDividerPosition        ), 
    _sfMinDividerPosition     (source._sfMinDividerPosition     ), 
    _sfMaxDividerPosition     (source._sfMaxDividerPosition     ), 
    _sfDividerDrawObject      (source._sfDividerDrawObject      ), 
    _sfExpandable             (source._sfExpandable             ), 
    _sfAlignment              (source._sfAlignment              ), 
    Inherited                 (source)
{
}

/*-------------------------- destructors ----------------------------------*/

SplitPanelBase::~SplitPanelBase(void)
{
}

/*------------------------------ access -----------------------------------*/

UInt32 SplitPanelBase::getBinSize(const BitVector &whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (MinComponentFieldMask & whichField))
    {
        returnValue += _sfMinComponent.getBinSize();
    }

    if(FieldBits::NoField != (MaxComponentFieldMask & whichField))
    {
        returnValue += _sfMaxComponent.getBinSize();
    }

    if(FieldBits::NoField != (DividerSizeFieldMask & whichField))
    {
        returnValue += _sfDividerSize.getBinSize();
    }

    if(FieldBits::NoField != (DividerPositionFieldMask & whichField))
    {
        returnValue += _sfDividerPosition.getBinSize();
    }

    if(FieldBits::NoField != (MinDividerPositionFieldMask & whichField))
    {
        returnValue += _sfMinDividerPosition.getBinSize();
    }

    if(FieldBits::NoField != (MaxDividerPositionFieldMask & whichField))
    {
        returnValue += _sfMaxDividerPosition.getBinSize();
    }

    if(FieldBits::NoField != (DividerDrawObjectFieldMask & whichField))
    {
        returnValue += _sfDividerDrawObject.getBinSize();
    }

    if(FieldBits::NoField != (ExpandableFieldMask & whichField))
    {
        returnValue += _sfExpandable.getBinSize();
    }

    if(FieldBits::NoField != (AlignmentFieldMask & whichField))
    {
        returnValue += _sfAlignment.getBinSize();
    }


    return returnValue;
}

void SplitPanelBase::copyToBin(      BinaryDataHandler &pMem,
                                  const BitVector         &whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (MinComponentFieldMask & whichField))
    {
        _sfMinComponent.copyToBin(pMem);
    }

    if(FieldBits::NoField != (MaxComponentFieldMask & whichField))
    {
        _sfMaxComponent.copyToBin(pMem);
    }

    if(FieldBits::NoField != (DividerSizeFieldMask & whichField))
    {
        _sfDividerSize.copyToBin(pMem);
    }

    if(FieldBits::NoField != (DividerPositionFieldMask & whichField))
    {
        _sfDividerPosition.copyToBin(pMem);
    }

    if(FieldBits::NoField != (MinDividerPositionFieldMask & whichField))
    {
        _sfMinDividerPosition.copyToBin(pMem);
    }

    if(FieldBits::NoField != (MaxDividerPositionFieldMask & whichField))
    {
        _sfMaxDividerPosition.copyToBin(pMem);
    }

    if(FieldBits::NoField != (DividerDrawObjectFieldMask & whichField))
    {
        _sfDividerDrawObject.copyToBin(pMem);
    }

    if(FieldBits::NoField != (ExpandableFieldMask & whichField))
    {
        _sfExpandable.copyToBin(pMem);
    }

    if(FieldBits::NoField != (AlignmentFieldMask & whichField))
    {
        _sfAlignment.copyToBin(pMem);
    }


}

void SplitPanelBase::copyFromBin(      BinaryDataHandler &pMem,
                                    const BitVector    &whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (MinComponentFieldMask & whichField))
    {
        _sfMinComponent.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (MaxComponentFieldMask & whichField))
    {
        _sfMaxComponent.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (DividerSizeFieldMask & whichField))
    {
        _sfDividerSize.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (DividerPositionFieldMask & whichField))
    {
        _sfDividerPosition.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (MinDividerPositionFieldMask & whichField))
    {
        _sfMinDividerPosition.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (MaxDividerPositionFieldMask & whichField))
    {
        _sfMaxDividerPosition.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (DividerDrawObjectFieldMask & whichField))
    {
        _sfDividerDrawObject.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (ExpandableFieldMask & whichField))
    {
        _sfExpandable.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (AlignmentFieldMask & whichField))
    {
        _sfAlignment.copyFromBin(pMem);
    }


}

#if !defined(OSG_FIXED_MFIELDSYNC)
void SplitPanelBase::executeSyncImpl(      SplitPanelBase *pOther,
                                        const BitVector         &whichField)
{

    Inherited::executeSyncImpl(pOther, whichField);

    if(FieldBits::NoField != (MinComponentFieldMask & whichField))
        _sfMinComponent.syncWith(pOther->_sfMinComponent);

    if(FieldBits::NoField != (MaxComponentFieldMask & whichField))
        _sfMaxComponent.syncWith(pOther->_sfMaxComponent);

    if(FieldBits::NoField != (DividerSizeFieldMask & whichField))
        _sfDividerSize.syncWith(pOther->_sfDividerSize);

    if(FieldBits::NoField != (DividerPositionFieldMask & whichField))
        _sfDividerPosition.syncWith(pOther->_sfDividerPosition);

    if(FieldBits::NoField != (MinDividerPositionFieldMask & whichField))
        _sfMinDividerPosition.syncWith(pOther->_sfMinDividerPosition);

    if(FieldBits::NoField != (MaxDividerPositionFieldMask & whichField))
        _sfMaxDividerPosition.syncWith(pOther->_sfMaxDividerPosition);

    if(FieldBits::NoField != (DividerDrawObjectFieldMask & whichField))
        _sfDividerDrawObject.syncWith(pOther->_sfDividerDrawObject);

    if(FieldBits::NoField != (ExpandableFieldMask & whichField))
        _sfExpandable.syncWith(pOther->_sfExpandable);

    if(FieldBits::NoField != (AlignmentFieldMask & whichField))
        _sfAlignment.syncWith(pOther->_sfAlignment);


}
#else
void SplitPanelBase::executeSyncImpl(      SplitPanelBase *pOther,
                                        const BitVector         &whichField,
                                        const SyncInfo          &sInfo      )
{

    Inherited::executeSyncImpl(pOther, whichField, sInfo);

    if(FieldBits::NoField != (MinComponentFieldMask & whichField))
        _sfMinComponent.syncWith(pOther->_sfMinComponent);

    if(FieldBits::NoField != (MaxComponentFieldMask & whichField))
        _sfMaxComponent.syncWith(pOther->_sfMaxComponent);

    if(FieldBits::NoField != (DividerSizeFieldMask & whichField))
        _sfDividerSize.syncWith(pOther->_sfDividerSize);

    if(FieldBits::NoField != (DividerPositionFieldMask & whichField))
        _sfDividerPosition.syncWith(pOther->_sfDividerPosition);

    if(FieldBits::NoField != (MinDividerPositionFieldMask & whichField))
        _sfMinDividerPosition.syncWith(pOther->_sfMinDividerPosition);

    if(FieldBits::NoField != (MaxDividerPositionFieldMask & whichField))
        _sfMaxDividerPosition.syncWith(pOther->_sfMaxDividerPosition);

    if(FieldBits::NoField != (DividerDrawObjectFieldMask & whichField))
        _sfDividerDrawObject.syncWith(pOther->_sfDividerDrawObject);

    if(FieldBits::NoField != (ExpandableFieldMask & whichField))
        _sfExpandable.syncWith(pOther->_sfExpandable);

    if(FieldBits::NoField != (AlignmentFieldMask & whichField))
        _sfAlignment.syncWith(pOther->_sfAlignment);



}

void SplitPanelBase::execBeginEditImpl (const BitVector &whichField, 
                                                 UInt32     uiAspect,
                                                 UInt32     uiContainerSize)
{
    Inherited::execBeginEditImpl(whichField, uiAspect, uiContainerSize);

}
#endif



OSG_END_NAMESPACE

#include <OpenSG/OSGSFieldTypeDef.inl>
#include <OpenSG/OSGMFieldTypeDef.inl>

OSG_BEGIN_NAMESPACE

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldDataTraits<SplitPanelPtr>::_type("SplitPanelPtr", "ContainerPtr");
#endif

OSG_DLLEXPORT_SFIELD_DEF1(SplitPanelPtr, OSG_USERINTERFACELIB_DLLTMPLMAPPING);
OSG_DLLEXPORT_MFIELD_DEF1(SplitPanelPtr, OSG_USERINTERFACELIB_DLLTMPLMAPPING);


/*------------------------------------------------------------------------*/
/*                              cvs id's                                  */

#ifdef OSG_SGI_CC
#pragma set woff 1174
#endif

#ifdef OSG_LINUX_ICC
#pragma warning( disable : 177 )
#endif

namespace
{
    static Char8 cvsid_cpp       [] = "@(#)$Id: FCBaseTemplate_cpp.h,v 1.47 2006/03/17 17:03:19 pdaehne Exp $";
    static Char8 cvsid_hpp       [] = OSGSPLITPANELBASE_HEADER_CVSID;
    static Char8 cvsid_inl       [] = OSGSPLITPANELBASE_INLINE_CVSID;

    static Char8 cvsid_fields_hpp[] = OSGSPLITPANELFIELDS_HEADER_CVSID;
}

OSG_END_NAMESPACE

