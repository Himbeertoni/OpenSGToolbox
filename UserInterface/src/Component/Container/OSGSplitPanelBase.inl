/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2002 by the OpenSG Forum                 *
 *                                                                           *
 *   contact: dirk@opensg.org, gerrit.voss@vossg.org, jbehr@zgdv.de          *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class SplitPanel!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <OpenSG/OSGConfig.h>

OSG_BEGIN_NAMESPACE


//! access the type of the class
inline
OSG::FieldContainerType &SplitPanelBase::getClassType(void)
{
    return _type; 
} 

//! access the numerical type of the class
inline
OSG::UInt32 SplitPanelBase::getClassTypeId(void) 
{
    return _type.getId(); 
} 

//! create a new instance of the class
inline
SplitPanelPtr SplitPanelBase::create(void) 
{
    SplitPanelPtr fc; 

    if(getClassType().getPrototype() != OSG::NullFC) 
    {
        fc = SplitPanelPtr::dcast(
            getClassType().getPrototype()-> shallowCopy()); 
    }
    
    return fc; 
}

//! create an empty new instance of the class, do not copy the prototype
inline
SplitPanelPtr SplitPanelBase::createEmpty(void) 
{ 
    SplitPanelPtr returnValue; 
    
    newPtr(returnValue); 

    return returnValue; 
}


/*------------------------------ get -----------------------------------*/

//! Get the SplitPanel::_sfMinComponent field.
inline
SFComponentPtr *SplitPanelBase::getSFMinComponent(void)
{
    return &_sfMinComponent;
}

//! Get the SplitPanel::_sfMaxComponent field.
inline
SFComponentPtr *SplitPanelBase::getSFMaxComponent(void)
{
    return &_sfMaxComponent;
}

//! Get the SplitPanel::_sfDividerSize field.
inline
SFUInt32 *SplitPanelBase::getSFDividerSize(void)
{
    return &_sfDividerSize;
}

//! Get the SplitPanel::_sfDividerPosition field.
inline
SFReal32 *SplitPanelBase::getSFDividerPosition(void)
{
    return &_sfDividerPosition;
}

//! Get the SplitPanel::_sfMinDividerPosition field.
inline
SFReal32 *SplitPanelBase::getSFMinDividerPosition(void)
{
    return &_sfMinDividerPosition;
}

//! Get the SplitPanel::_sfMaxDividerPosition field.
inline
SFReal32 *SplitPanelBase::getSFMaxDividerPosition(void)
{
    return &_sfMaxDividerPosition;
}

//! Get the SplitPanel::_sfDividerDrawObject field.
inline
SFUIDrawObjectCanvasPtr *SplitPanelBase::getSFDividerDrawObject(void)
{
    return &_sfDividerDrawObject;
}

//! Get the SplitPanel::_sfExpandable field.
inline
SFBool *SplitPanelBase::getSFExpandable(void)
{
    return &_sfExpandable;
}

//! Get the SplitPanel::_sfAlignment field.
inline
SFUInt32 *SplitPanelBase::getSFAlignment(void)
{
    return &_sfAlignment;
}


//! Get the value of the SplitPanel::_sfMinComponent field.
inline
ComponentPtr &SplitPanelBase::getMinComponent(void)
{
    return _sfMinComponent.getValue();
}

//! Get the value of the SplitPanel::_sfMinComponent field.
inline
const ComponentPtr &SplitPanelBase::getMinComponent(void) const
{
    return _sfMinComponent.getValue();
}

//! Set the value of the SplitPanel::_sfMinComponent field.
inline
void SplitPanelBase::setMinComponent(const ComponentPtr &value)
{
	if (_sfMinComponent.getValue() != NullFC)
		getChildren().erase(getChildren().find(_sfMinComponent.getValue()));
    _sfMinComponent.setValue(value);
	getChildren().addValue(value);
}

//! Get the value of the SplitPanel::_sfMaxComponent field.
inline
ComponentPtr &SplitPanelBase::getMaxComponent(void)
{
    return _sfMaxComponent.getValue();
}

//! Get the value of the SplitPanel::_sfMaxComponent field.
inline
const ComponentPtr &SplitPanelBase::getMaxComponent(void) const
{
    return _sfMaxComponent.getValue();
}

//! Set the value of the SplitPanel::_sfMaxComponent field.
inline
void SplitPanelBase::setMaxComponent(const ComponentPtr &value)
{
	if (_sfMaxComponent.getValue() != NullFC)
		getChildren().erase(getChildren().find(_sfMaxComponent.getValue()));
    _sfMaxComponent.setValue(value);
	getChildren().addValue(value);
}

//! Get the value of the SplitPanel::_sfDividerSize field.
inline
UInt32 &SplitPanelBase::getDividerSize(void)
{
    return _sfDividerSize.getValue();
}

//! Get the value of the SplitPanel::_sfDividerSize field.
inline
const UInt32 &SplitPanelBase::getDividerSize(void) const
{
    return _sfDividerSize.getValue();
}

//! Set the value of the SplitPanel::_sfDividerSize field.
inline
void SplitPanelBase::setDividerSize(const UInt32 &value)
{
    _sfDividerSize.setValue(value);
}

//! Get the value of the SplitPanel::_sfDividerPosition field.
inline
Real32 &SplitPanelBase::getDividerPosition(void)
{
    return _sfDividerPosition.getValue();
}

//! Get the value of the SplitPanel::_sfDividerPosition field.
inline
const Real32 &SplitPanelBase::getDividerPosition(void) const
{
    return _sfDividerPosition.getValue();
}

//! Set the value of the SplitPanel::_sfDividerPosition field.
inline
void SplitPanelBase::setDividerPosition(const Real32 &value)
{
    _sfDividerPosition.setValue(value);
}

//! Get the value of the SplitPanel::_sfMinDividerPosition field.
inline
Real32 &SplitPanelBase::getMinDividerPosition(void)
{
    return _sfMinDividerPosition.getValue();
}

//! Get the value of the SplitPanel::_sfMinDividerPosition field.
inline
const Real32 &SplitPanelBase::getMinDividerPosition(void) const
{
    return _sfMinDividerPosition.getValue();
}

//! Set the value of the SplitPanel::_sfMinDividerPosition field.
inline
void SplitPanelBase::setMinDividerPosition(const Real32 &value)
{
    _sfMinDividerPosition.setValue(value);
}

//! Get the value of the SplitPanel::_sfMaxDividerPosition field.
inline
Real32 &SplitPanelBase::getMaxDividerPosition(void)
{
    return _sfMaxDividerPosition.getValue();
}

//! Get the value of the SplitPanel::_sfMaxDividerPosition field.
inline
const Real32 &SplitPanelBase::getMaxDividerPosition(void) const
{
    return _sfMaxDividerPosition.getValue();
}

//! Set the value of the SplitPanel::_sfMaxDividerPosition field.
inline
void SplitPanelBase::setMaxDividerPosition(const Real32 &value)
{
    _sfMaxDividerPosition.setValue(value);
}

//! Get the value of the SplitPanel::_sfDividerDrawObject field.
inline
UIDrawObjectCanvasPtr &SplitPanelBase::getDividerDrawObject(void)
{
    return _sfDividerDrawObject.getValue();
}

//! Get the value of the SplitPanel::_sfDividerDrawObject field.
inline
const UIDrawObjectCanvasPtr &SplitPanelBase::getDividerDrawObject(void) const
{
    return _sfDividerDrawObject.getValue();
}

//! Set the value of the SplitPanel::_sfDividerDrawObject field.
inline
void SplitPanelBase::setDividerDrawObject(const UIDrawObjectCanvasPtr &value)
{
	_sfDividerDrawObject.setValue(value);
}

//! Get the value of the SplitPanel::_sfExpandable field.
inline
bool &SplitPanelBase::getExpandable(void)
{
    return _sfExpandable.getValue();
}

//! Get the value of the SplitPanel::_sfExpandable field.
inline
const bool &SplitPanelBase::getExpandable(void) const
{
    return _sfExpandable.getValue();
}

//! Set the value of the SplitPanel::_sfExpandable field.
inline
void SplitPanelBase::setExpandable(const bool &value)
{
    _sfExpandable.setValue(value);
}

//! Get the value of the SplitPanel::_sfAlignment field.
inline
UInt32 &SplitPanelBase::getAlignment(void)
{
    return _sfAlignment.getValue();
}

//! Get the value of the SplitPanel::_sfAlignment field.
inline
const UInt32 &SplitPanelBase::getAlignment(void) const
{
    return _sfAlignment.getValue();
}

//! Set the value of the SplitPanel::_sfAlignment field.
inline
void SplitPanelBase::setAlignment(const UInt32 &value)
{
    _sfAlignment.setValue(value);
}


OSG_END_NAMESPACE

#define OSGSPLITPANELBASE_INLINE_CVSID "@(#)$Id: FCBaseTemplate_inl.h,v 1.20 2002/12/04 14:22:22 dirk Exp $"

