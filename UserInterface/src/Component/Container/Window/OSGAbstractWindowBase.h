/*---------------------------------------------------------------------------*\
 *                     OpenSG ToolBox UserInterface                          *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                         www.vrac.iastate.edu                              *
 *                                                                           *
 *   Authors: David Kabala, Alden Peterson, Lee Zaniewski, Jonathan Flory    *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class AbstractWindow
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#ifndef _OSGABSTRACTWINDOWBASE_H_
#define _OSGABSTRACTWINDOWBASE_H_
#ifdef __sgi
#pragma once
#endif


#include <OpenSG/OSGConfig.h>
#include "OSGUserInterfaceDef.h"

#include <OpenSG/OSGBaseTypes.h>
#include <OpenSG/OSGRefPtr.h>
#include <OpenSG/OSGCoredNodePtr.h>

#include "Component/Container/OSGContainer.h" // Parent

#include "UIDrawingSurface/OSGUIDrawingSurfaceFields.h" // DrawingSurface type
#include <OpenSG/OSGBoolFields.h> // Closable type
#include <OpenSG/OSGBoolFields.h> // IsClosed type
#include <OpenSG/OSGBoolFields.h> // Iconable type
#include <OpenSG/OSGBoolFields.h> // IsIcon type
#include <OpenSG/OSGBoolFields.h> // Maximizable type
#include <OpenSG/OSGBoolFields.h> // IsMaximized type
#include <OpenSG/OSGPnt2fFields.h> // PreviousPosition type
#include <OpenSG/OSGVec2fFields.h> // PreviousSize type
#include <OpenSG/OSGBoolFields.h> // Resizable type
#include <OpenSG/OSGBoolFields.h> // IsSelected type
#include <OpenSG/OSGStringFields.h> // Title type
#include "Component/Misc/OSGUIDrawObjectCanvas.h" // DesktopIcon type
#include <OpenSG/OSGBoolFields.h> // AllwaysOnTop type
#include <OpenSG/OSGBoolFields.h> // DrawTitlebar type
#include <OpenSG/OSGBoolFields.h> // DrawDecorations type
#include <OpenSG/OSGBoolFields.h> // LockInput type
#include <OpenSG/OSGVec2fFields.h> // AlignmentInDrawingSurface type
#include <OpenSG/OSGVec2fFields.h> // ScalingInDrawingSurface type
#include <OpenSG/OSGUInt32Fields.h> // ResizeModifyCursorWidth type

#include "OSGAbstractWindowFields.h"

OSG_BEGIN_NAMESPACE

class AbstractWindow;
class BinaryDataHandler;

//! \brief AbstractWindow Base Class.

class OSG_USERINTERFACELIB_DLLMAPPING AbstractWindowBase : public Container
{
  private:

    typedef Container    Inherited;

    /*==========================  PUBLIC  =================================*/
  public:

    typedef AbstractWindowPtr  Ptr;

    enum
    {
        DrawingSurfaceFieldId            = Inherited::NextFieldId,
        ClosableFieldId                  = DrawingSurfaceFieldId            + 1,
        IsClosedFieldId                  = ClosableFieldId                  + 1,
        IconableFieldId                  = IsClosedFieldId                  + 1,
        IsIconFieldId                    = IconableFieldId                  + 1,
        MaximizableFieldId               = IsIconFieldId                    + 1,
        IsMaximizedFieldId               = MaximizableFieldId               + 1,
        PreviousPositionFieldId          = IsMaximizedFieldId               + 1,
        PreviousSizeFieldId              = PreviousPositionFieldId          + 1,
        ResizableFieldId                 = PreviousSizeFieldId              + 1,
        IsSelectedFieldId                = ResizableFieldId                 + 1,
        TitleFieldId                     = IsSelectedFieldId                + 1,
        DesktopIconFieldId               = TitleFieldId                     + 1,
        AllwaysOnTopFieldId              = DesktopIconFieldId               + 1,
        DrawTitlebarFieldId              = AllwaysOnTopFieldId              + 1,
        DrawDecorationsFieldId           = DrawTitlebarFieldId              + 1,
        LockInputFieldId                 = DrawDecorationsFieldId           + 1,
        AlignmentInDrawingSurfaceFieldId = LockInputFieldId                 + 1,
        ScalingInDrawingSurfaceFieldId   = AlignmentInDrawingSurfaceFieldId + 1,
        ResizeModifyCursorWidthFieldId   = ScalingInDrawingSurfaceFieldId   + 1,
        NextFieldId                      = ResizeModifyCursorWidthFieldId   + 1
    };

    static const OSG::BitVector DrawingSurfaceFieldMask;
    static const OSG::BitVector ClosableFieldMask;
    static const OSG::BitVector IsClosedFieldMask;
    static const OSG::BitVector IconableFieldMask;
    static const OSG::BitVector IsIconFieldMask;
    static const OSG::BitVector MaximizableFieldMask;
    static const OSG::BitVector IsMaximizedFieldMask;
    static const OSG::BitVector PreviousPositionFieldMask;
    static const OSG::BitVector PreviousSizeFieldMask;
    static const OSG::BitVector ResizableFieldMask;
    static const OSG::BitVector IsSelectedFieldMask;
    static const OSG::BitVector TitleFieldMask;
    static const OSG::BitVector DesktopIconFieldMask;
    static const OSG::BitVector AllwaysOnTopFieldMask;
    static const OSG::BitVector DrawTitlebarFieldMask;
    static const OSG::BitVector DrawDecorationsFieldMask;
    static const OSG::BitVector LockInputFieldMask;
    static const OSG::BitVector AlignmentInDrawingSurfaceFieldMask;
    static const OSG::BitVector ScalingInDrawingSurfaceFieldMask;
    static const OSG::BitVector ResizeModifyCursorWidthFieldMask;


    static const OSG::BitVector MTInfluenceMask;

    /*---------------------------------------------------------------------*/
    /*! \name                    Class Get                                 */
    /*! \{                                                                 */

    static        FieldContainerType &getClassType    (void); 
    static        UInt32              getClassTypeId  (void); 

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                FieldContainer Get                            */
    /*! \{                                                                 */

    virtual       FieldContainerType &getType  (void); 
    virtual const FieldContainerType &getType  (void) const; 

    virtual       UInt32              getContainerSize(void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Get                                 */
    /*! \{                                                                 */

           SFUIDrawingSurfacePtr *getSFDrawingSurface (void);
           SFBool              *getSFClosable       (void);
           SFBool              *getSFIsClosed       (void);
           SFBool              *getSFIconable       (void);
           SFBool              *getSFIsIcon         (void);
           SFBool              *getSFMaximizable    (void);
           SFBool              *getSFIsMaximized    (void);
           SFPnt2f             *getSFPreviousPosition(void);
           SFVec2f             *getSFPreviousSize   (void);
           SFBool              *getSFResizable      (void);
           SFBool              *getSFIsSelected     (void);
           SFString            *getSFTitle          (void);
           SFUIDrawObjectCanvasPtr *getSFDesktopIcon    (void);
           SFBool              *getSFAllwaysOnTop   (void);
           SFBool              *getSFDrawTitlebar   (void);
           SFBool              *getSFDrawDecorations(void);
           SFBool              *getSFLockInput      (void);
           SFVec2f             *getSFAlignmentInDrawingSurface(void);
           SFVec2f             *getSFScalingInDrawingSurface(void);
           SFUInt32            *getSFResizeModifyCursorWidth(void);

           UIDrawingSurfacePtr &getDrawingSurface (void);
     const UIDrawingSurfacePtr &getDrawingSurface (void) const;
           bool                &getClosable       (void);
     const bool                &getClosable       (void) const;
           bool                &getIsClosed       (void);
     const bool                &getIsClosed       (void) const;
           bool                &getIconable       (void);
     const bool                &getIconable       (void) const;
           bool                &getIsIcon         (void);
     const bool                &getIsIcon         (void) const;
           bool                &getMaximizable    (void);
     const bool                &getMaximizable    (void) const;
           bool                &getIsMaximized    (void);
     const bool                &getIsMaximized    (void) const;
           Pnt2f               &getPreviousPosition(void);
     const Pnt2f               &getPreviousPosition(void) const;
           Vec2f               &getPreviousSize   (void);
     const Vec2f               &getPreviousSize   (void) const;
           bool                &getResizable      (void);
     const bool                &getResizable      (void) const;
           bool                &getIsSelected     (void);
     const bool                &getIsSelected     (void) const;
           std::string         &getTitle          (void);
     const std::string         &getTitle          (void) const;
           UIDrawObjectCanvasPtr &getDesktopIcon    (void);
     const UIDrawObjectCanvasPtr &getDesktopIcon    (void) const;
           bool                &getAllwaysOnTop   (void);
     const bool                &getAllwaysOnTop   (void) const;
           bool                &getDrawTitlebar   (void);
     const bool                &getDrawTitlebar   (void) const;
           bool                &getDrawDecorations(void);
     const bool                &getDrawDecorations(void) const;
           bool                &getLockInput      (void);
     const bool                &getLockInput      (void) const;
           Vec2f               &getAlignmentInDrawingSurface(void);
     const Vec2f               &getAlignmentInDrawingSurface(void) const;
           Vec2f               &getScalingInDrawingSurface(void);
     const Vec2f               &getScalingInDrawingSurface(void) const;
           UInt32              &getResizeModifyCursorWidth(void);
     const UInt32              &getResizeModifyCursorWidth(void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Set                                 */
    /*! \{                                                                 */

     void setDrawingSurface ( const UIDrawingSurfacePtr &value );
     void setClosable       ( const bool &value );
     void setIsClosed       ( const bool &value );
     void setIconable       ( const bool &value );
     void setIsIcon         ( const bool &value );
     void setMaximizable    ( const bool &value );
     void setIsMaximized    ( const bool &value );
     void setPreviousPosition( const Pnt2f &value );
     void setPreviousSize   ( const Vec2f &value );
     void setResizable      ( const bool &value );
     void setIsSelected     ( const bool &value );
     void setTitle          ( const std::string &value );
     void setDesktopIcon    ( const UIDrawObjectCanvasPtr &value );
     void setAllwaysOnTop   ( const bool &value );
     void setDrawTitlebar   ( const bool &value );
     void setDrawDecorations( const bool &value );
     void setLockInput      ( const bool &value );
     void setAlignmentInDrawingSurface( const Vec2f &value );
     void setScalingInDrawingSurface( const Vec2f &value );
     void setResizeModifyCursorWidth( const UInt32 &value );

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Binary Access                              */
    /*! \{                                                                 */

    virtual UInt32 getBinSize (const BitVector         &whichField);
    virtual void   copyToBin  (      BinaryDataHandler &pMem,
                               const BitVector         &whichField);
    virtual void   copyFromBin(      BinaryDataHandler &pMem,
                               const BitVector         &whichField);


    /*! \}                                                                 */
    /*=========================  PROTECTED  ===============================*/
  protected:

    /*---------------------------------------------------------------------*/
    /*! \name                      Fields                                  */
    /*! \{                                                                 */

    SFUIDrawingSurfacePtr   _sfDrawingSurface;
    SFBool              _sfClosable;
    SFBool              _sfIsClosed;
    SFBool              _sfIconable;
    SFBool              _sfIsIcon;
    SFBool              _sfMaximizable;
    SFBool              _sfIsMaximized;
    SFPnt2f             _sfPreviousPosition;
    SFVec2f             _sfPreviousSize;
    SFBool              _sfResizable;
    SFBool              _sfIsSelected;
    SFString            _sfTitle;
    SFUIDrawObjectCanvasPtr   _sfDesktopIcon;
    SFBool              _sfAllwaysOnTop;
    SFBool              _sfDrawTitlebar;
    SFBool              _sfDrawDecorations;
    SFBool              _sfLockInput;
    SFVec2f             _sfAlignmentInDrawingSurface;
    SFVec2f             _sfScalingInDrawingSurface;
    SFUInt32            _sfResizeModifyCursorWidth;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Constructors                               */
    /*! \{                                                                 */

    AbstractWindowBase(void);
    AbstractWindowBase(const AbstractWindowBase &source);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Destructors                                */
    /*! \{                                                                 */

    virtual ~AbstractWindowBase(void); 

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

#if !defined(OSG_FIXED_MFIELDSYNC)
    void executeSyncImpl(      AbstractWindowBase *pOther,
                         const BitVector         &whichField);

    virtual void   executeSync(      FieldContainer    &other,
                               const BitVector         &whichField);
#else
    void executeSyncImpl(      AbstractWindowBase *pOther,
                         const BitVector         &whichField,
                         const SyncInfo          &sInfo     );

    virtual void   executeSync(      FieldContainer    &other,
                               const BitVector         &whichField,
                               const SyncInfo          &sInfo);

    virtual void execBeginEdit     (const BitVector &whichField,
                                          UInt32     uiAspect,
                                          UInt32     uiContainerSize);

            void execBeginEditImpl (const BitVector &whichField,
                                          UInt32     uiAspect,
                                          UInt32     uiContainerSize);

    virtual void onDestroyAspect(UInt32 uiId, UInt32 uiAspect);
#endif

    /*! \}                                                                 */
    /*==========================  PRIVATE  ================================*/
  private:

    friend class FieldContainer;

    static FieldDescription   *_desc[];
    static FieldContainerType  _type;


    // prohibit default functions (move to 'public' if you need one)
    void operator =(const AbstractWindowBase &source);
};

//---------------------------------------------------------------------------
//   Exported Types
//---------------------------------------------------------------------------


typedef AbstractWindowBase *AbstractWindowBaseP;

typedef osgIF<AbstractWindowBase::isNodeCore,
              CoredNodePtr<AbstractWindow>,
              FieldContainer::attempt_to_create_CoredNodePtr_on_non_NodeCore_FC
              >::_IRet AbstractWindowNodePtr;

typedef RefPtr<AbstractWindowPtr> AbstractWindowRefPtr;

OSG_END_NAMESPACE

#define OSGABSTRACTWINDOWBASE_HEADER_CVSID "@(#)$Id: FCBaseTemplate_h.h,v 1.40 2005/07/20 00:10:14 vossg Exp $"

#endif /* _OSGABSTRACTWINDOWBASE_H_ */
