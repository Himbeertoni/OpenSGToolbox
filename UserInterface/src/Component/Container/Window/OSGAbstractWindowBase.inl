/*---------------------------------------------------------------------------*\
 *                     OpenSG ToolBox UserInterface                          *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *   Authors: David Kabala, Alden Peterson, Lee Zaniewski, Jonathan Flory    *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class AbstractWindow!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <OpenSG/OSGConfig.h>

OSG_BEGIN_NAMESPACE


//! access the type of the class
inline
OSG::FieldContainerType &AbstractWindowBase::getClassType(void)
{
    return _type; 
} 

//! access the numerical type of the class
inline
OSG::UInt32 AbstractWindowBase::getClassTypeId(void) 
{
    return _type.getId(); 
} 


/*------------------------------ get -----------------------------------*/

//! Get the AbstractWindow::_sfDrawingSurface field.
inline
SFUIDrawingSurfacePtr *AbstractWindowBase::getSFDrawingSurface(void)
{
    return &_sfDrawingSurface;
}

//! Get the AbstractWindow::_sfClosable field.
inline
SFBool *AbstractWindowBase::getSFClosable(void)
{
    return &_sfClosable;
}

//! Get the AbstractWindow::_sfIsClosed field.
inline
SFBool *AbstractWindowBase::getSFIsClosed(void)
{
    return &_sfIsClosed;
}

//! Get the AbstractWindow::_sfIconable field.
inline
SFBool *AbstractWindowBase::getSFIconable(void)
{
    return &_sfIconable;
}

//! Get the AbstractWindow::_sfIsIcon field.
inline
SFBool *AbstractWindowBase::getSFIsIcon(void)
{
    return &_sfIsIcon;
}

//! Get the AbstractWindow::_sfMaximizable field.
inline
SFBool *AbstractWindowBase::getSFMaximizable(void)
{
    return &_sfMaximizable;
}

//! Get the AbstractWindow::_sfIsMaximized field.
inline
SFBool *AbstractWindowBase::getSFIsMaximized(void)
{
    return &_sfIsMaximized;
}

//! Get the AbstractWindow::_sfResizable field.
inline
SFBool *AbstractWindowBase::getSFResizable(void)
{
    return &_sfResizable;
}

//! Get the AbstractWindow::_sfIsSelected field.
inline
SFBool *AbstractWindowBase::getSFIsSelected(void)
{
    return &_sfIsSelected;
}

//! Get the AbstractWindow::_sfTitle field.
inline
SFString *AbstractWindowBase::getSFTitle(void)
{
    return &_sfTitle;
}

//! Get the AbstractWindow::_sfDesktopIcon field.
inline
SFUIDrawObjectCanvasPtr *AbstractWindowBase::getSFDesktopIcon(void)
{
    return &_sfDesktopIcon;
}

//! Get the AbstractWindow::_sfFrameIcon field.
inline
SFUIDrawObjectCanvasPtr *AbstractWindowBase::getSFFrameIcon(void)
{
    return &_sfFrameIcon;
}


//! Get the value of the AbstractWindow::_sfDrawingSurface field.
inline
UIDrawingSurfacePtr &AbstractWindowBase::getDrawingSurface(void)
{
    return _sfDrawingSurface.getValue();
}

//! Get the value of the AbstractWindow::_sfDrawingSurface field.
inline
const UIDrawingSurfacePtr &AbstractWindowBase::getDrawingSurface(void) const
{
    return _sfDrawingSurface.getValue();
}

//! Set the value of the AbstractWindow::_sfDrawingSurface field.
inline
void AbstractWindowBase::setDrawingSurface(const UIDrawingSurfacePtr &value)
{
    _sfDrawingSurface.setValue(value);
}

//! Get the value of the AbstractWindow::_sfClosable field.
inline
bool &AbstractWindowBase::getClosable(void)
{
    return _sfClosable.getValue();
}

//! Get the value of the AbstractWindow::_sfClosable field.
inline
const bool &AbstractWindowBase::getClosable(void) const
{
    return _sfClosable.getValue();
}

//! Set the value of the AbstractWindow::_sfClosable field.
inline
void AbstractWindowBase::setClosable(const bool &value)
{
    _sfClosable.setValue(value);
}

//! Get the value of the AbstractWindow::_sfIsClosed field.
inline
bool &AbstractWindowBase::getIsClosed(void)
{
    return _sfIsClosed.getValue();
}

//! Get the value of the AbstractWindow::_sfIsClosed field.
inline
const bool &AbstractWindowBase::getIsClosed(void) const
{
    return _sfIsClosed.getValue();
}

//! Set the value of the AbstractWindow::_sfIsClosed field.
inline
void AbstractWindowBase::setIsClosed(const bool &value)
{
    _sfIsClosed.setValue(value);
}

//! Get the value of the AbstractWindow::_sfIconable field.
inline
bool &AbstractWindowBase::getIconable(void)
{
    return _sfIconable.getValue();
}

//! Get the value of the AbstractWindow::_sfIconable field.
inline
const bool &AbstractWindowBase::getIconable(void) const
{
    return _sfIconable.getValue();
}

//! Set the value of the AbstractWindow::_sfIconable field.
inline
void AbstractWindowBase::setIconable(const bool &value)
{
    _sfIconable.setValue(value);
}

//! Get the value of the AbstractWindow::_sfIsIcon field.
inline
bool &AbstractWindowBase::getIsIcon(void)
{
    return _sfIsIcon.getValue();
}

//! Get the value of the AbstractWindow::_sfIsIcon field.
inline
const bool &AbstractWindowBase::getIsIcon(void) const
{
    return _sfIsIcon.getValue();
}

//! Set the value of the AbstractWindow::_sfIsIcon field.
inline
void AbstractWindowBase::setIsIcon(const bool &value)
{
    _sfIsIcon.setValue(value);
}

//! Get the value of the AbstractWindow::_sfMaximizable field.
inline
bool &AbstractWindowBase::getMaximizable(void)
{
    return _sfMaximizable.getValue();
}

//! Get the value of the AbstractWindow::_sfMaximizable field.
inline
const bool &AbstractWindowBase::getMaximizable(void) const
{
    return _sfMaximizable.getValue();
}

//! Set the value of the AbstractWindow::_sfMaximizable field.
inline
void AbstractWindowBase::setMaximizable(const bool &value)
{
    _sfMaximizable.setValue(value);
}

//! Get the value of the AbstractWindow::_sfIsMaximized field.
inline
bool &AbstractWindowBase::getIsMaximized(void)
{
    return _sfIsMaximized.getValue();
}

//! Get the value of the AbstractWindow::_sfIsMaximized field.
inline
const bool &AbstractWindowBase::getIsMaximized(void) const
{
    return _sfIsMaximized.getValue();
}

//! Set the value of the AbstractWindow::_sfIsMaximized field.
inline
void AbstractWindowBase::setIsMaximized(const bool &value)
{
    _sfIsMaximized.setValue(value);
}

//! Get the value of the AbstractWindow::_sfResizable field.
inline
bool &AbstractWindowBase::getResizable(void)
{
    return _sfResizable.getValue();
}

//! Get the value of the AbstractWindow::_sfResizable field.
inline
const bool &AbstractWindowBase::getResizable(void) const
{
    return _sfResizable.getValue();
}

//! Set the value of the AbstractWindow::_sfResizable field.
inline
void AbstractWindowBase::setResizable(const bool &value)
{
    _sfResizable.setValue(value);
}

//! Get the value of the AbstractWindow::_sfIsSelected field.
inline
bool &AbstractWindowBase::getIsSelected(void)
{
    return _sfIsSelected.getValue();
}

//! Get the value of the AbstractWindow::_sfIsSelected field.
inline
const bool &AbstractWindowBase::getIsSelected(void) const
{
    return _sfIsSelected.getValue();
}

//! Set the value of the AbstractWindow::_sfIsSelected field.
inline
void AbstractWindowBase::setIsSelected(const bool &value)
{
    _sfIsSelected.setValue(value);
}

//! Get the value of the AbstractWindow::_sfTitle field.
inline
std::string &AbstractWindowBase::getTitle(void)
{
    return _sfTitle.getValue();
}

//! Get the value of the AbstractWindow::_sfTitle field.
inline
const std::string &AbstractWindowBase::getTitle(void) const
{
    return _sfTitle.getValue();
}

//! Set the value of the AbstractWindow::_sfTitle field.
inline
void AbstractWindowBase::setTitle(const std::string &value)
{
    _sfTitle.setValue(value);
}

//! Get the value of the AbstractWindow::_sfDesktopIcon field.
inline
UIDrawObjectCanvasPtr &AbstractWindowBase::getDesktopIcon(void)
{
    return _sfDesktopIcon.getValue();
}

//! Get the value of the AbstractWindow::_sfDesktopIcon field.
inline
const UIDrawObjectCanvasPtr &AbstractWindowBase::getDesktopIcon(void) const
{
    return _sfDesktopIcon.getValue();
}

//! Set the value of the AbstractWindow::_sfDesktopIcon field.
inline
void AbstractWindowBase::setDesktopIcon(const UIDrawObjectCanvasPtr &value)
{
    _sfDesktopIcon.setValue(value);
}

//! Get the value of the AbstractWindow::_sfFrameIcon field.
inline
UIDrawObjectCanvasPtr &AbstractWindowBase::getFrameIcon(void)
{
    return _sfFrameIcon.getValue();
}

//! Get the value of the AbstractWindow::_sfFrameIcon field.
inline
const UIDrawObjectCanvasPtr &AbstractWindowBase::getFrameIcon(void) const
{
    return _sfFrameIcon.getValue();
}

//! Set the value of the AbstractWindow::_sfFrameIcon field.
inline
void AbstractWindowBase::setFrameIcon(const UIDrawObjectCanvasPtr &value)
{
    _sfFrameIcon.setValue(value);
}


OSG_END_NAMESPACE

#define OSGABSTRACTWINDOWBASE_INLINE_CVSID "@(#)$Id: FCBaseTemplate_inl.h,v 1.20 2002/12/04 14:22:22 dirk Exp $"

