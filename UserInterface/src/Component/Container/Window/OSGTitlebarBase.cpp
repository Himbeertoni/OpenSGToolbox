/*---------------------------------------------------------------------------*\
 *                     OpenSG ToolBox UserInterface                          *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                         www.vrac.iastate.edu                              *
 *                                                                           *
 *   Authors: David Kabala, Alden Peterson, Lee Zaniewski, Jonathan Flory    *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class Titlebar!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#define OSG_COMPILETITLEBARINST

#include <stdlib.h>
#include <stdio.h>

#include <OpenSG/OSGConfig.h>

#include "OSGTitlebarBase.h"
#include "OSGTitlebar.h"


OSG_BEGIN_NAMESPACE

const OSG::BitVector  TitlebarBase::IconifyButtonFieldMask = 
    (TypeTraits<BitVector>::One << TitlebarBase::IconifyButtonFieldId);

const OSG::BitVector  TitlebarBase::MaximizeButtonFieldMask = 
    (TypeTraits<BitVector>::One << TitlebarBase::MaximizeButtonFieldId);

const OSG::BitVector  TitlebarBase::CloseButtonFieldMask = 
    (TypeTraits<BitVector>::One << TitlebarBase::CloseButtonFieldId);

const OSG::BitVector  TitlebarBase::TitleLabelFieldMask = 
    (TypeTraits<BitVector>::One << TitlebarBase::TitleLabelFieldId);

const OSG::BitVector  TitlebarBase::FrameIconFieldMask = 
    (TypeTraits<BitVector>::One << TitlebarBase::FrameIconFieldId);

const OSG::BitVector  TitlebarBase::DrawCloseFieldMask = 
    (TypeTraits<BitVector>::One << TitlebarBase::DrawCloseFieldId);

const OSG::BitVector  TitlebarBase::DrawMaximizeFieldMask = 
    (TypeTraits<BitVector>::One << TitlebarBase::DrawMaximizeFieldId);

const OSG::BitVector  TitlebarBase::DrawIconifyFieldMask = 
    (TypeTraits<BitVector>::One << TitlebarBase::DrawIconifyFieldId);

const OSG::BitVector TitlebarBase::MTInfluenceMask = 
    (Inherited::MTInfluenceMask) | 
    (static_cast<BitVector>(0x0) << Inherited::NextFieldId); 


// Field descriptions

/*! \var ButtonPtr       TitlebarBase::_sfIconifyButton
    
*/
/*! \var ButtonPtr       TitlebarBase::_sfMaximizeButton
    
*/
/*! \var ButtonPtr       TitlebarBase::_sfCloseButton
    
*/
/*! \var LabelPtr        TitlebarBase::_sfTitleLabel
    
*/
/*! \var UIDrawObjectCanvasPtr TitlebarBase::_sfFrameIcon
    
*/
/*! \var bool            TitlebarBase::_sfDrawClose
    
*/
/*! \var bool            TitlebarBase::_sfDrawMaximize
    
*/
/*! \var bool            TitlebarBase::_sfDrawIconify
    
*/

//! Titlebar description

FieldDescription *TitlebarBase::_desc[] = 
{
    new FieldDescription(SFButtonPtr::getClassType(), 
                     "IconifyButton", 
                     IconifyButtonFieldId, IconifyButtonFieldMask,
                     false,
                     (FieldAccessMethod) &TitlebarBase::getSFIconifyButton),
    new FieldDescription(SFButtonPtr::getClassType(), 
                     "MaximizeButton", 
                     MaximizeButtonFieldId, MaximizeButtonFieldMask,
                     false,
                     (FieldAccessMethod) &TitlebarBase::getSFMaximizeButton),
    new FieldDescription(SFButtonPtr::getClassType(), 
                     "CloseButton", 
                     CloseButtonFieldId, CloseButtonFieldMask,
                     false,
                     (FieldAccessMethod) &TitlebarBase::getSFCloseButton),
    new FieldDescription(SFLabelPtr::getClassType(), 
                     "TitleLabel", 
                     TitleLabelFieldId, TitleLabelFieldMask,
                     false,
                     (FieldAccessMethod) &TitlebarBase::getSFTitleLabel),
    new FieldDescription(SFUIDrawObjectCanvasPtr::getClassType(), 
                     "FrameIcon", 
                     FrameIconFieldId, FrameIconFieldMask,
                     false,
                     (FieldAccessMethod) &TitlebarBase::getSFFrameIcon),
    new FieldDescription(SFBool::getClassType(), 
                     "DrawClose", 
                     DrawCloseFieldId, DrawCloseFieldMask,
                     false,
                     (FieldAccessMethod) &TitlebarBase::getSFDrawClose),
    new FieldDescription(SFBool::getClassType(), 
                     "DrawMaximize", 
                     DrawMaximizeFieldId, DrawMaximizeFieldMask,
                     false,
                     (FieldAccessMethod) &TitlebarBase::getSFDrawMaximize),
    new FieldDescription(SFBool::getClassType(), 
                     "DrawIconify", 
                     DrawIconifyFieldId, DrawIconifyFieldMask,
                     false,
                     (FieldAccessMethod) &TitlebarBase::getSFDrawIconify)
};


FieldContainerType TitlebarBase::_type(
    "Titlebar",
    "Panel",
    NULL,
    (PrototypeCreateF) &TitlebarBase::createEmpty,
    Titlebar::initMethod,
    _desc,
    sizeof(_desc));

//OSG_FIELD_CONTAINER_DEF(TitlebarBase, TitlebarPtr)

/*------------------------------ get -----------------------------------*/

FieldContainerType &TitlebarBase::getType(void) 
{
    return _type; 
} 

const FieldContainerType &TitlebarBase::getType(void) const 
{
    return _type;
} 


FieldContainerPtr TitlebarBase::shallowCopy(void) const 
{ 
    TitlebarPtr returnValue; 

    newPtr(returnValue, dynamic_cast<const Titlebar *>(this)); 

    return returnValue; 
}

UInt32 TitlebarBase::getContainerSize(void) const 
{ 
    return sizeof(Titlebar); 
}


#if !defined(OSG_FIXED_MFIELDSYNC)
void TitlebarBase::executeSync(      FieldContainer &other,
                                    const BitVector      &whichField)
{
    this->executeSyncImpl((TitlebarBase *) &other, whichField);
}
#else
void TitlebarBase::executeSync(      FieldContainer &other,
                                    const BitVector      &whichField,                                    const SyncInfo       &sInfo     )
{
    this->executeSyncImpl((TitlebarBase *) &other, whichField, sInfo);
}
void TitlebarBase::execBeginEdit(const BitVector &whichField, 
                                            UInt32     uiAspect,
                                            UInt32     uiContainerSize) 
{
    this->execBeginEditImpl(whichField, uiAspect, uiContainerSize);
}

void TitlebarBase::onDestroyAspect(UInt32 uiId, UInt32 uiAspect)
{
    Inherited::onDestroyAspect(uiId, uiAspect);

}
#endif

/*------------------------- constructors ----------------------------------*/

#ifdef OSG_WIN32_ICL
#pragma warning (disable : 383)
#endif

TitlebarBase::TitlebarBase(void) :
    _sfIconifyButton          (ButtonPtr(NullFC)), 
    _sfMaximizeButton         (ButtonPtr(NullFC)), 
    _sfCloseButton            (ButtonPtr(NullFC)), 
    _sfTitleLabel             (LabelPtr(NullFC)), 
    _sfFrameIcon              (UIDrawObjectCanvasPtr(NullFC)), 
    _sfDrawClose              (bool(true)), 
    _sfDrawMaximize           (bool(true)), 
    _sfDrawIconify            (bool(true)), 
    Inherited() 
{
}

#ifdef OSG_WIN32_ICL
#pragma warning (default : 383)
#endif

TitlebarBase::TitlebarBase(const TitlebarBase &source) :
    _sfIconifyButton          (source._sfIconifyButton          ), 
    _sfMaximizeButton         (source._sfMaximizeButton         ), 
    _sfCloseButton            (source._sfCloseButton            ), 
    _sfTitleLabel             (source._sfTitleLabel             ), 
    _sfFrameIcon              (source._sfFrameIcon              ), 
    _sfDrawClose              (source._sfDrawClose              ), 
    _sfDrawMaximize           (source._sfDrawMaximize           ), 
    _sfDrawIconify            (source._sfDrawIconify            ), 
    Inherited                 (source)
{
}

/*-------------------------- destructors ----------------------------------*/

TitlebarBase::~TitlebarBase(void)
{
}

/*------------------------------ access -----------------------------------*/

UInt32 TitlebarBase::getBinSize(const BitVector &whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (IconifyButtonFieldMask & whichField))
    {
        returnValue += _sfIconifyButton.getBinSize();
    }

    if(FieldBits::NoField != (MaximizeButtonFieldMask & whichField))
    {
        returnValue += _sfMaximizeButton.getBinSize();
    }

    if(FieldBits::NoField != (CloseButtonFieldMask & whichField))
    {
        returnValue += _sfCloseButton.getBinSize();
    }

    if(FieldBits::NoField != (TitleLabelFieldMask & whichField))
    {
        returnValue += _sfTitleLabel.getBinSize();
    }

    if(FieldBits::NoField != (FrameIconFieldMask & whichField))
    {
        returnValue += _sfFrameIcon.getBinSize();
    }

    if(FieldBits::NoField != (DrawCloseFieldMask & whichField))
    {
        returnValue += _sfDrawClose.getBinSize();
    }

    if(FieldBits::NoField != (DrawMaximizeFieldMask & whichField))
    {
        returnValue += _sfDrawMaximize.getBinSize();
    }

    if(FieldBits::NoField != (DrawIconifyFieldMask & whichField))
    {
        returnValue += _sfDrawIconify.getBinSize();
    }


    return returnValue;
}

void TitlebarBase::copyToBin(      BinaryDataHandler &pMem,
                                  const BitVector         &whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (IconifyButtonFieldMask & whichField))
    {
        _sfIconifyButton.copyToBin(pMem);
    }

    if(FieldBits::NoField != (MaximizeButtonFieldMask & whichField))
    {
        _sfMaximizeButton.copyToBin(pMem);
    }

    if(FieldBits::NoField != (CloseButtonFieldMask & whichField))
    {
        _sfCloseButton.copyToBin(pMem);
    }

    if(FieldBits::NoField != (TitleLabelFieldMask & whichField))
    {
        _sfTitleLabel.copyToBin(pMem);
    }

    if(FieldBits::NoField != (FrameIconFieldMask & whichField))
    {
        _sfFrameIcon.copyToBin(pMem);
    }

    if(FieldBits::NoField != (DrawCloseFieldMask & whichField))
    {
        _sfDrawClose.copyToBin(pMem);
    }

    if(FieldBits::NoField != (DrawMaximizeFieldMask & whichField))
    {
        _sfDrawMaximize.copyToBin(pMem);
    }

    if(FieldBits::NoField != (DrawIconifyFieldMask & whichField))
    {
        _sfDrawIconify.copyToBin(pMem);
    }


}

void TitlebarBase::copyFromBin(      BinaryDataHandler &pMem,
                                    const BitVector    &whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (IconifyButtonFieldMask & whichField))
    {
        _sfIconifyButton.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (MaximizeButtonFieldMask & whichField))
    {
        _sfMaximizeButton.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (CloseButtonFieldMask & whichField))
    {
        _sfCloseButton.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (TitleLabelFieldMask & whichField))
    {
        _sfTitleLabel.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (FrameIconFieldMask & whichField))
    {
        _sfFrameIcon.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (DrawCloseFieldMask & whichField))
    {
        _sfDrawClose.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (DrawMaximizeFieldMask & whichField))
    {
        _sfDrawMaximize.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (DrawIconifyFieldMask & whichField))
    {
        _sfDrawIconify.copyFromBin(pMem);
    }


}

#if !defined(OSG_FIXED_MFIELDSYNC)
void TitlebarBase::executeSyncImpl(      TitlebarBase *pOther,
                                        const BitVector         &whichField)
{

    Inherited::executeSyncImpl(pOther, whichField);

    if(FieldBits::NoField != (IconifyButtonFieldMask & whichField))
        _sfIconifyButton.syncWith(pOther->_sfIconifyButton);

    if(FieldBits::NoField != (MaximizeButtonFieldMask & whichField))
        _sfMaximizeButton.syncWith(pOther->_sfMaximizeButton);

    if(FieldBits::NoField != (CloseButtonFieldMask & whichField))
        _sfCloseButton.syncWith(pOther->_sfCloseButton);

    if(FieldBits::NoField != (TitleLabelFieldMask & whichField))
        _sfTitleLabel.syncWith(pOther->_sfTitleLabel);

    if(FieldBits::NoField != (FrameIconFieldMask & whichField))
        _sfFrameIcon.syncWith(pOther->_sfFrameIcon);

    if(FieldBits::NoField != (DrawCloseFieldMask & whichField))
        _sfDrawClose.syncWith(pOther->_sfDrawClose);

    if(FieldBits::NoField != (DrawMaximizeFieldMask & whichField))
        _sfDrawMaximize.syncWith(pOther->_sfDrawMaximize);

    if(FieldBits::NoField != (DrawIconifyFieldMask & whichField))
        _sfDrawIconify.syncWith(pOther->_sfDrawIconify);


}
#else
void TitlebarBase::executeSyncImpl(      TitlebarBase *pOther,
                                        const BitVector         &whichField,
                                        const SyncInfo          &sInfo      )
{

    Inherited::executeSyncImpl(pOther, whichField, sInfo);

    if(FieldBits::NoField != (IconifyButtonFieldMask & whichField))
        _sfIconifyButton.syncWith(pOther->_sfIconifyButton);

    if(FieldBits::NoField != (MaximizeButtonFieldMask & whichField))
        _sfMaximizeButton.syncWith(pOther->_sfMaximizeButton);

    if(FieldBits::NoField != (CloseButtonFieldMask & whichField))
        _sfCloseButton.syncWith(pOther->_sfCloseButton);

    if(FieldBits::NoField != (TitleLabelFieldMask & whichField))
        _sfTitleLabel.syncWith(pOther->_sfTitleLabel);

    if(FieldBits::NoField != (FrameIconFieldMask & whichField))
        _sfFrameIcon.syncWith(pOther->_sfFrameIcon);

    if(FieldBits::NoField != (DrawCloseFieldMask & whichField))
        _sfDrawClose.syncWith(pOther->_sfDrawClose);

    if(FieldBits::NoField != (DrawMaximizeFieldMask & whichField))
        _sfDrawMaximize.syncWith(pOther->_sfDrawMaximize);

    if(FieldBits::NoField != (DrawIconifyFieldMask & whichField))
        _sfDrawIconify.syncWith(pOther->_sfDrawIconify);



}

void TitlebarBase::execBeginEditImpl (const BitVector &whichField, 
                                                 UInt32     uiAspect,
                                                 UInt32     uiContainerSize)
{
    Inherited::execBeginEditImpl(whichField, uiAspect, uiContainerSize);

}
#endif



OSG_END_NAMESPACE

#include <OpenSG/OSGSFieldTypeDef.inl>
#include <OpenSG/OSGMFieldTypeDef.inl>

OSG_BEGIN_NAMESPACE

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldDataTraits<TitlebarPtr>::_type("TitlebarPtr", "PanelPtr");
#endif

OSG_DLLEXPORT_SFIELD_DEF1(TitlebarPtr, OSG_USERINTERFACELIB_DLLTMPLMAPPING);
OSG_DLLEXPORT_MFIELD_DEF1(TitlebarPtr, OSG_USERINTERFACELIB_DLLTMPLMAPPING);


/*------------------------------------------------------------------------*/
/*                              cvs id's                                  */

#ifdef OSG_SGI_CC
#pragma set woff 1174
#endif

#ifdef OSG_LINUX_ICC
#pragma warning( disable : 177 )
#endif

namespace
{
    static Char8 cvsid_cpp       [] = "@(#)$Id: FCBaseTemplate_cpp.h,v 1.47 2006/03/17 17:03:19 pdaehne Exp $";
    static Char8 cvsid_hpp       [] = OSGTITLEBARBASE_HEADER_CVSID;
    static Char8 cvsid_inl       [] = OSGTITLEBARBASE_INLINE_CVSID;

    static Char8 cvsid_fields_hpp[] = OSGTITLEBARFIELDS_HEADER_CVSID;
}

OSG_END_NAMESPACE

