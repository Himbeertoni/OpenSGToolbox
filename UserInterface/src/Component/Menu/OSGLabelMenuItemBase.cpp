/*---------------------------------------------------------------------------*\
 *                     OpenSG ToolBox UserInterface                          *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                         www.vrac.iastate.edu                              *
 *                                                                           *
 *   Authors: David Kabala, Alden Peterson, Lee Zaniewski, Jonathan Flory    *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class LabelMenuItem!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#define OSG_COMPILELABELMENUITEMINST

#include <stdlib.h>
#include <stdio.h>

#include <OpenSG/OSGConfig.h>

#include "OSGLabelMenuItemBase.h"
#include "OSGLabelMenuItem.h"


OSG_BEGIN_NAMESPACE

const OSG::BitVector  LabelMenuItemBase::FontFieldMask = 
    (TypeTraits<BitVector>::One << LabelMenuItemBase::FontFieldId);

const OSG::BitVector  LabelMenuItemBase::TextFieldMask = 
    (TypeTraits<BitVector>::One << LabelMenuItemBase::TextFieldId);

const OSG::BitVector  LabelMenuItemBase::AcceleratorModifiersFieldMask = 
    (TypeTraits<BitVector>::One << LabelMenuItemBase::AcceleratorModifiersFieldId);

const OSG::BitVector  LabelMenuItemBase::AcceleratorKeyFieldMask = 
    (TypeTraits<BitVector>::One << LabelMenuItemBase::AcceleratorKeyFieldId);

const OSG::BitVector  LabelMenuItemBase::SelectedBorderFieldMask = 
    (TypeTraits<BitVector>::One << LabelMenuItemBase::SelectedBorderFieldId);

const OSG::BitVector  LabelMenuItemBase::SelectedBackgroundFieldMask = 
    (TypeTraits<BitVector>::One << LabelMenuItemBase::SelectedBackgroundFieldId);

const OSG::BitVector  LabelMenuItemBase::SelectedTextColorFieldMask = 
    (TypeTraits<BitVector>::One << LabelMenuItemBase::SelectedTextColorFieldId);

const OSG::BitVector  LabelMenuItemBase::FocusedTextColorFieldMask = 
    (TypeTraits<BitVector>::One << LabelMenuItemBase::FocusedTextColorFieldId);

const OSG::BitVector  LabelMenuItemBase::RolloverTextColorFieldMask = 
    (TypeTraits<BitVector>::One << LabelMenuItemBase::RolloverTextColorFieldId);

const OSG::BitVector  LabelMenuItemBase::DisabledTextColorFieldMask = 
    (TypeTraits<BitVector>::One << LabelMenuItemBase::DisabledTextColorFieldId);

const OSG::BitVector  LabelMenuItemBase::TextColorFieldMask = 
    (TypeTraits<BitVector>::One << LabelMenuItemBase::TextColorFieldId);

const OSG::BitVector  LabelMenuItemBase::AcceleratorTextFieldMask = 
    (TypeTraits<BitVector>::One << LabelMenuItemBase::AcceleratorTextFieldId);

const OSG::BitVector LabelMenuItemBase::MTInfluenceMask = 
    (Inherited::MTInfluenceMask) | 
    (static_cast<BitVector>(0x0) << Inherited::NextFieldId); 


// Field descriptions

/*! \var UIFontPtr       LabelMenuItemBase::_sfFont
    
*/
/*! \var std::string     LabelMenuItemBase::_sfText
    
*/
/*! \var UInt32          LabelMenuItemBase::_sfAcceleratorModifiers
    
*/
/*! \var UInt32          LabelMenuItemBase::_sfAcceleratorKey
    
*/
/*! \var BorderPtr       LabelMenuItemBase::_sfSelectedBorder
    
*/
/*! \var UIBackgroundPtr LabelMenuItemBase::_sfSelectedBackground
    
*/
/*! \var Color4f         LabelMenuItemBase::_sfSelectedTextColor
    
*/
/*! \var Color4f         LabelMenuItemBase::_sfFocusedTextColor
    
*/
/*! \var Color4f         LabelMenuItemBase::_sfRolloverTextColor
    
*/
/*! \var Color4f         LabelMenuItemBase::_sfDisabledTextColor
    
*/
/*! \var Color4f         LabelMenuItemBase::_sfTextColor
    
*/
/*! \var std::string     LabelMenuItemBase::_sfAcceleratorText
    
*/

//! LabelMenuItem description

FieldDescription *LabelMenuItemBase::_desc[] = 
{
    new FieldDescription(SFUIFontPtr::getClassType(), 
                     "Font", 
                     FontFieldId, FontFieldMask,
                     false,
                     (FieldAccessMethod) &LabelMenuItemBase::getSFFont),
    new FieldDescription(SFString::getClassType(), 
                     "Text", 
                     TextFieldId, TextFieldMask,
                     false,
                     (FieldAccessMethod) &LabelMenuItemBase::getSFText),
    new FieldDescription(SFUInt32::getClassType(), 
                     "AcceleratorModifiers", 
                     AcceleratorModifiersFieldId, AcceleratorModifiersFieldMask,
                     false,
                     (FieldAccessMethod) &LabelMenuItemBase::getSFAcceleratorModifiers),
    new FieldDescription(SFUInt32::getClassType(), 
                     "AcceleratorKey", 
                     AcceleratorKeyFieldId, AcceleratorKeyFieldMask,
                     false,
                     (FieldAccessMethod) &LabelMenuItemBase::getSFAcceleratorKey),
    new FieldDescription(SFBorderPtr::getClassType(), 
                     "SelectedBorder", 
                     SelectedBorderFieldId, SelectedBorderFieldMask,
                     false,
                     (FieldAccessMethod) &LabelMenuItemBase::getSFSelectedBorder),
    new FieldDescription(SFUIBackgroundPtr::getClassType(), 
                     "SelectedBackground", 
                     SelectedBackgroundFieldId, SelectedBackgroundFieldMask,
                     false,
                     (FieldAccessMethod) &LabelMenuItemBase::getSFSelectedBackground),
    new FieldDescription(SFColor4f::getClassType(), 
                     "SelectedTextColor", 
                     SelectedTextColorFieldId, SelectedTextColorFieldMask,
                     false,
                     (FieldAccessMethod) &LabelMenuItemBase::getSFSelectedTextColor),
    new FieldDescription(SFColor4f::getClassType(), 
                     "FocusedTextColor", 
                     FocusedTextColorFieldId, FocusedTextColorFieldMask,
                     false,
                     (FieldAccessMethod) &LabelMenuItemBase::getSFFocusedTextColor),
    new FieldDescription(SFColor4f::getClassType(), 
                     "RolloverTextColor", 
                     RolloverTextColorFieldId, RolloverTextColorFieldMask,
                     false,
                     (FieldAccessMethod) &LabelMenuItemBase::getSFRolloverTextColor),
    new FieldDescription(SFColor4f::getClassType(), 
                     "DisabledTextColor", 
                     DisabledTextColorFieldId, DisabledTextColorFieldMask,
                     false,
                     (FieldAccessMethod) &LabelMenuItemBase::getSFDisabledTextColor),
    new FieldDescription(SFColor4f::getClassType(), 
                     "TextColor", 
                     TextColorFieldId, TextColorFieldMask,
                     false,
                     (FieldAccessMethod) &LabelMenuItemBase::getSFTextColor),
    new FieldDescription(SFString::getClassType(), 
                     "AcceleratorText", 
                     AcceleratorTextFieldId, AcceleratorTextFieldMask,
                     false,
                     (FieldAccessMethod) &LabelMenuItemBase::getSFAcceleratorText)
};


FieldContainerType LabelMenuItemBase::_type(
    "LabelMenuItem",
    "MenuItem",
    NULL,
    (PrototypeCreateF) &LabelMenuItemBase::createEmpty,
    LabelMenuItem::initMethod,
    _desc,
    sizeof(_desc));

//OSG_FIELD_CONTAINER_DEF(LabelMenuItemBase, LabelMenuItemPtr)

/*------------------------------ get -----------------------------------*/

FieldContainerType &LabelMenuItemBase::getType(void) 
{
    return _type; 
} 

const FieldContainerType &LabelMenuItemBase::getType(void) const 
{
    return _type;
} 


FieldContainerPtr LabelMenuItemBase::shallowCopy(void) const 
{ 
    LabelMenuItemPtr returnValue; 

    newPtr(returnValue, dynamic_cast<const LabelMenuItem *>(this)); 

    return returnValue; 
}

UInt32 LabelMenuItemBase::getContainerSize(void) const 
{ 
    return sizeof(LabelMenuItem); 
}


#if !defined(OSG_FIXED_MFIELDSYNC)
void LabelMenuItemBase::executeSync(      FieldContainer &other,
                                    const BitVector      &whichField)
{
    this->executeSyncImpl((LabelMenuItemBase *) &other, whichField);
}
#else
void LabelMenuItemBase::executeSync(      FieldContainer &other,
                                    const BitVector      &whichField,                                    const SyncInfo       &sInfo     )
{
    this->executeSyncImpl((LabelMenuItemBase *) &other, whichField, sInfo);
}
void LabelMenuItemBase::execBeginEdit(const BitVector &whichField, 
                                            UInt32     uiAspect,
                                            UInt32     uiContainerSize) 
{
    this->execBeginEditImpl(whichField, uiAspect, uiContainerSize);
}

void LabelMenuItemBase::onDestroyAspect(UInt32 uiId, UInt32 uiAspect)
{
    Inherited::onDestroyAspect(uiId, uiAspect);

}
#endif

/*------------------------- constructors ----------------------------------*/

#ifdef OSG_WIN32_ICL
#pragma warning (disable : 383)
#endif

LabelMenuItemBase::LabelMenuItemBase(void) :
    _sfFont                   (), 
    _sfText                   (), 
    _sfAcceleratorModifiers   (UInt32(0)), 
    _sfAcceleratorKey         (UInt32(0)), 
    _sfSelectedBorder         (BorderPtr(NullFC)), 
    _sfSelectedBackground     (UIBackgroundPtr(NullFC)), 
    _sfSelectedTextColor      (), 
    _sfFocusedTextColor       (), 
    _sfRolloverTextColor      (), 
    _sfDisabledTextColor      (), 
    _sfTextColor              (), 
    _sfAcceleratorText        (), 
    Inherited() 
{
}

#ifdef OSG_WIN32_ICL
#pragma warning (default : 383)
#endif

LabelMenuItemBase::LabelMenuItemBase(const LabelMenuItemBase &source) :
    _sfFont                   (source._sfFont                   ), 
    _sfText                   (source._sfText                   ), 
    _sfAcceleratorModifiers   (source._sfAcceleratorModifiers   ), 
    _sfAcceleratorKey         (source._sfAcceleratorKey         ), 
    _sfSelectedBorder         (source._sfSelectedBorder         ), 
    _sfSelectedBackground     (source._sfSelectedBackground     ), 
    _sfSelectedTextColor      (source._sfSelectedTextColor      ), 
    _sfFocusedTextColor       (source._sfFocusedTextColor       ), 
    _sfRolloverTextColor      (source._sfRolloverTextColor      ), 
    _sfDisabledTextColor      (source._sfDisabledTextColor      ), 
    _sfTextColor              (source._sfTextColor              ), 
    _sfAcceleratorText        (source._sfAcceleratorText        ), 
    Inherited                 (source)
{
}

/*-------------------------- destructors ----------------------------------*/

LabelMenuItemBase::~LabelMenuItemBase(void)
{
}

/*------------------------------ access -----------------------------------*/

UInt32 LabelMenuItemBase::getBinSize(const BitVector &whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (FontFieldMask & whichField))
    {
        returnValue += _sfFont.getBinSize();
    }

    if(FieldBits::NoField != (TextFieldMask & whichField))
    {
        returnValue += _sfText.getBinSize();
    }

    if(FieldBits::NoField != (AcceleratorModifiersFieldMask & whichField))
    {
        returnValue += _sfAcceleratorModifiers.getBinSize();
    }

    if(FieldBits::NoField != (AcceleratorKeyFieldMask & whichField))
    {
        returnValue += _sfAcceleratorKey.getBinSize();
    }

    if(FieldBits::NoField != (SelectedBorderFieldMask & whichField))
    {
        returnValue += _sfSelectedBorder.getBinSize();
    }

    if(FieldBits::NoField != (SelectedBackgroundFieldMask & whichField))
    {
        returnValue += _sfSelectedBackground.getBinSize();
    }

    if(FieldBits::NoField != (SelectedTextColorFieldMask & whichField))
    {
        returnValue += _sfSelectedTextColor.getBinSize();
    }

    if(FieldBits::NoField != (FocusedTextColorFieldMask & whichField))
    {
        returnValue += _sfFocusedTextColor.getBinSize();
    }

    if(FieldBits::NoField != (RolloverTextColorFieldMask & whichField))
    {
        returnValue += _sfRolloverTextColor.getBinSize();
    }

    if(FieldBits::NoField != (DisabledTextColorFieldMask & whichField))
    {
        returnValue += _sfDisabledTextColor.getBinSize();
    }

    if(FieldBits::NoField != (TextColorFieldMask & whichField))
    {
        returnValue += _sfTextColor.getBinSize();
    }

    if(FieldBits::NoField != (AcceleratorTextFieldMask & whichField))
    {
        returnValue += _sfAcceleratorText.getBinSize();
    }


    return returnValue;
}

void LabelMenuItemBase::copyToBin(      BinaryDataHandler &pMem,
                                  const BitVector         &whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (FontFieldMask & whichField))
    {
        _sfFont.copyToBin(pMem);
    }

    if(FieldBits::NoField != (TextFieldMask & whichField))
    {
        _sfText.copyToBin(pMem);
    }

    if(FieldBits::NoField != (AcceleratorModifiersFieldMask & whichField))
    {
        _sfAcceleratorModifiers.copyToBin(pMem);
    }

    if(FieldBits::NoField != (AcceleratorKeyFieldMask & whichField))
    {
        _sfAcceleratorKey.copyToBin(pMem);
    }

    if(FieldBits::NoField != (SelectedBorderFieldMask & whichField))
    {
        _sfSelectedBorder.copyToBin(pMem);
    }

    if(FieldBits::NoField != (SelectedBackgroundFieldMask & whichField))
    {
        _sfSelectedBackground.copyToBin(pMem);
    }

    if(FieldBits::NoField != (SelectedTextColorFieldMask & whichField))
    {
        _sfSelectedTextColor.copyToBin(pMem);
    }

    if(FieldBits::NoField != (FocusedTextColorFieldMask & whichField))
    {
        _sfFocusedTextColor.copyToBin(pMem);
    }

    if(FieldBits::NoField != (RolloverTextColorFieldMask & whichField))
    {
        _sfRolloverTextColor.copyToBin(pMem);
    }

    if(FieldBits::NoField != (DisabledTextColorFieldMask & whichField))
    {
        _sfDisabledTextColor.copyToBin(pMem);
    }

    if(FieldBits::NoField != (TextColorFieldMask & whichField))
    {
        _sfTextColor.copyToBin(pMem);
    }

    if(FieldBits::NoField != (AcceleratorTextFieldMask & whichField))
    {
        _sfAcceleratorText.copyToBin(pMem);
    }


}

void LabelMenuItemBase::copyFromBin(      BinaryDataHandler &pMem,
                                    const BitVector    &whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (FontFieldMask & whichField))
    {
        _sfFont.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (TextFieldMask & whichField))
    {
        _sfText.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (AcceleratorModifiersFieldMask & whichField))
    {
        _sfAcceleratorModifiers.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (AcceleratorKeyFieldMask & whichField))
    {
        _sfAcceleratorKey.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (SelectedBorderFieldMask & whichField))
    {
        _sfSelectedBorder.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (SelectedBackgroundFieldMask & whichField))
    {
        _sfSelectedBackground.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (SelectedTextColorFieldMask & whichField))
    {
        _sfSelectedTextColor.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (FocusedTextColorFieldMask & whichField))
    {
        _sfFocusedTextColor.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (RolloverTextColorFieldMask & whichField))
    {
        _sfRolloverTextColor.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (DisabledTextColorFieldMask & whichField))
    {
        _sfDisabledTextColor.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (TextColorFieldMask & whichField))
    {
        _sfTextColor.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (AcceleratorTextFieldMask & whichField))
    {
        _sfAcceleratorText.copyFromBin(pMem);
    }


}

#if !defined(OSG_FIXED_MFIELDSYNC)
void LabelMenuItemBase::executeSyncImpl(      LabelMenuItemBase *pOther,
                                        const BitVector         &whichField)
{

    Inherited::executeSyncImpl(pOther, whichField);

    if(FieldBits::NoField != (FontFieldMask & whichField))
        _sfFont.syncWith(pOther->_sfFont);

    if(FieldBits::NoField != (TextFieldMask & whichField))
        _sfText.syncWith(pOther->_sfText);

    if(FieldBits::NoField != (AcceleratorModifiersFieldMask & whichField))
        _sfAcceleratorModifiers.syncWith(pOther->_sfAcceleratorModifiers);

    if(FieldBits::NoField != (AcceleratorKeyFieldMask & whichField))
        _sfAcceleratorKey.syncWith(pOther->_sfAcceleratorKey);

    if(FieldBits::NoField != (SelectedBorderFieldMask & whichField))
        _sfSelectedBorder.syncWith(pOther->_sfSelectedBorder);

    if(FieldBits::NoField != (SelectedBackgroundFieldMask & whichField))
        _sfSelectedBackground.syncWith(pOther->_sfSelectedBackground);

    if(FieldBits::NoField != (SelectedTextColorFieldMask & whichField))
        _sfSelectedTextColor.syncWith(pOther->_sfSelectedTextColor);

    if(FieldBits::NoField != (FocusedTextColorFieldMask & whichField))
        _sfFocusedTextColor.syncWith(pOther->_sfFocusedTextColor);

    if(FieldBits::NoField != (RolloverTextColorFieldMask & whichField))
        _sfRolloverTextColor.syncWith(pOther->_sfRolloverTextColor);

    if(FieldBits::NoField != (DisabledTextColorFieldMask & whichField))
        _sfDisabledTextColor.syncWith(pOther->_sfDisabledTextColor);

    if(FieldBits::NoField != (TextColorFieldMask & whichField))
        _sfTextColor.syncWith(pOther->_sfTextColor);

    if(FieldBits::NoField != (AcceleratorTextFieldMask & whichField))
        _sfAcceleratorText.syncWith(pOther->_sfAcceleratorText);


}
#else
void LabelMenuItemBase::executeSyncImpl(      LabelMenuItemBase *pOther,
                                        const BitVector         &whichField,
                                        const SyncInfo          &sInfo      )
{

    Inherited::executeSyncImpl(pOther, whichField, sInfo);

    if(FieldBits::NoField != (FontFieldMask & whichField))
        _sfFont.syncWith(pOther->_sfFont);

    if(FieldBits::NoField != (TextFieldMask & whichField))
        _sfText.syncWith(pOther->_sfText);

    if(FieldBits::NoField != (AcceleratorModifiersFieldMask & whichField))
        _sfAcceleratorModifiers.syncWith(pOther->_sfAcceleratorModifiers);

    if(FieldBits::NoField != (AcceleratorKeyFieldMask & whichField))
        _sfAcceleratorKey.syncWith(pOther->_sfAcceleratorKey);

    if(FieldBits::NoField != (SelectedBorderFieldMask & whichField))
        _sfSelectedBorder.syncWith(pOther->_sfSelectedBorder);

    if(FieldBits::NoField != (SelectedBackgroundFieldMask & whichField))
        _sfSelectedBackground.syncWith(pOther->_sfSelectedBackground);

    if(FieldBits::NoField != (SelectedTextColorFieldMask & whichField))
        _sfSelectedTextColor.syncWith(pOther->_sfSelectedTextColor);

    if(FieldBits::NoField != (FocusedTextColorFieldMask & whichField))
        _sfFocusedTextColor.syncWith(pOther->_sfFocusedTextColor);

    if(FieldBits::NoField != (RolloverTextColorFieldMask & whichField))
        _sfRolloverTextColor.syncWith(pOther->_sfRolloverTextColor);

    if(FieldBits::NoField != (DisabledTextColorFieldMask & whichField))
        _sfDisabledTextColor.syncWith(pOther->_sfDisabledTextColor);

    if(FieldBits::NoField != (TextColorFieldMask & whichField))
        _sfTextColor.syncWith(pOther->_sfTextColor);

    if(FieldBits::NoField != (AcceleratorTextFieldMask & whichField))
        _sfAcceleratorText.syncWith(pOther->_sfAcceleratorText);



}

void LabelMenuItemBase::execBeginEditImpl (const BitVector &whichField, 
                                                 UInt32     uiAspect,
                                                 UInt32     uiContainerSize)
{
    Inherited::execBeginEditImpl(whichField, uiAspect, uiContainerSize);

}
#endif



OSG_END_NAMESPACE

#include <OpenSG/OSGSFieldTypeDef.inl>
#include <OpenSG/OSGMFieldTypeDef.inl>

OSG_BEGIN_NAMESPACE

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldDataTraits<LabelMenuItemPtr>::_type("LabelMenuItemPtr", "MenuItemPtr");
#endif

OSG_DLLEXPORT_SFIELD_DEF1(LabelMenuItemPtr, OSG_USERINTERFACELIB_DLLTMPLMAPPING);
OSG_DLLEXPORT_MFIELD_DEF1(LabelMenuItemPtr, OSG_USERINTERFACELIB_DLLTMPLMAPPING);


/*------------------------------------------------------------------------*/
/*                              cvs id's                                  */

#ifdef OSG_SGI_CC
#pragma set woff 1174
#endif

#ifdef OSG_LINUX_ICC
#pragma warning( disable : 177 )
#endif

namespace
{
    static Char8 cvsid_cpp       [] = "@(#)$Id: FCBaseTemplate_cpp.h,v 1.47 2006/03/17 17:03:19 pdaehne Exp $";
    static Char8 cvsid_hpp       [] = OSGLABELMENUITEMBASE_HEADER_CVSID;
    static Char8 cvsid_inl       [] = OSGLABELMENUITEMBASE_INLINE_CVSID;

    static Char8 cvsid_fields_hpp[] = OSGLABELMENUITEMFIELDS_HEADER_CVSID;
}

OSG_END_NAMESPACE

