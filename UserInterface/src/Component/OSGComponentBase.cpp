/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2002 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact: dirk@opensg.org, gerrit.voss@vossg.org, jbehr@zgdv.de          *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class Component!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#define OSG_COMPILECOMPONENTINST

#include <stdlib.h>
#include <stdio.h>

#include <OpenSG/OSGConfig.h>

#include "OSGComponentBase.h"
#include "OSGComponent.h"


OSG_BEGIN_NAMESPACE

const OSG::BitVector  ComponentBase::MinSizeFieldMask = 
    (TypeTraits<BitVector>::One << ComponentBase::MinSizeFieldId);

const OSG::BitVector  ComponentBase::MaxSizeFieldMask = 
    (TypeTraits<BitVector>::One << ComponentBase::MaxSizeFieldId);

const OSG::BitVector  ComponentBase::PreferredSizeFieldMask = 
    (TypeTraits<BitVector>::One << ComponentBase::PreferredSizeFieldId);

const OSG::BitVector  ComponentBase::SizeFieldMask = 
    (TypeTraits<BitVector>::One << ComponentBase::SizeFieldId);

const OSG::BitVector  ComponentBase::VisibleFieldMask = 
    (TypeTraits<BitVector>::One << ComponentBase::VisibleFieldId);

const OSG::BitVector  ComponentBase::EnabledFieldMask = 
    (TypeTraits<BitVector>::One << ComponentBase::EnabledFieldId);

const OSG::BitVector  ComponentBase::ConstraintsFieldMask = 
    (TypeTraits<BitVector>::One << ComponentBase::ConstraintsFieldId);

const OSG::BitVector ComponentBase::MTInfluenceMask = 
    (Inherited::MTInfluenceMask) | 
    (static_cast<BitVector>(0x0) << Inherited::NextFieldId); 


// Field descriptions

/*! \var Vec2s           ComponentBase::_sfMinSize
    
*/
/*! \var Vec2s           ComponentBase::_sfMaxSize
    
*/
/*! \var Vec2s           ComponentBase::_sfPreferredSize
    
*/
/*! \var Vec2s           ComponentBase::_sfSize
    
*/
/*! \var bool            ComponentBase::_sfVisible
    
*/
/*! \var bool            ComponentBase::_sfEnabled
    
*/
/*! \var LayoutConstraintPtr ComponentBase::_sfConstraints
    
*/

//! Component description

FieldDescription *ComponentBase::_desc[] = 
{
    new FieldDescription(SFVec2s::getClassType(), 
                     "MinSize", 
                     MinSizeFieldId, MinSizeFieldMask,
                     false,
                     (FieldAccessMethod) &ComponentBase::getSFMinSize),
    new FieldDescription(SFVec2s::getClassType(), 
                     "MaxSize", 
                     MaxSizeFieldId, MaxSizeFieldMask,
                     false,
                     (FieldAccessMethod) &ComponentBase::getSFMaxSize),
    new FieldDescription(SFVec2s::getClassType(), 
                     "PreferredSize", 
                     PreferredSizeFieldId, PreferredSizeFieldMask,
                     false,
                     (FieldAccessMethod) &ComponentBase::getSFPreferredSize),
    new FieldDescription(SFVec2s::getClassType(), 
                     "Size", 
                     SizeFieldId, SizeFieldMask,
                     false,
                     (FieldAccessMethod) &ComponentBase::getSFSize),
    new FieldDescription(SFBool::getClassType(), 
                     "Visible", 
                     VisibleFieldId, VisibleFieldMask,
                     false,
                     (FieldAccessMethod) &ComponentBase::getSFVisible),
    new FieldDescription(SFBool::getClassType(), 
                     "Enabled", 
                     EnabledFieldId, EnabledFieldMask,
                     false,
                     (FieldAccessMethod) &ComponentBase::getSFEnabled),
    new FieldDescription(SFLayoutConstraintsPtr::getClassType(), 
                     "Constraints", 
                     ConstraintsFieldId, ConstraintsFieldMask,
                     false,
                     (FieldAccessMethod) &ComponentBase::getSFConstraints)
};


FieldContainerType ComponentBase::_type(
    "Component",
    "AttachmentContainer",
    NULL,
    NULL, 
    Component::initMethod,
    _desc,
    sizeof(_desc));

//OSG_FIELD_CONTAINER_DEF(ComponentBase, ComponentPtr)

/*------------------------------ get -----------------------------------*/

FieldContainerType &ComponentBase::getType(void) 
{
    return _type; 
} 

const FieldContainerType &ComponentBase::getType(void) const 
{
    return _type;
} 


UInt32 ComponentBase::getContainerSize(void) const 
{ 
    return sizeof(Component); 
}


#if !defined(OSG_FIXED_MFIELDSYNC)
void ComponentBase::executeSync(      FieldContainer &other,
                                    const BitVector      &whichField)
{
    this->executeSyncImpl((ComponentBase *) &other, whichField);
}
#else
void ComponentBase::executeSync(      FieldContainer &other,
                                    const BitVector      &whichField,                                    const SyncInfo       &sInfo     )
{
    this->executeSyncImpl((ComponentBase *) &other, whichField, sInfo);
}
void ComponentBase::execBeginEdit(const BitVector &whichField, 
                                            UInt32     uiAspect,
                                            UInt32     uiContainerSize) 
{
    this->execBeginEditImpl(whichField, uiAspect, uiContainerSize);
}

void ComponentBase::onDestroyAspect(UInt32 uiId, UInt32 uiAspect)
{
    Inherited::onDestroyAspect(uiId, uiAspect);

}
#endif

/*------------------------- constructors ----------------------------------*/

#ifdef OSG_WIN32_ICL
#pragma warning (disable : 383)
#endif

ComponentBase::ComponentBase(void) :
    _sfMinSize                (), 
    _sfMaxSize                (), 
    _sfPreferredSize          (), 
    _sfSize                   (), 
    _sfVisible                (), 
    _sfEnabled                (), 
    _sfConstraints            (), 
    Inherited() 
{
}

#ifdef OSG_WIN32_ICL
#pragma warning (default : 383)
#endif

ComponentBase::ComponentBase(const ComponentBase &source) :
    _sfMinSize                (source._sfMinSize                ), 
    _sfMaxSize                (source._sfMaxSize                ), 
    _sfPreferredSize          (source._sfPreferredSize          ), 
    _sfSize                   (source._sfSize                   ), 
    _sfVisible                (source._sfVisible                ), 
    _sfEnabled                (source._sfEnabled                ), 
    _sfConstraints            (source._sfConstraints            ), 
    Inherited                 (source)
{
}

/*-------------------------- destructors ----------------------------------*/

ComponentBase::~ComponentBase(void)
{
}

/*------------------------------ access -----------------------------------*/

UInt32 ComponentBase::getBinSize(const BitVector &whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (MinSizeFieldMask & whichField))
    {
        returnValue += _sfMinSize.getBinSize();
    }

    if(FieldBits::NoField != (MaxSizeFieldMask & whichField))
    {
        returnValue += _sfMaxSize.getBinSize();
    }

    if(FieldBits::NoField != (PreferredSizeFieldMask & whichField))
    {
        returnValue += _sfPreferredSize.getBinSize();
    }

    if(FieldBits::NoField != (SizeFieldMask & whichField))
    {
        returnValue += _sfSize.getBinSize();
    }

    if(FieldBits::NoField != (VisibleFieldMask & whichField))
    {
        returnValue += _sfVisible.getBinSize();
    }

    if(FieldBits::NoField != (EnabledFieldMask & whichField))
    {
        returnValue += _sfEnabled.getBinSize();
    }

    if(FieldBits::NoField != (ConstraintsFieldMask & whichField))
    {
        returnValue += _sfConstraints.getBinSize();
    }


    return returnValue;
}

void ComponentBase::copyToBin(      BinaryDataHandler &pMem,
                                  const BitVector         &whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (MinSizeFieldMask & whichField))
    {
        _sfMinSize.copyToBin(pMem);
    }

    if(FieldBits::NoField != (MaxSizeFieldMask & whichField))
    {
        _sfMaxSize.copyToBin(pMem);
    }

    if(FieldBits::NoField != (PreferredSizeFieldMask & whichField))
    {
        _sfPreferredSize.copyToBin(pMem);
    }

    if(FieldBits::NoField != (SizeFieldMask & whichField))
    {
        _sfSize.copyToBin(pMem);
    }

    if(FieldBits::NoField != (VisibleFieldMask & whichField))
    {
        _sfVisible.copyToBin(pMem);
    }

    if(FieldBits::NoField != (EnabledFieldMask & whichField))
    {
        _sfEnabled.copyToBin(pMem);
    }

    if(FieldBits::NoField != (ConstraintsFieldMask & whichField))
    {
        _sfConstraints.copyToBin(pMem);
    }


}

void ComponentBase::copyFromBin(      BinaryDataHandler &pMem,
                                    const BitVector    &whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (MinSizeFieldMask & whichField))
    {
        _sfMinSize.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (MaxSizeFieldMask & whichField))
    {
        _sfMaxSize.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (PreferredSizeFieldMask & whichField))
    {
        _sfPreferredSize.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (SizeFieldMask & whichField))
    {
        _sfSize.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (VisibleFieldMask & whichField))
    {
        _sfVisible.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (EnabledFieldMask & whichField))
    {
        _sfEnabled.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (ConstraintsFieldMask & whichField))
    {
        _sfConstraints.copyFromBin(pMem);
    }


}

#if !defined(OSG_FIXED_MFIELDSYNC)
void ComponentBase::executeSyncImpl(      ComponentBase *pOther,
                                        const BitVector         &whichField)
{

    Inherited::executeSyncImpl(pOther, whichField);

    if(FieldBits::NoField != (MinSizeFieldMask & whichField))
        _sfMinSize.syncWith(pOther->_sfMinSize);

    if(FieldBits::NoField != (MaxSizeFieldMask & whichField))
        _sfMaxSize.syncWith(pOther->_sfMaxSize);

    if(FieldBits::NoField != (PreferredSizeFieldMask & whichField))
        _sfPreferredSize.syncWith(pOther->_sfPreferredSize);

    if(FieldBits::NoField != (SizeFieldMask & whichField))
        _sfSize.syncWith(pOther->_sfSize);

    if(FieldBits::NoField != (VisibleFieldMask & whichField))
        _sfVisible.syncWith(pOther->_sfVisible);

    if(FieldBits::NoField != (EnabledFieldMask & whichField))
        _sfEnabled.syncWith(pOther->_sfEnabled);

    if(FieldBits::NoField != (ConstraintsFieldMask & whichField))
        _sfConstraints.syncWith(pOther->_sfConstraints);


}
#else
void ComponentBase::executeSyncImpl(      ComponentBase *pOther,
                                        const BitVector         &whichField,
                                        const SyncInfo          &sInfo      )
{

    Inherited::executeSyncImpl(pOther, whichField, sInfo);

    if(FieldBits::NoField != (MinSizeFieldMask & whichField))
        _sfMinSize.syncWith(pOther->_sfMinSize);

    if(FieldBits::NoField != (MaxSizeFieldMask & whichField))
        _sfMaxSize.syncWith(pOther->_sfMaxSize);

    if(FieldBits::NoField != (PreferredSizeFieldMask & whichField))
        _sfPreferredSize.syncWith(pOther->_sfPreferredSize);

    if(FieldBits::NoField != (SizeFieldMask & whichField))
        _sfSize.syncWith(pOther->_sfSize);

    if(FieldBits::NoField != (VisibleFieldMask & whichField))
        _sfVisible.syncWith(pOther->_sfVisible);

    if(FieldBits::NoField != (EnabledFieldMask & whichField))
        _sfEnabled.syncWith(pOther->_sfEnabled);

    if(FieldBits::NoField != (ConstraintsFieldMask & whichField))
        _sfConstraints.syncWith(pOther->_sfConstraints);



}

void ComponentBase::execBeginEditImpl (const BitVector &whichField, 
                                                 UInt32     uiAspect,
                                                 UInt32     uiContainerSize)
{
    Inherited::execBeginEditImpl(whichField, uiAspect, uiContainerSize);

}
#endif



OSG_END_NAMESPACE

#include <OpenSG/OSGSFieldTypeDef.inl>
#include <OpenSG/OSGMFieldTypeDef.inl>

OSG_BEGIN_NAMESPACE

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldDataTraits<ComponentPtr>::_type("ComponentPtr", "AttachmentContainerPtr");
#endif

OSG_DLLEXPORT_SFIELD_DEF1(ComponentPtr, );
OSG_DLLEXPORT_MFIELD_DEF1(ComponentPtr, );


/*------------------------------------------------------------------------*/
/*                              cvs id's                                  */

#ifdef OSG_SGI_CC
#pragma set woff 1174
#endif

#ifdef OSG_LINUX_ICC
#pragma warning( disable : 177 )
#endif

namespace
{
    static Char8 cvsid_cpp       [] = "@(#)$Id: FCBaseTemplate_cpp.h,v 1.47 2006/03/17 17:03:19 pdaehne Exp $";
    static Char8 cvsid_hpp       [] = OSGCOMPONENTBASE_HEADER_CVSID;
    static Char8 cvsid_inl       [] = OSGCOMPONENTBASE_INLINE_CVSID;

    static Char8 cvsid_fields_hpp[] = OSGCOMPONENTFIELDS_HEADER_CVSID;
}

OSG_END_NAMESPACE

