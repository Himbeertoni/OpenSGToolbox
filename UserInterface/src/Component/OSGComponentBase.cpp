/*---------------------------------------------------------------------------*\
 *                     OpenSG ToolBox UserInterface                          *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                         www.vrac.iastate.edu                              *
 *                                                                           *
 *   Authors: David Kabala, Alden Peterson, Lee Zaniewski, Jonathan Flory    *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class Component!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#define OSG_COMPILECOMPONENTINST

#include <stdlib.h>
#include <stdio.h>

#include <OpenSG/OSGConfig.h>

#include "OSGComponentBase.h"
#include "OSGComponent.h"


OSG_BEGIN_NAMESPACE

const OSG::BitVector  ComponentBase::PositionFieldMask = 
    (TypeTraits<BitVector>::One << ComponentBase::PositionFieldId);

const OSG::BitVector  ComponentBase::ClipTopLeftFieldMask = 
    (TypeTraits<BitVector>::One << ComponentBase::ClipTopLeftFieldId);

const OSG::BitVector  ComponentBase::ClipBottomRightFieldMask = 
    (TypeTraits<BitVector>::One << ComponentBase::ClipBottomRightFieldId);

const OSG::BitVector  ComponentBase::MinSizeFieldMask = 
    (TypeTraits<BitVector>::One << ComponentBase::MinSizeFieldId);

const OSG::BitVector  ComponentBase::MaxSizeFieldMask = 
    (TypeTraits<BitVector>::One << ComponentBase::MaxSizeFieldId);

const OSG::BitVector  ComponentBase::PreferredSizeFieldMask = 
    (TypeTraits<BitVector>::One << ComponentBase::PreferredSizeFieldId);

const OSG::BitVector  ComponentBase::SizeFieldMask = 
    (TypeTraits<BitVector>::One << ComponentBase::SizeFieldId);

const OSG::BitVector  ComponentBase::VisibleFieldMask = 
    (TypeTraits<BitVector>::One << ComponentBase::VisibleFieldId);

const OSG::BitVector  ComponentBase::EnabledFieldMask = 
    (TypeTraits<BitVector>::One << ComponentBase::EnabledFieldId);

const OSG::BitVector  ComponentBase::FocusedFieldMask = 
    (TypeTraits<BitVector>::One << ComponentBase::FocusedFieldId);

const OSG::BitVector  ComponentBase::ConstraintsFieldMask = 
    (TypeTraits<BitVector>::One << ComponentBase::ConstraintsFieldId);

const OSG::BitVector  ComponentBase::BorderFieldMask = 
    (TypeTraits<BitVector>::One << ComponentBase::BorderFieldId);

const OSG::BitVector  ComponentBase::BackgroundFieldMask = 
    (TypeTraits<BitVector>::One << ComponentBase::BackgroundFieldId);

const OSG::BitVector  ComponentBase::DisabledBorderFieldMask = 
    (TypeTraits<BitVector>::One << ComponentBase::DisabledBorderFieldId);

const OSG::BitVector  ComponentBase::DisabledBackgroundFieldMask = 
    (TypeTraits<BitVector>::One << ComponentBase::DisabledBackgroundFieldId);

const OSG::BitVector  ComponentBase::FocusableFieldMask = 
    (TypeTraits<BitVector>::One << ComponentBase::FocusableFieldId);

const OSG::BitVector  ComponentBase::FocusedBorderFieldMask = 
    (TypeTraits<BitVector>::One << ComponentBase::FocusedBorderFieldId);

const OSG::BitVector  ComponentBase::FocusedBackgroundFieldMask = 
    (TypeTraits<BitVector>::One << ComponentBase::FocusedBackgroundFieldId);

const OSG::BitVector  ComponentBase::RolloverBorderFieldMask = 
    (TypeTraits<BitVector>::One << ComponentBase::RolloverBorderFieldId);

const OSG::BitVector  ComponentBase::RolloverBackgroundFieldMask = 
    (TypeTraits<BitVector>::One << ComponentBase::RolloverBackgroundFieldId);

const OSG::BitVector  ComponentBase::ToolTipTextFieldMask = 
    (TypeTraits<BitVector>::One << ComponentBase::ToolTipTextFieldId);

const OSG::BitVector  ComponentBase::OpacityFieldMask = 
    (TypeTraits<BitVector>::One << ComponentBase::OpacityFieldId);

const OSG::BitVector  ComponentBase::ParentContainerFieldMask = 
    (TypeTraits<BitVector>::One << ComponentBase::ParentContainerFieldId);

const OSG::BitVector  ComponentBase::ParentWindowFieldMask = 
    (TypeTraits<BitVector>::One << ComponentBase::ParentWindowFieldId);

const OSG::BitVector  ComponentBase::ClippingFieldMask = 
    (TypeTraits<BitVector>::One << ComponentBase::ClippingFieldId);

const OSG::BitVector  ComponentBase::PopupMenuFieldMask = 
    (TypeTraits<BitVector>::One << ComponentBase::PopupMenuFieldId);

const OSG::BitVector ComponentBase::MTInfluenceMask = 
    (Inherited::MTInfluenceMask) | 
    (static_cast<BitVector>(0x0) << Inherited::NextFieldId); 


// Field descriptions

/*! \var Pnt2s           ComponentBase::_sfPosition
    
*/
/*! \var Pnt2s           ComponentBase::_sfClipTopLeft
    
*/
/*! \var Pnt2s           ComponentBase::_sfClipBottomRight
    
*/
/*! \var Vec2s           ComponentBase::_sfMinSize
    
*/
/*! \var Vec2s           ComponentBase::_sfMaxSize
    
*/
/*! \var Vec2s           ComponentBase::_sfPreferredSize
    
*/
/*! \var Vec2s           ComponentBase::_sfSize
    
*/
/*! \var bool            ComponentBase::_sfVisible
    
*/
/*! \var bool            ComponentBase::_sfEnabled
    
*/
/*! \var bool            ComponentBase::_sfFocused
    
*/
/*! \var LayoutConstraintsPtr ComponentBase::_sfConstraints
    
*/
/*! \var BorderPtr       ComponentBase::_sfBorder
    
*/
/*! \var UIBackgroundPtr ComponentBase::_sfBackground
    
*/
/*! \var BorderPtr       ComponentBase::_sfDisabledBorder
    
*/
/*! \var UIBackgroundPtr ComponentBase::_sfDisabledBackground
    
*/
/*! \var bool            ComponentBase::_sfFocusable
    
*/
/*! \var BorderPtr       ComponentBase::_sfFocusedBorder
    
*/
/*! \var UIBackgroundPtr ComponentBase::_sfFocusedBackground
    
*/
/*! \var BorderPtr       ComponentBase::_sfRolloverBorder
    
*/
/*! \var UIBackgroundPtr ComponentBase::_sfRolloverBackground
    
*/
/*! \var std::string     ComponentBase::_sfToolTipText
    
*/
/*! \var Real32          ComponentBase::_sfOpacity
    
*/
/*! \var ContainerPtr    ComponentBase::_sfParentContainer
    
*/
/*! \var InternalWindowPtr ComponentBase::_sfParentWindow
    
*/
/*! \var bool            ComponentBase::_sfClipping
    
*/
/*! \var PopupMenuPtr    ComponentBase::_sfPopupMenu
    
*/

//! Component description

FieldDescription *ComponentBase::_desc[] = 
{
    new FieldDescription(SFPnt2s::getClassType(), 
                     "Position", 
                     PositionFieldId, PositionFieldMask,
                     true,
                     (FieldAccessMethod) &ComponentBase::getSFPosition),
    new FieldDescription(SFPnt2s::getClassType(), 
                     "ClipTopLeft", 
                     ClipTopLeftFieldId, ClipTopLeftFieldMask,
                     true,
                     (FieldAccessMethod) &ComponentBase::getSFClipTopLeft),
    new FieldDescription(SFPnt2s::getClassType(), 
                     "ClipBottomRight", 
                     ClipBottomRightFieldId, ClipBottomRightFieldMask,
                     true,
                     (FieldAccessMethod) &ComponentBase::getSFClipBottomRight),
    new FieldDescription(SFVec2s::getClassType(), 
                     "MinSize", 
                     MinSizeFieldId, MinSizeFieldMask,
                     false,
                     (FieldAccessMethod) &ComponentBase::getSFMinSize),
    new FieldDescription(SFVec2s::getClassType(), 
                     "MaxSize", 
                     MaxSizeFieldId, MaxSizeFieldMask,
                     false,
                     (FieldAccessMethod) &ComponentBase::getSFMaxSize),
    new FieldDescription(SFVec2s::getClassType(), 
                     "PreferredSize", 
                     PreferredSizeFieldId, PreferredSizeFieldMask,
                     false,
                     (FieldAccessMethod) &ComponentBase::getSFPreferredSize),
    new FieldDescription(SFVec2s::getClassType(), 
                     "Size", 
                     SizeFieldId, SizeFieldMask,
                     true,
                     (FieldAccessMethod) &ComponentBase::getSFSize),
    new FieldDescription(SFBool::getClassType(), 
                     "Visible", 
                     VisibleFieldId, VisibleFieldMask,
                     false,
                     (FieldAccessMethod) &ComponentBase::getSFVisible),
    new FieldDescription(SFBool::getClassType(), 
                     "Enabled", 
                     EnabledFieldId, EnabledFieldMask,
                     false,
                     (FieldAccessMethod) &ComponentBase::getSFEnabled),
    new FieldDescription(SFBool::getClassType(), 
                     "Focused", 
                     FocusedFieldId, FocusedFieldMask,
                     false,
                     (FieldAccessMethod) &ComponentBase::getSFFocused),
    new FieldDescription(SFLayoutConstraintsPtr::getClassType(), 
                     "Constraints", 
                     ConstraintsFieldId, ConstraintsFieldMask,
                     false,
                     (FieldAccessMethod) &ComponentBase::getSFConstraints),
    new FieldDescription(SFBorderPtr::getClassType(), 
                     "Border", 
                     BorderFieldId, BorderFieldMask,
                     false,
                     (FieldAccessMethod) &ComponentBase::getSFBorder),
    new FieldDescription(SFUIBackgroundPtr::getClassType(), 
                     "Background", 
                     BackgroundFieldId, BackgroundFieldMask,
                     false,
                     (FieldAccessMethod) &ComponentBase::getSFBackground),
    new FieldDescription(SFBorderPtr::getClassType(), 
                     "DisabledBorder", 
                     DisabledBorderFieldId, DisabledBorderFieldMask,
                     false,
                     (FieldAccessMethod) &ComponentBase::getSFDisabledBorder),
    new FieldDescription(SFUIBackgroundPtr::getClassType(), 
                     "DisabledBackground", 
                     DisabledBackgroundFieldId, DisabledBackgroundFieldMask,
                     false,
                     (FieldAccessMethod) &ComponentBase::getSFDisabledBackground),
    new FieldDescription(SFBool::getClassType(), 
                     "Focusable", 
                     FocusableFieldId, FocusableFieldMask,
                     false,
                     (FieldAccessMethod) &ComponentBase::getSFFocusable),
    new FieldDescription(SFBorderPtr::getClassType(), 
                     "FocusedBorder", 
                     FocusedBorderFieldId, FocusedBorderFieldMask,
                     false,
                     (FieldAccessMethod) &ComponentBase::getSFFocusedBorder),
    new FieldDescription(SFUIBackgroundPtr::getClassType(), 
                     "FocusedBackground", 
                     FocusedBackgroundFieldId, FocusedBackgroundFieldMask,
                     false,
                     (FieldAccessMethod) &ComponentBase::getSFFocusedBackground),
    new FieldDescription(SFBorderPtr::getClassType(), 
                     "RolloverBorder", 
                     RolloverBorderFieldId, RolloverBorderFieldMask,
                     false,
                     (FieldAccessMethod) &ComponentBase::getSFRolloverBorder),
    new FieldDescription(SFUIBackgroundPtr::getClassType(), 
                     "RolloverBackground", 
                     RolloverBackgroundFieldId, RolloverBackgroundFieldMask,
                     false,
                     (FieldAccessMethod) &ComponentBase::getSFRolloverBackground),
    new FieldDescription(SFString::getClassType(), 
                     "ToolTipText", 
                     ToolTipTextFieldId, ToolTipTextFieldMask,
                     false,
                     (FieldAccessMethod) &ComponentBase::getSFToolTipText),
    new FieldDescription(SFReal32::getClassType(), 
                     "Opacity", 
                     OpacityFieldId, OpacityFieldMask,
                     false,
                     (FieldAccessMethod) &ComponentBase::getSFOpacity),
    new FieldDescription(SFContainerPtr::getClassType(), 
                     "ParentContainer", 
                     ParentContainerFieldId, ParentContainerFieldMask,
                     false,
                     (FieldAccessMethod) &ComponentBase::getSFParentContainer),
    new FieldDescription(SFInternalWindowPtr::getClassType(), 
                     "ParentWindow", 
                     ParentWindowFieldId, ParentWindowFieldMask,
                     false,
                     (FieldAccessMethod) &ComponentBase::getSFParentWindow),
    new FieldDescription(SFBool::getClassType(), 
                     "Clipping", 
                     ClippingFieldId, ClippingFieldMask,
                     false,
                     (FieldAccessMethod) &ComponentBase::getSFClipping),
    new FieldDescription(SFPopupMenuPtr::getClassType(), 
                     "PopupMenu", 
                     PopupMenuFieldId, PopupMenuFieldMask,
                     true,
                     (FieldAccessMethod) &ComponentBase::getSFPopupMenu)
};


FieldContainerType ComponentBase::_type(
    "Component",
    "AttachmentContainer",
    NULL,
    NULL, 
    Component::initMethod,
    _desc,
    sizeof(_desc));

//OSG_FIELD_CONTAINER_DEF(ComponentBase, ComponentPtr)

/*------------------------------ get -----------------------------------*/

FieldContainerType &ComponentBase::getType(void) 
{
    return _type; 
} 

const FieldContainerType &ComponentBase::getType(void) const 
{
    return _type;
} 


UInt32 ComponentBase::getContainerSize(void) const 
{ 
    return sizeof(Component); 
}


#if !defined(OSG_FIXED_MFIELDSYNC)
void ComponentBase::executeSync(      FieldContainer &other,
                                    const BitVector      &whichField)
{
    this->executeSyncImpl((ComponentBase *) &other, whichField);
}
#else
void ComponentBase::executeSync(      FieldContainer &other,
                                    const BitVector      &whichField,                                    const SyncInfo       &sInfo     )
{
    this->executeSyncImpl((ComponentBase *) &other, whichField, sInfo);
}
void ComponentBase::execBeginEdit(const BitVector &whichField, 
                                            UInt32     uiAspect,
                                            UInt32     uiContainerSize) 
{
    this->execBeginEditImpl(whichField, uiAspect, uiContainerSize);
}

void ComponentBase::onDestroyAspect(UInt32 uiId, UInt32 uiAspect)
{
    Inherited::onDestroyAspect(uiId, uiAspect);

}
#endif

/*------------------------- constructors ----------------------------------*/

#ifdef OSG_WIN32_ICL
#pragma warning (disable : 383)
#endif

ComponentBase::ComponentBase(void) :
    _sfPosition               (Pnt2s(0,0)), 
    _sfClipTopLeft            (Pnt2s(0,0)), 
    _sfClipBottomRight        (Pnt2s(0,0)), 
    _sfMinSize                (Vec2s(0,0)), 
    _sfMaxSize                (Vec2s(32767,32767)), 
    _sfPreferredSize          (Vec2s(1,1)), 
    _sfSize                   (), 
    _sfVisible                (bool(true)), 
    _sfEnabled                (bool(true)), 
    _sfFocused                (bool(false)), 
    _sfConstraints            (), 
    _sfBorder                 (BorderPtr(NullFC)), 
    _sfBackground             (UIBackgroundPtr(NullFC)), 
    _sfDisabledBorder         (BorderPtr(NullFC)), 
    _sfDisabledBackground     (UIBackgroundPtr(NullFC)), 
    _sfFocusable              (bool(true)), 
    _sfFocusedBorder          (BorderPtr(NullFC)), 
    _sfFocusedBackground      (UIBackgroundPtr(NullFC)), 
    _sfRolloverBorder         (BorderPtr(NullFC)), 
    _sfRolloverBackground     (UIBackgroundPtr(NullFC)), 
    _sfToolTipText            (), 
    _sfOpacity                (Real32(1.0)), 
    _sfParentContainer        (ContainerPtr(NullFC)), 
    _sfParentWindow           (InternalWindowPtr(NullFC)), 
    _sfClipping               (bool(true)), 
    _sfPopupMenu              (PopupMenuPtr(NullFC)), 
    Inherited() 
{
}

#ifdef OSG_WIN32_ICL
#pragma warning (default : 383)
#endif

ComponentBase::ComponentBase(const ComponentBase &source) :
    _sfPosition               (source._sfPosition               ), 
    _sfClipTopLeft            (source._sfClipTopLeft            ), 
    _sfClipBottomRight        (source._sfClipBottomRight        ), 
    _sfMinSize                (source._sfMinSize                ), 
    _sfMaxSize                (source._sfMaxSize                ), 
    _sfPreferredSize          (source._sfPreferredSize          ), 
    _sfSize                   (source._sfSize                   ), 
    _sfVisible                (source._sfVisible                ), 
    _sfEnabled                (source._sfEnabled                ), 
    _sfFocused                (source._sfFocused                ), 
    _sfConstraints            (source._sfConstraints            ), 
    _sfBorder                 (source._sfBorder                 ), 
    _sfBackground             (source._sfBackground             ), 
    _sfDisabledBorder         (source._sfDisabledBorder         ), 
    _sfDisabledBackground     (source._sfDisabledBackground     ), 
    _sfFocusable              (source._sfFocusable              ), 
    _sfFocusedBorder          (source._sfFocusedBorder          ), 
    _sfFocusedBackground      (source._sfFocusedBackground      ), 
    _sfRolloverBorder         (source._sfRolloverBorder         ), 
    _sfRolloverBackground     (source._sfRolloverBackground     ), 
    _sfToolTipText            (source._sfToolTipText            ), 
    _sfOpacity                (source._sfOpacity                ), 
    _sfParentContainer        (source._sfParentContainer        ), 
    _sfParentWindow           (source._sfParentWindow           ), 
    _sfClipping               (source._sfClipping               ), 
    _sfPopupMenu              (source._sfPopupMenu              ), 
    Inherited                 (source)
{
}

/*-------------------------- destructors ----------------------------------*/

ComponentBase::~ComponentBase(void)
{
}

/*------------------------------ access -----------------------------------*/

UInt32 ComponentBase::getBinSize(const BitVector &whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (PositionFieldMask & whichField))
    {
        returnValue += _sfPosition.getBinSize();
    }

    if(FieldBits::NoField != (ClipTopLeftFieldMask & whichField))
    {
        returnValue += _sfClipTopLeft.getBinSize();
    }

    if(FieldBits::NoField != (ClipBottomRightFieldMask & whichField))
    {
        returnValue += _sfClipBottomRight.getBinSize();
    }

    if(FieldBits::NoField != (MinSizeFieldMask & whichField))
    {
        returnValue += _sfMinSize.getBinSize();
    }

    if(FieldBits::NoField != (MaxSizeFieldMask & whichField))
    {
        returnValue += _sfMaxSize.getBinSize();
    }

    if(FieldBits::NoField != (PreferredSizeFieldMask & whichField))
    {
        returnValue += _sfPreferredSize.getBinSize();
    }

    if(FieldBits::NoField != (SizeFieldMask & whichField))
    {
        returnValue += _sfSize.getBinSize();
    }

    if(FieldBits::NoField != (VisibleFieldMask & whichField))
    {
        returnValue += _sfVisible.getBinSize();
    }

    if(FieldBits::NoField != (EnabledFieldMask & whichField))
    {
        returnValue += _sfEnabled.getBinSize();
    }

    if(FieldBits::NoField != (FocusedFieldMask & whichField))
    {
        returnValue += _sfFocused.getBinSize();
    }

    if(FieldBits::NoField != (ConstraintsFieldMask & whichField))
    {
        returnValue += _sfConstraints.getBinSize();
    }

    if(FieldBits::NoField != (BorderFieldMask & whichField))
    {
        returnValue += _sfBorder.getBinSize();
    }

    if(FieldBits::NoField != (BackgroundFieldMask & whichField))
    {
        returnValue += _sfBackground.getBinSize();
    }

    if(FieldBits::NoField != (DisabledBorderFieldMask & whichField))
    {
        returnValue += _sfDisabledBorder.getBinSize();
    }

    if(FieldBits::NoField != (DisabledBackgroundFieldMask & whichField))
    {
        returnValue += _sfDisabledBackground.getBinSize();
    }

    if(FieldBits::NoField != (FocusableFieldMask & whichField))
    {
        returnValue += _sfFocusable.getBinSize();
    }

    if(FieldBits::NoField != (FocusedBorderFieldMask & whichField))
    {
        returnValue += _sfFocusedBorder.getBinSize();
    }

    if(FieldBits::NoField != (FocusedBackgroundFieldMask & whichField))
    {
        returnValue += _sfFocusedBackground.getBinSize();
    }

    if(FieldBits::NoField != (RolloverBorderFieldMask & whichField))
    {
        returnValue += _sfRolloverBorder.getBinSize();
    }

    if(FieldBits::NoField != (RolloverBackgroundFieldMask & whichField))
    {
        returnValue += _sfRolloverBackground.getBinSize();
    }

    if(FieldBits::NoField != (ToolTipTextFieldMask & whichField))
    {
        returnValue += _sfToolTipText.getBinSize();
    }

    if(FieldBits::NoField != (OpacityFieldMask & whichField))
    {
        returnValue += _sfOpacity.getBinSize();
    }

    if(FieldBits::NoField != (ParentContainerFieldMask & whichField))
    {
        returnValue += _sfParentContainer.getBinSize();
    }

    if(FieldBits::NoField != (ParentWindowFieldMask & whichField))
    {
        returnValue += _sfParentWindow.getBinSize();
    }

    if(FieldBits::NoField != (ClippingFieldMask & whichField))
    {
        returnValue += _sfClipping.getBinSize();
    }

    if(FieldBits::NoField != (PopupMenuFieldMask & whichField))
    {
        returnValue += _sfPopupMenu.getBinSize();
    }


    return returnValue;
}

void ComponentBase::copyToBin(      BinaryDataHandler &pMem,
                                  const BitVector         &whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (PositionFieldMask & whichField))
    {
        _sfPosition.copyToBin(pMem);
    }

    if(FieldBits::NoField != (ClipTopLeftFieldMask & whichField))
    {
        _sfClipTopLeft.copyToBin(pMem);
    }

    if(FieldBits::NoField != (ClipBottomRightFieldMask & whichField))
    {
        _sfClipBottomRight.copyToBin(pMem);
    }

    if(FieldBits::NoField != (MinSizeFieldMask & whichField))
    {
        _sfMinSize.copyToBin(pMem);
    }

    if(FieldBits::NoField != (MaxSizeFieldMask & whichField))
    {
        _sfMaxSize.copyToBin(pMem);
    }

    if(FieldBits::NoField != (PreferredSizeFieldMask & whichField))
    {
        _sfPreferredSize.copyToBin(pMem);
    }

    if(FieldBits::NoField != (SizeFieldMask & whichField))
    {
        _sfSize.copyToBin(pMem);
    }

    if(FieldBits::NoField != (VisibleFieldMask & whichField))
    {
        _sfVisible.copyToBin(pMem);
    }

    if(FieldBits::NoField != (EnabledFieldMask & whichField))
    {
        _sfEnabled.copyToBin(pMem);
    }

    if(FieldBits::NoField != (FocusedFieldMask & whichField))
    {
        _sfFocused.copyToBin(pMem);
    }

    if(FieldBits::NoField != (ConstraintsFieldMask & whichField))
    {
        _sfConstraints.copyToBin(pMem);
    }

    if(FieldBits::NoField != (BorderFieldMask & whichField))
    {
        _sfBorder.copyToBin(pMem);
    }

    if(FieldBits::NoField != (BackgroundFieldMask & whichField))
    {
        _sfBackground.copyToBin(pMem);
    }

    if(FieldBits::NoField != (DisabledBorderFieldMask & whichField))
    {
        _sfDisabledBorder.copyToBin(pMem);
    }

    if(FieldBits::NoField != (DisabledBackgroundFieldMask & whichField))
    {
        _sfDisabledBackground.copyToBin(pMem);
    }

    if(FieldBits::NoField != (FocusableFieldMask & whichField))
    {
        _sfFocusable.copyToBin(pMem);
    }

    if(FieldBits::NoField != (FocusedBorderFieldMask & whichField))
    {
        _sfFocusedBorder.copyToBin(pMem);
    }

    if(FieldBits::NoField != (FocusedBackgroundFieldMask & whichField))
    {
        _sfFocusedBackground.copyToBin(pMem);
    }

    if(FieldBits::NoField != (RolloverBorderFieldMask & whichField))
    {
        _sfRolloverBorder.copyToBin(pMem);
    }

    if(FieldBits::NoField != (RolloverBackgroundFieldMask & whichField))
    {
        _sfRolloverBackground.copyToBin(pMem);
    }

    if(FieldBits::NoField != (ToolTipTextFieldMask & whichField))
    {
        _sfToolTipText.copyToBin(pMem);
    }

    if(FieldBits::NoField != (OpacityFieldMask & whichField))
    {
        _sfOpacity.copyToBin(pMem);
    }

    if(FieldBits::NoField != (ParentContainerFieldMask & whichField))
    {
        _sfParentContainer.copyToBin(pMem);
    }

    if(FieldBits::NoField != (ParentWindowFieldMask & whichField))
    {
        _sfParentWindow.copyToBin(pMem);
    }

    if(FieldBits::NoField != (ClippingFieldMask & whichField))
    {
        _sfClipping.copyToBin(pMem);
    }

    if(FieldBits::NoField != (PopupMenuFieldMask & whichField))
    {
        _sfPopupMenu.copyToBin(pMem);
    }


}

void ComponentBase::copyFromBin(      BinaryDataHandler &pMem,
                                    const BitVector    &whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (PositionFieldMask & whichField))
    {
        _sfPosition.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (ClipTopLeftFieldMask & whichField))
    {
        _sfClipTopLeft.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (ClipBottomRightFieldMask & whichField))
    {
        _sfClipBottomRight.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (MinSizeFieldMask & whichField))
    {
        _sfMinSize.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (MaxSizeFieldMask & whichField))
    {
        _sfMaxSize.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (PreferredSizeFieldMask & whichField))
    {
        _sfPreferredSize.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (SizeFieldMask & whichField))
    {
        _sfSize.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (VisibleFieldMask & whichField))
    {
        _sfVisible.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (EnabledFieldMask & whichField))
    {
        _sfEnabled.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (FocusedFieldMask & whichField))
    {
        _sfFocused.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (ConstraintsFieldMask & whichField))
    {
        _sfConstraints.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (BorderFieldMask & whichField))
    {
        _sfBorder.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (BackgroundFieldMask & whichField))
    {
        _sfBackground.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (DisabledBorderFieldMask & whichField))
    {
        _sfDisabledBorder.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (DisabledBackgroundFieldMask & whichField))
    {
        _sfDisabledBackground.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (FocusableFieldMask & whichField))
    {
        _sfFocusable.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (FocusedBorderFieldMask & whichField))
    {
        _sfFocusedBorder.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (FocusedBackgroundFieldMask & whichField))
    {
        _sfFocusedBackground.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (RolloverBorderFieldMask & whichField))
    {
        _sfRolloverBorder.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (RolloverBackgroundFieldMask & whichField))
    {
        _sfRolloverBackground.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (ToolTipTextFieldMask & whichField))
    {
        _sfToolTipText.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (OpacityFieldMask & whichField))
    {
        _sfOpacity.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (ParentContainerFieldMask & whichField))
    {
        _sfParentContainer.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (ParentWindowFieldMask & whichField))
    {
        _sfParentWindow.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (ClippingFieldMask & whichField))
    {
        _sfClipping.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (PopupMenuFieldMask & whichField))
    {
        _sfPopupMenu.copyFromBin(pMem);
    }


}

#if !defined(OSG_FIXED_MFIELDSYNC)
void ComponentBase::executeSyncImpl(      ComponentBase *pOther,
                                        const BitVector         &whichField)
{

    Inherited::executeSyncImpl(pOther, whichField);

    if(FieldBits::NoField != (PositionFieldMask & whichField))
        _sfPosition.syncWith(pOther->_sfPosition);

    if(FieldBits::NoField != (ClipTopLeftFieldMask & whichField))
        _sfClipTopLeft.syncWith(pOther->_sfClipTopLeft);

    if(FieldBits::NoField != (ClipBottomRightFieldMask & whichField))
        _sfClipBottomRight.syncWith(pOther->_sfClipBottomRight);

    if(FieldBits::NoField != (MinSizeFieldMask & whichField))
        _sfMinSize.syncWith(pOther->_sfMinSize);

    if(FieldBits::NoField != (MaxSizeFieldMask & whichField))
        _sfMaxSize.syncWith(pOther->_sfMaxSize);

    if(FieldBits::NoField != (PreferredSizeFieldMask & whichField))
        _sfPreferredSize.syncWith(pOther->_sfPreferredSize);

    if(FieldBits::NoField != (SizeFieldMask & whichField))
        _sfSize.syncWith(pOther->_sfSize);

    if(FieldBits::NoField != (VisibleFieldMask & whichField))
        _sfVisible.syncWith(pOther->_sfVisible);

    if(FieldBits::NoField != (EnabledFieldMask & whichField))
        _sfEnabled.syncWith(pOther->_sfEnabled);

    if(FieldBits::NoField != (FocusedFieldMask & whichField))
        _sfFocused.syncWith(pOther->_sfFocused);

    if(FieldBits::NoField != (ConstraintsFieldMask & whichField))
        _sfConstraints.syncWith(pOther->_sfConstraints);

    if(FieldBits::NoField != (BorderFieldMask & whichField))
        _sfBorder.syncWith(pOther->_sfBorder);

    if(FieldBits::NoField != (BackgroundFieldMask & whichField))
        _sfBackground.syncWith(pOther->_sfBackground);

    if(FieldBits::NoField != (DisabledBorderFieldMask & whichField))
        _sfDisabledBorder.syncWith(pOther->_sfDisabledBorder);

    if(FieldBits::NoField != (DisabledBackgroundFieldMask & whichField))
        _sfDisabledBackground.syncWith(pOther->_sfDisabledBackground);

    if(FieldBits::NoField != (FocusableFieldMask & whichField))
        _sfFocusable.syncWith(pOther->_sfFocusable);

    if(FieldBits::NoField != (FocusedBorderFieldMask & whichField))
        _sfFocusedBorder.syncWith(pOther->_sfFocusedBorder);

    if(FieldBits::NoField != (FocusedBackgroundFieldMask & whichField))
        _sfFocusedBackground.syncWith(pOther->_sfFocusedBackground);

    if(FieldBits::NoField != (RolloverBorderFieldMask & whichField))
        _sfRolloverBorder.syncWith(pOther->_sfRolloverBorder);

    if(FieldBits::NoField != (RolloverBackgroundFieldMask & whichField))
        _sfRolloverBackground.syncWith(pOther->_sfRolloverBackground);

    if(FieldBits::NoField != (ToolTipTextFieldMask & whichField))
        _sfToolTipText.syncWith(pOther->_sfToolTipText);

    if(FieldBits::NoField != (OpacityFieldMask & whichField))
        _sfOpacity.syncWith(pOther->_sfOpacity);

    if(FieldBits::NoField != (ParentContainerFieldMask & whichField))
        _sfParentContainer.syncWith(pOther->_sfParentContainer);

    if(FieldBits::NoField != (ParentWindowFieldMask & whichField))
        _sfParentWindow.syncWith(pOther->_sfParentWindow);

    if(FieldBits::NoField != (ClippingFieldMask & whichField))
        _sfClipping.syncWith(pOther->_sfClipping);

    if(FieldBits::NoField != (PopupMenuFieldMask & whichField))
        _sfPopupMenu.syncWith(pOther->_sfPopupMenu);


}
#else
void ComponentBase::executeSyncImpl(      ComponentBase *pOther,
                                        const BitVector         &whichField,
                                        const SyncInfo          &sInfo      )
{

    Inherited::executeSyncImpl(pOther, whichField, sInfo);

    if(FieldBits::NoField != (PositionFieldMask & whichField))
        _sfPosition.syncWith(pOther->_sfPosition);

    if(FieldBits::NoField != (ClipTopLeftFieldMask & whichField))
        _sfClipTopLeft.syncWith(pOther->_sfClipTopLeft);

    if(FieldBits::NoField != (ClipBottomRightFieldMask & whichField))
        _sfClipBottomRight.syncWith(pOther->_sfClipBottomRight);

    if(FieldBits::NoField != (MinSizeFieldMask & whichField))
        _sfMinSize.syncWith(pOther->_sfMinSize);

    if(FieldBits::NoField != (MaxSizeFieldMask & whichField))
        _sfMaxSize.syncWith(pOther->_sfMaxSize);

    if(FieldBits::NoField != (PreferredSizeFieldMask & whichField))
        _sfPreferredSize.syncWith(pOther->_sfPreferredSize);

    if(FieldBits::NoField != (SizeFieldMask & whichField))
        _sfSize.syncWith(pOther->_sfSize);

    if(FieldBits::NoField != (VisibleFieldMask & whichField))
        _sfVisible.syncWith(pOther->_sfVisible);

    if(FieldBits::NoField != (EnabledFieldMask & whichField))
        _sfEnabled.syncWith(pOther->_sfEnabled);

    if(FieldBits::NoField != (FocusedFieldMask & whichField))
        _sfFocused.syncWith(pOther->_sfFocused);

    if(FieldBits::NoField != (ConstraintsFieldMask & whichField))
        _sfConstraints.syncWith(pOther->_sfConstraints);

    if(FieldBits::NoField != (BorderFieldMask & whichField))
        _sfBorder.syncWith(pOther->_sfBorder);

    if(FieldBits::NoField != (BackgroundFieldMask & whichField))
        _sfBackground.syncWith(pOther->_sfBackground);

    if(FieldBits::NoField != (DisabledBorderFieldMask & whichField))
        _sfDisabledBorder.syncWith(pOther->_sfDisabledBorder);

    if(FieldBits::NoField != (DisabledBackgroundFieldMask & whichField))
        _sfDisabledBackground.syncWith(pOther->_sfDisabledBackground);

    if(FieldBits::NoField != (FocusableFieldMask & whichField))
        _sfFocusable.syncWith(pOther->_sfFocusable);

    if(FieldBits::NoField != (FocusedBorderFieldMask & whichField))
        _sfFocusedBorder.syncWith(pOther->_sfFocusedBorder);

    if(FieldBits::NoField != (FocusedBackgroundFieldMask & whichField))
        _sfFocusedBackground.syncWith(pOther->_sfFocusedBackground);

    if(FieldBits::NoField != (RolloverBorderFieldMask & whichField))
        _sfRolloverBorder.syncWith(pOther->_sfRolloverBorder);

    if(FieldBits::NoField != (RolloverBackgroundFieldMask & whichField))
        _sfRolloverBackground.syncWith(pOther->_sfRolloverBackground);

    if(FieldBits::NoField != (ToolTipTextFieldMask & whichField))
        _sfToolTipText.syncWith(pOther->_sfToolTipText);

    if(FieldBits::NoField != (OpacityFieldMask & whichField))
        _sfOpacity.syncWith(pOther->_sfOpacity);

    if(FieldBits::NoField != (ParentContainerFieldMask & whichField))
        _sfParentContainer.syncWith(pOther->_sfParentContainer);

    if(FieldBits::NoField != (ParentWindowFieldMask & whichField))
        _sfParentWindow.syncWith(pOther->_sfParentWindow);

    if(FieldBits::NoField != (ClippingFieldMask & whichField))
        _sfClipping.syncWith(pOther->_sfClipping);

    if(FieldBits::NoField != (PopupMenuFieldMask & whichField))
        _sfPopupMenu.syncWith(pOther->_sfPopupMenu);



}

void ComponentBase::execBeginEditImpl (const BitVector &whichField, 
                                                 UInt32     uiAspect,
                                                 UInt32     uiContainerSize)
{
    Inherited::execBeginEditImpl(whichField, uiAspect, uiContainerSize);

}
#endif

/*------------------------------ get -----------------------------------*/

OSG_USERINTERFACELIB_DLLMAPPING
SFPnt2s *ComponentBase::getSFPosition(void)
{
    return &_sfPosition;
}

OSG_USERINTERFACELIB_DLLMAPPING
SFPnt2s *ComponentBase::getSFClipTopLeft(void)
{
    return &_sfClipTopLeft;
}

OSG_USERINTERFACELIB_DLLMAPPING
SFPnt2s *ComponentBase::getSFClipBottomRight(void)
{
    return &_sfClipBottomRight;
}

OSG_USERINTERFACELIB_DLLMAPPING
SFVec2s *ComponentBase::getSFMinSize(void)
{
    return &_sfMinSize;
}

OSG_USERINTERFACELIB_DLLMAPPING
SFVec2s *ComponentBase::getSFMaxSize(void)
{
    return &_sfMaxSize;
}

OSG_USERINTERFACELIB_DLLMAPPING
SFVec2s *ComponentBase::getSFPreferredSize(void)
{
    return &_sfPreferredSize;
}

OSG_USERINTERFACELIB_DLLMAPPING
SFVec2s *ComponentBase::getSFSize(void)
{
    return &_sfSize;
}

OSG_USERINTERFACELIB_DLLMAPPING
SFBool *ComponentBase::getSFVisible(void)
{
    return &_sfVisible;
}

OSG_USERINTERFACELIB_DLLMAPPING
SFBool *ComponentBase::getSFEnabled(void)
{
    return &_sfEnabled;
}

OSG_USERINTERFACELIB_DLLMAPPING
SFBool *ComponentBase::getSFFocused(void)
{
    return &_sfFocused;
}

OSG_USERINTERFACELIB_DLLMAPPING
SFLayoutConstraintsPtr *ComponentBase::getSFConstraints(void)
{
    return &_sfConstraints;
}

OSG_USERINTERFACELIB_DLLMAPPING
SFBorderPtr *ComponentBase::getSFBorder(void)
{
    return &_sfBorder;
}

OSG_USERINTERFACELIB_DLLMAPPING
SFUIBackgroundPtr *ComponentBase::getSFBackground(void)
{
    return &_sfBackground;
}

OSG_USERINTERFACELIB_DLLMAPPING
SFBorderPtr *ComponentBase::getSFDisabledBorder(void)
{
    return &_sfDisabledBorder;
}

OSG_USERINTERFACELIB_DLLMAPPING
SFUIBackgroundPtr *ComponentBase::getSFDisabledBackground(void)
{
    return &_sfDisabledBackground;
}

OSG_USERINTERFACELIB_DLLMAPPING
SFBool *ComponentBase::getSFFocusable(void)
{
    return &_sfFocusable;
}

OSG_USERINTERFACELIB_DLLMAPPING
SFBorderPtr *ComponentBase::getSFFocusedBorder(void)
{
    return &_sfFocusedBorder;
}

OSG_USERINTERFACELIB_DLLMAPPING
SFUIBackgroundPtr *ComponentBase::getSFFocusedBackground(void)
{
    return &_sfFocusedBackground;
}

OSG_USERINTERFACELIB_DLLMAPPING
SFBorderPtr *ComponentBase::getSFRolloverBorder(void)
{
    return &_sfRolloverBorder;
}

OSG_USERINTERFACELIB_DLLMAPPING
SFUIBackgroundPtr *ComponentBase::getSFRolloverBackground(void)
{
    return &_sfRolloverBackground;
}

OSG_USERINTERFACELIB_DLLMAPPING
SFString *ComponentBase::getSFToolTipText(void)
{
    return &_sfToolTipText;
}

OSG_USERINTERFACELIB_DLLMAPPING
SFReal32 *ComponentBase::getSFOpacity(void)
{
    return &_sfOpacity;
}

OSG_USERINTERFACELIB_DLLMAPPING
SFContainerPtr *ComponentBase::getSFParentContainer(void)
{
    return &_sfParentContainer;
}

OSG_USERINTERFACELIB_DLLMAPPING
SFInternalWindowPtr *ComponentBase::getSFParentWindow(void)
{
    return &_sfParentWindow;
}

OSG_USERINTERFACELIB_DLLMAPPING
SFBool *ComponentBase::getSFClipping(void)
{
    return &_sfClipping;
}

OSG_USERINTERFACELIB_DLLMAPPING
SFPopupMenuPtr *ComponentBase::getSFPopupMenu(void)
{
    return &_sfPopupMenu;
}


OSG_USERINTERFACELIB_DLLMAPPING
Pnt2s &ComponentBase::getPosition(void)
{
    return _sfPosition.getValue();
}

OSG_USERINTERFACELIB_DLLMAPPING
const Pnt2s &ComponentBase::getPosition(void) const
{
    return _sfPosition.getValue();
}

OSG_USERINTERFACELIB_DLLMAPPING
void ComponentBase::setPosition(const Pnt2s &value)
{
    _sfPosition.setValue(value);
}

OSG_USERINTERFACELIB_DLLMAPPING
Pnt2s &ComponentBase::getClipTopLeft(void)
{
    return _sfClipTopLeft.getValue();
}

OSG_USERINTERFACELIB_DLLMAPPING
const Pnt2s &ComponentBase::getClipTopLeft(void) const
{
    return _sfClipTopLeft.getValue();
}

OSG_USERINTERFACELIB_DLLMAPPING
void ComponentBase::setClipTopLeft(const Pnt2s &value)
{
    _sfClipTopLeft.setValue(value);
}

OSG_USERINTERFACELIB_DLLMAPPING
Pnt2s &ComponentBase::getClipBottomRight(void)
{
    return _sfClipBottomRight.getValue();
}

OSG_USERINTERFACELIB_DLLMAPPING
const Pnt2s &ComponentBase::getClipBottomRight(void) const
{
    return _sfClipBottomRight.getValue();
}

OSG_USERINTERFACELIB_DLLMAPPING
void ComponentBase::setClipBottomRight(const Pnt2s &value)
{
    _sfClipBottomRight.setValue(value);
}

OSG_USERINTERFACELIB_DLLMAPPING
Vec2s &ComponentBase::getMinSize(void)
{
    return _sfMinSize.getValue();
}

OSG_USERINTERFACELIB_DLLMAPPING
const Vec2s &ComponentBase::getMinSize(void) const
{
    return _sfMinSize.getValue();
}

OSG_USERINTERFACELIB_DLLMAPPING
void ComponentBase::setMinSize(const Vec2s &value)
{
    _sfMinSize.setValue(value);
}

OSG_USERINTERFACELIB_DLLMAPPING
Vec2s &ComponentBase::getMaxSize(void)
{
    return _sfMaxSize.getValue();
}

OSG_USERINTERFACELIB_DLLMAPPING
const Vec2s &ComponentBase::getMaxSize(void) const
{
    return _sfMaxSize.getValue();
}

OSG_USERINTERFACELIB_DLLMAPPING
void ComponentBase::setMaxSize(const Vec2s &value)
{
    _sfMaxSize.setValue(value);
}

OSG_USERINTERFACELIB_DLLMAPPING
Vec2s &ComponentBase::getPreferredSize(void)
{
    return _sfPreferredSize.getValue();
}

OSG_USERINTERFACELIB_DLLMAPPING
const Vec2s &ComponentBase::getPreferredSize(void) const
{
    return _sfPreferredSize.getValue();
}

OSG_USERINTERFACELIB_DLLMAPPING
void ComponentBase::setPreferredSize(const Vec2s &value)
{
    _sfPreferredSize.setValue(value);
}

OSG_USERINTERFACELIB_DLLMAPPING
Vec2s &ComponentBase::getSize(void)
{
    return _sfSize.getValue();
}

OSG_USERINTERFACELIB_DLLMAPPING
const Vec2s &ComponentBase::getSize(void) const
{
    return _sfSize.getValue();
}

OSG_USERINTERFACELIB_DLLMAPPING
void ComponentBase::setSize(const Vec2s &value)
{
    _sfSize.setValue(value);
}

OSG_USERINTERFACELIB_DLLMAPPING
bool &ComponentBase::getVisible(void)
{
    return _sfVisible.getValue();
}

OSG_USERINTERFACELIB_DLLMAPPING
const bool &ComponentBase::getVisible(void) const
{
    return _sfVisible.getValue();
}

OSG_USERINTERFACELIB_DLLMAPPING
void ComponentBase::setVisible(const bool &value)
{
    _sfVisible.setValue(value);
}

OSG_USERINTERFACELIB_DLLMAPPING
bool &ComponentBase::getEnabled(void)
{
    return _sfEnabled.getValue();
}

OSG_USERINTERFACELIB_DLLMAPPING
const bool &ComponentBase::getEnabled(void) const
{
    return _sfEnabled.getValue();
}

OSG_USERINTERFACELIB_DLLMAPPING
void ComponentBase::setEnabled(const bool &value)
{
    _sfEnabled.setValue(value);
}

OSG_USERINTERFACELIB_DLLMAPPING
bool &ComponentBase::getFocused(void)
{
    return _sfFocused.getValue();
}

OSG_USERINTERFACELIB_DLLMAPPING
const bool &ComponentBase::getFocused(void) const
{
    return _sfFocused.getValue();
}

OSG_USERINTERFACELIB_DLLMAPPING
void ComponentBase::setFocused(const bool &value)
{
    _sfFocused.setValue(value);
}

OSG_USERINTERFACELIB_DLLMAPPING
LayoutConstraintsPtr &ComponentBase::getConstraints(void)
{
    return _sfConstraints.getValue();
}

OSG_USERINTERFACELIB_DLLMAPPING
const LayoutConstraintsPtr &ComponentBase::getConstraints(void) const
{
    return _sfConstraints.getValue();
}

OSG_USERINTERFACELIB_DLLMAPPING
void ComponentBase::setConstraints(const LayoutConstraintsPtr &value)
{
    _sfConstraints.setValue(value);
}

OSG_USERINTERFACELIB_DLLMAPPING
BorderPtr &ComponentBase::getBorder(void)
{
    return _sfBorder.getValue();
}

OSG_USERINTERFACELIB_DLLMAPPING
const BorderPtr &ComponentBase::getBorder(void) const
{
    return _sfBorder.getValue();
}

OSG_USERINTERFACELIB_DLLMAPPING
void ComponentBase::setBorder(const BorderPtr &value)
{
    _sfBorder.setValue(value);
}

OSG_USERINTERFACELIB_DLLMAPPING
UIBackgroundPtr &ComponentBase::getBackground(void)
{
    return _sfBackground.getValue();
}

OSG_USERINTERFACELIB_DLLMAPPING
const UIBackgroundPtr &ComponentBase::getBackground(void) const
{
    return _sfBackground.getValue();
}

OSG_USERINTERFACELIB_DLLMAPPING
void ComponentBase::setBackground(const UIBackgroundPtr &value)
{
    _sfBackground.setValue(value);
}

OSG_USERINTERFACELIB_DLLMAPPING
BorderPtr &ComponentBase::getDisabledBorder(void)
{
    return _sfDisabledBorder.getValue();
}

OSG_USERINTERFACELIB_DLLMAPPING
const BorderPtr &ComponentBase::getDisabledBorder(void) const
{
    return _sfDisabledBorder.getValue();
}

OSG_USERINTERFACELIB_DLLMAPPING
void ComponentBase::setDisabledBorder(const BorderPtr &value)
{
    _sfDisabledBorder.setValue(value);
}

OSG_USERINTERFACELIB_DLLMAPPING
UIBackgroundPtr &ComponentBase::getDisabledBackground(void)
{
    return _sfDisabledBackground.getValue();
}

OSG_USERINTERFACELIB_DLLMAPPING
const UIBackgroundPtr &ComponentBase::getDisabledBackground(void) const
{
    return _sfDisabledBackground.getValue();
}

OSG_USERINTERFACELIB_DLLMAPPING
void ComponentBase::setDisabledBackground(const UIBackgroundPtr &value)
{
    _sfDisabledBackground.setValue(value);
}

OSG_USERINTERFACELIB_DLLMAPPING
bool &ComponentBase::getFocusable(void)
{
    return _sfFocusable.getValue();
}

OSG_USERINTERFACELIB_DLLMAPPING
const bool &ComponentBase::getFocusable(void) const
{
    return _sfFocusable.getValue();
}

OSG_USERINTERFACELIB_DLLMAPPING
void ComponentBase::setFocusable(const bool &value)
{
    _sfFocusable.setValue(value);
}

OSG_USERINTERFACELIB_DLLMAPPING
BorderPtr &ComponentBase::getFocusedBorder(void)
{
    return _sfFocusedBorder.getValue();
}

OSG_USERINTERFACELIB_DLLMAPPING
const BorderPtr &ComponentBase::getFocusedBorder(void) const
{
    return _sfFocusedBorder.getValue();
}

OSG_USERINTERFACELIB_DLLMAPPING
void ComponentBase::setFocusedBorder(const BorderPtr &value)
{
    _sfFocusedBorder.setValue(value);
}

OSG_USERINTERFACELIB_DLLMAPPING
UIBackgroundPtr &ComponentBase::getFocusedBackground(void)
{
    return _sfFocusedBackground.getValue();
}

OSG_USERINTERFACELIB_DLLMAPPING
const UIBackgroundPtr &ComponentBase::getFocusedBackground(void) const
{
    return _sfFocusedBackground.getValue();
}

OSG_USERINTERFACELIB_DLLMAPPING
void ComponentBase::setFocusedBackground(const UIBackgroundPtr &value)
{
    _sfFocusedBackground.setValue(value);
}

OSG_USERINTERFACELIB_DLLMAPPING
BorderPtr &ComponentBase::getRolloverBorder(void)
{
    return _sfRolloverBorder.getValue();
}

OSG_USERINTERFACELIB_DLLMAPPING
const BorderPtr &ComponentBase::getRolloverBorder(void) const
{
    return _sfRolloverBorder.getValue();
}

OSG_USERINTERFACELIB_DLLMAPPING
void ComponentBase::setRolloverBorder(const BorderPtr &value)
{
    _sfRolloverBorder.setValue(value);
}

OSG_USERINTERFACELIB_DLLMAPPING
UIBackgroundPtr &ComponentBase::getRolloverBackground(void)
{
    return _sfRolloverBackground.getValue();
}

OSG_USERINTERFACELIB_DLLMAPPING
const UIBackgroundPtr &ComponentBase::getRolloverBackground(void) const
{
    return _sfRolloverBackground.getValue();
}

OSG_USERINTERFACELIB_DLLMAPPING
void ComponentBase::setRolloverBackground(const UIBackgroundPtr &value)
{
    _sfRolloverBackground.setValue(value);
}

OSG_USERINTERFACELIB_DLLMAPPING
std::string &ComponentBase::getToolTipText(void)
{
    return _sfToolTipText.getValue();
}

OSG_USERINTERFACELIB_DLLMAPPING
const std::string &ComponentBase::getToolTipText(void) const
{
    return _sfToolTipText.getValue();
}

OSG_USERINTERFACELIB_DLLMAPPING
void ComponentBase::setToolTipText(const std::string &value)
{
    _sfToolTipText.setValue(value);
}

OSG_USERINTERFACELIB_DLLMAPPING
Real32 &ComponentBase::getOpacity(void)
{
    return _sfOpacity.getValue();
}

OSG_USERINTERFACELIB_DLLMAPPING
const Real32 &ComponentBase::getOpacity(void) const
{
    return _sfOpacity.getValue();
}

OSG_USERINTERFACELIB_DLLMAPPING
void ComponentBase::setOpacity(const Real32 &value)
{
    _sfOpacity.setValue(value);
}

OSG_USERINTERFACELIB_DLLMAPPING
ContainerPtr &ComponentBase::getParentContainer(void)
{
    return _sfParentContainer.getValue();
}

OSG_USERINTERFACELIB_DLLMAPPING
const ContainerPtr &ComponentBase::getParentContainer(void) const
{
    return _sfParentContainer.getValue();
}

OSG_USERINTERFACELIB_DLLMAPPING
void ComponentBase::setParentContainer(const ContainerPtr &value)
{
    _sfParentContainer.setValue(value);
}

OSG_USERINTERFACELIB_DLLMAPPING
InternalWindowPtr &ComponentBase::getParentWindow(void)
{
    return _sfParentWindow.getValue();
}

OSG_USERINTERFACELIB_DLLMAPPING
const InternalWindowPtr &ComponentBase::getParentWindow(void) const
{
    return _sfParentWindow.getValue();
}

OSG_USERINTERFACELIB_DLLMAPPING
void ComponentBase::setParentWindow(const InternalWindowPtr &value)
{
    _sfParentWindow.setValue(value);
}

OSG_USERINTERFACELIB_DLLMAPPING
bool &ComponentBase::getClipping(void)
{
    return _sfClipping.getValue();
}

OSG_USERINTERFACELIB_DLLMAPPING
const bool &ComponentBase::getClipping(void) const
{
    return _sfClipping.getValue();
}

OSG_USERINTERFACELIB_DLLMAPPING
void ComponentBase::setClipping(const bool &value)
{
    _sfClipping.setValue(value);
}

OSG_USERINTERFACELIB_DLLMAPPING
PopupMenuPtr &ComponentBase::getPopupMenu(void)
{
    return _sfPopupMenu.getValue();
}

OSG_USERINTERFACELIB_DLLMAPPING
const PopupMenuPtr &ComponentBase::getPopupMenu(void) const
{
    return _sfPopupMenu.getValue();
}

OSG_USERINTERFACELIB_DLLMAPPING
void ComponentBase::setPopupMenu(const PopupMenuPtr &value)
{
    _sfPopupMenu.setValue(value);
}




OSG_END_NAMESPACE

#include <OpenSG/OSGSFieldTypeDef.inl>
#include <OpenSG/OSGMFieldTypeDef.inl>

OSG_BEGIN_NAMESPACE

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldDataTraits<ComponentPtr>::_type("ComponentPtr", "AttachmentContainerPtr");
#endif

OSG_DLLEXPORT_SFIELD_DEF1(ComponentPtr, OSG_USERINTERFACELIB_DLLTMPLMAPPING);
OSG_DLLEXPORT_MFIELD_DEF1(ComponentPtr, OSG_USERINTERFACELIB_DLLTMPLMAPPING);


/*------------------------------------------------------------------------*/
/*                              cvs id's                                  */

#ifdef OSG_SGI_CC
#pragma set woff 1174
#endif

#ifdef OSG_LINUX_ICC
#pragma warning( disable : 177 )
#endif

namespace
{
    static Char8 cvsid_cpp       [] = "@(#)$Id: FCBaseTemplate_cpp.h,v 1.47 2006/03/17 17:03:19 pdaehne Exp $";
    static Char8 cvsid_hpp       [] = OSGCOMPONENTBASE_HEADER_CVSID;
    static Char8 cvsid_inl       [] = OSGCOMPONENTBASE_INLINE_CVSID;

    static Char8 cvsid_fields_hpp[] = OSGCOMPONENTFIELDS_HEADER_CVSID;
}

OSG_END_NAMESPACE

