/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2002 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact: dirk@opensg.org, gerrit.voss@vossg.org, jbehr@zgdv.de          *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class Component
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#ifndef _OSGCOMPONENTBASE_H_
#define _OSGCOMPONENTBASE_H_
#ifdef __sgi
#pragma once
#endif


#include "OSGUserInterfaceConfig.h"

#include <OpenSG/OSGBaseTypes.h>
#include <OpenSG/OSGRefPtr.h>
#include <OpenSG/OSGCoredNodePtr.h>

#include <OpenSG/OSGAttachmentContainer.h> // Parent

#include <OpenSG/OSGVec2sFields.h> // MinSize type
#include <OpenSG/OSGVec2sFields.h> // MaxSize type
#include <OpenSG/OSGVec2sFields.h> // PreferredSize type
#include <OpenSG/OSGVec2sFields.h> // Size type
#include <OpenSG/OSGBoolFields.h> // Visible type
#include <OpenSG/OSGBoolFields.h> // Enabled type
#include <OpenSG/OSGBoolFields.h> // Focused type
#include "Layout/OSGLayoutConstraints.h" // Constraints type
#include "Border/OSGBorder.h" // Border type
#include "Background/OSGUIBackground.h" // Background type
#include <OpenSG/OSGColor4fFields.h> // ForegroundColor type
#include "Border/OSGBorder.h" // DisabledBorder type
#include "Background/OSGUIBackground.h" // DisabledBackground type
#include <OpenSG/OSGColor4fFields.h> // DisabledForegroundColor type
#include "Border/OSGBorder.h" // FocusedBorder type
#include "Background/OSGUIBackground.h" // FocusedBackground type
#include <OpenSG/OSGColor4fFields.h> // FocusedForegroundColor type
#include <OpenSG/OSGMaterialFields.h> // ForegroundMaterial type
#include <OpenSG/OSGReal32Fields.h> // Opacity type

#include "OSGComponentFields.h"

OSG_BEGIN_NAMESPACE

class Component;
class BinaryDataHandler;

//! \brief Component Base Class.

class OSG_USER_INTERFACE_CLASS_API ComponentBase : public AttachmentContainer
{
  private:

    typedef AttachmentContainer    Inherited;

    /*==========================  PUBLIC  =================================*/
  public:

    typedef ComponentPtr  Ptr;

    enum
    {
        PositionFieldId                = Inherited::NextFieldId,
        MinSizeFieldId                 = PositionFieldId                + 1,
        MaxSizeFieldId                 = MinSizeFieldId                 + 1,
        PreferredSizeFieldId           = MaxSizeFieldId                 + 1,
        SizeFieldId                    = PreferredSizeFieldId           + 1,
        VisibleFieldId                 = SizeFieldId                    + 1,
        EnabledFieldId                 = VisibleFieldId                 + 1,
        FocusedFieldId                 = EnabledFieldId                 + 1,
        ConstraintsFieldId             = FocusedFieldId                 + 1,
        BorderFieldId                  = ConstraintsFieldId             + 1,
        BackgroundFieldId              = BorderFieldId                  + 1,
        ForegroundColorFieldId         = BackgroundFieldId              + 1,
        DisabledBorderFieldId          = ForegroundColorFieldId         + 1,
        DisabledBackgroundFieldId      = DisabledBorderFieldId          + 1,
        DisabledForegroundColorFieldId = DisabledBackgroundFieldId      + 1,
        FocusedBorderFieldId           = DisabledForegroundColorFieldId + 1,
        FocusedBackgroundFieldId       = FocusedBorderFieldId           + 1,
        FocusedForegroundColorFieldId  = FocusedBackgroundFieldId       + 1,
        ForegroundMaterialFieldId      = FocusedForegroundColorFieldId  + 1,
        OpacityFieldId                 = ForegroundMaterialFieldId      + 1,
        NextFieldId                    = OpacityFieldId                 + 1
    };

    static const OSG::BitVector PositionFieldMask;
    static const OSG::BitVector MinSizeFieldMask;
    static const OSG::BitVector MaxSizeFieldMask;
    static const OSG::BitVector PreferredSizeFieldMask;
    static const OSG::BitVector SizeFieldMask;
    static const OSG::BitVector VisibleFieldMask;
    static const OSG::BitVector EnabledFieldMask;
    static const OSG::BitVector FocusedFieldMask;
    static const OSG::BitVector ConstraintsFieldMask;
    static const OSG::BitVector BorderFieldMask;
    static const OSG::BitVector BackgroundFieldMask;
    static const OSG::BitVector ForegroundColorFieldMask;
    static const OSG::BitVector DisabledBorderFieldMask;
    static const OSG::BitVector DisabledBackgroundFieldMask;
    static const OSG::BitVector DisabledForegroundColorFieldMask;
    static const OSG::BitVector FocusedBorderFieldMask;
    static const OSG::BitVector FocusedBackgroundFieldMask;
    static const OSG::BitVector FocusedForegroundColorFieldMask;
    static const OSG::BitVector ForegroundMaterialFieldMask;
    static const OSG::BitVector OpacityFieldMask;


    static const OSG::BitVector MTInfluenceMask;

    /*---------------------------------------------------------------------*/
    /*! \name                    Class Get                                 */
    /*! \{                                                                 */

    static        FieldContainerType &getClassType    (void); 
    static        UInt32              getClassTypeId  (void); 

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                FieldContainer Get                            */
    /*! \{                                                                 */

    virtual       FieldContainerType &getType  (void); 
    virtual const FieldContainerType &getType  (void) const; 

    virtual       UInt32              getContainerSize(void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Get                                 */
    /*! \{                                                                 */

           SFVec2s             *getSFMinSize        (void);
           SFVec2s             *getSFMaxSize        (void);
           SFVec2s             *getSFPreferredSize  (void);
           SFVec2s             *getSFSize           (void);
           SFBool              *getSFVisible        (void);
           SFBool              *getSFEnabled        (void);
           SFBool              *getSFFocused        (void);
           SFLayoutConstraintsPtr *getSFConstraints    (void);
           SFBorderPtr         *getSFBorder         (void);
           SFUIBackgroundPtr   *getSFBackground     (void);
           SFColor4f           *getSFForegroundColor(void);
           SFBorderPtr         *getSFDisabledBorder (void);
           SFUIBackgroundPtr   *getSFDisabledBackground(void);
           SFColor4f           *getSFDisabledForegroundColor(void);
           SFBorderPtr         *getSFFocusedBorder  (void);
           SFUIBackgroundPtr   *getSFFocusedBackground(void);
           SFColor4f           *getSFFocusedForegroundColor(void);
           SFMaterialPtr       *getSFForegroundMaterial(void);
           SFReal32            *getSFOpacity        (void);

           Vec2s               &getMinSize        (void);
     const Vec2s               &getMinSize        (void) const;
           Vec2s               &getMaxSize        (void);
     const Vec2s               &getMaxSize        (void) const;
           Vec2s               &getPreferredSize  (void);
     const Vec2s               &getPreferredSize  (void) const;
           Vec2s               &getSize           (void);
     const Vec2s               &getSize           (void) const;
           bool                &getVisible        (void);
     const bool                &getVisible        (void) const;
           bool                &getEnabled        (void);
     const bool                &getEnabled        (void) const;
           bool                &getFocused        (void);
     const bool                &getFocused        (void) const;
           LayoutConstraintsPtr &getConstraints    (void);
     const LayoutConstraintsPtr &getConstraints    (void) const;
           BorderPtr           &getBorder         (void);
     const BorderPtr           &getBorder         (void) const;
           UIBackgroundPtr     &getBackground     (void);
     const UIBackgroundPtr     &getBackground     (void) const;
           Color4f             &getForegroundColor(void);
     const Color4f             &getForegroundColor(void) const;
           BorderPtr           &getDisabledBorder (void);
     const BorderPtr           &getDisabledBorder (void) const;
           UIBackgroundPtr     &getDisabledBackground(void);
     const UIBackgroundPtr     &getDisabledBackground(void) const;
           Color4f             &getDisabledForegroundColor(void);
     const Color4f             &getDisabledForegroundColor(void) const;
           BorderPtr           &getFocusedBorder  (void);
     const BorderPtr           &getFocusedBorder  (void) const;
           UIBackgroundPtr     &getFocusedBackground(void);
     const UIBackgroundPtr     &getFocusedBackground(void) const;
           Color4f             &getFocusedForegroundColor(void);
     const Color4f             &getFocusedForegroundColor(void) const;
           MaterialPtr         &getForegroundMaterial(void);
     const MaterialPtr         &getForegroundMaterial(void) const;
           Real32              &getOpacity        (void);
     const Real32              &getOpacity        (void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Set                                 */
    /*! \{                                                                 */

     void setMinSize        ( const Vec2s &value );
     void setMaxSize        ( const Vec2s &value );
     void setPreferredSize  ( const Vec2s &value );
     void setSize           ( const Vec2s &value );
     void setVisible        ( const bool &value );
     void setEnabled        ( const bool &value );
     void setFocused        ( const bool &value );
     void setConstraints    ( const LayoutConstraintsPtr &value );
     void setBorder         ( const BorderPtr &value );
     void setBackground     ( const UIBackgroundPtr &value );
     void setForegroundColor( const Color4f &value );
     void setDisabledBorder ( const BorderPtr &value );
     void setDisabledBackground( const UIBackgroundPtr &value );
     void setDisabledForegroundColor( const Color4f &value );
     void setFocusedBorder  ( const BorderPtr &value );
     void setFocusedBackground( const UIBackgroundPtr &value );
     void setFocusedForegroundColor( const Color4f &value );
     void setForegroundMaterial( const MaterialPtr &value );
     void setOpacity        ( const Real32 &value );

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Binary Access                              */
    /*! \{                                                                 */

    virtual UInt32 getBinSize (const BitVector         &whichField);
    virtual void   copyToBin  (      BinaryDataHandler &pMem,
                               const BitVector         &whichField);
    virtual void   copyFromBin(      BinaryDataHandler &pMem,
                               const BitVector         &whichField);


    /*! \}                                                                 */
    /*=========================  PROTECTED  ===============================*/
  protected:

    /*---------------------------------------------------------------------*/
    /*! \name                      Fields                                  */
    /*! \{                                                                 */

    SFPnt2s             _sfPosition;
    SFVec2s             _sfMinSize;
    SFVec2s             _sfMaxSize;
    SFVec2s             _sfPreferredSize;
    SFVec2s             _sfSize;
    SFBool              _sfVisible;
    SFBool              _sfEnabled;
    SFBool              _sfFocused;
    SFLayoutConstraintsPtr   _sfConstraints;
    SFBorderPtr         _sfBorder;
    SFUIBackgroundPtr   _sfBackground;
    SFColor4f           _sfForegroundColor;
    SFBorderPtr         _sfDisabledBorder;
    SFUIBackgroundPtr   _sfDisabledBackground;
    SFColor4f           _sfDisabledForegroundColor;
    SFBorderPtr         _sfFocusedBorder;
    SFUIBackgroundPtr   _sfFocusedBackground;
    SFColor4f           _sfFocusedForegroundColor;
    SFMaterialPtr       _sfForegroundMaterial;
    SFReal32            _sfOpacity;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Constructors                               */
    /*! \{                                                                 */

    ComponentBase(void);
    ComponentBase(const ComponentBase &source);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Destructors                                */
    /*! \{                                                                 */

    virtual ~ComponentBase(void); 

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Get                                 */
    /*! \{                                                                 */

           SFPnt2s             *getSFPosition       (void);

           Pnt2s               &getPosition       (void);
     const Pnt2s               &getPosition       (void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Set                                 */
    /*! \{                                                                 */

     void setPosition       (const Pnt2s &value);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

#if !defined(OSG_FIXED_MFIELDSYNC)
    void executeSyncImpl(      ComponentBase *pOther,
                         const BitVector         &whichField);

    virtual void   executeSync(      FieldContainer    &other,
                               const BitVector         &whichField);
#else
    void executeSyncImpl(      ComponentBase *pOther,
                         const BitVector         &whichField,
                         const SyncInfo          &sInfo     );

    virtual void   executeSync(      FieldContainer    &other,
                               const BitVector         &whichField,
                               const SyncInfo          &sInfo);

    virtual void execBeginEdit     (const BitVector &whichField,
                                          UInt32     uiAspect,
                                          UInt32     uiContainerSize);

            void execBeginEditImpl (const BitVector &whichField,
                                          UInt32     uiAspect,
                                          UInt32     uiContainerSize);

    virtual void onDestroyAspect(UInt32 uiId, UInt32 uiAspect);
#endif

    /*! \}                                                                 */
    /*==========================  PRIVATE  ================================*/
  private:

    friend class FieldContainer;

    static FieldDescription   *_desc[];
    static FieldContainerType  _type;


    // prohibit default functions (move to 'public' if you need one)
    void operator =(const ComponentBase &source);
};

//---------------------------------------------------------------------------
//   Exported Types
//---------------------------------------------------------------------------


typedef ComponentBase *ComponentBaseP;

typedef osgIF<ComponentBase::isNodeCore,
              CoredNodePtr<Component>,
              FieldContainer::attempt_to_create_CoredNodePtr_on_non_NodeCore_FC
              >::_IRet ComponentNodePtr;

typedef RefPtr<ComponentPtr> ComponentRefPtr;

OSG_END_NAMESPACE

#define OSGCOMPONENTBASE_HEADER_CVSID "@(#)$Id: FCBaseTemplate_h.h,v 1.40 2005/07/20 00:10:14 vossg Exp $"

#endif /* _OSGCOMPONENTBASE_H_ */
