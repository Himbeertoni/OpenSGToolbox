/*---------------------------------------------------------------------------*\
 *                     OpenSG ToolBox UserInterface                          *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                         www.vrac.iastate.edu                              *
 *                                                                           *
 *   Authors: David Kabala, Alden Peterson, Lee Zaniewski, Jonathan Flory    *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class Component
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#ifndef _OSGCOMPONENTBASE_H_
#define _OSGCOMPONENTBASE_H_
#ifdef __sgi
#pragma once
#endif


#include <OpenSG/OSGConfig.h>
#include "OSGUserInterfaceDef.h"

#include <OpenSG/OSGBaseTypes.h>
#include <OpenSG/OSGRefPtr.h>
#include <OpenSG/OSGCoredNodePtr.h>

#include <OpenSG/OSGAttachmentContainer.h> // Parent

#include <OpenSG/OSGVec2sFields.h> // MinSize type
#include <OpenSG/OSGVec2sFields.h> // MaxSize type
#include <OpenSG/OSGVec2sFields.h> // PreferredSize type
#include <OpenSG/OSGVec2sFields.h> // Size type
#include <OpenSG/OSGBoolFields.h> // Visible type
#include <OpenSG/OSGBoolFields.h> // Enabled type
#include <OpenSG/OSGBoolFields.h> // Focused type
#include "Layout/OSGLayoutConstraints.h" // Constraints type
#include "Border/OSGBorder.h" // Border type
#include "Background/OSGUIBackground.h" // Background type
#include "Border/OSGBorder.h" // DisabledBorder type
#include "Background/OSGUIBackground.h" // DisabledBackground type
#include <OpenSG/OSGBoolFields.h> // Focusable type
#include "Border/OSGBorder.h" // FocusedBorder type
#include "Background/OSGUIBackground.h" // FocusedBackground type
#include "Border/OSGBorder.h" // RolloverBorder type
#include "Background/OSGUIBackground.h" // RolloverBackground type
#include <OpenSG/OSGStringFields.h> // ToolTipText type
#include <OpenSG/OSGReal32Fields.h> // Opacity type
#include "Component/Container/OSGContainerFields.h" // ParentContainer type
#include "Component/Container/Window/OSGInternalWindowFields.h" // ParentWindow type
#include <OpenSG/OSGBoolFields.h> // Clipping type
#include "Component/Menu/OSGPopupMenuFields.h" // PopupMenu type

#include "OSGComponentFields.h"

OSG_BEGIN_NAMESPACE

class Component;
class BinaryDataHandler;

//! \brief Component Base Class.

class OSG_USERINTERFACELIB_DLLMAPPING ComponentBase : public AttachmentContainer
{
  private:

    typedef AttachmentContainer    Inherited;

    /*==========================  PUBLIC  =================================*/
  public:

    typedef ComponentPtr  Ptr;

    enum
    {
        PositionFieldId           = Inherited::NextFieldId,
        ClipTopLeftFieldId        = PositionFieldId           + 1,
        ClipBottomRightFieldId    = ClipTopLeftFieldId        + 1,
        MinSizeFieldId            = ClipBottomRightFieldId    + 1,
        MaxSizeFieldId            = MinSizeFieldId            + 1,
        PreferredSizeFieldId      = MaxSizeFieldId            + 1,
        SizeFieldId               = PreferredSizeFieldId      + 1,
        VisibleFieldId            = SizeFieldId               + 1,
        EnabledFieldId            = VisibleFieldId            + 1,
        FocusedFieldId            = EnabledFieldId            + 1,
        ConstraintsFieldId        = FocusedFieldId            + 1,
        BorderFieldId             = ConstraintsFieldId        + 1,
        BackgroundFieldId         = BorderFieldId             + 1,
        DisabledBorderFieldId     = BackgroundFieldId         + 1,
        DisabledBackgroundFieldId = DisabledBorderFieldId     + 1,
        FocusableFieldId          = DisabledBackgroundFieldId + 1,
        FocusedBorderFieldId      = FocusableFieldId          + 1,
        FocusedBackgroundFieldId  = FocusedBorderFieldId      + 1,
        RolloverBorderFieldId     = FocusedBackgroundFieldId  + 1,
        RolloverBackgroundFieldId = RolloverBorderFieldId     + 1,
        ToolTipTextFieldId        = RolloverBackgroundFieldId + 1,
        OpacityFieldId            = ToolTipTextFieldId        + 1,
        ParentContainerFieldId    = OpacityFieldId            + 1,
        ParentWindowFieldId       = ParentContainerFieldId    + 1,
        ClippingFieldId           = ParentWindowFieldId       + 1,
        PopupMenuFieldId          = ClippingFieldId           + 1,
        NextFieldId               = PopupMenuFieldId          + 1
    };

    static const OSG::BitVector PositionFieldMask;
    static const OSG::BitVector ClipTopLeftFieldMask;
    static const OSG::BitVector ClipBottomRightFieldMask;
    static const OSG::BitVector MinSizeFieldMask;
    static const OSG::BitVector MaxSizeFieldMask;
    static const OSG::BitVector PreferredSizeFieldMask;
    static const OSG::BitVector SizeFieldMask;
    static const OSG::BitVector VisibleFieldMask;
    static const OSG::BitVector EnabledFieldMask;
    static const OSG::BitVector FocusedFieldMask;
    static const OSG::BitVector ConstraintsFieldMask;
    static const OSG::BitVector BorderFieldMask;
    static const OSG::BitVector BackgroundFieldMask;
    static const OSG::BitVector DisabledBorderFieldMask;
    static const OSG::BitVector DisabledBackgroundFieldMask;
    static const OSG::BitVector FocusableFieldMask;
    static const OSG::BitVector FocusedBorderFieldMask;
    static const OSG::BitVector FocusedBackgroundFieldMask;
    static const OSG::BitVector RolloverBorderFieldMask;
    static const OSG::BitVector RolloverBackgroundFieldMask;
    static const OSG::BitVector ToolTipTextFieldMask;
    static const OSG::BitVector OpacityFieldMask;
    static const OSG::BitVector ParentContainerFieldMask;
    static const OSG::BitVector ParentWindowFieldMask;
    static const OSG::BitVector ClippingFieldMask;
    static const OSG::BitVector PopupMenuFieldMask;


    static const OSG::BitVector MTInfluenceMask;

    /*---------------------------------------------------------------------*/
    /*! \name                    Class Get                                 */
    /*! \{                                                                 */

    static        FieldContainerType &getClassType    (void); 
    static        UInt32              getClassTypeId  (void); 

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                FieldContainer Get                            */
    /*! \{                                                                 */

    virtual       FieldContainerType &getType  (void); 
    virtual const FieldContainerType &getType  (void) const; 

    virtual       UInt32              getContainerSize(void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Get                                 */
    /*! \{                                                                 */

    virtual       SFPnt2s             *getSFPosition       (void);
    virtual       SFVec2s             *getSFMinSize        (void);
    virtual       SFVec2s             *getSFMaxSize        (void);
    virtual       SFVec2s             *getSFPreferredSize  (void);
    virtual       SFVec2s             *getSFSize           (void);
    virtual       SFBool              *getSFVisible        (void);
    virtual       SFBool              *getSFEnabled        (void);
    virtual       SFBool              *getSFFocused        (void);
    virtual       SFLayoutConstraintsPtr *getSFConstraints    (void);
    virtual       SFBorderPtr         *getSFBorder         (void);
    virtual       SFUIBackgroundPtr   *getSFBackground     (void);
    virtual       SFBorderPtr         *getSFDisabledBorder (void);
    virtual       SFUIBackgroundPtr   *getSFDisabledBackground(void);
    virtual       SFBool              *getSFFocusable      (void);
    virtual       SFBorderPtr         *getSFFocusedBorder  (void);
    virtual       SFUIBackgroundPtr   *getSFFocusedBackground(void);
    virtual       SFBorderPtr         *getSFRolloverBorder (void);
    virtual       SFUIBackgroundPtr   *getSFRolloverBackground(void);
    virtual       SFString            *getSFToolTipText    (void);
    virtual       SFReal32            *getSFOpacity        (void);
    virtual       SFContainerPtr      *getSFParentContainer(void);
    virtual       SFInternalWindowPtr *getSFParentWindow   (void);
    virtual       SFBool              *getSFClipping       (void);
    virtual       SFPopupMenuPtr      *getSFPopupMenu      (void);

    virtual       Pnt2s               &getPosition       (void);
    virtual const Pnt2s               &getPosition       (void) const;
    virtual       Vec2s               &getMinSize        (void);
    virtual const Vec2s               &getMinSize        (void) const;
    virtual       Vec2s               &getMaxSize        (void);
    virtual const Vec2s               &getMaxSize        (void) const;
    virtual       Vec2s               &getPreferredSize  (void);
    virtual const Vec2s               &getPreferredSize  (void) const;
    virtual       Vec2s               &getSize           (void);
    virtual const Vec2s               &getSize           (void) const;
    virtual       bool                &getVisible        (void);
    virtual const bool                &getVisible        (void) const;
    virtual       bool                &getEnabled        (void);
    virtual const bool                &getEnabled        (void) const;
    virtual       bool                &getFocused        (void);
    virtual const bool                &getFocused        (void) const;
    virtual       LayoutConstraintsPtr &getConstraints    (void);
    virtual const LayoutConstraintsPtr &getConstraints    (void) const;
    virtual       BorderPtr           &getBorder         (void);
    virtual const BorderPtr           &getBorder         (void) const;
    virtual       UIBackgroundPtr     &getBackground     (void);
    virtual const UIBackgroundPtr     &getBackground     (void) const;
    virtual       BorderPtr           &getDisabledBorder (void);
    virtual const BorderPtr           &getDisabledBorder (void) const;
    virtual       UIBackgroundPtr     &getDisabledBackground(void);
    virtual const UIBackgroundPtr     &getDisabledBackground(void) const;
    virtual       bool                &getFocusable      (void);
    virtual const bool                &getFocusable      (void) const;
    virtual       BorderPtr           &getFocusedBorder  (void);
    virtual const BorderPtr           &getFocusedBorder  (void) const;
    virtual       UIBackgroundPtr     &getFocusedBackground(void);
    virtual const UIBackgroundPtr     &getFocusedBackground(void) const;
    virtual       BorderPtr           &getRolloverBorder (void);
    virtual const BorderPtr           &getRolloverBorder (void) const;
    virtual       UIBackgroundPtr     &getRolloverBackground(void);
    virtual const UIBackgroundPtr     &getRolloverBackground(void) const;
    virtual       std::string         &getToolTipText    (void);
    virtual const std::string         &getToolTipText    (void) const;
    virtual       Real32              &getOpacity        (void);
    virtual const Real32              &getOpacity        (void) const;
    virtual       ContainerPtr        &getParentContainer(void);
    virtual const ContainerPtr        &getParentContainer(void) const;
    virtual       InternalWindowPtr   &getParentWindow   (void);
    virtual const InternalWindowPtr   &getParentWindow   (void) const;
    virtual       bool                &getClipping       (void);
    virtual const bool                &getClipping       (void) const;
    virtual       PopupMenuPtr        &getPopupMenu      (void);
    virtual const PopupMenuPtr        &getPopupMenu      (void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Set                                 */
    /*! \{                                                                 */

    virtual void setPosition       ( const Pnt2s &value );
    virtual void setMinSize        ( const Vec2s &value );
    virtual void setMaxSize        ( const Vec2s &value );
    virtual void setPreferredSize  ( const Vec2s &value );
    virtual void setSize           ( const Vec2s &value );
    virtual void setVisible        ( const bool &value );
    virtual void setEnabled        ( const bool &value );
    virtual void setFocused        ( const bool &value );
    virtual void setConstraints    ( const LayoutConstraintsPtr &value );
    virtual void setBorder         ( const BorderPtr &value );
    virtual void setBackground     ( const UIBackgroundPtr &value );
    virtual void setDisabledBorder ( const BorderPtr &value );
    virtual void setDisabledBackground( const UIBackgroundPtr &value );
    virtual void setFocusable      ( const bool &value );
    virtual void setFocusedBorder  ( const BorderPtr &value );
    virtual void setFocusedBackground( const UIBackgroundPtr &value );
    virtual void setRolloverBorder ( const BorderPtr &value );
    virtual void setRolloverBackground( const UIBackgroundPtr &value );
    virtual void setToolTipText    ( const std::string &value );
    virtual void setOpacity        ( const Real32 &value );
    virtual void setParentContainer( const ContainerPtr &value );
    virtual void setParentWindow   ( const InternalWindowPtr &value );
    virtual void setClipping       ( const bool &value );
    virtual void setPopupMenu      ( const PopupMenuPtr &value );

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Binary Access                              */
    /*! \{                                                                 */

    virtual UInt32 getBinSize (const BitVector         &whichField);
    virtual void   copyToBin  (      BinaryDataHandler &pMem,
                               const BitVector         &whichField);
    virtual void   copyFromBin(      BinaryDataHandler &pMem,
                               const BitVector         &whichField);


    /*! \}                                                                 */
    /*=========================  PROTECTED  ===============================*/
  protected:

    /*---------------------------------------------------------------------*/
    /*! \name                      Fields                                  */
    /*! \{                                                                 */

    SFPnt2s             _sfPosition;
    SFPnt2s             _sfClipTopLeft;
    SFPnt2s             _sfClipBottomRight;
    SFVec2s             _sfMinSize;
    SFVec2s             _sfMaxSize;
    SFVec2s             _sfPreferredSize;
    SFVec2s             _sfSize;
    SFBool              _sfVisible;
    SFBool              _sfEnabled;
    SFBool              _sfFocused;
    SFLayoutConstraintsPtr   _sfConstraints;
    SFBorderPtr         _sfBorder;
    SFUIBackgroundPtr   _sfBackground;
    SFBorderPtr         _sfDisabledBorder;
    SFUIBackgroundPtr   _sfDisabledBackground;
    SFBool              _sfFocusable;
    SFBorderPtr         _sfFocusedBorder;
    SFUIBackgroundPtr   _sfFocusedBackground;
    SFBorderPtr         _sfRolloverBorder;
    SFUIBackgroundPtr   _sfRolloverBackground;
    SFString            _sfToolTipText;
    SFReal32            _sfOpacity;
    SFContainerPtr      _sfParentContainer;
    SFInternalWindowPtr   _sfParentWindow;
    SFBool              _sfClipping;
    SFPopupMenuPtr      _sfPopupMenu;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Constructors                               */
    /*! \{                                                                 */

    ComponentBase(void);
    ComponentBase(const ComponentBase &source);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Destructors                                */
    /*! \{                                                                 */

    virtual ~ComponentBase(void); 

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Get                                 */
    /*! \{                                                                 */

    virtual       SFPnt2s             *getSFClipTopLeft    (void);
    virtual       SFPnt2s             *getSFClipBottomRight(void);

    virtual       Pnt2s               &getClipTopLeft    (void);
    virtual const Pnt2s               &getClipTopLeft    (void) const;
    virtual       Pnt2s               &getClipBottomRight(void);
    virtual const Pnt2s               &getClipBottomRight(void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Set                                 */
    /*! \{                                                                 */

    virtual void setClipTopLeft    (const Pnt2s &value);
    virtual void setClipBottomRight(const Pnt2s &value);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

#if !defined(OSG_FIXED_MFIELDSYNC)
    void executeSyncImpl(      ComponentBase *pOther,
                         const BitVector         &whichField);

    virtual void   executeSync(      FieldContainer    &other,
                               const BitVector         &whichField);
#else
    void executeSyncImpl(      ComponentBase *pOther,
                         const BitVector         &whichField,
                         const SyncInfo          &sInfo     );

    virtual void   executeSync(      FieldContainer    &other,
                               const BitVector         &whichField,
                               const SyncInfo          &sInfo);

    virtual void execBeginEdit     (const BitVector &whichField,
                                          UInt32     uiAspect,
                                          UInt32     uiContainerSize);

            void execBeginEditImpl (const BitVector &whichField,
                                          UInt32     uiAspect,
                                          UInt32     uiContainerSize);

    virtual void onDestroyAspect(UInt32 uiId, UInt32 uiAspect);
#endif

    /*! \}                                                                 */
    /*==========================  PRIVATE  ================================*/
  private:

    friend class FieldContainer;

    static FieldDescription   *_desc[];
    static FieldContainerType  _type;


    // prohibit default functions (move to 'public' if you need one)
    void operator =(const ComponentBase &source);
};

//---------------------------------------------------------------------------
//   Exported Types
//---------------------------------------------------------------------------


typedef ComponentBase *ComponentBaseP;

typedef osgIF<ComponentBase::isNodeCore,
              CoredNodePtr<Component>,
              FieldContainer::attempt_to_create_CoredNodePtr_on_non_NodeCore_FC
              >::_IRet ComponentNodePtr;

typedef RefPtr<ComponentPtr> ComponentRefPtr;

OSG_END_NAMESPACE

#define OSGCOMPONENTBASE_HEADER_CVSID "@(#)$Id: FCBaseTemplate_h.h,v 1.40 2005/07/20 00:10:14 vossg Exp $"

#endif /* _OSGCOMPONENTBASE_H_ */
