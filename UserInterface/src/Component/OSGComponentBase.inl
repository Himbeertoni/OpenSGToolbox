/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2002 by the OpenSG Forum                 *
 *                                                                           *
 *   contact: dirk@opensg.org, gerrit.voss@vossg.org, jbehr@zgdv.de          *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class Component!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <OpenSG/OSGConfig.h>

OSG_BEGIN_NAMESPACE


//! access the type of the class
inline
OSG::FieldContainerType &ComponentBase::getClassType(void)
{
    return _type; 
} 

//! access the numerical type of the class
inline
OSG::UInt32 ComponentBase::getClassTypeId(void) 
{
    return _type.getId(); 
} 


/*------------------------------ get -----------------------------------*/

//! Get the Component::_sfPosition field.
inline
SFPnt2s *ComponentBase::getSFPosition(void)
{
    return &_sfPosition;
}

//! Get the Component::_sfMinSize field.
inline
SFVec2s *ComponentBase::getSFMinSize(void)
{
    return &_sfMinSize;
}

//! Get the Component::_sfMaxSize field.
inline
SFVec2s *ComponentBase::getSFMaxSize(void)
{
    return &_sfMaxSize;
}

//! Get the Component::_sfPreferredSize field.
inline
SFVec2s *ComponentBase::getSFPreferredSize(void)
{
    return &_sfPreferredSize;
}

//! Get the Component::_sfSize field.
inline
SFVec2s *ComponentBase::getSFSize(void)
{
    return &_sfSize;
}

//! Get the Component::_sfVisible field.
inline
SFBool *ComponentBase::getSFVisible(void)
{
    return &_sfVisible;
}

//! Get the Component::_sfEnabled field.
inline
SFBool *ComponentBase::getSFEnabled(void)
{
    return &_sfEnabled;
}

//! Get the Component::_sfFocused field.
inline
SFBool *ComponentBase::getSFFocused(void)
{
    return &_sfFocused;
}

//! Get the Component::_sfConstraints field.
inline
SFLayoutConstraintsPtr *ComponentBase::getSFConstraints(void)
{
    return &_sfConstraints;
}

//! Get the Component::_sfBorder field.
inline
SFBorderPtr *ComponentBase::getSFBorder(void)
{
    return &_sfBorder;
}

//! Get the Component::_sfBackground field.
inline
SFUIBackgroundPtr *ComponentBase::getSFBackground(void)
{
    return &_sfBackground;
}

//! Get the Component::_sfForegroundColor field.
inline
SFColor4f *ComponentBase::getSFForegroundColor(void)
{
    return &_sfForegroundColor;
}

//! Get the Component::_sfDisabledBorder field.
inline
SFBorderPtr *ComponentBase::getSFDisabledBorder(void)
{
    return &_sfDisabledBorder;
}

//! Get the Component::_sfDisabledBackground field.
inline
SFUIBackgroundPtr *ComponentBase::getSFDisabledBackground(void)
{
    return &_sfDisabledBackground;
}

//! Get the Component::_sfDisabledForegroundColor field.
inline
SFColor4f *ComponentBase::getSFDisabledForegroundColor(void)
{
    return &_sfDisabledForegroundColor;
}

//! Get the Component::_sfFocusedBorder field.
inline
SFBorderPtr *ComponentBase::getSFFocusedBorder(void)
{
    return &_sfFocusedBorder;
}

//! Get the Component::_sfFocusedBackground field.
inline
SFUIBackgroundPtr *ComponentBase::getSFFocusedBackground(void)
{
    return &_sfFocusedBackground;
}

//! Get the Component::_sfFocusedForegroundColor field.
inline
SFColor4f *ComponentBase::getSFFocusedForegroundColor(void)
{
    return &_sfFocusedForegroundColor;
}

//! Get the Component::_sfForegroundMaterial field.
inline
SFMaterialPtr *ComponentBase::getSFForegroundMaterial(void)
{
    return &_sfForegroundMaterial;
}

//! Get the Component::_sfOpacity field.
inline
SFReal32 *ComponentBase::getSFOpacity(void)
{
    return &_sfOpacity;
}

//! Get the Component::_sfParentContainer field.
inline
SFAttachmentContainerPtr *ComponentBase::getSFParentContainer(void)
{
    return &_sfParentContainer;
}


//! Get the value of the Component::_sfPosition field.
inline
Pnt2s &ComponentBase::getPosition(void)
{
    return _sfPosition.getValue();
}

//! Get the value of the Component::_sfPosition field.
inline
const Pnt2s &ComponentBase::getPosition(void) const
{
    return _sfPosition.getValue();
}

//! Set the value of the Component::_sfPosition field.
inline
void ComponentBase::setPosition(const Pnt2s &value)
{
    _sfPosition.setValue(value);
}

//! Get the value of the Component::_sfMinSize field.
inline
Vec2s &ComponentBase::getMinSize(void)
{
    return _sfMinSize.getValue();
}

//! Get the value of the Component::_sfMinSize field.
inline
const Vec2s &ComponentBase::getMinSize(void) const
{
    return _sfMinSize.getValue();
}

//! Set the value of the Component::_sfMinSize field.
inline
void ComponentBase::setMinSize(const Vec2s &value)
{
    _sfMinSize.setValue(value);
}

//! Get the value of the Component::_sfMaxSize field.
inline
Vec2s &ComponentBase::getMaxSize(void)
{
    return _sfMaxSize.getValue();
}

//! Get the value of the Component::_sfMaxSize field.
inline
const Vec2s &ComponentBase::getMaxSize(void) const
{
    return _sfMaxSize.getValue();
}

//! Set the value of the Component::_sfMaxSize field.
inline
void ComponentBase::setMaxSize(const Vec2s &value)
{
    _sfMaxSize.setValue(value);
}

//! Get the value of the Component::_sfPreferredSize field.
inline
Vec2s &ComponentBase::getPreferredSize(void)
{
    return _sfPreferredSize.getValue();
}

//! Get the value of the Component::_sfPreferredSize field.
inline
const Vec2s &ComponentBase::getPreferredSize(void) const
{
    return _sfPreferredSize.getValue();
}

//! Set the value of the Component::_sfPreferredSize field.
inline
void ComponentBase::setPreferredSize(const Vec2s &value)
{
    _sfPreferredSize.setValue(value);
}

//! Get the value of the Component::_sfSize field.
inline
Vec2s &ComponentBase::getSize(void)
{
    return _sfSize.getValue();
}

//! Get the value of the Component::_sfSize field.
inline
const Vec2s &ComponentBase::getSize(void) const
{
    return _sfSize.getValue();
}

//! Set the value of the Component::_sfSize field.
inline
void ComponentBase::setSize(const Vec2s &value)
{
    _sfSize.setValue(value);
}

//! Get the value of the Component::_sfVisible field.
inline
bool &ComponentBase::getVisible(void)
{
    return _sfVisible.getValue();
}

//! Get the value of the Component::_sfVisible field.
inline
const bool &ComponentBase::getVisible(void) const
{
    return _sfVisible.getValue();
}

//! Set the value of the Component::_sfVisible field.
inline
void ComponentBase::setVisible(const bool &value)
{
    _sfVisible.setValue(value);
}

//! Get the value of the Component::_sfEnabled field.
inline
bool &ComponentBase::getEnabled(void)
{
    return _sfEnabled.getValue();
}

//! Get the value of the Component::_sfEnabled field.
inline
const bool &ComponentBase::getEnabled(void) const
{
    return _sfEnabled.getValue();
}

//! Set the value of the Component::_sfEnabled field.
inline
void ComponentBase::setEnabled(const bool &value)
{
    _sfEnabled.setValue(value);
}

//! Get the value of the Component::_sfFocused field.
inline
bool &ComponentBase::getFocused(void)
{
    return _sfFocused.getValue();
}

//! Get the value of the Component::_sfFocused field.
inline
const bool &ComponentBase::getFocused(void) const
{
    return _sfFocused.getValue();
}

//! Set the value of the Component::_sfFocused field.
inline
void ComponentBase::setFocused(const bool &value)
{
    _sfFocused.setValue(value);
}

//! Get the value of the Component::_sfConstraints field.
inline
LayoutConstraintsPtr &ComponentBase::getConstraints(void)
{
    return _sfConstraints.getValue();
}

//! Get the value of the Component::_sfConstraints field.
inline
const LayoutConstraintsPtr &ComponentBase::getConstraints(void) const
{
    return _sfConstraints.getValue();
}

//! Set the value of the Component::_sfConstraints field.
inline
void ComponentBase::setConstraints(const LayoutConstraintsPtr &value)
{
    _sfConstraints.setValue(value);
}

//! Get the value of the Component::_sfBorder field.
inline
BorderPtr &ComponentBase::getBorder(void)
{
    return _sfBorder.getValue();
}

//! Get the value of the Component::_sfBorder field.
inline
const BorderPtr &ComponentBase::getBorder(void) const
{
    return _sfBorder.getValue();
}

//! Set the value of the Component::_sfBorder field.
inline
void ComponentBase::setBorder(const BorderPtr &value)
{
    _sfBorder.setValue(value);
}

//! Get the value of the Component::_sfBackground field.
inline
UIBackgroundPtr &ComponentBase::getBackground(void)
{
    return _sfBackground.getValue();
}

//! Get the value of the Component::_sfBackground field.
inline
const UIBackgroundPtr &ComponentBase::getBackground(void) const
{
    return _sfBackground.getValue();
}

//! Set the value of the Component::_sfBackground field.
inline
void ComponentBase::setBackground(const UIBackgroundPtr &value)
{
    _sfBackground.setValue(value);
}

//! Get the value of the Component::_sfForegroundColor field.
inline
Color4f &ComponentBase::getForegroundColor(void)
{
    return _sfForegroundColor.getValue();
}

//! Get the value of the Component::_sfForegroundColor field.
inline
const Color4f &ComponentBase::getForegroundColor(void) const
{
    return _sfForegroundColor.getValue();
}

//! Set the value of the Component::_sfForegroundColor field.
inline
void ComponentBase::setForegroundColor(const Color4f &value)
{
    _sfForegroundColor.setValue(value);
}

//! Get the value of the Component::_sfDisabledBorder field.
inline
BorderPtr &ComponentBase::getDisabledBorder(void)
{
    return _sfDisabledBorder.getValue();
}

//! Get the value of the Component::_sfDisabledBorder field.
inline
const BorderPtr &ComponentBase::getDisabledBorder(void) const
{
    return _sfDisabledBorder.getValue();
}

//! Set the value of the Component::_sfDisabledBorder field.
inline
void ComponentBase::setDisabledBorder(const BorderPtr &value)
{
    _sfDisabledBorder.setValue(value);
}

//! Get the value of the Component::_sfDisabledBackground field.
inline
UIBackgroundPtr &ComponentBase::getDisabledBackground(void)
{
    return _sfDisabledBackground.getValue();
}

//! Get the value of the Component::_sfDisabledBackground field.
inline
const UIBackgroundPtr &ComponentBase::getDisabledBackground(void) const
{
    return _sfDisabledBackground.getValue();
}

//! Set the value of the Component::_sfDisabledBackground field.
inline
void ComponentBase::setDisabledBackground(const UIBackgroundPtr &value)
{
    _sfDisabledBackground.setValue(value);
}

//! Get the value of the Component::_sfDisabledForegroundColor field.
inline
Color4f &ComponentBase::getDisabledForegroundColor(void)
{
    return _sfDisabledForegroundColor.getValue();
}

//! Get the value of the Component::_sfDisabledForegroundColor field.
inline
const Color4f &ComponentBase::getDisabledForegroundColor(void) const
{
    return _sfDisabledForegroundColor.getValue();
}

//! Set the value of the Component::_sfDisabledForegroundColor field.
inline
void ComponentBase::setDisabledForegroundColor(const Color4f &value)
{
    _sfDisabledForegroundColor.setValue(value);
}

//! Get the value of the Component::_sfFocusedBorder field.
inline
BorderPtr &ComponentBase::getFocusedBorder(void)
{
    return _sfFocusedBorder.getValue();
}

//! Get the value of the Component::_sfFocusedBorder field.
inline
const BorderPtr &ComponentBase::getFocusedBorder(void) const
{
    return _sfFocusedBorder.getValue();
}

//! Set the value of the Component::_sfFocusedBorder field.
inline
void ComponentBase::setFocusedBorder(const BorderPtr &value)
{
    _sfFocusedBorder.setValue(value);
}

//! Get the value of the Component::_sfFocusedBackground field.
inline
UIBackgroundPtr &ComponentBase::getFocusedBackground(void)
{
    return _sfFocusedBackground.getValue();
}

//! Get the value of the Component::_sfFocusedBackground field.
inline
const UIBackgroundPtr &ComponentBase::getFocusedBackground(void) const
{
    return _sfFocusedBackground.getValue();
}

//! Set the value of the Component::_sfFocusedBackground field.
inline
void ComponentBase::setFocusedBackground(const UIBackgroundPtr &value)
{
    _sfFocusedBackground.setValue(value);
}

//! Get the value of the Component::_sfFocusedForegroundColor field.
inline
Color4f &ComponentBase::getFocusedForegroundColor(void)
{
    return _sfFocusedForegroundColor.getValue();
}

//! Get the value of the Component::_sfFocusedForegroundColor field.
inline
const Color4f &ComponentBase::getFocusedForegroundColor(void) const
{
    return _sfFocusedForegroundColor.getValue();
}

//! Set the value of the Component::_sfFocusedForegroundColor field.
inline
void ComponentBase::setFocusedForegroundColor(const Color4f &value)
{
    _sfFocusedForegroundColor.setValue(value);
}

//! Get the value of the Component::_sfForegroundMaterial field.
inline
MaterialPtr &ComponentBase::getForegroundMaterial(void)
{
    return _sfForegroundMaterial.getValue();
}

//! Get the value of the Component::_sfForegroundMaterial field.
inline
const MaterialPtr &ComponentBase::getForegroundMaterial(void) const
{
    return _sfForegroundMaterial.getValue();
}

//! Set the value of the Component::_sfForegroundMaterial field.
inline
void ComponentBase::setForegroundMaterial(const MaterialPtr &value)
{
    _sfForegroundMaterial.setValue(value);
}

//! Get the value of the Component::_sfOpacity field.
inline
Real32 &ComponentBase::getOpacity(void)
{
    return _sfOpacity.getValue();
}

//! Get the value of the Component::_sfOpacity field.
inline
const Real32 &ComponentBase::getOpacity(void) const
{
    return _sfOpacity.getValue();
}

//! Set the value of the Component::_sfOpacity field.
inline
void ComponentBase::setOpacity(const Real32 &value)
{
    _sfOpacity.setValue(value);
}

//! Get the value of the Component::_sfParentContainer field.
inline
AttachmentContainerPtr &ComponentBase::getParentContainer(void)
{
    return _sfParentContainer.getValue();
}

//! Get the value of the Component::_sfParentContainer field.
inline
const AttachmentContainerPtr &ComponentBase::getParentContainer(void) const
{
    return _sfParentContainer.getValue();
}

//! Set the value of the Component::_sfParentContainer field.
inline
void ComponentBase::setParentContainer(const AttachmentContainerPtr &value)
{
    _sfParentContainer.setValue(value);
}


OSG_END_NAMESPACE

#define OSGCOMPONENTBASE_INLINE_CVSID "@(#)$Id: FCBaseTemplate_inl.h,v 1.20 2002/12/04 14:22:22 dirk Exp $"

