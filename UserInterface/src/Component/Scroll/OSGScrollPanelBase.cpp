/*---------------------------------------------------------------------------*\
 *                     OpenSG ToolBox UserInterface                          *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                         www.vrac.iastate.edu                              *
 *                                                                           *
 *   Authors: David Kabala, Alden Peterson, Lee Zaniewski, Jonathan Flory    *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class ScrollPanel!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#define OSG_COMPILESCROLLPANELINST

#include <stdlib.h>
#include <stdio.h>

#include <OpenSG/OSGConfig.h>

#include "OSGScrollPanelBase.h"
#include "OSGScrollPanel.h"

#include <Component/Scroll/OSGScrollPanel.h>   // VerticalScrollBarDisplayPolicy default header
#include <Component/Scroll/OSGScrollPanel.h>   // HorizontalScrollBarDisplayPolicy default header
#include <Component/Scroll/OSGScrollPanel.h>   // VerticalResizePolicy default header
#include <Component/Scroll/OSGScrollPanel.h>   // HorizontalResizePolicy default header

OSG_BEGIN_NAMESPACE

const OSG::BitVector  ScrollPanelBase::ViewFieldMask = 
    (TypeTraits<BitVector>::One << ScrollPanelBase::ViewFieldId);

const OSG::BitVector  ScrollPanelBase::VerticalScrollBarFieldMask = 
    (TypeTraits<BitVector>::One << ScrollPanelBase::VerticalScrollBarFieldId);

const OSG::BitVector  ScrollPanelBase::HorizontalScrollBarFieldMask = 
    (TypeTraits<BitVector>::One << ScrollPanelBase::HorizontalScrollBarFieldId);

const OSG::BitVector  ScrollPanelBase::VerticalScrollBarDisplayPolicyFieldMask = 
    (TypeTraits<BitVector>::One << ScrollPanelBase::VerticalScrollBarDisplayPolicyFieldId);

const OSG::BitVector  ScrollPanelBase::HorizontalScrollBarDisplayPolicyFieldMask = 
    (TypeTraits<BitVector>::One << ScrollPanelBase::HorizontalScrollBarDisplayPolicyFieldId);

const OSG::BitVector  ScrollPanelBase::VerticalResizePolicyFieldMask = 
    (TypeTraits<BitVector>::One << ScrollPanelBase::VerticalResizePolicyFieldId);

const OSG::BitVector  ScrollPanelBase::HorizontalResizePolicyFieldMask = 
    (TypeTraits<BitVector>::One << ScrollPanelBase::HorizontalResizePolicyFieldId);

const OSG::BitVector ScrollPanelBase::MTInfluenceMask = 
    (Inherited::MTInfluenceMask) | 
    (static_cast<BitVector>(0x0) << Inherited::NextFieldId); 


// Field descriptions

/*! \var UIViewportPtr   ScrollPanelBase::_sfView
    
*/
/*! \var ScrollBarPtr    ScrollPanelBase::_sfVerticalScrollBar
    
*/
/*! \var ScrollBarPtr    ScrollPanelBase::_sfHorizontalScrollBar
    
*/
/*! \var UInt32          ScrollPanelBase::_sfVerticalScrollBarDisplayPolicy
    
*/
/*! \var UInt32          ScrollPanelBase::_sfHorizontalScrollBarDisplayPolicy
    
*/
/*! \var UInt32          ScrollPanelBase::_sfVerticalResizePolicy
    
*/
/*! \var UInt32          ScrollPanelBase::_sfHorizontalResizePolicy
    
*/

//! ScrollPanel description

FieldDescription *ScrollPanelBase::_desc[] = 
{
    new FieldDescription(SFUIViewportPtr::getClassType(), 
                     "View", 
                     ViewFieldId, ViewFieldMask,
                     false,
                     (FieldAccessMethod) &ScrollPanelBase::getSFView),
    new FieldDescription(SFScrollBarPtr::getClassType(), 
                     "VerticalScrollBar", 
                     VerticalScrollBarFieldId, VerticalScrollBarFieldMask,
                     false,
                     (FieldAccessMethod) &ScrollPanelBase::getSFVerticalScrollBar),
    new FieldDescription(SFScrollBarPtr::getClassType(), 
                     "HorizontalScrollBar", 
                     HorizontalScrollBarFieldId, HorizontalScrollBarFieldMask,
                     false,
                     (FieldAccessMethod) &ScrollPanelBase::getSFHorizontalScrollBar),
    new FieldDescription(SFUInt32::getClassType(), 
                     "VerticalScrollBarDisplayPolicy", 
                     VerticalScrollBarDisplayPolicyFieldId, VerticalScrollBarDisplayPolicyFieldMask,
                     false,
                     (FieldAccessMethod) &ScrollPanelBase::getSFVerticalScrollBarDisplayPolicy),
    new FieldDescription(SFUInt32::getClassType(), 
                     "HorizontalScrollBarDisplayPolicy", 
                     HorizontalScrollBarDisplayPolicyFieldId, HorizontalScrollBarDisplayPolicyFieldMask,
                     false,
                     (FieldAccessMethod) &ScrollPanelBase::getSFHorizontalScrollBarDisplayPolicy),
    new FieldDescription(SFUInt32::getClassType(), 
                     "VerticalResizePolicy", 
                     VerticalResizePolicyFieldId, VerticalResizePolicyFieldMask,
                     false,
                     (FieldAccessMethod) &ScrollPanelBase::getSFVerticalResizePolicy),
    new FieldDescription(SFUInt32::getClassType(), 
                     "HorizontalResizePolicy", 
                     HorizontalResizePolicyFieldId, HorizontalResizePolicyFieldMask,
                     false,
                     (FieldAccessMethod) &ScrollPanelBase::getSFHorizontalResizePolicy)
};


FieldContainerType ScrollPanelBase::_type(
    "ScrollPanel",
    "Container",
    NULL,
    (PrototypeCreateF) &ScrollPanelBase::createEmpty,
    ScrollPanel::initMethod,
    _desc,
    sizeof(_desc));

//OSG_FIELD_CONTAINER_DEF(ScrollPanelBase, ScrollPanelPtr)

/*------------------------------ get -----------------------------------*/

FieldContainerType &ScrollPanelBase::getType(void) 
{
    return _type; 
} 

const FieldContainerType &ScrollPanelBase::getType(void) const 
{
    return _type;
} 


FieldContainerPtr ScrollPanelBase::shallowCopy(void) const 
{ 
    ScrollPanelPtr returnValue; 

    newPtr(returnValue, dynamic_cast<const ScrollPanel *>(this)); 

    return returnValue; 
}

UInt32 ScrollPanelBase::getContainerSize(void) const 
{ 
    return sizeof(ScrollPanel); 
}


#if !defined(OSG_FIXED_MFIELDSYNC)
void ScrollPanelBase::executeSync(      FieldContainer &other,
                                    const BitVector      &whichField)
{
    this->executeSyncImpl((ScrollPanelBase *) &other, whichField);
}
#else
void ScrollPanelBase::executeSync(      FieldContainer &other,
                                    const BitVector      &whichField,                                    const SyncInfo       &sInfo     )
{
    this->executeSyncImpl((ScrollPanelBase *) &other, whichField, sInfo);
}
void ScrollPanelBase::execBeginEdit(const BitVector &whichField, 
                                            UInt32     uiAspect,
                                            UInt32     uiContainerSize) 
{
    this->execBeginEditImpl(whichField, uiAspect, uiContainerSize);
}

void ScrollPanelBase::onDestroyAspect(UInt32 uiId, UInt32 uiAspect)
{
    Inherited::onDestroyAspect(uiId, uiAspect);

}
#endif

/*------------------------- constructors ----------------------------------*/

#ifdef OSG_WIN32_ICL
#pragma warning (disable : 383)
#endif

ScrollPanelBase::ScrollPanelBase(void) :
    _sfView                   (UIViewportPtr(NullFC)), 
    _sfVerticalScrollBar      (ScrollBarPtr(NullFC)), 
    _sfHorizontalScrollBar    (ScrollBarPtr(NullFC)), 
    _sfVerticalScrollBarDisplayPolicy(UInt32(ScrollPanel::SCROLLBAR_AS_NEEDED)), 
    _sfHorizontalScrollBarDisplayPolicy(UInt32(ScrollPanel::SCROLLBAR_AS_NEEDED)), 
    _sfVerticalResizePolicy   (UInt32(ScrollPanel::NO_RESIZE)), 
    _sfHorizontalResizePolicy (UInt32(ScrollPanel::NO_RESIZE)), 
    Inherited() 
{
}

#ifdef OSG_WIN32_ICL
#pragma warning (default : 383)
#endif

ScrollPanelBase::ScrollPanelBase(const ScrollPanelBase &source) :
    _sfView                   (source._sfView                   ), 
    _sfVerticalScrollBar      (source._sfVerticalScrollBar      ), 
    _sfHorizontalScrollBar    (source._sfHorizontalScrollBar    ), 
    _sfVerticalScrollBarDisplayPolicy(source._sfVerticalScrollBarDisplayPolicy), 
    _sfHorizontalScrollBarDisplayPolicy(source._sfHorizontalScrollBarDisplayPolicy), 
    _sfVerticalResizePolicy   (source._sfVerticalResizePolicy   ), 
    _sfHorizontalResizePolicy (source._sfHorizontalResizePolicy ), 
    Inherited                 (source)
{
}

/*-------------------------- destructors ----------------------------------*/

ScrollPanelBase::~ScrollPanelBase(void)
{
}

/*------------------------------ access -----------------------------------*/

UInt32 ScrollPanelBase::getBinSize(const BitVector &whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (ViewFieldMask & whichField))
    {
        returnValue += _sfView.getBinSize();
    }

    if(FieldBits::NoField != (VerticalScrollBarFieldMask & whichField))
    {
        returnValue += _sfVerticalScrollBar.getBinSize();
    }

    if(FieldBits::NoField != (HorizontalScrollBarFieldMask & whichField))
    {
        returnValue += _sfHorizontalScrollBar.getBinSize();
    }

    if(FieldBits::NoField != (VerticalScrollBarDisplayPolicyFieldMask & whichField))
    {
        returnValue += _sfVerticalScrollBarDisplayPolicy.getBinSize();
    }

    if(FieldBits::NoField != (HorizontalScrollBarDisplayPolicyFieldMask & whichField))
    {
        returnValue += _sfHorizontalScrollBarDisplayPolicy.getBinSize();
    }

    if(FieldBits::NoField != (VerticalResizePolicyFieldMask & whichField))
    {
        returnValue += _sfVerticalResizePolicy.getBinSize();
    }

    if(FieldBits::NoField != (HorizontalResizePolicyFieldMask & whichField))
    {
        returnValue += _sfHorizontalResizePolicy.getBinSize();
    }


    return returnValue;
}

void ScrollPanelBase::copyToBin(      BinaryDataHandler &pMem,
                                  const BitVector         &whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (ViewFieldMask & whichField))
    {
        _sfView.copyToBin(pMem);
    }

    if(FieldBits::NoField != (VerticalScrollBarFieldMask & whichField))
    {
        _sfVerticalScrollBar.copyToBin(pMem);
    }

    if(FieldBits::NoField != (HorizontalScrollBarFieldMask & whichField))
    {
        _sfHorizontalScrollBar.copyToBin(pMem);
    }

    if(FieldBits::NoField != (VerticalScrollBarDisplayPolicyFieldMask & whichField))
    {
        _sfVerticalScrollBarDisplayPolicy.copyToBin(pMem);
    }

    if(FieldBits::NoField != (HorizontalScrollBarDisplayPolicyFieldMask & whichField))
    {
        _sfHorizontalScrollBarDisplayPolicy.copyToBin(pMem);
    }

    if(FieldBits::NoField != (VerticalResizePolicyFieldMask & whichField))
    {
        _sfVerticalResizePolicy.copyToBin(pMem);
    }

    if(FieldBits::NoField != (HorizontalResizePolicyFieldMask & whichField))
    {
        _sfHorizontalResizePolicy.copyToBin(pMem);
    }


}

void ScrollPanelBase::copyFromBin(      BinaryDataHandler &pMem,
                                    const BitVector    &whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (ViewFieldMask & whichField))
    {
        _sfView.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (VerticalScrollBarFieldMask & whichField))
    {
        _sfVerticalScrollBar.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (HorizontalScrollBarFieldMask & whichField))
    {
        _sfHorizontalScrollBar.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (VerticalScrollBarDisplayPolicyFieldMask & whichField))
    {
        _sfVerticalScrollBarDisplayPolicy.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (HorizontalScrollBarDisplayPolicyFieldMask & whichField))
    {
        _sfHorizontalScrollBarDisplayPolicy.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (VerticalResizePolicyFieldMask & whichField))
    {
        _sfVerticalResizePolicy.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (HorizontalResizePolicyFieldMask & whichField))
    {
        _sfHorizontalResizePolicy.copyFromBin(pMem);
    }


}

#if !defined(OSG_FIXED_MFIELDSYNC)
void ScrollPanelBase::executeSyncImpl(      ScrollPanelBase *pOther,
                                        const BitVector         &whichField)
{

    Inherited::executeSyncImpl(pOther, whichField);

    if(FieldBits::NoField != (ViewFieldMask & whichField))
        _sfView.syncWith(pOther->_sfView);

    if(FieldBits::NoField != (VerticalScrollBarFieldMask & whichField))
        _sfVerticalScrollBar.syncWith(pOther->_sfVerticalScrollBar);

    if(FieldBits::NoField != (HorizontalScrollBarFieldMask & whichField))
        _sfHorizontalScrollBar.syncWith(pOther->_sfHorizontalScrollBar);

    if(FieldBits::NoField != (VerticalScrollBarDisplayPolicyFieldMask & whichField))
        _sfVerticalScrollBarDisplayPolicy.syncWith(pOther->_sfVerticalScrollBarDisplayPolicy);

    if(FieldBits::NoField != (HorizontalScrollBarDisplayPolicyFieldMask & whichField))
        _sfHorizontalScrollBarDisplayPolicy.syncWith(pOther->_sfHorizontalScrollBarDisplayPolicy);

    if(FieldBits::NoField != (VerticalResizePolicyFieldMask & whichField))
        _sfVerticalResizePolicy.syncWith(pOther->_sfVerticalResizePolicy);

    if(FieldBits::NoField != (HorizontalResizePolicyFieldMask & whichField))
        _sfHorizontalResizePolicy.syncWith(pOther->_sfHorizontalResizePolicy);


}
#else
void ScrollPanelBase::executeSyncImpl(      ScrollPanelBase *pOther,
                                        const BitVector         &whichField,
                                        const SyncInfo          &sInfo      )
{

    Inherited::executeSyncImpl(pOther, whichField, sInfo);

    if(FieldBits::NoField != (ViewFieldMask & whichField))
        _sfView.syncWith(pOther->_sfView);

    if(FieldBits::NoField != (VerticalScrollBarFieldMask & whichField))
        _sfVerticalScrollBar.syncWith(pOther->_sfVerticalScrollBar);

    if(FieldBits::NoField != (HorizontalScrollBarFieldMask & whichField))
        _sfHorizontalScrollBar.syncWith(pOther->_sfHorizontalScrollBar);

    if(FieldBits::NoField != (VerticalScrollBarDisplayPolicyFieldMask & whichField))
        _sfVerticalScrollBarDisplayPolicy.syncWith(pOther->_sfVerticalScrollBarDisplayPolicy);

    if(FieldBits::NoField != (HorizontalScrollBarDisplayPolicyFieldMask & whichField))
        _sfHorizontalScrollBarDisplayPolicy.syncWith(pOther->_sfHorizontalScrollBarDisplayPolicy);

    if(FieldBits::NoField != (VerticalResizePolicyFieldMask & whichField))
        _sfVerticalResizePolicy.syncWith(pOther->_sfVerticalResizePolicy);

    if(FieldBits::NoField != (HorizontalResizePolicyFieldMask & whichField))
        _sfHorizontalResizePolicy.syncWith(pOther->_sfHorizontalResizePolicy);



}

void ScrollPanelBase::execBeginEditImpl (const BitVector &whichField, 
                                                 UInt32     uiAspect,
                                                 UInt32     uiContainerSize)
{
    Inherited::execBeginEditImpl(whichField, uiAspect, uiContainerSize);

}
#endif



OSG_END_NAMESPACE

#include <OpenSG/OSGSFieldTypeDef.inl>
#include <OpenSG/OSGMFieldTypeDef.inl>

OSG_BEGIN_NAMESPACE

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldDataTraits<ScrollPanelPtr>::_type("ScrollPanelPtr", "ContainerPtr");
#endif

OSG_DLLEXPORT_SFIELD_DEF1(ScrollPanelPtr, OSG_USERINTERFACELIB_DLLTMPLMAPPING);
OSG_DLLEXPORT_MFIELD_DEF1(ScrollPanelPtr, OSG_USERINTERFACELIB_DLLTMPLMAPPING);


/*------------------------------------------------------------------------*/
/*                              cvs id's                                  */

#ifdef OSG_SGI_CC
#pragma set woff 1174
#endif

#ifdef OSG_LINUX_ICC
#pragma warning( disable : 177 )
#endif

namespace
{
    static Char8 cvsid_cpp       [] = "@(#)$Id: FCBaseTemplate_cpp.h,v 1.47 2006/03/17 17:03:19 pdaehne Exp $";
    static Char8 cvsid_hpp       [] = OSGSCROLLPANELBASE_HEADER_CVSID;
    static Char8 cvsid_inl       [] = OSGSCROLLPANELBASE_INLINE_CVSID;

    static Char8 cvsid_fields_hpp[] = OSGSCROLLPANELFIELDS_HEADER_CVSID;
}

OSG_END_NAMESPACE

