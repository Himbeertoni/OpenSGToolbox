/*---------------------------------------------------------------------------*\
 *                     OpenSG ToolBox UserInterface                          *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                         www.vrac.iastate.edu                              *
 *                                                                           *
 *   Authors: David Kabala, Alden Peterson, Lee Zaniewski, Jonathan Flory    *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class Scrollbar
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#ifndef _OSGSCROLLBARBASE_H_
#define _OSGSCROLLBARBASE_H_
#ifdef __sgi
#pragma once
#endif


#include <OpenSG/OSGConfig.h>
#include "OSGUserInterfaceDef.h"

#include <OpenSG/OSGBaseTypes.h>
#include <OpenSG/OSGRefPtr.h>
#include <OpenSG/OSGCoredNodePtr.h>

#include "Component/Container/OSGContainer.h" // Parent

#include "Util/OSGUIDefines.h" // Orientation type
#include <OpenSG/OSGUInt32Fields.h> // UnitIncrement type
#include <OpenSG/OSGUInt32Fields.h> // BlockIncrement type
#include "Component/OSGButton.h" // MinButton type
#include "Component/OSGButton.h" // MaxButton type
#include "Component/OSGUIDrawObjectCanvas.h" // Scrollbar type
#include "Component/OSGUIDrawObjectCanvas.h" // ScrollField type

#include "OSGScrollbarFields.h"

OSG_BEGIN_NAMESPACE

class Scrollbar;
class BinaryDataHandler;

//! \brief Scrollbar Base Class.

class OSG_USERINTERFACELIB_DLLMAPPING ScrollbarBase : public Container
{
  private:

    typedef Container    Inherited;

    /*==========================  PUBLIC  =================================*/
  public:

    typedef ScrollbarPtr  Ptr;

    enum
    {
        OrientationFieldId    = Inherited::NextFieldId,
        UnitIncrementFieldId  = OrientationFieldId    + 1,
        BlockIncrementFieldId = UnitIncrementFieldId  + 1,
        MinButtonFieldId      = BlockIncrementFieldId + 1,
        MaxButtonFieldId      = MinButtonFieldId      + 1,
        ScrollbarFieldId      = MaxButtonFieldId      + 1,
        ScrollFieldFieldId    = ScrollbarFieldId      + 1,
        NextFieldId           = ScrollFieldFieldId    + 1
    };

    static const OSG::BitVector OrientationFieldMask;
    static const OSG::BitVector UnitIncrementFieldMask;
    static const OSG::BitVector BlockIncrementFieldMask;
    static const OSG::BitVector MinButtonFieldMask;
    static const OSG::BitVector MaxButtonFieldMask;
    static const OSG::BitVector ScrollbarFieldMask;
    static const OSG::BitVector ScrollFieldFieldMask;


    static const OSG::BitVector MTInfluenceMask;

    /*---------------------------------------------------------------------*/
    /*! \name                    Class Get                                 */
    /*! \{                                                                 */

    static        FieldContainerType &getClassType    (void); 
    static        UInt32              getClassTypeId  (void); 

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                FieldContainer Get                            */
    /*! \{                                                                 */

    virtual       FieldContainerType &getType  (void); 
    virtual const FieldContainerType &getType  (void) const; 

    virtual       UInt32              getContainerSize(void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Get                                 */
    /*! \{                                                                 */

           SFUInt32            *getSFOrientation    (void);
           SFUInt32            *getSFUnitIncrement  (void);
           SFUInt32            *getSFBlockIncrement (void);
           SFButtonPtr         *getSFMinButton      (void);
           SFButtonPtr         *getSFMaxButton      (void);
           SFUIDrawObjectCanvasPtr *getSFScrollbar      (void);
           SFUIDrawObjectCanvasPtr *getSFScrollField    (void);

           UInt32              &getOrientation    (void);
     const UInt32              &getOrientation    (void) const;
           UInt32              &getUnitIncrement  (void);
     const UInt32              &getUnitIncrement  (void) const;
           UInt32              &getBlockIncrement (void);
     const UInt32              &getBlockIncrement (void) const;
           ButtonPtr           &getMinButton      (void);
     const ButtonPtr           &getMinButton      (void) const;
           ButtonPtr           &getMaxButton      (void);
     const ButtonPtr           &getMaxButton      (void) const;
           UIDrawObjectCanvasPtr &getScrollbar      (void);
     const UIDrawObjectCanvasPtr &getScrollbar      (void) const;
           UIDrawObjectCanvasPtr &getScrollField    (void);
     const UIDrawObjectCanvasPtr &getScrollField    (void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Set                                 */
    /*! \{                                                                 */

     void setOrientation    ( const UInt32 &value );
     void setUnitIncrement  ( const UInt32 &value );
     void setBlockIncrement ( const UInt32 &value );
     void setMinButton      ( const ButtonPtr &value );
     void setMaxButton      ( const ButtonPtr &value );
     void setScrollbar      ( const UIDrawObjectCanvasPtr &value );
     void setScrollField    ( const UIDrawObjectCanvasPtr &value );

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Binary Access                              */
    /*! \{                                                                 */

    virtual UInt32 getBinSize (const BitVector         &whichField);
    virtual void   copyToBin  (      BinaryDataHandler &pMem,
                               const BitVector         &whichField);
    virtual void   copyFromBin(      BinaryDataHandler &pMem,
                               const BitVector         &whichField);


    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Construction                               */
    /*! \{                                                                 */

    static  ScrollbarPtr      create          (void); 
    static  ScrollbarPtr      createEmpty     (void); 

    /*! \}                                                                 */

    /*---------------------------------------------------------------------*/
    /*! \name                       Copy                                   */
    /*! \{                                                                 */

    virtual FieldContainerPtr     shallowCopy     (void) const; 

    /*! \}                                                                 */
    /*=========================  PROTECTED  ===============================*/
  protected:

    /*---------------------------------------------------------------------*/
    /*! \name                      Fields                                  */
    /*! \{                                                                 */

    SFUInt32            _sfOrientation;
    SFUInt32            _sfUnitIncrement;
    SFUInt32            _sfBlockIncrement;
    SFButtonPtr         _sfMinButton;
    SFButtonPtr         _sfMaxButton;
    SFUIDrawObjectCanvasPtr   _sfScrollbar;
    SFUIDrawObjectCanvasPtr   _sfScrollField;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Constructors                               */
    /*! \{                                                                 */

    ScrollbarBase(void);
    ScrollbarBase(const ScrollbarBase &source);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Destructors                                */
    /*! \{                                                                 */

    virtual ~ScrollbarBase(void); 

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

#if !defined(OSG_FIXED_MFIELDSYNC)
    void executeSyncImpl(      ScrollbarBase *pOther,
                         const BitVector         &whichField);

    virtual void   executeSync(      FieldContainer    &other,
                               const BitVector         &whichField);
#else
    void executeSyncImpl(      ScrollbarBase *pOther,
                         const BitVector         &whichField,
                         const SyncInfo          &sInfo     );

    virtual void   executeSync(      FieldContainer    &other,
                               const BitVector         &whichField,
                               const SyncInfo          &sInfo);

    virtual void execBeginEdit     (const BitVector &whichField,
                                          UInt32     uiAspect,
                                          UInt32     uiContainerSize);

            void execBeginEditImpl (const BitVector &whichField,
                                          UInt32     uiAspect,
                                          UInt32     uiContainerSize);

    virtual void onDestroyAspect(UInt32 uiId, UInt32 uiAspect);
#endif

    /*! \}                                                                 */
    /*==========================  PRIVATE  ================================*/
  private:

    friend class FieldContainer;

    static FieldDescription   *_desc[];
    static FieldContainerType  _type;


    // prohibit default functions (move to 'public' if you need one)
    void operator =(const ScrollbarBase &source);
};

//---------------------------------------------------------------------------
//   Exported Types
//---------------------------------------------------------------------------


typedef ScrollbarBase *ScrollbarBaseP;

typedef osgIF<ScrollbarBase::isNodeCore,
              CoredNodePtr<Scrollbar>,
              FieldContainer::attempt_to_create_CoredNodePtr_on_non_NodeCore_FC
              >::_IRet ScrollbarNodePtr;

typedef RefPtr<ScrollbarPtr> ScrollbarRefPtr;

OSG_END_NAMESPACE

#define OSGSCROLLBARBASE_HEADER_CVSID "@(#)$Id: FCBaseTemplate_h.h,v 1.40 2005/07/20 00:10:14 vossg Exp $"

#endif /* _OSGSCROLLBARBASE_H_ */
