/*---------------------------------------------------------------------------*\
 *                     OpenSG ToolBox UserInterface                          *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                         www.vrac.iastate.edu                              *
 *                                                                           *
 *   Authors: David Kabala, Alden Peterson, Lee Zaniewski, Jonathan Flory    *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class Slider!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#define OSG_COMPILESLIDERINST

#include <stdlib.h>
#include <stdio.h>

#include <OpenSG/OSGConfig.h>

#include "OSGSliderBase.h"
#include "OSGSlider.h"


OSG_BEGIN_NAMESPACE

const OSG::BitVector  SliderBase::KnobButtonFieldMask = 
    (TypeTraits<BitVector>::One << SliderBase::KnobButtonFieldId);

const OSG::BitVector  SliderBase::OrientationFieldMask = 
    (TypeTraits<BitVector>::One << SliderBase::OrientationFieldId);

const OSG::BitVector  SliderBase::MajorTickSpacingFieldMask = 
    (TypeTraits<BitVector>::One << SliderBase::MajorTickSpacingFieldId);

const OSG::BitVector  SliderBase::MajorTickPositionsFieldMask = 
    (TypeTraits<BitVector>::One << SliderBase::MajorTickPositionsFieldId);

const OSG::BitVector  SliderBase::MinorTickSpacingFieldMask = 
    (TypeTraits<BitVector>::One << SliderBase::MinorTickSpacingFieldId);

const OSG::BitVector  SliderBase::MinorTickPositionsFieldMask = 
    (TypeTraits<BitVector>::One << SliderBase::MinorTickPositionsFieldId);

const OSG::BitVector  SliderBase::SnapToTicksFieldMask = 
    (TypeTraits<BitVector>::One << SliderBase::SnapToTicksFieldId);

const OSG::BitVector  SliderBase::DrawMajorTicksFieldMask = 
    (TypeTraits<BitVector>::One << SliderBase::DrawMajorTicksFieldId);

const OSG::BitVector  SliderBase::DrawTrackFieldMask = 
    (TypeTraits<BitVector>::One << SliderBase::DrawTrackFieldId);

const OSG::BitVector  SliderBase::DrawMinorTicksFieldMask = 
    (TypeTraits<BitVector>::One << SliderBase::DrawMinorTicksFieldId);

const OSG::BitVector  SliderBase::DrawLabelsFieldMask = 
    (TypeTraits<BitVector>::One << SliderBase::DrawLabelsFieldId);

const OSG::BitVector  SliderBase::InvertedFieldMask = 
    (TypeTraits<BitVector>::One << SliderBase::InvertedFieldId);

const OSG::BitVector  SliderBase::LabelMapFieldMask = 
    (TypeTraits<BitVector>::One << SliderBase::LabelMapFieldId);

const OSG::BitVector  SliderBase::LabelPrototypeFieldMask = 
    (TypeTraits<BitVector>::One << SliderBase::LabelPrototypeFieldId);

const OSG::BitVector  SliderBase::TrackDrawObjectFieldMask = 
    (TypeTraits<BitVector>::One << SliderBase::TrackDrawObjectFieldId);

const OSG::BitVector  SliderBase::MinTrackDrawObjectFieldMask = 
    (TypeTraits<BitVector>::One << SliderBase::MinTrackDrawObjectFieldId);

const OSG::BitVector  SliderBase::MaxTrackDrawObjectFieldMask = 
    (TypeTraits<BitVector>::One << SliderBase::MaxTrackDrawObjectFieldId);

const OSG::BitVector  SliderBase::MajorTickDrawObjectsFieldMask = 
    (TypeTraits<BitVector>::One << SliderBase::MajorTickDrawObjectsFieldId);

const OSG::BitVector  SliderBase::MinorTickDrawObjectsFieldMask = 
    (TypeTraits<BitVector>::One << SliderBase::MinorTickDrawObjectsFieldId);

const OSG::BitVector  SliderBase::TrackInsetFieldMask = 
    (TypeTraits<BitVector>::One << SliderBase::TrackInsetFieldId);

const OSG::BitVector  SliderBase::TrackToTickOffsetFieldMask = 
    (TypeTraits<BitVector>::One << SliderBase::TrackToTickOffsetFieldId);

const OSG::BitVector SliderBase::MTInfluenceMask = 
    (Inherited::MTInfluenceMask) | 
    (static_cast<BitVector>(0x0) << Inherited::NextFieldId); 


// Field descriptions

/*! \var ButtonPtr       SliderBase::_sfKnobButton
    
*/
/*! \var UInt32          SliderBase::_sfOrientation
    
*/
/*! \var UInt32          SliderBase::_sfMajorTickSpacing
    
*/
/*! \var Pnt2s           SliderBase::_mfMajorTickPositions
    
*/
/*! \var UInt32          SliderBase::_sfMinorTickSpacing
    
*/
/*! \var Pnt2s           SliderBase::_mfMinorTickPositions
    
*/
/*! \var bool            SliderBase::_sfSnapToTicks
    
*/
/*! \var bool            SliderBase::_sfDrawMajorTicks
    
*/
/*! \var bool            SliderBase::_sfDrawTrack
    
*/
/*! \var bool            SliderBase::_sfDrawMinorTicks
    
*/
/*! \var bool            SliderBase::_sfDrawLabels
    
*/
/*! \var bool            SliderBase::_sfInverted
    
*/
/*! \var FieldContainerMap SliderBase::_sfLabelMap
    
*/
/*! \var LabelPtr        SliderBase::_sfLabelPrototype
    
*/
/*! \var UIDrawObjectCanvasPtr SliderBase::_sfTrackDrawObject
    
*/
/*! \var UIDrawObjectCanvasPtr SliderBase::_sfMinTrackDrawObject
    
*/
/*! \var UIDrawObjectCanvasPtr SliderBase::_sfMaxTrackDrawObject
    
*/
/*! \var UIDrawObjectPtr SliderBase::_mfMajorTickDrawObjects
    
*/
/*! \var UIDrawObjectPtr SliderBase::_mfMinorTickDrawObjects
    
*/
/*! \var Int32           SliderBase::_sfTrackInset
    
*/
/*! \var Int32           SliderBase::_sfTrackToTickOffset
    
*/

//! Slider description

FieldDescription *SliderBase::_desc[] = 
{
    new FieldDescription(SFButtonPtr::getClassType(), 
                     "KnobButton", 
                     KnobButtonFieldId, KnobButtonFieldMask,
                     false,
                     (FieldAccessMethod) &SliderBase::getSFKnobButton),
    new FieldDescription(SFUInt32::getClassType(), 
                     "Orientation", 
                     OrientationFieldId, OrientationFieldMask,
                     false,
                     (FieldAccessMethod) &SliderBase::getSFOrientation),
    new FieldDescription(SFUInt32::getClassType(), 
                     "MajorTickSpacing", 
                     MajorTickSpacingFieldId, MajorTickSpacingFieldMask,
                     false,
                     (FieldAccessMethod) &SliderBase::getSFMajorTickSpacing),
    new FieldDescription(MFPnt2s::getClassType(), 
                     "MajorTickPositions", 
                     MajorTickPositionsFieldId, MajorTickPositionsFieldMask,
                     true,
                     (FieldAccessMethod) &SliderBase::getMFMajorTickPositions),
    new FieldDescription(SFUInt32::getClassType(), 
                     "MinorTickSpacing", 
                     MinorTickSpacingFieldId, MinorTickSpacingFieldMask,
                     false,
                     (FieldAccessMethod) &SliderBase::getSFMinorTickSpacing),
    new FieldDescription(MFPnt2s::getClassType(), 
                     "MinorTickPositions", 
                     MinorTickPositionsFieldId, MinorTickPositionsFieldMask,
                     true,
                     (FieldAccessMethod) &SliderBase::getMFMinorTickPositions),
    new FieldDescription(SFBool::getClassType(), 
                     "SnapToTicks", 
                     SnapToTicksFieldId, SnapToTicksFieldMask,
                     false,
                     (FieldAccessMethod) &SliderBase::getSFSnapToTicks),
    new FieldDescription(SFBool::getClassType(), 
                     "DrawMajorTicks", 
                     DrawMajorTicksFieldId, DrawMajorTicksFieldMask,
                     false,
                     (FieldAccessMethod) &SliderBase::getSFDrawMajorTicks),
    new FieldDescription(SFBool::getClassType(), 
                     "DrawTrack", 
                     DrawTrackFieldId, DrawTrackFieldMask,
                     false,
                     (FieldAccessMethod) &SliderBase::getSFDrawTrack),
    new FieldDescription(SFBool::getClassType(), 
                     "DrawMinorTicks", 
                     DrawMinorTicksFieldId, DrawMinorTicksFieldMask,
                     false,
                     (FieldAccessMethod) &SliderBase::getSFDrawMinorTicks),
    new FieldDescription(SFBool::getClassType(), 
                     "DrawLabels", 
                     DrawLabelsFieldId, DrawLabelsFieldMask,
                     false,
                     (FieldAccessMethod) &SliderBase::getSFDrawLabels),
    new FieldDescription(SFBool::getClassType(), 
                     "Inverted", 
                     InvertedFieldId, InvertedFieldMask,
                     false,
                     (FieldAccessMethod) &SliderBase::getSFInverted),
    new FieldDescription(SFFieldContainerMap::getClassType(), 
                     "LabelMap", 
                     LabelMapFieldId, LabelMapFieldMask,
                     false,
                     (FieldAccessMethod) &SliderBase::getSFLabelMap),
    new FieldDescription(SFLabelPtr::getClassType(), 
                     "LabelPrototype", 
                     LabelPrototypeFieldId, LabelPrototypeFieldMask,
                     false,
                     (FieldAccessMethod) &SliderBase::getSFLabelPrototype),
    new FieldDescription(SFUIDrawObjectCanvasPtr::getClassType(), 
                     "TrackDrawObject", 
                     TrackDrawObjectFieldId, TrackDrawObjectFieldMask,
                     false,
                     (FieldAccessMethod) &SliderBase::getSFTrackDrawObject),
    new FieldDescription(SFUIDrawObjectCanvasPtr::getClassType(), 
                     "MinTrackDrawObject", 
                     MinTrackDrawObjectFieldId, MinTrackDrawObjectFieldMask,
                     false,
                     (FieldAccessMethod) &SliderBase::getSFMinTrackDrawObject),
    new FieldDescription(SFUIDrawObjectCanvasPtr::getClassType(), 
                     "MaxTrackDrawObject", 
                     MaxTrackDrawObjectFieldId, MaxTrackDrawObjectFieldMask,
                     false,
                     (FieldAccessMethod) &SliderBase::getSFMaxTrackDrawObject),
    new FieldDescription(MFUIDrawObjectPtr::getClassType(), 
                     "MajorTickDrawObjects", 
                     MajorTickDrawObjectsFieldId, MajorTickDrawObjectsFieldMask,
                     false,
                     (FieldAccessMethod) &SliderBase::getMFMajorTickDrawObjects),
    new FieldDescription(MFUIDrawObjectPtr::getClassType(), 
                     "MinorTickDrawObjects", 
                     MinorTickDrawObjectsFieldId, MinorTickDrawObjectsFieldMask,
                     false,
                     (FieldAccessMethod) &SliderBase::getMFMinorTickDrawObjects),
    new FieldDescription(SFInt32::getClassType(), 
                     "TrackInset", 
                     TrackInsetFieldId, TrackInsetFieldMask,
                     false,
                     (FieldAccessMethod) &SliderBase::getSFTrackInset),
    new FieldDescription(SFInt32::getClassType(), 
                     "TrackToTickOffset", 
                     TrackToTickOffsetFieldId, TrackToTickOffsetFieldMask,
                     false,
                     (FieldAccessMethod) &SliderBase::getSFTrackToTickOffset)
};


FieldContainerType SliderBase::_type(
    "Slider",
    "Container",
    NULL,
    (PrototypeCreateF) &SliderBase::createEmpty,
    Slider::initMethod,
    _desc,
    sizeof(_desc));

//OSG_FIELD_CONTAINER_DEF(SliderBase, SliderPtr)

/*------------------------------ get -----------------------------------*/

FieldContainerType &SliderBase::getType(void) 
{
    return _type; 
} 

const FieldContainerType &SliderBase::getType(void) const 
{
    return _type;
} 


FieldContainerPtr SliderBase::shallowCopy(void) const 
{ 
    SliderPtr returnValue; 

    newPtr(returnValue, dynamic_cast<const Slider *>(this)); 

    return returnValue; 
}

UInt32 SliderBase::getContainerSize(void) const 
{ 
    return sizeof(Slider); 
}


#if !defined(OSG_FIXED_MFIELDSYNC)
void SliderBase::executeSync(      FieldContainer &other,
                                    const BitVector      &whichField)
{
    this->executeSyncImpl((SliderBase *) &other, whichField);
}
#else
void SliderBase::executeSync(      FieldContainer &other,
                                    const BitVector      &whichField,                                    const SyncInfo       &sInfo     )
{
    this->executeSyncImpl((SliderBase *) &other, whichField, sInfo);
}
void SliderBase::execBeginEdit(const BitVector &whichField, 
                                            UInt32     uiAspect,
                                            UInt32     uiContainerSize) 
{
    this->execBeginEditImpl(whichField, uiAspect, uiContainerSize);
}

void SliderBase::onDestroyAspect(UInt32 uiId, UInt32 uiAspect)
{
    Inherited::onDestroyAspect(uiId, uiAspect);

    _mfMajorTickPositions.terminateShare(uiAspect, this->getContainerSize());
    _mfMinorTickPositions.terminateShare(uiAspect, this->getContainerSize());
    _mfMajorTickDrawObjects.terminateShare(uiAspect, this->getContainerSize());
    _mfMinorTickDrawObjects.terminateShare(uiAspect, this->getContainerSize());
}
#endif

/*------------------------- constructors ----------------------------------*/

#ifdef OSG_WIN32_ICL
#pragma warning (disable : 383)
#endif

SliderBase::SliderBase(void) :
    _sfKnobButton             (ButtonPtr(NullFC)), 
    _sfOrientation            (UInt32(VERTICAL_ALIGNMENT)), 
    _sfMajorTickSpacing       (UInt32(1)), 
    _mfMajorTickPositions     (), 
    _sfMinorTickSpacing       (UInt32(1)), 
    _mfMinorTickPositions     (), 
    _sfSnapToTicks            (bool(false)), 
    _sfDrawMajorTicks         (bool(false)), 
    _sfDrawTrack              (bool(false)), 
    _sfDrawMinorTicks         (bool(false)), 
    _sfDrawLabels             (bool(false)), 
    _sfInverted               (bool(false)), 
    _sfLabelMap               (), 
    _sfLabelPrototype         (), 
    _sfTrackDrawObject        (), 
    _sfMinTrackDrawObject     (), 
    _sfMaxTrackDrawObject     (), 
    _mfMajorTickDrawObjects   (), 
    _mfMinorTickDrawObjects   (), 
    _sfTrackInset             (Int32(6)), 
    _sfTrackToTickOffset      (Int32(8)), 
    Inherited() 
{
}

#ifdef OSG_WIN32_ICL
#pragma warning (default : 383)
#endif

SliderBase::SliderBase(const SliderBase &source) :
    _sfKnobButton             (source._sfKnobButton             ), 
    _sfOrientation            (source._sfOrientation            ), 
    _sfMajorTickSpacing       (source._sfMajorTickSpacing       ), 
    _mfMajorTickPositions     (source._mfMajorTickPositions     ), 
    _sfMinorTickSpacing       (source._sfMinorTickSpacing       ), 
    _mfMinorTickPositions     (source._mfMinorTickPositions     ), 
    _sfSnapToTicks            (source._sfSnapToTicks            ), 
    _sfDrawMajorTicks         (source._sfDrawMajorTicks         ), 
    _sfDrawTrack              (source._sfDrawTrack              ), 
    _sfDrawMinorTicks         (source._sfDrawMinorTicks         ), 
    _sfDrawLabels             (source._sfDrawLabels             ), 
    _sfInverted               (source._sfInverted               ), 
    _sfLabelMap               (source._sfLabelMap               ), 
    _sfLabelPrototype         (source._sfLabelPrototype         ), 
    _sfTrackDrawObject        (source._sfTrackDrawObject        ), 
    _sfMinTrackDrawObject     (source._sfMinTrackDrawObject     ), 
    _sfMaxTrackDrawObject     (source._sfMaxTrackDrawObject     ), 
    _mfMajorTickDrawObjects   (source._mfMajorTickDrawObjects   ), 
    _mfMinorTickDrawObjects   (source._mfMinorTickDrawObjects   ), 
    _sfTrackInset             (source._sfTrackInset             ), 
    _sfTrackToTickOffset      (source._sfTrackToTickOffset      ), 
    Inherited                 (source)
{
}

/*-------------------------- destructors ----------------------------------*/

SliderBase::~SliderBase(void)
{
}

/*------------------------------ access -----------------------------------*/

UInt32 SliderBase::getBinSize(const BitVector &whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (KnobButtonFieldMask & whichField))
    {
        returnValue += _sfKnobButton.getBinSize();
    }

    if(FieldBits::NoField != (OrientationFieldMask & whichField))
    {
        returnValue += _sfOrientation.getBinSize();
    }

    if(FieldBits::NoField != (MajorTickSpacingFieldMask & whichField))
    {
        returnValue += _sfMajorTickSpacing.getBinSize();
    }

    if(FieldBits::NoField != (MajorTickPositionsFieldMask & whichField))
    {
        returnValue += _mfMajorTickPositions.getBinSize();
    }

    if(FieldBits::NoField != (MinorTickSpacingFieldMask & whichField))
    {
        returnValue += _sfMinorTickSpacing.getBinSize();
    }

    if(FieldBits::NoField != (MinorTickPositionsFieldMask & whichField))
    {
        returnValue += _mfMinorTickPositions.getBinSize();
    }

    if(FieldBits::NoField != (SnapToTicksFieldMask & whichField))
    {
        returnValue += _sfSnapToTicks.getBinSize();
    }

    if(FieldBits::NoField != (DrawMajorTicksFieldMask & whichField))
    {
        returnValue += _sfDrawMajorTicks.getBinSize();
    }

    if(FieldBits::NoField != (DrawTrackFieldMask & whichField))
    {
        returnValue += _sfDrawTrack.getBinSize();
    }

    if(FieldBits::NoField != (DrawMinorTicksFieldMask & whichField))
    {
        returnValue += _sfDrawMinorTicks.getBinSize();
    }

    if(FieldBits::NoField != (DrawLabelsFieldMask & whichField))
    {
        returnValue += _sfDrawLabels.getBinSize();
    }

    if(FieldBits::NoField != (InvertedFieldMask & whichField))
    {
        returnValue += _sfInverted.getBinSize();
    }

    if(FieldBits::NoField != (LabelMapFieldMask & whichField))
    {
        returnValue += _sfLabelMap.getBinSize();
    }

    if(FieldBits::NoField != (LabelPrototypeFieldMask & whichField))
    {
        returnValue += _sfLabelPrototype.getBinSize();
    }

    if(FieldBits::NoField != (TrackDrawObjectFieldMask & whichField))
    {
        returnValue += _sfTrackDrawObject.getBinSize();
    }

    if(FieldBits::NoField != (MinTrackDrawObjectFieldMask & whichField))
    {
        returnValue += _sfMinTrackDrawObject.getBinSize();
    }

    if(FieldBits::NoField != (MaxTrackDrawObjectFieldMask & whichField))
    {
        returnValue += _sfMaxTrackDrawObject.getBinSize();
    }

    if(FieldBits::NoField != (MajorTickDrawObjectsFieldMask & whichField))
    {
        returnValue += _mfMajorTickDrawObjects.getBinSize();
    }

    if(FieldBits::NoField != (MinorTickDrawObjectsFieldMask & whichField))
    {
        returnValue += _mfMinorTickDrawObjects.getBinSize();
    }

    if(FieldBits::NoField != (TrackInsetFieldMask & whichField))
    {
        returnValue += _sfTrackInset.getBinSize();
    }

    if(FieldBits::NoField != (TrackToTickOffsetFieldMask & whichField))
    {
        returnValue += _sfTrackToTickOffset.getBinSize();
    }


    return returnValue;
}

void SliderBase::copyToBin(      BinaryDataHandler &pMem,
                                  const BitVector         &whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (KnobButtonFieldMask & whichField))
    {
        _sfKnobButton.copyToBin(pMem);
    }

    if(FieldBits::NoField != (OrientationFieldMask & whichField))
    {
        _sfOrientation.copyToBin(pMem);
    }

    if(FieldBits::NoField != (MajorTickSpacingFieldMask & whichField))
    {
        _sfMajorTickSpacing.copyToBin(pMem);
    }

    if(FieldBits::NoField != (MajorTickPositionsFieldMask & whichField))
    {
        _mfMajorTickPositions.copyToBin(pMem);
    }

    if(FieldBits::NoField != (MinorTickSpacingFieldMask & whichField))
    {
        _sfMinorTickSpacing.copyToBin(pMem);
    }

    if(FieldBits::NoField != (MinorTickPositionsFieldMask & whichField))
    {
        _mfMinorTickPositions.copyToBin(pMem);
    }

    if(FieldBits::NoField != (SnapToTicksFieldMask & whichField))
    {
        _sfSnapToTicks.copyToBin(pMem);
    }

    if(FieldBits::NoField != (DrawMajorTicksFieldMask & whichField))
    {
        _sfDrawMajorTicks.copyToBin(pMem);
    }

    if(FieldBits::NoField != (DrawTrackFieldMask & whichField))
    {
        _sfDrawTrack.copyToBin(pMem);
    }

    if(FieldBits::NoField != (DrawMinorTicksFieldMask & whichField))
    {
        _sfDrawMinorTicks.copyToBin(pMem);
    }

    if(FieldBits::NoField != (DrawLabelsFieldMask & whichField))
    {
        _sfDrawLabels.copyToBin(pMem);
    }

    if(FieldBits::NoField != (InvertedFieldMask & whichField))
    {
        _sfInverted.copyToBin(pMem);
    }

    if(FieldBits::NoField != (LabelMapFieldMask & whichField))
    {
        _sfLabelMap.copyToBin(pMem);
    }

    if(FieldBits::NoField != (LabelPrototypeFieldMask & whichField))
    {
        _sfLabelPrototype.copyToBin(pMem);
    }

    if(FieldBits::NoField != (TrackDrawObjectFieldMask & whichField))
    {
        _sfTrackDrawObject.copyToBin(pMem);
    }

    if(FieldBits::NoField != (MinTrackDrawObjectFieldMask & whichField))
    {
        _sfMinTrackDrawObject.copyToBin(pMem);
    }

    if(FieldBits::NoField != (MaxTrackDrawObjectFieldMask & whichField))
    {
        _sfMaxTrackDrawObject.copyToBin(pMem);
    }

    if(FieldBits::NoField != (MajorTickDrawObjectsFieldMask & whichField))
    {
        _mfMajorTickDrawObjects.copyToBin(pMem);
    }

    if(FieldBits::NoField != (MinorTickDrawObjectsFieldMask & whichField))
    {
        _mfMinorTickDrawObjects.copyToBin(pMem);
    }

    if(FieldBits::NoField != (TrackInsetFieldMask & whichField))
    {
        _sfTrackInset.copyToBin(pMem);
    }

    if(FieldBits::NoField != (TrackToTickOffsetFieldMask & whichField))
    {
        _sfTrackToTickOffset.copyToBin(pMem);
    }


}

void SliderBase::copyFromBin(      BinaryDataHandler &pMem,
                                    const BitVector    &whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (KnobButtonFieldMask & whichField))
    {
        _sfKnobButton.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (OrientationFieldMask & whichField))
    {
        _sfOrientation.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (MajorTickSpacingFieldMask & whichField))
    {
        _sfMajorTickSpacing.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (MajorTickPositionsFieldMask & whichField))
    {
        _mfMajorTickPositions.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (MinorTickSpacingFieldMask & whichField))
    {
        _sfMinorTickSpacing.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (MinorTickPositionsFieldMask & whichField))
    {
        _mfMinorTickPositions.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (SnapToTicksFieldMask & whichField))
    {
        _sfSnapToTicks.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (DrawMajorTicksFieldMask & whichField))
    {
        _sfDrawMajorTicks.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (DrawTrackFieldMask & whichField))
    {
        _sfDrawTrack.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (DrawMinorTicksFieldMask & whichField))
    {
        _sfDrawMinorTicks.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (DrawLabelsFieldMask & whichField))
    {
        _sfDrawLabels.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (InvertedFieldMask & whichField))
    {
        _sfInverted.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (LabelMapFieldMask & whichField))
    {
        _sfLabelMap.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (LabelPrototypeFieldMask & whichField))
    {
        _sfLabelPrototype.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (TrackDrawObjectFieldMask & whichField))
    {
        _sfTrackDrawObject.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (MinTrackDrawObjectFieldMask & whichField))
    {
        _sfMinTrackDrawObject.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (MaxTrackDrawObjectFieldMask & whichField))
    {
        _sfMaxTrackDrawObject.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (MajorTickDrawObjectsFieldMask & whichField))
    {
        _mfMajorTickDrawObjects.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (MinorTickDrawObjectsFieldMask & whichField))
    {
        _mfMinorTickDrawObjects.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (TrackInsetFieldMask & whichField))
    {
        _sfTrackInset.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (TrackToTickOffsetFieldMask & whichField))
    {
        _sfTrackToTickOffset.copyFromBin(pMem);
    }


}

#if !defined(OSG_FIXED_MFIELDSYNC)
void SliderBase::executeSyncImpl(      SliderBase *pOther,
                                        const BitVector         &whichField)
{

    Inherited::executeSyncImpl(pOther, whichField);

    if(FieldBits::NoField != (KnobButtonFieldMask & whichField))
        _sfKnobButton.syncWith(pOther->_sfKnobButton);

    if(FieldBits::NoField != (OrientationFieldMask & whichField))
        _sfOrientation.syncWith(pOther->_sfOrientation);

    if(FieldBits::NoField != (MajorTickSpacingFieldMask & whichField))
        _sfMajorTickSpacing.syncWith(pOther->_sfMajorTickSpacing);

    if(FieldBits::NoField != (MajorTickPositionsFieldMask & whichField))
        _mfMajorTickPositions.syncWith(pOther->_mfMajorTickPositions);

    if(FieldBits::NoField != (MinorTickSpacingFieldMask & whichField))
        _sfMinorTickSpacing.syncWith(pOther->_sfMinorTickSpacing);

    if(FieldBits::NoField != (MinorTickPositionsFieldMask & whichField))
        _mfMinorTickPositions.syncWith(pOther->_mfMinorTickPositions);

    if(FieldBits::NoField != (SnapToTicksFieldMask & whichField))
        _sfSnapToTicks.syncWith(pOther->_sfSnapToTicks);

    if(FieldBits::NoField != (DrawMajorTicksFieldMask & whichField))
        _sfDrawMajorTicks.syncWith(pOther->_sfDrawMajorTicks);

    if(FieldBits::NoField != (DrawTrackFieldMask & whichField))
        _sfDrawTrack.syncWith(pOther->_sfDrawTrack);

    if(FieldBits::NoField != (DrawMinorTicksFieldMask & whichField))
        _sfDrawMinorTicks.syncWith(pOther->_sfDrawMinorTicks);

    if(FieldBits::NoField != (DrawLabelsFieldMask & whichField))
        _sfDrawLabels.syncWith(pOther->_sfDrawLabels);

    if(FieldBits::NoField != (InvertedFieldMask & whichField))
        _sfInverted.syncWith(pOther->_sfInverted);

    if(FieldBits::NoField != (LabelMapFieldMask & whichField))
        _sfLabelMap.syncWith(pOther->_sfLabelMap);

    if(FieldBits::NoField != (LabelPrototypeFieldMask & whichField))
        _sfLabelPrototype.syncWith(pOther->_sfLabelPrototype);

    if(FieldBits::NoField != (TrackDrawObjectFieldMask & whichField))
        _sfTrackDrawObject.syncWith(pOther->_sfTrackDrawObject);

    if(FieldBits::NoField != (MinTrackDrawObjectFieldMask & whichField))
        _sfMinTrackDrawObject.syncWith(pOther->_sfMinTrackDrawObject);

    if(FieldBits::NoField != (MaxTrackDrawObjectFieldMask & whichField))
        _sfMaxTrackDrawObject.syncWith(pOther->_sfMaxTrackDrawObject);

    if(FieldBits::NoField != (MajorTickDrawObjectsFieldMask & whichField))
        _mfMajorTickDrawObjects.syncWith(pOther->_mfMajorTickDrawObjects);

    if(FieldBits::NoField != (MinorTickDrawObjectsFieldMask & whichField))
        _mfMinorTickDrawObjects.syncWith(pOther->_mfMinorTickDrawObjects);

    if(FieldBits::NoField != (TrackInsetFieldMask & whichField))
        _sfTrackInset.syncWith(pOther->_sfTrackInset);

    if(FieldBits::NoField != (TrackToTickOffsetFieldMask & whichField))
        _sfTrackToTickOffset.syncWith(pOther->_sfTrackToTickOffset);


}
#else
void SliderBase::executeSyncImpl(      SliderBase *pOther,
                                        const BitVector         &whichField,
                                        const SyncInfo          &sInfo      )
{

    Inherited::executeSyncImpl(pOther, whichField, sInfo);

    if(FieldBits::NoField != (KnobButtonFieldMask & whichField))
        _sfKnobButton.syncWith(pOther->_sfKnobButton);

    if(FieldBits::NoField != (OrientationFieldMask & whichField))
        _sfOrientation.syncWith(pOther->_sfOrientation);

    if(FieldBits::NoField != (MajorTickSpacingFieldMask & whichField))
        _sfMajorTickSpacing.syncWith(pOther->_sfMajorTickSpacing);

    if(FieldBits::NoField != (MinorTickSpacingFieldMask & whichField))
        _sfMinorTickSpacing.syncWith(pOther->_sfMinorTickSpacing);

    if(FieldBits::NoField != (SnapToTicksFieldMask & whichField))
        _sfSnapToTicks.syncWith(pOther->_sfSnapToTicks);

    if(FieldBits::NoField != (DrawMajorTicksFieldMask & whichField))
        _sfDrawMajorTicks.syncWith(pOther->_sfDrawMajorTicks);

    if(FieldBits::NoField != (DrawTrackFieldMask & whichField))
        _sfDrawTrack.syncWith(pOther->_sfDrawTrack);

    if(FieldBits::NoField != (DrawMinorTicksFieldMask & whichField))
        _sfDrawMinorTicks.syncWith(pOther->_sfDrawMinorTicks);

    if(FieldBits::NoField != (DrawLabelsFieldMask & whichField))
        _sfDrawLabels.syncWith(pOther->_sfDrawLabels);

    if(FieldBits::NoField != (InvertedFieldMask & whichField))
        _sfInverted.syncWith(pOther->_sfInverted);

    if(FieldBits::NoField != (LabelMapFieldMask & whichField))
        _sfLabelMap.syncWith(pOther->_sfLabelMap);

    if(FieldBits::NoField != (LabelPrototypeFieldMask & whichField))
        _sfLabelPrototype.syncWith(pOther->_sfLabelPrototype);

    if(FieldBits::NoField != (TrackDrawObjectFieldMask & whichField))
        _sfTrackDrawObject.syncWith(pOther->_sfTrackDrawObject);

    if(FieldBits::NoField != (MinTrackDrawObjectFieldMask & whichField))
        _sfMinTrackDrawObject.syncWith(pOther->_sfMinTrackDrawObject);

    if(FieldBits::NoField != (MaxTrackDrawObjectFieldMask & whichField))
        _sfMaxTrackDrawObject.syncWith(pOther->_sfMaxTrackDrawObject);

    if(FieldBits::NoField != (TrackInsetFieldMask & whichField))
        _sfTrackInset.syncWith(pOther->_sfTrackInset);

    if(FieldBits::NoField != (TrackToTickOffsetFieldMask & whichField))
        _sfTrackToTickOffset.syncWith(pOther->_sfTrackToTickOffset);


    if(FieldBits::NoField != (MajorTickPositionsFieldMask & whichField))
        _mfMajorTickPositions.syncWith(pOther->_mfMajorTickPositions, sInfo);

    if(FieldBits::NoField != (MinorTickPositionsFieldMask & whichField))
        _mfMinorTickPositions.syncWith(pOther->_mfMinorTickPositions, sInfo);

    if(FieldBits::NoField != (MajorTickDrawObjectsFieldMask & whichField))
        _mfMajorTickDrawObjects.syncWith(pOther->_mfMajorTickDrawObjects, sInfo);

    if(FieldBits::NoField != (MinorTickDrawObjectsFieldMask & whichField))
        _mfMinorTickDrawObjects.syncWith(pOther->_mfMinorTickDrawObjects, sInfo);


}

void SliderBase::execBeginEditImpl (const BitVector &whichField, 
                                                 UInt32     uiAspect,
                                                 UInt32     uiContainerSize)
{
    Inherited::execBeginEditImpl(whichField, uiAspect, uiContainerSize);

    if(FieldBits::NoField != (MajorTickPositionsFieldMask & whichField))
        _mfMajorTickPositions.beginEdit(uiAspect, uiContainerSize);

    if(FieldBits::NoField != (MinorTickPositionsFieldMask & whichField))
        _mfMinorTickPositions.beginEdit(uiAspect, uiContainerSize);

    if(FieldBits::NoField != (MajorTickDrawObjectsFieldMask & whichField))
        _mfMajorTickDrawObjects.beginEdit(uiAspect, uiContainerSize);

    if(FieldBits::NoField != (MinorTickDrawObjectsFieldMask & whichField))
        _mfMinorTickDrawObjects.beginEdit(uiAspect, uiContainerSize);

}
#endif



OSG_END_NAMESPACE

#include <OpenSG/OSGSFieldTypeDef.inl>
#include <OpenSG/OSGMFieldTypeDef.inl>

OSG_BEGIN_NAMESPACE

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldDataTraits<SliderPtr>::_type("SliderPtr", "ContainerPtr");
#endif

OSG_DLLEXPORT_SFIELD_DEF1(SliderPtr, OSG_USERINTERFACELIB_DLLTMPLMAPPING);
OSG_DLLEXPORT_MFIELD_DEF1(SliderPtr, OSG_USERINTERFACELIB_DLLTMPLMAPPING);


/*------------------------------------------------------------------------*/
/*                              cvs id's                                  */

#ifdef OSG_SGI_CC
#pragma set woff 1174
#endif

#ifdef OSG_LINUX_ICC
#pragma warning( disable : 177 )
#endif

namespace
{
    static Char8 cvsid_cpp       [] = "@(#)$Id: FCBaseTemplate_cpp.h,v 1.47 2006/03/17 17:03:19 pdaehne Exp $";
    static Char8 cvsid_hpp       [] = OSGSLIDERBASE_HEADER_CVSID;
    static Char8 cvsid_inl       [] = OSGSLIDERBASE_INLINE_CVSID;

    static Char8 cvsid_fields_hpp[] = OSGSLIDERFIELDS_HEADER_CVSID;
}

OSG_END_NAMESPACE

