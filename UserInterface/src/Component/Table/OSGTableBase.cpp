/*---------------------------------------------------------------------------*\
 *                     OpenSG ToolBox UserInterface                          *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                         www.vrac.iastate.edu                              *
 *                                                                           *
 *   Authors: David Kabala, Alden Peterson, Lee Zaniewski, Jonathan Flory    *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class Table!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#define OSG_COMPILETABLEINST

#include <stdlib.h>
#include <stdio.h>

#include <OpenSG/OSGConfig.h>

#include "OSGTableBase.h"
#include "OSGTable.h"


OSG_BEGIN_NAMESPACE

const OSG::BitVector  TableBase::HeaderFieldMask = 
    (TypeTraits<BitVector>::One << TableBase::HeaderFieldId);

const OSG::BitVector  TableBase::TableFieldMask = 
    (TypeTraits<BitVector>::One << TableBase::TableFieldId);

const OSG::BitVector  TableBase::AutoCreateColumnsFromModelFieldMask = 
    (TypeTraits<BitVector>::One << TableBase::AutoCreateColumnsFromModelFieldId);

const OSG::BitVector  TableBase::AutoResizeModeFieldMask = 
    (TypeTraits<BitVector>::One << TableBase::AutoResizeModeFieldId);

const OSG::BitVector  TableBase::RowHeightFieldMask = 
    (TypeTraits<BitVector>::One << TableBase::RowHeightFieldId);

const OSG::BitVector  TableBase::RowMarginFieldMask = 
    (TypeTraits<BitVector>::One << TableBase::RowMarginFieldId);

const OSG::BitVector  TableBase::RowSelectionAllowedFieldMask = 
    (TypeTraits<BitVector>::One << TableBase::RowSelectionAllowedFieldId);

const OSG::BitVector  TableBase::ShowHorizontalLinesFieldMask = 
    (TypeTraits<BitVector>::One << TableBase::ShowHorizontalLinesFieldId);

const OSG::BitVector  TableBase::ShowVerticalLinesFieldMask = 
    (TypeTraits<BitVector>::One << TableBase::ShowVerticalLinesFieldId);

const OSG::BitVector  TableBase::GridColorFieldMask = 
    (TypeTraits<BitVector>::One << TableBase::GridColorFieldId);

const OSG::BitVector TableBase::MTInfluenceMask = 
    (Inherited::MTInfluenceMask) | 
    (static_cast<BitVector>(0x0) << Inherited::NextFieldId); 


// Field descriptions

/*! \var TableHeaderPtr  TableBase::_sfHeader
    
*/
/*! \var ComponentPtr    TableBase::_mfTable
    
*/
/*! \var bool            TableBase::_sfAutoCreateColumnsFromModel
    
*/
/*! \var UInt32          TableBase::_sfAutoResizeMode
    
*/
/*! \var UInt32          TableBase::_sfRowHeight
    
*/
/*! \var UInt32          TableBase::_sfRowMargin
    
*/
/*! \var bool            TableBase::_sfRowSelectionAllowed
    
*/
/*! \var bool            TableBase::_sfShowHorizontalLines
    
*/
/*! \var bool            TableBase::_sfShowVerticalLines
    
*/
/*! \var Color4f         TableBase::_sfGridColor
    
*/

//! Table description

FieldDescription *TableBase::_desc[] = 
{
    new FieldDescription(SFTableHeaderPtr::getClassType(), 
                     "Header", 
                     HeaderFieldId, HeaderFieldMask,
                     false,
                     (FieldAccessMethod) &TableBase::getSFHeader),
    new FieldDescription(MFComponentPtr::getClassType(), 
                     "Table", 
                     TableFieldId, TableFieldMask,
                     false,
                     (FieldAccessMethod) &TableBase::getMFTable),
    new FieldDescription(SFBool::getClassType(), 
                     "AutoCreateColumnsFromModel", 
                     AutoCreateColumnsFromModelFieldId, AutoCreateColumnsFromModelFieldMask,
                     false,
                     (FieldAccessMethod) &TableBase::getSFAutoCreateColumnsFromModel),
    new FieldDescription(SFUInt32::getClassType(), 
                     "AutoResizeMode", 
                     AutoResizeModeFieldId, AutoResizeModeFieldMask,
                     false,
                     (FieldAccessMethod) &TableBase::getSFAutoResizeMode),
    new FieldDescription(SFUInt32::getClassType(), 
                     "RowHeight", 
                     RowHeightFieldId, RowHeightFieldMask,
                     false,
                     (FieldAccessMethod) &TableBase::getSFRowHeight),
    new FieldDescription(SFUInt32::getClassType(), 
                     "RowMargin", 
                     RowMarginFieldId, RowMarginFieldMask,
                     false,
                     (FieldAccessMethod) &TableBase::getSFRowMargin),
    new FieldDescription(SFBool::getClassType(), 
                     "RowSelectionAllowed", 
                     RowSelectionAllowedFieldId, RowSelectionAllowedFieldMask,
                     false,
                     (FieldAccessMethod) &TableBase::getSFRowSelectionAllowed),
    new FieldDescription(SFBool::getClassType(), 
                     "ShowHorizontalLines", 
                     ShowHorizontalLinesFieldId, ShowHorizontalLinesFieldMask,
                     false,
                     (FieldAccessMethod) &TableBase::getSFShowHorizontalLines),
    new FieldDescription(SFBool::getClassType(), 
                     "ShowVerticalLines", 
                     ShowVerticalLinesFieldId, ShowVerticalLinesFieldMask,
                     false,
                     (FieldAccessMethod) &TableBase::getSFShowVerticalLines),
    new FieldDescription(SFColor4f::getClassType(), 
                     "GridColor", 
                     GridColorFieldId, GridColorFieldMask,
                     false,
                     (FieldAccessMethod) &TableBase::getSFGridColor)
};


FieldContainerType TableBase::_type(
    "Table",
    "Container",
    NULL,
    (PrototypeCreateF) &TableBase::createEmpty,
    Table::initMethod,
    _desc,
    sizeof(_desc));

//OSG_FIELD_CONTAINER_DEF(TableBase, TablePtr)

/*------------------------------ get -----------------------------------*/

FieldContainerType &TableBase::getType(void) 
{
    return _type; 
} 

const FieldContainerType &TableBase::getType(void) const 
{
    return _type;
} 


FieldContainerPtr TableBase::shallowCopy(void) const 
{ 
    TablePtr returnValue; 

    newPtr(returnValue, dynamic_cast<const Table *>(this)); 

    return returnValue; 
}

UInt32 TableBase::getContainerSize(void) const 
{ 
    return sizeof(Table); 
}


#if !defined(OSG_FIXED_MFIELDSYNC)
void TableBase::executeSync(      FieldContainer &other,
                                    const BitVector      &whichField)
{
    this->executeSyncImpl((TableBase *) &other, whichField);
}
#else
void TableBase::executeSync(      FieldContainer &other,
                                    const BitVector      &whichField,                                    const SyncInfo       &sInfo     )
{
    this->executeSyncImpl((TableBase *) &other, whichField, sInfo);
}
void TableBase::execBeginEdit(const BitVector &whichField, 
                                            UInt32     uiAspect,
                                            UInt32     uiContainerSize) 
{
    this->execBeginEditImpl(whichField, uiAspect, uiContainerSize);
}

void TableBase::onDestroyAspect(UInt32 uiId, UInt32 uiAspect)
{
    Inherited::onDestroyAspect(uiId, uiAspect);

    _mfTable.terminateShare(uiAspect, this->getContainerSize());
}
#endif

/*------------------------- constructors ----------------------------------*/

#ifdef OSG_WIN32_ICL
#pragma warning (disable : 383)
#endif

TableBase::TableBase(void) :
    _sfHeader                 (TableHeaderPtr(NullFC)), 
    _mfTable                  (), 
    _sfAutoCreateColumnsFromModel(bool(true)), 
    _sfAutoResizeMode         (UInt32(Table::AUTO_RESIZE_SUBSEQUENT_COLUMNS)), 
    _sfRowHeight              (UInt32(50)), 
    _sfRowMargin              (UInt32(1)), 
    _sfRowSelectionAllowed    (bool(true)), 
    _sfShowHorizontalLines    (bool(true)), 
    _sfShowVerticalLines      (bool(true)), 
    _sfGridColor              (Color4f(0.0, 0.0, 0.0, 1.0)), 
    Inherited() 
{
}

#ifdef OSG_WIN32_ICL
#pragma warning (default : 383)
#endif

TableBase::TableBase(const TableBase &source) :
    _sfHeader                 (source._sfHeader                 ), 
    _mfTable                  (source._mfTable                  ), 
    _sfAutoCreateColumnsFromModel(source._sfAutoCreateColumnsFromModel), 
    _sfAutoResizeMode         (source._sfAutoResizeMode         ), 
    _sfRowHeight              (source._sfRowHeight              ), 
    _sfRowMargin              (source._sfRowMargin              ), 
    _sfRowSelectionAllowed    (source._sfRowSelectionAllowed    ), 
    _sfShowHorizontalLines    (source._sfShowHorizontalLines    ), 
    _sfShowVerticalLines      (source._sfShowVerticalLines      ), 
    _sfGridColor              (source._sfGridColor              ), 
    Inherited                 (source)
{
}

/*-------------------------- destructors ----------------------------------*/

TableBase::~TableBase(void)
{
}

/*------------------------------ access -----------------------------------*/

UInt32 TableBase::getBinSize(const BitVector &whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (HeaderFieldMask & whichField))
    {
        returnValue += _sfHeader.getBinSize();
    }

    if(FieldBits::NoField != (TableFieldMask & whichField))
    {
        returnValue += _mfTable.getBinSize();
    }

    if(FieldBits::NoField != (AutoCreateColumnsFromModelFieldMask & whichField))
    {
        returnValue += _sfAutoCreateColumnsFromModel.getBinSize();
    }

    if(FieldBits::NoField != (AutoResizeModeFieldMask & whichField))
    {
        returnValue += _sfAutoResizeMode.getBinSize();
    }

    if(FieldBits::NoField != (RowHeightFieldMask & whichField))
    {
        returnValue += _sfRowHeight.getBinSize();
    }

    if(FieldBits::NoField != (RowMarginFieldMask & whichField))
    {
        returnValue += _sfRowMargin.getBinSize();
    }

    if(FieldBits::NoField != (RowSelectionAllowedFieldMask & whichField))
    {
        returnValue += _sfRowSelectionAllowed.getBinSize();
    }

    if(FieldBits::NoField != (ShowHorizontalLinesFieldMask & whichField))
    {
        returnValue += _sfShowHorizontalLines.getBinSize();
    }

    if(FieldBits::NoField != (ShowVerticalLinesFieldMask & whichField))
    {
        returnValue += _sfShowVerticalLines.getBinSize();
    }

    if(FieldBits::NoField != (GridColorFieldMask & whichField))
    {
        returnValue += _sfGridColor.getBinSize();
    }


    return returnValue;
}

void TableBase::copyToBin(      BinaryDataHandler &pMem,
                                  const BitVector         &whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (HeaderFieldMask & whichField))
    {
        _sfHeader.copyToBin(pMem);
    }

    if(FieldBits::NoField != (TableFieldMask & whichField))
    {
        _mfTable.copyToBin(pMem);
    }

    if(FieldBits::NoField != (AutoCreateColumnsFromModelFieldMask & whichField))
    {
        _sfAutoCreateColumnsFromModel.copyToBin(pMem);
    }

    if(FieldBits::NoField != (AutoResizeModeFieldMask & whichField))
    {
        _sfAutoResizeMode.copyToBin(pMem);
    }

    if(FieldBits::NoField != (RowHeightFieldMask & whichField))
    {
        _sfRowHeight.copyToBin(pMem);
    }

    if(FieldBits::NoField != (RowMarginFieldMask & whichField))
    {
        _sfRowMargin.copyToBin(pMem);
    }

    if(FieldBits::NoField != (RowSelectionAllowedFieldMask & whichField))
    {
        _sfRowSelectionAllowed.copyToBin(pMem);
    }

    if(FieldBits::NoField != (ShowHorizontalLinesFieldMask & whichField))
    {
        _sfShowHorizontalLines.copyToBin(pMem);
    }

    if(FieldBits::NoField != (ShowVerticalLinesFieldMask & whichField))
    {
        _sfShowVerticalLines.copyToBin(pMem);
    }

    if(FieldBits::NoField != (GridColorFieldMask & whichField))
    {
        _sfGridColor.copyToBin(pMem);
    }


}

void TableBase::copyFromBin(      BinaryDataHandler &pMem,
                                    const BitVector    &whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (HeaderFieldMask & whichField))
    {
        _sfHeader.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (TableFieldMask & whichField))
    {
        _mfTable.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (AutoCreateColumnsFromModelFieldMask & whichField))
    {
        _sfAutoCreateColumnsFromModel.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (AutoResizeModeFieldMask & whichField))
    {
        _sfAutoResizeMode.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (RowHeightFieldMask & whichField))
    {
        _sfRowHeight.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (RowMarginFieldMask & whichField))
    {
        _sfRowMargin.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (RowSelectionAllowedFieldMask & whichField))
    {
        _sfRowSelectionAllowed.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (ShowHorizontalLinesFieldMask & whichField))
    {
        _sfShowHorizontalLines.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (ShowVerticalLinesFieldMask & whichField))
    {
        _sfShowVerticalLines.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (GridColorFieldMask & whichField))
    {
        _sfGridColor.copyFromBin(pMem);
    }


}

#if !defined(OSG_FIXED_MFIELDSYNC)
void TableBase::executeSyncImpl(      TableBase *pOther,
                                        const BitVector         &whichField)
{

    Inherited::executeSyncImpl(pOther, whichField);

    if(FieldBits::NoField != (HeaderFieldMask & whichField))
        _sfHeader.syncWith(pOther->_sfHeader);

    if(FieldBits::NoField != (TableFieldMask & whichField))
        _mfTable.syncWith(pOther->_mfTable);

    if(FieldBits::NoField != (AutoCreateColumnsFromModelFieldMask & whichField))
        _sfAutoCreateColumnsFromModel.syncWith(pOther->_sfAutoCreateColumnsFromModel);

    if(FieldBits::NoField != (AutoResizeModeFieldMask & whichField))
        _sfAutoResizeMode.syncWith(pOther->_sfAutoResizeMode);

    if(FieldBits::NoField != (RowHeightFieldMask & whichField))
        _sfRowHeight.syncWith(pOther->_sfRowHeight);

    if(FieldBits::NoField != (RowMarginFieldMask & whichField))
        _sfRowMargin.syncWith(pOther->_sfRowMargin);

    if(FieldBits::NoField != (RowSelectionAllowedFieldMask & whichField))
        _sfRowSelectionAllowed.syncWith(pOther->_sfRowSelectionAllowed);

    if(FieldBits::NoField != (ShowHorizontalLinesFieldMask & whichField))
        _sfShowHorizontalLines.syncWith(pOther->_sfShowHorizontalLines);

    if(FieldBits::NoField != (ShowVerticalLinesFieldMask & whichField))
        _sfShowVerticalLines.syncWith(pOther->_sfShowVerticalLines);

    if(FieldBits::NoField != (GridColorFieldMask & whichField))
        _sfGridColor.syncWith(pOther->_sfGridColor);


}
#else
void TableBase::executeSyncImpl(      TableBase *pOther,
                                        const BitVector         &whichField,
                                        const SyncInfo          &sInfo      )
{

    Inherited::executeSyncImpl(pOther, whichField, sInfo);

    if(FieldBits::NoField != (HeaderFieldMask & whichField))
        _sfHeader.syncWith(pOther->_sfHeader);

    if(FieldBits::NoField != (AutoCreateColumnsFromModelFieldMask & whichField))
        _sfAutoCreateColumnsFromModel.syncWith(pOther->_sfAutoCreateColumnsFromModel);

    if(FieldBits::NoField != (AutoResizeModeFieldMask & whichField))
        _sfAutoResizeMode.syncWith(pOther->_sfAutoResizeMode);

    if(FieldBits::NoField != (RowHeightFieldMask & whichField))
        _sfRowHeight.syncWith(pOther->_sfRowHeight);

    if(FieldBits::NoField != (RowMarginFieldMask & whichField))
        _sfRowMargin.syncWith(pOther->_sfRowMargin);

    if(FieldBits::NoField != (RowSelectionAllowedFieldMask & whichField))
        _sfRowSelectionAllowed.syncWith(pOther->_sfRowSelectionAllowed);

    if(FieldBits::NoField != (ShowHorizontalLinesFieldMask & whichField))
        _sfShowHorizontalLines.syncWith(pOther->_sfShowHorizontalLines);

    if(FieldBits::NoField != (ShowVerticalLinesFieldMask & whichField))
        _sfShowVerticalLines.syncWith(pOther->_sfShowVerticalLines);

    if(FieldBits::NoField != (GridColorFieldMask & whichField))
        _sfGridColor.syncWith(pOther->_sfGridColor);


    if(FieldBits::NoField != (TableFieldMask & whichField))
        _mfTable.syncWith(pOther->_mfTable, sInfo);


}

void TableBase::execBeginEditImpl (const BitVector &whichField, 
                                                 UInt32     uiAspect,
                                                 UInt32     uiContainerSize)
{
    Inherited::execBeginEditImpl(whichField, uiAspect, uiContainerSize);

    if(FieldBits::NoField != (TableFieldMask & whichField))
        _mfTable.beginEdit(uiAspect, uiContainerSize);

}
#endif



OSG_END_NAMESPACE

#include <OpenSG/OSGSFieldTypeDef.inl>
#include <OpenSG/OSGMFieldTypeDef.inl>

OSG_BEGIN_NAMESPACE

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldDataTraits<TablePtr>::_type("TablePtr", "ContainerPtr");
#endif

OSG_DLLEXPORT_SFIELD_DEF1(TablePtr, OSG_USERINTERFACELIB_DLLTMPLMAPPING);
OSG_DLLEXPORT_MFIELD_DEF1(TablePtr, OSG_USERINTERFACELIB_DLLTMPLMAPPING);


/*------------------------------------------------------------------------*/
/*                              cvs id's                                  */

#ifdef OSG_SGI_CC
#pragma set woff 1174
#endif

#ifdef OSG_LINUX_ICC
#pragma warning( disable : 177 )
#endif

namespace
{
    static Char8 cvsid_cpp       [] = "@(#)$Id: FCBaseTemplate_cpp.h,v 1.47 2006/03/17 17:03:19 pdaehne Exp $";
    static Char8 cvsid_hpp       [] = OSGTABLEBASE_HEADER_CVSID;
    static Char8 cvsid_inl       [] = OSGTABLEBASE_INLINE_CVSID;

    static Char8 cvsid_fields_hpp[] = OSGTABLEFIELDS_HEADER_CVSID;
}

OSG_END_NAMESPACE

