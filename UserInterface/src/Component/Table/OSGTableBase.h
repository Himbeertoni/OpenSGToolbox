/*---------------------------------------------------------------------------*\
 *                     OpenSG ToolBox UserInterface                          *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                         www.vrac.iastate.edu                              *
 *                                                                           *
 *   Authors: David Kabala, Alden Peterson, Lee Zaniewski, Jonathan Flory    *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class Table
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#ifndef _OSGTABLEBASE_H_
#define _OSGTABLEBASE_H_
#ifdef __sgi
#pragma once
#endif


#include <OpenSG/OSGConfig.h>
#include "OSGUserInterfaceDef.h"

#include <OpenSG/OSGBaseTypes.h>
#include <OpenSG/OSGRefPtr.h>
#include <OpenSG/OSGCoredNodePtr.h>

#include "Component/Container/OSGContainer.h" // Parent

#include "Component/Table/OSGTableHeaderFields.h" // Header type
#include "Component/OSGComponent.h" // Table type
#include <OpenSG/OSGBoolFields.h> // AutoCreateColumnsFromModel type
#include <OpenSG/OSGUInt32Fields.h> // AutoResizeMode type
#include <OpenSG/OSGUInt32Fields.h> // RowHeight type
#include <OpenSG/OSGUInt32Fields.h> // RowMargin type
#include <OpenSG/OSGBoolFields.h> // RowSelectionAllowed type
#include <OpenSG/OSGBoolFields.h> // ShowHorizontalLines type
#include <OpenSG/OSGBoolFields.h> // ShowVerticalLines type
#include <OpenSG/OSGColor4fFields.h> // GridColor type

#include "OSGTableFields.h"

OSG_BEGIN_NAMESPACE

class Table;
class BinaryDataHandler;

//! \brief Table Base Class.

class OSG_USERINTERFACELIB_DLLMAPPING TableBase : public Container
{
  private:

    typedef Container    Inherited;

    /*==========================  PUBLIC  =================================*/
  public:

    typedef TablePtr  Ptr;

    enum
    {
        HeaderFieldId                     = Inherited::NextFieldId,
        TableFieldId                      = HeaderFieldId                     + 1,
        AutoCreateColumnsFromModelFieldId = TableFieldId                      + 1,
        AutoResizeModeFieldId             = AutoCreateColumnsFromModelFieldId + 1,
        RowHeightFieldId                  = AutoResizeModeFieldId             + 1,
        RowMarginFieldId                  = RowHeightFieldId                  + 1,
        RowSelectionAllowedFieldId        = RowMarginFieldId                  + 1,
        ShowHorizontalLinesFieldId        = RowSelectionAllowedFieldId        + 1,
        ShowVerticalLinesFieldId          = ShowHorizontalLinesFieldId        + 1,
        GridColorFieldId                  = ShowVerticalLinesFieldId          + 1,
        NextFieldId                       = GridColorFieldId                  + 1
    };

    static const OSG::BitVector HeaderFieldMask;
    static const OSG::BitVector TableFieldMask;
    static const OSG::BitVector AutoCreateColumnsFromModelFieldMask;
    static const OSG::BitVector AutoResizeModeFieldMask;
    static const OSG::BitVector RowHeightFieldMask;
    static const OSG::BitVector RowMarginFieldMask;
    static const OSG::BitVector RowSelectionAllowedFieldMask;
    static const OSG::BitVector ShowHorizontalLinesFieldMask;
    static const OSG::BitVector ShowVerticalLinesFieldMask;
    static const OSG::BitVector GridColorFieldMask;


    static const OSG::BitVector MTInfluenceMask;

    /*---------------------------------------------------------------------*/
    /*! \name                    Class Get                                 */
    /*! \{                                                                 */

    static        FieldContainerType &getClassType    (void); 
    static        UInt32              getClassTypeId  (void); 

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                FieldContainer Get                            */
    /*! \{                                                                 */

    virtual       FieldContainerType &getType  (void); 
    virtual const FieldContainerType &getType  (void) const; 

    virtual       UInt32              getContainerSize(void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Get                                 */
    /*! \{                                                                 */

           SFTableHeaderPtr    *getSFHeader         (void);
           SFBool              *getSFAutoCreateColumnsFromModel(void);
           SFUInt32            *getSFAutoResizeMode (void);
           SFUInt32            *getSFRowHeight      (void);
           SFUInt32            *getSFRowMargin      (void);
           SFBool              *getSFRowSelectionAllowed(void);
           SFBool              *getSFShowHorizontalLines(void);
           SFBool              *getSFShowVerticalLines(void);
           SFColor4f           *getSFGridColor      (void);

           TableHeaderPtr      &getHeader         (void);
     const TableHeaderPtr      &getHeader         (void) const;
           bool                &getAutoCreateColumnsFromModel(void);
     const bool                &getAutoCreateColumnsFromModel(void) const;
           UInt32              &getAutoResizeMode (void);
     const UInt32              &getAutoResizeMode (void) const;
           UInt32              &getRowHeight      (void);
     const UInt32              &getRowHeight      (void) const;
           UInt32              &getRowMargin      (void);
     const UInt32              &getRowMargin      (void) const;
           bool                &getRowSelectionAllowed(void);
     const bool                &getRowSelectionAllowed(void) const;
           bool                &getShowHorizontalLines(void);
     const bool                &getShowHorizontalLines(void) const;
           bool                &getShowVerticalLines(void);
     const bool                &getShowVerticalLines(void) const;
           Color4f             &getGridColor      (void);
     const Color4f             &getGridColor      (void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Set                                 */
    /*! \{                                                                 */

     void setHeader         ( const TableHeaderPtr &value );
     void setAutoCreateColumnsFromModel( const bool &value );
     void setAutoResizeMode ( const UInt32 &value );
     void setRowHeight      ( const UInt32 &value );
     void setRowMargin      ( const UInt32 &value );
     void setRowSelectionAllowed( const bool &value );
     void setShowHorizontalLines( const bool &value );
     void setShowVerticalLines( const bool &value );
     void setGridColor      ( const Color4f &value );

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Binary Access                              */
    /*! \{                                                                 */

    virtual UInt32 getBinSize (const BitVector         &whichField);
    virtual void   copyToBin  (      BinaryDataHandler &pMem,
                               const BitVector         &whichField);
    virtual void   copyFromBin(      BinaryDataHandler &pMem,
                               const BitVector         &whichField);


    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Construction                               */
    /*! \{                                                                 */

    static  TablePtr      create          (void); 
    static  TablePtr      createEmpty     (void); 

    /*! \}                                                                 */

    /*---------------------------------------------------------------------*/
    /*! \name                       Copy                                   */
    /*! \{                                                                 */

    virtual FieldContainerPtr     shallowCopy     (void) const; 

    /*! \}                                                                 */
    /*=========================  PROTECTED  ===============================*/
  protected:

    /*---------------------------------------------------------------------*/
    /*! \name                      Fields                                  */
    /*! \{                                                                 */

    SFTableHeaderPtr    _sfHeader;
    MFComponentPtr      _mfTable;
    SFBool              _sfAutoCreateColumnsFromModel;
    SFUInt32            _sfAutoResizeMode;
    SFUInt32            _sfRowHeight;
    SFUInt32            _sfRowMargin;
    SFBool              _sfRowSelectionAllowed;
    SFBool              _sfShowHorizontalLines;
    SFBool              _sfShowVerticalLines;
    SFColor4f           _sfGridColor;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Constructors                               */
    /*! \{                                                                 */

    TableBase(void);
    TableBase(const TableBase &source);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Destructors                                */
    /*! \{                                                                 */

    virtual ~TableBase(void); 

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Get                                 */
    /*! \{                                                                 */

           MFComponentPtr      *getMFTable          (void);

           ComponentPtr        &getTable          (UInt32 index);
           MFComponentPtr      &getTable          (void);
     const MFComponentPtr      &getTable          (void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Set                                 */
    /*! \{                                                                 */


    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

#if !defined(OSG_FIXED_MFIELDSYNC)
    void executeSyncImpl(      TableBase *pOther,
                         const BitVector         &whichField);

    virtual void   executeSync(      FieldContainer    &other,
                               const BitVector         &whichField);
#else
    void executeSyncImpl(      TableBase *pOther,
                         const BitVector         &whichField,
                         const SyncInfo          &sInfo     );

    virtual void   executeSync(      FieldContainer    &other,
                               const BitVector         &whichField,
                               const SyncInfo          &sInfo);

    virtual void execBeginEdit     (const BitVector &whichField,
                                          UInt32     uiAspect,
                                          UInt32     uiContainerSize);

            void execBeginEditImpl (const BitVector &whichField,
                                          UInt32     uiAspect,
                                          UInt32     uiContainerSize);

    virtual void onDestroyAspect(UInt32 uiId, UInt32 uiAspect);
#endif

    /*! \}                                                                 */
    /*==========================  PRIVATE  ================================*/
  private:

    friend class FieldContainer;

    static FieldDescription   *_desc[];
    static FieldContainerType  _type;


    // prohibit default functions (move to 'public' if you need one)
    void operator =(const TableBase &source);
};

//---------------------------------------------------------------------------
//   Exported Types
//---------------------------------------------------------------------------


typedef TableBase *TableBaseP;

typedef osgIF<TableBase::isNodeCore,
              CoredNodePtr<Table>,
              FieldContainer::attempt_to_create_CoredNodePtr_on_non_NodeCore_FC
              >::_IRet TableNodePtr;

typedef RefPtr<TablePtr> TableRefPtr;

OSG_END_NAMESPACE

#define OSGTABLEBASE_HEADER_CVSID "@(#)$Id: FCBaseTemplate_h.h,v 1.40 2005/07/20 00:10:14 vossg Exp $"

#endif /* _OSGTABLEBASE_H_ */
