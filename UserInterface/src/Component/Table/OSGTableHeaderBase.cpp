/*---------------------------------------------------------------------------*\
 *                     OpenSG ToolBox UserInterface                          *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                         www.vrac.iastate.edu                              *
 *                                                                           *
 *   Authors: David Kabala, Alden Peterson, Lee Zaniewski, Jonathan Flory    *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class TableHeader!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#define OSG_COMPILETABLEHEADERINST

#include <stdlib.h>
#include <stdio.h>

#include <OpenSG/OSGConfig.h>

#include "OSGTableHeaderBase.h"
#include "OSGTableHeader.h"


OSG_BEGIN_NAMESPACE

const OSG::BitVector  TableHeaderBase::TableFieldMask = 
    (TypeTraits<BitVector>::One << TableHeaderBase::TableFieldId);

const OSG::BitVector  TableHeaderBase::ReorderingAllowedFieldMask = 
    (TypeTraits<BitVector>::One << TableHeaderBase::ReorderingAllowedFieldId);

const OSG::BitVector  TableHeaderBase::DefaultMarginDrawObjectFieldMask = 
    (TypeTraits<BitVector>::One << TableHeaderBase::DefaultMarginDrawObjectFieldId);

const OSG::BitVector  TableHeaderBase::MarginsFieldMask = 
    (TypeTraits<BitVector>::One << TableHeaderBase::MarginsFieldId);

const OSG::BitVector  TableHeaderBase::ColumnHeadersFieldMask = 
    (TypeTraits<BitVector>::One << TableHeaderBase::ColumnHeadersFieldId);

const OSG::BitVector TableHeaderBase::MTInfluenceMask = 
    (Inherited::MTInfluenceMask) | 
    (static_cast<BitVector>(0x0) << Inherited::NextFieldId); 


// Field descriptions

/*! \var TablePtr        TableHeaderBase::_sfTable
    
*/
/*! \var bool            TableHeaderBase::_sfReorderingAllowed
    
*/
/*! \var UIDrawObjectCanvasPtr TableHeaderBase::_sfDefaultMarginDrawObject
    
*/
/*! \var UIDrawObjectCanvasPtr TableHeaderBase::_mfMargins
    
*/
/*! \var ComponentPtr    TableHeaderBase::_mfColumnHeaders
    
*/

//! TableHeader description

FieldDescription *TableHeaderBase::_desc[] = 
{
    new FieldDescription(SFTablePtr::getClassType(), 
                     "Table", 
                     TableFieldId, TableFieldMask,
                     false,
                     (FieldAccessMethod) &TableHeaderBase::getSFTable),
    new FieldDescription(SFBool::getClassType(), 
                     "ReorderingAllowed", 
                     ReorderingAllowedFieldId, ReorderingAllowedFieldMask,
                     false,
                     (FieldAccessMethod) &TableHeaderBase::getSFReorderingAllowed),
    new FieldDescription(SFUIDrawObjectCanvasPtr::getClassType(), 
                     "DefaultMarginDrawObject", 
                     DefaultMarginDrawObjectFieldId, DefaultMarginDrawObjectFieldMask,
                     false,
                     (FieldAccessMethod) &TableHeaderBase::getSFDefaultMarginDrawObject),
    new FieldDescription(MFUIDrawObjectCanvasPtr::getClassType(), 
                     "Margins", 
                     MarginsFieldId, MarginsFieldMask,
                     false,
                     (FieldAccessMethod) &TableHeaderBase::getMFMargins),
    new FieldDescription(MFComponentPtr::getClassType(), 
                     "ColumnHeaders", 
                     ColumnHeadersFieldId, ColumnHeadersFieldMask,
                     false,
                     (FieldAccessMethod) &TableHeaderBase::getMFColumnHeaders)
};


FieldContainerType TableHeaderBase::_type(
    "TableHeader",
    "Container",
    NULL,
    (PrototypeCreateF) &TableHeaderBase::createEmpty,
    TableHeader::initMethod,
    _desc,
    sizeof(_desc));

//OSG_FIELD_CONTAINER_DEF(TableHeaderBase, TableHeaderPtr)

/*------------------------------ get -----------------------------------*/

FieldContainerType &TableHeaderBase::getType(void) 
{
    return _type; 
} 

const FieldContainerType &TableHeaderBase::getType(void) const 
{
    return _type;
} 


FieldContainerPtr TableHeaderBase::shallowCopy(void) const 
{ 
    TableHeaderPtr returnValue; 

    newPtr(returnValue, dynamic_cast<const TableHeader *>(this)); 

    return returnValue; 
}

UInt32 TableHeaderBase::getContainerSize(void) const 
{ 
    return sizeof(TableHeader); 
}


#if !defined(OSG_FIXED_MFIELDSYNC)
void TableHeaderBase::executeSync(      FieldContainer &other,
                                    const BitVector      &whichField)
{
    this->executeSyncImpl((TableHeaderBase *) &other, whichField);
}
#else
void TableHeaderBase::executeSync(      FieldContainer &other,
                                    const BitVector      &whichField,                                    const SyncInfo       &sInfo     )
{
    this->executeSyncImpl((TableHeaderBase *) &other, whichField, sInfo);
}
void TableHeaderBase::execBeginEdit(const BitVector &whichField, 
                                            UInt32     uiAspect,
                                            UInt32     uiContainerSize) 
{
    this->execBeginEditImpl(whichField, uiAspect, uiContainerSize);
}

void TableHeaderBase::onDestroyAspect(UInt32 uiId, UInt32 uiAspect)
{
    Inherited::onDestroyAspect(uiId, uiAspect);

    _mfMargins.terminateShare(uiAspect, this->getContainerSize());
    _mfColumnHeaders.terminateShare(uiAspect, this->getContainerSize());
}
#endif

/*------------------------- constructors ----------------------------------*/

#ifdef OSG_WIN32_ICL
#pragma warning (disable : 383)
#endif

TableHeaderBase::TableHeaderBase(void) :
    _sfTable                  (TablePtr(NullFC)), 
    _sfReorderingAllowed      (bool(true)), 
    _sfDefaultMarginDrawObject(UIDrawObjectCanvasPtr(NullFC)), 
    _mfMargins                (), 
    _mfColumnHeaders          (), 
    Inherited() 
{
}

#ifdef OSG_WIN32_ICL
#pragma warning (default : 383)
#endif

TableHeaderBase::TableHeaderBase(const TableHeaderBase &source) :
    _sfTable                  (source._sfTable                  ), 
    _sfReorderingAllowed      (source._sfReorderingAllowed      ), 
    _sfDefaultMarginDrawObject(source._sfDefaultMarginDrawObject), 
    _mfMargins                (source._mfMargins                ), 
    _mfColumnHeaders          (source._mfColumnHeaders          ), 
    Inherited                 (source)
{
}

/*-------------------------- destructors ----------------------------------*/

TableHeaderBase::~TableHeaderBase(void)
{
}

/*------------------------------ access -----------------------------------*/

UInt32 TableHeaderBase::getBinSize(const BitVector &whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (TableFieldMask & whichField))
    {
        returnValue += _sfTable.getBinSize();
    }

    if(FieldBits::NoField != (ReorderingAllowedFieldMask & whichField))
    {
        returnValue += _sfReorderingAllowed.getBinSize();
    }

    if(FieldBits::NoField != (DefaultMarginDrawObjectFieldMask & whichField))
    {
        returnValue += _sfDefaultMarginDrawObject.getBinSize();
    }

    if(FieldBits::NoField != (MarginsFieldMask & whichField))
    {
        returnValue += _mfMargins.getBinSize();
    }

    if(FieldBits::NoField != (ColumnHeadersFieldMask & whichField))
    {
        returnValue += _mfColumnHeaders.getBinSize();
    }


    return returnValue;
}

void TableHeaderBase::copyToBin(      BinaryDataHandler &pMem,
                                  const BitVector         &whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (TableFieldMask & whichField))
    {
        _sfTable.copyToBin(pMem);
    }

    if(FieldBits::NoField != (ReorderingAllowedFieldMask & whichField))
    {
        _sfReorderingAllowed.copyToBin(pMem);
    }

    if(FieldBits::NoField != (DefaultMarginDrawObjectFieldMask & whichField))
    {
        _sfDefaultMarginDrawObject.copyToBin(pMem);
    }

    if(FieldBits::NoField != (MarginsFieldMask & whichField))
    {
        _mfMargins.copyToBin(pMem);
    }

    if(FieldBits::NoField != (ColumnHeadersFieldMask & whichField))
    {
        _mfColumnHeaders.copyToBin(pMem);
    }


}

void TableHeaderBase::copyFromBin(      BinaryDataHandler &pMem,
                                    const BitVector    &whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (TableFieldMask & whichField))
    {
        _sfTable.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (ReorderingAllowedFieldMask & whichField))
    {
        _sfReorderingAllowed.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (DefaultMarginDrawObjectFieldMask & whichField))
    {
        _sfDefaultMarginDrawObject.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (MarginsFieldMask & whichField))
    {
        _mfMargins.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (ColumnHeadersFieldMask & whichField))
    {
        _mfColumnHeaders.copyFromBin(pMem);
    }


}

#if !defined(OSG_FIXED_MFIELDSYNC)
void TableHeaderBase::executeSyncImpl(      TableHeaderBase *pOther,
                                        const BitVector         &whichField)
{

    Inherited::executeSyncImpl(pOther, whichField);

    if(FieldBits::NoField != (TableFieldMask & whichField))
        _sfTable.syncWith(pOther->_sfTable);

    if(FieldBits::NoField != (ReorderingAllowedFieldMask & whichField))
        _sfReorderingAllowed.syncWith(pOther->_sfReorderingAllowed);

    if(FieldBits::NoField != (DefaultMarginDrawObjectFieldMask & whichField))
        _sfDefaultMarginDrawObject.syncWith(pOther->_sfDefaultMarginDrawObject);

    if(FieldBits::NoField != (MarginsFieldMask & whichField))
        _mfMargins.syncWith(pOther->_mfMargins);

    if(FieldBits::NoField != (ColumnHeadersFieldMask & whichField))
        _mfColumnHeaders.syncWith(pOther->_mfColumnHeaders);


}
#else
void TableHeaderBase::executeSyncImpl(      TableHeaderBase *pOther,
                                        const BitVector         &whichField,
                                        const SyncInfo          &sInfo      )
{

    Inherited::executeSyncImpl(pOther, whichField, sInfo);

    if(FieldBits::NoField != (TableFieldMask & whichField))
        _sfTable.syncWith(pOther->_sfTable);

    if(FieldBits::NoField != (ReorderingAllowedFieldMask & whichField))
        _sfReorderingAllowed.syncWith(pOther->_sfReorderingAllowed);

    if(FieldBits::NoField != (DefaultMarginDrawObjectFieldMask & whichField))
        _sfDefaultMarginDrawObject.syncWith(pOther->_sfDefaultMarginDrawObject);


    if(FieldBits::NoField != (MarginsFieldMask & whichField))
        _mfMargins.syncWith(pOther->_mfMargins, sInfo);

    if(FieldBits::NoField != (ColumnHeadersFieldMask & whichField))
        _mfColumnHeaders.syncWith(pOther->_mfColumnHeaders, sInfo);


}

void TableHeaderBase::execBeginEditImpl (const BitVector &whichField, 
                                                 UInt32     uiAspect,
                                                 UInt32     uiContainerSize)
{
    Inherited::execBeginEditImpl(whichField, uiAspect, uiContainerSize);

    if(FieldBits::NoField != (MarginsFieldMask & whichField))
        _mfMargins.beginEdit(uiAspect, uiContainerSize);

    if(FieldBits::NoField != (ColumnHeadersFieldMask & whichField))
        _mfColumnHeaders.beginEdit(uiAspect, uiContainerSize);

}
#endif



OSG_END_NAMESPACE

#include <OpenSG/OSGSFieldTypeDef.inl>
#include <OpenSG/OSGMFieldTypeDef.inl>

OSG_BEGIN_NAMESPACE

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldDataTraits<TableHeaderPtr>::_type("TableHeaderPtr", "ContainerPtr");
#endif

OSG_DLLEXPORT_SFIELD_DEF1(TableHeaderPtr, OSG_USERINTERFACELIB_DLLTMPLMAPPING);
OSG_DLLEXPORT_MFIELD_DEF1(TableHeaderPtr, OSG_USERINTERFACELIB_DLLTMPLMAPPING);


/*------------------------------------------------------------------------*/
/*                              cvs id's                                  */

#ifdef OSG_SGI_CC
#pragma set woff 1174
#endif

#ifdef OSG_LINUX_ICC
#pragma warning( disable : 177 )
#endif

namespace
{
    static Char8 cvsid_cpp       [] = "@(#)$Id: FCBaseTemplate_cpp.h,v 1.47 2006/03/17 17:03:19 pdaehne Exp $";
    static Char8 cvsid_hpp       [] = OSGTABLEHEADERBASE_HEADER_CVSID;
    static Char8 cvsid_inl       [] = OSGTABLEHEADERBASE_INLINE_CVSID;

    static Char8 cvsid_fields_hpp[] = OSGTABLEHEADERFIELDS_HEADER_CVSID;
}

OSG_END_NAMESPACE

