/*---------------------------------------------------------------------------*\
 *                     OpenSG ToolBox UserInterface                          *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                         www.vrac.iastate.edu                              *
 *                                                                           *
 *   Authors: David Kabala, Alden Peterson, Lee Zaniewski, Jonathan Flory    *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class DefaultTreeComponentGenerator
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#ifndef _OSGDEFAULTTREECOMPONENTGENERATORBASE_H_
#define _OSGDEFAULTTREECOMPONENTGENERATORBASE_H_
#ifdef __sgi
#pragma once
#endif


#include <OpenSG/OSGConfig.h>
#include "OSGUserInterfaceDef.h"

#include <OpenSG/OSGBaseTypes.h>
#include <OpenSG/OSGRefPtr.h>
#include <OpenSG/OSGCoredNodePtr.h>

#include "OSGTreeComponentGenerator.h" // Parent

#include "Component/Misc/OSGUIDrawObjectCanvas.h" // ExpandedDrawObjectPrototype type
#include "Component/Misc/OSGUIDrawObjectCanvas.h" // NotExpandedDrawObjectPrototype type
#include "Component/Misc/OSGUIDrawObjectCanvas.h" // LeafDrawObjectPrototype type
#include "Component/Misc/OSGUIDrawObjectCanvas.h" // NonLeafDrawObjectPrototype type
#include "Component/Misc/OSGUIDrawObjectCanvas.h" // ExpandedNonLeafDrawObjectPrototype type
#include "Component/Text/OSGLabelFields.h" // NodeLabelPrototype type
#include "Component/Container/OSGPanelFields.h" // NodePanelPrototype type
#include "Background/OSGUIBackgroundFields.h" // SelectedBackground type
#include "Background/OSGUIBackgroundFields.h" // NonSelectedBackground type
#include "Border/OSGBorderFields.h" // SelectedBorder type
#include <OpenSG/OSGColor4fFields.h> // SelectedTextColor type
#include <OpenSG/OSGColor4fFields.h> // NonSelectedTextColor type

#include "OSGDefaultTreeComponentGeneratorFields.h"

OSG_BEGIN_NAMESPACE

class DefaultTreeComponentGenerator;
class BinaryDataHandler;

//! \brief DefaultTreeComponentGenerator Base Class.

class OSG_USERINTERFACELIB_DLLMAPPING DefaultTreeComponentGeneratorBase : public TreeComponentGenerator
{
  private:

    typedef TreeComponentGenerator    Inherited;

    /*==========================  PUBLIC  =================================*/
  public:

    typedef DefaultTreeComponentGeneratorPtr  Ptr;

    enum
    {
        ExpandedDrawObjectPrototypeFieldId        = Inherited::NextFieldId,
        NotExpandedDrawObjectPrototypeFieldId     = ExpandedDrawObjectPrototypeFieldId        + 1,
        LeafDrawObjectPrototypeFieldId            = NotExpandedDrawObjectPrototypeFieldId     + 1,
        NonLeafDrawObjectPrototypeFieldId         = LeafDrawObjectPrototypeFieldId            + 1,
        ExpandedNonLeafDrawObjectPrototypeFieldId = NonLeafDrawObjectPrototypeFieldId         + 1,
        NodeLabelPrototypeFieldId                 = ExpandedNonLeafDrawObjectPrototypeFieldId + 1,
        NodePanelPrototypeFieldId                 = NodeLabelPrototypeFieldId                 + 1,
        SelectedBackgroundFieldId                 = NodePanelPrototypeFieldId                 + 1,
        NonSelectedBackgroundFieldId              = SelectedBackgroundFieldId                 + 1,
        SelectedBorderFieldId                     = NonSelectedBackgroundFieldId              + 1,
        SelectedTextColorFieldId                  = SelectedBorderFieldId                     + 1,
        NonSelectedTextColorFieldId               = SelectedTextColorFieldId                  + 1,
        NextFieldId                               = NonSelectedTextColorFieldId               + 1
    };

    static const OSG::BitVector ExpandedDrawObjectPrototypeFieldMask;
    static const OSG::BitVector NotExpandedDrawObjectPrototypeFieldMask;
    static const OSG::BitVector LeafDrawObjectPrototypeFieldMask;
    static const OSG::BitVector NonLeafDrawObjectPrototypeFieldMask;
    static const OSG::BitVector ExpandedNonLeafDrawObjectPrototypeFieldMask;
    static const OSG::BitVector NodeLabelPrototypeFieldMask;
    static const OSG::BitVector NodePanelPrototypeFieldMask;
    static const OSG::BitVector SelectedBackgroundFieldMask;
    static const OSG::BitVector NonSelectedBackgroundFieldMask;
    static const OSG::BitVector SelectedBorderFieldMask;
    static const OSG::BitVector SelectedTextColorFieldMask;
    static const OSG::BitVector NonSelectedTextColorFieldMask;


    static const OSG::BitVector MTInfluenceMask;

    /*---------------------------------------------------------------------*/
    /*! \name                    Class Get                                 */
    /*! \{                                                                 */

    static        FieldContainerType &getClassType    (void); 
    static        UInt32              getClassTypeId  (void); 

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                FieldContainer Get                            */
    /*! \{                                                                 */

    virtual       FieldContainerType &getType  (void); 
    virtual const FieldContainerType &getType  (void) const; 

    virtual       UInt32              getContainerSize(void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Get                                 */
    /*! \{                                                                 */

           SFUIDrawObjectCanvasPtr *getSFExpandedDrawObjectPrototype(void);
           SFUIDrawObjectCanvasPtr *getSFNotExpandedDrawObjectPrototype(void);
           SFUIDrawObjectCanvasPtr *getSFLeafDrawObjectPrototype(void);
           SFUIDrawObjectCanvasPtr *getSFNonLeafDrawObjectPrototype(void);
           SFUIDrawObjectCanvasPtr *getSFExpandedNonLeafDrawObjectPrototype(void);
           SFLabelPtr          *getSFNodeLabelPrototype(void);
           SFPanelPtr          *getSFNodePanelPrototype(void);
           SFUIBackgroundPtr   *getSFSelectedBackground(void);
           SFUIBackgroundPtr   *getSFNonSelectedBackground(void);
           SFBorderPtr         *getSFSelectedBorder (void);
           SFColor4f           *getSFSelectedTextColor(void);
           SFColor4f           *getSFNonSelectedTextColor(void);

           UIDrawObjectCanvasPtr &getExpandedDrawObjectPrototype(void);
     const UIDrawObjectCanvasPtr &getExpandedDrawObjectPrototype(void) const;
           UIDrawObjectCanvasPtr &getNotExpandedDrawObjectPrototype(void);
     const UIDrawObjectCanvasPtr &getNotExpandedDrawObjectPrototype(void) const;
           UIDrawObjectCanvasPtr &getLeafDrawObjectPrototype(void);
     const UIDrawObjectCanvasPtr &getLeafDrawObjectPrototype(void) const;
           UIDrawObjectCanvasPtr &getNonLeafDrawObjectPrototype(void);
     const UIDrawObjectCanvasPtr &getNonLeafDrawObjectPrototype(void) const;
           UIDrawObjectCanvasPtr &getExpandedNonLeafDrawObjectPrototype(void);
     const UIDrawObjectCanvasPtr &getExpandedNonLeafDrawObjectPrototype(void) const;
           LabelPtr            &getNodeLabelPrototype(void);
     const LabelPtr            &getNodeLabelPrototype(void) const;
           PanelPtr            &getNodePanelPrototype(void);
     const PanelPtr            &getNodePanelPrototype(void) const;
           UIBackgroundPtr     &getSelectedBackground(void);
     const UIBackgroundPtr     &getSelectedBackground(void) const;
           UIBackgroundPtr     &getNonSelectedBackground(void);
     const UIBackgroundPtr     &getNonSelectedBackground(void) const;
           BorderPtr           &getSelectedBorder (void);
     const BorderPtr           &getSelectedBorder (void) const;
           Color4f             &getSelectedTextColor(void);
     const Color4f             &getSelectedTextColor(void) const;
           Color4f             &getNonSelectedTextColor(void);
     const Color4f             &getNonSelectedTextColor(void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Set                                 */
    /*! \{                                                                 */

     void setExpandedDrawObjectPrototype( const UIDrawObjectCanvasPtr &value );
     void setNotExpandedDrawObjectPrototype( const UIDrawObjectCanvasPtr &value );
     void setLeafDrawObjectPrototype( const UIDrawObjectCanvasPtr &value );
     void setNonLeafDrawObjectPrototype( const UIDrawObjectCanvasPtr &value );
     void setExpandedNonLeafDrawObjectPrototype( const UIDrawObjectCanvasPtr &value );
     void setNodeLabelPrototype( const LabelPtr &value );
     void setNodePanelPrototype( const PanelPtr &value );
     void setSelectedBackground( const UIBackgroundPtr &value );
     void setNonSelectedBackground( const UIBackgroundPtr &value );
     void setSelectedBorder ( const BorderPtr &value );
     void setSelectedTextColor( const Color4f &value );
     void setNonSelectedTextColor( const Color4f &value );

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Binary Access                              */
    /*! \{                                                                 */

    virtual UInt32 getBinSize (const BitVector         &whichField);
    virtual void   copyToBin  (      BinaryDataHandler &pMem,
                               const BitVector         &whichField);
    virtual void   copyFromBin(      BinaryDataHandler &pMem,
                               const BitVector         &whichField);


    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Construction                               */
    /*! \{                                                                 */

    static  DefaultTreeComponentGeneratorPtr      create          (void); 
    static  DefaultTreeComponentGeneratorPtr      createEmpty     (void); 

    /*! \}                                                                 */

    /*---------------------------------------------------------------------*/
    /*! \name                       Copy                                   */
    /*! \{                                                                 */

    virtual FieldContainerPtr     shallowCopy     (void) const; 

    /*! \}                                                                 */
    /*=========================  PROTECTED  ===============================*/
  protected:

    /*---------------------------------------------------------------------*/
    /*! \name                      Fields                                  */
    /*! \{                                                                 */

    SFUIDrawObjectCanvasPtr   _sfExpandedDrawObjectPrototype;
    SFUIDrawObjectCanvasPtr   _sfNotExpandedDrawObjectPrototype;
    SFUIDrawObjectCanvasPtr   _sfLeafDrawObjectPrototype;
    SFUIDrawObjectCanvasPtr   _sfNonLeafDrawObjectPrototype;
    SFUIDrawObjectCanvasPtr   _sfExpandedNonLeafDrawObjectPrototype;
    SFLabelPtr          _sfNodeLabelPrototype;
    SFPanelPtr          _sfNodePanelPrototype;
    SFUIBackgroundPtr   _sfSelectedBackground;
    SFUIBackgroundPtr   _sfNonSelectedBackground;
    SFBorderPtr         _sfSelectedBorder;
    SFColor4f           _sfSelectedTextColor;
    SFColor4f           _sfNonSelectedTextColor;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Constructors                               */
    /*! \{                                                                 */

    DefaultTreeComponentGeneratorBase(void);
    DefaultTreeComponentGeneratorBase(const DefaultTreeComponentGeneratorBase &source);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Destructors                                */
    /*! \{                                                                 */

    virtual ~DefaultTreeComponentGeneratorBase(void); 

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

#if !defined(OSG_FIXED_MFIELDSYNC)
    void executeSyncImpl(      DefaultTreeComponentGeneratorBase *pOther,
                         const BitVector         &whichField);

    virtual void   executeSync(      FieldContainer    &other,
                               const BitVector         &whichField);
#else
    void executeSyncImpl(      DefaultTreeComponentGeneratorBase *pOther,
                         const BitVector         &whichField,
                         const SyncInfo          &sInfo     );

    virtual void   executeSync(      FieldContainer    &other,
                               const BitVector         &whichField,
                               const SyncInfo          &sInfo);

    virtual void execBeginEdit     (const BitVector &whichField,
                                          UInt32     uiAspect,
                                          UInt32     uiContainerSize);

            void execBeginEditImpl (const BitVector &whichField,
                                          UInt32     uiAspect,
                                          UInt32     uiContainerSize);

    virtual void onDestroyAspect(UInt32 uiId, UInt32 uiAspect);
#endif

    /*! \}                                                                 */
    /*==========================  PRIVATE  ================================*/
  private:

    friend class FieldContainer;

    static FieldDescription   *_desc[];
    static FieldContainerType  _type;


    // prohibit default functions (move to 'public' if you need one)
    void operator =(const DefaultTreeComponentGeneratorBase &source);
};

//---------------------------------------------------------------------------
//   Exported Types
//---------------------------------------------------------------------------


typedef DefaultTreeComponentGeneratorBase *DefaultTreeComponentGeneratorBaseP;

typedef osgIF<DefaultTreeComponentGeneratorBase::isNodeCore,
              CoredNodePtr<DefaultTreeComponentGenerator>,
              FieldContainer::attempt_to_create_CoredNodePtr_on_non_NodeCore_FC
              >::_IRet DefaultTreeComponentGeneratorNodePtr;

typedef RefPtr<DefaultTreeComponentGeneratorPtr> DefaultTreeComponentGeneratorRefPtr;

OSG_END_NAMESPACE

#define OSGDEFAULTTREECOMPONENTGENERATORBASE_HEADER_CVSID "@(#)$Id: FCBaseTemplate_h.h,v 1.40 2005/07/20 00:10:14 vossg Exp $"

#endif /* _OSGDEFAULTTREECOMPONENTGENERATORBASE_H_ */
