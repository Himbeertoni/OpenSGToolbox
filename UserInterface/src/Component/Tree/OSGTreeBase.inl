/*---------------------------------------------------------------------------*\
 *                     OpenSG ToolBox UserInterface                          *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *   Authors: David Kabala, Alden Peterson, Lee Zaniewski, Jonathan Flory    *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class Tree!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <OpenSG/OSGConfig.h>

OSG_BEGIN_NAMESPACE


//! access the type of the class
inline
OSG::FieldContainerType &TreeBase::getClassType(void)
{
    return _type; 
} 

//! access the numerical type of the class
inline
OSG::UInt32 TreeBase::getClassTypeId(void) 
{
    return _type.getId(); 
} 

//! create a new instance of the class
inline
TreePtr TreeBase::create(void) 
{
    TreePtr fc; 

    if(getClassType().getPrototype() != OSG::NullFC) 
    {
        fc = TreePtr::dcast(
            getClassType().getPrototype()-> shallowCopy()); 
    }
    
    return fc; 
}

//! create an empty new instance of the class, do not copy the prototype
inline
TreePtr TreeBase::createEmpty(void) 
{ 
    TreePtr returnValue; 
    
    newPtr(returnValue); 

    return returnValue; 
}


/*------------------------------ get -----------------------------------*/

//! Get the Tree::_sfEditable field.
inline
SFBool *TreeBase::getSFEditable(void)
{
    return &_sfEditable;
}

//! Get the Tree::_sfInvokesStopCellEditing field.
inline
SFBool *TreeBase::getSFInvokesStopCellEditing(void)
{
    return &_sfInvokesStopCellEditing;
}

//! Get the Tree::_sfRootVisible field.
inline
SFBool *TreeBase::getSFRootVisible(void)
{
    return &_sfRootVisible;
}

//! Get the Tree::_sfRowHeight field.
inline
SFUInt32 *TreeBase::getSFRowHeight(void)
{
    return &_sfRowHeight;
}

//! Get the Tree::_sfScrollsOnExpand field.
inline
SFBool *TreeBase::getSFScrollsOnExpand(void)
{
    return &_sfScrollsOnExpand;
}

//! Get the Tree::_sfShowsRootHandles field.
inline
SFBool *TreeBase::getSFShowsRootHandles(void)
{
    return &_sfShowsRootHandles;
}

//! Get the Tree::_sfToggleClickCount field.
inline
SFUInt32 *TreeBase::getSFToggleClickCount(void)
{
    return &_sfToggleClickCount;
}

//! Get the Tree::_sfVisibleRowCount field.
inline
SFUInt32 *TreeBase::getSFVisibleRowCount(void)
{
    return &_sfVisibleRowCount;
}

//! Get the Tree::_sfCellEditor field.
inline
SFCellEditorPtr *TreeBase::getSFCellEditor(void)
{
    return &_sfCellEditor;
}


//! Get the value of the Tree::_sfEditable field.
inline
bool &TreeBase::getEditable(void)
{
    return _sfEditable.getValue();
}

//! Get the value of the Tree::_sfEditable field.
inline
const bool &TreeBase::getEditable(void) const
{
    return _sfEditable.getValue();
}

//! Set the value of the Tree::_sfEditable field.
inline
void TreeBase::setEditable(const bool &value)
{
    _sfEditable.setValue(value);
}

//! Get the value of the Tree::_sfInvokesStopCellEditing field.
inline
bool &TreeBase::getInvokesStopCellEditing(void)
{
    return _sfInvokesStopCellEditing.getValue();
}

//! Get the value of the Tree::_sfInvokesStopCellEditing field.
inline
const bool &TreeBase::getInvokesStopCellEditing(void) const
{
    return _sfInvokesStopCellEditing.getValue();
}

//! Set the value of the Tree::_sfInvokesStopCellEditing field.
inline
void TreeBase::setInvokesStopCellEditing(const bool &value)
{
    _sfInvokesStopCellEditing.setValue(value);
}

//! Get the value of the Tree::_sfRootVisible field.
inline
bool &TreeBase::getRootVisible(void)
{
    return _sfRootVisible.getValue();
}

//! Get the value of the Tree::_sfRootVisible field.
inline
const bool &TreeBase::getRootVisible(void) const
{
    return _sfRootVisible.getValue();
}

//! Set the value of the Tree::_sfRootVisible field.
inline
void TreeBase::setRootVisible(const bool &value)
{
    _sfRootVisible.setValue(value);
}

//! Get the value of the Tree::_sfRowHeight field.
inline
UInt32 &TreeBase::getRowHeight(void)
{
    return _sfRowHeight.getValue();
}

//! Get the value of the Tree::_sfRowHeight field.
inline
const UInt32 &TreeBase::getRowHeight(void) const
{
    return _sfRowHeight.getValue();
}

//! Set the value of the Tree::_sfRowHeight field.
inline
void TreeBase::setRowHeight(const UInt32 &value)
{
    _sfRowHeight.setValue(value);
}

//! Get the value of the Tree::_sfScrollsOnExpand field.
inline
bool &TreeBase::getScrollsOnExpand(void)
{
    return _sfScrollsOnExpand.getValue();
}

//! Get the value of the Tree::_sfScrollsOnExpand field.
inline
const bool &TreeBase::getScrollsOnExpand(void) const
{
    return _sfScrollsOnExpand.getValue();
}

//! Set the value of the Tree::_sfScrollsOnExpand field.
inline
void TreeBase::setScrollsOnExpand(const bool &value)
{
    _sfScrollsOnExpand.setValue(value);
}

//! Get the value of the Tree::_sfShowsRootHandles field.
inline
bool &TreeBase::getShowsRootHandles(void)
{
    return _sfShowsRootHandles.getValue();
}

//! Get the value of the Tree::_sfShowsRootHandles field.
inline
const bool &TreeBase::getShowsRootHandles(void) const
{
    return _sfShowsRootHandles.getValue();
}

//! Set the value of the Tree::_sfShowsRootHandles field.
inline
void TreeBase::setShowsRootHandles(const bool &value)
{
    _sfShowsRootHandles.setValue(value);
}

//! Get the value of the Tree::_sfToggleClickCount field.
inline
UInt32 &TreeBase::getToggleClickCount(void)
{
    return _sfToggleClickCount.getValue();
}

//! Get the value of the Tree::_sfToggleClickCount field.
inline
const UInt32 &TreeBase::getToggleClickCount(void) const
{
    return _sfToggleClickCount.getValue();
}

//! Set the value of the Tree::_sfToggleClickCount field.
inline
void TreeBase::setToggleClickCount(const UInt32 &value)
{
    _sfToggleClickCount.setValue(value);
}

//! Get the value of the Tree::_sfVisibleRowCount field.
inline
UInt32 &TreeBase::getVisibleRowCount(void)
{
    return _sfVisibleRowCount.getValue();
}

//! Get the value of the Tree::_sfVisibleRowCount field.
inline
const UInt32 &TreeBase::getVisibleRowCount(void) const
{
    return _sfVisibleRowCount.getValue();
}

//! Set the value of the Tree::_sfVisibleRowCount field.
inline
void TreeBase::setVisibleRowCount(const UInt32 &value)
{
    _sfVisibleRowCount.setValue(value);
}

//! Get the value of the Tree::_sfCellEditor field.
inline
CellEditorPtr &TreeBase::getCellEditor(void)
{
    return _sfCellEditor.getValue();
}

//! Get the value of the Tree::_sfCellEditor field.
inline
const CellEditorPtr &TreeBase::getCellEditor(void) const
{
    return _sfCellEditor.getValue();
}

//! Set the value of the Tree::_sfCellEditor field.
inline
void TreeBase::setCellEditor(const CellEditorPtr &value)
{
    _sfCellEditor.setValue(value);
}


OSG_END_NAMESPACE

#define OSGTREEBASE_INLINE_CVSID "@(#)$Id: FCBaseTemplate_inl.h,v 1.20 2002/12/04 14:22:22 dirk Exp $"

