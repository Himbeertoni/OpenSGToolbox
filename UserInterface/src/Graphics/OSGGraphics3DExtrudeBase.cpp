/*---------------------------------------------------------------------------*\
 *                     OpenSG ToolBox UserInterface                          *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                         www.vrac.iastate.edu                              *
 *                                                                           *
 *   Authors: David Kabala, Alden Peterson, Lee Zaniewski, Jonathan Flory    *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class Graphics3DExtrude!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#define OSG_COMPILEGRAPHICS3DEXTRUDEINST

#include <stdlib.h>
#include <stdio.h>

#include <OpenSG/OSGConfig.h>

#include "OSGGraphics3DExtrudeBase.h"
#include "OSGGraphics3DExtrude.h"


OSG_BEGIN_NAMESPACE

const OSG::BitVector  Graphics3DExtrudeBase::UIDepthFieldMask = 
    (TypeTraits<BitVector>::One << Graphics3DExtrudeBase::UIDepthFieldId);

const OSG::BitVector  Graphics3DExtrudeBase::ExtrudeLengthFieldMask = 
    (TypeTraits<BitVector>::One << Graphics3DExtrudeBase::ExtrudeLengthFieldId);

const OSG::BitVector  Graphics3DExtrudeBase::InternalClipPlaneOffsetFieldMask = 
    (TypeTraits<BitVector>::One << Graphics3DExtrudeBase::InternalClipPlaneOffsetFieldId);

const OSG::BitVector  Graphics3DExtrudeBase::TextOffsetFieldMask = 
    (TypeTraits<BitVector>::One << Graphics3DExtrudeBase::TextOffsetFieldId);

const OSG::BitVector  Graphics3DExtrudeBase::Enable3DTextFieldMask = 
    (TypeTraits<BitVector>::One << Graphics3DExtrudeBase::Enable3DTextFieldId);

const OSG::BitVector  Graphics3DExtrudeBase::EnableLightingFieldMask = 
    (TypeTraits<BitVector>::One << Graphics3DExtrudeBase::EnableLightingFieldId);

const OSG::BitVector  Graphics3DExtrudeBase::MaterialFieldMask = 
    (TypeTraits<BitVector>::One << Graphics3DExtrudeBase::MaterialFieldId);

const OSG::BitVector Graphics3DExtrudeBase::MTInfluenceMask = 
    (Inherited::MTInfluenceMask) | 
    (static_cast<BitVector>(0x0) << Inherited::NextFieldId); 


// Field descriptions

/*! \var DepthChunkPtr   Graphics3DExtrudeBase::_sfUIDepth
    
*/
/*! \var Real32          Graphics3DExtrudeBase::_sfExtrudeLength
    
*/
/*! \var Real32          Graphics3DExtrudeBase::_sfInternalClipPlaneOffset
    
*/
/*! \var Real32          Graphics3DExtrudeBase::_sfTextOffset
    
*/
/*! \var bool            Graphics3DExtrudeBase::_sfEnable3DText
    
*/
/*! \var bool            Graphics3DExtrudeBase::_sfEnableLighting
    
*/
/*! \var MaterialPtr     Graphics3DExtrudeBase::_sfMaterial
    
*/

//! Graphics3DExtrude description

FieldDescription *Graphics3DExtrudeBase::_desc[] = 
{
    new FieldDescription(SFDepthChunkPtr::getClassType(), 
                     "UIDepth", 
                     UIDepthFieldId, UIDepthFieldMask,
                     true,
                     (FieldAccessMethod) &Graphics3DExtrudeBase::getSFUIDepth),
    new FieldDescription(SFReal32::getClassType(), 
                     "ExtrudeLength", 
                     ExtrudeLengthFieldId, ExtrudeLengthFieldMask,
                     false,
                     (FieldAccessMethod) &Graphics3DExtrudeBase::getSFExtrudeLength),
    new FieldDescription(SFReal32::getClassType(), 
                     "InternalClipPlaneOffset", 
                     InternalClipPlaneOffsetFieldId, InternalClipPlaneOffsetFieldMask,
                     false,
                     (FieldAccessMethod) &Graphics3DExtrudeBase::getSFInternalClipPlaneOffset),
    new FieldDescription(SFReal32::getClassType(), 
                     "TextOffset", 
                     TextOffsetFieldId, TextOffsetFieldMask,
                     false,
                     (FieldAccessMethod) &Graphics3DExtrudeBase::getSFTextOffset),
    new FieldDescription(SFBool::getClassType(), 
                     "Enable3DText", 
                     Enable3DTextFieldId, Enable3DTextFieldMask,
                     false,
                     (FieldAccessMethod) &Graphics3DExtrudeBase::getSFEnable3DText),
    new FieldDescription(SFBool::getClassType(), 
                     "EnableLighting", 
                     EnableLightingFieldId, EnableLightingFieldMask,
                     false,
                     (FieldAccessMethod) &Graphics3DExtrudeBase::getSFEnableLighting),
    new FieldDescription(SFMaterialPtr::getClassType(), 
                     "Material", 
                     MaterialFieldId, MaterialFieldMask,
                     false,
                     (FieldAccessMethod) &Graphics3DExtrudeBase::getSFMaterial)
};


FieldContainerType Graphics3DExtrudeBase::_type(
    "Graphics3DExtrude",
    "Graphics",
    NULL,
    (PrototypeCreateF) &Graphics3DExtrudeBase::createEmpty,
    Graphics3DExtrude::initMethod,
    _desc,
    sizeof(_desc));

//OSG_FIELD_CONTAINER_DEF(Graphics3DExtrudeBase, Graphics3DExtrudePtr)

/*------------------------------ get -----------------------------------*/

FieldContainerType &Graphics3DExtrudeBase::getType(void) 
{
    return _type; 
} 

const FieldContainerType &Graphics3DExtrudeBase::getType(void) const 
{
    return _type;
} 


FieldContainerPtr Graphics3DExtrudeBase::shallowCopy(void) const 
{ 
    Graphics3DExtrudePtr returnValue; 

    newPtr(returnValue, dynamic_cast<const Graphics3DExtrude *>(this)); 

    return returnValue; 
}

UInt32 Graphics3DExtrudeBase::getContainerSize(void) const 
{ 
    return sizeof(Graphics3DExtrude); 
}


#if !defined(OSG_FIXED_MFIELDSYNC)
void Graphics3DExtrudeBase::executeSync(      FieldContainer &other,
                                    const BitVector      &whichField)
{
    this->executeSyncImpl((Graphics3DExtrudeBase *) &other, whichField);
}
#else
void Graphics3DExtrudeBase::executeSync(      FieldContainer &other,
                                    const BitVector      &whichField,                                    const SyncInfo       &sInfo     )
{
    this->executeSyncImpl((Graphics3DExtrudeBase *) &other, whichField, sInfo);
}
void Graphics3DExtrudeBase::execBeginEdit(const BitVector &whichField, 
                                            UInt32     uiAspect,
                                            UInt32     uiContainerSize) 
{
    this->execBeginEditImpl(whichField, uiAspect, uiContainerSize);
}

void Graphics3DExtrudeBase::onDestroyAspect(UInt32 uiId, UInt32 uiAspect)
{
    Inherited::onDestroyAspect(uiId, uiAspect);

}
#endif

/*------------------------- constructors ----------------------------------*/

#ifdef OSG_WIN32_ICL
#pragma warning (disable : 383)
#endif

Graphics3DExtrudeBase::Graphics3DExtrudeBase(void) :
    _sfUIDepth                (DepthChunkPtr(NullFC)), 
    _sfExtrudeLength          (Real32(1.0)), 
    _sfInternalClipPlaneOffset(Real32(0.001)), 
    _sfTextOffset             (Real32(0.001)), 
    _sfEnable3DText           (bool(false)), 
    _sfEnableLighting         (bool(false)), 
    _sfMaterial               (MaterialPtr(NullFC)), 
    Inherited() 
{
}

#ifdef OSG_WIN32_ICL
#pragma warning (default : 383)
#endif

Graphics3DExtrudeBase::Graphics3DExtrudeBase(const Graphics3DExtrudeBase &source) :
    _sfUIDepth                (source._sfUIDepth                ), 
    _sfExtrudeLength          (source._sfExtrudeLength          ), 
    _sfInternalClipPlaneOffset(source._sfInternalClipPlaneOffset), 
    _sfTextOffset             (source._sfTextOffset             ), 
    _sfEnable3DText           (source._sfEnable3DText           ), 
    _sfEnableLighting         (source._sfEnableLighting         ), 
    _sfMaterial               (source._sfMaterial               ), 
    Inherited                 (source)
{
}

/*-------------------------- destructors ----------------------------------*/

Graphics3DExtrudeBase::~Graphics3DExtrudeBase(void)
{
}

/*------------------------------ access -----------------------------------*/

UInt32 Graphics3DExtrudeBase::getBinSize(const BitVector &whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (UIDepthFieldMask & whichField))
    {
        returnValue += _sfUIDepth.getBinSize();
    }

    if(FieldBits::NoField != (ExtrudeLengthFieldMask & whichField))
    {
        returnValue += _sfExtrudeLength.getBinSize();
    }

    if(FieldBits::NoField != (InternalClipPlaneOffsetFieldMask & whichField))
    {
        returnValue += _sfInternalClipPlaneOffset.getBinSize();
    }

    if(FieldBits::NoField != (TextOffsetFieldMask & whichField))
    {
        returnValue += _sfTextOffset.getBinSize();
    }

    if(FieldBits::NoField != (Enable3DTextFieldMask & whichField))
    {
        returnValue += _sfEnable3DText.getBinSize();
    }

    if(FieldBits::NoField != (EnableLightingFieldMask & whichField))
    {
        returnValue += _sfEnableLighting.getBinSize();
    }

    if(FieldBits::NoField != (MaterialFieldMask & whichField))
    {
        returnValue += _sfMaterial.getBinSize();
    }


    return returnValue;
}

void Graphics3DExtrudeBase::copyToBin(      BinaryDataHandler &pMem,
                                  const BitVector         &whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (UIDepthFieldMask & whichField))
    {
        _sfUIDepth.copyToBin(pMem);
    }

    if(FieldBits::NoField != (ExtrudeLengthFieldMask & whichField))
    {
        _sfExtrudeLength.copyToBin(pMem);
    }

    if(FieldBits::NoField != (InternalClipPlaneOffsetFieldMask & whichField))
    {
        _sfInternalClipPlaneOffset.copyToBin(pMem);
    }

    if(FieldBits::NoField != (TextOffsetFieldMask & whichField))
    {
        _sfTextOffset.copyToBin(pMem);
    }

    if(FieldBits::NoField != (Enable3DTextFieldMask & whichField))
    {
        _sfEnable3DText.copyToBin(pMem);
    }

    if(FieldBits::NoField != (EnableLightingFieldMask & whichField))
    {
        _sfEnableLighting.copyToBin(pMem);
    }

    if(FieldBits::NoField != (MaterialFieldMask & whichField))
    {
        _sfMaterial.copyToBin(pMem);
    }


}

void Graphics3DExtrudeBase::copyFromBin(      BinaryDataHandler &pMem,
                                    const BitVector    &whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (UIDepthFieldMask & whichField))
    {
        _sfUIDepth.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (ExtrudeLengthFieldMask & whichField))
    {
        _sfExtrudeLength.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (InternalClipPlaneOffsetFieldMask & whichField))
    {
        _sfInternalClipPlaneOffset.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (TextOffsetFieldMask & whichField))
    {
        _sfTextOffset.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (Enable3DTextFieldMask & whichField))
    {
        _sfEnable3DText.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (EnableLightingFieldMask & whichField))
    {
        _sfEnableLighting.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (MaterialFieldMask & whichField))
    {
        _sfMaterial.copyFromBin(pMem);
    }


}

#if !defined(OSG_FIXED_MFIELDSYNC)
void Graphics3DExtrudeBase::executeSyncImpl(      Graphics3DExtrudeBase *pOther,
                                        const BitVector         &whichField)
{

    Inherited::executeSyncImpl(pOther, whichField);

    if(FieldBits::NoField != (UIDepthFieldMask & whichField))
        _sfUIDepth.syncWith(pOther->_sfUIDepth);

    if(FieldBits::NoField != (ExtrudeLengthFieldMask & whichField))
        _sfExtrudeLength.syncWith(pOther->_sfExtrudeLength);

    if(FieldBits::NoField != (InternalClipPlaneOffsetFieldMask & whichField))
        _sfInternalClipPlaneOffset.syncWith(pOther->_sfInternalClipPlaneOffset);

    if(FieldBits::NoField != (TextOffsetFieldMask & whichField))
        _sfTextOffset.syncWith(pOther->_sfTextOffset);

    if(FieldBits::NoField != (Enable3DTextFieldMask & whichField))
        _sfEnable3DText.syncWith(pOther->_sfEnable3DText);

    if(FieldBits::NoField != (EnableLightingFieldMask & whichField))
        _sfEnableLighting.syncWith(pOther->_sfEnableLighting);

    if(FieldBits::NoField != (MaterialFieldMask & whichField))
        _sfMaterial.syncWith(pOther->_sfMaterial);


}
#else
void Graphics3DExtrudeBase::executeSyncImpl(      Graphics3DExtrudeBase *pOther,
                                        const BitVector         &whichField,
                                        const SyncInfo          &sInfo      )
{

    Inherited::executeSyncImpl(pOther, whichField, sInfo);

    if(FieldBits::NoField != (UIDepthFieldMask & whichField))
        _sfUIDepth.syncWith(pOther->_sfUIDepth);

    if(FieldBits::NoField != (ExtrudeLengthFieldMask & whichField))
        _sfExtrudeLength.syncWith(pOther->_sfExtrudeLength);

    if(FieldBits::NoField != (InternalClipPlaneOffsetFieldMask & whichField))
        _sfInternalClipPlaneOffset.syncWith(pOther->_sfInternalClipPlaneOffset);

    if(FieldBits::NoField != (TextOffsetFieldMask & whichField))
        _sfTextOffset.syncWith(pOther->_sfTextOffset);

    if(FieldBits::NoField != (Enable3DTextFieldMask & whichField))
        _sfEnable3DText.syncWith(pOther->_sfEnable3DText);

    if(FieldBits::NoField != (EnableLightingFieldMask & whichField))
        _sfEnableLighting.syncWith(pOther->_sfEnableLighting);

    if(FieldBits::NoField != (MaterialFieldMask & whichField))
        _sfMaterial.syncWith(pOther->_sfMaterial);



}

void Graphics3DExtrudeBase::execBeginEditImpl (const BitVector &whichField, 
                                                 UInt32     uiAspect,
                                                 UInt32     uiContainerSize)
{
    Inherited::execBeginEditImpl(whichField, uiAspect, uiContainerSize);

}
#endif



OSG_END_NAMESPACE

#include <OpenSG/OSGSFieldTypeDef.inl>
#include <OpenSG/OSGMFieldTypeDef.inl>

OSG_BEGIN_NAMESPACE

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldDataTraits<Graphics3DExtrudePtr>::_type("Graphics3DExtrudePtr", "GraphicsPtr");
#endif

OSG_DLLEXPORT_SFIELD_DEF1(Graphics3DExtrudePtr, OSG_USERINTERFACELIB_DLLTMPLMAPPING);
OSG_DLLEXPORT_MFIELD_DEF1(Graphics3DExtrudePtr, OSG_USERINTERFACELIB_DLLTMPLMAPPING);


/*------------------------------------------------------------------------*/
/*                              cvs id's                                  */

#ifdef OSG_SGI_CC
#pragma set woff 1174
#endif

#ifdef OSG_LINUX_ICC
#pragma warning( disable : 177 )
#endif

namespace
{
    static Char8 cvsid_cpp       [] = "@(#)$Id: FCBaseTemplate_cpp.h,v 1.47 2006/03/17 17:03:19 pdaehne Exp $";
    static Char8 cvsid_hpp       [] = OSGGRAPHICS3DEXTRUDEBASE_HEADER_CVSID;
    static Char8 cvsid_inl       [] = OSGGRAPHICS3DEXTRUDEBASE_INLINE_CVSID;

    static Char8 cvsid_fields_hpp[] = OSGGRAPHICS3DEXTRUDEFIELDS_HEADER_CVSID;
}

OSG_END_NAMESPACE

