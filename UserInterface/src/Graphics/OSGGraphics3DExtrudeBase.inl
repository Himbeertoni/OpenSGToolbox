/*---------------------------------------------------------------------------*\
 *                     OpenSG ToolBox UserInterface                          *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *   Authors: David Kabala, Alden Peterson, Lee Zaniewski, Jonathan Flory    *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class Graphics3DExtrude!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <OpenSG/OSGConfig.h>

OSG_BEGIN_NAMESPACE


//! access the type of the class
inline
OSG::FieldContainerType &Graphics3DExtrudeBase::getClassType(void)
{
    return _type; 
} 

//! access the numerical type of the class
inline
OSG::UInt32 Graphics3DExtrudeBase::getClassTypeId(void) 
{
    return _type.getId(); 
} 

//! create a new instance of the class
inline
Graphics3DExtrudePtr Graphics3DExtrudeBase::create(void) 
{
    Graphics3DExtrudePtr fc; 

    if(getClassType().getPrototype() != OSG::NullFC) 
    {
        fc = Graphics3DExtrudePtr::dcast(
            getClassType().getPrototype()-> shallowCopy()); 
    }
    
    return fc; 
}

//! create an empty new instance of the class, do not copy the prototype
inline
Graphics3DExtrudePtr Graphics3DExtrudeBase::createEmpty(void) 
{ 
    Graphics3DExtrudePtr returnValue; 
    
    newPtr(returnValue); 

    return returnValue; 
}


/*------------------------------ get -----------------------------------*/

//! Get the Graphics3DExtrude::_sfUIDepth field.
inline
SFDepthChunkPtr *Graphics3DExtrudeBase::getSFUIDepth(void)
{
    return &_sfUIDepth;
}

//! Get the Graphics3DExtrude::_sfExtrudeLength field.
inline
SFReal32 *Graphics3DExtrudeBase::getSFExtrudeLength(void)
{
    return &_sfExtrudeLength;
}

//! Get the Graphics3DExtrude::_sfInternalClipPlaneOffset field.
inline
SFReal32 *Graphics3DExtrudeBase::getSFInternalClipPlaneOffset(void)
{
    return &_sfInternalClipPlaneOffset;
}

//! Get the Graphics3DExtrude::_sfTextOffset field.
inline
SFReal32 *Graphics3DExtrudeBase::getSFTextOffset(void)
{
    return &_sfTextOffset;
}

//! Get the Graphics3DExtrude::_sfEnable3DText field.
inline
SFBool *Graphics3DExtrudeBase::getSFEnable3DText(void)
{
    return &_sfEnable3DText;
}

//! Get the Graphics3DExtrude::_sfEnableLighting field.
inline
SFBool *Graphics3DExtrudeBase::getSFEnableLighting(void)
{
    return &_sfEnableLighting;
}

//! Get the Graphics3DExtrude::_sfMaterial field.
inline
SFMaterialPtr *Graphics3DExtrudeBase::getSFMaterial(void)
{
    return &_sfMaterial;
}


//! Get the value of the Graphics3DExtrude::_sfUIDepth field.
inline
DepthChunkPtr &Graphics3DExtrudeBase::getUIDepth(void)
{
    return _sfUIDepth.getValue();
}

//! Get the value of the Graphics3DExtrude::_sfUIDepth field.
inline
const DepthChunkPtr &Graphics3DExtrudeBase::getUIDepth(void) const
{
    return _sfUIDepth.getValue();
}

//! Set the value of the Graphics3DExtrude::_sfUIDepth field.
inline
void Graphics3DExtrudeBase::setUIDepth(const DepthChunkPtr &value)
{
    _sfUIDepth.setValue(value);
}

//! Get the value of the Graphics3DExtrude::_sfExtrudeLength field.
inline
Real32 &Graphics3DExtrudeBase::getExtrudeLength(void)
{
    return _sfExtrudeLength.getValue();
}

//! Get the value of the Graphics3DExtrude::_sfExtrudeLength field.
inline
const Real32 &Graphics3DExtrudeBase::getExtrudeLength(void) const
{
    return _sfExtrudeLength.getValue();
}

//! Set the value of the Graphics3DExtrude::_sfExtrudeLength field.
inline
void Graphics3DExtrudeBase::setExtrudeLength(const Real32 &value)
{
    _sfExtrudeLength.setValue(value);
}

//! Get the value of the Graphics3DExtrude::_sfInternalClipPlaneOffset field.
inline
Real32 &Graphics3DExtrudeBase::getInternalClipPlaneOffset(void)
{
    return _sfInternalClipPlaneOffset.getValue();
}

//! Get the value of the Graphics3DExtrude::_sfInternalClipPlaneOffset field.
inline
const Real32 &Graphics3DExtrudeBase::getInternalClipPlaneOffset(void) const
{
    return _sfInternalClipPlaneOffset.getValue();
}

//! Set the value of the Graphics3DExtrude::_sfInternalClipPlaneOffset field.
inline
void Graphics3DExtrudeBase::setInternalClipPlaneOffset(const Real32 &value)
{
    _sfInternalClipPlaneOffset.setValue(value);
}

//! Get the value of the Graphics3DExtrude::_sfTextOffset field.
inline
Real32 &Graphics3DExtrudeBase::getTextOffset(void)
{
    return _sfTextOffset.getValue();
}

//! Get the value of the Graphics3DExtrude::_sfTextOffset field.
inline
const Real32 &Graphics3DExtrudeBase::getTextOffset(void) const
{
    return _sfTextOffset.getValue();
}

//! Set the value of the Graphics3DExtrude::_sfTextOffset field.
inline
void Graphics3DExtrudeBase::setTextOffset(const Real32 &value)
{
    _sfTextOffset.setValue(value);
}

//! Get the value of the Graphics3DExtrude::_sfEnable3DText field.
inline
bool &Graphics3DExtrudeBase::getEnable3DText(void)
{
    return _sfEnable3DText.getValue();
}

//! Get the value of the Graphics3DExtrude::_sfEnable3DText field.
inline
const bool &Graphics3DExtrudeBase::getEnable3DText(void) const
{
    return _sfEnable3DText.getValue();
}

//! Set the value of the Graphics3DExtrude::_sfEnable3DText field.
inline
void Graphics3DExtrudeBase::setEnable3DText(const bool &value)
{
    _sfEnable3DText.setValue(value);
}

//! Get the value of the Graphics3DExtrude::_sfEnableLighting field.
inline
bool &Graphics3DExtrudeBase::getEnableLighting(void)
{
    return _sfEnableLighting.getValue();
}

//! Get the value of the Graphics3DExtrude::_sfEnableLighting field.
inline
const bool &Graphics3DExtrudeBase::getEnableLighting(void) const
{
    return _sfEnableLighting.getValue();
}

//! Set the value of the Graphics3DExtrude::_sfEnableLighting field.
inline
void Graphics3DExtrudeBase::setEnableLighting(const bool &value)
{
    _sfEnableLighting.setValue(value);
}

//! Get the value of the Graphics3DExtrude::_sfMaterial field.
inline
MaterialPtr &Graphics3DExtrudeBase::getMaterial(void)
{
    return _sfMaterial.getValue();
}

//! Get the value of the Graphics3DExtrude::_sfMaterial field.
inline
const MaterialPtr &Graphics3DExtrudeBase::getMaterial(void) const
{
    return _sfMaterial.getValue();
}

//! Set the value of the Graphics3DExtrude::_sfMaterial field.
inline
void Graphics3DExtrudeBase::setMaterial(const MaterialPtr &value)
{
    _sfMaterial.setValue(value);
}


OSG_END_NAMESPACE

#define OSGGRAPHICS3DEXTRUDEBASE_INLINE_CVSID "@(#)$Id: FCBaseTemplate_inl.h,v 1.20 2002/12/04 14:22:22 dirk Exp $"

