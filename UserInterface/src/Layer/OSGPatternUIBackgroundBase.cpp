/*---------------------------------------------------------------------------*\
 *                     OpenSG ToolBox UserInterface                          *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                         www.vrac.iastate.edu                              *
 *                                                                           *
 *   Authors: David Kabala, Alden Peterson, Lee Zaniewski, Jonathan Flory    *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class PatternUIBackground!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#define OSG_COMPILEPATTERNUIBACKGROUNDINST

#include <stdlib.h>
#include <stdio.h>

#include <OpenSG/OSGConfig.h>

#include "OSGPatternUIBackgroundBase.h"
#include "OSGPatternUIBackground.h"


OSG_BEGIN_NAMESPACE

const OSG::BitVector  PatternUIBackgroundBase::TextureFieldMask = 
    (TypeTraits<BitVector>::One << PatternUIBackgroundBase::TextureFieldId);

const OSG::BitVector  PatternUIBackgroundBase::PatternSizeFieldMask = 
    (TypeTraits<BitVector>::One << PatternUIBackgroundBase::PatternSizeFieldId);

const OSG::BitVector  PatternUIBackgroundBase::VerticalAlignmentFieldMask = 
    (TypeTraits<BitVector>::One << PatternUIBackgroundBase::VerticalAlignmentFieldId);

const OSG::BitVector  PatternUIBackgroundBase::HorizontalAlignmentFieldMask = 
    (TypeTraits<BitVector>::One << PatternUIBackgroundBase::HorizontalAlignmentFieldId);

const OSG::BitVector  PatternUIBackgroundBase::HorizontalRepeatFieldMask = 
    (TypeTraits<BitVector>::One << PatternUIBackgroundBase::HorizontalRepeatFieldId);

const OSG::BitVector  PatternUIBackgroundBase::VerticalRepeatFieldMask = 
    (TypeTraits<BitVector>::One << PatternUIBackgroundBase::VerticalRepeatFieldId);

const OSG::BitVector  PatternUIBackgroundBase::HorizontalRepeatValueFieldMask = 
    (TypeTraits<BitVector>::One << PatternUIBackgroundBase::HorizontalRepeatValueFieldId);

const OSG::BitVector  PatternUIBackgroundBase::VerticalRepeatValueFieldMask = 
    (TypeTraits<BitVector>::One << PatternUIBackgroundBase::VerticalRepeatValueFieldId);

const OSG::BitVector  PatternUIBackgroundBase::TopLeftTextureCoordFieldMask = 
    (TypeTraits<BitVector>::One << PatternUIBackgroundBase::TopLeftTextureCoordFieldId);

const OSG::BitVector  PatternUIBackgroundBase::BottomRightTextureCoordFieldMask = 
    (TypeTraits<BitVector>::One << PatternUIBackgroundBase::BottomRightTextureCoordFieldId);

const OSG::BitVector PatternUIBackgroundBase::MTInfluenceMask = 
    (Inherited::MTInfluenceMask) | 
    (static_cast<BitVector>(0x0) << Inherited::NextFieldId); 


// Field descriptions

/*! \var TextureChunkPtr PatternUIBackgroundBase::_sfTexture
    
*/
/*! \var Vec2f           PatternUIBackgroundBase::_sfPatternSize
    
*/
/*! \var Real32          PatternUIBackgroundBase::_sfVerticalAlignment
    
*/
/*! \var Real32          PatternUIBackgroundBase::_sfHorizontalAlignment
    
*/
/*! \var UInt32          PatternUIBackgroundBase::_sfHorizontalRepeat
    
*/
/*! \var UInt32          PatternUIBackgroundBase::_sfVerticalRepeat
    
*/
/*! \var Real32          PatternUIBackgroundBase::_sfHorizontalRepeatValue
    
*/
/*! \var Real32          PatternUIBackgroundBase::_sfVerticalRepeatValue
    
*/
/*! \var Vec2f           PatternUIBackgroundBase::_sfTopLeftTextureCoord
    
*/
/*! \var Vec2f           PatternUIBackgroundBase::_sfBottomRightTextureCoord
    
*/

//! PatternUIBackground description

FieldDescription *PatternUIBackgroundBase::_desc[] = 
{
    new FieldDescription(SFTextureChunkPtr::getClassType(), 
                     "Texture", 
                     TextureFieldId, TextureFieldMask,
                     false,
                     (FieldAccessMethod) &PatternUIBackgroundBase::getSFTexture),
    new FieldDescription(SFVec2f::getClassType(), 
                     "PatternSize", 
                     PatternSizeFieldId, PatternSizeFieldMask,
                     false,
                     (FieldAccessMethod) &PatternUIBackgroundBase::getSFPatternSize),
    new FieldDescription(SFReal32::getClassType(), 
                     "VerticalAlignment", 
                     VerticalAlignmentFieldId, VerticalAlignmentFieldMask,
                     false,
                     (FieldAccessMethod) &PatternUIBackgroundBase::getSFVerticalAlignment),
    new FieldDescription(SFReal32::getClassType(), 
                     "HorizontalAlignment", 
                     HorizontalAlignmentFieldId, HorizontalAlignmentFieldMask,
                     false,
                     (FieldAccessMethod) &PatternUIBackgroundBase::getSFHorizontalAlignment),
    new FieldDescription(SFUInt32::getClassType(), 
                     "HorizontalRepeat", 
                     HorizontalRepeatFieldId, HorizontalRepeatFieldMask,
                     false,
                     (FieldAccessMethod) &PatternUIBackgroundBase::getSFHorizontalRepeat),
    new FieldDescription(SFUInt32::getClassType(), 
                     "VerticalRepeat", 
                     VerticalRepeatFieldId, VerticalRepeatFieldMask,
                     false,
                     (FieldAccessMethod) &PatternUIBackgroundBase::getSFVerticalRepeat),
    new FieldDescription(SFReal32::getClassType(), 
                     "HorizontalRepeatValue", 
                     HorizontalRepeatValueFieldId, HorizontalRepeatValueFieldMask,
                     false,
                     (FieldAccessMethod) &PatternUIBackgroundBase::getSFHorizontalRepeatValue),
    new FieldDescription(SFReal32::getClassType(), 
                     "VerticalRepeatValue", 
                     VerticalRepeatValueFieldId, VerticalRepeatValueFieldMask,
                     false,
                     (FieldAccessMethod) &PatternUIBackgroundBase::getSFVerticalRepeatValue),
    new FieldDescription(SFVec2f::getClassType(), 
                     "TopLeftTextureCoord", 
                     TopLeftTextureCoordFieldId, TopLeftTextureCoordFieldMask,
                     false,
                     (FieldAccessMethod) &PatternUIBackgroundBase::getSFTopLeftTextureCoord),
    new FieldDescription(SFVec2f::getClassType(), 
                     "BottomRightTextureCoord", 
                     BottomRightTextureCoordFieldId, BottomRightTextureCoordFieldMask,
                     false,
                     (FieldAccessMethod) &PatternUIBackgroundBase::getSFBottomRightTextureCoord)
};


FieldContainerType PatternUIBackgroundBase::_type(
    "PatternUIBackground",
    "UIBackground",
    NULL,
    (PrototypeCreateF) &PatternUIBackgroundBase::createEmpty,
    PatternUIBackground::initMethod,
    _desc,
    sizeof(_desc));

//OSG_FIELD_CONTAINER_DEF(PatternUIBackgroundBase, PatternUIBackgroundPtr)

/*------------------------------ get -----------------------------------*/

FieldContainerType &PatternUIBackgroundBase::getType(void) 
{
    return _type; 
} 

const FieldContainerType &PatternUIBackgroundBase::getType(void) const 
{
    return _type;
} 


FieldContainerPtr PatternUIBackgroundBase::shallowCopy(void) const 
{ 
    PatternUIBackgroundPtr returnValue; 

    newPtr(returnValue, dynamic_cast<const PatternUIBackground *>(this)); 

    return returnValue; 
}

UInt32 PatternUIBackgroundBase::getContainerSize(void) const 
{ 
    return sizeof(PatternUIBackground); 
}


#if !defined(OSG_FIXED_MFIELDSYNC)
void PatternUIBackgroundBase::executeSync(      FieldContainer &other,
                                    const BitVector      &whichField)
{
    this->executeSyncImpl((PatternUIBackgroundBase *) &other, whichField);
}
#else
void PatternUIBackgroundBase::executeSync(      FieldContainer &other,
                                    const BitVector      &whichField,                                    const SyncInfo       &sInfo     )
{
    this->executeSyncImpl((PatternUIBackgroundBase *) &other, whichField, sInfo);
}
void PatternUIBackgroundBase::execBeginEdit(const BitVector &whichField, 
                                            UInt32     uiAspect,
                                            UInt32     uiContainerSize) 
{
    this->execBeginEditImpl(whichField, uiAspect, uiContainerSize);
}

void PatternUIBackgroundBase::onDestroyAspect(UInt32 uiId, UInt32 uiAspect)
{
    Inherited::onDestroyAspect(uiId, uiAspect);

}
#endif

/*------------------------- constructors ----------------------------------*/

#ifdef OSG_WIN32_ICL
#pragma warning (disable : 383)
#endif

PatternUIBackgroundBase::PatternUIBackgroundBase(void) :
    _sfTexture                (), 
    _sfPatternSize            (Vec2f(-1,-1)), 
    _sfVerticalAlignment      (Real32(0.5)), 
    _sfHorizontalAlignment    (Real32(0.5)), 
    _sfHorizontalRepeat       (UInt32(PatternUIBackground::PATTERN_REPEAT_BY_POINT)), 
    _sfVerticalRepeat         (UInt32(PatternUIBackground::PATTERN_REPEAT_BY_POINT)), 
    _sfHorizontalRepeatValue  (Real32(1)), 
    _sfVerticalRepeatValue    (Real32(1)), 
    _sfTopLeftTextureCoord    (Vec2f(0.0,0.0)), 
    _sfBottomRightTextureCoord(Vec2f(1.0,1.0)), 
    Inherited() 
{
}

#ifdef OSG_WIN32_ICL
#pragma warning (default : 383)
#endif

PatternUIBackgroundBase::PatternUIBackgroundBase(const PatternUIBackgroundBase &source) :
    _sfTexture                (source._sfTexture                ), 
    _sfPatternSize            (source._sfPatternSize            ), 
    _sfVerticalAlignment      (source._sfVerticalAlignment      ), 
    _sfHorizontalAlignment    (source._sfHorizontalAlignment    ), 
    _sfHorizontalRepeat       (source._sfHorizontalRepeat       ), 
    _sfVerticalRepeat         (source._sfVerticalRepeat         ), 
    _sfHorizontalRepeatValue  (source._sfHorizontalRepeatValue  ), 
    _sfVerticalRepeatValue    (source._sfVerticalRepeatValue    ), 
    _sfTopLeftTextureCoord    (source._sfTopLeftTextureCoord    ), 
    _sfBottomRightTextureCoord(source._sfBottomRightTextureCoord), 
    Inherited                 (source)
{
}

/*-------------------------- destructors ----------------------------------*/

PatternUIBackgroundBase::~PatternUIBackgroundBase(void)
{
}

/*------------------------------ access -----------------------------------*/

UInt32 PatternUIBackgroundBase::getBinSize(const BitVector &whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (TextureFieldMask & whichField))
    {
        returnValue += _sfTexture.getBinSize();
    }

    if(FieldBits::NoField != (PatternSizeFieldMask & whichField))
    {
        returnValue += _sfPatternSize.getBinSize();
    }

    if(FieldBits::NoField != (VerticalAlignmentFieldMask & whichField))
    {
        returnValue += _sfVerticalAlignment.getBinSize();
    }

    if(FieldBits::NoField != (HorizontalAlignmentFieldMask & whichField))
    {
        returnValue += _sfHorizontalAlignment.getBinSize();
    }

    if(FieldBits::NoField != (HorizontalRepeatFieldMask & whichField))
    {
        returnValue += _sfHorizontalRepeat.getBinSize();
    }

    if(FieldBits::NoField != (VerticalRepeatFieldMask & whichField))
    {
        returnValue += _sfVerticalRepeat.getBinSize();
    }

    if(FieldBits::NoField != (HorizontalRepeatValueFieldMask & whichField))
    {
        returnValue += _sfHorizontalRepeatValue.getBinSize();
    }

    if(FieldBits::NoField != (VerticalRepeatValueFieldMask & whichField))
    {
        returnValue += _sfVerticalRepeatValue.getBinSize();
    }

    if(FieldBits::NoField != (TopLeftTextureCoordFieldMask & whichField))
    {
        returnValue += _sfTopLeftTextureCoord.getBinSize();
    }

    if(FieldBits::NoField != (BottomRightTextureCoordFieldMask & whichField))
    {
        returnValue += _sfBottomRightTextureCoord.getBinSize();
    }


    return returnValue;
}

void PatternUIBackgroundBase::copyToBin(      BinaryDataHandler &pMem,
                                  const BitVector         &whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (TextureFieldMask & whichField))
    {
        _sfTexture.copyToBin(pMem);
    }

    if(FieldBits::NoField != (PatternSizeFieldMask & whichField))
    {
        _sfPatternSize.copyToBin(pMem);
    }

    if(FieldBits::NoField != (VerticalAlignmentFieldMask & whichField))
    {
        _sfVerticalAlignment.copyToBin(pMem);
    }

    if(FieldBits::NoField != (HorizontalAlignmentFieldMask & whichField))
    {
        _sfHorizontalAlignment.copyToBin(pMem);
    }

    if(FieldBits::NoField != (HorizontalRepeatFieldMask & whichField))
    {
        _sfHorizontalRepeat.copyToBin(pMem);
    }

    if(FieldBits::NoField != (VerticalRepeatFieldMask & whichField))
    {
        _sfVerticalRepeat.copyToBin(pMem);
    }

    if(FieldBits::NoField != (HorizontalRepeatValueFieldMask & whichField))
    {
        _sfHorizontalRepeatValue.copyToBin(pMem);
    }

    if(FieldBits::NoField != (VerticalRepeatValueFieldMask & whichField))
    {
        _sfVerticalRepeatValue.copyToBin(pMem);
    }

    if(FieldBits::NoField != (TopLeftTextureCoordFieldMask & whichField))
    {
        _sfTopLeftTextureCoord.copyToBin(pMem);
    }

    if(FieldBits::NoField != (BottomRightTextureCoordFieldMask & whichField))
    {
        _sfBottomRightTextureCoord.copyToBin(pMem);
    }


}

void PatternUIBackgroundBase::copyFromBin(      BinaryDataHandler &pMem,
                                    const BitVector    &whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (TextureFieldMask & whichField))
    {
        _sfTexture.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (PatternSizeFieldMask & whichField))
    {
        _sfPatternSize.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (VerticalAlignmentFieldMask & whichField))
    {
        _sfVerticalAlignment.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (HorizontalAlignmentFieldMask & whichField))
    {
        _sfHorizontalAlignment.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (HorizontalRepeatFieldMask & whichField))
    {
        _sfHorizontalRepeat.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (VerticalRepeatFieldMask & whichField))
    {
        _sfVerticalRepeat.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (HorizontalRepeatValueFieldMask & whichField))
    {
        _sfHorizontalRepeatValue.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (VerticalRepeatValueFieldMask & whichField))
    {
        _sfVerticalRepeatValue.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (TopLeftTextureCoordFieldMask & whichField))
    {
        _sfTopLeftTextureCoord.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (BottomRightTextureCoordFieldMask & whichField))
    {
        _sfBottomRightTextureCoord.copyFromBin(pMem);
    }


}

#if !defined(OSG_FIXED_MFIELDSYNC)
void PatternUIBackgroundBase::executeSyncImpl(      PatternUIBackgroundBase *pOther,
                                        const BitVector         &whichField)
{

    Inherited::executeSyncImpl(pOther, whichField);

    if(FieldBits::NoField != (TextureFieldMask & whichField))
        _sfTexture.syncWith(pOther->_sfTexture);

    if(FieldBits::NoField != (PatternSizeFieldMask & whichField))
        _sfPatternSize.syncWith(pOther->_sfPatternSize);

    if(FieldBits::NoField != (VerticalAlignmentFieldMask & whichField))
        _sfVerticalAlignment.syncWith(pOther->_sfVerticalAlignment);

    if(FieldBits::NoField != (HorizontalAlignmentFieldMask & whichField))
        _sfHorizontalAlignment.syncWith(pOther->_sfHorizontalAlignment);

    if(FieldBits::NoField != (HorizontalRepeatFieldMask & whichField))
        _sfHorizontalRepeat.syncWith(pOther->_sfHorizontalRepeat);

    if(FieldBits::NoField != (VerticalRepeatFieldMask & whichField))
        _sfVerticalRepeat.syncWith(pOther->_sfVerticalRepeat);

    if(FieldBits::NoField != (HorizontalRepeatValueFieldMask & whichField))
        _sfHorizontalRepeatValue.syncWith(pOther->_sfHorizontalRepeatValue);

    if(FieldBits::NoField != (VerticalRepeatValueFieldMask & whichField))
        _sfVerticalRepeatValue.syncWith(pOther->_sfVerticalRepeatValue);

    if(FieldBits::NoField != (TopLeftTextureCoordFieldMask & whichField))
        _sfTopLeftTextureCoord.syncWith(pOther->_sfTopLeftTextureCoord);

    if(FieldBits::NoField != (BottomRightTextureCoordFieldMask & whichField))
        _sfBottomRightTextureCoord.syncWith(pOther->_sfBottomRightTextureCoord);


}
#else
void PatternUIBackgroundBase::executeSyncImpl(      PatternUIBackgroundBase *pOther,
                                        const BitVector         &whichField,
                                        const SyncInfo          &sInfo      )
{

    Inherited::executeSyncImpl(pOther, whichField, sInfo);

    if(FieldBits::NoField != (TextureFieldMask & whichField))
        _sfTexture.syncWith(pOther->_sfTexture);

    if(FieldBits::NoField != (PatternSizeFieldMask & whichField))
        _sfPatternSize.syncWith(pOther->_sfPatternSize);

    if(FieldBits::NoField != (VerticalAlignmentFieldMask & whichField))
        _sfVerticalAlignment.syncWith(pOther->_sfVerticalAlignment);

    if(FieldBits::NoField != (HorizontalAlignmentFieldMask & whichField))
        _sfHorizontalAlignment.syncWith(pOther->_sfHorizontalAlignment);

    if(FieldBits::NoField != (HorizontalRepeatFieldMask & whichField))
        _sfHorizontalRepeat.syncWith(pOther->_sfHorizontalRepeat);

    if(FieldBits::NoField != (VerticalRepeatFieldMask & whichField))
        _sfVerticalRepeat.syncWith(pOther->_sfVerticalRepeat);

    if(FieldBits::NoField != (HorizontalRepeatValueFieldMask & whichField))
        _sfHorizontalRepeatValue.syncWith(pOther->_sfHorizontalRepeatValue);

    if(FieldBits::NoField != (VerticalRepeatValueFieldMask & whichField))
        _sfVerticalRepeatValue.syncWith(pOther->_sfVerticalRepeatValue);

    if(FieldBits::NoField != (TopLeftTextureCoordFieldMask & whichField))
        _sfTopLeftTextureCoord.syncWith(pOther->_sfTopLeftTextureCoord);

    if(FieldBits::NoField != (BottomRightTextureCoordFieldMask & whichField))
        _sfBottomRightTextureCoord.syncWith(pOther->_sfBottomRightTextureCoord);



}

void PatternUIBackgroundBase::execBeginEditImpl (const BitVector &whichField, 
                                                 UInt32     uiAspect,
                                                 UInt32     uiContainerSize)
{
    Inherited::execBeginEditImpl(whichField, uiAspect, uiContainerSize);

}
#endif



OSG_END_NAMESPACE

#include <OpenSG/OSGSFieldTypeDef.inl>
#include <OpenSG/OSGMFieldTypeDef.inl>

OSG_BEGIN_NAMESPACE

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldDataTraits<PatternUIBackgroundPtr>::_type("PatternUIBackgroundPtr", "UIBackgroundPtr");
#endif

OSG_DLLEXPORT_SFIELD_DEF1(PatternUIBackgroundPtr, OSG_USERINTERFACELIB_DLLTMPLMAPPING);
OSG_DLLEXPORT_MFIELD_DEF1(PatternUIBackgroundPtr, OSG_USERINTERFACELIB_DLLTMPLMAPPING);


/*------------------------------------------------------------------------*/
/*                              cvs id's                                  */

#ifdef OSG_SGI_CC
#pragma set woff 1174
#endif

#ifdef OSG_LINUX_ICC
#pragma warning( disable : 177 )
#endif

namespace
{
    static Char8 cvsid_cpp       [] = "@(#)$Id: FCBaseTemplate_cpp.h,v 1.47 2006/03/17 17:03:19 pdaehne Exp $";
    static Char8 cvsid_hpp       [] = OSGPATTERNUIBACKGROUNDBASE_HEADER_CVSID;
    static Char8 cvsid_inl       [] = OSGPATTERNUIBACKGROUNDBASE_INLINE_CVSID;

    static Char8 cvsid_fields_hpp[] = OSGPATTERNUIBACKGROUNDFIELDS_HEADER_CVSID;
}

OSG_END_NAMESPACE

