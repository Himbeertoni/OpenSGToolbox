/*---------------------------------------------------------------------------*\
 *                     OpenSG ToolBox UserInterface                          *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                         www.vrac.iastate.edu                              *
 *                                                                           *
 *   Authors: David Kabala, Alden Peterson, Lee Zaniewski, Jonathan Flory    *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class PatternUIBackground
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#ifndef _OSGPATTERNUIBACKGROUNDBASE_H_
#define _OSGPATTERNUIBACKGROUNDBASE_H_
#ifdef __sgi
#pragma once
#endif


#include <OpenSG/OSGConfig.h>
#include "OSGUserInterfaceDef.h"

#include <OpenSG/OSGBaseTypes.h>
#include <OpenSG/OSGRefPtr.h>
#include <OpenSG/OSGCoredNodePtr.h>

#include "OSGUIBackground.h" // Parent

#include <OpenSG/OSGTextureChunkFields.h> // Texture type
#include <OpenSG/OSGVec2fFields.h> // PatternSize type
#include <OpenSG/OSGReal32Fields.h> // VerticalAlignment type
#include <OpenSG/OSGReal32Fields.h> // HorizontalAlignment type
#include <OpenSG/OSGUInt32Fields.h> // HorizontalRepeat type
#include <OpenSG/OSGUInt32Fields.h> // VerticalRepeat type
#include <OpenSG/OSGReal32Fields.h> // HorizontalRepeatValue type
#include <OpenSG/OSGReal32Fields.h> // VerticalRepeatValue type
#include <OpenSG/OSGVec2fFields.h> // TopLeftTextureCoord type
#include <OpenSG/OSGVec2fFields.h> // BottomRightTextureCoord type

#include "OSGPatternUIBackgroundFields.h"

OSG_BEGIN_NAMESPACE

class PatternUIBackground;
class BinaryDataHandler;

//! \brief PatternUIBackground Base Class.

class OSG_USERINTERFACELIB_DLLMAPPING PatternUIBackgroundBase : public UIBackground
{
  private:

    typedef UIBackground    Inherited;

    /*==========================  PUBLIC  =================================*/
  public:

    typedef PatternUIBackgroundPtr  Ptr;

    enum
    {
        TextureFieldId                 = Inherited::NextFieldId,
        PatternSizeFieldId             = TextureFieldId                 + 1,
        VerticalAlignmentFieldId       = PatternSizeFieldId             + 1,
        HorizontalAlignmentFieldId     = VerticalAlignmentFieldId       + 1,
        HorizontalRepeatFieldId        = HorizontalAlignmentFieldId     + 1,
        VerticalRepeatFieldId          = HorizontalRepeatFieldId        + 1,
        HorizontalRepeatValueFieldId   = VerticalRepeatFieldId          + 1,
        VerticalRepeatValueFieldId     = HorizontalRepeatValueFieldId   + 1,
        TopLeftTextureCoordFieldId     = VerticalRepeatValueFieldId     + 1,
        BottomRightTextureCoordFieldId = TopLeftTextureCoordFieldId     + 1,
        NextFieldId                    = BottomRightTextureCoordFieldId + 1
    };

    static const OSG::BitVector TextureFieldMask;
    static const OSG::BitVector PatternSizeFieldMask;
    static const OSG::BitVector VerticalAlignmentFieldMask;
    static const OSG::BitVector HorizontalAlignmentFieldMask;
    static const OSG::BitVector HorizontalRepeatFieldMask;
    static const OSG::BitVector VerticalRepeatFieldMask;
    static const OSG::BitVector HorizontalRepeatValueFieldMask;
    static const OSG::BitVector VerticalRepeatValueFieldMask;
    static const OSG::BitVector TopLeftTextureCoordFieldMask;
    static const OSG::BitVector BottomRightTextureCoordFieldMask;


    static const OSG::BitVector MTInfluenceMask;

    /*---------------------------------------------------------------------*/
    /*! \name                    Class Get                                 */
    /*! \{                                                                 */

    static        FieldContainerType &getClassType    (void); 
    static        UInt32              getClassTypeId  (void); 

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                FieldContainer Get                            */
    /*! \{                                                                 */

    virtual       FieldContainerType &getType  (void); 
    virtual const FieldContainerType &getType  (void) const; 

    virtual       UInt32              getContainerSize(void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Get                                 */
    /*! \{                                                                 */

           SFTextureChunkPtr   *getSFTexture        (void);
           SFVec2f             *getSFPatternSize    (void);
           SFReal32            *getSFVerticalAlignment(void);
           SFReal32            *getSFHorizontalAlignment(void);
           SFUInt32            *getSFHorizontalRepeat(void);
           SFUInt32            *getSFVerticalRepeat (void);
           SFReal32            *getSFHorizontalRepeatValue(void);
           SFReal32            *getSFVerticalRepeatValue(void);

           TextureChunkPtr     &getTexture        (void);
     const TextureChunkPtr     &getTexture        (void) const;
           Vec2f               &getPatternSize    (void);
     const Vec2f               &getPatternSize    (void) const;
           Real32              &getVerticalAlignment(void);
     const Real32              &getVerticalAlignment(void) const;
           Real32              &getHorizontalAlignment(void);
     const Real32              &getHorizontalAlignment(void) const;
           UInt32              &getHorizontalRepeat(void);
     const UInt32              &getHorizontalRepeat(void) const;
           UInt32              &getVerticalRepeat (void);
     const UInt32              &getVerticalRepeat (void) const;
           Real32              &getHorizontalRepeatValue(void);
     const Real32              &getHorizontalRepeatValue(void) const;
           Real32              &getVerticalRepeatValue(void);
     const Real32              &getVerticalRepeatValue(void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Set                                 */
    /*! \{                                                                 */

     void setTexture        ( const TextureChunkPtr &value );
     void setPatternSize    ( const Vec2f &value );
     void setVerticalAlignment( const Real32 &value );
     void setHorizontalAlignment( const Real32 &value );
     void setHorizontalRepeat( const UInt32 &value );
     void setVerticalRepeat ( const UInt32 &value );
     void setHorizontalRepeatValue( const Real32 &value );
     void setVerticalRepeatValue( const Real32 &value );

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Binary Access                              */
    /*! \{                                                                 */

    virtual UInt32 getBinSize (const BitVector         &whichField);
    virtual void   copyToBin  (      BinaryDataHandler &pMem,
                               const BitVector         &whichField);
    virtual void   copyFromBin(      BinaryDataHandler &pMem,
                               const BitVector         &whichField);


    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Construction                               */
    /*! \{                                                                 */

    static  PatternUIBackgroundPtr      create          (void); 
    static  PatternUIBackgroundPtr      createEmpty     (void); 

    /*! \}                                                                 */

    /*---------------------------------------------------------------------*/
    /*! \name                       Copy                                   */
    /*! \{                                                                 */

    virtual FieldContainerPtr     shallowCopy     (void) const; 

    /*! \}                                                                 */
    /*=========================  PROTECTED  ===============================*/
  protected:

    /*---------------------------------------------------------------------*/
    /*! \name                      Fields                                  */
    /*! \{                                                                 */

    SFTextureChunkPtr   _sfTexture;
    SFVec2f             _sfPatternSize;
    SFReal32            _sfVerticalAlignment;
    SFReal32            _sfHorizontalAlignment;
    SFUInt32            _sfHorizontalRepeat;
    SFUInt32            _sfVerticalRepeat;
    SFReal32            _sfHorizontalRepeatValue;
    SFReal32            _sfVerticalRepeatValue;
    SFVec2f             _sfTopLeftTextureCoord;
    SFVec2f             _sfBottomRightTextureCoord;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Constructors                               */
    /*! \{                                                                 */

    PatternUIBackgroundBase(void);
    PatternUIBackgroundBase(const PatternUIBackgroundBase &source);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Destructors                                */
    /*! \{                                                                 */

    virtual ~PatternUIBackgroundBase(void); 

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Get                                 */
    /*! \{                                                                 */

           SFVec2f             *getSFTopLeftTextureCoord(void);
           SFVec2f             *getSFBottomRightTextureCoord(void);

           Vec2f               &getTopLeftTextureCoord(void);
     const Vec2f               &getTopLeftTextureCoord(void) const;
           Vec2f               &getBottomRightTextureCoord(void);
     const Vec2f               &getBottomRightTextureCoord(void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Set                                 */
    /*! \{                                                                 */

     void setTopLeftTextureCoord(const Vec2f &value);
     void setBottomRightTextureCoord(const Vec2f &value);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

#if !defined(OSG_FIXED_MFIELDSYNC)
    void executeSyncImpl(      PatternUIBackgroundBase *pOther,
                         const BitVector         &whichField);

    virtual void   executeSync(      FieldContainer    &other,
                               const BitVector         &whichField);
#else
    void executeSyncImpl(      PatternUIBackgroundBase *pOther,
                         const BitVector         &whichField,
                         const SyncInfo          &sInfo     );

    virtual void   executeSync(      FieldContainer    &other,
                               const BitVector         &whichField,
                               const SyncInfo          &sInfo);

    virtual void execBeginEdit     (const BitVector &whichField,
                                          UInt32     uiAspect,
                                          UInt32     uiContainerSize);

            void execBeginEditImpl (const BitVector &whichField,
                                          UInt32     uiAspect,
                                          UInt32     uiContainerSize);

    virtual void onDestroyAspect(UInt32 uiId, UInt32 uiAspect);
#endif

    /*! \}                                                                 */
    /*==========================  PRIVATE  ================================*/
  private:

    friend class FieldContainer;

    static FieldDescription   *_desc[];
    static FieldContainerType  _type;


    // prohibit default functions (move to 'public' if you need one)
    void operator =(const PatternUIBackgroundBase &source);
};

//---------------------------------------------------------------------------
//   Exported Types
//---------------------------------------------------------------------------


typedef PatternUIBackgroundBase *PatternUIBackgroundBaseP;

typedef osgIF<PatternUIBackgroundBase::isNodeCore,
              CoredNodePtr<PatternUIBackground>,
              FieldContainer::attempt_to_create_CoredNodePtr_on_non_NodeCore_FC
              >::_IRet PatternUIBackgroundNodePtr;

typedef RefPtr<PatternUIBackgroundPtr> PatternUIBackgroundRefPtr;

OSG_END_NAMESPACE

#define OSGPATTERNUIBACKGROUNDBASE_HEADER_CVSID "@(#)$Id: FCBaseTemplate_h.h,v 1.40 2005/07/20 00:10:14 vossg Exp $"

#endif /* _OSGPATTERNUIBACKGROUNDBASE_H_ */
