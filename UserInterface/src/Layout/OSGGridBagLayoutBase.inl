/*---------------------------------------------------------------------------*\
 *                     OpenSG ToolBox UserInterface                          *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *   Authors: David Kabala, Alden Peterson, Lee Zaniewski, Jonathan Flory    *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class GridBagLayout!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <OpenSG/OSGConfig.h>

OSG_BEGIN_NAMESPACE


//! access the type of the class
inline
OSG::FieldContainerType &GridBagLayoutBase::getClassType(void)
{
    return _type; 
} 

//! access the numerical type of the class
inline
OSG::UInt32 GridBagLayoutBase::getClassTypeId(void) 
{
    return _type.getId(); 
} 

//! create a new instance of the class
inline
GridBagLayoutPtr GridBagLayoutBase::create(void) 
{
    GridBagLayoutPtr fc; 

    if(getClassType().getPrototype() != OSG::NullFC) 
    {
        fc = GridBagLayoutPtr::dcast(
            getClassType().getPrototype()-> shallowCopy()); 
    }
    
    return fc; 
}

//! create an empty new instance of the class, do not copy the prototype
inline
GridBagLayoutPtr GridBagLayoutBase::createEmpty(void) 
{ 
    GridBagLayoutPtr returnValue; 
    
    newPtr(returnValue); 

    return returnValue; 
}


/*------------------------------ get -----------------------------------*/

//! Get the GridBagLayout::_sfRows field.
inline
SFUInt32 *GridBagLayoutBase::getSFRows(void)
{
    return &_sfRows;
}

//! Get the GridBagLayout::_sfColumns field.
inline
SFUInt32 *GridBagLayoutBase::getSFColumns(void)
{
    return &_sfColumns;
}

//! Get the GridBagLayout::_mfColumnWeights field.
inline
MFReal32 *GridBagLayoutBase::getMFColumnWeights(void)
{
    return &_mfColumnWeights;
}

//! Get the GridBagLayout::_mfColumnWidths field.
inline
MFUInt16 *GridBagLayoutBase::getMFColumnWidths(void)
{
    return &_mfColumnWidths;
}

//! Get the GridBagLayout::_mfRowWeights field.
inline
MFReal32 *GridBagLayoutBase::getMFRowWeights(void)
{
    return &_mfRowWeights;
}

//! Get the GridBagLayout::_mfRowHeights field.
inline
MFUInt16 *GridBagLayoutBase::getMFRowHeights(void)
{
    return &_mfRowHeights;
}


//! Get the value of the GridBagLayout::_sfRows field.
inline
UInt32 &GridBagLayoutBase::getRows(void)
{
    return _sfRows.getValue();
}

//! Get the value of the GridBagLayout::_sfRows field.
inline
const UInt32 &GridBagLayoutBase::getRows(void) const
{
    return _sfRows.getValue();
}

//! Set the value of the GridBagLayout::_sfRows field.
inline
void GridBagLayoutBase::setRows(const UInt32 &value)
{
    _sfRows.setValue(value);
	// force the rows mf to be the same number as the value
	while (_mfRowWeights.size() > value)
		_mfRowWeights.erase(_mfRowWeights.end());
	if (_mfRowWeights.size() < value)
	{
		Real32 ratio = 1.0 / (_mfRowWeights.size() - value);
		while (_mfRowWeights.size() < value)
			_mfRowWeights.addValue(ratio);
	}
	while (_mfRowHeights.size() > value)
		_mfRowHeights.erase(_mfRowHeights.end());
	while (_mfRowHeights.size() < value)
		_mfRowHeights.addValue(0);
}

//! Get the value of the GridBagLayout::_sfColumns field.
inline
UInt32 &GridBagLayoutBase::getColumns(void)
{
    return _sfColumns.getValue();
}

//! Get the value of the GridBagLayout::_sfColumns field.
inline
const UInt32 &GridBagLayoutBase::getColumns(void) const
{
    return _sfColumns.getValue();
}

//! Set the value of the GridBagLayout::_sfColumns field.
inline
void GridBagLayoutBase::setColumns(const UInt32 &value)
{
    _sfColumns.setValue(value);
	// force the columns mf to be the same number as the value
	while (_mfColumnWeights.size() > value)
		_mfColumnWeights.erase(_mfColumnWeights.end());
	if (_mfColumnWeights.size() < value)
	{
		Real32 ratio = 1.0 / (_mfColumnWeights.size() - value);
		while (_mfColumnWeights.size() < value)
			_mfColumnWeights.addValue(ratio);
	}
	while (_mfColumnWidths.size() > value)
		_mfColumnWidths.erase(_mfColumnWidths.end());
	while (_mfColumnWidths.size() < value)
		_mfColumnWidths.addValue(0);
}


//! Get the value of the \a index element the GridBagLayout::_mfColumnWeights field.
inline
Real32 &GridBagLayoutBase::getColumnWeights(const UInt32 index)
{
    return _mfColumnWeights[index];
}

//! Get the GridBagLayout::_mfColumnWeights field.
inline
MFReal32 &GridBagLayoutBase::getColumnWeights(void)
{
    return _mfColumnWeights;
}

//! Get the GridBagLayout::_mfColumnWeights field.
inline
const MFReal32 &GridBagLayoutBase::getColumnWeights(void) const
{
    return _mfColumnWeights;
}

//! Get the value of the \a index element the GridBagLayout::_mfColumnWidths field.
inline
UInt16 &GridBagLayoutBase::getColumnWidths(const UInt32 index)
{
    return _mfColumnWidths[index];
}

//! Get the GridBagLayout::_mfColumnWidths field.
inline
MFUInt16 &GridBagLayoutBase::getColumnWidths(void)
{
    return _mfColumnWidths;
}

//! Get the GridBagLayout::_mfColumnWidths field.
inline
const MFUInt16 &GridBagLayoutBase::getColumnWidths(void) const
{
    return _mfColumnWidths;
}

//! Get the value of the \a index element the GridBagLayout::_mfRowWeights field.
inline
Real32 &GridBagLayoutBase::getRowWeights(const UInt32 index)
{
    return _mfRowWeights[index];
}

//! Get the GridBagLayout::_mfRowWeights field.
inline
MFReal32 &GridBagLayoutBase::getRowWeights(void)
{
    return _mfRowWeights;
}

//! Get the GridBagLayout::_mfRowWeights field.
inline
const MFReal32 &GridBagLayoutBase::getRowWeights(void) const
{
    return _mfRowWeights;
}

//! Get the value of the \a index element the GridBagLayout::_mfRowHeights field.
inline
UInt16 &GridBagLayoutBase::getRowHeights(const UInt32 index)
{
    return _mfRowHeights[index];
}

//! Get the GridBagLayout::_mfRowHeights field.
inline
MFUInt16 &GridBagLayoutBase::getRowHeights(void)
{
    return _mfRowHeights;
}

//! Get the GridBagLayout::_mfRowHeights field.
inline
const MFUInt16 &GridBagLayoutBase::getRowHeights(void) const
{
    return _mfRowHeights;
}

OSG_END_NAMESPACE

#define OSGGRIDBAGLAYOUTBASE_INLINE_CVSID "@(#)$Id: FCBaseTemplate_inl.h,v 1.20 2002/12/04 14:22:22 dirk Exp $"

