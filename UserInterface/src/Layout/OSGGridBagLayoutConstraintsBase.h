/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2002 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact: dirk@opensg.org, gerrit.voss@vossg.org, jbehr@zgdv.de          *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class GridBagLayoutConstraints
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#ifndef _OSGGRIDBAGLAYOUTCONSTRAINTSBASE_H_
#define _OSGGRIDBAGLAYOUTCONSTRAINTSBASE_H_
#ifdef __sgi
#pragma once
#endif


#include <OpenSG/OSGConfig.h>
#include "OSGUserInterfaceDef.h"

#include <OpenSG/OSGBaseTypes.h>
#include <OpenSG/OSGRefPtr.h>
#include <OpenSG/OSGCoredNodePtr.h>

#include "OSGLayoutConstraints.h" // Parent

#include <OpenSG/OSGUInt16Fields.h> // GridX type
#include <OpenSG/OSGUInt16Fields.h> // GridY type
#include <OpenSG/OSGUInt16Fields.h> // GridWidth type
#include <OpenSG/OSGUInt16Fields.h> // GridHeight type
#include <OpenSG/OSGUInt32Fields.h> // Fill type
#include <OpenSG/OSGReal32Fields.h> // HorizontalAlignment type
#include <OpenSG/OSGReal32Fields.h> // VerticalAlignment type
#include <OpenSG/OSGReal32Fields.h> // WeightX type
#include <OpenSG/OSGReal32Fields.h> // WeightY type
#include <OpenSG/OSGUInt32Fields.h> // InternalPadX type
#include <OpenSG/OSGUInt32Fields.h> // InternalPadY type
#include <OpenSG/OSGUInt32Fields.h> // PadLeft type
#include <OpenSG/OSGUInt32Fields.h> // PadRight type
#include <OpenSG/OSGUInt32Fields.h> // PadTop type
#include <OpenSG/OSGUInt32Fields.h> // PadBottom type

#include "OSGGridBagLayoutConstraintsFields.h"

OSG_BEGIN_NAMESPACE

class GridBagLayoutConstraints;
class BinaryDataHandler;

//! \brief GridBagLayoutConstraints Base Class.

class OSG_USERINTERFACELIB_DLLMAPPING GridBagLayoutConstraintsBase : public LayoutConstraints
{
  private:

    typedef LayoutConstraints    Inherited;

    /*==========================  PUBLIC  =================================*/
  public:

    typedef GridBagLayoutConstraintsPtr  Ptr;

    enum
    {
        GridXFieldId               = Inherited::NextFieldId,
        GridYFieldId               = GridXFieldId               + 1,
        GridWidthFieldId           = GridYFieldId               + 1,
        GridHeightFieldId          = GridWidthFieldId           + 1,
        FillFieldId                = GridHeightFieldId          + 1,
        HorizontalAlignmentFieldId = FillFieldId                + 1,
        VerticalAlignmentFieldId   = HorizontalAlignmentFieldId + 1,
        WeightXFieldId             = VerticalAlignmentFieldId   + 1,
        WeightYFieldId             = WeightXFieldId             + 1,
        InternalPadXFieldId        = WeightYFieldId             + 1,
        InternalPadYFieldId        = InternalPadXFieldId        + 1,
        PadLeftFieldId             = InternalPadYFieldId        + 1,
        PadRightFieldId            = PadLeftFieldId             + 1,
        PadTopFieldId              = PadRightFieldId            + 1,
        PadBottomFieldId           = PadTopFieldId              + 1,
        NextFieldId                = PadBottomFieldId           + 1
    };

    static const OSG::BitVector GridXFieldMask;
    static const OSG::BitVector GridYFieldMask;
    static const OSG::BitVector GridWidthFieldMask;
    static const OSG::BitVector GridHeightFieldMask;
    static const OSG::BitVector FillFieldMask;
    static const OSG::BitVector HorizontalAlignmentFieldMask;
    static const OSG::BitVector VerticalAlignmentFieldMask;
    static const OSG::BitVector WeightXFieldMask;
    static const OSG::BitVector WeightYFieldMask;
    static const OSG::BitVector InternalPadXFieldMask;
    static const OSG::BitVector InternalPadYFieldMask;
    static const OSG::BitVector PadLeftFieldMask;
    static const OSG::BitVector PadRightFieldMask;
    static const OSG::BitVector PadTopFieldMask;
    static const OSG::BitVector PadBottomFieldMask;


    static const OSG::BitVector MTInfluenceMask;

    /*---------------------------------------------------------------------*/
    /*! \name                    Class Get                                 */
    /*! \{                                                                 */

    static        FieldContainerType &getClassType    (void); 
    static        UInt32              getClassTypeId  (void); 

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                FieldContainer Get                            */
    /*! \{                                                                 */

    virtual       FieldContainerType &getType  (void); 
    virtual const FieldContainerType &getType  (void) const; 

    virtual       UInt32              getContainerSize(void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Get                                 */
    /*! \{                                                                 */

           SFUInt16            *getSFGridX          (void);
           SFUInt16            *getSFGridY          (void);
           SFUInt16            *getSFGridWidth      (void);
           SFUInt16            *getSFGridHeight     (void);
           SFUInt32            *getSFFill           (void);
           SFReal32            *getSFHorizontalAlignment(void);
           SFReal32            *getSFVerticalAlignment(void);
           SFReal32            *getSFWeightX        (void);
           SFReal32            *getSFWeightY        (void);
           SFUInt32            *getSFInternalPadX   (void);
           SFUInt32            *getSFInternalPadY   (void);
           SFUInt32            *getSFPadLeft        (void);
           SFUInt32            *getSFPadRight       (void);
           SFUInt32            *getSFPadTop         (void);
           SFUInt32            *getSFPadBottom      (void);

           UInt16              &getGridX          (void);
     const UInt16              &getGridX          (void) const;
           UInt16              &getGridY          (void);
     const UInt16              &getGridY          (void) const;
           UInt16              &getGridWidth      (void);
     const UInt16              &getGridWidth      (void) const;
           UInt16              &getGridHeight     (void);
     const UInt16              &getGridHeight     (void) const;
           UInt32              &getFill           (void);
     const UInt32              &getFill           (void) const;
           Real32              &getHorizontalAlignment(void);
     const Real32              &getHorizontalAlignment(void) const;
           Real32              &getVerticalAlignment(void);
     const Real32              &getVerticalAlignment(void) const;
           Real32              &getWeightX        (void);
     const Real32              &getWeightX        (void) const;
           Real32              &getWeightY        (void);
     const Real32              &getWeightY        (void) const;
           UInt32              &getInternalPadX   (void);
     const UInt32              &getInternalPadX   (void) const;
           UInt32              &getInternalPadY   (void);
     const UInt32              &getInternalPadY   (void) const;
           UInt32              &getPadLeft        (void);
     const UInt32              &getPadLeft        (void) const;
           UInt32              &getPadRight       (void);
     const UInt32              &getPadRight       (void) const;
           UInt32              &getPadTop         (void);
     const UInt32              &getPadTop         (void) const;
           UInt32              &getPadBottom      (void);
     const UInt32              &getPadBottom      (void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Set                                 */
    /*! \{                                                                 */

     void setGridX          ( const UInt16 &value );
     void setGridY          ( const UInt16 &value );
     void setGridWidth      ( const UInt16 &value );
     void setGridHeight     ( const UInt16 &value );
     void setFill           ( const UInt32 &value );
     void setHorizontalAlignment( const Real32 &value );
     void setVerticalAlignment( const Real32 &value );
     void setWeightX        ( const Real32 &value );
     void setWeightY        ( const Real32 &value );
     void setInternalPadX   ( const UInt32 &value );
     void setInternalPadY   ( const UInt32 &value );
     void setPadLeft        ( const UInt32 &value );
     void setPadRight       ( const UInt32 &value );
     void setPadTop         ( const UInt32 &value );
     void setPadBottom      ( const UInt32 &value );

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Binary Access                              */
    /*! \{                                                                 */

    virtual UInt32 getBinSize (const BitVector         &whichField);
    virtual void   copyToBin  (      BinaryDataHandler &pMem,
                               const BitVector         &whichField);
    virtual void   copyFromBin(      BinaryDataHandler &pMem,
                               const BitVector         &whichField);


    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Construction                               */
    /*! \{                                                                 */

    static  GridBagLayoutConstraintsPtr      create          (void); 
    static  GridBagLayoutConstraintsPtr      createEmpty     (void); 

    /*! \}                                                                 */

    /*---------------------------------------------------------------------*/
    /*! \name                       Copy                                   */
    /*! \{                                                                 */

    virtual FieldContainerPtr     shallowCopy     (void) const; 

    /*! \}                                                                 */
    /*=========================  PROTECTED  ===============================*/
  protected:

    /*---------------------------------------------------------------------*/
    /*! \name                      Fields                                  */
    /*! \{                                                                 */

    SFUInt16            _sfGridX;
    SFUInt16            _sfGridY;
    SFUInt16            _sfGridWidth;
    SFUInt16            _sfGridHeight;
    SFUInt32            _sfFill;
    SFReal32            _sfHorizontalAlignment;
    SFReal32            _sfVerticalAlignment;
    SFReal32            _sfWeightX;
    SFReal32            _sfWeightY;
    SFUInt32            _sfInternalPadX;
    SFUInt32            _sfInternalPadY;
    SFUInt32            _sfPadLeft;
    SFUInt32            _sfPadRight;
    SFUInt32            _sfPadTop;
    SFUInt32            _sfPadBottom;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Constructors                               */
    /*! \{                                                                 */

    GridBagLayoutConstraintsBase(void);
    GridBagLayoutConstraintsBase(const GridBagLayoutConstraintsBase &source);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Destructors                                */
    /*! \{                                                                 */

    virtual ~GridBagLayoutConstraintsBase(void); 

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

#if !defined(OSG_FIXED_MFIELDSYNC)
    void executeSyncImpl(      GridBagLayoutConstraintsBase *pOther,
                         const BitVector         &whichField);

    virtual void   executeSync(      FieldContainer    &other,
                               const BitVector         &whichField);
#else
    void executeSyncImpl(      GridBagLayoutConstraintsBase *pOther,
                         const BitVector         &whichField,
                         const SyncInfo          &sInfo     );

    virtual void   executeSync(      FieldContainer    &other,
                               const BitVector         &whichField,
                               const SyncInfo          &sInfo);

    virtual void execBeginEdit     (const BitVector &whichField,
                                          UInt32     uiAspect,
                                          UInt32     uiContainerSize);

            void execBeginEditImpl (const BitVector &whichField,
                                          UInt32     uiAspect,
                                          UInt32     uiContainerSize);

    virtual void onDestroyAspect(UInt32 uiId, UInt32 uiAspect);
#endif

    /*! \}                                                                 */
    /*==========================  PRIVATE  ================================*/
  private:

    friend class FieldContainer;

    static FieldDescription   *_desc[];
    static FieldContainerType  _type;


    // prohibit default functions (move to 'public' if you need one)
    void operator =(const GridBagLayoutConstraintsBase &source);
};

//---------------------------------------------------------------------------
//   Exported Types
//---------------------------------------------------------------------------


typedef GridBagLayoutConstraintsBase *GridBagLayoutConstraintsBaseP;

typedef osgIF<GridBagLayoutConstraintsBase::isNodeCore,
              CoredNodePtr<GridBagLayoutConstraints>,
              FieldContainer::attempt_to_create_CoredNodePtr_on_non_NodeCore_FC
              >::_IRet GridBagLayoutConstraintsNodePtr;

typedef RefPtr<GridBagLayoutConstraintsPtr> GridBagLayoutConstraintsRefPtr;

OSG_END_NAMESPACE

#define OSGGRIDBAGLAYOUTCONSTRAINTSBASE_HEADER_CVSID "@(#)$Id: FCBaseTemplate_h.h,v 1.40 2005/07/20 00:10:14 vossg Exp $"

#endif /* _OSGGRIDBAGLAYOUTCONSTRAINTSBASE_H_ */
