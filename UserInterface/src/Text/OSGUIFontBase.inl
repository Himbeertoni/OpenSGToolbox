/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2002 by the OpenSG Forum                 *
 *                                                                           *
 *   contact: dirk@opensg.org, gerrit.voss@vossg.org, jbehr@zgdv.de          *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class UIFont!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <OpenSG/OSGConfig.h>

OSG_BEGIN_NAMESPACE


//! access the type of the class
inline
OSG::FieldContainerType &UIFontBase::getClassType(void)
{
    return _type; 
} 

//! access the numerical type of the class
inline
OSG::UInt32 UIFontBase::getClassTypeId(void) 
{
    return _type.getId(); 
} 

//! create a new instance of the class
inline
UIFontPtr UIFontBase::create(void) 
{
    UIFontPtr fc; 

    if(getClassType().getPrototype() != OSG::NullFC) 
    {
        fc = UIFontPtr::dcast(
            getClassType().getPrototype()-> shallowCopy()); 
    }
    
    return fc; 
}

//! create an empty new instance of the class, do not copy the prototype
inline
UIFontPtr UIFontBase::createEmpty(void) 
{ 
    UIFontPtr returnValue; 
    
    newPtr(returnValue); 

    return returnValue; 
}


/*------------------------------ get -----------------------------------*/

//! Get the UIFont::_sfFamily field.
inline
SFString *UIFontBase::getSFFamily(void)
{
    return &_sfFamily;
}

//! Get the UIFont::_sfGlyphPixelSize field.
inline
SFUInt32 *UIFontBase::getSFGlyphPixelSize(void)
{
    return &_sfGlyphPixelSize;
}

//! Get the UIFont::_sfSize field.
inline
SFUInt32 *UIFontBase::getSFSize(void)
{
    return &_sfSize;
}

//! Get the UIFont::_sfGap field.
inline
SFUInt32 *UIFontBase::getSFGap(void)
{
    return &_sfGap;
}

//! Get the UIFont::_sfTextureWidth field.
inline
SFUInt32 *UIFontBase::getSFTextureWidth(void)
{
    return &_sfTextureWidth;
}

//! Get the UIFont::_sfStyle field.
inline
SFUInt32 *UIFontBase::getSFStyle(void)
{
    return &_sfStyle;
}

//! Get the UIFont::_sfTexture field.
inline
SFTextureChunkPtr *UIFontBase::getSFTexture(void)
{
    return &_sfTexture;
}


//! Get the value of the UIFont::_sfFamily field.
inline
std::string &UIFontBase::getFamily(void)
{
    return _sfFamily.getValue();
}

//! Get the value of the UIFont::_sfFamily field.
inline
const std::string &UIFontBase::getFamily(void) const
{
    return _sfFamily.getValue();
}

//! Set the value of the UIFont::_sfFamily field.
inline
void UIFontBase::setFamily(const std::string &value)
{
    _sfFamily.setValue(value);
}

//! Get the value of the UIFont::_sfGlyphPixelSize field.
inline
UInt32 &UIFontBase::getGlyphPixelSize(void)
{
    return _sfGlyphPixelSize.getValue();
}

//! Get the value of the UIFont::_sfGlyphPixelSize field.
inline
const UInt32 &UIFontBase::getGlyphPixelSize(void) const
{
    return _sfGlyphPixelSize.getValue();
}

//! Set the value of the UIFont::_sfGlyphPixelSize field.
inline
void UIFontBase::setGlyphPixelSize(const UInt32 &value)
{
    _sfGlyphPixelSize.setValue(value);
}

//! Get the value of the UIFont::_sfSize field.
inline
UInt32 &UIFontBase::getSize(void)
{
    return _sfSize.getValue();
}

//! Get the value of the UIFont::_sfSize field.
inline
const UInt32 &UIFontBase::getSize(void) const
{
    return _sfSize.getValue();
}

//! Set the value of the UIFont::_sfSize field.
inline
void UIFontBase::setSize(const UInt32 &value)
{
    _sfSize.setValue(value);
}

//! Get the value of the UIFont::_sfGap field.
inline
UInt32 &UIFontBase::getGap(void)
{
    return _sfGap.getValue();
}

//! Get the value of the UIFont::_sfGap field.
inline
const UInt32 &UIFontBase::getGap(void) const
{
    return _sfGap.getValue();
}

//! Set the value of the UIFont::_sfGap field.
inline
void UIFontBase::setGap(const UInt32 &value)
{
    _sfGap.setValue(value);
}

//! Get the value of the UIFont::_sfTextureWidth field.
inline
UInt32 &UIFontBase::getTextureWidth(void)
{
    return _sfTextureWidth.getValue();
}

//! Get the value of the UIFont::_sfTextureWidth field.
inline
const UInt32 &UIFontBase::getTextureWidth(void) const
{
    return _sfTextureWidth.getValue();
}

//! Set the value of the UIFont::_sfTextureWidth field.
inline
void UIFontBase::setTextureWidth(const UInt32 &value)
{
    _sfTextureWidth.setValue(value);
}

//! Get the value of the UIFont::_sfStyle field.
inline
UInt32 &UIFontBase::getStyle(void)
{
    return _sfStyle.getValue();
}

//! Get the value of the UIFont::_sfStyle field.
inline
const UInt32 &UIFontBase::getStyle(void) const
{
    return _sfStyle.getValue();
}

//! Set the value of the UIFont::_sfStyle field.
inline
void UIFontBase::setStyle(const UInt32 &value)
{
    _sfStyle.setValue(value);
}

//! Get the value of the UIFont::_sfTexture field.
inline
TextureChunkPtr &UIFontBase::getTexture(void)
{
    return _sfTexture.getValue();
}

//! Get the value of the UIFont::_sfTexture field.
inline
const TextureChunkPtr &UIFontBase::getTexture(void) const
{
    return _sfTexture.getValue();
}

//! Set the value of the UIFont::_sfTexture field.
inline
void UIFontBase::setTexture(const TextureChunkPtr &value)
{
    _sfTexture.setValue(value);
}


OSG_END_NAMESPACE

#define OSGUIFONTBASE_INLINE_CVSID "@(#)$Id: FCBaseTemplate_inl.h,v 1.20 2002/12/04 14:22:22 dirk Exp $"

