/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2002 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact: dirk@opensg.org, gerrit.voss@vossg.org, jbehr@zgdv.de          *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class UIRectangle
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#ifndef _OSGUIRECTANGLEBASE_H_
#define _OSGUIRECTANGLEBASE_H_
#ifdef __sgi
#pragma once
#endif


#include <OpenSG/OSGConfig.h>
#include "OSGUserInterfaceDef.h"

#include <OpenSG/OSGBaseTypes.h>
#include <OpenSG/OSGRefPtr.h>
#include <OpenSG/OSGCoredNodePtr.h>

#include <OpenSG/OSGDrawable.h> // Parent

#include <OpenSG/OSGPnt3fFields.h> // Point type
#include <OpenSG/OSGReal32Fields.h> // Width type
#include <OpenSG/OSGReal32Fields.h> // Height type
#include "UIDrawingSurface/OSGUIDrawingSurfaceFields.h" // DrawingSurface type
#include <OpenSG/OSGColorMaskChunkFields.h> // RectColorMask type
#include <OpenSG/OSGPolygonChunkFields.h> // RectPolygon type
#include "UIDrawingSurface/NodeCore/OSGUIRectangleMouseTransformFunctorFields.h" // MouseTransformFunctor type

#include "OSGUIRectangleFields.h"

OSG_BEGIN_NAMESPACE

class UIRectangle;
class BinaryDataHandler;

//! \brief UIRectangle Base Class.

class OSG_USERINTERFACELIB_DLLMAPPING UIRectangleBase : public Drawable
{
  private:

    typedef Drawable    Inherited;

    /*==========================  PUBLIC  =================================*/
  public:

    typedef UIRectanglePtr  Ptr;

    enum
    {
        PointFieldId                 = Inherited::NextFieldId,
        WidthFieldId                 = PointFieldId                 + 1,
        HeightFieldId                = WidthFieldId                 + 1,
        DrawingSurfaceFieldId        = HeightFieldId                + 1,
        RectColorMaskFieldId         = DrawingSurfaceFieldId        + 1,
        RectPolygonFieldId           = RectColorMaskFieldId         + 1,
        MouseTransformFunctorFieldId = RectPolygonFieldId           + 1,
        NextFieldId                  = MouseTransformFunctorFieldId + 1
    };

    static const OSG::BitVector PointFieldMask;
    static const OSG::BitVector WidthFieldMask;
    static const OSG::BitVector HeightFieldMask;
    static const OSG::BitVector DrawingSurfaceFieldMask;
    static const OSG::BitVector RectColorMaskFieldMask;
    static const OSG::BitVector RectPolygonFieldMask;
    static const OSG::BitVector MouseTransformFunctorFieldMask;


    static const OSG::BitVector MTInfluenceMask;

    /*---------------------------------------------------------------------*/
    /*! \name                    Class Get                                 */
    /*! \{                                                                 */

    static        FieldContainerType &getClassType    (void); 
    static        UInt32              getClassTypeId  (void); 

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                FieldContainer Get                            */
    /*! \{                                                                 */

    virtual       FieldContainerType &getType  (void); 
    virtual const FieldContainerType &getType  (void) const; 

    virtual       UInt32              getContainerSize(void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Get                                 */
    /*! \{                                                                 */

           SFPnt3f             *getSFPoint          (void);
           SFReal32            *getSFWidth          (void);
           SFReal32            *getSFHeight         (void);
           SFUIDrawingSurfacePtr *getSFDrawingSurface (void);

           Pnt3f               &getPoint          (void);
     const Pnt3f               &getPoint          (void) const;
           Real32              &getWidth          (void);
     const Real32              &getWidth          (void) const;
           Real32              &getHeight         (void);
     const Real32              &getHeight         (void) const;
           UIDrawingSurfacePtr &getDrawingSurface (void);
     const UIDrawingSurfacePtr &getDrawingSurface (void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Set                                 */
    /*! \{                                                                 */

     void setPoint          ( const Pnt3f &value );
     void setWidth          ( const Real32 &value );
     void setHeight         ( const Real32 &value );
     void setDrawingSurface ( const UIDrawingSurfacePtr &value );

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Binary Access                              */
    /*! \{                                                                 */

    virtual UInt32 getBinSize (const BitVector         &whichField);
    virtual void   copyToBin  (      BinaryDataHandler &pMem,
                               const BitVector         &whichField);
    virtual void   copyFromBin(      BinaryDataHandler &pMem,
                               const BitVector         &whichField);


    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Construction                               */
    /*! \{                                                                 */

    static  UIRectanglePtr      create          (void); 
    static  UIRectanglePtr      createEmpty     (void); 

    /*! \}                                                                 */

    /*---------------------------------------------------------------------*/
    /*! \name                       Copy                                   */
    /*! \{                                                                 */

    virtual FieldContainerPtr     shallowCopy     (void) const; 

    /*! \}                                                                 */
    /*=========================  PROTECTED  ===============================*/
  protected:

    /*---------------------------------------------------------------------*/
    /*! \name                      Fields                                  */
    /*! \{                                                                 */

    SFPnt3f             _sfPoint;
    SFReal32            _sfWidth;
    SFReal32            _sfHeight;
    SFUIDrawingSurfacePtr   _sfDrawingSurface;
    SFColorMaskChunkPtr   _sfRectColorMask;
    SFPolygonChunkPtr   _sfRectPolygon;
    SFUIRectangleMouseTransformFunctorPtr   _sfMouseTransformFunctor;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Constructors                               */
    /*! \{                                                                 */

    UIRectangleBase(void);
    UIRectangleBase(const UIRectangleBase &source);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Destructors                                */
    /*! \{                                                                 */

    virtual ~UIRectangleBase(void); 

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Get                                 */
    /*! \{                                                                 */

           SFColorMaskChunkPtr *getSFRectColorMask  (void);
           SFPolygonChunkPtr   *getSFRectPolygon    (void);
           SFUIRectangleMouseTransformFunctorPtr *getSFMouseTransformFunctor(void);

           ColorMaskChunkPtr   &getRectColorMask  (void);
     const ColorMaskChunkPtr   &getRectColorMask  (void) const;
           PolygonChunkPtr     &getRectPolygon    (void);
     const PolygonChunkPtr     &getRectPolygon    (void) const;
           UIRectangleMouseTransformFunctorPtr &getMouseTransformFunctor(void);
     const UIRectangleMouseTransformFunctorPtr &getMouseTransformFunctor(void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Set                                 */
    /*! \{                                                                 */

     void setRectColorMask  (const ColorMaskChunkPtr &value);
     void setRectPolygon    (const PolygonChunkPtr &value);
     void setMouseTransformFunctor(const UIRectangleMouseTransformFunctorPtr &value);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

#if !defined(OSG_FIXED_MFIELDSYNC)
    void executeSyncImpl(      UIRectangleBase *pOther,
                         const BitVector         &whichField);

    virtual void   executeSync(      FieldContainer    &other,
                               const BitVector         &whichField);
#else
    void executeSyncImpl(      UIRectangleBase *pOther,
                         const BitVector         &whichField,
                         const SyncInfo          &sInfo     );

    virtual void   executeSync(      FieldContainer    &other,
                               const BitVector         &whichField,
                               const SyncInfo          &sInfo);

    virtual void execBeginEdit     (const BitVector &whichField,
                                          UInt32     uiAspect,
                                          UInt32     uiContainerSize);

            void execBeginEditImpl (const BitVector &whichField,
                                          UInt32     uiAspect,
                                          UInt32     uiContainerSize);

    virtual void onDestroyAspect(UInt32 uiId, UInt32 uiAspect);
#endif

    /*! \}                                                                 */
    /*==========================  PRIVATE  ================================*/
  private:

    friend class FieldContainer;

    static FieldDescription   *_desc[];
    static FieldContainerType  _type;


    // prohibit default functions (move to 'public' if you need one)
    void operator =(const UIRectangleBase &source);
};

//---------------------------------------------------------------------------
//   Exported Types
//---------------------------------------------------------------------------


typedef UIRectangleBase *UIRectangleBaseP;

typedef osgIF<UIRectangleBase::isNodeCore,
              CoredNodePtr<UIRectangle>,
              FieldContainer::attempt_to_create_CoredNodePtr_on_non_NodeCore_FC
              >::_IRet UIRectangleNodePtr;

typedef RefPtr<UIRectanglePtr> UIRectangleRefPtr;

OSG_END_NAMESPACE

#define OSGUIRECTANGLEBASE_HEADER_CVSID "@(#)$Id: FCBaseTemplate_h.h,v 1.40 2005/07/20 00:10:14 vossg Exp $"

#endif /* _OSGUIRECTANGLEBASE_H_ */
