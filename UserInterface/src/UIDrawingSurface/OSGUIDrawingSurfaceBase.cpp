/*---------------------------------------------------------------------------*\
 *                     OpenSG ToolBox UserInterface                          *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                         www.vrac.iastate.edu                              *
 *                                                                           *
 *   Authors: David Kabala, Alden Peterson, Lee Zaniewski, Jonathan Flory    *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class UIDrawingSurface!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#define OSG_COMPILEUIDRAWINGSURFACEINST

#include <stdlib.h>
#include <stdio.h>

#include <OpenSG/OSGConfig.h>

#include "OSGUIDrawingSurfaceBase.h"
#include "OSGUIDrawingSurface.h"


OSG_BEGIN_NAMESPACE

const OSG::BitVector  UIDrawingSurfaceBase::InternalWindowsFieldMask = 
    (TypeTraits<BitVector>::One << UIDrawingSurfaceBase::InternalWindowsFieldId);

const OSG::BitVector  UIDrawingSurfaceBase::FocusedWindowFieldMask = 
    (TypeTraits<BitVector>::One << UIDrawingSurfaceBase::FocusedWindowFieldId);

const OSG::BitVector  UIDrawingSurfaceBase::EventProducerFieldMask = 
    (TypeTraits<BitVector>::One << UIDrawingSurfaceBase::EventProducerFieldId);

const OSG::BitVector  UIDrawingSurfaceBase::GraphicsFieldMask = 
    (TypeTraits<BitVector>::One << UIDrawingSurfaceBase::GraphicsFieldId);

const OSG::BitVector  UIDrawingSurfaceBase::MouseTransformFunctorFieldMask = 
    (TypeTraits<BitVector>::One << UIDrawingSurfaceBase::MouseTransformFunctorFieldId);

const OSG::BitVector  UIDrawingSurfaceBase::SizeFieldMask = 
    (TypeTraits<BitVector>::One << UIDrawingSurfaceBase::SizeFieldId);

const OSG::BitVector UIDrawingSurfaceBase::MTInfluenceMask = 
    (Inherited::MTInfluenceMask) | 
    (static_cast<BitVector>(0x0) << Inherited::NextFieldId); 


// Field descriptions

/*! \var InternalWindowPtr UIDrawingSurfaceBase::_mfInternalWindows
    
*/
/*! \var InternalWindowPtr UIDrawingSurfaceBase::_sfFocusedWindow
    
*/
/*! \var WindowEventProducerPtr UIDrawingSurfaceBase::_sfEventProducer
    
*/
/*! \var GraphicsPtr     UIDrawingSurfaceBase::_sfGraphics
    
*/
/*! \var UIDrawingSurfaceMouseTransformFunctorPtr UIDrawingSurfaceBase::_sfMouseTransformFunctor
    
*/
/*! \var Vec2s           UIDrawingSurfaceBase::_sfSize
    
*/

//! UIDrawingSurface description

FieldDescription *UIDrawingSurfaceBase::_desc[] = 
{
    new FieldDescription(MFInternalWindowPtr::getClassType(), 
                     "InternalWindows", 
                     InternalWindowsFieldId, InternalWindowsFieldMask,
                     false,
                     (FieldAccessMethod) &UIDrawingSurfaceBase::getMFInternalWindows),
    new FieldDescription(SFInternalWindowPtr::getClassType(), 
                     "FocusedWindow", 
                     FocusedWindowFieldId, FocusedWindowFieldMask,
                     false,
                     (FieldAccessMethod) &UIDrawingSurfaceBase::getSFFocusedWindow),
    new FieldDescription(SFWindowEventProducerPtr::getClassType(), 
                     "EventProducer", 
                     EventProducerFieldId, EventProducerFieldMask,
                     false,
                     (FieldAccessMethod) &UIDrawingSurfaceBase::getSFEventProducer),
    new FieldDescription(SFGraphicsPtr::getClassType(), 
                     "Graphics", 
                     GraphicsFieldId, GraphicsFieldMask,
                     false,
                     (FieldAccessMethod) &UIDrawingSurfaceBase::getSFGraphics),
    new FieldDescription(SFUIDrawingSurfaceMouseTransformFunctorPtr::getClassType(), 
                     "MouseTransformFunctor", 
                     MouseTransformFunctorFieldId, MouseTransformFunctorFieldMask,
                     false,
                     (FieldAccessMethod) &UIDrawingSurfaceBase::getSFMouseTransformFunctor),
    new FieldDescription(SFVec2s::getClassType(), 
                     "Size", 
                     SizeFieldId, SizeFieldMask,
                     false,
                     (FieldAccessMethod) &UIDrawingSurfaceBase::getSFSize)
};


FieldContainerType UIDrawingSurfaceBase::_type(
    "UIDrawingSurface",
    "FieldContainer",
    NULL,
    (PrototypeCreateF) &UIDrawingSurfaceBase::createEmpty,
    UIDrawingSurface::initMethod,
    _desc,
    sizeof(_desc));

//OSG_FIELD_CONTAINER_DEF(UIDrawingSurfaceBase, UIDrawingSurfacePtr)

/*------------------------------ get -----------------------------------*/

FieldContainerType &UIDrawingSurfaceBase::getType(void) 
{
    return _type; 
} 

const FieldContainerType &UIDrawingSurfaceBase::getType(void) const 
{
    return _type;
} 


FieldContainerPtr UIDrawingSurfaceBase::shallowCopy(void) const 
{ 
    UIDrawingSurfacePtr returnValue; 

    newPtr(returnValue, dynamic_cast<const UIDrawingSurface *>(this)); 

    return returnValue; 
}

UInt32 UIDrawingSurfaceBase::getContainerSize(void) const 
{ 
    return sizeof(UIDrawingSurface); 
}


#if !defined(OSG_FIXED_MFIELDSYNC)
void UIDrawingSurfaceBase::executeSync(      FieldContainer &other,
                                    const BitVector      &whichField)
{
    this->executeSyncImpl((UIDrawingSurfaceBase *) &other, whichField);
}
#else
void UIDrawingSurfaceBase::executeSync(      FieldContainer &other,
                                    const BitVector      &whichField,                                    const SyncInfo       &sInfo     )
{
    this->executeSyncImpl((UIDrawingSurfaceBase *) &other, whichField, sInfo);
}
void UIDrawingSurfaceBase::execBeginEdit(const BitVector &whichField, 
                                            UInt32     uiAspect,
                                            UInt32     uiContainerSize) 
{
    this->execBeginEditImpl(whichField, uiAspect, uiContainerSize);
}

void UIDrawingSurfaceBase::onDestroyAspect(UInt32 uiId, UInt32 uiAspect)
{
    Inherited::onDestroyAspect(uiId, uiAspect);

    _mfInternalWindows.terminateShare(uiAspect, this->getContainerSize());
}
#endif

/*------------------------- constructors ----------------------------------*/

#ifdef OSG_WIN32_ICL
#pragma warning (disable : 383)
#endif

UIDrawingSurfaceBase::UIDrawingSurfaceBase(void) :
    _mfInternalWindows        (), 
    _sfFocusedWindow          (), 
    _sfEventProducer          (), 
    _sfGraphics               (), 
    _sfMouseTransformFunctor  (), 
    _sfSize                   (Vec2s(0,0)), 
    Inherited() 
{
}

#ifdef OSG_WIN32_ICL
#pragma warning (default : 383)
#endif

UIDrawingSurfaceBase::UIDrawingSurfaceBase(const UIDrawingSurfaceBase &source) :
    _mfInternalWindows        (source._mfInternalWindows        ), 
    _sfFocusedWindow          (source._sfFocusedWindow          ), 
    _sfEventProducer          (source._sfEventProducer          ), 
    _sfGraphics               (source._sfGraphics               ), 
    _sfMouseTransformFunctor  (source._sfMouseTransformFunctor  ), 
    _sfSize                   (source._sfSize                   ), 
    Inherited                 (source)
{
}

/*-------------------------- destructors ----------------------------------*/

UIDrawingSurfaceBase::~UIDrawingSurfaceBase(void)
{
}

/*------------------------------ access -----------------------------------*/

UInt32 UIDrawingSurfaceBase::getBinSize(const BitVector &whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (InternalWindowsFieldMask & whichField))
    {
        returnValue += _mfInternalWindows.getBinSize();
    }

    if(FieldBits::NoField != (FocusedWindowFieldMask & whichField))
    {
        returnValue += _sfFocusedWindow.getBinSize();
    }

    if(FieldBits::NoField != (EventProducerFieldMask & whichField))
    {
        returnValue += _sfEventProducer.getBinSize();
    }

    if(FieldBits::NoField != (GraphicsFieldMask & whichField))
    {
        returnValue += _sfGraphics.getBinSize();
    }

    if(FieldBits::NoField != (MouseTransformFunctorFieldMask & whichField))
    {
        returnValue += _sfMouseTransformFunctor.getBinSize();
    }

    if(FieldBits::NoField != (SizeFieldMask & whichField))
    {
        returnValue += _sfSize.getBinSize();
    }


    return returnValue;
}

void UIDrawingSurfaceBase::copyToBin(      BinaryDataHandler &pMem,
                                  const BitVector         &whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (InternalWindowsFieldMask & whichField))
    {
        _mfInternalWindows.copyToBin(pMem);
    }

    if(FieldBits::NoField != (FocusedWindowFieldMask & whichField))
    {
        _sfFocusedWindow.copyToBin(pMem);
    }

    if(FieldBits::NoField != (EventProducerFieldMask & whichField))
    {
        _sfEventProducer.copyToBin(pMem);
    }

    if(FieldBits::NoField != (GraphicsFieldMask & whichField))
    {
        _sfGraphics.copyToBin(pMem);
    }

    if(FieldBits::NoField != (MouseTransformFunctorFieldMask & whichField))
    {
        _sfMouseTransformFunctor.copyToBin(pMem);
    }

    if(FieldBits::NoField != (SizeFieldMask & whichField))
    {
        _sfSize.copyToBin(pMem);
    }


}

void UIDrawingSurfaceBase::copyFromBin(      BinaryDataHandler &pMem,
                                    const BitVector    &whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (InternalWindowsFieldMask & whichField))
    {
        _mfInternalWindows.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (FocusedWindowFieldMask & whichField))
    {
        _sfFocusedWindow.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (EventProducerFieldMask & whichField))
    {
        _sfEventProducer.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (GraphicsFieldMask & whichField))
    {
        _sfGraphics.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (MouseTransformFunctorFieldMask & whichField))
    {
        _sfMouseTransformFunctor.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (SizeFieldMask & whichField))
    {
        _sfSize.copyFromBin(pMem);
    }


}

#if !defined(OSG_FIXED_MFIELDSYNC)
void UIDrawingSurfaceBase::executeSyncImpl(      UIDrawingSurfaceBase *pOther,
                                        const BitVector         &whichField)
{

    Inherited::executeSyncImpl(pOther, whichField);

    if(FieldBits::NoField != (InternalWindowsFieldMask & whichField))
        _mfInternalWindows.syncWith(pOther->_mfInternalWindows);

    if(FieldBits::NoField != (FocusedWindowFieldMask & whichField))
        _sfFocusedWindow.syncWith(pOther->_sfFocusedWindow);

    if(FieldBits::NoField != (EventProducerFieldMask & whichField))
        _sfEventProducer.syncWith(pOther->_sfEventProducer);

    if(FieldBits::NoField != (GraphicsFieldMask & whichField))
        _sfGraphics.syncWith(pOther->_sfGraphics);

    if(FieldBits::NoField != (MouseTransformFunctorFieldMask & whichField))
        _sfMouseTransformFunctor.syncWith(pOther->_sfMouseTransformFunctor);

    if(FieldBits::NoField != (SizeFieldMask & whichField))
        _sfSize.syncWith(pOther->_sfSize);


}
#else
void UIDrawingSurfaceBase::executeSyncImpl(      UIDrawingSurfaceBase *pOther,
                                        const BitVector         &whichField,
                                        const SyncInfo          &sInfo      )
{

    Inherited::executeSyncImpl(pOther, whichField, sInfo);

    if(FieldBits::NoField != (FocusedWindowFieldMask & whichField))
        _sfFocusedWindow.syncWith(pOther->_sfFocusedWindow);

    if(FieldBits::NoField != (EventProducerFieldMask & whichField))
        _sfEventProducer.syncWith(pOther->_sfEventProducer);

    if(FieldBits::NoField != (GraphicsFieldMask & whichField))
        _sfGraphics.syncWith(pOther->_sfGraphics);

    if(FieldBits::NoField != (MouseTransformFunctorFieldMask & whichField))
        _sfMouseTransformFunctor.syncWith(pOther->_sfMouseTransformFunctor);

    if(FieldBits::NoField != (SizeFieldMask & whichField))
        _sfSize.syncWith(pOther->_sfSize);


    if(FieldBits::NoField != (InternalWindowsFieldMask & whichField))
        _mfInternalWindows.syncWith(pOther->_mfInternalWindows, sInfo);


}

void UIDrawingSurfaceBase::execBeginEditImpl (const BitVector &whichField, 
                                                 UInt32     uiAspect,
                                                 UInt32     uiContainerSize)
{
    Inherited::execBeginEditImpl(whichField, uiAspect, uiContainerSize);

    if(FieldBits::NoField != (InternalWindowsFieldMask & whichField))
        _mfInternalWindows.beginEdit(uiAspect, uiContainerSize);

}
#endif



OSG_END_NAMESPACE

#include <OpenSG/OSGSFieldTypeDef.inl>
#include <OpenSG/OSGMFieldTypeDef.inl>

OSG_BEGIN_NAMESPACE

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldDataTraits<UIDrawingSurfacePtr>::_type("UIDrawingSurfacePtr", "FieldContainerPtr");
#endif

OSG_DLLEXPORT_SFIELD_DEF1(UIDrawingSurfacePtr, OSG_USERINTERFACELIB_DLLTMPLMAPPING);
OSG_DLLEXPORT_MFIELD_DEF1(UIDrawingSurfacePtr, OSG_USERINTERFACELIB_DLLTMPLMAPPING);


/*------------------------------------------------------------------------*/
/*                              cvs id's                                  */

#ifdef OSG_SGI_CC
#pragma set woff 1174
#endif

#ifdef OSG_LINUX_ICC
#pragma warning( disable : 177 )
#endif

namespace
{
    static Char8 cvsid_cpp       [] = "@(#)$Id: FCBaseTemplate_cpp.h,v 1.47 2006/03/17 17:03:19 pdaehne Exp $";
    static Char8 cvsid_hpp       [] = OSGUIDRAWINGSURFACEBASE_HEADER_CVSID;
    static Char8 cvsid_inl       [] = OSGUIDRAWINGSURFACEBASE_INLINE_CVSID;

    static Char8 cvsid_fields_hpp[] = OSGUIDRAWINGSURFACEFIELDS_HEADER_CVSID;
}

OSG_END_NAMESPACE

