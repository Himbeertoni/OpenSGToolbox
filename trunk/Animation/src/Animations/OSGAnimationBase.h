/*---------------------------------------------------------------------------*\
 *                     OpenSG ToolBox UserInterface                          *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                         www.vrac.iastate.edu                              *
 *                                                                           *
 *                          Authors: David Kabala                            *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class Animation
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#ifndef _OSGANIMATIONBASE_H_
#define _OSGANIMATIONBASE_H_
#ifdef __sgi
#pragma once
#endif


#include <OpenSG/OSGConfig.h>
#include "OSGAnimationDef.h"

#include <OpenSG/OSGBaseTypes.h>
#include <OpenSG/OSGRefPtr.h>
#include <OpenSG/OSGCoredNodePtr.h>

#include <OpenSG/OSGAttachmentContainer.h> // Parent

#include <OpenSG/OSGInt32Fields.h> // Cycling type
#include <OpenSG/OSGReal32Fields.h> // Scale type
#include <OpenSG/OSGReal32Fields.h> // Offset type
#include <OpenSG/OSGReal32Fields.h> // Span type
#include <OpenSG/OSGReal32Fields.h> // Cycles type

#include "OSGAnimationFields.h"
#include <OpenSG/Toolbox/OSGEventProducer.h>
#include <OpenSG/Toolbox/OSGEventProducerType.h>
#include <OpenSG/Toolbox/OSGMethodDescription.h>
#include <OpenSG/Toolbox/OSGEventProducerPtrType.h>

OSG_BEGIN_NAMESPACE

class Animation;
class BinaryDataHandler;

//! \brief Animation Base Class.

class OSG_ANIMATIONLIB_DLLMAPPING AnimationBase : public AttachmentContainer
{
  private:

    typedef AttachmentContainer    Inherited;

    /*==========================  PUBLIC  =================================*/
  public:

    typedef AnimationPtr  Ptr;

    enum
    {
        CyclingFieldId       = Inherited::NextFieldId,
        ScaleFieldId         = CyclingFieldId       + 1,
        OffsetFieldId        = ScaleFieldId         + 1,
        SpanFieldId          = OffsetFieldId        + 1,
        CyclesFieldId        = SpanFieldId          + 1,
        EventProducerFieldId = CyclesFieldId        + 1,
        NextFieldId          = EventProducerFieldId + 1
    };

    static const OSG::BitVector CyclingFieldMask;
    static const OSG::BitVector ScaleFieldMask;
    static const OSG::BitVector OffsetFieldMask;
    static const OSG::BitVector SpanFieldMask;
    static const OSG::BitVector CyclesFieldMask;
    static const OSG::BitVector EventProducerFieldMask;


    enum
    {
        AnimationStartedMethodId  = 1,
        AnimationStoppedMethodId  = AnimationStartedMethodId  + 1,
        AnimationPausedMethodId   = AnimationStoppedMethodId  + 1,
        AnimationUnpausedMethodId = AnimationPausedMethodId   + 1,
        AnimationEndedMethodId    = AnimationUnpausedMethodId + 1,
        AnimationCycledMethodId   = AnimationEndedMethodId    + 1,
        NextMethodId              = AnimationCycledMethodId   + 1
    };



    static const OSG::BitVector MTInfluenceMask;

    /*---------------------------------------------------------------------*/
    /*! \name                    Class Get                                 */
    /*! \{                                                                 */

    static        FieldContainerType &getClassType    (void); 
    static        UInt32              getClassTypeId  (void); 
    static const  EventProducerType  &getProducerClassType  (void); 
    static        UInt32              getProducerClassTypeId(void); 

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                FieldContainer Get                            */
    /*! \{                                                                 */

    virtual       FieldContainerType &getType  (void); 
    virtual const FieldContainerType &getType  (void) const; 

    virtual       UInt32              getContainerSize(void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Get                                 */
    /*! \{                                                                 */


           SFInt32             *editSFCycling        (void);
     const SFInt32             *getSFCycling        (void) const;

           SFReal32            *editSFScale          (void);
     const SFReal32            *getSFScale          (void) const;

           SFReal32            *editSFOffset         (void);
     const SFReal32            *getSFOffset         (void) const;

           SFReal32            *editSFSpan           (void);
     const SFReal32            *getSFSpan           (void) const;

           SFReal32            *editSFCycles         (void);
     const SFReal32            *getSFCycles         (void) const;


           Int32               &editCycling        (void);
     const Int32               &getCycling        (void) const;

           Real32              &editScale          (void);
     const Real32              &getScale          (void) const;

           Real32              &editOffset         (void);
     const Real32              &getOffset         (void) const;

           Real32              &editSpan           (void);
     const Real32              &getSpan           (void) const;

           Real32              &editCycles         (void);
     const Real32              &getCycles         (void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Set                                 */
    /*! \{                                                                 */

     void setCycling        ( const Int32 &value );
     void setScale          ( const Real32 &value );
     void setOffset         ( const Real32 &value );
     void setSpan           ( const Real32 &value );
     void setCycles         ( const Real32 &value );

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                Method Produced Get                           */
    /*! \{                                                                 */

    virtual const EventProducerType &getProducerType(void) const; 
    EventConnection attachActivity(ActivityPtr TheActivity, UInt32 ProducedEventId);
    bool isActivityAttached(ActivityPtr TheActivity, UInt32 ProducedEventId) const;
    UInt32 getNumActivitiesAttached(UInt32 ProducedEventId) const;
    ActivityPtr getAttachedActivity(UInt32 ProducedEventId, UInt32 ActivityIndex) const;
    void detachActivity(ActivityPtr TheActivity, UInt32 ProducedEventId);
    UInt32 getNumProducedEvents(void) const;
    const MethodDescription *getProducedEventDescription(const Char8 *ProducedEventName) const;
    const MethodDescription *getProducedEventDescription(UInt32 ProducedEventId) const;
    UInt32 getProducedEventId(const Char8 *ProducedEventName) const;

    SFEventProducerPtr *editSFEventProducer(void);
    EventProducerPtr &editEventProducer(void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Binary Access                              */
    /*! \{                                                                 */

    virtual UInt32 getBinSize (const BitVector         &whichField);
    virtual void   copyToBin  (      BinaryDataHandler &pMem,
                               const BitVector         &whichField);
    virtual void   copyFromBin(      BinaryDataHandler &pMem,
                               const BitVector         &whichField);


    /*! \}                                                                 */
    /*=========================  PROTECTED  ===============================*/
  protected:
    EventProducer _Producer;


    /*---------------------------------------------------------------------*/
    /*! \name                      Fields                                  */
    /*! \{                                                                 */

    SFInt32             _sfCycling;
    SFReal32            _sfScale;
    SFReal32            _sfOffset;
    SFReal32            _sfSpan;
    SFReal32            _sfCycles;

    /*! \}                                                                 */
    SFEventProducerPtr _sfEventProducer;
    /*---------------------------------------------------------------------*/
    /*! \name                   Constructors                               */
    /*! \{                                                                 */

    AnimationBase(void);
    AnimationBase(const AnimationBase &source);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Destructors                                */
    /*! \{                                                                 */

    virtual ~AnimationBase(void); 

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

#if !defined(OSG_FIXED_MFIELDSYNC)
    void executeSyncImpl(      AnimationBase *pOther,
                         const BitVector         &whichField);

    virtual void   executeSync(      FieldContainer    &other,
                               const BitVector         &whichField);
#else
    void executeSyncImpl(      AnimationBase *pOther,
                         const BitVector         &whichField,
                         const SyncInfo          &sInfo     );

    virtual void   executeSync(      FieldContainer    &other,
                               const BitVector         &whichField,
                               const SyncInfo          &sInfo);

    virtual void execBeginEdit     (const BitVector &whichField,
                                          UInt32     uiAspect,
                                          UInt32     uiContainerSize);

            void execBeginEditImpl (const BitVector &whichField,
                                          UInt32     uiAspect,
                                          UInt32     uiContainerSize);

    virtual void onDestroyAspect(UInt32 uiId, UInt32 uiAspect);
#endif

    /*! \}                                                                 */
    /*==========================  PRIVATE  ================================*/
  private:

    friend class FieldContainer;

    static MethodDescription   *_methodDesc[];
    static EventProducerType _producerType;

    static FieldDescription   *_desc[];
    static FieldContainerType  _type;


    // prohibit default functions (move to 'public' if you need one)
    void operator =(const AnimationBase &source);
};

//---------------------------------------------------------------------------
//   Exported Types
//---------------------------------------------------------------------------


typedef AnimationBase *AnimationBaseP;

typedef osgIF<AnimationBase::isNodeCore,
              CoredNodePtr<Animation>,
              FieldContainer::attempt_to_create_CoredNodePtr_on_non_NodeCore_FC
              >::_IRet AnimationNodePtr;

typedef RefPtr<AnimationPtr> AnimationRefPtr;

OSG_END_NAMESPACE

#endif /* _OSGANIMATIONBASE_H_ */
