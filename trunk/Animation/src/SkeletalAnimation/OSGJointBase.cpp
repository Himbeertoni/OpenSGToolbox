/*---------------------------------------------------------------------------*\
 *                       OpenSG ToolBox Animation                            *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                         www.vrac.iastate.edu                              *
 *                                                                           *
 *                          Authors: David Kabala                            *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class Joint!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#define OSG_COMPILEJOINTINST

#include <stdlib.h>
#include <stdio.h>

#include <OpenSG/OSGConfig.h>

#include "OSGJointBase.h"
#include "OSGJoint.h"


OSG_BEGIN_NAMESPACE

const OSG::BitVector  JointBase::TransformationFieldMask = 
    (TypeTraits<BitVector>::One << JointBase::TransformationFieldId);

const OSG::BitVector  JointBase::BindTransformationFieldMask = 
    (TypeTraits<BitVector>::One << JointBase::BindTransformationFieldId);

const OSG::BitVector  JointBase::ChildJointsFieldMask = 
    (TypeTraits<BitVector>::One << JointBase::ChildJointsFieldId);

const OSG::BitVector  JointBase::ParentJointFieldMask = 
    (TypeTraits<BitVector>::One << JointBase::ParentJointFieldId);

const OSG::BitVector JointBase::MTInfluenceMask = 
    (Inherited::MTInfluenceMask) | 
    (static_cast<BitVector>(0x0) << Inherited::NextFieldId); 


// Field descriptions

/*! \var Matrix          JointBase::_sfTransformation
    
*/
/*! \var Matrix          JointBase::_sfBindTransformation
    
*/
/*! \var Joint           JointBase::_mfChildJoints
    
*/
/*! \var Joint           JointBase::_sfParentJoint
    
*/

//! Joint description

FieldDescription *JointBase::_desc[] = 
{
    new FieldDescription(SFMatrix::getClassType(), 
                     "Transformation", 
                     TransformationFieldId, TransformationFieldMask,
                     false,
                     (FieldAccessMethod) &JointBase::getSFTransformation),
    new FieldDescription(SFMatrix::getClassType(), 
                     "BindTransformation", 
                     BindTransformationFieldId, BindTransformationFieldMask,
                     false,
                     (FieldAccessMethod) &JointBase::getSFBindTransformation),
    new FieldDescription(MFJoint::getClassType(), 
                     "ChildJoints", 
                     ChildJointsFieldId, ChildJointsFieldMask,
                     false,
                     (FieldAccessMethod) &JointBase::getMFChildJoints),
    new FieldDescription(SFJoint::getClassType(), 
                     "ParentJoint", 
                     ParentJointFieldId, ParentJointFieldMask,
                     false,
                     (FieldAccessMethod) &JointBase::getSFParentJoint)
};


FieldContainerType JointBase::_type(
    "Joint",
    "AttachmentContainer",
    NULL,
    (PrototypeCreateF) &JointBase::createEmpty,
    Joint::initMethod,
    _desc,
    sizeof(_desc));

//OSG_FIELD_CONTAINER_DEF(JointBase, JointPtr)

/*------------------------------ get -----------------------------------*/

FieldContainerType &JointBase::getType(void) 
{
    return _type; 
} 

const FieldContainerType &JointBase::getType(void) const 
{
    return _type;
} 


FieldContainerPtr JointBase::shallowCopy(void) const 
{ 
    JointPtr returnValue; 

    newPtr(returnValue, dynamic_cast<const Joint *>(this)); 

    return returnValue; 
}

UInt32 JointBase::getContainerSize(void) const 
{ 
    return sizeof(Joint); 
}


#if !defined(OSG_FIXED_MFIELDSYNC)
void JointBase::executeSync(      FieldContainer &other,
                                    const BitVector      &whichField)
{
    this->executeSyncImpl((JointBase *) &other, whichField);
}
#else
void JointBase::executeSync(      FieldContainer &other,
                                    const BitVector      &whichField,                                    const SyncInfo       &sInfo     )
{
    this->executeSyncImpl((JointBase *) &other, whichField, sInfo);
}
void JointBase::execBeginEdit(const BitVector &whichField, 
                                            UInt32     uiAspect,
                                            UInt32     uiContainerSize) 
{
    this->execBeginEditImpl(whichField, uiAspect, uiContainerSize);
}

void JointBase::onDestroyAspect(UInt32 uiId, UInt32 uiAspect)
{
    Inherited::onDestroyAspect(uiId, uiAspect);

    _mfChildJoints.terminateShare(uiAspect, this->getContainerSize());
}
#endif

/*------------------------- constructors ----------------------------------*/

#ifdef OSG_WIN32_ICL
#pragma warning (disable : 383)
#endif

JointBase::JointBase(void) :
    _sfTransformation         (), 
    _sfBindTransformation     (), 
    _mfChildJoints            (), 
    _sfParentJoint            (), 
    Inherited() 
{
}

#ifdef OSG_WIN32_ICL
#pragma warning (default : 383)
#endif

JointBase::JointBase(const JointBase &source) :
    _sfTransformation         (source._sfTransformation         ), 
    _sfBindTransformation     (source._sfBindTransformation     ), 
    _mfChildJoints            (source._mfChildJoints            ), 
    _sfParentJoint            (source._sfParentJoint            ), 
    Inherited                 (source)
{
}

/*-------------------------- destructors ----------------------------------*/

JointBase::~JointBase(void)
{
}

/*------------------------------ access -----------------------------------*/

UInt32 JointBase::getBinSize(const BitVector &whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (TransformationFieldMask & whichField))
    {
        returnValue += _sfTransformation.getBinSize();
    }

    if(FieldBits::NoField != (BindTransformationFieldMask & whichField))
    {
        returnValue += _sfBindTransformation.getBinSize();
    }

    if(FieldBits::NoField != (ChildJointsFieldMask & whichField))
    {
        returnValue += _mfChildJoints.getBinSize();
    }

    if(FieldBits::NoField != (ParentJointFieldMask & whichField))
    {
        returnValue += _sfParentJoint.getBinSize();
    }


    return returnValue;
}

void JointBase::copyToBin(      BinaryDataHandler &pMem,
                                  const BitVector         &whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (TransformationFieldMask & whichField))
    {
        _sfTransformation.copyToBin(pMem);
    }

    if(FieldBits::NoField != (BindTransformationFieldMask & whichField))
    {
        _sfBindTransformation.copyToBin(pMem);
    }

    if(FieldBits::NoField != (ChildJointsFieldMask & whichField))
    {
        _mfChildJoints.copyToBin(pMem);
    }

    if(FieldBits::NoField != (ParentJointFieldMask & whichField))
    {
        _sfParentJoint.copyToBin(pMem);
    }


}

void JointBase::copyFromBin(      BinaryDataHandler &pMem,
                                    const BitVector    &whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (TransformationFieldMask & whichField))
    {
        _sfTransformation.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (BindTransformationFieldMask & whichField))
    {
        _sfBindTransformation.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (ChildJointsFieldMask & whichField))
    {
        _mfChildJoints.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (ParentJointFieldMask & whichField))
    {
        _sfParentJoint.copyFromBin(pMem);
    }


}

#if !defined(OSG_FIXED_MFIELDSYNC)
void JointBase::executeSyncImpl(      JointBase *pOther,
                                        const BitVector         &whichField)
{

    Inherited::executeSyncImpl(pOther, whichField);

    if(FieldBits::NoField != (TransformationFieldMask & whichField))
        _sfTransformation.syncWith(pOther->_sfTransformation);

    if(FieldBits::NoField != (BindTransformationFieldMask & whichField))
        _sfBindTransformation.syncWith(pOther->_sfBindTransformation);

    if(FieldBits::NoField != (ChildJointsFieldMask & whichField))
        _mfChildJoints.syncWith(pOther->_mfChildJoints);

    if(FieldBits::NoField != (ParentJointFieldMask & whichField))
        _sfParentJoint.syncWith(pOther->_sfParentJoint);


}
#else
void JointBase::executeSyncImpl(      JointBase *pOther,
                                        const BitVector         &whichField,
                                        const SyncInfo          &sInfo      )
{

    Inherited::executeSyncImpl(pOther, whichField, sInfo);

    if(FieldBits::NoField != (TransformationFieldMask & whichField))
        _sfTransformation.syncWith(pOther->_sfTransformation);

    if(FieldBits::NoField != (BindTransformationFieldMask & whichField))
        _sfBindTransformation.syncWith(pOther->_sfBindTransformation);

    if(FieldBits::NoField != (ParentJointFieldMask & whichField))
        _sfParentJoint.syncWith(pOther->_sfParentJoint);


    if(FieldBits::NoField != (ChildJointsFieldMask & whichField))
        _mfChildJoints.syncWith(pOther->_mfChildJoints, sInfo);


}

void JointBase::execBeginEditImpl (const BitVector &whichField, 
                                                 UInt32     uiAspect,
                                                 UInt32     uiContainerSize)
{
    Inherited::execBeginEditImpl(whichField, uiAspect, uiContainerSize);

    if(FieldBits::NoField != (ChildJointsFieldMask & whichField))
        _mfChildJoints.beginEdit(uiAspect, uiContainerSize);

}
#endif



OSG_END_NAMESPACE

#include <OpenSG/OSGSFieldTypeDef.inl>
#include <OpenSG/OSGMFieldTypeDef.inl>

OSG_BEGIN_NAMESPACE

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldDataTraits<JointPtr>::_type("JointPtr", "AttachmentContainerPtr");
#endif

OSG_DLLEXPORT_SFIELD_DEF1(JointPtr, OSG_ANIMATIONLIB_DLLTMPLMAPPING);
OSG_DLLEXPORT_MFIELD_DEF1(JointPtr, OSG_ANIMATIONLIB_DLLTMPLMAPPING);


/*------------------------------------------------------------------------*/
/*                              cvs id's                                  */

#ifdef OSG_SGI_CC
#pragma set woff 1174
#endif

#ifdef OSG_LINUX_ICC
#pragma warning( disable : 177 )
#endif

namespace
{
    static Char8 cvsid_cpp       [] = "@(#)$Id: FCBaseTemplate_cpp.h,v 1.47 2006/03/17 17:03:19 pdaehne Exp $";
    static Char8 cvsid_hpp       [] = OSGJOINTBASE_HEADER_CVSID;
    static Char8 cvsid_inl       [] = OSGJOINTBASE_INLINE_CVSID;

    static Char8 cvsid_fields_hpp[] = OSGJOINTFIELDS_HEADER_CVSID;
}

OSG_END_NAMESPACE

