/*---------------------------------------------------------------------------*\
 *                       OpenSG ToolBox Animation                            *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                         www.vrac.iastate.edu                              *
 *                                                                           *
 *                   Authors: David Kabala, John Morales                     *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class SkeletonAnimation!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#define OSG_COMPILESKELETONANIMATIONINST

#include <stdlib.h>
#include <stdio.h>

#include <OpenSG/OSGConfig.h>

#include "OSGSkeletonAnimationBase.h"
#include "OSGSkeletonAnimation.h"

#include "Interpolation/OSGKeyframeInterpolations.h"   // InterpolationType default header

OSG_BEGIN_NAMESPACE

const OSG::BitVector  SkeletonAnimationBase::RotationAnimatorsFieldMask = 
    (TypeTraits<BitVector>::One << SkeletonAnimationBase::RotationAnimatorsFieldId);

const OSG::BitVector  SkeletonAnimationBase::RotationAnimatorBonesFieldMask = 
    (TypeTraits<BitVector>::One << SkeletonAnimationBase::RotationAnimatorBonesFieldId);

const OSG::BitVector  SkeletonAnimationBase::TranslationAnimatorsFieldMask = 
    (TypeTraits<BitVector>::One << SkeletonAnimationBase::TranslationAnimatorsFieldId);

const OSG::BitVector  SkeletonAnimationBase::LengthAnimatorBonesFieldMask = 
    (TypeTraits<BitVector>::One << SkeletonAnimationBase::LengthAnimatorBonesFieldId);

const OSG::BitVector  SkeletonAnimationBase::LengthAnimatorsFieldMask = 
    (TypeTraits<BitVector>::One << SkeletonAnimationBase::LengthAnimatorsFieldId);

const OSG::BitVector  SkeletonAnimationBase::TranslationAnimatorBonesFieldMask = 
    (TypeTraits<BitVector>::One << SkeletonAnimationBase::TranslationAnimatorBonesFieldId);

const OSG::BitVector  SkeletonAnimationBase::SkeletonFieldMask = 
    (TypeTraits<BitVector>::One << SkeletonAnimationBase::SkeletonFieldId);

const OSG::BitVector  SkeletonAnimationBase::InterpolationTypeFieldMask = 
    (TypeTraits<BitVector>::One << SkeletonAnimationBase::InterpolationTypeFieldId);

const OSG::BitVector SkeletonAnimationBase::MTInfluenceMask = 
    (Inherited::MTInfluenceMask) | 
    (static_cast<BitVector>(0x0) << Inherited::NextFieldId); 


// Field descriptions

/*! \var KeyframeAnimatorPtr SkeletonAnimationBase::_mfRotationAnimators
    
*/
/*! \var BonePtr         SkeletonAnimationBase::_mfRotationAnimatorBones
    
*/
/*! \var KeyframeAnimatorPtr SkeletonAnimationBase::_mfTranslationAnimators
    
*/
/*! \var BonePtr         SkeletonAnimationBase::_mfLengthAnimatorBones
    
*/
/*! \var KeyframeAnimatorPtr SkeletonAnimationBase::_mfLengthAnimators
    
*/
/*! \var BonePtr         SkeletonAnimationBase::_mfTranslationAnimatorBones
    
*/
/*! \var SkeletonPtr     SkeletonAnimationBase::_sfSkeleton
    
*/
/*! \var UInt32          SkeletonAnimationBase::_sfInterpolationType
    
*/

//! SkeletonAnimation description

FieldDescription *SkeletonAnimationBase::_desc[] = 
{
    new FieldDescription(MFKeyframeAnimatorPtr::getClassType(), 
                     "RotationAnimators", 
                     RotationAnimatorsFieldId, RotationAnimatorsFieldMask,
                     false,
                     (FieldAccessMethod) &SkeletonAnimationBase::getMFRotationAnimators),
    new FieldDescription(MFBonePtr::getClassType(), 
                     "RotationAnimatorBones", 
                     RotationAnimatorBonesFieldId, RotationAnimatorBonesFieldMask,
                     false,
                     (FieldAccessMethod) &SkeletonAnimationBase::getMFRotationAnimatorBones),
    new FieldDescription(MFKeyframeAnimatorPtr::getClassType(), 
                     "TranslationAnimators", 
                     TranslationAnimatorsFieldId, TranslationAnimatorsFieldMask,
                     false,
                     (FieldAccessMethod) &SkeletonAnimationBase::getMFTranslationAnimators),
    new FieldDescription(MFBonePtr::getClassType(), 
                     "LengthAnimatorBones", 
                     LengthAnimatorBonesFieldId, LengthAnimatorBonesFieldMask,
                     false,
                     (FieldAccessMethod) &SkeletonAnimationBase::getMFLengthAnimatorBones),
    new FieldDescription(MFKeyframeAnimatorPtr::getClassType(), 
                     "LengthAnimators", 
                     LengthAnimatorsFieldId, LengthAnimatorsFieldMask,
                     false,
                     (FieldAccessMethod) &SkeletonAnimationBase::getMFLengthAnimators),
    new FieldDescription(MFBonePtr::getClassType(), 
                     "TranslationAnimatorBones", 
                     TranslationAnimatorBonesFieldId, TranslationAnimatorBonesFieldMask,
                     false,
                     (FieldAccessMethod) &SkeletonAnimationBase::getMFTranslationAnimatorBones),
    new FieldDescription(SFSkeletonPtr::getClassType(), 
                     "Skeleton", 
                     SkeletonFieldId, SkeletonFieldMask,
                     false,
                     (FieldAccessMethod) &SkeletonAnimationBase::getSFSkeleton),
    new FieldDescription(SFUInt32::getClassType(), 
                     "InterpolationType", 
                     InterpolationTypeFieldId, InterpolationTypeFieldMask,
                     false,
                     (FieldAccessMethod) &SkeletonAnimationBase::getSFInterpolationType)
};


FieldContainerType SkeletonAnimationBase::_type(
    "SkeletonAnimation",
    "Animation",
    NULL,
    (PrototypeCreateF) &SkeletonAnimationBase::createEmpty,
    SkeletonAnimation::initMethod,
    _desc,
    sizeof(_desc));

//OSG_FIELD_CONTAINER_DEF(SkeletonAnimationBase, SkeletonAnimationPtr)

/*------------------------------ get -----------------------------------*/

FieldContainerType &SkeletonAnimationBase::getType(void) 
{
    return _type; 
} 

const FieldContainerType &SkeletonAnimationBase::getType(void) const 
{
    return _type;
} 


FieldContainerPtr SkeletonAnimationBase::shallowCopy(void) const 
{ 
    SkeletonAnimationPtr returnValue; 

    newPtr(returnValue, dynamic_cast<const SkeletonAnimation *>(this)); 

    return returnValue; 
}

UInt32 SkeletonAnimationBase::getContainerSize(void) const 
{ 
    return sizeof(SkeletonAnimation); 
}


#if !defined(OSG_FIXED_MFIELDSYNC)
void SkeletonAnimationBase::executeSync(      FieldContainer &other,
                                    const BitVector      &whichField)
{
    this->executeSyncImpl((SkeletonAnimationBase *) &other, whichField);
}
#else
void SkeletonAnimationBase::executeSync(      FieldContainer &other,
                                    const BitVector      &whichField,                                    const SyncInfo       &sInfo     )
{
    this->executeSyncImpl((SkeletonAnimationBase *) &other, whichField, sInfo);
}
void SkeletonAnimationBase::execBeginEdit(const BitVector &whichField, 
                                            UInt32     uiAspect,
                                            UInt32     uiContainerSize) 
{
    this->execBeginEditImpl(whichField, uiAspect, uiContainerSize);
}

void SkeletonAnimationBase::onDestroyAspect(UInt32 uiId, UInt32 uiAspect)
{
    Inherited::onDestroyAspect(uiId, uiAspect);

    _mfRotationAnimators.terminateShare(uiAspect, this->getContainerSize());
    _mfRotationAnimatorBones.terminateShare(uiAspect, this->getContainerSize());
    _mfTranslationAnimators.terminateShare(uiAspect, this->getContainerSize());
    _mfLengthAnimatorBones.terminateShare(uiAspect, this->getContainerSize());
    _mfLengthAnimators.terminateShare(uiAspect, this->getContainerSize());
    _mfTranslationAnimatorBones.terminateShare(uiAspect, this->getContainerSize());
}
#endif

/*------------------------- constructors ----------------------------------*/

#ifdef OSG_WIN32_ICL
#pragma warning (disable : 383)
#endif

SkeletonAnimationBase::SkeletonAnimationBase(void) :
    _mfRotationAnimators      (), 
    _mfRotationAnimatorBones  (), 
    _mfTranslationAnimators   (), 
    _mfLengthAnimatorBones    (), 
    _mfLengthAnimators        (), 
    _mfTranslationAnimatorBones(), 
    _sfSkeleton               (SkeletonPtr(NullFC)), 
    _sfInterpolationType      (UInt32(LINEAR_INTERPOLATION)), 
    Inherited() 
{
}

#ifdef OSG_WIN32_ICL
#pragma warning (default : 383)
#endif

SkeletonAnimationBase::SkeletonAnimationBase(const SkeletonAnimationBase &source) :
    _mfRotationAnimators      (source._mfRotationAnimators      ), 
    _mfRotationAnimatorBones  (source._mfRotationAnimatorBones  ), 
    _mfTranslationAnimators   (source._mfTranslationAnimators   ), 
    _mfLengthAnimatorBones    (source._mfLengthAnimatorBones    ), 
    _mfLengthAnimators        (source._mfLengthAnimators        ), 
    _mfTranslationAnimatorBones(source._mfTranslationAnimatorBones), 
    _sfSkeleton               (source._sfSkeleton               ), 
    _sfInterpolationType      (source._sfInterpolationType      ), 
    Inherited                 (source)
{
}

/*-------------------------- destructors ----------------------------------*/

SkeletonAnimationBase::~SkeletonAnimationBase(void)
{
}

/*------------------------------ access -----------------------------------*/

UInt32 SkeletonAnimationBase::getBinSize(const BitVector &whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (RotationAnimatorsFieldMask & whichField))
    {
        returnValue += _mfRotationAnimators.getBinSize();
    }

    if(FieldBits::NoField != (RotationAnimatorBonesFieldMask & whichField))
    {
        returnValue += _mfRotationAnimatorBones.getBinSize();
    }

    if(FieldBits::NoField != (TranslationAnimatorsFieldMask & whichField))
    {
        returnValue += _mfTranslationAnimators.getBinSize();
    }

    if(FieldBits::NoField != (LengthAnimatorBonesFieldMask & whichField))
    {
        returnValue += _mfLengthAnimatorBones.getBinSize();
    }

    if(FieldBits::NoField != (LengthAnimatorsFieldMask & whichField))
    {
        returnValue += _mfLengthAnimators.getBinSize();
    }

    if(FieldBits::NoField != (TranslationAnimatorBonesFieldMask & whichField))
    {
        returnValue += _mfTranslationAnimatorBones.getBinSize();
    }

    if(FieldBits::NoField != (SkeletonFieldMask & whichField))
    {
        returnValue += _sfSkeleton.getBinSize();
    }

    if(FieldBits::NoField != (InterpolationTypeFieldMask & whichField))
    {
        returnValue += _sfInterpolationType.getBinSize();
    }


    return returnValue;
}

void SkeletonAnimationBase::copyToBin(      BinaryDataHandler &pMem,
                                  const BitVector         &whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (RotationAnimatorsFieldMask & whichField))
    {
        _mfRotationAnimators.copyToBin(pMem);
    }

    if(FieldBits::NoField != (RotationAnimatorBonesFieldMask & whichField))
    {
        _mfRotationAnimatorBones.copyToBin(pMem);
    }

    if(FieldBits::NoField != (TranslationAnimatorsFieldMask & whichField))
    {
        _mfTranslationAnimators.copyToBin(pMem);
    }

    if(FieldBits::NoField != (LengthAnimatorBonesFieldMask & whichField))
    {
        _mfLengthAnimatorBones.copyToBin(pMem);
    }

    if(FieldBits::NoField != (LengthAnimatorsFieldMask & whichField))
    {
        _mfLengthAnimators.copyToBin(pMem);
    }

    if(FieldBits::NoField != (TranslationAnimatorBonesFieldMask & whichField))
    {
        _mfTranslationAnimatorBones.copyToBin(pMem);
    }

    if(FieldBits::NoField != (SkeletonFieldMask & whichField))
    {
        _sfSkeleton.copyToBin(pMem);
    }

    if(FieldBits::NoField != (InterpolationTypeFieldMask & whichField))
    {
        _sfInterpolationType.copyToBin(pMem);
    }


}

void SkeletonAnimationBase::copyFromBin(      BinaryDataHandler &pMem,
                                    const BitVector    &whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (RotationAnimatorsFieldMask & whichField))
    {
        _mfRotationAnimators.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (RotationAnimatorBonesFieldMask & whichField))
    {
        _mfRotationAnimatorBones.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (TranslationAnimatorsFieldMask & whichField))
    {
        _mfTranslationAnimators.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (LengthAnimatorBonesFieldMask & whichField))
    {
        _mfLengthAnimatorBones.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (LengthAnimatorsFieldMask & whichField))
    {
        _mfLengthAnimators.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (TranslationAnimatorBonesFieldMask & whichField))
    {
        _mfTranslationAnimatorBones.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (SkeletonFieldMask & whichField))
    {
        _sfSkeleton.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (InterpolationTypeFieldMask & whichField))
    {
        _sfInterpolationType.copyFromBin(pMem);
    }


}

#if !defined(OSG_FIXED_MFIELDSYNC)
void SkeletonAnimationBase::executeSyncImpl(      SkeletonAnimationBase *pOther,
                                        const BitVector         &whichField)
{

    Inherited::executeSyncImpl(pOther, whichField);

    if(FieldBits::NoField != (RotationAnimatorsFieldMask & whichField))
        _mfRotationAnimators.syncWith(pOther->_mfRotationAnimators);

    if(FieldBits::NoField != (RotationAnimatorBonesFieldMask & whichField))
        _mfRotationAnimatorBones.syncWith(pOther->_mfRotationAnimatorBones);

    if(FieldBits::NoField != (TranslationAnimatorsFieldMask & whichField))
        _mfTranslationAnimators.syncWith(pOther->_mfTranslationAnimators);

    if(FieldBits::NoField != (LengthAnimatorBonesFieldMask & whichField))
        _mfLengthAnimatorBones.syncWith(pOther->_mfLengthAnimatorBones);

    if(FieldBits::NoField != (LengthAnimatorsFieldMask & whichField))
        _mfLengthAnimators.syncWith(pOther->_mfLengthAnimators);

    if(FieldBits::NoField != (TranslationAnimatorBonesFieldMask & whichField))
        _mfTranslationAnimatorBones.syncWith(pOther->_mfTranslationAnimatorBones);

    if(FieldBits::NoField != (SkeletonFieldMask & whichField))
        _sfSkeleton.syncWith(pOther->_sfSkeleton);

    if(FieldBits::NoField != (InterpolationTypeFieldMask & whichField))
        _sfInterpolationType.syncWith(pOther->_sfInterpolationType);


}
#else
void SkeletonAnimationBase::executeSyncImpl(      SkeletonAnimationBase *pOther,
                                        const BitVector         &whichField,
                                        const SyncInfo          &sInfo      )
{

    Inherited::executeSyncImpl(pOther, whichField, sInfo);

    if(FieldBits::NoField != (SkeletonFieldMask & whichField))
        _sfSkeleton.syncWith(pOther->_sfSkeleton);

    if(FieldBits::NoField != (InterpolationTypeFieldMask & whichField))
        _sfInterpolationType.syncWith(pOther->_sfInterpolationType);


    if(FieldBits::NoField != (RotationAnimatorsFieldMask & whichField))
        _mfRotationAnimators.syncWith(pOther->_mfRotationAnimators, sInfo);

    if(FieldBits::NoField != (RotationAnimatorBonesFieldMask & whichField))
        _mfRotationAnimatorBones.syncWith(pOther->_mfRotationAnimatorBones, sInfo);

    if(FieldBits::NoField != (TranslationAnimatorsFieldMask & whichField))
        _mfTranslationAnimators.syncWith(pOther->_mfTranslationAnimators, sInfo);

    if(FieldBits::NoField != (LengthAnimatorBonesFieldMask & whichField))
        _mfLengthAnimatorBones.syncWith(pOther->_mfLengthAnimatorBones, sInfo);

    if(FieldBits::NoField != (LengthAnimatorsFieldMask & whichField))
        _mfLengthAnimators.syncWith(pOther->_mfLengthAnimators, sInfo);

    if(FieldBits::NoField != (TranslationAnimatorBonesFieldMask & whichField))
        _mfTranslationAnimatorBones.syncWith(pOther->_mfTranslationAnimatorBones, sInfo);


}

void SkeletonAnimationBase::execBeginEditImpl (const BitVector &whichField, 
                                                 UInt32     uiAspect,
                                                 UInt32     uiContainerSize)
{
    Inherited::execBeginEditImpl(whichField, uiAspect, uiContainerSize);

    if(FieldBits::NoField != (RotationAnimatorsFieldMask & whichField))
        _mfRotationAnimators.beginEdit(uiAspect, uiContainerSize);

    if(FieldBits::NoField != (RotationAnimatorBonesFieldMask & whichField))
        _mfRotationAnimatorBones.beginEdit(uiAspect, uiContainerSize);

    if(FieldBits::NoField != (TranslationAnimatorsFieldMask & whichField))
        _mfTranslationAnimators.beginEdit(uiAspect, uiContainerSize);

    if(FieldBits::NoField != (LengthAnimatorBonesFieldMask & whichField))
        _mfLengthAnimatorBones.beginEdit(uiAspect, uiContainerSize);

    if(FieldBits::NoField != (LengthAnimatorsFieldMask & whichField))
        _mfLengthAnimators.beginEdit(uiAspect, uiContainerSize);

    if(FieldBits::NoField != (TranslationAnimatorBonesFieldMask & whichField))
        _mfTranslationAnimatorBones.beginEdit(uiAspect, uiContainerSize);

}
#endif



OSG_END_NAMESPACE

#include <OpenSG/OSGSFieldTypeDef.inl>
#include <OpenSG/OSGMFieldTypeDef.inl>

OSG_BEGIN_NAMESPACE

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldDataTraits<SkeletonAnimationPtr>::_type("SkeletonAnimationPtr", "AnimationPtr");
#endif

OSG_DLLEXPORT_SFIELD_DEF1(SkeletonAnimationPtr, OSG_ANIMATIONLIB_DLLTMPLMAPPING);
OSG_DLLEXPORT_MFIELD_DEF1(SkeletonAnimationPtr, OSG_ANIMATIONLIB_DLLTMPLMAPPING);


/*------------------------------------------------------------------------*/
/*                              cvs id's                                  */

#ifdef OSG_SGI_CC
#pragma set woff 1174
#endif

#ifdef OSG_LINUX_ICC
#pragma warning( disable : 177 )
#endif

namespace
{
    static Char8 cvsid_cpp       [] = "@(#)$Id: FCBaseTemplate_cpp.h,v 1.47 2006/03/17 17:03:19 pdaehne Exp $";
    static Char8 cvsid_hpp       [] = OSGSKELETONANIMATIONBASE_HEADER_CVSID;
    static Char8 cvsid_inl       [] = OSGSKELETONANIMATIONBASE_INLINE_CVSID;

    static Char8 cvsid_fields_hpp[] = OSGSKELETONANIMATIONFIELDS_HEADER_CVSID;
}

OSG_END_NAMESPACE

