/*---------------------------------------------------------------------------*\
 *                       OpenSG ToolBox Animation                            *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                         www.vrac.iastate.edu                              *
 *                                                                           *
 *                          Authors: David Kabala                            *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class SkeletonBlendedGeometry!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#define OSG_COMPILESKELETONBLENDEDGEOMETRYINST

#include <stdlib.h>
#include <stdio.h>

#include <OpenSG/OSGConfig.h>

#include "OSGSkeletonBlendedGeometryBase.h"
#include "OSGSkeletonBlendedGeometry.h"


OSG_BEGIN_NAMESPACE

const OSG::BitVector  SkeletonBlendedGeometryBase::BaseGeometryFieldMask = 
    (TypeTraits<BitVector>::One << SkeletonBlendedGeometryBase::BaseGeometryFieldId);

const OSG::BitVector  SkeletonBlendedGeometryBase::JointsFieldMask = 
    (TypeTraits<BitVector>::One << SkeletonBlendedGeometryBase::JointsFieldId);

const OSG::BitVector  SkeletonBlendedGeometryBase::PositionIndexesFieldMask = 
    (TypeTraits<BitVector>::One << SkeletonBlendedGeometryBase::PositionIndexesFieldId);

const OSG::BitVector  SkeletonBlendedGeometryBase::BlendAmountsFieldMask = 
    (TypeTraits<BitVector>::One << SkeletonBlendedGeometryBase::BlendAmountsFieldId);

const OSG::BitVector  SkeletonBlendedGeometryBase::SkeletonsFieldMask = 
    (TypeTraits<BitVector>::One << SkeletonBlendedGeometryBase::SkeletonsFieldId);

const OSG::BitVector  SkeletonBlendedGeometryBase::BlendModeFieldMask = 
    (TypeTraits<BitVector>::One << SkeletonBlendedGeometryBase::BlendModeFieldId);

const OSG::BitVector SkeletonBlendedGeometryBase::MTInfluenceMask = 
    (Inherited::MTInfluenceMask) | 
    (static_cast<BitVector>(0x0) << Inherited::NextFieldId); 


// Field descriptions

/*! \var GeometryPtr     SkeletonBlendedGeometryBase::_sfBaseGeometry
    
*/
/*! \var JointPtr        SkeletonBlendedGeometryBase::_mfJoints
    
*/
/*! \var UInt32          SkeletonBlendedGeometryBase::_mfPositionIndexes
    
*/
/*! \var Real32          SkeletonBlendedGeometryBase::_mfBlendAmounts
    
*/
/*! \var SkeletonPtr     SkeletonBlendedGeometryBase::_mfSkeletons
    
*/
/*! \var UInt32          SkeletonBlendedGeometryBase::_sfBlendMode
    
*/

//! SkeletonBlendedGeometry description

FieldDescription *SkeletonBlendedGeometryBase::_desc[] = 
{
    new FieldDescription(SFGeometryPtr::getClassType(), 
                     "BaseGeometry", 
                     BaseGeometryFieldId, BaseGeometryFieldMask,
                     false,
                     (FieldAccessMethod) &SkeletonBlendedGeometryBase::getSFBaseGeometry),
    new FieldDescription(MFJointPtr::getClassType(), 
                     "Joints", 
                     JointsFieldId, JointsFieldMask,
                     false,
                     (FieldAccessMethod) &SkeletonBlendedGeometryBase::getMFJoints),
    new FieldDescription(MFUInt32::getClassType(), 
                     "PositionIndexes", 
                     PositionIndexesFieldId, PositionIndexesFieldMask,
                     false,
                     (FieldAccessMethod) &SkeletonBlendedGeometryBase::getMFPositionIndexes),
    new FieldDescription(MFReal32::getClassType(), 
                     "BlendAmounts", 
                     BlendAmountsFieldId, BlendAmountsFieldMask,
                     false,
                     (FieldAccessMethod) &SkeletonBlendedGeometryBase::getMFBlendAmounts),
    new FieldDescription(MFSkeletonPtr::getClassType(), 
                     "Skeletons", 
                     SkeletonsFieldId, SkeletonsFieldMask,
                     false,
                     (FieldAccessMethod) &SkeletonBlendedGeometryBase::getMFSkeletons),
    new FieldDescription(SFUInt32::getClassType(), 
                     "BlendMode", 
                     BlendModeFieldId, BlendModeFieldMask,
                     false,
                     (FieldAccessMethod) &SkeletonBlendedGeometryBase::getSFBlendMode)
};


FieldContainerType SkeletonBlendedGeometryBase::_type(
    "SkeletonBlendedGeometry",
    "Geometry",
    NULL,
    (PrototypeCreateF) &SkeletonBlendedGeometryBase::createEmpty,
    SkeletonBlendedGeometry::initMethod,
    _desc,
    sizeof(_desc));

//OSG_FIELD_CONTAINER_DEF(SkeletonBlendedGeometryBase, SkeletonBlendedGeometryPtr)

/*------------------------------ get -----------------------------------*/

FieldContainerType &SkeletonBlendedGeometryBase::getType(void) 
{
    return _type; 
} 

const FieldContainerType &SkeletonBlendedGeometryBase::getType(void) const 
{
    return _type;
} 


FieldContainerPtr SkeletonBlendedGeometryBase::shallowCopy(void) const 
{ 
    SkeletonBlendedGeometryPtr returnValue; 

    newPtr(returnValue, dynamic_cast<const SkeletonBlendedGeometry *>(this)); 

    return returnValue; 
}

UInt32 SkeletonBlendedGeometryBase::getContainerSize(void) const 
{ 
    return sizeof(SkeletonBlendedGeometry); 
}


#if !defined(OSG_FIXED_MFIELDSYNC)
void SkeletonBlendedGeometryBase::executeSync(      FieldContainer &other,
                                    const BitVector      &whichField)
{
    this->executeSyncImpl((SkeletonBlendedGeometryBase *) &other, whichField);
}
#else
void SkeletonBlendedGeometryBase::executeSync(      FieldContainer &other,
                                    const BitVector      &whichField,                                    const SyncInfo       &sInfo     )
{
    this->executeSyncImpl((SkeletonBlendedGeometryBase *) &other, whichField, sInfo);
}
void SkeletonBlendedGeometryBase::execBeginEdit(const BitVector &whichField, 
                                            UInt32     uiAspect,
                                            UInt32     uiContainerSize) 
{
    this->execBeginEditImpl(whichField, uiAspect, uiContainerSize);
}

void SkeletonBlendedGeometryBase::onDestroyAspect(UInt32 uiId, UInt32 uiAspect)
{
    Inherited::onDestroyAspect(uiId, uiAspect);

    _mfJoints.terminateShare(uiAspect, this->getContainerSize());
    _mfPositionIndexes.terminateShare(uiAspect, this->getContainerSize());
    _mfBlendAmounts.terminateShare(uiAspect, this->getContainerSize());
    _mfSkeletons.terminateShare(uiAspect, this->getContainerSize());
}
#endif

/*------------------------- constructors ----------------------------------*/

#ifdef OSG_WIN32_ICL
#pragma warning (disable : 383)
#endif

SkeletonBlendedGeometryBase::SkeletonBlendedGeometryBase(void) :
    _sfBaseGeometry           (), 
    _mfJoints                 (), 
    _mfPositionIndexes        (), 
    _mfBlendAmounts           (), 
    _mfSkeletons              (), 
    _sfBlendMode              (), 
    Inherited() 
{
}

#ifdef OSG_WIN32_ICL
#pragma warning (default : 383)
#endif

SkeletonBlendedGeometryBase::SkeletonBlendedGeometryBase(const SkeletonBlendedGeometryBase &source) :
    _sfBaseGeometry           (source._sfBaseGeometry           ), 
    _mfJoints                 (source._mfJoints                 ), 
    _mfPositionIndexes        (source._mfPositionIndexes        ), 
    _mfBlendAmounts           (source._mfBlendAmounts           ), 
    _mfSkeletons              (source._mfSkeletons              ), 
    _sfBlendMode              (source._sfBlendMode              ), 
    Inherited                 (source)
{
}

/*-------------------------- destructors ----------------------------------*/

SkeletonBlendedGeometryBase::~SkeletonBlendedGeometryBase(void)
{
}

/*------------------------------ access -----------------------------------*/

UInt32 SkeletonBlendedGeometryBase::getBinSize(const BitVector &whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (BaseGeometryFieldMask & whichField))
    {
        returnValue += _sfBaseGeometry.getBinSize();
    }

    if(FieldBits::NoField != (JointsFieldMask & whichField))
    {
        returnValue += _mfJoints.getBinSize();
    }

    if(FieldBits::NoField != (PositionIndexesFieldMask & whichField))
    {
        returnValue += _mfPositionIndexes.getBinSize();
    }

    if(FieldBits::NoField != (BlendAmountsFieldMask & whichField))
    {
        returnValue += _mfBlendAmounts.getBinSize();
    }

    if(FieldBits::NoField != (SkeletonsFieldMask & whichField))
    {
        returnValue += _mfSkeletons.getBinSize();
    }

    if(FieldBits::NoField != (BlendModeFieldMask & whichField))
    {
        returnValue += _sfBlendMode.getBinSize();
    }


    return returnValue;
}

void SkeletonBlendedGeometryBase::copyToBin(      BinaryDataHandler &pMem,
                                  const BitVector         &whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (BaseGeometryFieldMask & whichField))
    {
        _sfBaseGeometry.copyToBin(pMem);
    }

    if(FieldBits::NoField != (JointsFieldMask & whichField))
    {
        _mfJoints.copyToBin(pMem);
    }

    if(FieldBits::NoField != (PositionIndexesFieldMask & whichField))
    {
        _mfPositionIndexes.copyToBin(pMem);
    }

    if(FieldBits::NoField != (BlendAmountsFieldMask & whichField))
    {
        _mfBlendAmounts.copyToBin(pMem);
    }

    if(FieldBits::NoField != (SkeletonsFieldMask & whichField))
    {
        _mfSkeletons.copyToBin(pMem);
    }

    if(FieldBits::NoField != (BlendModeFieldMask & whichField))
    {
        _sfBlendMode.copyToBin(pMem);
    }


}

void SkeletonBlendedGeometryBase::copyFromBin(      BinaryDataHandler &pMem,
                                    const BitVector    &whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (BaseGeometryFieldMask & whichField))
    {
        _sfBaseGeometry.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (JointsFieldMask & whichField))
    {
        _mfJoints.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (PositionIndexesFieldMask & whichField))
    {
        _mfPositionIndexes.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (BlendAmountsFieldMask & whichField))
    {
        _mfBlendAmounts.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (SkeletonsFieldMask & whichField))
    {
        _mfSkeletons.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (BlendModeFieldMask & whichField))
    {
        _sfBlendMode.copyFromBin(pMem);
    }


}

#if !defined(OSG_FIXED_MFIELDSYNC)
void SkeletonBlendedGeometryBase::executeSyncImpl(      SkeletonBlendedGeometryBase *pOther,
                                        const BitVector         &whichField)
{

    Inherited::executeSyncImpl(pOther, whichField);

    if(FieldBits::NoField != (BaseGeometryFieldMask & whichField))
        _sfBaseGeometry.syncWith(pOther->_sfBaseGeometry);

    if(FieldBits::NoField != (JointsFieldMask & whichField))
        _mfJoints.syncWith(pOther->_mfJoints);

    if(FieldBits::NoField != (PositionIndexesFieldMask & whichField))
        _mfPositionIndexes.syncWith(pOther->_mfPositionIndexes);

    if(FieldBits::NoField != (BlendAmountsFieldMask & whichField))
        _mfBlendAmounts.syncWith(pOther->_mfBlendAmounts);

    if(FieldBits::NoField != (SkeletonsFieldMask & whichField))
        _mfSkeletons.syncWith(pOther->_mfSkeletons);

    if(FieldBits::NoField != (BlendModeFieldMask & whichField))
        _sfBlendMode.syncWith(pOther->_sfBlendMode);


}
#else
void SkeletonBlendedGeometryBase::executeSyncImpl(      SkeletonBlendedGeometryBase *pOther,
                                        const BitVector         &whichField,
                                        const SyncInfo          &sInfo      )
{

    Inherited::executeSyncImpl(pOther, whichField, sInfo);

    if(FieldBits::NoField != (BaseGeometryFieldMask & whichField))
        _sfBaseGeometry.syncWith(pOther->_sfBaseGeometry);

    if(FieldBits::NoField != (BlendModeFieldMask & whichField))
        _sfBlendMode.syncWith(pOther->_sfBlendMode);


    if(FieldBits::NoField != (JointsFieldMask & whichField))
        _mfJoints.syncWith(pOther->_mfJoints, sInfo);

    if(FieldBits::NoField != (PositionIndexesFieldMask & whichField))
        _mfPositionIndexes.syncWith(pOther->_mfPositionIndexes, sInfo);

    if(FieldBits::NoField != (BlendAmountsFieldMask & whichField))
        _mfBlendAmounts.syncWith(pOther->_mfBlendAmounts, sInfo);

    if(FieldBits::NoField != (SkeletonsFieldMask & whichField))
        _mfSkeletons.syncWith(pOther->_mfSkeletons, sInfo);


}

void SkeletonBlendedGeometryBase::execBeginEditImpl (const BitVector &whichField, 
                                                 UInt32     uiAspect,
                                                 UInt32     uiContainerSize)
{
    Inherited::execBeginEditImpl(whichField, uiAspect, uiContainerSize);

    if(FieldBits::NoField != (JointsFieldMask & whichField))
        _mfJoints.beginEdit(uiAspect, uiContainerSize);

    if(FieldBits::NoField != (PositionIndexesFieldMask & whichField))
        _mfPositionIndexes.beginEdit(uiAspect, uiContainerSize);

    if(FieldBits::NoField != (BlendAmountsFieldMask & whichField))
        _mfBlendAmounts.beginEdit(uiAspect, uiContainerSize);

    if(FieldBits::NoField != (SkeletonsFieldMask & whichField))
        _mfSkeletons.beginEdit(uiAspect, uiContainerSize);

}
#endif



OSG_END_NAMESPACE

#include <OpenSG/OSGSFieldTypeDef.inl>
#include <OpenSG/OSGMFieldTypeDef.inl>

OSG_BEGIN_NAMESPACE

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldDataTraits<SkeletonBlendedGeometryPtr>::_type("SkeletonBlendedGeometryPtr", "GeometryPtr");
#endif

OSG_DLLEXPORT_SFIELD_DEF1(SkeletonBlendedGeometryPtr, OSG_ANIMATIONLIB_DLLTMPLMAPPING);
OSG_DLLEXPORT_MFIELD_DEF1(SkeletonBlendedGeometryPtr, OSG_ANIMATIONLIB_DLLTMPLMAPPING);


/*------------------------------------------------------------------------*/
/*                              cvs id's                                  */

#ifdef OSG_SGI_CC
#pragma set woff 1174
#endif

#ifdef OSG_LINUX_ICC
#pragma warning( disable : 177 )
#endif

namespace
{
    static Char8 cvsid_cpp       [] = "@(#)$Id: FCBaseTemplate_cpp.h,v 1.47 2006/03/17 17:03:19 pdaehne Exp $";
    static Char8 cvsid_hpp       [] = OSGSKELETONBLENDEDGEOMETRYBASE_HEADER_CVSID;
    static Char8 cvsid_inl       [] = OSGSKELETONBLENDEDGEOMETRYBASE_INLINE_CVSID;

    static Char8 cvsid_fields_hpp[] = OSGSKELETONBLENDEDGEOMETRYFIELDS_HEADER_CVSID;
}

OSG_END_NAMESPACE

