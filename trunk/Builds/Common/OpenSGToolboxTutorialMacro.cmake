MACRO(OPENSG_TOOLBOX_TUTORIALS USE_FMOD USE_ODE USE_LUA TOOLBOX_LIBRARIES)

######## IS 64 bit
IF( NOT APPLE )
   # check 64 bit
   IF( ${CMAKE_SIZEOF_VOID_P} EQUAL 4 )
     SET( HAVE_64_BIT 0 )
     MESSAGE("32 bit")
   ELSE( ${CMAKE_SIZEOF_VOID_P} EQUAL 4 )
     SET( HAVE_64_BIT 1 )
     MESSAGE("64 bit")
   ENDIF( ${CMAKE_SIZEOF_VOID_P} EQUAL 4 )
ELSE( NOT APPLE )
   SET( HAVE_64_BIT 0)
ENDIF( NOT APPLE )

######### OS X Specifics
IF(APPLE)
    SET(PLATFORM_COMPILE_FLAGS  "-arch i386 -mmacosx-version-min=10.5")
    SET(PLATFORM_LINKER_FLAGS "-arch i386 -mmacosx-version-min=10.5")
    SET(ENV{MACOSX_DEPLOYMENT_TARGET} 10.5)
ENDIF(APPLE)

######### FMod
IF(${USE_FMOD} EQUAL 1)
   MESSAGE("Fmod Enabled")
   FIND_PATH(FMOD_BASE_DIR NAMES api/inc/fmod.h PATHS "/Developer/FMOD Programmers API" "${CMAKE_SOURCE_DIR}/../../../")
   IF(NOT EXISTS ${FMOD_BASE_DIR})
      MESSAGE(SEND_ERROR "The supplied Fmod Base dir: ${FMOD_BASE_DIR} does not exist")
   ENDIF(NOT EXISTS ${FMOD_BASE_DIR})
   IF(NOT EXISTS ${FMOD_BASE_DIR}/api/inc)
      MESSAGE(SEND_ERROR "The Fmod Include dir: ${FMOD_BASE_DIR}/api/inc does not exist")
   ENDIF(NOT EXISTS ${FMOD_BASE_DIR}/api/inc)
   IF(NOT EXISTS ${FMOD_BASE_DIR}/api/lib)
      MESSAGE(SEND_ERROR "The Fmod Include dir: ${FMOD_BASE_DIR}/api/lib does not exist")
   ENDIF(NOT EXISTS ${FMOD_BASE_DIR}/api/lib)

   SET(FMOD_INC_DIR ${FMOD_BASE_DIR}/api/inc)
   SET(FMOD_LIB_DIR ${FMOD_BASE_DIR}/api/lib)
   IF(HAVE_64_BIT)
      SET(FMOD_LIBRARIES fmodex64)
   ELSE(HAVE_64_BIT)
      SET(FMOD_LIBRARIES fmodex)
   ENDIF(HAVE_64_BIT)
   #Definition required when building the library
   ADD_DEFINITIONS(-D_OSG_TOOLBOX_USE_FMOD_)
ENDIF(${USE_FMOD} EQUAL 1)

######### Lua
IF(${USE_LUA} EQUAL 1)
   MESSAGE("Lua Enabled")
   FIND_PATH(LUA_BASE_DIR include/lua.hpp PATHS /usr /usr/local)
   IF(NOT EXISTS ${LUA_BASE_DIR})
      MESSAGE(SEND_ERROR "The supplied Lua Base dir: ${LUA_BASE_DIR} does not exists")
   ENDIF(NOT EXISTS ${LUA_BASE_DIR})
   IF(NOT EXISTS ${LUA_BASE_DIR}/include)
      MESSAGE(SEND_ERROR "The Lua Include dir: ${LUA_BASE_DIR}/include does not exists")
   ENDIF(NOT EXISTS ${LUA_BASE_DIR}/include)
   IF(NOT EXISTS ${LUA_BASE_DIR}/lib)
      MESSAGE(SEND_ERROR "The Lua Include dir: ${LUA_BASE_DIR}/lib does not exists")
   ENDIF(NOT EXISTS ${LUA_BASE_DIR}/lib)

   SET(LUA_INC_DIR ${LUA_BASE_DIR}/include)
   SET(LUA_LIB_DIR ${LUA_BASE_DIR}/lib)
   SET(LUA_LIBRARIES liblua)
   SET(LUA_STATIC_LIBRARY_LOCATION ${LUA_LIB_DIR}/liblua.a)

    ADD_LIBRARY(lua_lib_static STATIC IMPORTED)
    SET_PROPERTY(TARGET lua_lib_static  PROPERTY
    IMPORTED_LOCATION ${LUA_STATIC_LIBRARY_LOCATION})
   SET(LUA_STATIC_LIBRARY lua_lib_static)
ENDIF(${USE_LUA} EQUAL 1)


######### OpenSG
IF(WIN32)
   SET(OPENSG_BASE_DIR $ENV{OPENSG}/..)
ENDIF(WIN32)

FIND_PATH(OPENSG_BASE_DIR include/OpenSG/OSGConfig.h "${CMAKE_SOURCE_DIR}/../../../")
SET(OPENSG_INC_DIR ${OPENSG_BASE_DIR}/include)
SET(OPENSG_LIB_DIR ${OPENSG_BASE_DIR}/lib)

IF(NOT WIN32)
   SET(OSG_CONFIG ${OPENSG_BASE_DIR}/bin/osg-config)
   #IF (${OSG_CONFIG})
     IF(APPLE)
       EXECUTE_PROCESS(COMMAND ${OSG_CONFIG} --dbg --cflags Base System OUTPUT_VARIABLE OPENSG_CXX_FLAGS_DBG)
       STRING(STRIP ${OPENSG_CXX_FLAGS_DBG}  OPENSG_CXX_FLAGS_DBG)
       EXECUTE_PROCESS(COMMAND ${OSG_CONFIG} --opt --cflags Base System OUTPUT_VARIABLE OPENSG_CXX_FLAGS_OPT)
       STRING(STRIP ${OPENSG_CXX_FLAGS_OPT}  OPENSG_CXX_FLAGS_OPT)
       EXECUTE_PROCESS(COMMAND ${OSG_CONFIG} --dbg --lflags Base System OUTPUT_VARIABLE OPENSG_LD_FLAGS_DBG)
       STRING(STRIP ${OPENSG_LD_FLAGS_DBG}  OPENSG_LD_FLAGS_DBG)
       EXECUTE_PROCESS(COMMAND ${OSG_CONFIG} --opt --lflags Base System OUTPUT_VARIABLE OPENSG_LD_FLAGS_OPT)
       STRING(STRIP ${OPENSG_LD_FLAGS_OPT}  OPENSG_LD_FLAGS_OPT)
       EXECUTE_PROCESS(COMMAND ${OSG_CONFIG} --opt --libs Base System OUTPUT_VARIABLE OPENSG_LIBS_OPT)
       STRING(STRIP ${OPENSG_LIBS_OPT}  OPENSG_LIBS_OPT)
       SET(OPENSG_LIBS_OPT "-L${OPENSG_LIB_DIR}/opt ${OPENSG_LIBS_OPT} -framework Carbon -framework AGL -lOSGWindowCarbon")
       EXECUTE_PROCESS(COMMAND ${OSG_CONFIG} --dbg --libs Base System OUTPUT_VARIABLE OPENSG_LIBS_DBG)
       STRING(STRIP ${OPENSG_LIBS_DBG}  OPENSG_LIBS_DBG)
       SET(OPENSG_LIBS_DBG "-L${OPENSG_LIB_DIR}/dbg ${OPENSG_LIBS_DBG} -framework Carbon -framework AGL -lOSGWindowCarbon")
     ELSE(APPLE)
       EXECUTE_PROCESS(COMMAND ${OSG_CONFIG} --dbg --cflags Base System X OUTPUT_VARIABLE OPENSG_CXX_FLAGS_DBG)
       STRING(STRIP ${OPENSG_CXX_FLAGS_DBG}  OPENSG_CXX_FLAGS_DBG)
       EXECUTE_PROCESS(COMMAND ${OSG_CONFIG} --opt --cflags Base System X OUTPUT_VARIABLE OPENSG_CXX_FLAGS_OPT)
       STRING(STRIP ${OPENSG_CXX_FLAGS_OPT}  OPENSG_CXX_FLAGS_OPT)
       EXECUTE_PROCESS(COMMAND ${OSG_CONFIG} --dbg --lflags Base System X OUTPUT_VARIABLE OPENSG_LD_FLAGS_DBG)
       STRING(STRIP ${OPENSG_LD_FLAGS_DBG}  OPENSG_LD_FLAGS_DBG)
       EXECUTE_PROCESS(COMMAND ${OSG_CONFIG} --opt --lflags Base System X OUTPUT_VARIABLE OPENSG_LD_FLAGS_OPT)
       STRING(STRIP ${OPENSG_LD_FLAGS_OPT}  OPENSG_LD_FLAGS_OPT)
       EXECUTE_PROCESS(COMMAND ${OSG_CONFIG} --opt --libs Base System X OUTPUT_VARIABLE OPENSG_LIBS_OPT)
       STRING(STRIP ${OPENSG_LIBS_OPT}  OPENSG_LIBS_OPT)
       EXECUTE_PROCESS(COMMAND ${OSG_CONFIG} --dbg --libs Base System X OUTPUT_VARIABLE OPENSG_LIBS_DBG)
       STRING(STRIP ${OPENSG_CXX_FLAGS_OPT}  OPENSG_LIBS_DBG)
     ENDIF(APPLE)
     #ELSE(${OSG_CONFIG})
     #   MESSAGE("osg-config not found")
     #ENDIF (${OSG_CONFIG})
ENDIF(NOT WIN32)

IF(WIN32)
   SET(OPENSG_CXX_FLAGS_DBG "-D_WIN32_WINNT=0x0400 -D_OSG_HAVE_CONFIGURED_H_ -DOSG_WITH_GLUT -DOSG_WITH_GIF -DOSG_WITH_TIF -DOSG_WITH_JPG -D_DEBUG /MP")
   SET(OPENSG_CXX_FLAGS_OPT "-D_WIN32_WINNT=0x0400 -D_OSG_HAVE_CONFIGURED_H_ -DOSG_WITH_GLUT -DOSG_WITH_GIF -DOSG_WITH_TIF -DOSG_WITH_JPG /MP")
   SET(OPENSG_LD_FLAGS_DBG "")
   SET(OPENSG_LD_FLAGS_OPT "")
   SET(OPENSG_LIBS_DBG OSGBaseD OSGSystemD)
   SET(OPENSG_LIBS_OPT OSGBase OSGSystem)
   SET(OPENSG_WINDOW_LIBS debug OSGWindowWIN32D optimized OSGWindowWIN32)                
ENDIF(WIN32)

######## BOOST
IF(EXISTS ${CMAKE_SOURCE_DIR}/../Revision)
    #This configuration is part of an install
    #Look in the default install location for boost
    SET(BOOST_ROOT "${CMAKE_SOURCE_DIR}/../../../")
    SET(BOOST_INCLUDEDIR "${CMAKE_SOURCE_DIR}/../../../include")
    SET(Boost_ADDITIONAL_VERSIONS "1.39" " 1.39.0")
    MESSAGE("${BOOST_INCLUDEDIR}")
ENDIF(EXISTS ${CMAKE_SOURCE_DIR}/../Revision)
FIND_PACKAGE(Boost REQUIRED COMPONENTS system filesystem)

IF(${USE_ODE} EQUAL 1)
   ######### ODE
   MESSAGE("Using ODE")
   FIND_PATH(ODE_BASE_DIR include/ode/ode.h "${CMAKE_SOURCE_DIR}/../../../")
   IF(NOT EXISTS ${ODE_BASE_DIR})
      MESSAGE(SEND_ERROR "The supplied ODE Base dir: ${ODE_BASE_DIR} does not exists")
   ENDIF(NOT EXISTS ${ODE_BASE_DIR})
   IF(NOT EXISTS ${ODE_BASE_DIR}/include)
      MESSAGE(SEND_ERROR "The ODE Include dir: ${ODE_BASE_DIR}/include does not exists")
   ENDIF(NOT EXISTS ${ODE_BASE_DIR}/include)
   IF(NOT EXISTS ${ODE_BASE_DIR}/lib)
      MESSAGE(SEND_ERROR "The ODE Include dir: ${ODE_BASE_DIR}/lib does not exists")
   ENDIF(NOT EXISTS ${ODE_BASE_DIR}/lib)
   
   SET(ODE_INC_DIR ${ODE_BASE_DIR}/include)
   SET(ODE_LIB_DIR ${ODE_BASE_DIR}/lib)
   SET(ODE_LIBRARIES ode)
ENDIF(${USE_ODE} EQUAL 1)

######### OpenSGToolbox
FIND_PATH(OPENSGTOOLBOX_BASE_DIR include/OpenSG/Toolbox/OSGToolboxdef.h "${CMAKE_SOURCE_DIR}/../../../")
SET(OPENSGTOOLBOX_INC_DIR ${OPENSGTOOLBOX_BASE_DIR}/include)
SET(OPENSGTOOLBOX_LIB_DIR ${OPENSGTOOLBOX_BASE_DIR}/lib)

#Include Boost and OpenSG
INCLUDE_DIRECTORIES(${Boost_INCLUDE_DIRS} ${OPENSG_INC_DIR}
    ${OPENSGTOOLBOX_INC_DIR} ${ODE_INC_DIR} ${FMOD_INC_DIR} ${LUA_INC_DIR})

#Link to bost and OpenSG
LINK_DIRECTORIES(${Boost_LIBRARY_DIRS} ${OPENSGTOOLBOX_LIB_DIR} ${ODE_LIB_DIR} ${FMOD_LIB_DIR})

SET(CMAKE_CXX_FLAGS_DEBUG "${OPENSG_CXX_FLAGS_DBG}")
SET(CMAKE_CXX_FLAGS_DEBUG "${OPENSG_CXX_FLAGS_OPT}")

######## Tutorial executables
FILE(GLOB TUTORIAL_SOURCE_LIST "${CMAKE_SOURCE_DIR}/[0-9][0-9]*.cpp")
FOREACH(TUTORIAL_SOURCE ${TUTORIAL_SOURCE_LIST})
   #Extract a short name for the tutorial test
   STRING(REGEX MATCH "([0-9][0-9].*)[.]cpp" TUTORIAL ${TUTORIAL_SOURCE})
   SET(TUTORIAL ${CMAKE_MATCH_1})
   MESSAGE("Configurint Tutorial: ${TUTORIAL}")

   ADD_EXECUTABLE(${TUTORIAL} ${TUTORIAL_SOURCE})
   
   #Attach all of the Compile flags
   SET_TARGET_PROPERTIES(${TUTORIAL}
       PROPERTIES
       COMPILE_FLAGS "${PLATFORM_COMPILE_FLAGS}"
       LINK_FLAGS_DEBUG "${OPENSG_LIBS_DBG} ${PLATFORM_LINKER_FLAGS}"
       LINK_FLAGS "${OPENSG_LIBS_OPT} ${PLATFORM_LINKER_FLAGS}"
       LINK_FLAGS_MINSIZEREL "${OPENSG_LIBS_OPT} ${PLATFORM_LINKER_FLAGS}"
       LINK_FLAGS_RELWITHDEBINFO "${OPENSG_LIBS_OPT} ${PLATFORM_LINKER_FLAGS}")

   
   #Attach all of the linker libraries
   TARGET_LINK_LIBRARIES(${TUTORIAL} ${LIBRARIES} ${Boost_LIBRARIES} ${ODE_LIBRARIES} ${FMOD_LIBRARIES})
   ######## Make the Library dependencies
   FOREACH(TOOLBOX_LIBRARY ${TOOLBOX_LIBRARIES})
      TARGET_LINK_LIBRARIES(${TUTORIAL} optimized "${TOOLBOX_LIBRARY}" debug "${TOOLBOX_LIBRARY}D")
   ENDFOREACH(TOOLBOX_LIBRARY ${TOOLBOX_LIBRARIES})
ENDFOREACH(TUTORIAL_SOURCE ${TUTORIAL_SOURCE_LIST})

ENDMACRO(OPENSG_TOOLBOX_TUTORIALS USE_FMOD USE_ODE TOOLBOX_LIBRARIES)

