
CMAKE_MINIMUM_REQUIRED(VERSION 2.6 FATAL_ERROR)
PROJECT(OpenSGToolbox)

#Tesing
ENABLE_TESTING()

#SET (CMAKE_VERBOSE_MAKEFILE TRUE)

######## Default Build Type
IF(NOT CMAKE_BUILD_TYPE)
	SET(CMAKE_BUILD_TYPE "Debug")
ENDIF(NOT CMAKE_BUILD_TYPE)

MESSAGE("Configuring for build Type: ${CMAKE_BUILD_TYPE}")

######### Revision number
FIND_PACKAGE(Subversion)
IF(Subversion_FOUND)
   Subversion_WC_INFO(${CMAKE_HOME_DIRECTORY} Project)
   MESSAGE("Current revision is ${Project_WC_REVISION}")
ENDIF(Subversion_FOUND)

######### Version
FILE(STRINGS ${CMAKE_SOURCE_DIR}/VERSION VersionFile)
STRING(REGEX MATCH "([0-9]+)\\.([0-9]+)\\.([0-9])+" VersionMatch ${VersionFile})

SET(OPENSGTOOLBOX_MAJOR_VERSION ${CMAKE_MATCH_1})
SET(OPENSGTOOLBOX_MINOR_VERSION ${CMAKE_MATCH_2})
SET(OPENSGTOOLBOX_PATCH_VERSION ${CMAKE_MATCH_3})
SET(OPENSGTOOLBOX_VERSION "${OPENSGTOOLBOX_MAJOR_VERSION}.${OPENSGTOOLBOX_MINOR_VERSION}.${OPENSGTOOLBOX_PATCH_VERSION}")
MESSAGE("Current Version is ${OPENSGTOOLBOX_VERSION}")

######## IS 64 bit
IF( NOT APPLE )
   # check 64 bit
   IF( ${CMAKE_SIZEOF_VOID_P} EQUAL 4 )
     SET( HAVE_64_BIT 0 )
     MESSAGE("32 bit")
   ELSE( ${CMAKE_SIZEOF_VOID_P} EQUAL 4 )
     SET( HAVE_64_BIT 1 )
     MESSAGE("64 bit")
   ENDIF( ${CMAKE_SIZEOF_VOID_P} EQUAL 4 )
ELSE( NOT APPLE )
   SET( HAVE_64_BIT 0)
ENDIF( NOT APPLE )

######## Libraries to Build
OPTION(BUILD_DYNAMICS "Build the Dynamics Library." ON)
OPTION(BUILD_PARTICLE_SYSTEMS "Build the Particle System Library." ON)
OPTION(BUILD_ANIMATION "Build the AnimationLibrary." ON)
OPTION(BUILD_INPUT "Build the Input Library." ON)
OPTION(BUILD_METABOLIC "Build the Metabolic Library." ON)
OPTION(BUILD_USERINTERFACE "Build the User Interface Library." ON)
OPTION(BUILD_GAME "Build the Game Library." ON)
OPTION(BUILD_VIDEO "Build the Video Library." ON)
OPTION(BUILD_PHYSICS "Build the Physics Library." ON)
OPTION(BUILD_SOUND "Build the Sound Library." ON)

OPTION(CONFIGURE_TUTORIALS "If set to ON, all of the tutorials for the build libraries will be configured with the settings used for this build." OFF)
#Tutorial Configuration
IF(CONFIGURE_TUTORIALS)
   ADD_CUSTOM_TARGET(tutorials COMMENT "Building Tutorials")
   ADD_CUSTOM_TARGET(clean_tutorials COMMENT "Cleaning Tutorials")
ENDIF(CONFIGURE_TUTORIALS)

######### FMod
OPTION(ENABLE_FMOD "Enable Fmod support in sound library." ON)
IF(ENABLE_FMOD AND BUILD_SOUND)
   MESSAGE("Fmod Enabled")
   FIND_PATH(FMOD_BASE_DIR NAMES api/inc/fmod.h PATHS "/Developer/FMOD Programmers API")
   IF(NOT EXISTS ${FMOD_BASE_DIR})
      MESSAGE(SEND_ERROR "The supplied Fmod Base dir: ${FMOD_BASE_DIR} does not exist")
   ENDIF(NOT EXISTS ${FMOD_BASE_DIR})
   IF(NOT EXISTS ${FMOD_BASE_DIR}/api/inc)
      MESSAGE(SEND_ERROR "The Fmod Include dir: ${FMOD_BASE_DIR}/api/inc does not exist")
   ENDIF(NOT EXISTS ${FMOD_BASE_DIR}/api/inc)
   IF(NOT EXISTS ${FMOD_BASE_DIR}/api/lib)
      MESSAGE(SEND_ERROR "The Fmod Include dir: ${FMOD_BASE_DIR}/api/lib does not exist")
   ENDIF(NOT EXISTS ${FMOD_BASE_DIR}/api/lib)

   SET(FMOD_INC_DIR ${FMOD_BASE_DIR}/api/inc)
   SET(FMOD_LIB_DIR ${FMOD_BASE_DIR}/api/lib)
   IF(HAVE_64_BIT)
      SET(FMOD_LIBRARIES fmodex64)
   ELSE(HAVE_64_BIT)
      SET(FMOD_LIBRARIES fmodex)
   ENDIF(HAVE_64_BIT)
ENDIF(ENABLE_FMOD AND BUILD_SOUND)


######### OpenSG
IF(WIN32)
   SET(OPENSG_BASE_DIR $ENV{OPENSG}/..)
ENDIF(WIN32)

FIND_PATH(OPENSG_BASE_DIR include/OpenSG/OSGConfig.h)

SET(OPENSG_INC_DIR ${OPENSG_BASE_DIR}/include)
SET(OPENSG_LIB_DIR ${OPENSG_BASE_DIR}/lib)

#Check that the files exist
IF(NOT EXISTS ${OPENSG_BASE_DIR})
   MESSAGE(SEND_ERROR "The supplied OpenSG Base dir: ${OPENSG_BASE_DIR} does not exist")
ENDIF(NOT EXISTS ${OPENSG_BASE_DIR})
IF(NOT EXISTS ${OPENSG_INC_DIR})
   MESSAGE(SEND_ERROR "The supplied OpenSG include dir: ${OPENSG_INC_DIR} does not exist")
ENDIF(NOT EXISTS ${OPENSG_INC_DIR})
IF(NOT EXISTS ${OPENSG_LIB_DIR})
   MESSAGE(SEND_ERROR "The supplied OpenSG Base dir: ${OPENSG_LIB_DIR} does not exist")
ENDIF(NOT EXISTS ${OPENSG_LIB_DIR})

IF (UNIX)
   SET(OSG_CONFIG ${OPENSG_BASE_DIR}/bin/osg-config)
   IF(NOT EXISTS ${OSG_CONFIG})
      MESSAGE(SEND_ERROR "Could not find the OpenSG build script osg-config at location: ${OSG_CONFIG}")
   ENDIF(NOT EXISTS ${OSG_CONFIG})
   
   IF(APPLE)
       EXECUTE_PROCESS(COMMAND ${OSG_CONFIG} --dbg --cflags Base System OUTPUT_VARIABLE OPENSG_CXX_FLAGS_DBG)
       STRING(STRIP ${OPENSG_CXX_FLAGS_DBG}  OPENSG_CXX_FLAGS_DBG)
       EXECUTE_PROCESS(COMMAND ${OSG_CONFIG} --opt --cflags Base System OUTPUT_VARIABLE OPENSG_CXX_FLAGS_OPT)
       STRING(STRIP ${OPENSG_CXX_FLAGS_OPT}  OPENSG_CXX_FLAGS_OPT)
       EXECUTE_PROCESS(COMMAND ${OSG_CONFIG} --dbg --lflags Base System OUTPUT_VARIABLE OPENSG_LD_FLAGS_DBG)
       STRING(STRIP ${OPENSG_LD_FLAGS_DBG}  OPENSG_LD_FLAGS_DBG)
       EXECUTE_PROCESS(COMMAND ${OSG_CONFIG} --opt --lflags Base System OUTPUT_VARIABLE OPENSG_LD_FLAGS_OPT)
       STRING(STRIP ${OPENSG_LD_FLAGS_OPT}  OPENSG_LD_FLAGS_OPT)
       EXECUTE_PROCESS(COMMAND ${OSG_CONFIG} --opt --libs Base System OUTPUT_VARIABLE OPENSG_LIBS_OPT)
       STRING(STRIP ${OPENSG_LIBS_OPT}  OPENSG_LIBS_OPT)
       SET(OPENSG_LIBS_OPT "${OPENSG_LIBS_OPT} -framework Carbon -framework AGL -lOSGWindowCarbon")
       EXECUTE_PROCESS(COMMAND ${OSG_CONFIG} --dbg --libs Base System OUTPUT_VARIABLE OPENSG_LIBS_DBG)
       STRING(STRIP ${OPENSG_LIBS_DBG}  OPENSG_LIBS_DBG)
       SET(OPENSG_LIBS_DBG "${OPENSG_LIBS_DBG} -framework Carbon -framework AGL -lOSGWindowCarbon")
     ELSE(APPLE)
       EXECUTE_PROCESS(COMMAND ${OSG_CONFIG} --dbg --cflags Base System X OUTPUT_VARIABLE OPENSG_CXX_FLAGS_DBG)
       STRING(STRIP ${OPENSG_CXX_FLAGS_DBG}  OPENSG_CXX_FLAGS_DBG)
       EXECUTE_PROCESS(COMMAND ${OSG_CONFIG} --opt --cflags Base System X OUTPUT_VARIABLE OPENSG_CXX_FLAGS_OPT)
       STRING(STRIP ${OPENSG_CXX_FLAGS_OPT}  OPENSG_CXX_FLAGS_OPT)
       EXECUTE_PROCESS(COMMAND ${OSG_CONFIG} --dbg --lflags Base System X OUTPUT_VARIABLE OPENSG_LD_FLAGS_DBG)
       STRING(STRIP ${OPENSG_LD_FLAGS_DBG}  OPENSG_LD_FLAGS_DBG)
       EXECUTE_PROCESS(COMMAND ${OSG_CONFIG} --opt --lflags Base System X OUTPUT_VARIABLE OPENSG_LD_FLAGS_OPT)
       STRING(STRIP ${OPENSG_LD_FLAGS_OPT}  OPENSG_LD_FLAGS_OPT)
       EXECUTE_PROCESS(COMMAND ${OSG_CONFIG} --opt --libs Base System X OUTPUT_VARIABLE OPENSG_LIBS_OPT)
       STRING(STRIP ${OPENSG_LIBS_OPT}  OPENSG_LIBS_OPT)
       EXECUTE_PROCESS(COMMAND ${OSG_CONFIG} --dbg --libs Base System X OUTPUT_VARIABLE OPENSG_LIBS_DBG)
       STRING(STRIP ${OPENSG_LIBS_DBG}  OPENSG_LIBS_DBG)
       IF(${CMAKE_BUILD_TYPE} STREQUAL "Debug")
          SET(OPENSG_LIB_DIR ${OPENSG_BASE_DIR}/lib/dbg)
       ELSE(${CMAKE_BUILD_TYPE} STREQUAL "Debug")
          SET(OPENSG_LIB_DIR ${OPENSG_BASE_DIR}/lib/opt)
       ENDIF(${CMAKE_BUILD_TYPE} STREQUAL "Debug")
     ENDIF(APPLE)
ENDIF(UNIX)

IF(WIN32)
   SET(OPENSG_CXX_FLAGS_DBG "-D_WIN32_WINNT=0x0400 -D_OSG_HAVE_CONFIGURED_H_ -DOSG_WITH_GLUT -DOSG_WITH_GIF -DOSG_WITH_TIF -DOSG_WITH_JPG -D_DEBUG /MP")
   SET(OPENSG_CXX_FLAGS_OPT "-D_WIN32_WINNT=0x0400 -D_OSG_HAVE_CONFIGURED_H_ -DOSG_WITH_GLUT -DOSG_WITH_GIF -DOSG_WITH_TIF -DOSG_WITH_JPG /MP")
   SET(OPENSG_CXX_BUILDDLL_FLAGS "-DOSG_BUILD_DLL")
   SET(OPENSG_LD_FLAGS_DBG "")
   SET(OPENSG_LD_FLAGS_OPT "")
   SET(OPENSG_LIBS_DBG OSGBaseD OSGSystemD)
   SET(OPENSG_LIBS_OPT OSGBase OSGSystem)
   SET(OPENSG_WINDOW_LIBS debug OSGWindowWIN32D optimized OSGWindowWIN32)                
ENDIF(WIN32)

######## BOOST
FIND_PACKAGE(Boost REQUIRED COMPONENTS system filesystem)

######### ODE
IF(BUILD_PHYSICS)
   MESSAGE("Physics Enabled")
   FIND_PATH(ODE_BASE_DIR include/ode/ode.h)
   IF(NOT EXISTS ${ODE_BASE_DIR})
      MESSAGE(SEND_ERROR "The supplied ODE Base dir: ${ODE_BASE_DIR} does not exists")
   ENDIF(NOT EXISTS ${ODE_BASE_DIR})
   IF(NOT EXISTS ${ODE_BASE_DIR}/include)
      MESSAGE(SEND_ERROR "The ODE Include dir: ${ODE_BASE_DIR}/include does not exists")
   ENDIF(NOT EXISTS ${ODE_BASE_DIR}/include)
   IF(NOT EXISTS ${ODE_BASE_DIR}/lib)
      MESSAGE(SEND_ERROR "The ODE Include dir: ${ODE_BASE_DIR}/lib does not exists")
   ENDIF(NOT EXISTS ${ODE_BASE_DIR}/lib)

   SET(ODE_INC_DIR ${ODE_BASE_DIR}/include)
   SET(ODE_LIB_DIR ${ODE_BASE_DIR}/lib)
   SET(ODE_LIBRARIES ode)
ENDIF(BUILD_PHYSICS)

######### Documentation
OPTION(ENABLE_USER_DOCUMENTATION "Generate user level documentation." ON)
OPTION(ENABLE_DEVELOPER_DOCUMENTATION "Generate developer level documentation." OFF)

IF(ENABLE_USER_DOCUMENTATION OR ENABLE_DEVELOPER_DOCUMENTATION)
   ADD_CUSTOM_TARGET(documentation ALL COMMENT "Building Documentation")
   ######### Doxygen
   FIND_PROGRAM(DOXYGEN_EXECUTABLE doxygen)
ENDIF(ENABLE_USER_DOCUMENTATION OR ENABLE_DEVELOPER_DOCUMENTATION)

IF(ENABLE_USER_DOCUMENTATION)
   ADD_CUSTOM_TARGET(user_doc COMMENT "Building User Documentation")
   ADD_DEPENDENCIES(documentation user_doc)
ENDIF(ENABLE_USER_DOCUMENTATION)

IF(ENABLE_DEVELOPER_DOCUMENTATION)
   ADD_CUSTOM_TARGET(dev_doc COMMENT "Building Developer Documentation")
   ADD_DEPENDENCIES(documentation dev_doc)
ENDIF(ENABLE_DEVELOPER_DOCUMENTATION)

# Libraries
SET(OPENSGTOOLBOX_EXPORT_NAME "OpenSGToolboxExport")
SET(CMAKE_DEBUG_POSTFIX "D")


SET(OPENSG_TOOLBOX_BUILD_DIR "${CMAKE_BINARY_DIR}/Toolbox")
ADD_SUBDIRECTORY(Toolbox/src "Toolbox")

IF(BUILD_INPUT)
   SET(OPENSG_INPUT_BUILD_DIR "${CMAKE_BINARY_DIR}/Input")
   ADD_SUBDIRECTORY(Input/src "Input")
ENDIF(BUILD_INPUT)

IF(BUILD_ANIMATION)
   SET(OPENSG_ANIMATION_BUILD_DIR "${CMAKE_BINARY_DIR}/Animation")
   ADD_SUBDIRECTORY(Animation/src "Animation")
ENDIF(BUILD_ANIMATION)

IF(BUILD_DYNAMICS)
   SET(OPENSG_DYNAMICS_BUILD_DIR "${CMAKE_BINARY_DIR}/Dynamics")
   ADD_SUBDIRECTORY(Dynamics/src "Dynamics")
ENDIF(BUILD_DYNAMICS)

IF(BUILD_PARTICLE_SYSTEMS)
   SET(OPENSG_PARTICLESYSTEM_BUILD_DIR "${CMAKE_BINARY_DIR}/ParticleSystem")
   ADD_SUBDIRECTORY(ParticleSystem/src "ParticleSystem")
ENDIF(BUILD_PARTICLE_SYSTEMS)

IF(BUILD_SOUND)
   SET(OPENSG_SOUND_BUILD_DIR "${CMAKE_BINARY_DIR}/Sound")
   ADD_SUBDIRECTORY(Sound/src "Sound")
ENDIF(BUILD_SOUND)

IF(BUILD_METABOLIC)
   SET(OPENSG_METABOLIC_BUILD_DIR "${CMAKE_BINARY_DIR}/Metabolic")
   ADD_SUBDIRECTORY(Metabolic/src "Metabolic")
ENDIF(BUILD_METABOLIC)

IF(BUILD_USERINTERFACE)
   SET(OPENSG_USERINTERFACE_BUILD_DIR "${CMAKE_BINARY_DIR}/UserInterface")
   ADD_SUBDIRECTORY(UserInterface/src "UserInterface")
ENDIF(BUILD_USERINTERFACE)

IF(BUILD_GAME)
   SET(OPENSG_GAME_BUILD_DIR "${CMAKE_BINARY_DIR}/Game")
   ADD_SUBDIRECTORY(Game/src "Game")
ENDIF(BUILD_GAME)

IF(BUILD_PHYSICS)
   SET(OPENSG_PHYSICS_BUILD_DIR "${CMAKE_BINARY_DIR}/Physics")
   ADD_SUBDIRECTORY(Physics/src "Physics")
ENDIF(BUILD_PHYSICS)

IF(BUILD_VIDEO)
   #SET(OPENSG_VIDEO_BUILD_DIR "${CMAKE_BINARY_DIR}/Video")
   #ADD_SUBDIRECTORY(Video/src "Video")
ENDIF(BUILD_VIDEO)



#Install a cmake file for the libraries
INSTALL(EXPORT ${OPENSGTOOLBOX_EXPORT_NAME}
        NAMESPACE ""
        DESTINATION "lib/export")

