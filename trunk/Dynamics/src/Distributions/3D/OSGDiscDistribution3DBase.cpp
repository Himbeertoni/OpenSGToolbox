/*---------------------------------------------------------------------------*\
 *                        OpenSG ToolBox Dynamics                            *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                         www.vrac.iastate.edu                              *
 *                                                                           *
 *                          Authors: David Kabala                            *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class DiscDistribution3D!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#define OSG_COMPILEDISCDISTRIBUTION3DINST

#include <stdlib.h>
#include <stdio.h>

#include <OpenSG/OSGConfig.h>

#include "OSGDiscDistribution3DBase.h"
#include "OSGDiscDistribution3D.h"


OSG_BEGIN_NAMESPACE

const OSG::BitVector  DiscDistribution3DBase::CenterFieldMask = 
    (TypeTraits<BitVector>::One << DiscDistribution3DBase::CenterFieldId);

const OSG::BitVector  DiscDistribution3DBase::NormalFieldMask = 
    (TypeTraits<BitVector>::One << DiscDistribution3DBase::NormalFieldId);

const OSG::BitVector  DiscDistribution3DBase::TangentFieldMask = 
    (TypeTraits<BitVector>::One << DiscDistribution3DBase::TangentFieldId);

const OSG::BitVector  DiscDistribution3DBase::BinormalFieldMask = 
    (TypeTraits<BitVector>::One << DiscDistribution3DBase::BinormalFieldId);

const OSG::BitVector  DiscDistribution3DBase::InnerRadiusFieldMask = 
    (TypeTraits<BitVector>::One << DiscDistribution3DBase::InnerRadiusFieldId);

const OSG::BitVector  DiscDistribution3DBase::OuterRadiusFieldMask = 
    (TypeTraits<BitVector>::One << DiscDistribution3DBase::OuterRadiusFieldId);

const OSG::BitVector  DiscDistribution3DBase::MinThetaFieldMask = 
    (TypeTraits<BitVector>::One << DiscDistribution3DBase::MinThetaFieldId);

const OSG::BitVector  DiscDistribution3DBase::MaxThetaFieldMask = 
    (TypeTraits<BitVector>::One << DiscDistribution3DBase::MaxThetaFieldId);

const OSG::BitVector  DiscDistribution3DBase::SurfaceOrEdgeFieldMask = 
    (TypeTraits<BitVector>::One << DiscDistribution3DBase::SurfaceOrEdgeFieldId);

const OSG::BitVector DiscDistribution3DBase::MTInfluenceMask = 
    (Inherited::MTInfluenceMask) | 
    (static_cast<BitVector>(0x0) << Inherited::NextFieldId); 


// Field descriptions

/*! \var Pnt3f           DiscDistribution3DBase::_sfCenter
    
*/
/*! \var Vec3f           DiscDistribution3DBase::_sfNormal
    
*/
/*! \var Vec3f           DiscDistribution3DBase::_sfTangent
    
*/
/*! \var Vec3f           DiscDistribution3DBase::_sfBinormal
    
*/
/*! \var Real32          DiscDistribution3DBase::_sfInnerRadius
    
*/
/*! \var Real32          DiscDistribution3DBase::_sfOuterRadius
    
*/
/*! \var Real32          DiscDistribution3DBase::_sfMinTheta
    
*/
/*! \var Real32          DiscDistribution3DBase::_sfMaxTheta
    
*/
/*! \var UInt32          DiscDistribution3DBase::_sfSurfaceOrEdge
    
*/

//! DiscDistribution3D description

FieldDescription *DiscDistribution3DBase::_desc[] = 
{
    new FieldDescription(SFPnt3f::getClassType(), 
                     "Center", 
                     CenterFieldId, CenterFieldMask,
                     false,
                     (FieldAccessMethod) &DiscDistribution3DBase::getSFCenter),
    new FieldDescription(SFVec3f::getClassType(), 
                     "Normal", 
                     NormalFieldId, NormalFieldMask,
                     false,
                     (FieldAccessMethod) &DiscDistribution3DBase::getSFNormal),
    new FieldDescription(SFVec3f::getClassType(), 
                     "Tangent", 
                     TangentFieldId, TangentFieldMask,
                     false,
                     (FieldAccessMethod) &DiscDistribution3DBase::getSFTangent),
    new FieldDescription(SFVec3f::getClassType(), 
                     "Binormal", 
                     BinormalFieldId, BinormalFieldMask,
                     false,
                     (FieldAccessMethod) &DiscDistribution3DBase::getSFBinormal),
    new FieldDescription(SFReal32::getClassType(), 
                     "InnerRadius", 
                     InnerRadiusFieldId, InnerRadiusFieldMask,
                     false,
                     (FieldAccessMethod) &DiscDistribution3DBase::getSFInnerRadius),
    new FieldDescription(SFReal32::getClassType(), 
                     "OuterRadius", 
                     OuterRadiusFieldId, OuterRadiusFieldMask,
                     false,
                     (FieldAccessMethod) &DiscDistribution3DBase::getSFOuterRadius),
    new FieldDescription(SFReal32::getClassType(), 
                     "MinTheta", 
                     MinThetaFieldId, MinThetaFieldMask,
                     false,
                     (FieldAccessMethod) &DiscDistribution3DBase::getSFMinTheta),
    new FieldDescription(SFReal32::getClassType(), 
                     "MaxTheta", 
                     MaxThetaFieldId, MaxThetaFieldMask,
                     false,
                     (FieldAccessMethod) &DiscDistribution3DBase::getSFMaxTheta),
    new FieldDescription(SFUInt32::getClassType(), 
                     "SurfaceOrEdge", 
                     SurfaceOrEdgeFieldId, SurfaceOrEdgeFieldMask,
                     false,
                     (FieldAccessMethod) &DiscDistribution3DBase::getSFSurfaceOrEdge)
};


FieldContainerType DiscDistribution3DBase::_type(
    "DiscDistribution3D",
    "Function",
    NULL,
    (PrototypeCreateF) &DiscDistribution3DBase::createEmpty,
    DiscDistribution3D::initMethod,
    _desc,
    sizeof(_desc));

//OSG_FIELD_CONTAINER_DEF(DiscDistribution3DBase, DiscDistribution3DPtr)

/*------------------------------ get -----------------------------------*/

FieldContainerType &DiscDistribution3DBase::getType(void) 
{
    return _type; 
} 

const FieldContainerType &DiscDistribution3DBase::getType(void) const 
{
    return _type;
} 


FieldContainerPtr DiscDistribution3DBase::shallowCopy(void) const 
{ 
    DiscDistribution3DPtr returnValue; 

    newPtr(returnValue, dynamic_cast<const DiscDistribution3D *>(this)); 

    return returnValue; 
}

UInt32 DiscDistribution3DBase::getContainerSize(void) const 
{ 
    return sizeof(DiscDistribution3D); 
}


#if !defined(OSG_FIXED_MFIELDSYNC)
void DiscDistribution3DBase::executeSync(      FieldContainer &other,
                                    const BitVector      &whichField)
{
    this->executeSyncImpl((DiscDistribution3DBase *) &other, whichField);
}
#else
void DiscDistribution3DBase::executeSync(      FieldContainer &other,
                                    const BitVector      &whichField,                                    const SyncInfo       &sInfo     )
{
    this->executeSyncImpl((DiscDistribution3DBase *) &other, whichField, sInfo);
}
void DiscDistribution3DBase::execBeginEdit(const BitVector &whichField, 
                                            UInt32     uiAspect,
                                            UInt32     uiContainerSize) 
{
    this->execBeginEditImpl(whichField, uiAspect, uiContainerSize);
}

void DiscDistribution3DBase::onDestroyAspect(UInt32 uiId, UInt32 uiAspect)
{
    Inherited::onDestroyAspect(uiId, uiAspect);

}
#endif

/*------------------------- constructors ----------------------------------*/

#ifdef OSG_WIN32_ICL
#pragma warning (disable : 383)
#endif

DiscDistribution3DBase::DiscDistribution3DBase(void) :
    _sfCenter                 (Pnt3f(0.0,0.0,0.0)), 
    _sfNormal                 (Vec3f(0.0,0.0,1.0)), 
    _sfTangent                (Vec3f(0.0,1.0,0.0)), 
    _sfBinormal               (Vec3f(1.0,0.0,0.0)), 
    _sfInnerRadius            (Real32(0.0)), 
    _sfOuterRadius            (Real32(1.0)), 
    _sfMinTheta               (Real32(0.0)), 
    _sfMaxTheta               (Real32(6.28319)), 
    _sfSurfaceOrEdge          (UInt32(DiscDistribution3D::SURFACE)), 
    Inherited() 
{
}

#ifdef OSG_WIN32_ICL
#pragma warning (default : 383)
#endif

DiscDistribution3DBase::DiscDistribution3DBase(const DiscDistribution3DBase &source) :
    _sfCenter                 (source._sfCenter                 ), 
    _sfNormal                 (source._sfNormal                 ), 
    _sfTangent                (source._sfTangent                ), 
    _sfBinormal               (source._sfBinormal               ), 
    _sfInnerRadius            (source._sfInnerRadius            ), 
    _sfOuterRadius            (source._sfOuterRadius            ), 
    _sfMinTheta               (source._sfMinTheta               ), 
    _sfMaxTheta               (source._sfMaxTheta               ), 
    _sfSurfaceOrEdge          (source._sfSurfaceOrEdge          ), 
    Inherited                 (source)
{
}

/*-------------------------- destructors ----------------------------------*/

DiscDistribution3DBase::~DiscDistribution3DBase(void)
{
}

/*------------------------------ access -----------------------------------*/

UInt32 DiscDistribution3DBase::getBinSize(const BitVector &whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (CenterFieldMask & whichField))
    {
        returnValue += _sfCenter.getBinSize();
    }

    if(FieldBits::NoField != (NormalFieldMask & whichField))
    {
        returnValue += _sfNormal.getBinSize();
    }

    if(FieldBits::NoField != (TangentFieldMask & whichField))
    {
        returnValue += _sfTangent.getBinSize();
    }

    if(FieldBits::NoField != (BinormalFieldMask & whichField))
    {
        returnValue += _sfBinormal.getBinSize();
    }

    if(FieldBits::NoField != (InnerRadiusFieldMask & whichField))
    {
        returnValue += _sfInnerRadius.getBinSize();
    }

    if(FieldBits::NoField != (OuterRadiusFieldMask & whichField))
    {
        returnValue += _sfOuterRadius.getBinSize();
    }

    if(FieldBits::NoField != (MinThetaFieldMask & whichField))
    {
        returnValue += _sfMinTheta.getBinSize();
    }

    if(FieldBits::NoField != (MaxThetaFieldMask & whichField))
    {
        returnValue += _sfMaxTheta.getBinSize();
    }

    if(FieldBits::NoField != (SurfaceOrEdgeFieldMask & whichField))
    {
        returnValue += _sfSurfaceOrEdge.getBinSize();
    }


    return returnValue;
}

void DiscDistribution3DBase::copyToBin(      BinaryDataHandler &pMem,
                                  const BitVector         &whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (CenterFieldMask & whichField))
    {
        _sfCenter.copyToBin(pMem);
    }

    if(FieldBits::NoField != (NormalFieldMask & whichField))
    {
        _sfNormal.copyToBin(pMem);
    }

    if(FieldBits::NoField != (TangentFieldMask & whichField))
    {
        _sfTangent.copyToBin(pMem);
    }

    if(FieldBits::NoField != (BinormalFieldMask & whichField))
    {
        _sfBinormal.copyToBin(pMem);
    }

    if(FieldBits::NoField != (InnerRadiusFieldMask & whichField))
    {
        _sfInnerRadius.copyToBin(pMem);
    }

    if(FieldBits::NoField != (OuterRadiusFieldMask & whichField))
    {
        _sfOuterRadius.copyToBin(pMem);
    }

    if(FieldBits::NoField != (MinThetaFieldMask & whichField))
    {
        _sfMinTheta.copyToBin(pMem);
    }

    if(FieldBits::NoField != (MaxThetaFieldMask & whichField))
    {
        _sfMaxTheta.copyToBin(pMem);
    }

    if(FieldBits::NoField != (SurfaceOrEdgeFieldMask & whichField))
    {
        _sfSurfaceOrEdge.copyToBin(pMem);
    }


}

void DiscDistribution3DBase::copyFromBin(      BinaryDataHandler &pMem,
                                    const BitVector    &whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (CenterFieldMask & whichField))
    {
        _sfCenter.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (NormalFieldMask & whichField))
    {
        _sfNormal.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (TangentFieldMask & whichField))
    {
        _sfTangent.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (BinormalFieldMask & whichField))
    {
        _sfBinormal.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (InnerRadiusFieldMask & whichField))
    {
        _sfInnerRadius.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (OuterRadiusFieldMask & whichField))
    {
        _sfOuterRadius.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (MinThetaFieldMask & whichField))
    {
        _sfMinTheta.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (MaxThetaFieldMask & whichField))
    {
        _sfMaxTheta.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (SurfaceOrEdgeFieldMask & whichField))
    {
        _sfSurfaceOrEdge.copyFromBin(pMem);
    }


}

#if !defined(OSG_FIXED_MFIELDSYNC)
void DiscDistribution3DBase::executeSyncImpl(      DiscDistribution3DBase *pOther,
                                        const BitVector         &whichField)
{

    Inherited::executeSyncImpl(pOther, whichField);

    if(FieldBits::NoField != (CenterFieldMask & whichField))
        _sfCenter.syncWith(pOther->_sfCenter);

    if(FieldBits::NoField != (NormalFieldMask & whichField))
        _sfNormal.syncWith(pOther->_sfNormal);

    if(FieldBits::NoField != (TangentFieldMask & whichField))
        _sfTangent.syncWith(pOther->_sfTangent);

    if(FieldBits::NoField != (BinormalFieldMask & whichField))
        _sfBinormal.syncWith(pOther->_sfBinormal);

    if(FieldBits::NoField != (InnerRadiusFieldMask & whichField))
        _sfInnerRadius.syncWith(pOther->_sfInnerRadius);

    if(FieldBits::NoField != (OuterRadiusFieldMask & whichField))
        _sfOuterRadius.syncWith(pOther->_sfOuterRadius);

    if(FieldBits::NoField != (MinThetaFieldMask & whichField))
        _sfMinTheta.syncWith(pOther->_sfMinTheta);

    if(FieldBits::NoField != (MaxThetaFieldMask & whichField))
        _sfMaxTheta.syncWith(pOther->_sfMaxTheta);

    if(FieldBits::NoField != (SurfaceOrEdgeFieldMask & whichField))
        _sfSurfaceOrEdge.syncWith(pOther->_sfSurfaceOrEdge);


}
#else
void DiscDistribution3DBase::executeSyncImpl(      DiscDistribution3DBase *pOther,
                                        const BitVector         &whichField,
                                        const SyncInfo          &sInfo      )
{

    Inherited::executeSyncImpl(pOther, whichField, sInfo);

    if(FieldBits::NoField != (CenterFieldMask & whichField))
        _sfCenter.syncWith(pOther->_sfCenter);

    if(FieldBits::NoField != (NormalFieldMask & whichField))
        _sfNormal.syncWith(pOther->_sfNormal);

    if(FieldBits::NoField != (TangentFieldMask & whichField))
        _sfTangent.syncWith(pOther->_sfTangent);

    if(FieldBits::NoField != (BinormalFieldMask & whichField))
        _sfBinormal.syncWith(pOther->_sfBinormal);

    if(FieldBits::NoField != (InnerRadiusFieldMask & whichField))
        _sfInnerRadius.syncWith(pOther->_sfInnerRadius);

    if(FieldBits::NoField != (OuterRadiusFieldMask & whichField))
        _sfOuterRadius.syncWith(pOther->_sfOuterRadius);

    if(FieldBits::NoField != (MinThetaFieldMask & whichField))
        _sfMinTheta.syncWith(pOther->_sfMinTheta);

    if(FieldBits::NoField != (MaxThetaFieldMask & whichField))
        _sfMaxTheta.syncWith(pOther->_sfMaxTheta);

    if(FieldBits::NoField != (SurfaceOrEdgeFieldMask & whichField))
        _sfSurfaceOrEdge.syncWith(pOther->_sfSurfaceOrEdge);



}

void DiscDistribution3DBase::execBeginEditImpl (const BitVector &whichField, 
                                                 UInt32     uiAspect,
                                                 UInt32     uiContainerSize)
{
    Inherited::execBeginEditImpl(whichField, uiAspect, uiContainerSize);

}
#endif



OSG_END_NAMESPACE

#include <OpenSG/OSGSFieldTypeDef.inl>
#include <OpenSG/OSGMFieldTypeDef.inl>

OSG_BEGIN_NAMESPACE

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldDataTraits<DiscDistribution3DPtr>::_type("DiscDistribution3DPtr", "FunctionPtr");
#endif

OSG_DLLEXPORT_SFIELD_DEF1(DiscDistribution3DPtr, OSG_DYNAMICSLIB_DLLTMPLMAPPING);
OSG_DLLEXPORT_MFIELD_DEF1(DiscDistribution3DPtr, OSG_DYNAMICSLIB_DLLTMPLMAPPING);


/*------------------------------------------------------------------------*/
/*                              cvs id's                                  */

#ifdef OSG_SGI_CC
#pragma set woff 1174
#endif

#ifdef OSG_LINUX_ICC
#pragma warning( disable : 177 )
#endif

namespace
{
    static Char8 cvsid_cpp       [] = "@(#)$Id: FCBaseTemplate_cpp.h,v 1.47 2006/03/17 17:03:19 pdaehne Exp $";
    static Char8 cvsid_hpp       [] = OSGDISCDISTRIBUTION3DBASE_HEADER_CVSID;
    static Char8 cvsid_inl       [] = OSGDISCDISTRIBUTION3DBASE_INLINE_CVSID;

    static Char8 cvsid_fields_hpp[] = OSGDISCDISTRIBUTION3DFIELDS_HEADER_CVSID;
}

OSG_END_NAMESPACE

