/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2002 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact: dirk@opensg.org, gerrit.voss@vossg.org, jbehr@zgdv.de          *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class AirplaneCamera!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#define OSG_COMPILEAIRPLANECAMERAINST

#include <stdlib.h>
#include <stdio.h>

#include <OpenSG/OSGConfig.h>

#include "OSGAirplaneCameraBase.h"
#include "OSGAirplaneCamera.h"


OSG_BEGIN_NAMESPACE

const OSG::BitVector  AirplaneCameraBase::RollFieldMask = 
    (TypeTraits<BitVector>::One << AirplaneCameraBase::RollFieldId);

const OSG::BitVector  AirplaneCameraBase::PitchFieldMask = 
    (TypeTraits<BitVector>::One << AirplaneCameraBase::PitchFieldId);

const OSG::BitVector  AirplaneCameraBase::YawFieldMask = 
    (TypeTraits<BitVector>::One << AirplaneCameraBase::YawFieldId);

const OSG::BitVector  AirplaneCameraBase::PositionFieldMask = 
    (TypeTraits<BitVector>::One << AirplaneCameraBase::PositionFieldId);

const OSG::BitVector AirplaneCameraBase::MTInfluenceMask = 
    (Inherited::MTInfluenceMask) | 
    (static_cast<BitVector>(0x0) << Inherited::NextFieldId); 


// Field descriptions

/*! \var Real32          AirplaneCameraBase::_sfRoll
    
*/
/*! \var Real32          AirplaneCameraBase::_sfPitch
    
*/
/*! \var Real32          AirplaneCameraBase::_sfYaw
    
*/
/*! \var Pnt3f           AirplaneCameraBase::_sfPosition
    
*/

//! AirplaneCamera description

FieldDescription *AirplaneCameraBase::_desc[] = 
{
    new FieldDescription(SFReal32::getClassType(), 
                     "Roll", 
                     RollFieldId, RollFieldMask,
                     false,
                     (FieldAccessMethod) &AirplaneCameraBase::getSFRoll),
    new FieldDescription(SFReal32::getClassType(), 
                     "Pitch", 
                     PitchFieldId, PitchFieldMask,
                     false,
                     (FieldAccessMethod) &AirplaneCameraBase::getSFPitch),
    new FieldDescription(SFReal32::getClassType(), 
                     "Yaw", 
                     YawFieldId, YawFieldMask,
                     false,
                     (FieldAccessMethod) &AirplaneCameraBase::getSFYaw),
    new FieldDescription(SFPnt3f::getClassType(), 
                     "Position", 
                     PositionFieldId, PositionFieldMask,
                     false,
                     (FieldAccessMethod) &AirplaneCameraBase::getSFPosition)
};


FieldContainerType AirplaneCameraBase::_type(
    "AirplaneCamera",
    "Camera",
    NULL,
    (PrototypeCreateF) &AirplaneCameraBase::createEmpty,
    AirplaneCamera::initMethod,
    _desc,
    sizeof(_desc));

//OSG_FIELD_CONTAINER_DEF(AirplaneCameraBase, AirplaneCameraPtr)

/*------------------------------ get -----------------------------------*/

FieldContainerType &AirplaneCameraBase::getType(void) 
{
    return _type; 
} 

const FieldContainerType &AirplaneCameraBase::getType(void) const 
{
    return _type;
} 


FieldContainerPtr AirplaneCameraBase::shallowCopy(void) const 
{ 
    AirplaneCameraPtr returnValue; 

    newPtr(returnValue, dynamic_cast<const AirplaneCamera *>(this)); 

    return returnValue; 
}

UInt32 AirplaneCameraBase::getContainerSize(void) const 
{ 
    return sizeof(AirplaneCamera); 
}


#if !defined(OSG_FIXED_MFIELDSYNC)
void AirplaneCameraBase::executeSync(      FieldContainer &other,
                                    const BitVector      &whichField)
{
    this->executeSyncImpl((AirplaneCameraBase *) &other, whichField);
}
#else
void AirplaneCameraBase::executeSync(      FieldContainer &other,
                                    const BitVector      &whichField,                                    const SyncInfo       &sInfo     )
{
    this->executeSyncImpl((AirplaneCameraBase *) &other, whichField, sInfo);
}
void AirplaneCameraBase::execBeginEdit(const BitVector &whichField, 
                                            UInt32     uiAspect,
                                            UInt32     uiContainerSize) 
{
    this->execBeginEditImpl(whichField, uiAspect, uiContainerSize);
}

void AirplaneCameraBase::onDestroyAspect(UInt32 uiId, UInt32 uiAspect)
{
    Inherited::onDestroyAspect(uiId, uiAspect);

}
#endif

/*------------------------- constructors ----------------------------------*/

#ifdef OSG_WIN32_ICL
#pragma warning (disable : 383)
#endif

AirplaneCameraBase::AirplaneCameraBase(void) :
    _sfRoll                   (), 
    _sfPitch                  (), 
    _sfYaw                    (), 
    _sfPosition               (), 
    Inherited() 
{
}

#ifdef OSG_WIN32_ICL
#pragma warning (default : 383)
#endif

AirplaneCameraBase::AirplaneCameraBase(const AirplaneCameraBase &source) :
    _sfRoll                   (source._sfRoll                   ), 
    _sfPitch                  (source._sfPitch                  ), 
    _sfYaw                    (source._sfYaw                    ), 
    _sfPosition               (source._sfPosition               ), 
    Inherited                 (source)
{
}

/*-------------------------- destructors ----------------------------------*/

AirplaneCameraBase::~AirplaneCameraBase(void)
{
}

/*------------------------------ access -----------------------------------*/

UInt32 AirplaneCameraBase::getBinSize(const BitVector &whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (RollFieldMask & whichField))
    {
        returnValue += _sfRoll.getBinSize();
    }

    if(FieldBits::NoField != (PitchFieldMask & whichField))
    {
        returnValue += _sfPitch.getBinSize();
    }

    if(FieldBits::NoField != (YawFieldMask & whichField))
    {
        returnValue += _sfYaw.getBinSize();
    }

    if(FieldBits::NoField != (PositionFieldMask & whichField))
    {
        returnValue += _sfPosition.getBinSize();
    }


    return returnValue;
}

void AirplaneCameraBase::copyToBin(      BinaryDataHandler &pMem,
                                  const BitVector         &whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (RollFieldMask & whichField))
    {
        _sfRoll.copyToBin(pMem);
    }

    if(FieldBits::NoField != (PitchFieldMask & whichField))
    {
        _sfPitch.copyToBin(pMem);
    }

    if(FieldBits::NoField != (YawFieldMask & whichField))
    {
        _sfYaw.copyToBin(pMem);
    }

    if(FieldBits::NoField != (PositionFieldMask & whichField))
    {
        _sfPosition.copyToBin(pMem);
    }


}

void AirplaneCameraBase::copyFromBin(      BinaryDataHandler &pMem,
                                    const BitVector    &whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (RollFieldMask & whichField))
    {
        _sfRoll.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (PitchFieldMask & whichField))
    {
        _sfPitch.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (YawFieldMask & whichField))
    {
        _sfYaw.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (PositionFieldMask & whichField))
    {
        _sfPosition.copyFromBin(pMem);
    }


}

#if !defined(OSG_FIXED_MFIELDSYNC)
void AirplaneCameraBase::executeSyncImpl(      AirplaneCameraBase *pOther,
                                        const BitVector         &whichField)
{

    Inherited::executeSyncImpl(pOther, whichField);

    if(FieldBits::NoField != (RollFieldMask & whichField))
        _sfRoll.syncWith(pOther->_sfRoll);

    if(FieldBits::NoField != (PitchFieldMask & whichField))
        _sfPitch.syncWith(pOther->_sfPitch);

    if(FieldBits::NoField != (YawFieldMask & whichField))
        _sfYaw.syncWith(pOther->_sfYaw);

    if(FieldBits::NoField != (PositionFieldMask & whichField))
        _sfPosition.syncWith(pOther->_sfPosition);


}
#else
void AirplaneCameraBase::executeSyncImpl(      AirplaneCameraBase *pOther,
                                        const BitVector         &whichField,
                                        const SyncInfo          &sInfo      )
{

    Inherited::executeSyncImpl(pOther, whichField, sInfo);

    if(FieldBits::NoField != (RollFieldMask & whichField))
        _sfRoll.syncWith(pOther->_sfRoll);

    if(FieldBits::NoField != (PitchFieldMask & whichField))
        _sfPitch.syncWith(pOther->_sfPitch);

    if(FieldBits::NoField != (YawFieldMask & whichField))
        _sfYaw.syncWith(pOther->_sfYaw);

    if(FieldBits::NoField != (PositionFieldMask & whichField))
        _sfPosition.syncWith(pOther->_sfPosition);



}

void AirplaneCameraBase::execBeginEditImpl (const BitVector &whichField, 
                                                 UInt32     uiAspect,
                                                 UInt32     uiContainerSize)
{
    Inherited::execBeginEditImpl(whichField, uiAspect, uiContainerSize);

}
#endif



OSG_END_NAMESPACE

#include <OpenSG/OSGSFieldTypeDef.inl>
#include <OpenSG/OSGMFieldTypeDef.inl>

OSG_BEGIN_NAMESPACE

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldDataTraits<AirplaneCameraPtr>::_type("AirplaneCameraPtr", "CameraPtr");
#endif

OSG_DLLEXPORT_SFIELD_DEF1(AirplaneCameraPtr, OSG_GAMELIB_DLLTMPLMAPPING);
OSG_DLLEXPORT_MFIELD_DEF1(AirplaneCameraPtr, OSG_GAMELIB_DLLTMPLMAPPING);


/*------------------------------------------------------------------------*/
/*                              cvs id's                                  */

#ifdef OSG_SGI_CC
#pragma set woff 1174
#endif

#ifdef OSG_LINUX_ICC
#pragma warning( disable : 177 )
#endif

namespace
{
    static Char8 cvsid_cpp       [] = "@(#)$Id: FCBaseTemplate_cpp.h,v 1.47 2006/03/17 17:03:19 pdaehne Exp $";
    static Char8 cvsid_hpp       [] = OSGAIRPLANECAMERABASE_HEADER_CVSID;
    static Char8 cvsid_inl       [] = OSGAIRPLANECAMERABASE_INLINE_CVSID;

    static Char8 cvsid_fields_hpp[] = OSGAIRPLANECAMERAFIELDS_HEADER_CVSID;
}

OSG_END_NAMESPACE

