/*---------------------------------------------------------------------------*\
 *                     OpenSG ToolBox UserInterface                          *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                         www.vrac.iastate.edu                              *
 *                                                                           *
 *                          Authors: David Kabala                            *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class Inventory
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#ifndef _OSGINVENTORYBASE_H_
#define _OSGINVENTORYBASE_H_
#ifdef __sgi
#pragma once
#endif


#include <OpenSG/OSGConfig.h>
#include "OSGGameDef.h"

#include <OpenSG/OSGBaseTypes.h>
#include <OpenSG/OSGRefPtr.h>
#include <OpenSG/OSGCoredNodePtr.h>

#include <OpenSG/OSGAttachmentContainer.h> // Parent

#include "Inventory/OSGInventoryItemFields.h" // InventoryItems type
#include <OpenSG/OSGBoolFields.h> // RootInventory type
#include "Inventory/OSGInventoryFields.h" // InventoryClasses type
#include <OpenSG/OSGStringFields.h> // InventoryClassName type

#include "OSGInventoryFields.h"
#include <OpenSG/Toolbox/OSGEventProducer.h>
#include <OpenSG/Toolbox/OSGEventProducerType.h>
#include <OpenSG/Toolbox/OSGMethodDescription.h>
#include <OpenSG/Toolbox/OSGEventProducerPtrType.h>

OSG_BEGIN_NAMESPACE

class Inventory;
class BinaryDataHandler;

//! \brief Inventory Base Class.

class OSG_GAMELIB_DLLMAPPING InventoryBase : public AttachmentContainer
{
  private:

    typedef AttachmentContainer    Inherited;

    /*==========================  PUBLIC  =================================*/
  public:

    typedef InventoryPtr  Ptr;

    enum
    {
        InventoryItemsFieldId     = Inherited::NextFieldId,
        RootInventoryFieldId      = InventoryItemsFieldId     + 1,
        InventoryClassesFieldId   = RootInventoryFieldId      + 1,
        InventoryClassNameFieldId = InventoryClassesFieldId   + 1,
        EventProducerFieldId      = InventoryClassNameFieldId + 1,
        NextFieldId               = EventProducerFieldId      + 1
    };

    static const OSG::BitVector InventoryItemsFieldMask;
    static const OSG::BitVector RootInventoryFieldMask;
    static const OSG::BitVector InventoryClassesFieldMask;
    static const OSG::BitVector InventoryClassNameFieldMask;
    static const OSG::BitVector EventProducerFieldMask;


    enum
    {
        ItemAddedMethodId       = 1,
        InventorySortedMethodId = ItemAddedMethodId       + 1,
        ItemRemovedMethodId     = InventorySortedMethodId + 1,
        NextMethodId            = ItemRemovedMethodId     + 1
    };



    static const OSG::BitVector MTInfluenceMask;

    /*---------------------------------------------------------------------*/
    /*! \name                    Class Get                                 */
    /*! \{                                                                 */

    static        FieldContainerType &getClassType    (void); 
    static        UInt32              getClassTypeId  (void); 
    static const  EventProducerType  &getProducerClassType  (void); 
    static        UInt32              getProducerClassTypeId(void); 

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                FieldContainer Get                            */
    /*! \{                                                                 */

    virtual       FieldContainerType &getType  (void); 
    virtual const FieldContainerType &getType  (void) const; 

    virtual       UInt32              getContainerSize(void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Get                                 */
    /*! \{                                                                 */


           MFInventoryItemPtr  *editMFInventoryItems (void);
     const MFInventoryItemPtr  *getMFInventoryItems (void) const;

           SFBool              *editSFRootInventory  (void);
     const SFBool              *getSFRootInventory  (void) const;

           MFInventoryPtr      *editMFInventoryClasses(void);
     const MFInventoryPtr      *getMFInventoryClasses(void) const;

           SFString            *editSFInventoryClassName(void);
     const SFString            *getSFInventoryClassName(void) const;


           bool                &editRootInventory  (void);
     const bool                &getRootInventory  (void) const;

           std::string         &editInventoryClassName(void);
     const std::string         &getInventoryClassName(void) const;

           InventoryItemPtr    &editInventoryItems (const UInt32 index);
     const InventoryItemPtr    &getInventoryItems (const UInt32 index) const;
#ifndef OSG_2_PREP
           MFInventoryItemPtr  &getInventoryItems (void);
     const MFInventoryItemPtr  &getInventoryItems (void) const;
#endif

           InventoryPtr        &editInventoryClasses(const UInt32 index);
     const InventoryPtr        &getInventoryClasses(const UInt32 index) const;
#ifndef OSG_2_PREP
           MFInventoryPtr      &getInventoryClasses(void);
     const MFInventoryPtr      &getInventoryClasses(void) const;
#endif

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Set                                 */
    /*! \{                                                                 */

     void setRootInventory  ( const bool &value );
     void setInventoryClassName( const std::string &value );

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                Method Produced Get                           */
    /*! \{                                                                 */

    virtual const EventProducerType &getProducerType(void) const; 
    EventConnection attachActivity(ActivityPtr TheActivity, UInt32 ProducedEventId);
    bool isActivityAttached(ActivityPtr TheActivity, UInt32 ProducedEventId) const;
    UInt32 getNumActivitiesAttached(UInt32 ProducedEventId) const;
    ActivityPtr getAttachedActivity(UInt32 ProducedEventId, UInt32 ActivityIndex) const;
    void detachActivity(ActivityPtr TheActivity, UInt32 ProducedEventId);
    UInt32 getNumProducedEvents(void) const;
    const MethodDescription *getProducedEventDescription(const Char8 *ProducedEventName) const;
    const MethodDescription *getProducedEventDescription(UInt32 ProducedEventId) const;
    UInt32 getProducedEventId(const Char8 *ProducedEventName) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Binary Access                              */
    /*! \{                                                                 */

    virtual UInt32 getBinSize (const BitVector         &whichField);
    virtual void   copyToBin  (      BinaryDataHandler &pMem,
                               const BitVector         &whichField);
    virtual void   copyFromBin(      BinaryDataHandler &pMem,
                               const BitVector         &whichField);


    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Construction                               */
    /*! \{                                                                 */

    static  InventoryPtr      create          (void); 
    static  InventoryPtr      createEmpty     (void); 

    /*! \}                                                                 */

    /*---------------------------------------------------------------------*/
    /*! \name                       Copy                                   */
    /*! \{                                                                 */

    virtual FieldContainerPtr     shallowCopy     (void) const; 

    /*! \}                                                                 */
    /*=========================  PROTECTED  ===============================*/
  protected:
    EventProducer _Producer;

    SFEventProducerPtr *editSFEventProducer(void);
    EventProducerPtr &editEventProducer(void);

    /*---------------------------------------------------------------------*/
    /*! \name                      Fields                                  */
    /*! \{                                                                 */

    MFInventoryItemPtr   _mfInventoryItems;
    SFBool              _sfRootInventory;
    MFInventoryPtr      _mfInventoryClasses;
    SFString            _sfInventoryClassName;

    /*! \}                                                                 */
    SFEventProducerPtr _sfEventProducer;
    /*---------------------------------------------------------------------*/
    /*! \name                   Constructors                               */
    /*! \{                                                                 */

    InventoryBase(void);
    InventoryBase(const InventoryBase &source);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Destructors                                */
    /*! \{                                                                 */

    virtual ~InventoryBase(void); 

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

#if !defined(OSG_FIXED_MFIELDSYNC)
    void executeSyncImpl(      InventoryBase *pOther,
                         const BitVector         &whichField);

    virtual void   executeSync(      FieldContainer    &other,
                               const BitVector         &whichField);
#else
    void executeSyncImpl(      InventoryBase *pOther,
                         const BitVector         &whichField,
                         const SyncInfo          &sInfo     );

    virtual void   executeSync(      FieldContainer    &other,
                               const BitVector         &whichField,
                               const SyncInfo          &sInfo);

    virtual void execBeginEdit     (const BitVector &whichField,
                                          UInt32     uiAspect,
                                          UInt32     uiContainerSize);

            void execBeginEditImpl (const BitVector &whichField,
                                          UInt32     uiAspect,
                                          UInt32     uiContainerSize);

    virtual void onDestroyAspect(UInt32 uiId, UInt32 uiAspect);
#endif

    /*! \}                                                                 */
    /*==========================  PRIVATE  ================================*/
  private:

    friend class FieldContainer;

    static MethodDescription   *_methodDesc[];
    static EventProducerType _producerType;

    static FieldDescription   *_desc[];
    static FieldContainerType  _type;


    // prohibit default functions (move to 'public' if you need one)
    void operator =(const InventoryBase &source);
};

//---------------------------------------------------------------------------
//   Exported Types
//---------------------------------------------------------------------------


typedef InventoryBase *InventoryBaseP;

typedef osgIF<InventoryBase::isNodeCore,
              CoredNodePtr<Inventory>,
              FieldContainer::attempt_to_create_CoredNodePtr_on_non_NodeCore_FC
              >::_IRet InventoryNodePtr;

typedef RefPtr<InventoryPtr> InventoryRefPtr;

OSG_END_NAMESPACE

#endif /* _OSGINVENTORYBASE_H_ */
