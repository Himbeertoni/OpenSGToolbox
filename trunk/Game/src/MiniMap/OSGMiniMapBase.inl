/*---------------------------------------------------------------------------*\
 *                     OpenSG ToolBox UserInterface                          *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                          Authors: David Kabala                            *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class MiniMap!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <OpenSG/OSGConfig.h>

OSG_BEGIN_NAMESPACE


//! access the type of the class
inline
OSG::FieldContainerType &MiniMapBase::getClassType(void)
{
    return _type; 
} 

//! access the numerical type of the class
inline
OSG::UInt32 MiniMapBase::getClassTypeId(void) 
{
    return _type.getId(); 
} 

//! access the producer type of the class
inline
const EventProducerType &MiniMapBase::getProducerClassType(void)
{
    return _producerType;
}

//! access the producer type id of the class
inline
UInt32 MiniMapBase::getProducerClassTypeId(void)
{
    return _producerType.getId();
}


/*------------------------------ get -----------------------------------*/

//! Get the MiniMap::_sfTransformation field.
inline
const SFMiniMapTransformationPtr *MiniMapBase::getSFTransformation(void) const
{
    return &_sfTransformation;
}

//! Get the MiniMap::_sfTransformation field.
inline
SFMiniMapTransformationPtr *MiniMapBase::editSFTransformation(void)
{
    return &_sfTransformation;
}

//! Get the MiniMap::_mfIndicators field.
inline
const MFMiniMapIndicatorPtr *MiniMapBase::getMFIndicators(void) const
{
    return &_mfIndicators;
}

//! Get the MiniMap::_mfIndicators field.
inline
MFMiniMapIndicatorPtr *MiniMapBase::editMFIndicators(void)
{
    return &_mfIndicators;
}

//! Get the MiniMap::_sfViewPointIndicator field.
inline
const SFMiniMapIndicatorPtr *MiniMapBase::getSFViewPointIndicator(void) const
{
    return &_sfViewPointIndicator;
}

//! Get the MiniMap::_sfViewPointIndicator field.
inline
SFMiniMapIndicatorPtr *MiniMapBase::editSFViewPointIndicator(void)
{
    return &_sfViewPointIndicator;
}

//! Get the MiniMap::_sfMapOrientation field.
inline
const SFQuaternion *MiniMapBase::getSFMapOrientation(void) const
{
    return &_sfMapOrientation;
}

//! Get the MiniMap::_sfMapOrientation field.
inline
SFQuaternion *MiniMapBase::editSFMapOrientation(void)
{
    return &_sfMapOrientation;
}

//! Get the MiniMap::_sfLockMapOrientation field.
inline
const SFBool *MiniMapBase::getSFLockMapOrientation(void) const
{
    return &_sfLockMapOrientation;
}

//! Get the MiniMap::_sfLockMapOrientation field.
inline
SFBool *MiniMapBase::editSFLockMapOrientation(void)
{
    return &_sfLockMapOrientation;
}

//! Get the MiniMap::_sfMapScale field.
inline
const SFUInt32 *MiniMapBase::getSFMapScale(void) const
{
    return &_sfMapScale;
}

//! Get the MiniMap::_sfMapScale field.
inline
SFUInt32 *MiniMapBase::editSFMapScale(void)
{
    return &_sfMapScale;
}

//! Get the MiniMap::_sfMapScaleParameter field.
inline
const SFVec3f *MiniMapBase::getSFMapScaleParameter(void) const
{
    return &_sfMapScaleParameter;
}

//! Get the MiniMap::_sfMapScaleParameter field.
inline
SFVec3f *MiniMapBase::editSFMapScaleParameter(void)
{
    return &_sfMapScaleParameter;
}

//! Get the MiniMap::_sfMapScene field.
inline
const SFNodePtr *MiniMapBase::getSFMapScene(void) const
{
    return &_sfMapScene;
}

//! Get the MiniMap::_sfMapScene field.
inline
SFNodePtr *MiniMapBase::editSFMapScene(void)
{
    return &_sfMapScene;
}

//! Get the MiniMap::_sfUnlockedMapSize field.
inline
const SFVec2f *MiniMapBase::getSFUnlockedMapSize(void) const
{
    return &_sfUnlockedMapSize;
}

//! Get the MiniMap::_sfUnlockedMapSize field.
inline
SFVec2f *MiniMapBase::editSFUnlockedMapSize(void)
{
    return &_sfUnlockedMapSize;
}

//! Get the MiniMap::_mfOverlays field.
inline
const MFMiniMapOverlayPtr *MiniMapBase::getMFOverlays(void) const
{
    return &_mfOverlays;
}

//! Get the MiniMap::_mfOverlays field.
inline
MFMiniMapOverlayPtr *MiniMapBase::editMFOverlays(void)
{
    return &_mfOverlays;
}


//! Get the value of the MiniMap::_sfTransformation field.
inline
MiniMapTransformationPtr &MiniMapBase::editTransformation(void)
{
    return _sfTransformation.getValue();
}

//! Get the value of the MiniMap::_sfTransformation field.
inline
const MiniMapTransformationPtr &MiniMapBase::getTransformation(void) const
{
    return _sfTransformation.getValue();
}

//! Set the value of the MiniMap::_sfTransformation field.
inline
void MiniMapBase::setTransformation(const MiniMapTransformationPtr &value)
{
    _sfTransformation.setValue(value);
}

//! Get the value of the MiniMap::_sfViewPointIndicator field.
inline
MiniMapIndicatorPtr &MiniMapBase::editViewPointIndicator(void)
{
    return _sfViewPointIndicator.getValue();
}

//! Get the value of the MiniMap::_sfViewPointIndicator field.
inline
const MiniMapIndicatorPtr &MiniMapBase::getViewPointIndicator(void) const
{
    return _sfViewPointIndicator.getValue();
}

//! Set the value of the MiniMap::_sfViewPointIndicator field.
inline
void MiniMapBase::setViewPointIndicator(const MiniMapIndicatorPtr &value)
{
    _sfViewPointIndicator.setValue(value);
}

//! Get the value of the MiniMap::_sfMapOrientation field.
inline
Quaternion &MiniMapBase::editMapOrientation(void)
{
    return _sfMapOrientation.getValue();
}

//! Get the value of the MiniMap::_sfMapOrientation field.
inline
const Quaternion &MiniMapBase::getMapOrientation(void) const
{
    return _sfMapOrientation.getValue();
}

//! Set the value of the MiniMap::_sfMapOrientation field.
inline
void MiniMapBase::setMapOrientation(const Quaternion &value)
{
    _sfMapOrientation.setValue(value);
}

//! Get the value of the MiniMap::_sfLockMapOrientation field.
inline
bool &MiniMapBase::editLockMapOrientation(void)
{
    return _sfLockMapOrientation.getValue();
}

//! Get the value of the MiniMap::_sfLockMapOrientation field.
inline
const bool &MiniMapBase::getLockMapOrientation(void) const
{
    return _sfLockMapOrientation.getValue();
}

//! Set the value of the MiniMap::_sfLockMapOrientation field.
inline
void MiniMapBase::setLockMapOrientation(const bool &value)
{
    _sfLockMapOrientation.setValue(value);
}

//! Get the value of the MiniMap::_sfMapScale field.
inline
UInt32 &MiniMapBase::editMapScale(void)
{
    return _sfMapScale.getValue();
}

//! Get the value of the MiniMap::_sfMapScale field.
inline
const UInt32 &MiniMapBase::getMapScale(void) const
{
    return _sfMapScale.getValue();
}

//! Set the value of the MiniMap::_sfMapScale field.
inline
void MiniMapBase::setMapScale(const UInt32 &value)
{
    _sfMapScale.setValue(value);
}

//! Get the value of the MiniMap::_sfMapScaleParameter field.
inline
Vec3f &MiniMapBase::editMapScaleParameter(void)
{
    return _sfMapScaleParameter.getValue();
}

//! Get the value of the MiniMap::_sfMapScaleParameter field.
inline
const Vec3f &MiniMapBase::getMapScaleParameter(void) const
{
    return _sfMapScaleParameter.getValue();
}

//! Set the value of the MiniMap::_sfMapScaleParameter field.
inline
void MiniMapBase::setMapScaleParameter(const Vec3f &value)
{
    _sfMapScaleParameter.setValue(value);
}

//! Get the value of the MiniMap::_sfMapScene field.
inline
NodePtr &MiniMapBase::editMapScene(void)
{
    return _sfMapScene.getValue();
}

//! Get the value of the MiniMap::_sfMapScene field.
inline
const NodePtr &MiniMapBase::getMapScene(void) const
{
    return _sfMapScene.getValue();
}

//! Set the value of the MiniMap::_sfMapScene field.
inline
void MiniMapBase::setMapScene(const NodePtr &value)
{
    _sfMapScene.setValue(value);
}

//! Get the value of the MiniMap::_sfUnlockedMapSize field.
inline
Vec2f &MiniMapBase::editUnlockedMapSize(void)
{
    return _sfUnlockedMapSize.getValue();
}

//! Get the value of the MiniMap::_sfUnlockedMapSize field.
inline
const Vec2f &MiniMapBase::getUnlockedMapSize(void) const
{
    return _sfUnlockedMapSize.getValue();
}

//! Set the value of the MiniMap::_sfUnlockedMapSize field.
inline
void MiniMapBase::setUnlockedMapSize(const Vec2f &value)
{
    _sfUnlockedMapSize.setValue(value);
}


//! Get the value of the \a index element the MiniMap::_mfIndicators field.
inline
MiniMapIndicatorPtr &MiniMapBase::editIndicators(const UInt32 index)
{
    return _mfIndicators[index];
}

//! Get the value of the \a index element the MiniMap::_mfIndicators field.
inline
const MiniMapIndicatorPtr &MiniMapBase::getIndicators(const UInt32 index) const
{
    return _mfIndicators[index];
}

#ifndef OSG_2_PREP
//! Get the MiniMap::_mfIndicators field.
inline
MFMiniMapIndicatorPtr &MiniMapBase::getIndicators(void)
{
    return _mfIndicators;
}

//! Get the MiniMap::_mfIndicators field.
inline
const MFMiniMapIndicatorPtr &MiniMapBase::getIndicators(void) const
{
    return _mfIndicators;
}

#endif
//! Get the value of the \a index element the MiniMap::_mfOverlays field.
inline
MiniMapOverlayPtr &MiniMapBase::editOverlays(const UInt32 index)
{
    return _mfOverlays[index];
}

//! Get the value of the \a index element the MiniMap::_mfOverlays field.
inline
const MiniMapOverlayPtr &MiniMapBase::getOverlays(const UInt32 index) const
{
    return _mfOverlays[index];
}

#ifndef OSG_2_PREP
//! Get the MiniMap::_mfOverlays field.
inline
MFMiniMapOverlayPtr &MiniMapBase::getOverlays(void)
{
    return _mfOverlays;
}

//! Get the MiniMap::_mfOverlays field.
inline
const MFMiniMapOverlayPtr &MiniMapBase::getOverlays(void) const
{
    return _mfOverlays;
}

#endif
OSG_END_NAMESPACE

