/*---------------------------------------------------------------------------*\
 *                     OpenSG ToolBox UserInterface                          *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                         www.vrac.iastate.edu                              *
 *                                                                           *
 *                          Authors: David Kabala                            *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class ShaderTextureFilter!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#define OSG_COMPILESHADERTEXTUREFILTERINST

#include <stdlib.h>
#include <stdio.h>

#include <OpenSG/OSGConfig.h>

#include "OSGShaderTextureFilterBase.h"
#include "OSGShaderTextureFilter.h"


OSG_BEGIN_NAMESPACE

const OSG::BitVector  ShaderTextureFilterBase::InternalParametersFieldMask = 
    (TypeTraits<BitVector>::One << ShaderTextureFilterBase::InternalParametersFieldId);

const OSG::BitVector  ShaderTextureFilterBase::InternalShaderFieldMask = 
    (TypeTraits<BitVector>::One << ShaderTextureFilterBase::InternalShaderFieldId);

const OSG::BitVector  ShaderTextureFilterBase::InternalFBOFieldMask = 
    (TypeTraits<BitVector>::One << ShaderTextureFilterBase::InternalFBOFieldId);

const OSG::BitVector  ShaderTextureFilterBase::FBOSizeFieldMask = 
    (TypeTraits<BitVector>::One << ShaderTextureFilterBase::FBOSizeFieldId);

const OSG::BitVector  ShaderTextureFilterBase::ShaderOutputSlotFieldMask = 
    (TypeTraits<BitVector>::One << ShaderTextureFilterBase::ShaderOutputSlotFieldId);

const OSG::BitVector  ShaderTextureFilterBase::ShaderInputSlotFieldMask = 
    (TypeTraits<BitVector>::One << ShaderTextureFilterBase::ShaderInputSlotFieldId);

const OSG::BitVector ShaderTextureFilterBase::MTInfluenceMask = 
    (Inherited::MTInfluenceMask) | 
    (static_cast<BitVector>(0x0) << Inherited::NextFieldId); 


// Field descriptions

/*! \var SHLParameterChunkPtr ShaderTextureFilterBase::_sfInternalParameters
    
*/
/*! \var SHLChunkPtr     ShaderTextureFilterBase::_sfInternalShader
    
*/
/*! \var FBOViewportPtr  ShaderTextureFilterBase::_sfInternalFBO
    
*/
/*! \var Vec2f           ShaderTextureFilterBase::_sfFBOSize
    
*/
/*! \var TextureFilterOutputSlot ShaderTextureFilterBase::_sfShaderOutputSlot
    
*/
/*! \var TextureFilterInputSlot ShaderTextureFilterBase::_sfShaderInputSlot
    
*/

//! ShaderTextureFilter description

FieldDescription *ShaderTextureFilterBase::_desc[] = 
{
    new FieldDescription(SFSHLParameterChunkPtr::getClassType(), 
                     "InternalParameters", 
                     InternalParametersFieldId, InternalParametersFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&ShaderTextureFilterBase::editSFInternalParameters)),
    new FieldDescription(SFSHLChunkPtr::getClassType(), 
                     "InternalShader", 
                     InternalShaderFieldId, InternalShaderFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&ShaderTextureFilterBase::editSFInternalShader)),
    new FieldDescription(SFFBOViewportPtr::getClassType(), 
                     "InternalFBO", 
                     InternalFBOFieldId, InternalFBOFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&ShaderTextureFilterBase::editSFInternalFBO)),
    new FieldDescription(SFVec2f::getClassType(), 
                     "FBOSize", 
                     FBOSizeFieldId, FBOSizeFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&ShaderTextureFilterBase::editSFFBOSize)),
    new FieldDescription(SFTextureFilterOutputSlot::getClassType(), 
                     "ShaderOutputSlot", 
                     ShaderOutputSlotFieldId, ShaderOutputSlotFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&ShaderTextureFilterBase::editSFShaderOutputSlot)),
    new FieldDescription(SFTextureFilterInputSlot::getClassType(), 
                     "ShaderInputSlot", 
                     ShaderInputSlotFieldId, ShaderInputSlotFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&ShaderTextureFilterBase::editSFShaderInputSlot))
};


FieldContainerType ShaderTextureFilterBase::_type(
    "ShaderTextureFilter",
    "TextureFilter",
    NULL,
    reinterpret_cast<PrototypeCreateF>(&ShaderTextureFilterBase::createEmpty),
    ShaderTextureFilter::initMethod,
    _desc,
    sizeof(_desc));

//OSG_FIELD_CONTAINER_DEF(ShaderTextureFilterBase, ShaderTextureFilterPtr)

/*------------------------------ get -----------------------------------*/

FieldContainerType &ShaderTextureFilterBase::getType(void) 
{
    return _type; 
} 

const FieldContainerType &ShaderTextureFilterBase::getType(void) const 
{
    return _type;
} 


FieldContainerPtr ShaderTextureFilterBase::shallowCopy(void) const 
{ 
    ShaderTextureFilterPtr returnValue; 

    newPtr(returnValue, dynamic_cast<const ShaderTextureFilter *>(this)); 

    return returnValue; 
}

UInt32 ShaderTextureFilterBase::getContainerSize(void) const 
{ 
    return sizeof(ShaderTextureFilter); 
}


#if !defined(OSG_FIXED_MFIELDSYNC)
void ShaderTextureFilterBase::executeSync(      FieldContainer &other,
                                    const BitVector      &whichField)
{
    this->executeSyncImpl(static_cast<ShaderTextureFilterBase *>(&other),
                          whichField);
}
#else
void ShaderTextureFilterBase::executeSync(      FieldContainer &other,
                                    const BitVector      &whichField,                                    const SyncInfo       &sInfo     )
{
    this->executeSyncImpl((ShaderTextureFilterBase *) &other, whichField, sInfo);
}
void ShaderTextureFilterBase::execBeginEdit(const BitVector &whichField, 
                                            UInt32     uiAspect,
                                            UInt32     uiContainerSize) 
{
    this->execBeginEditImpl(whichField, uiAspect, uiContainerSize);
}

void ShaderTextureFilterBase::onDestroyAspect(UInt32 uiId, UInt32 uiAspect)
{
    Inherited::onDestroyAspect(uiId, uiAspect);

}
#endif

/*------------------------- constructors ----------------------------------*/

#ifdef OSG_WIN32_ICL
#pragma warning (disable : 383)
#endif

ShaderTextureFilterBase::ShaderTextureFilterBase(void) :
    _sfInternalParameters     (SHLParameterChunkPtr(NullFC)), 
    _sfInternalShader         (SHLChunkPtr(NullFC)), 
    _sfInternalFBO            (FBOViewportPtr(NullFC)), 
    _sfFBOSize                (Vec2f(-1,-1)), 
    _sfShaderOutputSlot       (), 
    _sfShaderInputSlot        (), 
    Inherited() 
{
}

#ifdef OSG_WIN32_ICL
#pragma warning (default : 383)
#endif

ShaderTextureFilterBase::ShaderTextureFilterBase(const ShaderTextureFilterBase &source) :
    _sfInternalParameters     (source._sfInternalParameters     ), 
    _sfInternalShader         (source._sfInternalShader         ), 
    _sfInternalFBO            (source._sfInternalFBO            ), 
    _sfFBOSize                (source._sfFBOSize                ), 
    _sfShaderOutputSlot       (source._sfShaderOutputSlot       ), 
    _sfShaderInputSlot        (source._sfShaderInputSlot        ), 
    Inherited                 (source)
{
}

/*-------------------------- destructors ----------------------------------*/

ShaderTextureFilterBase::~ShaderTextureFilterBase(void)
{
}

/*------------------------------ access -----------------------------------*/

UInt32 ShaderTextureFilterBase::getBinSize(const BitVector &whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (InternalParametersFieldMask & whichField))
    {
        returnValue += _sfInternalParameters.getBinSize();
    }

    if(FieldBits::NoField != (InternalShaderFieldMask & whichField))
    {
        returnValue += _sfInternalShader.getBinSize();
    }

    if(FieldBits::NoField != (InternalFBOFieldMask & whichField))
    {
        returnValue += _sfInternalFBO.getBinSize();
    }

    if(FieldBits::NoField != (FBOSizeFieldMask & whichField))
    {
        returnValue += _sfFBOSize.getBinSize();
    }

    if(FieldBits::NoField != (ShaderOutputSlotFieldMask & whichField))
    {
        returnValue += _sfShaderOutputSlot.getBinSize();
    }

    if(FieldBits::NoField != (ShaderInputSlotFieldMask & whichField))
    {
        returnValue += _sfShaderInputSlot.getBinSize();
    }


    return returnValue;
}

void ShaderTextureFilterBase::copyToBin(      BinaryDataHandler &pMem,
                                  const BitVector         &whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (InternalParametersFieldMask & whichField))
    {
        _sfInternalParameters.copyToBin(pMem);
    }

    if(FieldBits::NoField != (InternalShaderFieldMask & whichField))
    {
        _sfInternalShader.copyToBin(pMem);
    }

    if(FieldBits::NoField != (InternalFBOFieldMask & whichField))
    {
        _sfInternalFBO.copyToBin(pMem);
    }

    if(FieldBits::NoField != (FBOSizeFieldMask & whichField))
    {
        _sfFBOSize.copyToBin(pMem);
    }

    if(FieldBits::NoField != (ShaderOutputSlotFieldMask & whichField))
    {
        _sfShaderOutputSlot.copyToBin(pMem);
    }

    if(FieldBits::NoField != (ShaderInputSlotFieldMask & whichField))
    {
        _sfShaderInputSlot.copyToBin(pMem);
    }


}

void ShaderTextureFilterBase::copyFromBin(      BinaryDataHandler &pMem,
                                    const BitVector    &whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (InternalParametersFieldMask & whichField))
    {
        _sfInternalParameters.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (InternalShaderFieldMask & whichField))
    {
        _sfInternalShader.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (InternalFBOFieldMask & whichField))
    {
        _sfInternalFBO.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (FBOSizeFieldMask & whichField))
    {
        _sfFBOSize.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (ShaderOutputSlotFieldMask & whichField))
    {
        _sfShaderOutputSlot.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (ShaderInputSlotFieldMask & whichField))
    {
        _sfShaderInputSlot.copyFromBin(pMem);
    }


}

#if !defined(OSG_FIXED_MFIELDSYNC)
void ShaderTextureFilterBase::executeSyncImpl(      ShaderTextureFilterBase *pOther,
                                        const BitVector         &whichField)
{

    Inherited::executeSyncImpl(pOther, whichField);

    if(FieldBits::NoField != (InternalParametersFieldMask & whichField))
        _sfInternalParameters.syncWith(pOther->_sfInternalParameters);

    if(FieldBits::NoField != (InternalShaderFieldMask & whichField))
        _sfInternalShader.syncWith(pOther->_sfInternalShader);

    if(FieldBits::NoField != (InternalFBOFieldMask & whichField))
        _sfInternalFBO.syncWith(pOther->_sfInternalFBO);

    if(FieldBits::NoField != (FBOSizeFieldMask & whichField))
        _sfFBOSize.syncWith(pOther->_sfFBOSize);

    if(FieldBits::NoField != (ShaderOutputSlotFieldMask & whichField))
        _sfShaderOutputSlot.syncWith(pOther->_sfShaderOutputSlot);

    if(FieldBits::NoField != (ShaderInputSlotFieldMask & whichField))
        _sfShaderInputSlot.syncWith(pOther->_sfShaderInputSlot);


}
#else
void ShaderTextureFilterBase::executeSyncImpl(      ShaderTextureFilterBase *pOther,
                                        const BitVector         &whichField,
                                        const SyncInfo          &sInfo      )
{

    Inherited::executeSyncImpl(pOther, whichField, sInfo);

    if(FieldBits::NoField != (InternalParametersFieldMask & whichField))
        _sfInternalParameters.syncWith(pOther->_sfInternalParameters);

    if(FieldBits::NoField != (InternalShaderFieldMask & whichField))
        _sfInternalShader.syncWith(pOther->_sfInternalShader);

    if(FieldBits::NoField != (InternalFBOFieldMask & whichField))
        _sfInternalFBO.syncWith(pOther->_sfInternalFBO);

    if(FieldBits::NoField != (FBOSizeFieldMask & whichField))
        _sfFBOSize.syncWith(pOther->_sfFBOSize);

    if(FieldBits::NoField != (ShaderOutputSlotFieldMask & whichField))
        _sfShaderOutputSlot.syncWith(pOther->_sfShaderOutputSlot);

    if(FieldBits::NoField != (ShaderInputSlotFieldMask & whichField))
        _sfShaderInputSlot.syncWith(pOther->_sfShaderInputSlot);



}

void ShaderTextureFilterBase::execBeginEditImpl (const BitVector &whichField, 
                                                 UInt32     uiAspect,
                                                 UInt32     uiContainerSize)
{
    Inherited::execBeginEditImpl(whichField, uiAspect, uiContainerSize);

}
#endif



OSG_END_NAMESPACE

#include <OpenSG/OSGSFieldTypeDef.inl>
#include <OpenSG/OSGMFieldTypeDef.inl>

OSG_BEGIN_NAMESPACE

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldDataTraits<ShaderTextureFilterPtr>::_type("ShaderTextureFilterPtr", "TextureFilterPtr");
#endif

OSG_DLLEXPORT_SFIELD_DEF1(ShaderTextureFilterPtr, OSG_IMAGEPROCESSINGLIB_DLLTMPLMAPPING);
OSG_DLLEXPORT_MFIELD_DEF1(ShaderTextureFilterPtr, OSG_IMAGEPROCESSINGLIB_DLLTMPLMAPPING);


OSG_END_NAMESPACE

