/*---------------------------------------------------------------------------*\
 *                     OpenSG ToolBox UserInterface                          *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                         www.vrac.iastate.edu                              *
 *                                                                           *
 *                          Authors: David Kabala                            *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class MouseWheelEvent!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#define OSG_COMPILEMOUSEWHEELEVENTINST

#include <stdlib.h>
#include <stdio.h>

#include <OpenSG/OSGConfig.h>

#include "OSGMouseWheelEventBase.h"
#include "OSGMouseWheelEvent.h"


OSG_BEGIN_NAMESPACE

const OSG::BitVector  MouseWheelEventBase::ScrollTypeFieldMask = 
    (TypeTraits<BitVector>::One << MouseWheelEventBase::ScrollTypeFieldId);

const OSG::BitVector  MouseWheelEventBase::ScrollOrientationFieldMask = 
    (TypeTraits<BitVector>::One << MouseWheelEventBase::ScrollOrientationFieldId);

const OSG::BitVector  MouseWheelEventBase::WheelRotationFieldMask = 
    (TypeTraits<BitVector>::One << MouseWheelEventBase::WheelRotationFieldId);

const OSG::BitVector  MouseWheelEventBase::LocationFieldMask = 
    (TypeTraits<BitVector>::One << MouseWheelEventBase::LocationFieldId);

const OSG::BitVector  MouseWheelEventBase::ViewportFieldMask = 
    (TypeTraits<BitVector>::One << MouseWheelEventBase::ViewportFieldId);

const OSG::BitVector MouseWheelEventBase::MTInfluenceMask = 
    (Inherited::MTInfluenceMask) | 
    (static_cast<BitVector>(0x0) << Inherited::NextFieldId); 


// Field descriptions

/*! \var UInt8           MouseWheelEventBase::_sfScrollType
    
*/
/*! \var UInt8           MouseWheelEventBase::_sfScrollOrientation
    
*/
/*! \var Int32           MouseWheelEventBase::_sfWheelRotation
    
*/
/*! \var Pnt2f           MouseWheelEventBase::_sfLocation
    
*/
/*! \var ViewportPtr     MouseWheelEventBase::_sfViewport
    
*/

//! MouseWheelEvent description

FieldDescription *MouseWheelEventBase::_desc[] = 
{
    new FieldDescription(SFUInt8::getClassType(), 
                     "ScrollType", 
                     ScrollTypeFieldId, ScrollTypeFieldMask,
                     true,
                     reinterpret_cast<FieldAccessMethod>(&MouseWheelEventBase::editSFScrollType)),
    new FieldDescription(SFUInt8::getClassType(), 
                     "ScrollOrientation", 
                     ScrollOrientationFieldId, ScrollOrientationFieldMask,
                     true,
                     reinterpret_cast<FieldAccessMethod>(&MouseWheelEventBase::editSFScrollOrientation)),
    new FieldDescription(SFInt32::getClassType(), 
                     "WheelRotation", 
                     WheelRotationFieldId, WheelRotationFieldMask,
                     true,
                     reinterpret_cast<FieldAccessMethod>(&MouseWheelEventBase::editSFWheelRotation)),
    new FieldDescription(SFPnt2f::getClassType(), 
                     "Location", 
                     LocationFieldId, LocationFieldMask,
                     true,
                     reinterpret_cast<FieldAccessMethod>(&MouseWheelEventBase::editSFLocation)),
    new FieldDescription(SFViewportPtr::getClassType(), 
                     "Viewport", 
                     ViewportFieldId, ViewportFieldMask,
                     true,
                     reinterpret_cast<FieldAccessMethod>(&MouseWheelEventBase::editSFViewport))
};


FieldContainerType MouseWheelEventBase::_type(
    "MouseWheelEvent",
    "InputEvent",
    NULL,
    reinterpret_cast<PrototypeCreateF>(&MouseWheelEventBase::createEmpty),
    MouseWheelEvent::initMethod,
    _desc,
    sizeof(_desc));

//OSG_FIELD_CONTAINER_DEF(MouseWheelEventBase, MouseWheelEventPtr)

/*------------------------------ get -----------------------------------*/

FieldContainerType &MouseWheelEventBase::getType(void) 
{
    return _type; 
} 

const FieldContainerType &MouseWheelEventBase::getType(void) const 
{
    return _type;
} 


FieldContainerPtr MouseWheelEventBase::shallowCopy(void) const 
{ 
    MouseWheelEventPtr returnValue; 

    newPtr(returnValue, dynamic_cast<const MouseWheelEvent *>(this)); 

    return returnValue; 
}

UInt32 MouseWheelEventBase::getContainerSize(void) const 
{ 
    return sizeof(MouseWheelEvent); 
}


#if !defined(OSG_FIXED_MFIELDSYNC)
void MouseWheelEventBase::executeSync(      FieldContainer &other,
                                    const BitVector      &whichField)
{
    this->executeSyncImpl(static_cast<MouseWheelEventBase *>(&other),
                          whichField);
}
#else
void MouseWheelEventBase::executeSync(      FieldContainer &other,
                                    const BitVector      &whichField,                                    const SyncInfo       &sInfo     )
{
    this->executeSyncImpl((MouseWheelEventBase *) &other, whichField, sInfo);
}
void MouseWheelEventBase::execBeginEdit(const BitVector &whichField, 
                                            UInt32     uiAspect,
                                            UInt32     uiContainerSize) 
{
    this->execBeginEditImpl(whichField, uiAspect, uiContainerSize);
}

void MouseWheelEventBase::onDestroyAspect(UInt32 uiId, UInt32 uiAspect)
{
    Inherited::onDestroyAspect(uiId, uiAspect);

}
#endif

/*------------------------- constructors ----------------------------------*/

#ifdef OSG_WIN32_ICL
#pragma warning (disable : 383)
#endif

MouseWheelEventBase::MouseWheelEventBase(void) :
    _sfScrollType             (UInt8(MouseWheelEvent::UNIT_SCROLL)), 
    _sfScrollOrientation      (UInt8(MouseWheelEvent::SCROLL_ORIENTATION_VERTICAL)), 
    _sfWheelRotation          (Int32(0)), 
    _sfLocation               (Pnt2f(0.0f,0.0f)), 
    _sfViewport               (ViewportPtr(NullFC)), 
    Inherited() 
{
}

#ifdef OSG_WIN32_ICL
#pragma warning (default : 383)
#endif

MouseWheelEventBase::MouseWheelEventBase(const MouseWheelEventBase &source) :
    _sfScrollType             (source._sfScrollType             ), 
    _sfScrollOrientation      (source._sfScrollOrientation      ), 
    _sfWheelRotation          (source._sfWheelRotation          ), 
    _sfLocation               (source._sfLocation               ), 
    _sfViewport               (source._sfViewport               ), 
    Inherited                 (source)
{
}

/*-------------------------- destructors ----------------------------------*/

MouseWheelEventBase::~MouseWheelEventBase(void)
{
}

/*------------------------------ access -----------------------------------*/

UInt32 MouseWheelEventBase::getBinSize(const BitVector &whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (ScrollTypeFieldMask & whichField))
    {
        returnValue += _sfScrollType.getBinSize();
    }

    if(FieldBits::NoField != (ScrollOrientationFieldMask & whichField))
    {
        returnValue += _sfScrollOrientation.getBinSize();
    }

    if(FieldBits::NoField != (WheelRotationFieldMask & whichField))
    {
        returnValue += _sfWheelRotation.getBinSize();
    }

    if(FieldBits::NoField != (LocationFieldMask & whichField))
    {
        returnValue += _sfLocation.getBinSize();
    }

    if(FieldBits::NoField != (ViewportFieldMask & whichField))
    {
        returnValue += _sfViewport.getBinSize();
    }


    return returnValue;
}

void MouseWheelEventBase::copyToBin(      BinaryDataHandler &pMem,
                                  const BitVector         &whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (ScrollTypeFieldMask & whichField))
    {
        _sfScrollType.copyToBin(pMem);
    }

    if(FieldBits::NoField != (ScrollOrientationFieldMask & whichField))
    {
        _sfScrollOrientation.copyToBin(pMem);
    }

    if(FieldBits::NoField != (WheelRotationFieldMask & whichField))
    {
        _sfWheelRotation.copyToBin(pMem);
    }

    if(FieldBits::NoField != (LocationFieldMask & whichField))
    {
        _sfLocation.copyToBin(pMem);
    }

    if(FieldBits::NoField != (ViewportFieldMask & whichField))
    {
        _sfViewport.copyToBin(pMem);
    }


}

void MouseWheelEventBase::copyFromBin(      BinaryDataHandler &pMem,
                                    const BitVector    &whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (ScrollTypeFieldMask & whichField))
    {
        _sfScrollType.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (ScrollOrientationFieldMask & whichField))
    {
        _sfScrollOrientation.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (WheelRotationFieldMask & whichField))
    {
        _sfWheelRotation.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (LocationFieldMask & whichField))
    {
        _sfLocation.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (ViewportFieldMask & whichField))
    {
        _sfViewport.copyFromBin(pMem);
    }


}

#if !defined(OSG_FIXED_MFIELDSYNC)
void MouseWheelEventBase::executeSyncImpl(      MouseWheelEventBase *pOther,
                                        const BitVector         &whichField)
{

    Inherited::executeSyncImpl(pOther, whichField);

    if(FieldBits::NoField != (ScrollTypeFieldMask & whichField))
        _sfScrollType.syncWith(pOther->_sfScrollType);

    if(FieldBits::NoField != (ScrollOrientationFieldMask & whichField))
        _sfScrollOrientation.syncWith(pOther->_sfScrollOrientation);

    if(FieldBits::NoField != (WheelRotationFieldMask & whichField))
        _sfWheelRotation.syncWith(pOther->_sfWheelRotation);

    if(FieldBits::NoField != (LocationFieldMask & whichField))
        _sfLocation.syncWith(pOther->_sfLocation);

    if(FieldBits::NoField != (ViewportFieldMask & whichField))
        _sfViewport.syncWith(pOther->_sfViewport);


}
#else
void MouseWheelEventBase::executeSyncImpl(      MouseWheelEventBase *pOther,
                                        const BitVector         &whichField,
                                        const SyncInfo          &sInfo      )
{

    Inherited::executeSyncImpl(pOther, whichField, sInfo);

    if(FieldBits::NoField != (ScrollTypeFieldMask & whichField))
        _sfScrollType.syncWith(pOther->_sfScrollType);

    if(FieldBits::NoField != (ScrollOrientationFieldMask & whichField))
        _sfScrollOrientation.syncWith(pOther->_sfScrollOrientation);

    if(FieldBits::NoField != (WheelRotationFieldMask & whichField))
        _sfWheelRotation.syncWith(pOther->_sfWheelRotation);

    if(FieldBits::NoField != (LocationFieldMask & whichField))
        _sfLocation.syncWith(pOther->_sfLocation);

    if(FieldBits::NoField != (ViewportFieldMask & whichField))
        _sfViewport.syncWith(pOther->_sfViewport);



}

void MouseWheelEventBase::execBeginEditImpl (const BitVector &whichField, 
                                                 UInt32     uiAspect,
                                                 UInt32     uiContainerSize)
{
    Inherited::execBeginEditImpl(whichField, uiAspect, uiContainerSize);

}
#endif



OSG_END_NAMESPACE

#include <OpenSG/OSGSFieldTypeDef.inl>

OSG_BEGIN_NAMESPACE

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldDataTraits<MouseWheelEventPtr>::_type("MouseWheelEventPtr", "InputEventPtr");
#endif

OSG_DLLEXPORT_SFIELD_DEF1(MouseWheelEventPtr, OSG_INPUTLIB_DLLTMPLMAPPING);


OSG_END_NAMESPACE

