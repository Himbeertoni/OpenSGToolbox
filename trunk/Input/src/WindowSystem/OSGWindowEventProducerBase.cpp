/*---------------------------------------------------------------------------*\
 *                     OpenSG ToolBox UserInterface                          *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                         www.vrac.iastate.edu                              *
 *                                                                           *
 *                          Authors: David Kabala                            *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class WindowEventProducer!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#define OSG_COMPILEWINDOWEVENTPRODUCERINST

#include <stdlib.h>
#include <stdio.h>

#include <OpenSG/OSGConfig.h>

#include "OSGWindowEventProducerBase.h"
#include "OSGWindowEventProducer.h"


OSG_BEGIN_NAMESPACE

const OSG::BitVector  WindowEventProducerBase::WindowFieldMask = 
    (TypeTraits<BitVector>::One << WindowEventProducerBase::WindowFieldId);

const OSG::BitVector  WindowEventProducerBase::EnabledFieldMask = 
    (TypeTraits<BitVector>::One << WindowEventProducerBase::EnabledFieldId);

const OSG::BitVector  WindowEventProducerBase::UseCallbackForDrawFieldMask = 
    (TypeTraits<BitVector>::One << WindowEventProducerBase::UseCallbackForDrawFieldId);

const OSG::BitVector  WindowEventProducerBase::UseCallbackForReshapeFieldMask = 
    (TypeTraits<BitVector>::One << WindowEventProducerBase::UseCallbackForReshapeFieldId);

const OSG::BitVector  WindowEventProducerBase::LastUpdateTimeFieldMask = 
    (TypeTraits<BitVector>::One << WindowEventProducerBase::LastUpdateTimeFieldId);

const OSG::BitVector  WindowEventProducerBase::IconFieldMask = 
    (TypeTraits<BitVector>::One << WindowEventProducerBase::IconFieldId);

const OSG::BitVector  WindowEventProducerBase::LockCursorFieldMask = 
    (TypeTraits<BitVector>::One << WindowEventProducerBase::LockCursorFieldId);

const OSG::BitVector  WindowEventProducerBase::EventProducerFieldMask =
    (TypeTraits<BitVector>::One << WindowEventProducerBase::EventProducerFieldId);

const OSG::BitVector WindowEventProducerBase::MTInfluenceMask = 
    (Inherited::MTInfluenceMask) | 
    (static_cast<BitVector>(0x0) << Inherited::NextFieldId); 


// Field descriptions

/*! \var WindowPtr       WindowEventProducerBase::_sfWindow
    
*/
/*! \var bool            WindowEventProducerBase::_sfEnabled
    
*/
/*! \var bool            WindowEventProducerBase::_sfUseCallbackForDraw
    
*/
/*! \var bool            WindowEventProducerBase::_sfUseCallbackForReshape
    
*/
/*! \var Time            WindowEventProducerBase::_sfLastUpdateTime
    
*/
/*! \var ImagePtr        WindowEventProducerBase::_sfIcon
    
*/
/*! \var bool            WindowEventProducerBase::_sfLockCursor
    
*/

//! WindowEventProducer description

FieldDescription *WindowEventProducerBase::_desc[] = 
{
    new FieldDescription(SFWindowPtr::getClassType(), 
                     "Window", 
                     WindowFieldId, WindowFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&WindowEventProducerBase::editSFWindow)),
    new FieldDescription(SFBool::getClassType(), 
                     "Enabled", 
                     EnabledFieldId, EnabledFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&WindowEventProducerBase::editSFEnabled)),
    new FieldDescription(SFBool::getClassType(), 
                     "UseCallbackForDraw", 
                     UseCallbackForDrawFieldId, UseCallbackForDrawFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&WindowEventProducerBase::editSFUseCallbackForDraw)),
    new FieldDescription(SFBool::getClassType(), 
                     "UseCallbackForReshape", 
                     UseCallbackForReshapeFieldId, UseCallbackForReshapeFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&WindowEventProducerBase::editSFUseCallbackForReshape)),
    new FieldDescription(SFTime::getClassType(), 
                     "LastUpdateTime", 
                     LastUpdateTimeFieldId, LastUpdateTimeFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&WindowEventProducerBase::editSFLastUpdateTime)),
    new FieldDescription(SFImagePtr::getClassType(), 
                     "Icon", 
                     IconFieldId, IconFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&WindowEventProducerBase::editSFIcon)),
    new FieldDescription(SFBool::getClassType(), 
                     "LockCursor", 
                     LockCursorFieldId, LockCursorFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&WindowEventProducerBase::editSFLockCursor))
    , 
    new FieldDescription(SFEventProducerPtr::getClassType(), 
                     "EventProducer", 
                     EventProducerFieldId,EventProducerFieldMask,
                     true,
                     reinterpret_cast<FieldAccessMethod>(&WindowEventProducerBase::editSFEventProducer))
};


FieldContainerType WindowEventProducerBase::_type(
    "WindowEventProducer",
    "AttachmentContainer",
    NULL,
    NULL, 
    WindowEventProducer::initMethod,
    _desc,
    sizeof(_desc));

//! WindowEventProducer Produced Methods

MethodDescription *WindowEventProducerBase::_methodDesc[] =
{
    new MethodDescription("WindowOpened", 
                     WindowOpenedMethodId, 
                     SFEventPtr::getClassType(),
                     FunctorAccessMethod()),
    new MethodDescription("WindowClosing", 
                     WindowClosingMethodId, 
                     SFEventPtr::getClassType(),
                     FunctorAccessMethod()),
    new MethodDescription("WindowClosed", 
                     WindowClosedMethodId, 
                     SFEventPtr::getClassType(),
                     FunctorAccessMethod()),
    new MethodDescription("WindowIconified", 
                     WindowIconifiedMethodId, 
                     SFEventPtr::getClassType(),
                     FunctorAccessMethod()),
    new MethodDescription("WindowDeiconified", 
                     WindowDeiconifiedMethodId, 
                     SFEventPtr::getClassType(),
                     FunctorAccessMethod()),
    new MethodDescription("WindowActivated", 
                     WindowActivatedMethodId, 
                     SFEventPtr::getClassType(),
                     FunctorAccessMethod()),
    new MethodDescription("WindowDeactivated", 
                     WindowDeactivatedMethodId, 
                     SFEventPtr::getClassType(),
                     FunctorAccessMethod()),
    new MethodDescription("WindowEntered", 
                     WindowEnteredMethodId, 
                     SFEventPtr::getClassType(),
                     FunctorAccessMethod()),
    new MethodDescription("WindowExited", 
                     WindowExitedMethodId, 
                     SFEventPtr::getClassType(),
                     FunctorAccessMethod()),
    new MethodDescription("MouseClicked", 
                     MouseClickedMethodId, 
                     SFEventPtr::getClassType(),
                     FunctorAccessMethod()),
    new MethodDescription("MouseEntered", 
                     MouseEnteredMethodId, 
                     SFEventPtr::getClassType(),
                     FunctorAccessMethod()),
    new MethodDescription("MouseExited", 
                     MouseExitedMethodId, 
                     SFEventPtr::getClassType(),
                     FunctorAccessMethod()),
    new MethodDescription("MousePressed", 
                     MousePressedMethodId, 
                     SFEventPtr::getClassType(),
                     FunctorAccessMethod()),
    new MethodDescription("MouseReleased", 
                     MouseReleasedMethodId, 
                     SFEventPtr::getClassType(),
                     FunctorAccessMethod()),
    new MethodDescription("MouseMoved", 
                     MouseMovedMethodId, 
                     SFEventPtr::getClassType(),
                     FunctorAccessMethod()),
    new MethodDescription("MouseDragged", 
                     MouseDraggedMethodId, 
                     SFEventPtr::getClassType(),
                     FunctorAccessMethod()),
    new MethodDescription("MouseWheelMoved", 
                     MouseWheelMovedMethodId, 
                     SFEventPtr::getClassType(),
                     FunctorAccessMethod()),
    new MethodDescription("KeyPressed", 
                     KeyPressedMethodId, 
                     SFEventPtr::getClassType(),
                     FunctorAccessMethod()),
    new MethodDescription("KeyReleased", 
                     KeyReleasedMethodId, 
                     SFEventPtr::getClassType(),
                     FunctorAccessMethod()),
    new MethodDescription("KeyTyped", 
                     KeyTypedMethodId, 
                     SFEventPtr::getClassType(),
                     FunctorAccessMethod()),
    new MethodDescription("Update", 
                     UpdateMethodId, 
                     SFEventPtr::getClassType(),
                     FunctorAccessMethod())
};

EventProducerType WindowEventProducerBase::_producerType(
    "WindowEventProducerProducerType",
    "EventProducerType",
    NULL,
    InitEventProducerFunctor(),
    _methodDesc,
    sizeof(_methodDesc));
//OSG_FIELD_CONTAINER_DEF(WindowEventProducerBase, WindowEventProducerPtr)

/*------------------------------ get -----------------------------------*/

FieldContainerType &WindowEventProducerBase::getType(void) 
{
    return _type; 
} 

const FieldContainerType &WindowEventProducerBase::getType(void) const 
{
    return _type;
} 

const EventProducerType &WindowEventProducerBase::getProducerType(void) const
{
    return _producerType;
}


UInt32 WindowEventProducerBase::getContainerSize(void) const 
{ 
    return sizeof(WindowEventProducer); 
}


#if !defined(OSG_FIXED_MFIELDSYNC)
void WindowEventProducerBase::executeSync(      FieldContainer &other,
                                    const BitVector      &whichField)
{
    this->executeSyncImpl(static_cast<WindowEventProducerBase *>(&other),
                          whichField);
}
#else
void WindowEventProducerBase::executeSync(      FieldContainer &other,
                                    const BitVector      &whichField,                                    const SyncInfo       &sInfo     )
{
    this->executeSyncImpl((WindowEventProducerBase *) &other, whichField, sInfo);
}
void WindowEventProducerBase::execBeginEdit(const BitVector &whichField, 
                                            UInt32     uiAspect,
                                            UInt32     uiContainerSize) 
{
    this->execBeginEditImpl(whichField, uiAspect, uiContainerSize);
}

void WindowEventProducerBase::onDestroyAspect(UInt32 uiId, UInt32 uiAspect)
{
    Inherited::onDestroyAspect(uiId, uiAspect);

}
#endif

/*------------------------- constructors ----------------------------------*/

#ifdef OSG_WIN32_ICL
#pragma warning (disable : 383)
#endif

WindowEventProducerBase::WindowEventProducerBase(void) :
    _Producer(&getProducerType()),
    _sfWindow                 (), 
    _sfEnabled                (), 
    _sfUseCallbackForDraw     (bool(false)), 
    _sfUseCallbackForReshape  (bool(false)), 
    _sfLastUpdateTime         (Time(-1.0)), 
    _sfIcon                   (ImagePtr(NullFC)), 
    _sfLockCursor             (bool(false)), 
    _sfEventProducer(&_Producer),
    Inherited() 
{
}

#ifdef OSG_WIN32_ICL
#pragma warning (default : 383)
#endif

WindowEventProducerBase::WindowEventProducerBase(const WindowEventProducerBase &source) :
    _Producer(&getProducerType()),
    _sfWindow                 (source._sfWindow                 ), 
    _sfEnabled                (source._sfEnabled                ), 
    _sfUseCallbackForDraw     (source._sfUseCallbackForDraw     ), 
    _sfUseCallbackForReshape  (source._sfUseCallbackForReshape  ), 
    _sfLastUpdateTime         (source._sfLastUpdateTime         ), 
    _sfIcon                   (source._sfIcon                   ), 
    _sfLockCursor             (source._sfLockCursor             ), 
    _sfEventProducer(&_Producer),
    Inherited                 (source)
{
}

/*-------------------------- destructors ----------------------------------*/

WindowEventProducerBase::~WindowEventProducerBase(void)
{
}

/*------------------------------ access -----------------------------------*/

UInt32 WindowEventProducerBase::getBinSize(const BitVector &whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (WindowFieldMask & whichField))
    {
        returnValue += _sfWindow.getBinSize();
    }

    if(FieldBits::NoField != (EnabledFieldMask & whichField))
    {
        returnValue += _sfEnabled.getBinSize();
    }

    if(FieldBits::NoField != (UseCallbackForDrawFieldMask & whichField))
    {
        returnValue += _sfUseCallbackForDraw.getBinSize();
    }

    if(FieldBits::NoField != (UseCallbackForReshapeFieldMask & whichField))
    {
        returnValue += _sfUseCallbackForReshape.getBinSize();
    }

    if(FieldBits::NoField != (LastUpdateTimeFieldMask & whichField))
    {
        returnValue += _sfLastUpdateTime.getBinSize();
    }

    if(FieldBits::NoField != (IconFieldMask & whichField))
    {
        returnValue += _sfIcon.getBinSize();
    }

    if(FieldBits::NoField != (LockCursorFieldMask & whichField))
    {
        returnValue += _sfLockCursor.getBinSize();
    }

    if(FieldBits::NoField != (EventProducerFieldMask & whichField))
    {
        returnValue += _sfEventProducer.getBinSize();
    }


    return returnValue;
}

void WindowEventProducerBase::copyToBin(      BinaryDataHandler &pMem,
                                  const BitVector         &whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (WindowFieldMask & whichField))
    {
        _sfWindow.copyToBin(pMem);
    }

    if(FieldBits::NoField != (EnabledFieldMask & whichField))
    {
        _sfEnabled.copyToBin(pMem);
    }

    if(FieldBits::NoField != (UseCallbackForDrawFieldMask & whichField))
    {
        _sfUseCallbackForDraw.copyToBin(pMem);
    }

    if(FieldBits::NoField != (UseCallbackForReshapeFieldMask & whichField))
    {
        _sfUseCallbackForReshape.copyToBin(pMem);
    }

    if(FieldBits::NoField != (LastUpdateTimeFieldMask & whichField))
    {
        _sfLastUpdateTime.copyToBin(pMem);
    }

    if(FieldBits::NoField != (IconFieldMask & whichField))
    {
        _sfIcon.copyToBin(pMem);
    }

    if(FieldBits::NoField != (LockCursorFieldMask & whichField))
    {
        _sfLockCursor.copyToBin(pMem);
    }

    if(FieldBits::NoField != (EventProducerFieldMask & whichField))
    {
        _sfEventProducer.copyToBin(pMem);
    }


}

void WindowEventProducerBase::copyFromBin(      BinaryDataHandler &pMem,
                                    const BitVector    &whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (WindowFieldMask & whichField))
    {
        _sfWindow.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (EnabledFieldMask & whichField))
    {
        _sfEnabled.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (UseCallbackForDrawFieldMask & whichField))
    {
        _sfUseCallbackForDraw.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (UseCallbackForReshapeFieldMask & whichField))
    {
        _sfUseCallbackForReshape.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (LastUpdateTimeFieldMask & whichField))
    {
        _sfLastUpdateTime.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (IconFieldMask & whichField))
    {
        _sfIcon.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (LockCursorFieldMask & whichField))
    {
        _sfLockCursor.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (EventProducerFieldMask & whichField))
    {
        _sfEventProducer.copyFromBin(pMem);
    }


}

#if !defined(OSG_FIXED_MFIELDSYNC)
void WindowEventProducerBase::executeSyncImpl(      WindowEventProducerBase *pOther,
                                        const BitVector         &whichField)
{

    Inherited::executeSyncImpl(pOther, whichField);

    if(FieldBits::NoField != (WindowFieldMask & whichField))
        _sfWindow.syncWith(pOther->_sfWindow);

    if(FieldBits::NoField != (EnabledFieldMask & whichField))
        _sfEnabled.syncWith(pOther->_sfEnabled);

    if(FieldBits::NoField != (UseCallbackForDrawFieldMask & whichField))
        _sfUseCallbackForDraw.syncWith(pOther->_sfUseCallbackForDraw);

    if(FieldBits::NoField != (UseCallbackForReshapeFieldMask & whichField))
        _sfUseCallbackForReshape.syncWith(pOther->_sfUseCallbackForReshape);

    if(FieldBits::NoField != (LastUpdateTimeFieldMask & whichField))
        _sfLastUpdateTime.syncWith(pOther->_sfLastUpdateTime);

    if(FieldBits::NoField != (IconFieldMask & whichField))
        _sfIcon.syncWith(pOther->_sfIcon);

    if(FieldBits::NoField != (LockCursorFieldMask & whichField))
        _sfLockCursor.syncWith(pOther->_sfLockCursor);

    if(FieldBits::NoField != (EventProducerFieldMask & whichField))
        _sfEventProducer.syncWith(pOther->_sfEventProducer);


}
#else
void WindowEventProducerBase::executeSyncImpl(      WindowEventProducerBase *pOther,
                                        const BitVector         &whichField,
                                        const SyncInfo          &sInfo      )
{

    Inherited::executeSyncImpl(pOther, whichField, sInfo);

    if(FieldBits::NoField != (WindowFieldMask & whichField))
        _sfWindow.syncWith(pOther->_sfWindow);

    if(FieldBits::NoField != (EnabledFieldMask & whichField))
        _sfEnabled.syncWith(pOther->_sfEnabled);

    if(FieldBits::NoField != (UseCallbackForDrawFieldMask & whichField))
        _sfUseCallbackForDraw.syncWith(pOther->_sfUseCallbackForDraw);

    if(FieldBits::NoField != (UseCallbackForReshapeFieldMask & whichField))
        _sfUseCallbackForReshape.syncWith(pOther->_sfUseCallbackForReshape);

    if(FieldBits::NoField != (LastUpdateTimeFieldMask & whichField))
        _sfLastUpdateTime.syncWith(pOther->_sfLastUpdateTime);

    if(FieldBits::NoField != (IconFieldMask & whichField))
        _sfIcon.syncWith(pOther->_sfIcon);

    if(FieldBits::NoField != (LockCursorFieldMask & whichField))
        _sfLockCursor.syncWith(pOther->_sfLockCursor);



}

void WindowEventProducerBase::execBeginEditImpl (const BitVector &whichField, 
                                                 UInt32     uiAspect,
                                                 UInt32     uiContainerSize)
{
    Inherited::execBeginEditImpl(whichField, uiAspect, uiContainerSize);

}
#endif



OSG_END_NAMESPACE

#include <OpenSG/OSGSFieldTypeDef.inl>
#include <OpenSG/OSGMFieldTypeDef.inl>

OSG_BEGIN_NAMESPACE

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldDataTraits<WindowEventProducerPtr>::_type("WindowEventProducerPtr", "AttachmentContainerPtr");
#endif

OSG_DLLEXPORT_SFIELD_DEF1(WindowEventProducerPtr, OSG_INPUTLIB_DLLTMPLMAPPING);
OSG_DLLEXPORT_MFIELD_DEF1(WindowEventProducerPtr, OSG_INPUTLIB_DLLTMPLMAPPING);


OSG_END_NAMESPACE

