/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGLUA


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif


/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.
  
  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/* 
   Flags/methods for returning states.
   
   The SWIG conversion methods, as ConvertPtr, return and integer 
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).
   
   Use the following macros/flags to set or process the returning
   states.
   
   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }
    
   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {         
        if (<obj is ok>) {			       
          if (<need new object>) {		       
            *ptr = <ptr to new allocated object>; 
            return SWIG_NEWOBJ;		       
          } else {				       
            *ptr = <ptr to old object>;	       
            return SWIG_OLDOBJ;		       
          } 				       
        } else {				       
          return SWIG_BADOBJ;		       
        }					       
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call
 
      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0) 
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)  

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) { 
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) { 
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0; 
}
#else /* no cast-rank mode */
#  define SWIG_AddCast
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/* 
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCompare(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}


/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/* 
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/* 
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/* 
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;
  
  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }    
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}
  
/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start, 
                            swig_module_info *end, 
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      register size_t l = 0;
      register size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	register size_t i = (l + r) >> 1; 
	const char *iname = iter->types[i]->name;
	if (iname) {
	  register int compare = strcmp(name, iname);
	  if (compare == 0) {	    
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start, 
                     swig_module_info *end, 
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      register size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }
  
  /* neither found a match */
  return 0;
}

/* 
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  register const unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    register unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/* 
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  register unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    register char d = *(c++);
    register unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    else 
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    else 
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/* 
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------
 * See the LICENSE file for information on copyright, usage and redistribution
 * of SWIG, and the README file for authors - http://www.swig.org/release.html.
 *
 * luarun.swg
 *
 * This file contains the runtime support for Lua modules
 * and includes code for managing global variables and pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

#include "lua.h"
#include "lauxlib.h"
#include <stdlib.h>  /* for malloc */
#include <assert.h>  /* for a few sanity tests */

/* -----------------------------------------------------------------------------
 * global swig types
 * ----------------------------------------------------------------------------- */
/* Constant table */
#define SWIG_LUA_INT     1
#define SWIG_LUA_FLOAT   2
#define SWIG_LUA_STRING  3
#define SWIG_LUA_POINTER 4
#define SWIG_LUA_BINARY  5
#define SWIG_LUA_CHAR    6

/* Structure for variable linking table */
typedef struct {
  const char *name;
  lua_CFunction get;
  lua_CFunction set;
} swig_lua_var_info;

/* Constant information structure */
typedef struct {
    int type;
    char *name;
    long lvalue;
    double dvalue;
    void   *pvalue;
    swig_type_info **ptype;
} swig_lua_const_info;

typedef struct {
  const char     *name;
  lua_CFunction   method;
} swig_lua_method;

typedef struct {
  const char     *name;
  lua_CFunction   getmethod;
  lua_CFunction   setmethod;
} swig_lua_attribute;

typedef struct swig_lua_class {
  const char    *name;
  swig_type_info   **type;
  lua_CFunction  constructor;
  void    (*destructor)(void *);
  swig_lua_method   *methods;
  swig_lua_attribute     *attributes;
  struct swig_lua_class **bases;
  const char **base_names;
} swig_lua_class;

/* this is the struct for wrappering all pointers in SwigLua
*/
typedef struct {
  swig_type_info   *type;
  int     own;  /* 1 if owned & must be destroyed */
  void        *ptr;
} swig_lua_userdata;

/* this is the struct for wrapping arbitary packed binary data
(currently it is only used for member function pointers)
the data ordering is similar to swig_lua_userdata, but it is currently not possible
to tell the two structures apart within Swig, other than by looking at the type
*/
typedef struct {
  swig_type_info   *type;
  int     own;  /* 1 if owned & must be destroyed */
  char data[1];       /* arbitary amount of data */    
} swig_lua_rawdata;

/* Common SWIG API */
#define SWIG_NewPointerObj(L, ptr, type, owner)       SWIG_Lua_NewPointerObj(L, (void *)ptr, type, owner)
#define SWIG_ConvertPtr(L,idx, ptr, type, flags)    SWIG_Lua_ConvertPtr(L,idx,ptr,type,flags)
#define SWIG_MustGetPtr(L,idx, type,flags, argnum,fnname)  SWIG_Lua_MustGetPtr(L,idx, type,flags, argnum,fnname)
/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(L, idx, ptr, sz, ty)       SWIG_Lua_ConvertPacked(L, idx, ptr, sz, ty)
#define SWIG_NewMemberObj(L, ptr, sz, type)      SWIG_Lua_NewPackedObj(L, ptr, sz, type)

/* Runtime API */
#define SWIG_GetModule(clientdata) SWIG_Lua_GetModule((lua_State*)(clientdata))
#define SWIG_SetModule(clientdata, pointer) SWIG_Lua_SetModule((lua_State*) (clientdata), pointer)
#define SWIG_MODULE_CLIENTDATA_TYPE lua_State*

/* Contract support */
#define SWIG_contract_assert(expr, msg)  \
  if (!(expr)) { lua_pushstring(L, (char *) msg); goto fail; } else

/* helper #defines */
#define SWIG_fail {goto fail;}
#define SWIG_fail_arg(func_name,argnum,type) \
  {lua_pushfstring(L,"Error in %s (arg %d), expected '%s' got '%s'",\
  func_name,argnum,type,SWIG_Lua_typename(L,argnum));\
  goto fail;}
#define SWIG_fail_ptr(func_name,argnum,type) \
  SWIG_fail_arg(func_name,argnum,(type && type->str)?type->str:"void*")
#define SWIG_check_num_args(func_name,a,b) \
  if (lua_gettop(L)<a || lua_gettop(L)>b) \
  {lua_pushfstring(L,"Error in %s expected %d..%d args, got %d",func_name,a,b,lua_gettop(L));\
  goto fail;}


#define SWIG_Lua_get_table(L,n) \
  (lua_pushstring(L, n), lua_rawget(L,-2))

#define SWIG_Lua_add_function(L,n,f) \
  (lua_pushstring(L, n), \
      lua_pushcfunction(L, f), \
      lua_rawset(L,-3))

/* special helper for allowing 'nil' for usertypes */
#define SWIG_isptrtype(L,I) (lua_isuserdata(L,I) || lua_isnil(L,I))

#ifdef __cplusplus
/* Special helper for member function pointers 
it gets the address, casts it, then dereferences it */
//#define SWIG_mem_fn_as_voidptr(a)  (*((char**)&(a)))
#endif

/* storing/access of swig_module_info */
SWIGRUNTIME swig_module_info *
SWIG_Lua_GetModule(lua_State* L) {
  swig_module_info *ret = 0;
  lua_pushstring(L,"swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
  lua_rawget(L,LUA_REGISTRYINDEX);
  if (lua_islightuserdata(L,-1))
    ret=(swig_module_info*)lua_touserdata(L,-1);
  lua_pop(L,1);  /* tidy */
  return ret;
}

SWIGRUNTIME void
SWIG_Lua_SetModule(lua_State* L, swig_module_info *module) {
  /* add this all into the Lua registry: */
  lua_pushstring(L,"swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
  lua_pushlightuserdata(L,(void*)module);
  lua_rawset(L,LUA_REGISTRYINDEX);
}

/* -----------------------------------------------------------------------------
 * global variable support code: modules
 * ----------------------------------------------------------------------------- */

/* this function is called when trying to set an immutable.
default value is to print an error.
This can removed with a compile flag SWIGLUA_IGNORE_SET_IMMUTABLE */
SWIGINTERN int SWIG_Lua_set_immutable(lua_State* L)
{
/*  there should be 1 param passed in: the new value */
#ifndef SWIGLUA_IGNORE_SET_IMMUTABLE
  lua_pop(L,1);  /* remove it */
  lua_pushstring(L,"This variable is immutable");
  lua_error(L);
#endif
    return 0;   /* should not return anything */
}

/* the module.get method used for getting linked data */
SWIGINTERN int SWIG_Lua_module_get(lua_State* L)
{
/*  there should be 2 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  printf("SWIG_Lua_module_get %p(%s) '%s'\n",
   lua_topointer(L,1),lua_typename(L,lua_type(L,1)),
   lua_tostring(L,2));
*/
  /* get the metatable */
  assert(lua_istable(L,1));  /* just in case */
  lua_getmetatable(L,1);  /* get the metatable */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get");  /* get the .get table */
  lua_remove(L,3);  /* remove metatable */
  if (lua_istable(L,-1))
  {
    /* look for the key in the .get table */
    lua_pushvalue(L,2);  /* key */
    lua_rawget(L,-2);
    lua_remove(L,3);  /* remove .get */
    if (lua_iscfunction(L,-1))
    {  /* found it so call the fn & return its value */
      lua_call(L,0,1);
      return 1;
    }
    lua_pop(L,1);  /* remove the top */
  }
  lua_pop(L,1);  /* remove the .get */
  lua_pushnil(L);  /* return a nil */
    return 1;
}

/* the module.set method used for setting linked data */
SWIGINTERN int SWIG_Lua_module_set(lua_State* L)
{
/*  there should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
*/
  /* get the metatable */
  assert(lua_istable(L,1));  /* just in case */
  lua_getmetatable(L,1);  /* get the metatable */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".set");  /* get the .set table */
  lua_remove(L,4);  /* remove metatable */
  if (lua_istable(L,-1))
  {
    /* look for the key in the .set table */
    lua_pushvalue(L,2);  /* key */
    lua_rawget(L,-2);
    lua_remove(L,4);  /* remove .set */
    if (lua_iscfunction(L,-1))
    {  /* found it so call the fn & return its value */
      lua_pushvalue(L,3);  /* value */
      lua_call(L,1,0);
      return 0;
    }
  }
  lua_settop(L,3);  /* reset back to start */
  /* we now have the table, key & new value, so just set directly */
  lua_rawset(L,1);  /* add direct */
  return 0;
}

/* registering a module in lua */
SWIGINTERN void  SWIG_Lua_module_begin(lua_State* L,const char* name)
{
  assert(lua_istable(L,-1));  /* just in case */
  lua_pushstring(L,name);
  lua_newtable(L);   /* the table */
  /* add meta table */
  lua_newtable(L);    /* the meta table */
  SWIG_Lua_add_function(L,"__index",SWIG_Lua_module_get);
  SWIG_Lua_add_function(L,"__newindex",SWIG_Lua_module_set);
  lua_pushstring(L,".get");
  lua_newtable(L);    /* the .get table */
  lua_rawset(L,-3);  /* add .get into metatable */
  lua_pushstring(L,".set");
  lua_newtable(L);    /* the .set table */
  lua_rawset(L,-3);  /* add .set into metatable */
  lua_setmetatable(L,-2);  /* sets meta table in module */
  lua_rawset(L,-3);        /* add module into parent */
  SWIG_Lua_get_table(L,name);   /* get the table back out */
}

/* ending the register */
SWIGINTERN void  SWIG_Lua_module_end(lua_State* L)
{
  lua_pop(L,1);       /* tidy stack (remove module) */
}

/* adding a linked variable to the module */
SWIGINTERN void SWIG_Lua_module_add_variable(lua_State* L,const char* name,lua_CFunction getFn,lua_CFunction setFn)
{
  assert(lua_istable(L,-1));  /* just in case */
  lua_getmetatable(L,-1);  /* get the metatable */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));  /* should be a table: */
  SWIG_Lua_add_function(L,name,getFn);
  lua_pop(L,1);       /* tidy stack (remove table) */
  if (setFn)  /* if there is a set fn */
  {
    SWIG_Lua_get_table(L,".set"); /* find the .set table */
    assert(lua_istable(L,-1));  /* should be a table: */
    SWIG_Lua_add_function(L,name,setFn);
    lua_pop(L,1);       /* tidy stack (remove table) */
  }
  lua_pop(L,1);       /* tidy stack (remove meta) */
}

/* adding a function module */
SWIGINTERN void  SWIG_Lua_module_add_function(lua_State* L,const char* name,lua_CFunction fn)
{
  SWIG_Lua_add_function(L,name,fn);
}

/* -----------------------------------------------------------------------------
 * global variable support code: classes
 * ----------------------------------------------------------------------------- */

/* the class.get method, performs the lookup of class attributes */
SWIGINTERN int  SWIG_Lua_class_get(lua_State* L)
{
/*  there should be 2 params passed in
  (1) userdata (not the meta table)
  (2) string name of the attribute
*/
  assert(lua_isuserdata(L,-2));  /* just in case */
  lua_getmetatable(L,-2);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  /* look for the key in the .get table */
  lua_pushvalue(L,2);  /* key */
  lua_rawget(L,-2);
  lua_remove(L,-2); /* stack tidy, remove .get table */
  if (lua_iscfunction(L,-1))
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,1);  /* the userdata */
    lua_call(L,1,1);  /* 1 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* ok, so try the .fn table */
  SWIG_Lua_get_table(L,".fn"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  lua_pushvalue(L,2);  /* key */
  lua_rawget(L,-2);  /* look for the fn */
  lua_remove(L,-2); /* stack tidy, remove .fn table */
  if (lua_isfunction(L,-1)) /* note: if its a C function or lua function */
  {  /* found it so return the fn & let lua call it */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* NEW: looks for the __getitem() fn
  this is a user provided get fn */
  SWIG_Lua_get_table(L,"__getitem"); /* find the __getitem fn */
  if (lua_iscfunction(L,-1))  /* if its there */
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,1);  /* the userdata */
    lua_pushvalue(L,2);  /* the parameter */
    lua_call(L,2,1);  /* 2 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  return 0;  /* sorry not known */
}

/* the class.set method, performs the lookup of class attributes */
SWIGINTERN int  SWIG_Lua_class_set(lua_State* L)
{
/*  there should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
printf("SWIG_Lua_class_set %p(%s) '%s' %p(%s)\n",
      lua_topointer(L,1),lua_typename(L,lua_type(L,1)),
      lua_tostring(L,2),
      lua_topointer(L,3),lua_typename(L,lua_type(L,3)));*/

  assert(lua_isuserdata(L,1));  /* just in case */
  lua_getmetatable(L,1);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */

  SWIG_Lua_get_table(L,".set"); /* find the .set table */
  if (lua_istable(L,-1))
  {
    /* look for the key in the .set table */
    lua_pushvalue(L,2);  /* key */
    lua_rawget(L,-2);
    if (lua_iscfunction(L,-1))
    {  /* found it so call the fn & return its value */
      lua_pushvalue(L,1);  /* userdata */
      lua_pushvalue(L,3);  /* value */
      lua_call(L,2,0);
      return 0;
    }
    lua_pop(L,1);  /* remove the value */
  }
  lua_pop(L,1);  /* remove the value .set table */
  /* NEW: looks for the __setitem() fn
  this is a user provided set fn */
  SWIG_Lua_get_table(L,"__setitem"); /* find the fn */
  if (lua_iscfunction(L,-1))  /* if its there */
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,1);  /* the userdata */
    lua_pushvalue(L,2);  /* the parameter */
    lua_pushvalue(L,3);  /* the value */
    lua_call(L,3,0);  /* 3 values in ,0 out */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  return 0;
}

/* the class.destruct method called by the interpreter */
SWIGINTERN int  SWIG_Lua_class_destruct(lua_State* L)
{
/*  there should be 1 params passed in
  (1) userdata (not the meta table) */
  swig_lua_userdata* usr;
  swig_lua_class* clss;
  assert(lua_isuserdata(L,-1));  /* just in case */
  usr=(swig_lua_userdata*)lua_touserdata(L,-1);  /* get it */
  /* if must be destroyed & has a destructor */
  if (usr->own) /* if must be destroyed */
  {
    clss=(swig_lua_class*)usr->type->clientdata;  /* get the class */
    if (clss && clss->destructor)  /* there is a destroy fn */
    {
      clss->destructor(usr->ptr);  /* bye bye */
    }
  }
  return 0;
}

/* gets the swig class registry (or creates it) */
SWIGINTERN void  SWIG_Lua_get_class_registry(lua_State* L)
{
  /* add this all into the swig registry: */
  lua_pushstring(L,"SWIG");
  lua_rawget(L,LUA_REGISTRYINDEX);  /* get the registry */
  if (!lua_istable(L,-1))  /* not there */
  {  /* must be first time, so add it */
    lua_pop(L,1);  /* remove the result */
    lua_pushstring(L,"SWIG");
    lua_newtable(L);
    lua_rawset(L,LUA_REGISTRYINDEX);
    /* then get it */
    lua_pushstring(L,"SWIG");
    lua_rawget(L,LUA_REGISTRYINDEX);
  }
}

/* helper fn to get the classes metatable from the register */
SWIGINTERN void  SWIG_Lua_get_class_metatable(lua_State* L,const char* cname)
{
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,cname);  /* get the name */
  lua_rawget(L,-2);    /* get it */
  lua_remove(L,-2);    /* tidy up (remove registry) */
}

/* helper add a variable to a registered class */
SWIGINTERN void  SWIG_Lua_add_class_variable(lua_State* L,const char* name,lua_CFunction getFn,lua_CFunction setFn)
{
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_add_function(L,name,getFn);
  lua_pop(L,1);       /* tidy stack (remove table) */
  if (setFn)
  {
    SWIG_Lua_get_table(L,".set"); /* find the .set table */
    assert(lua_istable(L,-1));  /* just in case */
    SWIG_Lua_add_function(L,name,setFn);
    lua_pop(L,1);       /* tidy stack (remove table) */
  }
}

/* helper to recursively add class details (attributes & operations) */
SWIGINTERN void  SWIG_Lua_add_class_details(lua_State* L,swig_lua_class* clss)
{
  int i;
  /* call all the base classes first: we can then override these later: */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_add_class_details(L,clss->bases[i]);
  }
  /* add fns */
  for(i=0;clss->attributes[i].name;i++){
    SWIG_Lua_add_class_variable(L,clss->attributes[i].name,clss->attributes[i].getmethod,clss->attributes[i].setmethod);
  }
  /* add methods to the metatable */
  SWIG_Lua_get_table(L,".fn"); /* find the .fn table */
  assert(lua_istable(L,-1));  /* just in case */
  for(i=0;clss->methods[i].name;i++){
    SWIG_Lua_add_function(L,clss->methods[i].name,clss->methods[i].method);
  }
  lua_pop(L,1);       /* tidy stack (remove table) */
  /*   add operator overloads
    these look ANY method which start with "__" and assume they
    are operator overloads & add them to the metatable
    (this might mess up is someone defines a method __gc (the destructor)*/
  for(i=0;clss->methods[i].name;i++){
    if (clss->methods[i].name[0]=='_' && clss->methods[i].name[1]=='_'){
      SWIG_Lua_add_function(L,clss->methods[i].name,clss->methods[i].method);
    }
  }
}

/* set up the base classes pointers.
Each class structure has a list of pointers to the base class structures.
This function fills them.
It cannot be done at compile time, as this will not work with hireachies
spread over more than one swig file. 
Therefore it must be done at runtime, querying the SWIG type system.
*/
SWIGINTERN void SWIG_Lua_init_base_class(lua_State* L,swig_lua_class* clss)
{
  int i=0;
  swig_module_info* module=SWIG_GetModule(L);
  for(i=0;clss->base_names[i];i++)
  {
    if (clss->bases[i]==0) /* not found yet */
    {
      /* lookup and cache the base class */
      swig_type_info *info = SWIG_TypeQueryModule(module,module,clss->base_names[i]);
      if (info) clss->bases[i] = (swig_lua_class *) info->clientdata;
    }
  }	
}

/* performs the entire class registration process */
SWIGINTERN void  SWIG_Lua_class_register(lua_State* L,swig_lua_class* clss)
{
  /*  add its constructor to module with the name of the class
  so you can do MyClass(...) as well as new_MyClass(...)
  BUT only if a constructor is defined
  (this overcomes the problem of pure virtual classes without constructors)*/
  if (clss->constructor)
    SWIG_Lua_add_function(L,clss->name,clss->constructor);

  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->name);  /* get the name */
  lua_newtable(L);    /* create the metatable */
  /* add string of class name called ".type" */
  lua_pushstring(L,".type");
  lua_pushstring(L,clss->name);
  lua_rawset(L,-3);
  /* add a table called ".get" */
  lua_pushstring(L,".get");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".set" */
  lua_pushstring(L,".set");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".fn" */
  lua_pushstring(L,".fn");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add accessor fns for using the .get,.set&.fn */
  SWIG_Lua_add_function(L,"__index",SWIG_Lua_class_get);
  SWIG_Lua_add_function(L,"__newindex",SWIG_Lua_class_set);
  SWIG_Lua_add_function(L,"__gc",SWIG_Lua_class_destruct);
  /* add it */
  lua_rawset(L,-3);  /* metatable into registry */
  lua_pop(L,1);      /* tidy stack (remove registry) */

  SWIG_Lua_get_class_metatable(L,clss->name);
  SWIG_Lua_add_class_details(L,clss);  /* recursive adding of details (atts & ops) */
  lua_pop(L,1);      /* tidy stack (remove class metatable) */
}

/* -----------------------------------------------------------------------------
 * Class/structure conversion fns
 * ----------------------------------------------------------------------------- */

/* helper to add metatable to new lua object */
SWIGINTERN void _SWIG_Lua_AddMetatable(lua_State* L,swig_type_info *type)
{
  if (type->clientdata)  /* there is clientdata: so add the metatable */
  {
    SWIG_Lua_get_class_metatable(L,((swig_lua_class*)(type->clientdata))->name);
    if (lua_istable(L,-1))
    {
      lua_setmetatable(L,-2);
    }
    else
    {
      lua_pop(L,1);
    }
  }
}

/* pushes a new object into the lua stack */
SWIGRUNTIME void SWIG_Lua_NewPointerObj(lua_State* L,void* ptr,swig_type_info *type, int own)
{
  swig_lua_userdata* usr;
  if (!ptr){
    lua_pushnil(L);
    return;
  }
  usr=(swig_lua_userdata*)lua_newuserdata(L,sizeof(swig_lua_userdata));  /* get data */
  usr->ptr=ptr;  /* set the ptr */
  usr->type=type;
  usr->own=own;
  _SWIG_Lua_AddMetatable(L,type); /* add metatable */
}

/* takes a object from the lua stack & converts it into an object of the correct type
 (if possible) */
SWIGRUNTIME int  SWIG_Lua_ConvertPtr(lua_State* L,int index,void** ptr,swig_type_info *type,int flags)
{
  swig_lua_userdata* usr;
  swig_cast_info *cast;
  if (lua_isnil(L,index)){*ptr=0; return SWIG_OK;}    /* special case: lua nil => NULL pointer */
  usr=(swig_lua_userdata*)lua_touserdata(L,index);  /* get data */
  if (usr)
  {
    if (flags & SWIG_POINTER_DISOWN) /* must disown the object */
    {
        usr->own=0;
    }
    if (!type)            /* special cast void*, no casting fn */
    {
      *ptr=usr->ptr;
      return SWIG_OK; /* ok */
    }
    cast=SWIG_TypeCheckStruct(usr->type,type); /* performs normal type checking */
    if (cast)
    {
      int newmemory = 0;
      *ptr=SWIG_TypeCast(cast,usr->ptr,&newmemory);
      assert(!newmemory); /* newmemory handling not yet implemented */
      return SWIG_OK;  /* ok */
    }
  }
  return SWIG_ERROR;  /* error */
}

SWIGRUNTIME void* SWIG_Lua_MustGetPtr(lua_State* L,int index,swig_type_info *type,int flags,
       int argnum,const char* func_name){
  void* result;
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,index,&result,type,flags))){
    lua_pushfstring(L,"Error in %s, expected a %s at argument number %d\n",
      func_name,(type && type->str)?type->str:"void*",argnum);
    lua_error(L);
  }
  return result;
}

/* pushes a packed userdata. user for member fn pointers only */
SWIGRUNTIME void SWIG_Lua_NewPackedObj(lua_State* L,void* ptr,size_t size,swig_type_info *type)
{
  swig_lua_rawdata* raw;
  assert(ptr); /* not acceptable to pass in a NULL value */
  raw=(swig_lua_rawdata*)lua_newuserdata(L,sizeof(swig_lua_rawdata)-1+size);  /* alloc data */
  raw->type=type;
  raw->own=0;
  memcpy(raw->data,ptr,size); /* copy the data */
  _SWIG_Lua_AddMetatable(L,type); /* add metatable */
}
    
/* converts a packed userdata. user for member fn pointers only */
SWIGRUNTIME int  SWIG_Lua_ConvertPacked(lua_State* L,int index,void* ptr,size_t size,swig_type_info *type)
{
  swig_lua_rawdata* raw;
  raw=(swig_lua_rawdata*)lua_touserdata(L,index);  /* get data */
  if (!raw) return SWIG_ERROR;  /* error */
  if (type==0 || type==raw->type) /* void* or identical type */
  {
    memcpy(ptr,raw->data,size); /* copy it */
    return SWIG_OK; /* ok */
  }
  return SWIG_ERROR;  /* error */
}

/* a function to get the typestring of a piece of data */
SWIGRUNTIME const char *SWIG_Lua_typename(lua_State *L, int tp)
{
  swig_lua_userdata* usr;
  if (lua_isuserdata(L,tp))
  {
    usr=(swig_lua_userdata*)lua_touserdata(L,1);  /* get data */
    if (usr && usr->type && usr->type->str)
      return usr->type->str;
    return "userdata (unknown type)";
  }
  return lua_typename(L,lua_type(L,tp));
}

/* lua callable function to get the userdata's type */
SWIGRUNTIME int SWIG_Lua_type(lua_State* L)
{
  lua_pushstring(L,SWIG_Lua_typename(L,1));
  return 1;
}

/* lua callable function to compare userdata's value
the issue is that two userdata may point to the same thing
but to lua, they are different objects */
SWIGRUNTIME int SWIG_Lua_equal(lua_State* L)
{
  int result;
  swig_lua_userdata *usr1,*usr2;
  if (!lua_isuserdata(L,1) || !lua_isuserdata(L,2))  /* just in case */
    return 0;  /* nil reply */
  usr1=(swig_lua_userdata*)lua_touserdata(L,1);  /* get data */
  usr2=(swig_lua_userdata*)lua_touserdata(L,2);  /* get data */
  /*result=(usr1->ptr==usr2->ptr && usr1->type==usr2->type); only works if type is the same*/
  result=(usr1->ptr==usr2->ptr);
   lua_pushboolean(L,result);
  return 1;
}

/* -----------------------------------------------------------------------------
 * global variable support code: class/struct typemap functions
 * ----------------------------------------------------------------------------- */

/* Install Constants */
SWIGINTERN void
SWIG_Lua_InstallConstants(lua_State* L, swig_lua_const_info constants[]) {
  int i;
  for (i = 0; constants[i].type; i++) {
    switch(constants[i].type) {
    case SWIG_LUA_INT:
      lua_pushstring(L,constants[i].name);
      lua_pushnumber(L,(lua_Number)constants[i].lvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_FLOAT:
      lua_pushstring(L,constants[i].name);
      lua_pushnumber(L,(lua_Number)constants[i].dvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_CHAR:
      lua_pushstring(L,constants[i].name);
      lua_pushfstring(L,"%c",(char)constants[i].lvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_STRING:
      lua_pushstring(L,constants[i].name);
      lua_pushstring(L,(char *) constants[i].pvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_POINTER:
      lua_pushstring(L,constants[i].name);
      SWIG_NewPointerObj(L,constants[i].pvalue, *(constants[i]).ptype,0);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_BINARY:
      lua_pushstring(L,constants[i].name);
      SWIG_NewMemberObj(L,constants[i].pvalue,constants[i].lvalue,*(constants[i]).ptype);
      lua_rawset(L,-3);
      break;
    default:
      break;
    }
  }
}

/* -----------------------------------------------------------------------------
 * executing lua code from within the wrapper
 * ----------------------------------------------------------------------------- */

#ifndef SWIG_DOSTRING_FAIL /* Allows redefining of error function */
#define SWIG_DOSTRING_FAIL(S) fprintf(stderr,"%s\n",S)
#endif
/* Executes a C string in Lua a really simple way of calling lua from C
Unfortunately lua keeps changing its API's, so we need a conditional compile
In lua 5.0.X its lua_dostring()
In lua 5.1.X its luaL_dostring()
*/
SWIGINTERN int 
SWIG_Lua_dostring(lua_State *L, const char* str) {
  int ok,top;
  if (str==0 || str[0]==0) return 0; /* nothing to do */
  top=lua_gettop(L); /* save stack */
#if (defined(LUA_VERSION_NUM) && (LUA_VERSION_NUM>=501))
  ok=luaL_dostring(L,str);	/* looks like this is lua 5.1.X or later, good */
#else
  ok=lua_dostring(L,str);	/* might be lua 5.0.x, using lua_dostring */
#endif
  if (ok!=0) {
    SWIG_DOSTRING_FAIL(lua_tostring(L,-1));
  }
  lua_settop(L,top); /* restore the stack */
  return ok;
}    

#ifdef __cplusplus
}
#endif

/* ------------------------------ end luarun.swg  ------------------------------ */

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1 
#define  SWIG_IOError        	   -2 
#define  SWIG_RuntimeError   	   -3 
#define  SWIG_IndexError     	   -4 
#define  SWIG_TypeError      	   -5 
#define  SWIG_DivisionByZero 	   -6 
#define  SWIG_OverflowError  	   -7 
#define  SWIG_SyntaxError    	   -8 
#define  SWIG_ValueError     	   -9 
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12 
#define  SWIG_NullReferenceError   -13




/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_Inherited swig_types[0]
#define SWIGTYPE_p_MatrixType swig_types[1]
#define SWIGTYPE_p_ObjectType swig_types[2]
#define SWIGTYPE_p_PointType swig_types[3]
#define SWIGTYPE_p_PointType3f swig_types[4]
#define SWIGTYPE_p_QuaternionType swig_types[5]
#define SWIGTYPE_p_StoredObjectType swig_types[6]
#define SWIGTYPE_p_ValueType swig_types[7]
#define SWIGTYPE_p_VectorType swig_types[8]
#define SWIGTYPE_p_VectorType3f swig_types[9]
#define SWIGTYPE_p_char swig_types[10]
#define SWIGTYPE_p_difference_type swig_types[11]
#define SWIGTYPE_p_double swig_types[12]
#define SWIGTYPE_p_float swig_types[13]
#define SWIGTYPE_p_int swig_types[14]
#define SWIGTYPE_p_key_type swig_types[15]
#define SWIGTYPE_p_long swig_types[16]
#define SWIGTYPE_p_long_double swig_types[17]
#define SWIGTYPE_p_mapped_type swig_types[18]
#define SWIGTYPE_p_osg__Animation swig_types[19]
#define SWIGTYPE_p_osg__AnimationPtr swig_types[20]
#define SWIGTYPE_p_osg__Attachment swig_types[21]
#define SWIGTYPE_p_osg__AttachmentContainer swig_types[22]
#define SWIGTYPE_p_osg__AttachmentContainerPtr swig_types[23]
#define SWIGTYPE_p_osg__AttachmentPtr swig_types[24]
#define SWIGTYPE_p_osg__Camera swig_types[25]
#define SWIGTYPE_p_osg__CameraPtr swig_types[26]
#define SWIGTYPE_p_osg__Color4f swig_types[27]
#define SWIGTYPE_p_osg__Component swig_types[28]
#define SWIGTYPE_p_osg__ComponentPtr swig_types[29]
#define SWIGTYPE_p_osg__Field swig_types[30]
#define SWIGTYPE_p_osg__FieldContainer swig_types[31]
#define SWIGTYPE_p_osg__FieldContainerPtr swig_types[32]
#define SWIGTYPE_p_osg__FieldContainerType swig_types[33]
#define SWIGTYPE_p_osg__Geometry swig_types[34]
#define SWIGTYPE_p_osg__GeometryPtr swig_types[35]
#define SWIGTYPE_p_osg__Image swig_types[36]
#define SWIGTYPE_p_osg__ImagePtr swig_types[37]
#define SWIGTYPE_p_osg__KeyEvent swig_types[38]
#define SWIGTYPE_p_osg__Line swig_types[39]
#define SWIGTYPE_p_osg__Matrix swig_types[40]
#define SWIGTYPE_p_osg__Node swig_types[41]
#define SWIGTYPE_p_osg__NodeCore swig_types[42]
#define SWIGTYPE_p_osg__NodeCorePtr swig_types[43]
#define SWIGTYPE_p_osg__NodePtr swig_types[44]
#define SWIGTYPE_p_osg__ParticleSystem swig_types[45]
#define SWIGTYPE_p_osg__ParticleSystemPtr swig_types[46]
#define SWIGTYPE_p_osg__PhysicsBody swig_types[47]
#define SWIGTYPE_p_osg__PhysicsBodyPtr swig_types[48]
#define SWIGTYPE_p_osg__PhysicsHandler swig_types[49]
#define SWIGTYPE_p_osg__PhysicsHandlerPtr swig_types[50]
#define SWIGTYPE_p_osg__PhysicsWorld swig_types[51]
#define SWIGTYPE_p_osg__PhysicsWorldPtr swig_types[52]
#define SWIGTYPE_p_osg__Pnt2f swig_types[53]
#define SWIGTYPE_p_osg__Pnt3f swig_types[54]
#define SWIGTYPE_p_osg__Sound swig_types[55]
#define SWIGTYPE_p_osg__SoundManager swig_types[56]
#define SWIGTYPE_p_osg__SoundPtr swig_types[57]
#define SWIGTYPE_p_osg__Vec2f swig_types[58]
#define SWIGTYPE_p_osg__Vec3f swig_types[59]
#define SWIGTYPE_p_osg__Viewport swig_types[60]
#define SWIGTYPE_p_osg__ViewportPtr swig_types[61]
#define SWIGTYPE_p_osg__WindowEventProducer swig_types[62]
#define SWIGTYPE_p_osg__WindowEventProducerPtr swig_types[63]
#define SWIGTYPE_p_signed_char swig_types[64]
#define SWIGTYPE_p_size_type swig_types[65]
#define SWIGTYPE_p_std__mapT_std__string_unsigned_int_t swig_types[66]
#define SWIGTYPE_p_std__vectorT_unsigned_int_t swig_types[67]
#define SWIGTYPE_p_unsigned_char swig_types[68]
#define SWIGTYPE_p_unsigned_int swig_types[69]
#define SWIGTYPE_p_unsigned_long swig_types[70]
static swig_type_info *swig_types[72];
static swig_module_info swig_module = {swig_types, 71, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#define SWIG_name      "OSGToolbox"
#define SWIG_init      luaopen_OSGToolbox
#define SWIG_init_user luaopen_OSGToolbox_user

#define SWIG_LUACODE   luaopen_OSGToolbox_luacode


namespace swig {
typedef struct{} LANGUAGE_OBJ;
}


#include <stdexcept>


#define SWIG_exception(a,b)\
{ lua_pushfstring(L,"%s:%s",#a,b);SWIG_fail; }


#include <stdexcept>


#include <map>
#include <algorithm>
#include <stdexcept>


#include <vector>


#include <OpenSG/Input/OSGWindowEventProducer.h>
#include <OpenSG/Input/OSGKeyEvent.h>
#include <OpenSG/Sound/OSGSound.h>
#include <OpenSG/Sound/OSGSoundManager.h>
#include <OpenSG/Animation/OSGAnimation.h>
#include <OpenSG/UserInterface/OSGComponent.h>
#include <OpenSG/ParticleSystem/OSGParticleSystem.h>
#include <OpenSG/Physics/OSGPhysicsHandler.h>
#include <OpenSG/Physics/OSGPhysicsBody.h>
#include <OpenSG/Physics/OSGPhysicsWorld.h>


#include <OpenSG/OSGFieldContainerType.h>
#include <OpenSG/OSGFieldContainerPtr.h>
#include <OpenSG/OSGFieldDescription.h>
#include <OpenSG/OSGBaseTypes.h>
#include <OpenSG/OSGAttachment.h>
#include <OpenSG/OSGAttachmentContainer.h>
#include <OpenSG/OSGSimpleAttachments.h>
#include <OpenSG/OSGAttachmentContainerPtr.h>
#include <OpenSG/OSGSimpleGeometry.h>
#include <OpenSG/OSGGeoFunctions.h>
#include <OpenSG/OSGNode.h>
#include <OpenSG/OSGNodeCore.h>
#include <OpenSG/OSGGeometry.h>
#include <OpenSG/OSGViewport.h>
#include <OpenSG/OSGCamera.h>
#include <OpenSG/OSGImage.h>
#include <OpenSG/OSGSysFieldDataType.h>
#include <OpenSG/OSGVecFieldDataType.h>
#include <OpenSG/OSGMathFieldDataType.h>
#include <OpenSG/OSGSFVecTypes.h>
#include <OpenSG/OSGSFMathTypes.h>
#include <OpenSG/OSGSFSysTypes.h>
#include <OpenSG/OSGMFVecTypes.h>
#include <OpenSG/OSGMFMathTypes.h>
#include <OpenSG/OSGMFSysTypes.h>
#include <OpenSG/OSGMFBaseTypes.h>
#include <OpenSG/OSGFieldContainerFields.h>
#include <OpenSG/Toolbox/OSGFieldContainerUtils.h>
#include <OpenSG/Toolbox/OSGActivity.h>
#include <OpenSG/Toolbox/OSGEventProducerType.h>
        

SWIGINTERN unsigned int std_vector_Sl_osg_UInt32_Sg____getitem__(std::vector< osg::UInt32 > *self,unsigned int idx){
				if (idx>=self->size())
					throw std::out_of_range("in vector::__getitem__()");
				return (*self)[idx];
			}
SWIGINTERN void std_vector_Sl_osg_UInt32_Sg____setitem__(std::vector< osg::UInt32 > *self,unsigned int idx,unsigned int val){
				if (idx>=self->size())
					throw std::out_of_range("in vector::__setitem__()");
				(*self)[idx]=val;
			}
SWIGINTERN unsigned int const &std_map_Sl_std_string_Sc_osg_UInt32_Sg__get(std::map< std::string,osg::UInt32 > *self,std::string const &key){
                std::map<std::string,unsigned int >::iterator i = self->find(key);
                if (i != self->end())
                    return i->second;
                else
                    throw std::out_of_range("key not found");
            }
SWIGINTERN void std_map_Sl_std_string_Sc_osg_UInt32_Sg__set(std::map< std::string,osg::UInt32 > *self,std::string const &key,unsigned int const &x){
                (*self)[key] = x;
            }
SWIGINTERN void std_map_Sl_std_string_Sc_osg_UInt32_Sg__del(std::map< std::string,osg::UInt32 > *self,std::string const &key){
                std::map<std::string,unsigned int >::iterator i = self->find(key);
                if (i != self->end())
                    self->erase(i);
                else
                    throw std::out_of_range("key not found");
            }
SWIGINTERN bool std_map_Sl_std_string_Sc_osg_UInt32_Sg__has_key(std::map< std::string,osg::UInt32 > *self,std::string const &key){
                std::map<std::string,unsigned int >::iterator i = self->find(key);
                return i != self->end();
            }
#ifdef __cplusplus
extern "C" {
#endif
static int _wrap_new_UInt32Vec__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< osg::UInt32 > *result = 0 ;
  
  SWIG_check_num_args("std::vector<(osg::UInt32)>",0,0)
  result = (std::vector< osg::UInt32 > *)new std::vector< osg::UInt32 >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_unsigned_int_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_UInt32Vec__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  std::vector< osg::UInt32 > *result = 0 ;
  
  SWIG_check_num_args("std::vector<(osg::UInt32)>",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector<(osg::UInt32)>",1,"unsigned int");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (unsigned int)lua_tonumber(L, 1);
  result = (std::vector< osg::UInt32 > *)new std::vector< osg::UInt32 >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_unsigned_int_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_UInt32Vec__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< osg::UInt32 > *arg1 = 0 ;
  std::vector< osg::UInt32 > *result = 0 ;
  
  SWIG_check_num_args("std::vector<(osg::UInt32)>",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::vector<(osg::UInt32)>",1,"std::vector< osg::UInt32 > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_int_t,0))){
    SWIG_fail_ptr("new_UInt32Vec",1,SWIGTYPE_p_std__vectorT_unsigned_int_t);
  }
  
  result = (std::vector< osg::UInt32 > *)new std::vector< osg::UInt32 >((std::vector< osg::UInt32 > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_unsigned_int_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_UInt32Vec__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  unsigned int arg2 ;
  std::vector< osg::UInt32 > *result = 0 ;
  
  SWIG_check_num_args("std::vector<(osg::UInt32)>",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector<(osg::UInt32)>",1,"unsigned int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector<(osg::UInt32)>",2,"unsigned int");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (unsigned int)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (std::vector< osg::UInt32 > *)new std::vector< osg::UInt32 >(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_unsigned_int_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_UInt32Vec(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_UInt32Vec__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_unsigned_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_UInt32Vec__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_UInt32Vec__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_UInt32Vec__SWIG_3(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_UInt32Vec'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< osg::UInt32 >()\n"
    "    std::vector< osg::UInt32 >(unsigned int)\n"
    "    std::vector< osg::UInt32 >(std::vector< osg::UInt32 > const &)\n"
    "    std::vector< osg::UInt32 >(unsigned int,unsigned int)\n");
  lua_error(L);return 0;
}


static int _wrap_UInt32Vec_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< osg::UInt32 > *arg1 = (std::vector< osg::UInt32 > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("size",1,"std::vector< osg::UInt32 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Vec_size",1,SWIGTYPE_p_std__vectorT_unsigned_int_t);
  }
  
  result = (unsigned int)((std::vector< osg::UInt32 > const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Vec_max_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< osg::UInt32 > *arg1 = (std::vector< osg::UInt32 > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("max_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("max_size",1,"std::vector< osg::UInt32 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Vec_max_size",1,SWIGTYPE_p_std__vectorT_unsigned_int_t);
  }
  
  result = (unsigned int)((std::vector< osg::UInt32 > const *)arg1)->max_size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Vec_empty(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< osg::UInt32 > *arg1 = (std::vector< osg::UInt32 > *) 0 ;
  bool result;
  
  SWIG_check_num_args("empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("empty",1,"std::vector< osg::UInt32 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Vec_empty",1,SWIGTYPE_p_std__vectorT_unsigned_int_t);
  }
  
  result = (bool)((std::vector< osg::UInt32 > const *)arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Vec_clear(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< osg::UInt32 > *arg1 = (std::vector< osg::UInt32 > *) 0 ;
  
  SWIG_check_num_args("clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("clear",1,"std::vector< osg::UInt32 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Vec_clear",1,SWIGTYPE_p_std__vectorT_unsigned_int_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Vec_push_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< osg::UInt32 > *arg1 = (std::vector< osg::UInt32 > *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("push_back",1,"std::vector< osg::UInt32 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("push_back",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Vec_push_back",1,SWIGTYPE_p_std__vectorT_unsigned_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  (arg1)->push_back(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Vec_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< osg::UInt32 > *arg1 = (std::vector< osg::UInt32 > *) 0 ;
  
  SWIG_check_num_args("pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pop_back",1,"std::vector< osg::UInt32 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Vec_pop_back",1,SWIGTYPE_p_std__vectorT_unsigned_int_t);
  }
  
  (arg1)->pop_back();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Vec_front(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< osg::UInt32 > *arg1 = (std::vector< osg::UInt32 > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("front",1,"std::vector< osg::UInt32 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Vec_front",1,SWIGTYPE_p_std__vectorT_unsigned_int_t);
  }
  
  result = (unsigned int)((std::vector< osg::UInt32 > const *)arg1)->front();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Vec_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< osg::UInt32 > *arg1 = (std::vector< osg::UInt32 > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("back",1,"std::vector< osg::UInt32 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Vec_back",1,SWIGTYPE_p_std__vectorT_unsigned_int_t);
  }
  
  result = (unsigned int)((std::vector< osg::UInt32 > const *)arg1)->back();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Vec___getitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< osg::UInt32 > *arg1 = (std::vector< osg::UInt32 > *) 0 ;
  unsigned int arg2 ;
  unsigned int result;
  
  SWIG_check_num_args("__getitem__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("__getitem__",1,"std::vector< osg::UInt32 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("__getitem__",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Vec___getitem",1,SWIGTYPE_p_std__vectorT_unsigned_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  try {
    result = (unsigned int)std_vector_Sl_osg_UInt32_Sg____getitem__(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception(SWIG_IndexError, (&_e)->what());
  }
  
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Vec___setitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< osg::UInt32 > *arg1 = (std::vector< osg::UInt32 > *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  
  SWIG_check_num_args("__setitem__",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("__setitem__",1,"std::vector< osg::UInt32 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("__setitem__",2,"unsigned int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("__setitem__",3,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Vec___setitem",1,SWIGTYPE_p_std__vectorT_unsigned_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (unsigned int)lua_tonumber(L, 3);
  try {
    std_vector_Sl_osg_UInt32_Sg____setitem__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception(SWIG_IndexError, (&_e)->what());
  }
  
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_UInt32Vec(void *obj) {
std::vector< osg::UInt32 > *arg1 = (std::vector< osg::UInt32 > *) obj;
delete arg1;
}
static swig_lua_method swig_std_vector_Sl_osg_UInt32_Sg__methods[] = {
    {"size", _wrap_UInt32Vec_size}, 
    {"max_size", _wrap_UInt32Vec_max_size}, 
    {"empty", _wrap_UInt32Vec_empty}, 
    {"clear", _wrap_UInt32Vec_clear}, 
    {"push_back", _wrap_UInt32Vec_push_back}, 
    {"pop_back", _wrap_UInt32Vec_pop_back}, 
    {"front", _wrap_UInt32Vec_front}, 
    {"back", _wrap_UInt32Vec_back}, 
    {"__getitem", _wrap_UInt32Vec___getitem}, 
    {"__setitem", _wrap_UInt32Vec___setitem}, 
    {0,0}
};
static swig_lua_attribute swig_std_vector_Sl_osg_UInt32_Sg__attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_std_vector_Sl_osg_UInt32_Sg__bases[] = {0};
static const char *swig_std_vector_Sl_osg_UInt32_Sg__base_names[] = {0};
static swig_lua_class _wrap_class_std_vector_Sl_osg_UInt32_Sg_ = { "UInt32Vec", &SWIGTYPE_p_std__vectorT_unsigned_int_t,_wrap_new_UInt32Vec, swig_delete_UInt32Vec, swig_std_vector_Sl_osg_UInt32_Sg__methods, swig_std_vector_Sl_osg_UInt32_Sg__attributes, swig_std_vector_Sl_osg_UInt32_Sg__bases, swig_std_vector_Sl_osg_UInt32_Sg__base_names };

static int _wrap_new_StringToUInt32Map__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::map< std::string,osg::UInt32 > *result = 0 ;
  
  SWIG_check_num_args("std::map<(std::string,osg::UInt32)>",0,0)
  result = (std::map< std::string,osg::UInt32 > *)new std::map< std::string,osg::UInt32 >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__mapT_std__string_unsigned_int_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_StringToUInt32Map__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::map< std::string,unsigned int > *arg1 = 0 ;
  std::map< std::string,osg::UInt32 > *result = 0 ;
  
  SWIG_check_num_args("std::map<(std::string,osg::UInt32)>",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::map<(std::string,osg::UInt32)>",1,"std::map< std::string,unsigned int > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__mapT_std__string_unsigned_int_t,0))){
    SWIG_fail_ptr("new_StringToUInt32Map",1,SWIGTYPE_p_std__mapT_std__string_unsigned_int_t);
  }
  
  result = (std::map< std::string,osg::UInt32 > *)new std::map< std::string,osg::UInt32 >((std::map< std::string,unsigned int > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__mapT_std__string_unsigned_int_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_StringToUInt32Map(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_StringToUInt32Map__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__mapT_std__string_unsigned_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_StringToUInt32Map__SWIG_1(L);
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_StringToUInt32Map'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::map< std::string,osg::UInt32 >()\n"
    "    std::map< std::string,osg::UInt32 >(std::map< std::string,unsigned int > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_StringToUInt32Map_size(lua_State* L) {
  int SWIG_arg = 0;
  std::map< std::string,osg::UInt32 > *arg1 = (std::map< std::string,osg::UInt32 > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("size",1,"std::map< std::string,osg::UInt32 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__mapT_std__string_unsigned_int_t,0))){
    SWIG_fail_ptr("StringToUInt32Map_size",1,SWIGTYPE_p_std__mapT_std__string_unsigned_int_t);
  }
  
  result = (unsigned int)((std::map< std::string,osg::UInt32 > const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StringToUInt32Map_empty(lua_State* L) {
  int SWIG_arg = 0;
  std::map< std::string,osg::UInt32 > *arg1 = (std::map< std::string,osg::UInt32 > *) 0 ;
  bool result;
  
  SWIG_check_num_args("empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("empty",1,"std::map< std::string,osg::UInt32 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__mapT_std__string_unsigned_int_t,0))){
    SWIG_fail_ptr("StringToUInt32Map_empty",1,SWIGTYPE_p_std__mapT_std__string_unsigned_int_t);
  }
  
  result = (bool)((std::map< std::string,osg::UInt32 > const *)arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StringToUInt32Map_clear(lua_State* L) {
  int SWIG_arg = 0;
  std::map< std::string,osg::UInt32 > *arg1 = (std::map< std::string,osg::UInt32 > *) 0 ;
  
  SWIG_check_num_args("clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("clear",1,"std::map< std::string,osg::UInt32 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__mapT_std__string_unsigned_int_t,0))){
    SWIG_fail_ptr("StringToUInt32Map_clear",1,SWIGTYPE_p_std__mapT_std__string_unsigned_int_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StringToUInt32Map_get(lua_State* L) {
  int SWIG_arg = 0;
  std::map< std::string,osg::UInt32 > *arg1 = (std::map< std::string,osg::UInt32 > *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  unsigned int *result = 0 ;
  
  SWIG_check_num_args("get",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("get",1,"std::map< std::string,osg::UInt32 > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("get",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__mapT_std__string_unsigned_int_t,0))){
    SWIG_fail_ptr("StringToUInt32Map_get",1,SWIGTYPE_p_std__mapT_std__string_unsigned_int_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  try {
    result = (unsigned int *) &std_map_Sl_std_string_Sc_osg_UInt32_Sg__get(arg1,(std::string const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception(SWIG_IndexError, (&_e)->what());
  }
  
  lua_pushnumber(L, (lua_Number) *result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StringToUInt32Map_set(lua_State* L) {
  int SWIG_arg = 0;
  std::map< std::string,osg::UInt32 > *arg1 = (std::map< std::string,osg::UInt32 > *) 0 ;
  std::string *arg2 = 0 ;
  unsigned int *arg3 = 0 ;
  std::string temp2 ;
  unsigned int temp3 ;
  
  SWIG_check_num_args("set",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("set",1,"std::map< std::string,osg::UInt32 > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("set",2,"std::string const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("set",3,"unsigned int const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__mapT_std__string_unsigned_int_t,0))){
    SWIG_fail_ptr("StringToUInt32Map_set",1,SWIGTYPE_p_std__mapT_std__string_unsigned_int_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  temp3=(unsigned int)lua_tonumber(L,3); arg3=&temp3;
  std_map_Sl_std_string_Sc_osg_UInt32_Sg__set(arg1,(std::string const &)*arg2,(unsigned int const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StringToUInt32Map_del(lua_State* L) {
  int SWIG_arg = 0;
  std::map< std::string,osg::UInt32 > *arg1 = (std::map< std::string,osg::UInt32 > *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("del",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("del",1,"std::map< std::string,osg::UInt32 > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("del",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__mapT_std__string_unsigned_int_t,0))){
    SWIG_fail_ptr("StringToUInt32Map_del",1,SWIGTYPE_p_std__mapT_std__string_unsigned_int_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  try {
    std_map_Sl_std_string_Sc_osg_UInt32_Sg__del(arg1,(std::string const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception(SWIG_IndexError, (&_e)->what());
  }
  
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StringToUInt32Map_has_key(lua_State* L) {
  int SWIG_arg = 0;
  std::map< std::string,osg::UInt32 > *arg1 = (std::map< std::string,osg::UInt32 > *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  bool result;
  
  SWIG_check_num_args("has_key",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("has_key",1,"std::map< std::string,osg::UInt32 > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("has_key",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__mapT_std__string_unsigned_int_t,0))){
    SWIG_fail_ptr("StringToUInt32Map_has_key",1,SWIGTYPE_p_std__mapT_std__string_unsigned_int_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  result = (bool)std_map_Sl_std_string_Sc_osg_UInt32_Sg__has_key(arg1,(std::string const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_StringToUInt32Map(void *obj) {
std::map< std::string,osg::UInt32 > *arg1 = (std::map< std::string,osg::UInt32 > *) obj;
delete arg1;
}
static swig_lua_method swig_std_map_Sl_std_string_Sc_osg_UInt32_Sg__methods[] = {
    {"size", _wrap_StringToUInt32Map_size}, 
    {"empty", _wrap_StringToUInt32Map_empty}, 
    {"clear", _wrap_StringToUInt32Map_clear}, 
    {"get", _wrap_StringToUInt32Map_get}, 
    {"set", _wrap_StringToUInt32Map_set}, 
    {"del", _wrap_StringToUInt32Map_del}, 
    {"has_key", _wrap_StringToUInt32Map_has_key}, 
    {0,0}
};
static swig_lua_attribute swig_std_map_Sl_std_string_Sc_osg_UInt32_Sg__attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_std_map_Sl_std_string_Sc_osg_UInt32_Sg__bases[] = {0};
static const char *swig_std_map_Sl_std_string_Sc_osg_UInt32_Sg__base_names[] = {0};
static swig_lua_class _wrap_class_std_map_Sl_std_string_Sc_osg_UInt32_Sg_ = { "StringToUInt32Map", &SWIGTYPE_p_std__mapT_std__string_unsigned_int_t,_wrap_new_StringToUInt32Map, swig_delete_StringToUInt32Map, swig_std_map_Sl_std_string_Sc_osg_UInt32_Sg__methods, swig_std_map_Sl_std_string_Sc_osg_UInt32_Sg__attributes, swig_std_map_Sl_std_string_Sc_osg_UInt32_Sg__bases, swig_std_map_Sl_std_string_Sc_osg_UInt32_Sg__base_names };

static int _wrap_new_WindowEventProducerPtr__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  osg::WindowEventProducerPtr *result = 0 ;
  
  SWIG_check_num_args("osg::WindowEventProducerPtr",0,0)
  result = (osg::WindowEventProducerPtr *)new osg::WindowEventProducerPtr();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_osg__WindowEventProducerPtr,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_WindowEventProducerPtr__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  osg::WindowEventProducerPtr *arg1 = 0 ;
  osg::WindowEventProducerPtr *result = 0 ;
  
  SWIG_check_num_args("osg::WindowEventProducerPtr",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("osg::WindowEventProducerPtr",1,"osg::WindowEventProducerPtr const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__WindowEventProducerPtr,0))){
    SWIG_fail_ptr("new_WindowEventProducerPtr",1,SWIGTYPE_p_osg__WindowEventProducerPtr);
  }
  
  result = (osg::WindowEventProducerPtr *)new osg::WindowEventProducerPtr((osg::WindowEventProducerPtr const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_osg__WindowEventProducerPtr,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_WindowEventProducerPtr(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_WindowEventProducerPtr__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_osg__WindowEventProducerPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_WindowEventProducerPtr__SWIG_1(L);
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_WindowEventProducerPtr'\n"
    "  Possible C/C++ prototypes are:\n"
    "    osg::WindowEventProducerPtr()\n"
    "    osg::WindowEventProducerPtr(osg::WindowEventProducerPtr const &)\n");
  lua_error(L);return 0;
}


static int _wrap_WindowEventProducerPtr___deref__(lua_State* L) {
  int SWIG_arg = 0;
  osg::WindowEventProducerPtr *arg1 = (osg::WindowEventProducerPtr *) 0 ;
  osg::WindowEventProducer *result = 0 ;
  
  SWIG_check_num_args("operator ->",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("operator ->",1,"osg::WindowEventProducerPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__WindowEventProducerPtr,0))){
    SWIG_fail_ptr("WindowEventProducerPtr___deref__",1,SWIGTYPE_p_osg__WindowEventProducerPtr);
  }
  
  result = (osg::WindowEventProducer *)(arg1)->operator ->();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_osg__WindowEventProducer,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WindowEventProducerPtr_dcast(lua_State* L) {
  int SWIG_arg = 0;
  osg::FieldContainerPtr arg1 ;
  osg::FieldContainerPtr *argp1 ;
  osg::WindowEventProducerPtr result;
  
  SWIG_check_num_args("osg::WindowEventProducerPtr::dcast",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("osg::WindowEventProducerPtr::dcast",1,"osg::FieldContainerPtr const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_osg__FieldContainerPtr,0))){
    SWIG_fail_ptr("WindowEventProducerPtr_dcast",1,SWIGTYPE_p_osg__FieldContainerPtr);
  }
  arg1 = *argp1;
  
  result = osg::WindowEventProducerPtr::dcast(arg1);
  {
    osg::WindowEventProducerPtr * resultptr = new osg::WindowEventProducerPtr((const osg::WindowEventProducerPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_osg__WindowEventProducerPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WindowEventProducerPtr_openWindow(lua_State* L) {
  int SWIG_arg = 0;
  osg::WindowEventProducerPtr *arg1 = (osg::WindowEventProducerPtr *) 0 ;
  osg::Pnt2f *arg2 = 0 ;
  osg::Vec2f *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string temp4 ;
  
  SWIG_check_num_args("openWindow",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("openWindow",1,"osg::WindowEventProducerPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("openWindow",2,"osg::Pnt2f const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("openWindow",3,"osg::Vec2f const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("openWindow",4,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__WindowEventProducerPtr,0))){
    SWIG_fail_ptr("WindowEventProducerPtr_openWindow",1,SWIGTYPE_p_osg__WindowEventProducerPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__Pnt2f,0))){
    SWIG_fail_ptr("WindowEventProducerPtr_openWindow",2,SWIGTYPE_p_osg__Pnt2f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_osg__Vec2f,0))){
    SWIG_fail_ptr("WindowEventProducerPtr_openWindow",3,SWIGTYPE_p_osg__Vec2f);
  }
  
  temp4.assign(lua_tostring(L,4),lua_strlen(L,4)); arg4=&temp4;
  (*arg1)->openWindow((osg::Pnt2f const &)*arg2,(osg::Vec2f const &)*arg3,(std::string const &)*arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WindowEventProducerPtr_closeWindow(lua_State* L) {
  int SWIG_arg = 0;
  osg::WindowEventProducerPtr *arg1 = (osg::WindowEventProducerPtr *) 0 ;
  
  SWIG_check_num_args("closeWindow",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("closeWindow",1,"osg::WindowEventProducerPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__WindowEventProducerPtr,0))){
    SWIG_fail_ptr("WindowEventProducerPtr_closeWindow",1,SWIGTYPE_p_osg__WindowEventProducerPtr);
  }
  
  (*arg1)->closeWindow();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WindowEventProducerPtr_setPosition(lua_State* L) {
  int SWIG_arg = 0;
  osg::WindowEventProducerPtr *arg1 = (osg::WindowEventProducerPtr *) 0 ;
  osg::Pnt2f arg2 ;
  osg::Pnt2f *argp2 ;
  
  SWIG_check_num_args("setPosition",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setPosition",1,"osg::WindowEventProducerPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setPosition",2,"osg::Pnt2f");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__WindowEventProducerPtr,0))){
    SWIG_fail_ptr("WindowEventProducerPtr_setPosition",1,SWIGTYPE_p_osg__WindowEventProducerPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_osg__Pnt2f,0))){
    SWIG_fail_ptr("WindowEventProducerPtr_setPosition",2,SWIGTYPE_p_osg__Pnt2f);
  }
  arg2 = *argp2;
  
  (*arg1)->setPosition(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WindowEventProducerPtr_getPosition(lua_State* L) {
  int SWIG_arg = 0;
  osg::WindowEventProducerPtr *arg1 = (osg::WindowEventProducerPtr *) 0 ;
  osg::Pnt2f result;
  
  SWIG_check_num_args("getPosition",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getPosition",1,"osg::WindowEventProducerPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__WindowEventProducerPtr,0))){
    SWIG_fail_ptr("WindowEventProducerPtr_getPosition",1,SWIGTYPE_p_osg__WindowEventProducerPtr);
  }
  
  result = (*arg1)->getPosition();
  {
    osg::Pnt2f * resultptr = new osg::Pnt2f((const osg::Pnt2f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_osg__Pnt2f,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WindowEventProducerPtr_getSize(lua_State* L) {
  int SWIG_arg = 0;
  osg::WindowEventProducerPtr *arg1 = (osg::WindowEventProducerPtr *) 0 ;
  osg::Vec2f result;
  
  SWIG_check_num_args("getSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getSize",1,"osg::WindowEventProducerPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__WindowEventProducerPtr,0))){
    SWIG_fail_ptr("WindowEventProducerPtr_getSize",1,SWIGTYPE_p_osg__WindowEventProducerPtr);
  }
  
  result = (*arg1)->getSize();
  {
    osg::Vec2f * resultptr = new osg::Vec2f((const osg::Vec2f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_osg__Vec2f,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WindowEventProducerPtr_setFocused(lua_State* L) {
  int SWIG_arg = 0;
  osg::WindowEventProducerPtr *arg1 = (osg::WindowEventProducerPtr *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("setFocused",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setFocused",1,"osg::WindowEventProducerPtr *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("setFocused",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__WindowEventProducerPtr,0))){
    SWIG_fail_ptr("WindowEventProducerPtr_setFocused",1,SWIGTYPE_p_osg__WindowEventProducerPtr);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (*arg1)->setFocused(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WindowEventProducerPtr_getFocused(lua_State* L) {
  int SWIG_arg = 0;
  osg::WindowEventProducerPtr *arg1 = (osg::WindowEventProducerPtr *) 0 ;
  bool result;
  
  SWIG_check_num_args("getFocused",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getFocused",1,"osg::WindowEventProducerPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__WindowEventProducerPtr,0))){
    SWIG_fail_ptr("WindowEventProducerPtr_getFocused",1,SWIGTYPE_p_osg__WindowEventProducerPtr);
  }
  
  result = (bool)(*arg1)->getFocused();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WindowEventProducerPtr_setVisible(lua_State* L) {
  int SWIG_arg = 0;
  osg::WindowEventProducerPtr *arg1 = (osg::WindowEventProducerPtr *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("setVisible",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setVisible",1,"osg::WindowEventProducerPtr *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("setVisible",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__WindowEventProducerPtr,0))){
    SWIG_fail_ptr("WindowEventProducerPtr_setVisible",1,SWIGTYPE_p_osg__WindowEventProducerPtr);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (*arg1)->setVisible(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WindowEventProducerPtr_getVisible(lua_State* L) {
  int SWIG_arg = 0;
  osg::WindowEventProducerPtr *arg1 = (osg::WindowEventProducerPtr *) 0 ;
  bool result;
  
  SWIG_check_num_args("getVisible",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getVisible",1,"osg::WindowEventProducerPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__WindowEventProducerPtr,0))){
    SWIG_fail_ptr("WindowEventProducerPtr_getVisible",1,SWIGTYPE_p_osg__WindowEventProducerPtr);
  }
  
  result = (bool)(*arg1)->getVisible();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WindowEventProducerPtr_setIconify(lua_State* L) {
  int SWIG_arg = 0;
  osg::WindowEventProducerPtr *arg1 = (osg::WindowEventProducerPtr *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("setIconify",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setIconify",1,"osg::WindowEventProducerPtr *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("setIconify",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__WindowEventProducerPtr,0))){
    SWIG_fail_ptr("WindowEventProducerPtr_setIconify",1,SWIGTYPE_p_osg__WindowEventProducerPtr);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (*arg1)->setIconify(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WindowEventProducerPtr_getIconify(lua_State* L) {
  int SWIG_arg = 0;
  osg::WindowEventProducerPtr *arg1 = (osg::WindowEventProducerPtr *) 0 ;
  bool result;
  
  SWIG_check_num_args("getIconify",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getIconify",1,"osg::WindowEventProducerPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__WindowEventProducerPtr,0))){
    SWIG_fail_ptr("WindowEventProducerPtr_getIconify",1,SWIGTYPE_p_osg__WindowEventProducerPtr);
  }
  
  result = (bool)(*arg1)->getIconify();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WindowEventProducerPtr_setFullscreen(lua_State* L) {
  int SWIG_arg = 0;
  osg::WindowEventProducerPtr *arg1 = (osg::WindowEventProducerPtr *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("setFullscreen",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setFullscreen",1,"osg::WindowEventProducerPtr *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("setFullscreen",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__WindowEventProducerPtr,0))){
    SWIG_fail_ptr("WindowEventProducerPtr_setFullscreen",1,SWIGTYPE_p_osg__WindowEventProducerPtr);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (*arg1)->setFullscreen(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WindowEventProducerPtr_getFullscreen(lua_State* L) {
  int SWIG_arg = 0;
  osg::WindowEventProducerPtr *arg1 = (osg::WindowEventProducerPtr *) 0 ;
  bool result;
  
  SWIG_check_num_args("getFullscreen",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getFullscreen",1,"osg::WindowEventProducerPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__WindowEventProducerPtr,0))){
    SWIG_fail_ptr("WindowEventProducerPtr_getFullscreen",1,SWIGTYPE_p_osg__WindowEventProducerPtr);
  }
  
  result = (bool)(*arg1)->getFullscreen();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WindowEventProducerPtr_setTitle(lua_State* L) {
  int SWIG_arg = 0;
  osg::WindowEventProducerPtr *arg1 = (osg::WindowEventProducerPtr *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("setTitle",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setTitle",1,"osg::WindowEventProducerPtr *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("setTitle",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__WindowEventProducerPtr,0))){
    SWIG_fail_ptr("WindowEventProducerPtr_setTitle",1,SWIGTYPE_p_osg__WindowEventProducerPtr);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  (*arg1)->setTitle((std::string const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WindowEventProducerPtr_getTitle(lua_State* L) {
  int SWIG_arg = 0;
  osg::WindowEventProducerPtr *arg1 = (osg::WindowEventProducerPtr *) 0 ;
  std::string result;
  
  SWIG_check_num_args("getTitle",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getTitle",1,"osg::WindowEventProducerPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__WindowEventProducerPtr,0))){
    SWIG_fail_ptr("WindowEventProducerPtr_getTitle",1,SWIGTYPE_p_osg__WindowEventProducerPtr);
  }
  
  result = (*arg1)->getTitle();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WindowEventProducerPtr_setRisizable(lua_State* L) {
  int SWIG_arg = 0;
  osg::WindowEventProducerPtr *arg1 = (osg::WindowEventProducerPtr *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("setRisizable",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setRisizable",1,"osg::WindowEventProducerPtr *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("setRisizable",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__WindowEventProducerPtr,0))){
    SWIG_fail_ptr("WindowEventProducerPtr_setRisizable",1,SWIGTYPE_p_osg__WindowEventProducerPtr);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (*arg1)->setRisizable(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WindowEventProducerPtr_getRisizable(lua_State* L) {
  int SWIG_arg = 0;
  osg::WindowEventProducerPtr *arg1 = (osg::WindowEventProducerPtr *) 0 ;
  bool result;
  
  SWIG_check_num_args("getRisizable",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getRisizable",1,"osg::WindowEventProducerPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__WindowEventProducerPtr,0))){
    SWIG_fail_ptr("WindowEventProducerPtr_getRisizable",1,SWIGTYPE_p_osg__WindowEventProducerPtr);
  }
  
  result = (bool)(*arg1)->getRisizable();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WindowEventProducerPtr_setShowCursor(lua_State* L) {
  int SWIG_arg = 0;
  osg::WindowEventProducerPtr *arg1 = (osg::WindowEventProducerPtr *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("setShowCursor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setShowCursor",1,"osg::WindowEventProducerPtr *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("setShowCursor",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__WindowEventProducerPtr,0))){
    SWIG_fail_ptr("WindowEventProducerPtr_setShowCursor",1,SWIGTYPE_p_osg__WindowEventProducerPtr);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (*arg1)->setShowCursor(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WindowEventProducerPtr_getShowCursor(lua_State* L) {
  int SWIG_arg = 0;
  osg::WindowEventProducerPtr *arg1 = (osg::WindowEventProducerPtr *) 0 ;
  bool result;
  
  SWIG_check_num_args("getShowCursor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getShowCursor",1,"osg::WindowEventProducerPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__WindowEventProducerPtr,0))){
    SWIG_fail_ptr("WindowEventProducerPtr_getShowCursor",1,SWIGTYPE_p_osg__WindowEventProducerPtr);
  }
  
  result = (bool)(*arg1)->getShowCursor();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WindowEventProducerPtr_setAttachMouseToCursor(lua_State* L) {
  int SWIG_arg = 0;
  osg::WindowEventProducerPtr *arg1 = (osg::WindowEventProducerPtr *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("setAttachMouseToCursor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setAttachMouseToCursor",1,"osg::WindowEventProducerPtr *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("setAttachMouseToCursor",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__WindowEventProducerPtr,0))){
    SWIG_fail_ptr("WindowEventProducerPtr_setAttachMouseToCursor",1,SWIGTYPE_p_osg__WindowEventProducerPtr);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (*arg1)->setAttachMouseToCursor(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WindowEventProducerPtr_getAttachMouseToCursor(lua_State* L) {
  int SWIG_arg = 0;
  osg::WindowEventProducerPtr *arg1 = (osg::WindowEventProducerPtr *) 0 ;
  bool result;
  
  SWIG_check_num_args("getAttachMouseToCursor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getAttachMouseToCursor",1,"osg::WindowEventProducerPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__WindowEventProducerPtr,0))){
    SWIG_fail_ptr("WindowEventProducerPtr_getAttachMouseToCursor",1,SWIGTYPE_p_osg__WindowEventProducerPtr);
  }
  
  result = (bool)(*arg1)->getAttachMouseToCursor();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WindowEventProducerPtr_getDesktopSize(lua_State* L) {
  int SWIG_arg = 0;
  osg::WindowEventProducerPtr *arg1 = (osg::WindowEventProducerPtr *) 0 ;
  osg::Vec2f result;
  
  SWIG_check_num_args("getDesktopSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getDesktopSize",1,"osg::WindowEventProducerPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__WindowEventProducerPtr,0))){
    SWIG_fail_ptr("WindowEventProducerPtr_getDesktopSize",1,SWIGTYPE_p_osg__WindowEventProducerPtr);
  }
  
  result = (*arg1)->getDesktopSize();
  {
    osg::Vec2f * resultptr = new osg::Vec2f((const osg::Vec2f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_osg__Vec2f,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WindowEventProducerPtr_getKeyModifiers(lua_State* L) {
  int SWIG_arg = 0;
  osg::WindowEventProducerPtr *arg1 = (osg::WindowEventProducerPtr *) 0 ;
  osg::UInt32 result;
  
  SWIG_check_num_args("getKeyModifiers",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getKeyModifiers",1,"osg::WindowEventProducerPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__WindowEventProducerPtr,0))){
    SWIG_fail_ptr("WindowEventProducerPtr_getKeyModifiers",1,SWIGTYPE_p_osg__WindowEventProducerPtr);
  }
  
  result = (osg::UInt32)(*arg1)->getKeyModifiers();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WindowEventProducerPtr_getMousePosition(lua_State* L) {
  int SWIG_arg = 0;
  osg::WindowEventProducerPtr *arg1 = (osg::WindowEventProducerPtr *) 0 ;
  osg::Pnt2f result;
  
  SWIG_check_num_args("getMousePosition",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getMousePosition",1,"osg::WindowEventProducerPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__WindowEventProducerPtr,0))){
    SWIG_fail_ptr("WindowEventProducerPtr_getMousePosition",1,SWIGTYPE_p_osg__WindowEventProducerPtr);
  }
  
  result = (*arg1)->getMousePosition();
  {
    osg::Pnt2f * resultptr = new osg::Pnt2f((const osg::Pnt2f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_osg__Pnt2f,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WindowEventProducerPtr_windowToViewport(lua_State* L) {
  int SWIG_arg = 0;
  osg::WindowEventProducerPtr *arg1 = (osg::WindowEventProducerPtr *) 0 ;
  osg::Pnt2f *arg2 = 0 ;
  osg::Pnt2f *arg3 = 0 ;
  osg::ViewportPtr result;
  
  SWIG_check_num_args("windowToViewport",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("windowToViewport",1,"osg::WindowEventProducerPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("windowToViewport",2,"osg::Pnt2f const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("windowToViewport",3,"osg::Pnt2f &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__WindowEventProducerPtr,0))){
    SWIG_fail_ptr("WindowEventProducerPtr_windowToViewport",1,SWIGTYPE_p_osg__WindowEventProducerPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__Pnt2f,0))){
    SWIG_fail_ptr("WindowEventProducerPtr_windowToViewport",2,SWIGTYPE_p_osg__Pnt2f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_osg__Pnt2f,0))){
    SWIG_fail_ptr("WindowEventProducerPtr_windowToViewport",3,SWIGTYPE_p_osg__Pnt2f);
  }
  
  result = (*arg1)->windowToViewport((osg::Pnt2f const &)*arg2,*arg3);
  {
    osg::ViewportPtr * resultptr = new osg::ViewportPtr((const osg::ViewportPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_osg__ViewportPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WindowEventProducerPtr_getClipboard(lua_State* L) {
  int SWIG_arg = 0;
  osg::WindowEventProducerPtr *arg1 = (osg::WindowEventProducerPtr *) 0 ;
  std::string result;
  
  SWIG_check_num_args("getClipboard",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getClipboard",1,"osg::WindowEventProducerPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__WindowEventProducerPtr,0))){
    SWIG_fail_ptr("WindowEventProducerPtr_getClipboard",1,SWIGTYPE_p_osg__WindowEventProducerPtr);
  }
  
  result = (*arg1)->getClipboard();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WindowEventProducerPtr_putClipboard(lua_State* L) {
  int SWIG_arg = 0;
  osg::WindowEventProducerPtr *arg1 = (osg::WindowEventProducerPtr *) 0 ;
  std::string arg2 ;
  
  SWIG_check_num_args("putClipboard",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("putClipboard",1,"osg::WindowEventProducerPtr *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("putClipboard",2,"std::string const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__WindowEventProducerPtr,0))){
    SWIG_fail_ptr("WindowEventProducerPtr_putClipboard",1,SWIGTYPE_p_osg__WindowEventProducerPtr);
  }
  
  (&arg2)->assign(lua_tostring(L,2),lua_strlen(L,2));
  (*arg1)->putClipboard(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WindowEventProducerPtr_getCursorType(lua_State* L) {
  int SWIG_arg = 0;
  osg::WindowEventProducerPtr *arg1 = (osg::WindowEventProducerPtr *) 0 ;
  osg::UInt32 result;
  
  SWIG_check_num_args("getCursorType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getCursorType",1,"osg::WindowEventProducerPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__WindowEventProducerPtr,0))){
    SWIG_fail_ptr("WindowEventProducerPtr_getCursorType",1,SWIGTYPE_p_osg__WindowEventProducerPtr);
  }
  
  result = (osg::UInt32)(*arg1)->getCursorType();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WindowEventProducerPtr_setCursorType(lua_State* L) {
  int SWIG_arg = 0;
  osg::WindowEventProducerPtr *arg1 = (osg::WindowEventProducerPtr *) 0 ;
  osg::UInt32 arg2 ;
  
  SWIG_check_num_args("setCursorType",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setCursorType",1,"osg::WindowEventProducerPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("setCursorType",2,"osg::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__WindowEventProducerPtr,0))){
    SWIG_fail_ptr("WindowEventProducerPtr_setCursorType",1,SWIGTYPE_p_osg__WindowEventProducerPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (osg::UInt32)lua_tonumber(L, 2);
  (*arg1)->setCursorType(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WindowEventProducerPtr_blockInputConnections(lua_State* L) {
  int SWIG_arg = 0;
  osg::WindowEventProducerPtr *arg1 = (osg::WindowEventProducerPtr *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("blockInputConnections",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("blockInputConnections",1,"osg::WindowEventProducerPtr *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("blockInputConnections",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__WindowEventProducerPtr,0))){
    SWIG_fail_ptr("WindowEventProducerPtr_blockInputConnections",1,SWIGTYPE_p_osg__WindowEventProducerPtr);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (*arg1)->blockInputConnections(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WindowEventProducerPtr_isBlockInputConnections(lua_State* L) {
  int SWIG_arg = 0;
  osg::WindowEventProducerPtr *arg1 = (osg::WindowEventProducerPtr *) 0 ;
  bool result;
  
  SWIG_check_num_args("isBlockInputConnections",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isBlockInputConnections",1,"osg::WindowEventProducerPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__WindowEventProducerPtr,0))){
    SWIG_fail_ptr("WindowEventProducerPtr_isBlockInputConnections",1,SWIGTYPE_p_osg__WindowEventProducerPtr);
  }
  
  result = (bool)(*arg1)->isBlockInputConnections();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_WindowEventProducerPtr(void *obj) {
osg::WindowEventProducerPtr *arg1 = (osg::WindowEventProducerPtr *) obj;
delete arg1;
}
static swig_lua_method swig_osg_WindowEventProducerPtr_methods[] = {
    {"__deref__", _wrap_WindowEventProducerPtr___deref__}, 
    {"openWindow", _wrap_WindowEventProducerPtr_openWindow}, 
    {"closeWindow", _wrap_WindowEventProducerPtr_closeWindow}, 
    {"setPosition", _wrap_WindowEventProducerPtr_setPosition}, 
    {"getPosition", _wrap_WindowEventProducerPtr_getPosition}, 
    {"getSize", _wrap_WindowEventProducerPtr_getSize}, 
    {"setFocused", _wrap_WindowEventProducerPtr_setFocused}, 
    {"getFocused", _wrap_WindowEventProducerPtr_getFocused}, 
    {"setVisible", _wrap_WindowEventProducerPtr_setVisible}, 
    {"getVisible", _wrap_WindowEventProducerPtr_getVisible}, 
    {"setIconify", _wrap_WindowEventProducerPtr_setIconify}, 
    {"getIconify", _wrap_WindowEventProducerPtr_getIconify}, 
    {"setFullscreen", _wrap_WindowEventProducerPtr_setFullscreen}, 
    {"getFullscreen", _wrap_WindowEventProducerPtr_getFullscreen}, 
    {"setTitle", _wrap_WindowEventProducerPtr_setTitle}, 
    {"getTitle", _wrap_WindowEventProducerPtr_getTitle}, 
    {"setRisizable", _wrap_WindowEventProducerPtr_setRisizable}, 
    {"getRisizable", _wrap_WindowEventProducerPtr_getRisizable}, 
    {"setShowCursor", _wrap_WindowEventProducerPtr_setShowCursor}, 
    {"getShowCursor", _wrap_WindowEventProducerPtr_getShowCursor}, 
    {"setAttachMouseToCursor", _wrap_WindowEventProducerPtr_setAttachMouseToCursor}, 
    {"getAttachMouseToCursor", _wrap_WindowEventProducerPtr_getAttachMouseToCursor}, 
    {"getDesktopSize", _wrap_WindowEventProducerPtr_getDesktopSize}, 
    {"getKeyModifiers", _wrap_WindowEventProducerPtr_getKeyModifiers}, 
    {"getMousePosition", _wrap_WindowEventProducerPtr_getMousePosition}, 
    {"windowToViewport", _wrap_WindowEventProducerPtr_windowToViewport}, 
    {"getClipboard", _wrap_WindowEventProducerPtr_getClipboard}, 
    {"putClipboard", _wrap_WindowEventProducerPtr_putClipboard}, 
    {"getCursorType", _wrap_WindowEventProducerPtr_getCursorType}, 
    {"setCursorType", _wrap_WindowEventProducerPtr_setCursorType}, 
    {"blockInputConnections", _wrap_WindowEventProducerPtr_blockInputConnections}, 
    {"isBlockInputConnections", _wrap_WindowEventProducerPtr_isBlockInputConnections}, 
    {0,0}
};
static swig_lua_attribute swig_osg_WindowEventProducerPtr_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_osg_WindowEventProducerPtr_bases[] = {0,0};
static const char *swig_osg_WindowEventProducerPtr_base_names[] = {"osg::AttachmentContainerPtr *",0};
static swig_lua_class _wrap_class_osg_WindowEventProducerPtr = { "WindowEventProducerPtr", &SWIGTYPE_p_osg__WindowEventProducerPtr,_wrap_new_WindowEventProducerPtr, swig_delete_WindowEventProducerPtr, swig_osg_WindowEventProducerPtr_methods, swig_osg_WindowEventProducerPtr_attributes, swig_osg_WindowEventProducerPtr_bases, swig_osg_WindowEventProducerPtr_base_names };

static int _wrap_WindowEventProducer_openWindow(lua_State* L) {
  int SWIG_arg = 0;
  osg::WindowEventProducer *arg1 = (osg::WindowEventProducer *) 0 ;
  osg::Pnt2f *arg2 = 0 ;
  osg::Vec2f *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string temp4 ;
  
  SWIG_check_num_args("openWindow",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("openWindow",1,"osg::WindowEventProducer *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("openWindow",2,"osg::Pnt2f const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("openWindow",3,"osg::Vec2f const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("openWindow",4,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__WindowEventProducer,0))){
    SWIG_fail_ptr("WindowEventProducer_openWindow",1,SWIGTYPE_p_osg__WindowEventProducer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__Pnt2f,0))){
    SWIG_fail_ptr("WindowEventProducer_openWindow",2,SWIGTYPE_p_osg__Pnt2f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_osg__Vec2f,0))){
    SWIG_fail_ptr("WindowEventProducer_openWindow",3,SWIGTYPE_p_osg__Vec2f);
  }
  
  temp4.assign(lua_tostring(L,4),lua_strlen(L,4)); arg4=&temp4;
  (arg1)->openWindow((osg::Pnt2f const &)*arg2,(osg::Vec2f const &)*arg3,(std::string const &)*arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WindowEventProducer_closeWindow(lua_State* L) {
  int SWIG_arg = 0;
  osg::WindowEventProducer *arg1 = (osg::WindowEventProducer *) 0 ;
  
  SWIG_check_num_args("closeWindow",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("closeWindow",1,"osg::WindowEventProducer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__WindowEventProducer,0))){
    SWIG_fail_ptr("WindowEventProducer_closeWindow",1,SWIGTYPE_p_osg__WindowEventProducer);
  }
  
  (arg1)->closeWindow();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WindowEventProducer_setPosition(lua_State* L) {
  int SWIG_arg = 0;
  osg::WindowEventProducer *arg1 = (osg::WindowEventProducer *) 0 ;
  osg::Pnt2f arg2 ;
  osg::Pnt2f *argp2 ;
  
  SWIG_check_num_args("setPosition",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setPosition",1,"osg::WindowEventProducer *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setPosition",2,"osg::Pnt2f");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__WindowEventProducer,0))){
    SWIG_fail_ptr("WindowEventProducer_setPosition",1,SWIGTYPE_p_osg__WindowEventProducer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_osg__Pnt2f,0))){
    SWIG_fail_ptr("WindowEventProducer_setPosition",2,SWIGTYPE_p_osg__Pnt2f);
  }
  arg2 = *argp2;
  
  (arg1)->setPosition(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WindowEventProducer_getPosition(lua_State* L) {
  int SWIG_arg = 0;
  osg::WindowEventProducer *arg1 = (osg::WindowEventProducer *) 0 ;
  osg::Pnt2f result;
  
  SWIG_check_num_args("getPosition",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getPosition",1,"osg::WindowEventProducer const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__WindowEventProducer,0))){
    SWIG_fail_ptr("WindowEventProducer_getPosition",1,SWIGTYPE_p_osg__WindowEventProducer);
  }
  
  result = ((osg::WindowEventProducer const *)arg1)->getPosition();
  {
    osg::Pnt2f * resultptr = new osg::Pnt2f((const osg::Pnt2f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_osg__Pnt2f,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WindowEventProducer_getSize(lua_State* L) {
  int SWIG_arg = 0;
  osg::WindowEventProducer *arg1 = (osg::WindowEventProducer *) 0 ;
  osg::Vec2f result;
  
  SWIG_check_num_args("getSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getSize",1,"osg::WindowEventProducer const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__WindowEventProducer,0))){
    SWIG_fail_ptr("WindowEventProducer_getSize",1,SWIGTYPE_p_osg__WindowEventProducer);
  }
  
  result = ((osg::WindowEventProducer const *)arg1)->getSize();
  {
    osg::Vec2f * resultptr = new osg::Vec2f((const osg::Vec2f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_osg__Vec2f,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WindowEventProducer_setFocused(lua_State* L) {
  int SWIG_arg = 0;
  osg::WindowEventProducer *arg1 = (osg::WindowEventProducer *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("setFocused",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setFocused",1,"osg::WindowEventProducer *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("setFocused",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__WindowEventProducer,0))){
    SWIG_fail_ptr("WindowEventProducer_setFocused",1,SWIGTYPE_p_osg__WindowEventProducer);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setFocused(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WindowEventProducer_getFocused(lua_State* L) {
  int SWIG_arg = 0;
  osg::WindowEventProducer *arg1 = (osg::WindowEventProducer *) 0 ;
  bool result;
  
  SWIG_check_num_args("getFocused",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getFocused",1,"osg::WindowEventProducer const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__WindowEventProducer,0))){
    SWIG_fail_ptr("WindowEventProducer_getFocused",1,SWIGTYPE_p_osg__WindowEventProducer);
  }
  
  result = (bool)((osg::WindowEventProducer const *)arg1)->getFocused();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WindowEventProducer_setVisible(lua_State* L) {
  int SWIG_arg = 0;
  osg::WindowEventProducer *arg1 = (osg::WindowEventProducer *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("setVisible",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setVisible",1,"osg::WindowEventProducer *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("setVisible",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__WindowEventProducer,0))){
    SWIG_fail_ptr("WindowEventProducer_setVisible",1,SWIGTYPE_p_osg__WindowEventProducer);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setVisible(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WindowEventProducer_getVisible(lua_State* L) {
  int SWIG_arg = 0;
  osg::WindowEventProducer *arg1 = (osg::WindowEventProducer *) 0 ;
  bool result;
  
  SWIG_check_num_args("getVisible",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getVisible",1,"osg::WindowEventProducer const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__WindowEventProducer,0))){
    SWIG_fail_ptr("WindowEventProducer_getVisible",1,SWIGTYPE_p_osg__WindowEventProducer);
  }
  
  result = (bool)((osg::WindowEventProducer const *)arg1)->getVisible();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WindowEventProducer_setIconify(lua_State* L) {
  int SWIG_arg = 0;
  osg::WindowEventProducer *arg1 = (osg::WindowEventProducer *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("setIconify",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setIconify",1,"osg::WindowEventProducer *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("setIconify",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__WindowEventProducer,0))){
    SWIG_fail_ptr("WindowEventProducer_setIconify",1,SWIGTYPE_p_osg__WindowEventProducer);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setIconify(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WindowEventProducer_getIconify(lua_State* L) {
  int SWIG_arg = 0;
  osg::WindowEventProducer *arg1 = (osg::WindowEventProducer *) 0 ;
  bool result;
  
  SWIG_check_num_args("getIconify",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getIconify",1,"osg::WindowEventProducer const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__WindowEventProducer,0))){
    SWIG_fail_ptr("WindowEventProducer_getIconify",1,SWIGTYPE_p_osg__WindowEventProducer);
  }
  
  result = (bool)((osg::WindowEventProducer const *)arg1)->getIconify();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WindowEventProducer_setFullscreen(lua_State* L) {
  int SWIG_arg = 0;
  osg::WindowEventProducer *arg1 = (osg::WindowEventProducer *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("setFullscreen",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setFullscreen",1,"osg::WindowEventProducer *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("setFullscreen",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__WindowEventProducer,0))){
    SWIG_fail_ptr("WindowEventProducer_setFullscreen",1,SWIGTYPE_p_osg__WindowEventProducer);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setFullscreen(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WindowEventProducer_getFullscreen(lua_State* L) {
  int SWIG_arg = 0;
  osg::WindowEventProducer *arg1 = (osg::WindowEventProducer *) 0 ;
  bool result;
  
  SWIG_check_num_args("getFullscreen",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getFullscreen",1,"osg::WindowEventProducer const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__WindowEventProducer,0))){
    SWIG_fail_ptr("WindowEventProducer_getFullscreen",1,SWIGTYPE_p_osg__WindowEventProducer);
  }
  
  result = (bool)((osg::WindowEventProducer const *)arg1)->getFullscreen();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WindowEventProducer_setTitle(lua_State* L) {
  int SWIG_arg = 0;
  osg::WindowEventProducer *arg1 = (osg::WindowEventProducer *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("setTitle",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setTitle",1,"osg::WindowEventProducer *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("setTitle",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__WindowEventProducer,0))){
    SWIG_fail_ptr("WindowEventProducer_setTitle",1,SWIGTYPE_p_osg__WindowEventProducer);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  (arg1)->setTitle((std::string const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WindowEventProducer_getTitle(lua_State* L) {
  int SWIG_arg = 0;
  osg::WindowEventProducer *arg1 = (osg::WindowEventProducer *) 0 ;
  std::string result;
  
  SWIG_check_num_args("getTitle",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getTitle",1,"osg::WindowEventProducer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__WindowEventProducer,0))){
    SWIG_fail_ptr("WindowEventProducer_getTitle",1,SWIGTYPE_p_osg__WindowEventProducer);
  }
  
  result = (arg1)->getTitle();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WindowEventProducer_setRisizable(lua_State* L) {
  int SWIG_arg = 0;
  osg::WindowEventProducer *arg1 = (osg::WindowEventProducer *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("setRisizable",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setRisizable",1,"osg::WindowEventProducer *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("setRisizable",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__WindowEventProducer,0))){
    SWIG_fail_ptr("WindowEventProducer_setRisizable",1,SWIGTYPE_p_osg__WindowEventProducer);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setRisizable(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WindowEventProducer_getRisizable(lua_State* L) {
  int SWIG_arg = 0;
  osg::WindowEventProducer *arg1 = (osg::WindowEventProducer *) 0 ;
  bool result;
  
  SWIG_check_num_args("getRisizable",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getRisizable",1,"osg::WindowEventProducer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__WindowEventProducer,0))){
    SWIG_fail_ptr("WindowEventProducer_getRisizable",1,SWIGTYPE_p_osg__WindowEventProducer);
  }
  
  result = (bool)(arg1)->getRisizable();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WindowEventProducer_setShowCursor(lua_State* L) {
  int SWIG_arg = 0;
  osg::WindowEventProducer *arg1 = (osg::WindowEventProducer *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("setShowCursor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setShowCursor",1,"osg::WindowEventProducer *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("setShowCursor",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__WindowEventProducer,0))){
    SWIG_fail_ptr("WindowEventProducer_setShowCursor",1,SWIGTYPE_p_osg__WindowEventProducer);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setShowCursor(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WindowEventProducer_getShowCursor(lua_State* L) {
  int SWIG_arg = 0;
  osg::WindowEventProducer *arg1 = (osg::WindowEventProducer *) 0 ;
  bool result;
  
  SWIG_check_num_args("getShowCursor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getShowCursor",1,"osg::WindowEventProducer const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__WindowEventProducer,0))){
    SWIG_fail_ptr("WindowEventProducer_getShowCursor",1,SWIGTYPE_p_osg__WindowEventProducer);
  }
  
  result = (bool)((osg::WindowEventProducer const *)arg1)->getShowCursor();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WindowEventProducer_setAttachMouseToCursor(lua_State* L) {
  int SWIG_arg = 0;
  osg::WindowEventProducer *arg1 = (osg::WindowEventProducer *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("setAttachMouseToCursor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setAttachMouseToCursor",1,"osg::WindowEventProducer *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("setAttachMouseToCursor",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__WindowEventProducer,0))){
    SWIG_fail_ptr("WindowEventProducer_setAttachMouseToCursor",1,SWIGTYPE_p_osg__WindowEventProducer);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setAttachMouseToCursor(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WindowEventProducer_getAttachMouseToCursor(lua_State* L) {
  int SWIG_arg = 0;
  osg::WindowEventProducer *arg1 = (osg::WindowEventProducer *) 0 ;
  bool result;
  
  SWIG_check_num_args("getAttachMouseToCursor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getAttachMouseToCursor",1,"osg::WindowEventProducer const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__WindowEventProducer,0))){
    SWIG_fail_ptr("WindowEventProducer_getAttachMouseToCursor",1,SWIGTYPE_p_osg__WindowEventProducer);
  }
  
  result = (bool)((osg::WindowEventProducer const *)arg1)->getAttachMouseToCursor();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WindowEventProducer_getDesktopSize(lua_State* L) {
  int SWIG_arg = 0;
  osg::WindowEventProducer *arg1 = (osg::WindowEventProducer *) 0 ;
  osg::Vec2f result;
  
  SWIG_check_num_args("getDesktopSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getDesktopSize",1,"osg::WindowEventProducer const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__WindowEventProducer,0))){
    SWIG_fail_ptr("WindowEventProducer_getDesktopSize",1,SWIGTYPE_p_osg__WindowEventProducer);
  }
  
  result = ((osg::WindowEventProducer const *)arg1)->getDesktopSize();
  {
    osg::Vec2f * resultptr = new osg::Vec2f((const osg::Vec2f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_osg__Vec2f,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WindowEventProducer_getKeyModifiers(lua_State* L) {
  int SWIG_arg = 0;
  osg::WindowEventProducer *arg1 = (osg::WindowEventProducer *) 0 ;
  osg::UInt32 result;
  
  SWIG_check_num_args("getKeyModifiers",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getKeyModifiers",1,"osg::WindowEventProducer const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__WindowEventProducer,0))){
    SWIG_fail_ptr("WindowEventProducer_getKeyModifiers",1,SWIGTYPE_p_osg__WindowEventProducer);
  }
  
  result = (osg::UInt32)((osg::WindowEventProducer const *)arg1)->getKeyModifiers();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WindowEventProducer_getMousePosition(lua_State* L) {
  int SWIG_arg = 0;
  osg::WindowEventProducer *arg1 = (osg::WindowEventProducer *) 0 ;
  osg::Pnt2f result;
  
  SWIG_check_num_args("getMousePosition",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getMousePosition",1,"osg::WindowEventProducer const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__WindowEventProducer,0))){
    SWIG_fail_ptr("WindowEventProducer_getMousePosition",1,SWIGTYPE_p_osg__WindowEventProducer);
  }
  
  result = ((osg::WindowEventProducer const *)arg1)->getMousePosition();
  {
    osg::Pnt2f * resultptr = new osg::Pnt2f((const osg::Pnt2f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_osg__Pnt2f,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WindowEventProducer_windowToViewport(lua_State* L) {
  int SWIG_arg = 0;
  osg::WindowEventProducer *arg1 = (osg::WindowEventProducer *) 0 ;
  osg::Pnt2f *arg2 = 0 ;
  osg::Pnt2f *arg3 = 0 ;
  osg::ViewportPtr result;
  
  SWIG_check_num_args("windowToViewport",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("windowToViewport",1,"osg::WindowEventProducer *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("windowToViewport",2,"osg::Pnt2f const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("windowToViewport",3,"osg::Pnt2f &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__WindowEventProducer,0))){
    SWIG_fail_ptr("WindowEventProducer_windowToViewport",1,SWIGTYPE_p_osg__WindowEventProducer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__Pnt2f,0))){
    SWIG_fail_ptr("WindowEventProducer_windowToViewport",2,SWIGTYPE_p_osg__Pnt2f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_osg__Pnt2f,0))){
    SWIG_fail_ptr("WindowEventProducer_windowToViewport",3,SWIGTYPE_p_osg__Pnt2f);
  }
  
  result = (arg1)->windowToViewport((osg::Pnt2f const &)*arg2,*arg3);
  {
    osg::ViewportPtr * resultptr = new osg::ViewportPtr((const osg::ViewportPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_osg__ViewportPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WindowEventProducer_getClipboard(lua_State* L) {
  int SWIG_arg = 0;
  osg::WindowEventProducer *arg1 = (osg::WindowEventProducer *) 0 ;
  std::string result;
  
  SWIG_check_num_args("getClipboard",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getClipboard",1,"osg::WindowEventProducer const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__WindowEventProducer,0))){
    SWIG_fail_ptr("WindowEventProducer_getClipboard",1,SWIGTYPE_p_osg__WindowEventProducer);
  }
  
  result = ((osg::WindowEventProducer const *)arg1)->getClipboard();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WindowEventProducer_putClipboard(lua_State* L) {
  int SWIG_arg = 0;
  osg::WindowEventProducer *arg1 = (osg::WindowEventProducer *) 0 ;
  std::string arg2 ;
  
  SWIG_check_num_args("putClipboard",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("putClipboard",1,"osg::WindowEventProducer *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("putClipboard",2,"std::string const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__WindowEventProducer,0))){
    SWIG_fail_ptr("WindowEventProducer_putClipboard",1,SWIGTYPE_p_osg__WindowEventProducer);
  }
  
  (&arg2)->assign(lua_tostring(L,2),lua_strlen(L,2));
  (arg1)->putClipboard(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WindowEventProducer_getCursorType(lua_State* L) {
  int SWIG_arg = 0;
  osg::WindowEventProducer *arg1 = (osg::WindowEventProducer *) 0 ;
  osg::UInt32 result;
  
  SWIG_check_num_args("getCursorType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getCursorType",1,"osg::WindowEventProducer const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__WindowEventProducer,0))){
    SWIG_fail_ptr("WindowEventProducer_getCursorType",1,SWIGTYPE_p_osg__WindowEventProducer);
  }
  
  result = (osg::UInt32)((osg::WindowEventProducer const *)arg1)->getCursorType();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WindowEventProducer_setCursorType(lua_State* L) {
  int SWIG_arg = 0;
  osg::WindowEventProducer *arg1 = (osg::WindowEventProducer *) 0 ;
  osg::UInt32 arg2 ;
  
  SWIG_check_num_args("setCursorType",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setCursorType",1,"osg::WindowEventProducer *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("setCursorType",2,"osg::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__WindowEventProducer,0))){
    SWIG_fail_ptr("WindowEventProducer_setCursorType",1,SWIGTYPE_p_osg__WindowEventProducer);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (osg::UInt32)lua_tonumber(L, 2);
  (arg1)->setCursorType(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WindowEventProducer_blockInputConnections(lua_State* L) {
  int SWIG_arg = 0;
  osg::WindowEventProducer *arg1 = (osg::WindowEventProducer *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("blockInputConnections",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("blockInputConnections",1,"osg::WindowEventProducer *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("blockInputConnections",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__WindowEventProducer,0))){
    SWIG_fail_ptr("WindowEventProducer_blockInputConnections",1,SWIGTYPE_p_osg__WindowEventProducer);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->blockInputConnections(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WindowEventProducer_isBlockInputConnections(lua_State* L) {
  int SWIG_arg = 0;
  osg::WindowEventProducer *arg1 = (osg::WindowEventProducer *) 0 ;
  bool result;
  
  SWIG_check_num_args("isBlockInputConnections",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isBlockInputConnections",1,"osg::WindowEventProducer const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__WindowEventProducer,0))){
    SWIG_fail_ptr("WindowEventProducer_isBlockInputConnections",1,SWIGTYPE_p_osg__WindowEventProducer);
  }
  
  result = (bool)((osg::WindowEventProducer const *)arg1)->isBlockInputConnections();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static swig_lua_method swig_osg_WindowEventProducer_methods[] = {
    {"openWindow", _wrap_WindowEventProducer_openWindow}, 
    {"closeWindow", _wrap_WindowEventProducer_closeWindow}, 
    {"setPosition", _wrap_WindowEventProducer_setPosition}, 
    {"getPosition", _wrap_WindowEventProducer_getPosition}, 
    {"getSize", _wrap_WindowEventProducer_getSize}, 
    {"setFocused", _wrap_WindowEventProducer_setFocused}, 
    {"getFocused", _wrap_WindowEventProducer_getFocused}, 
    {"setVisible", _wrap_WindowEventProducer_setVisible}, 
    {"getVisible", _wrap_WindowEventProducer_getVisible}, 
    {"setIconify", _wrap_WindowEventProducer_setIconify}, 
    {"getIconify", _wrap_WindowEventProducer_getIconify}, 
    {"setFullscreen", _wrap_WindowEventProducer_setFullscreen}, 
    {"getFullscreen", _wrap_WindowEventProducer_getFullscreen}, 
    {"setTitle", _wrap_WindowEventProducer_setTitle}, 
    {"getTitle", _wrap_WindowEventProducer_getTitle}, 
    {"setRisizable", _wrap_WindowEventProducer_setRisizable}, 
    {"getRisizable", _wrap_WindowEventProducer_getRisizable}, 
    {"setShowCursor", _wrap_WindowEventProducer_setShowCursor}, 
    {"getShowCursor", _wrap_WindowEventProducer_getShowCursor}, 
    {"setAttachMouseToCursor", _wrap_WindowEventProducer_setAttachMouseToCursor}, 
    {"getAttachMouseToCursor", _wrap_WindowEventProducer_getAttachMouseToCursor}, 
    {"getDesktopSize", _wrap_WindowEventProducer_getDesktopSize}, 
    {"getKeyModifiers", _wrap_WindowEventProducer_getKeyModifiers}, 
    {"getMousePosition", _wrap_WindowEventProducer_getMousePosition}, 
    {"windowToViewport", _wrap_WindowEventProducer_windowToViewport}, 
    {"getClipboard", _wrap_WindowEventProducer_getClipboard}, 
    {"putClipboard", _wrap_WindowEventProducer_putClipboard}, 
    {"getCursorType", _wrap_WindowEventProducer_getCursorType}, 
    {"setCursorType", _wrap_WindowEventProducer_setCursorType}, 
    {"blockInputConnections", _wrap_WindowEventProducer_blockInputConnections}, 
    {"isBlockInputConnections", _wrap_WindowEventProducer_isBlockInputConnections}, 
    {0,0}
};
static swig_lua_attribute swig_osg_WindowEventProducer_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_osg_WindowEventProducer_bases[] = {0,0};
static const char *swig_osg_WindowEventProducer_base_names[] = {"osg::AttachmentContainerPtr *",0};
static swig_lua_class _wrap_class_osg_WindowEventProducer = { "WindowEventProducer", &SWIGTYPE_p_osg__WindowEventProducer,0,0, swig_osg_WindowEventProducer_methods, swig_osg_WindowEventProducer_attributes, swig_osg_WindowEventProducer_bases, swig_osg_WindowEventProducer_base_names };

static int _wrap_new_PhysicsHandlerPtr__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  osg::PhysicsHandlerPtr *result = 0 ;
  
  SWIG_check_num_args("osg::PhysicsHandlerPtr",0,0)
  result = (osg::PhysicsHandlerPtr *)new osg::PhysicsHandlerPtr();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_osg__PhysicsHandlerPtr,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_PhysicsHandlerPtr__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  osg::PhysicsHandlerPtr *arg1 = 0 ;
  osg::PhysicsHandlerPtr *result = 0 ;
  
  SWIG_check_num_args("osg::PhysicsHandlerPtr",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("osg::PhysicsHandlerPtr",1,"osg::PhysicsHandlerPtr const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__PhysicsHandlerPtr,0))){
    SWIG_fail_ptr("new_PhysicsHandlerPtr",1,SWIGTYPE_p_osg__PhysicsHandlerPtr);
  }
  
  result = (osg::PhysicsHandlerPtr *)new osg::PhysicsHandlerPtr((osg::PhysicsHandlerPtr const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_osg__PhysicsHandlerPtr,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_PhysicsHandlerPtr(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_PhysicsHandlerPtr__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_osg__PhysicsHandlerPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_PhysicsHandlerPtr__SWIG_1(L);
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_PhysicsHandlerPtr'\n"
    "  Possible C/C++ prototypes are:\n"
    "    osg::PhysicsHandlerPtr()\n"
    "    osg::PhysicsHandlerPtr(osg::PhysicsHandlerPtr const &)\n");
  lua_error(L);return 0;
}


static int _wrap_PhysicsHandlerPtr___deref__(lua_State* L) {
  int SWIG_arg = 0;
  osg::PhysicsHandlerPtr *arg1 = (osg::PhysicsHandlerPtr *) 0 ;
  osg::PhysicsHandler *result = 0 ;
  
  SWIG_check_num_args("operator ->",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("operator ->",1,"osg::PhysicsHandlerPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__PhysicsHandlerPtr,0))){
    SWIG_fail_ptr("PhysicsHandlerPtr___deref__",1,SWIGTYPE_p_osg__PhysicsHandlerPtr);
  }
  
  result = (osg::PhysicsHandler *)(arg1)->operator ->();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_osg__PhysicsHandler,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsHandlerPtr_dcast(lua_State* L) {
  int SWIG_arg = 0;
  osg::FieldContainerPtr arg1 ;
  osg::FieldContainerPtr *argp1 ;
  osg::PhysicsHandlerPtr result;
  
  SWIG_check_num_args("osg::PhysicsHandlerPtr::dcast",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("osg::PhysicsHandlerPtr::dcast",1,"osg::FieldContainerPtr const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_osg__FieldContainerPtr,0))){
    SWIG_fail_ptr("PhysicsHandlerPtr_dcast",1,SWIGTYPE_p_osg__FieldContainerPtr);
  }
  arg1 = *argp1;
  
  result = osg::PhysicsHandlerPtr::dcast(arg1);
  {
    osg::PhysicsHandlerPtr * resultptr = new osg::PhysicsHandlerPtr((const osg::PhysicsHandlerPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_osg__PhysicsHandlerPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsHandlerPtr_attachUpdateProducer(lua_State* L) {
  int SWIG_arg = 0;
  osg::PhysicsHandlerPtr *arg1 = (osg::PhysicsHandlerPtr *) 0 ;
  osg::WindowEventProducerPtr arg2 ;
  osg::WindowEventProducerPtr *argp2 ;
  
  SWIG_check_num_args("attachUpdateProducer",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("attachUpdateProducer",1,"osg::PhysicsHandlerPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("attachUpdateProducer",2,"osg::WindowEventProducerPtr");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__PhysicsHandlerPtr,0))){
    SWIG_fail_ptr("PhysicsHandlerPtr_attachUpdateProducer",1,SWIGTYPE_p_osg__PhysicsHandlerPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_osg__WindowEventProducerPtr,0))){
    SWIG_fail_ptr("PhysicsHandlerPtr_attachUpdateProducer",2,SWIGTYPE_p_osg__WindowEventProducerPtr);
  }
  arg2 = *argp2;
  
  (*arg1)->attachUpdateProducer(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsHandlerPtr_getType(lua_State* L) {
  int SWIG_arg = 0;
  osg::PhysicsHandlerPtr *arg1 = (osg::PhysicsHandlerPtr *) 0 ;
  osg::FieldContainerType *result = 0 ;
  
  SWIG_check_num_args("getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getType",1,"osg::PhysicsHandlerPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__PhysicsHandlerPtr,0))){
    SWIG_fail_ptr("PhysicsHandlerPtr_getType",1,SWIGTYPE_p_osg__PhysicsHandlerPtr);
  }
  
  result = (osg::FieldContainerType *) &(*arg1)->getType();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_osg__FieldContainerType,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsHandlerPtr_getGroupId(lua_State* L) {
  int SWIG_arg = 0;
  osg::PhysicsHandlerPtr *arg1 = (osg::PhysicsHandlerPtr *) 0 ;
  osg::UInt16 result;
  
  SWIG_check_num_args("getGroupId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getGroupId",1,"osg::PhysicsHandlerPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__PhysicsHandlerPtr,0))){
    SWIG_fail_ptr("PhysicsHandlerPtr_getGroupId",1,SWIGTYPE_p_osg__PhysicsHandlerPtr);
  }
  
  result = (osg::UInt16)(*arg1)->getGroupId();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsHandlerPtr_getField__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  osg::PhysicsHandlerPtr *arg1 = (osg::PhysicsHandlerPtr *) 0 ;
  osg::UInt32 arg2 ;
  osg::Field *result = 0 ;
  
  SWIG_check_num_args("getField",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getField",1,"osg::PhysicsHandlerPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getField",2,"osg::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__PhysicsHandlerPtr,0))){
    SWIG_fail_ptr("PhysicsHandlerPtr_getField",1,SWIGTYPE_p_osg__PhysicsHandlerPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (osg::UInt32)lua_tonumber(L, 2);
  result = (osg::Field *)(*arg1)->getField(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_osg__Field,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsHandlerPtr_getField__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  osg::PhysicsHandlerPtr *arg1 = (osg::PhysicsHandlerPtr *) 0 ;
  osg::Char8 *arg2 = (osg::Char8 *) 0 ;
  osg::Field *result = 0 ;
  
  SWIG_check_num_args("getField",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getField",1,"osg::PhysicsHandlerPtr *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("getField",2,"osg::Char8 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__PhysicsHandlerPtr,0))){
    SWIG_fail_ptr("PhysicsHandlerPtr_getField",1,SWIGTYPE_p_osg__PhysicsHandlerPtr);
  }
  
  arg2 = (osg::Char8 *)lua_tostring(L, 2);
  result = (osg::Field *)(*arg1)->getField((osg::Char8 const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_osg__Field,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsHandlerPtr_getField(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_osg__PhysicsHandlerPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_PhysicsHandlerPtr_getField__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_osg__PhysicsHandlerPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_PhysicsHandlerPtr_getField__SWIG_1(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'PhysicsHandlerPtr_getField'\n"
    "  Possible C/C++ prototypes are:\n"
    "    getField(osg::PhysicsHandlerPtr *,osg::UInt32)\n"
    "    getField(osg::PhysicsHandlerPtr *,osg::Char8 const *)\n");
  lua_error(L);return 0;
}


static int _wrap_PhysicsHandlerPtr_shallowCopy(lua_State* L) {
  int SWIG_arg = 0;
  osg::PhysicsHandlerPtr *arg1 = (osg::PhysicsHandlerPtr *) 0 ;
  osg::FieldContainerPtr result;
  
  SWIG_check_num_args("shallowCopy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("shallowCopy",1,"osg::PhysicsHandlerPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__PhysicsHandlerPtr,0))){
    SWIG_fail_ptr("PhysicsHandlerPtr_shallowCopy",1,SWIGTYPE_p_osg__PhysicsHandlerPtr);
  }
  
  result = (*arg1)->shallowCopy();
  {
    osg::FieldContainerPtr * resultptr = new osg::FieldContainerPtr((const osg::FieldContainerPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_osg__FieldContainerPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_PhysicsHandlerPtr(void *obj) {
osg::PhysicsHandlerPtr *arg1 = (osg::PhysicsHandlerPtr *) obj;
delete arg1;
}
static swig_lua_method swig_osg_PhysicsHandlerPtr_methods[] = {
    {"__deref__", _wrap_PhysicsHandlerPtr___deref__}, 
    {"attachUpdateProducer", _wrap_PhysicsHandlerPtr_attachUpdateProducer}, 
    {"getType", _wrap_PhysicsHandlerPtr_getType}, 
    {"getGroupId", _wrap_PhysicsHandlerPtr_getGroupId}, 
    {"getField", _wrap_PhysicsHandlerPtr_getField}, 
    {"shallowCopy", _wrap_PhysicsHandlerPtr_shallowCopy}, 
    {0,0}
};
static swig_lua_attribute swig_osg_PhysicsHandlerPtr_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_osg_PhysicsHandlerPtr_bases[] = {0,0};
static const char *swig_osg_PhysicsHandlerPtr_base_names[] = {"osg::FieldContainerPtr *",0};
static swig_lua_class _wrap_class_osg_PhysicsHandlerPtr = { "PhysicsHandlerPtr", &SWIGTYPE_p_osg__PhysicsHandlerPtr,_wrap_new_PhysicsHandlerPtr, swig_delete_PhysicsHandlerPtr, swig_osg_PhysicsHandlerPtr_methods, swig_osg_PhysicsHandlerPtr_attributes, swig_osg_PhysicsHandlerPtr_bases, swig_osg_PhysicsHandlerPtr_base_names };

static int _wrap_PhysicsHandler_attachUpdateProducer(lua_State* L) {
  int SWIG_arg = 0;
  osg::PhysicsHandler *arg1 = (osg::PhysicsHandler *) 0 ;
  osg::WindowEventProducerPtr arg2 ;
  osg::WindowEventProducerPtr *argp2 ;
  
  SWIG_check_num_args("attachUpdateProducer",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("attachUpdateProducer",1,"osg::PhysicsHandler *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("attachUpdateProducer",2,"osg::WindowEventProducerPtr");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__PhysicsHandler,0))){
    SWIG_fail_ptr("PhysicsHandler_attachUpdateProducer",1,SWIGTYPE_p_osg__PhysicsHandler);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_osg__WindowEventProducerPtr,0))){
    SWIG_fail_ptr("PhysicsHandler_attachUpdateProducer",2,SWIGTYPE_p_osg__WindowEventProducerPtr);
  }
  arg2 = *argp2;
  
  (arg1)->attachUpdateProducer(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static swig_lua_method swig_osg_PhysicsHandler_methods[] = {
    {"attachUpdateProducer", _wrap_PhysicsHandler_attachUpdateProducer}, 
    {0,0}
};
static swig_lua_attribute swig_osg_PhysicsHandler_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_osg_PhysicsHandler_bases[] = {0,0};
static const char *swig_osg_PhysicsHandler_base_names[] = {"osg::FieldContainer *",0};
static swig_lua_class _wrap_class_osg_PhysicsHandler = { "PhysicsHandler", &SWIGTYPE_p_osg__PhysicsHandler,0,0, swig_osg_PhysicsHandler_methods, swig_osg_PhysicsHandler_attributes, swig_osg_PhysicsHandler_bases, swig_osg_PhysicsHandler_base_names };

static int _wrap_new_PhysicsWorldPtr__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  osg::PhysicsWorldPtr *result = 0 ;
  
  SWIG_check_num_args("osg::PhysicsWorldPtr",0,0)
  result = (osg::PhysicsWorldPtr *)new osg::PhysicsWorldPtr();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_osg__PhysicsWorldPtr,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_PhysicsWorldPtr__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  osg::PhysicsWorldPtr *arg1 = 0 ;
  osg::PhysicsWorldPtr *result = 0 ;
  
  SWIG_check_num_args("osg::PhysicsWorldPtr",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("osg::PhysicsWorldPtr",1,"osg::PhysicsWorldPtr const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__PhysicsWorldPtr,0))){
    SWIG_fail_ptr("new_PhysicsWorldPtr",1,SWIGTYPE_p_osg__PhysicsWorldPtr);
  }
  
  result = (osg::PhysicsWorldPtr *)new osg::PhysicsWorldPtr((osg::PhysicsWorldPtr const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_osg__PhysicsWorldPtr,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_PhysicsWorldPtr(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_PhysicsWorldPtr__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_osg__PhysicsWorldPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_PhysicsWorldPtr__SWIG_1(L);
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_PhysicsWorldPtr'\n"
    "  Possible C/C++ prototypes are:\n"
    "    osg::PhysicsWorldPtr()\n"
    "    osg::PhysicsWorldPtr(osg::PhysicsWorldPtr const &)\n");
  lua_error(L);return 0;
}


static int _wrap_PhysicsWorldPtr___deref__(lua_State* L) {
  int SWIG_arg = 0;
  osg::PhysicsWorldPtr *arg1 = (osg::PhysicsWorldPtr *) 0 ;
  osg::PhysicsWorld *result = 0 ;
  
  SWIG_check_num_args("operator ->",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("operator ->",1,"osg::PhysicsWorldPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__PhysicsWorldPtr,0))){
    SWIG_fail_ptr("PhysicsWorldPtr___deref__",1,SWIGTYPE_p_osg__PhysicsWorldPtr);
  }
  
  result = (osg::PhysicsWorld *)(arg1)->operator ->();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_osg__PhysicsWorld,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsWorldPtr_dcast(lua_State* L) {
  int SWIG_arg = 0;
  osg::FieldContainerPtr arg1 ;
  osg::FieldContainerPtr *argp1 ;
  osg::PhysicsWorldPtr result;
  
  SWIG_check_num_args("osg::PhysicsWorldPtr::dcast",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("osg::PhysicsWorldPtr::dcast",1,"osg::FieldContainerPtr const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_osg__FieldContainerPtr,0))){
    SWIG_fail_ptr("PhysicsWorldPtr_dcast",1,SWIGTYPE_p_osg__FieldContainerPtr);
  }
  arg1 = *argp1;
  
  result = osg::PhysicsWorldPtr::dcast(arg1);
  {
    osg::PhysicsWorldPtr * resultptr = new osg::PhysicsWorldPtr((const osg::PhysicsWorldPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_osg__PhysicsWorldPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsWorldPtr_impulseToForce(lua_State* L) {
  int SWIG_arg = 0;
  osg::PhysicsWorldPtr *arg1 = (osg::PhysicsWorldPtr *) 0 ;
  osg::Real32 arg2 ;
  osg::Vec3f *arg3 = 0 ;
  osg::Vec3f result;
  
  SWIG_check_num_args("impulseToForce",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("impulseToForce",1,"osg::PhysicsWorldPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("impulseToForce",2,"osg::Real32");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("impulseToForce",3,"osg::Vec3f const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__PhysicsWorldPtr,0))){
    SWIG_fail_ptr("PhysicsWorldPtr_impulseToForce",1,SWIGTYPE_p_osg__PhysicsWorldPtr);
  }
  
  arg2 = (osg::Real32)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_osg__Vec3f,0))){
    SWIG_fail_ptr("PhysicsWorldPtr_impulseToForce",3,SWIGTYPE_p_osg__Vec3f);
  }
  
  result = (*arg1)->impulseToForce(arg2,(osg::Vec3f const &)*arg3);
  {
    osg::Vec3f * resultptr = new osg::Vec3f((const osg::Vec3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_osg__Vec3f,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsWorldPtr_initWorld(lua_State* L) {
  int SWIG_arg = 0;
  osg::PhysicsWorldPtr *arg1 = (osg::PhysicsWorldPtr *) 0 ;
  
  SWIG_check_num_args("initWorld",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("initWorld",1,"osg::PhysicsWorldPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__PhysicsWorldPtr,0))){
    SWIG_fail_ptr("PhysicsWorldPtr_initWorld",1,SWIGTYPE_p_osg__PhysicsWorldPtr);
  }
  
  (*arg1)->initWorld();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsWorldPtr_getParentHandler(lua_State* L) {
  int SWIG_arg = 0;
  osg::PhysicsWorldPtr *arg1 = (osg::PhysicsWorldPtr *) 0 ;
  osg::PhysicsHandlerPtr result;
  
  SWIG_check_num_args("getParentHandler",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getParentHandler",1,"osg::PhysicsWorldPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__PhysicsWorldPtr,0))){
    SWIG_fail_ptr("PhysicsWorldPtr_getParentHandler",1,SWIGTYPE_p_osg__PhysicsWorldPtr);
  }
  
  result = (*arg1)->getParentHandler();
  {
    osg::PhysicsHandlerPtr * resultptr = new osg::PhysicsHandlerPtr((const osg::PhysicsHandlerPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_osg__PhysicsHandlerPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsWorldPtr_getType(lua_State* L) {
  int SWIG_arg = 0;
  osg::PhysicsWorldPtr *arg1 = (osg::PhysicsWorldPtr *) 0 ;
  osg::FieldContainerType *result = 0 ;
  
  SWIG_check_num_args("getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getType",1,"osg::PhysicsWorldPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__PhysicsWorldPtr,0))){
    SWIG_fail_ptr("PhysicsWorldPtr_getType",1,SWIGTYPE_p_osg__PhysicsWorldPtr);
  }
  
  result = (osg::FieldContainerType *) &(*arg1)->getType();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_osg__FieldContainerType,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsWorldPtr_getGroupId(lua_State* L) {
  int SWIG_arg = 0;
  osg::PhysicsWorldPtr *arg1 = (osg::PhysicsWorldPtr *) 0 ;
  osg::UInt16 result;
  
  SWIG_check_num_args("getGroupId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getGroupId",1,"osg::PhysicsWorldPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__PhysicsWorldPtr,0))){
    SWIG_fail_ptr("PhysicsWorldPtr_getGroupId",1,SWIGTYPE_p_osg__PhysicsWorldPtr);
  }
  
  result = (osg::UInt16)(*arg1)->getGroupId();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsWorldPtr_getField__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  osg::PhysicsWorldPtr *arg1 = (osg::PhysicsWorldPtr *) 0 ;
  osg::UInt32 arg2 ;
  osg::Field *result = 0 ;
  
  SWIG_check_num_args("getField",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getField",1,"osg::PhysicsWorldPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getField",2,"osg::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__PhysicsWorldPtr,0))){
    SWIG_fail_ptr("PhysicsWorldPtr_getField",1,SWIGTYPE_p_osg__PhysicsWorldPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (osg::UInt32)lua_tonumber(L, 2);
  result = (osg::Field *)(*arg1)->getField(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_osg__Field,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsWorldPtr_getField__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  osg::PhysicsWorldPtr *arg1 = (osg::PhysicsWorldPtr *) 0 ;
  osg::Char8 *arg2 = (osg::Char8 *) 0 ;
  osg::Field *result = 0 ;
  
  SWIG_check_num_args("getField",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getField",1,"osg::PhysicsWorldPtr *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("getField",2,"osg::Char8 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__PhysicsWorldPtr,0))){
    SWIG_fail_ptr("PhysicsWorldPtr_getField",1,SWIGTYPE_p_osg__PhysicsWorldPtr);
  }
  
  arg2 = (osg::Char8 *)lua_tostring(L, 2);
  result = (osg::Field *)(*arg1)->getField((osg::Char8 const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_osg__Field,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsWorldPtr_getField(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_osg__PhysicsWorldPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_PhysicsWorldPtr_getField__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_osg__PhysicsWorldPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_PhysicsWorldPtr_getField__SWIG_1(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'PhysicsWorldPtr_getField'\n"
    "  Possible C/C++ prototypes are:\n"
    "    getField(osg::PhysicsWorldPtr *,osg::UInt32)\n"
    "    getField(osg::PhysicsWorldPtr *,osg::Char8 const *)\n");
  lua_error(L);return 0;
}


static int _wrap_PhysicsWorldPtr_shallowCopy(lua_State* L) {
  int SWIG_arg = 0;
  osg::PhysicsWorldPtr *arg1 = (osg::PhysicsWorldPtr *) 0 ;
  osg::FieldContainerPtr result;
  
  SWIG_check_num_args("shallowCopy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("shallowCopy",1,"osg::PhysicsWorldPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__PhysicsWorldPtr,0))){
    SWIG_fail_ptr("PhysicsWorldPtr_shallowCopy",1,SWIGTYPE_p_osg__PhysicsWorldPtr);
  }
  
  result = (*arg1)->shallowCopy();
  {
    osg::FieldContainerPtr * resultptr = new osg::FieldContainerPtr((const osg::FieldContainerPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_osg__FieldContainerPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_PhysicsWorldPtr(void *obj) {
osg::PhysicsWorldPtr *arg1 = (osg::PhysicsWorldPtr *) obj;
delete arg1;
}
static swig_lua_method swig_osg_PhysicsWorldPtr_methods[] = {
    {"__deref__", _wrap_PhysicsWorldPtr___deref__}, 
    {"impulseToForce", _wrap_PhysicsWorldPtr_impulseToForce}, 
    {"initWorld", _wrap_PhysicsWorldPtr_initWorld}, 
    {"getParentHandler", _wrap_PhysicsWorldPtr_getParentHandler}, 
    {"getType", _wrap_PhysicsWorldPtr_getType}, 
    {"getGroupId", _wrap_PhysicsWorldPtr_getGroupId}, 
    {"getField", _wrap_PhysicsWorldPtr_getField}, 
    {"shallowCopy", _wrap_PhysicsWorldPtr_shallowCopy}, 
    {0,0}
};
static swig_lua_attribute swig_osg_PhysicsWorldPtr_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_osg_PhysicsWorldPtr_bases[] = {0,0};
static const char *swig_osg_PhysicsWorldPtr_base_names[] = {"osg::FieldContainerPtr *",0};
static swig_lua_class _wrap_class_osg_PhysicsWorldPtr = { "PhysicsWorldPtr", &SWIGTYPE_p_osg__PhysicsWorldPtr,_wrap_new_PhysicsWorldPtr, swig_delete_PhysicsWorldPtr, swig_osg_PhysicsWorldPtr_methods, swig_osg_PhysicsWorldPtr_attributes, swig_osg_PhysicsWorldPtr_bases, swig_osg_PhysicsWorldPtr_base_names };

static int _wrap_PhysicsWorld_impulseToForce(lua_State* L) {
  int SWIG_arg = 0;
  osg::PhysicsWorld *arg1 = (osg::PhysicsWorld *) 0 ;
  osg::Real32 arg2 ;
  osg::Vec3f *arg3 = 0 ;
  osg::Vec3f result;
  
  SWIG_check_num_args("impulseToForce",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("impulseToForce",1,"osg::PhysicsWorld *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("impulseToForce",2,"osg::Real32");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("impulseToForce",3,"osg::Vec3f const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__PhysicsWorld,0))){
    SWIG_fail_ptr("PhysicsWorld_impulseToForce",1,SWIGTYPE_p_osg__PhysicsWorld);
  }
  
  arg2 = (osg::Real32)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_osg__Vec3f,0))){
    SWIG_fail_ptr("PhysicsWorld_impulseToForce",3,SWIGTYPE_p_osg__Vec3f);
  }
  
  result = (arg1)->impulseToForce(arg2,(osg::Vec3f const &)*arg3);
  {
    osg::Vec3f * resultptr = new osg::Vec3f((const osg::Vec3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_osg__Vec3f,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsWorld_initWorld(lua_State* L) {
  int SWIG_arg = 0;
  osg::PhysicsWorld *arg1 = (osg::PhysicsWorld *) 0 ;
  
  SWIG_check_num_args("initWorld",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("initWorld",1,"osg::PhysicsWorld *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__PhysicsWorld,0))){
    SWIG_fail_ptr("PhysicsWorld_initWorld",1,SWIGTYPE_p_osg__PhysicsWorld);
  }
  
  (arg1)->initWorld();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsWorld_getParentHandler(lua_State* L) {
  int SWIG_arg = 0;
  osg::PhysicsWorld *arg1 = (osg::PhysicsWorld *) 0 ;
  osg::PhysicsHandlerPtr result;
  
  SWIG_check_num_args("getParentHandler",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getParentHandler",1,"osg::PhysicsWorld const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__PhysicsWorld,0))){
    SWIG_fail_ptr("PhysicsWorld_getParentHandler",1,SWIGTYPE_p_osg__PhysicsWorld);
  }
  
  result = ((osg::PhysicsWorld const *)arg1)->getParentHandler();
  {
    osg::PhysicsHandlerPtr * resultptr = new osg::PhysicsHandlerPtr((const osg::PhysicsHandlerPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_osg__PhysicsHandlerPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static swig_lua_method swig_osg_PhysicsWorld_methods[] = {
    {"impulseToForce", _wrap_PhysicsWorld_impulseToForce}, 
    {"initWorld", _wrap_PhysicsWorld_initWorld}, 
    {"getParentHandler", _wrap_PhysicsWorld_getParentHandler}, 
    {0,0}
};
static swig_lua_attribute swig_osg_PhysicsWorld_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_osg_PhysicsWorld_bases[] = {0,0};
static const char *swig_osg_PhysicsWorld_base_names[] = {"osg::FieldContainer *",0};
static swig_lua_class _wrap_class_osg_PhysicsWorld = { "PhysicsWorld", &SWIGTYPE_p_osg__PhysicsWorld,0,0, swig_osg_PhysicsWorld_methods, swig_osg_PhysicsWorld_attributes, swig_osg_PhysicsWorld_bases, swig_osg_PhysicsWorld_base_names };

static int _wrap_new_PhysicsBodyPtr__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  osg::PhysicsBodyPtr *result = 0 ;
  
  SWIG_check_num_args("osg::PhysicsBodyPtr",0,0)
  result = (osg::PhysicsBodyPtr *)new osg::PhysicsBodyPtr();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_osg__PhysicsBodyPtr,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_PhysicsBodyPtr__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  osg::PhysicsBodyPtr *arg1 = 0 ;
  osg::PhysicsBodyPtr *result = 0 ;
  
  SWIG_check_num_args("osg::PhysicsBodyPtr",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("osg::PhysicsBodyPtr",1,"osg::PhysicsBodyPtr const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__PhysicsBodyPtr,0))){
    SWIG_fail_ptr("new_PhysicsBodyPtr",1,SWIGTYPE_p_osg__PhysicsBodyPtr);
  }
  
  result = (osg::PhysicsBodyPtr *)new osg::PhysicsBodyPtr((osg::PhysicsBodyPtr const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_osg__PhysicsBodyPtr,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_PhysicsBodyPtr(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_PhysicsBodyPtr__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_osg__PhysicsBodyPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_PhysicsBodyPtr__SWIG_1(L);
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_PhysicsBodyPtr'\n"
    "  Possible C/C++ prototypes are:\n"
    "    osg::PhysicsBodyPtr()\n"
    "    osg::PhysicsBodyPtr(osg::PhysicsBodyPtr const &)\n");
  lua_error(L);return 0;
}


static int _wrap_PhysicsBodyPtr___deref__(lua_State* L) {
  int SWIG_arg = 0;
  osg::PhysicsBodyPtr *arg1 = (osg::PhysicsBodyPtr *) 0 ;
  osg::PhysicsBody *result = 0 ;
  
  SWIG_check_num_args("operator ->",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("operator ->",1,"osg::PhysicsBodyPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__PhysicsBodyPtr,0))){
    SWIG_fail_ptr("PhysicsBodyPtr___deref__",1,SWIGTYPE_p_osg__PhysicsBodyPtr);
  }
  
  result = (osg::PhysicsBody *)(arg1)->operator ->();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_osg__PhysicsBody,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsBodyPtr_dcast(lua_State* L) {
  int SWIG_arg = 0;
  osg::FieldContainerPtr arg1 ;
  osg::FieldContainerPtr *argp1 ;
  osg::PhysicsBodyPtr result;
  
  SWIG_check_num_args("osg::PhysicsBodyPtr::dcast",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("osg::PhysicsBodyPtr::dcast",1,"osg::FieldContainerPtr const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_osg__FieldContainerPtr,0))){
    SWIG_fail_ptr("PhysicsBodyPtr_dcast",1,SWIGTYPE_p_osg__FieldContainerPtr);
  }
  arg1 = *argp1;
  
  result = osg::PhysicsBodyPtr::dcast(arg1);
  {
    osg::PhysicsBodyPtr * resultptr = new osg::PhysicsBodyPtr((const osg::PhysicsBodyPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_osg__PhysicsBodyPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsBodyPtr_create(lua_State* L) {
  int SWIG_arg = 0;
  osg::PhysicsBodyPtr *arg1 = (osg::PhysicsBodyPtr *) 0 ;
  osg::PhysicsWorldPtr arg2 ;
  osg::PhysicsWorldPtr *argp2 ;
  osg::PhysicsBodyPtr result;
  
  SWIG_check_num_args("create",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("create",1,"osg::PhysicsBodyPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("create",2,"osg::PhysicsWorldPtr");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__PhysicsBodyPtr,0))){
    SWIG_fail_ptr("PhysicsBodyPtr_create",1,SWIGTYPE_p_osg__PhysicsBodyPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_osg__PhysicsWorldPtr,0))){
    SWIG_fail_ptr("PhysicsBodyPtr_create",2,SWIGTYPE_p_osg__PhysicsWorldPtr);
  }
  arg2 = *argp2;
  
  result = (*arg1)->create(arg2);
  {
    osg::PhysicsBodyPtr * resultptr = new osg::PhysicsBodyPtr((const osg::PhysicsBodyPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_osg__PhysicsBodyPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsBodyPtr_setEnable(lua_State* L) {
  int SWIG_arg = 0;
  osg::PhysicsBodyPtr *arg1 = (osg::PhysicsBodyPtr *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("setEnable",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setEnable",1,"osg::PhysicsBodyPtr *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("setEnable",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__PhysicsBodyPtr,0))){
    SWIG_fail_ptr("PhysicsBodyPtr_setEnable",1,SWIGTYPE_p_osg__PhysicsBodyPtr);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (*arg1)->setEnable(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsBodyPtr_getEnable(lua_State* L) {
  int SWIG_arg = 0;
  osg::PhysicsBodyPtr *arg1 = (osg::PhysicsBodyPtr *) 0 ;
  bool result;
  
  SWIG_check_num_args("getEnable",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getEnable",1,"osg::PhysicsBodyPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__PhysicsBodyPtr,0))){
    SWIG_fail_ptr("PhysicsBodyPtr_getEnable",1,SWIGTYPE_p_osg__PhysicsBodyPtr);
  }
  
  result = (bool)(*arg1)->getEnable();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsBodyPtr_addForce(lua_State* L) {
  int SWIG_arg = 0;
  osg::PhysicsBodyPtr *arg1 = (osg::PhysicsBodyPtr *) 0 ;
  osg::Vec3f *arg2 = 0 ;
  
  SWIG_check_num_args("addForce",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("addForce",1,"osg::PhysicsBodyPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("addForce",2,"osg::Vec3f const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__PhysicsBodyPtr,0))){
    SWIG_fail_ptr("PhysicsBodyPtr_addForce",1,SWIGTYPE_p_osg__PhysicsBodyPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__Vec3f,0))){
    SWIG_fail_ptr("PhysicsBodyPtr_addForce",2,SWIGTYPE_p_osg__Vec3f);
  }
  
  (*arg1)->addForce((osg::Vec3f const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsBodyPtr_addTorque(lua_State* L) {
  int SWIG_arg = 0;
  osg::PhysicsBodyPtr *arg1 = (osg::PhysicsBodyPtr *) 0 ;
  osg::Vec3f *arg2 = 0 ;
  
  SWIG_check_num_args("addTorque",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("addTorque",1,"osg::PhysicsBodyPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("addTorque",2,"osg::Vec3f const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__PhysicsBodyPtr,0))){
    SWIG_fail_ptr("PhysicsBodyPtr_addTorque",1,SWIGTYPE_p_osg__PhysicsBodyPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__Vec3f,0))){
    SWIG_fail_ptr("PhysicsBodyPtr_addTorque",2,SWIGTYPE_p_osg__Vec3f);
  }
  
  (*arg1)->addTorque((osg::Vec3f const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsBodyPtr_addRelForce(lua_State* L) {
  int SWIG_arg = 0;
  osg::PhysicsBodyPtr *arg1 = (osg::PhysicsBodyPtr *) 0 ;
  osg::Vec3f *arg2 = 0 ;
  
  SWIG_check_num_args("addRelForce",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("addRelForce",1,"osg::PhysicsBodyPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("addRelForce",2,"osg::Vec3f const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__PhysicsBodyPtr,0))){
    SWIG_fail_ptr("PhysicsBodyPtr_addRelForce",1,SWIGTYPE_p_osg__PhysicsBodyPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__Vec3f,0))){
    SWIG_fail_ptr("PhysicsBodyPtr_addRelForce",2,SWIGTYPE_p_osg__Vec3f);
  }
  
  (*arg1)->addRelForce((osg::Vec3f const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsBodyPtr_addRelTorque(lua_State* L) {
  int SWIG_arg = 0;
  osg::PhysicsBodyPtr *arg1 = (osg::PhysicsBodyPtr *) 0 ;
  osg::Vec3f *arg2 = 0 ;
  
  SWIG_check_num_args("addRelTorque",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("addRelTorque",1,"osg::PhysicsBodyPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("addRelTorque",2,"osg::Vec3f const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__PhysicsBodyPtr,0))){
    SWIG_fail_ptr("PhysicsBodyPtr_addRelTorque",1,SWIGTYPE_p_osg__PhysicsBodyPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__Vec3f,0))){
    SWIG_fail_ptr("PhysicsBodyPtr_addRelTorque",2,SWIGTYPE_p_osg__Vec3f);
  }
  
  (*arg1)->addRelTorque((osg::Vec3f const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsBodyPtr_addForceAtPos(lua_State* L) {
  int SWIG_arg = 0;
  osg::PhysicsBodyPtr *arg1 = (osg::PhysicsBodyPtr *) 0 ;
  osg::Vec3f *arg2 = 0 ;
  osg::Vec3f *arg3 = 0 ;
  
  SWIG_check_num_args("addForceAtPos",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("addForceAtPos",1,"osg::PhysicsBodyPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("addForceAtPos",2,"osg::Vec3f const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("addForceAtPos",3,"osg::Vec3f const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__PhysicsBodyPtr,0))){
    SWIG_fail_ptr("PhysicsBodyPtr_addForceAtPos",1,SWIGTYPE_p_osg__PhysicsBodyPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__Vec3f,0))){
    SWIG_fail_ptr("PhysicsBodyPtr_addForceAtPos",2,SWIGTYPE_p_osg__Vec3f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_osg__Vec3f,0))){
    SWIG_fail_ptr("PhysicsBodyPtr_addForceAtPos",3,SWIGTYPE_p_osg__Vec3f);
  }
  
  (*arg1)->addForceAtPos((osg::Vec3f const &)*arg2,(osg::Vec3f const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsBodyPtr_addForceAtRelPos(lua_State* L) {
  int SWIG_arg = 0;
  osg::PhysicsBodyPtr *arg1 = (osg::PhysicsBodyPtr *) 0 ;
  osg::Vec3f *arg2 = 0 ;
  osg::Vec3f *arg3 = 0 ;
  
  SWIG_check_num_args("addForceAtRelPos",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("addForceAtRelPos",1,"osg::PhysicsBodyPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("addForceAtRelPos",2,"osg::Vec3f const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("addForceAtRelPos",3,"osg::Vec3f const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__PhysicsBodyPtr,0))){
    SWIG_fail_ptr("PhysicsBodyPtr_addForceAtRelPos",1,SWIGTYPE_p_osg__PhysicsBodyPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__Vec3f,0))){
    SWIG_fail_ptr("PhysicsBodyPtr_addForceAtRelPos",2,SWIGTYPE_p_osg__Vec3f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_osg__Vec3f,0))){
    SWIG_fail_ptr("PhysicsBodyPtr_addForceAtRelPos",3,SWIGTYPE_p_osg__Vec3f);
  }
  
  (*arg1)->addForceAtRelPos((osg::Vec3f const &)*arg2,(osg::Vec3f const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsBodyPtr_addRelForceAtPos(lua_State* L) {
  int SWIG_arg = 0;
  osg::PhysicsBodyPtr *arg1 = (osg::PhysicsBodyPtr *) 0 ;
  osg::Vec3f *arg2 = 0 ;
  osg::Vec3f *arg3 = 0 ;
  
  SWIG_check_num_args("addRelForceAtPos",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("addRelForceAtPos",1,"osg::PhysicsBodyPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("addRelForceAtPos",2,"osg::Vec3f const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("addRelForceAtPos",3,"osg::Vec3f const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__PhysicsBodyPtr,0))){
    SWIG_fail_ptr("PhysicsBodyPtr_addRelForceAtPos",1,SWIGTYPE_p_osg__PhysicsBodyPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__Vec3f,0))){
    SWIG_fail_ptr("PhysicsBodyPtr_addRelForceAtPos",2,SWIGTYPE_p_osg__Vec3f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_osg__Vec3f,0))){
    SWIG_fail_ptr("PhysicsBodyPtr_addRelForceAtPos",3,SWIGTYPE_p_osg__Vec3f);
  }
  
  (*arg1)->addRelForceAtPos((osg::Vec3f const &)*arg2,(osg::Vec3f const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsBodyPtr_addRelForceAtRelPos(lua_State* L) {
  int SWIG_arg = 0;
  osg::PhysicsBodyPtr *arg1 = (osg::PhysicsBodyPtr *) 0 ;
  osg::Vec3f *arg2 = 0 ;
  osg::Vec3f *arg3 = 0 ;
  
  SWIG_check_num_args("addRelForceAtRelPos",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("addRelForceAtRelPos",1,"osg::PhysicsBodyPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("addRelForceAtRelPos",2,"osg::Vec3f const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("addRelForceAtRelPos",3,"osg::Vec3f const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__PhysicsBodyPtr,0))){
    SWIG_fail_ptr("PhysicsBodyPtr_addRelForceAtRelPos",1,SWIGTYPE_p_osg__PhysicsBodyPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__Vec3f,0))){
    SWIG_fail_ptr("PhysicsBodyPtr_addRelForceAtRelPos",2,SWIGTYPE_p_osg__Vec3f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_osg__Vec3f,0))){
    SWIG_fail_ptr("PhysicsBodyPtr_addRelForceAtRelPos",3,SWIGTYPE_p_osg__Vec3f);
  }
  
  (*arg1)->addRelForceAtRelPos((osg::Vec3f const &)*arg2,(osg::Vec3f const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsBodyPtr_getRelPointPos(lua_State* L) {
  int SWIG_arg = 0;
  osg::PhysicsBodyPtr *arg1 = (osg::PhysicsBodyPtr *) 0 ;
  osg::Vec3f *arg2 = 0 ;
  osg::Vec3f *arg3 = 0 ;
  
  SWIG_check_num_args("getRelPointPos",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getRelPointPos",1,"osg::PhysicsBodyPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("getRelPointPos",2,"osg::Vec3f const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("getRelPointPos",3,"osg::Vec3f &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__PhysicsBodyPtr,0))){
    SWIG_fail_ptr("PhysicsBodyPtr_getRelPointPos",1,SWIGTYPE_p_osg__PhysicsBodyPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__Vec3f,0))){
    SWIG_fail_ptr("PhysicsBodyPtr_getRelPointPos",2,SWIGTYPE_p_osg__Vec3f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_osg__Vec3f,0))){
    SWIG_fail_ptr("PhysicsBodyPtr_getRelPointPos",3,SWIGTYPE_p_osg__Vec3f);
  }
  
  (*arg1)->getRelPointPos((osg::Vec3f const &)*arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsBodyPtr_getRelPointVel(lua_State* L) {
  int SWIG_arg = 0;
  osg::PhysicsBodyPtr *arg1 = (osg::PhysicsBodyPtr *) 0 ;
  osg::Vec3f *arg2 = 0 ;
  osg::Vec3f *arg3 = 0 ;
  
  SWIG_check_num_args("getRelPointVel",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getRelPointVel",1,"osg::PhysicsBodyPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("getRelPointVel",2,"osg::Vec3f const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("getRelPointVel",3,"osg::Vec3f &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__PhysicsBodyPtr,0))){
    SWIG_fail_ptr("PhysicsBodyPtr_getRelPointVel",1,SWIGTYPE_p_osg__PhysicsBodyPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__Vec3f,0))){
    SWIG_fail_ptr("PhysicsBodyPtr_getRelPointVel",2,SWIGTYPE_p_osg__Vec3f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_osg__Vec3f,0))){
    SWIG_fail_ptr("PhysicsBodyPtr_getRelPointVel",3,SWIGTYPE_p_osg__Vec3f);
  }
  
  (*arg1)->getRelPointVel((osg::Vec3f const &)*arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsBodyPtr_getPointVel(lua_State* L) {
  int SWIG_arg = 0;
  osg::PhysicsBodyPtr *arg1 = (osg::PhysicsBodyPtr *) 0 ;
  osg::Vec3f *arg2 = 0 ;
  osg::Vec3f *arg3 = 0 ;
  
  SWIG_check_num_args("getPointVel",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getPointVel",1,"osg::PhysicsBodyPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("getPointVel",2,"osg::Vec3f const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("getPointVel",3,"osg::Vec3f &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__PhysicsBodyPtr,0))){
    SWIG_fail_ptr("PhysicsBodyPtr_getPointVel",1,SWIGTYPE_p_osg__PhysicsBodyPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__Vec3f,0))){
    SWIG_fail_ptr("PhysicsBodyPtr_getPointVel",2,SWIGTYPE_p_osg__Vec3f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_osg__Vec3f,0))){
    SWIG_fail_ptr("PhysicsBodyPtr_getPointVel",3,SWIGTYPE_p_osg__Vec3f);
  }
  
  (*arg1)->getPointVel((osg::Vec3f const &)*arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsBodyPtr_getPosRelPoint(lua_State* L) {
  int SWIG_arg = 0;
  osg::PhysicsBodyPtr *arg1 = (osg::PhysicsBodyPtr *) 0 ;
  osg::Vec3f *arg2 = 0 ;
  osg::Vec3f *arg3 = 0 ;
  
  SWIG_check_num_args("getPosRelPoint",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getPosRelPoint",1,"osg::PhysicsBodyPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("getPosRelPoint",2,"osg::Vec3f const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("getPosRelPoint",3,"osg::Vec3f &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__PhysicsBodyPtr,0))){
    SWIG_fail_ptr("PhysicsBodyPtr_getPosRelPoint",1,SWIGTYPE_p_osg__PhysicsBodyPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__Vec3f,0))){
    SWIG_fail_ptr("PhysicsBodyPtr_getPosRelPoint",2,SWIGTYPE_p_osg__Vec3f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_osg__Vec3f,0))){
    SWIG_fail_ptr("PhysicsBodyPtr_getPosRelPoint",3,SWIGTYPE_p_osg__Vec3f);
  }
  
  (*arg1)->getPosRelPoint((osg::Vec3f const &)*arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsBodyPtr_vectorToWorld(lua_State* L) {
  int SWIG_arg = 0;
  osg::PhysicsBodyPtr *arg1 = (osg::PhysicsBodyPtr *) 0 ;
  osg::Vec3f *arg2 = 0 ;
  osg::Vec3f *arg3 = 0 ;
  
  SWIG_check_num_args("vectorToWorld",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("vectorToWorld",1,"osg::PhysicsBodyPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("vectorToWorld",2,"osg::Vec3f const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("vectorToWorld",3,"osg::Vec3f &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__PhysicsBodyPtr,0))){
    SWIG_fail_ptr("PhysicsBodyPtr_vectorToWorld",1,SWIGTYPE_p_osg__PhysicsBodyPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__Vec3f,0))){
    SWIG_fail_ptr("PhysicsBodyPtr_vectorToWorld",2,SWIGTYPE_p_osg__Vec3f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_osg__Vec3f,0))){
    SWIG_fail_ptr("PhysicsBodyPtr_vectorToWorld",3,SWIGTYPE_p_osg__Vec3f);
  }
  
  (*arg1)->vectorToWorld((osg::Vec3f const &)*arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsBodyPtr_vectorFromWorld(lua_State* L) {
  int SWIG_arg = 0;
  osg::PhysicsBodyPtr *arg1 = (osg::PhysicsBodyPtr *) 0 ;
  osg::Vec3f *arg2 = 0 ;
  osg::Vec3f *arg3 = 0 ;
  
  SWIG_check_num_args("vectorFromWorld",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("vectorFromWorld",1,"osg::PhysicsBodyPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("vectorFromWorld",2,"osg::Vec3f const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("vectorFromWorld",3,"osg::Vec3f &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__PhysicsBodyPtr,0))){
    SWIG_fail_ptr("PhysicsBodyPtr_vectorFromWorld",1,SWIGTYPE_p_osg__PhysicsBodyPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__Vec3f,0))){
    SWIG_fail_ptr("PhysicsBodyPtr_vectorFromWorld",2,SWIGTYPE_p_osg__Vec3f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_osg__Vec3f,0))){
    SWIG_fail_ptr("PhysicsBodyPtr_vectorFromWorld",3,SWIGTYPE_p_osg__Vec3f);
  }
  
  (*arg1)->vectorFromWorld((osg::Vec3f const &)*arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsBodyPtr_setAutoDisableDefaults(lua_State* L) {
  int SWIG_arg = 0;
  osg::PhysicsBodyPtr *arg1 = (osg::PhysicsBodyPtr *) 0 ;
  
  SWIG_check_num_args("setAutoDisableDefaults",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setAutoDisableDefaults",1,"osg::PhysicsBodyPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__PhysicsBodyPtr,0))){
    SWIG_fail_ptr("PhysicsBodyPtr_setAutoDisableDefaults",1,SWIGTYPE_p_osg__PhysicsBodyPtr);
  }
  
  (*arg1)->setAutoDisableDefaults();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsBodyPtr_getNumJoints(lua_State* L) {
  int SWIG_arg = 0;
  osg::PhysicsBodyPtr *arg1 = (osg::PhysicsBodyPtr *) 0 ;
  osg::Int32 result;
  
  SWIG_check_num_args("getNumJoints",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getNumJoints",1,"osg::PhysicsBodyPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__PhysicsBodyPtr,0))){
    SWIG_fail_ptr("PhysicsBodyPtr_getNumJoints",1,SWIGTYPE_p_osg__PhysicsBodyPtr);
  }
  
  result = (osg::Int32)(*arg1)->getNumJoints();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsBodyPtr_initDefaults(lua_State* L) {
  int SWIG_arg = 0;
  osg::PhysicsBodyPtr *arg1 = (osg::PhysicsBodyPtr *) 0 ;
  
  SWIG_check_num_args("initDefaults",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("initDefaults",1,"osg::PhysicsBodyPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__PhysicsBodyPtr,0))){
    SWIG_fail_ptr("PhysicsBodyPtr_initDefaults",1,SWIGTYPE_p_osg__PhysicsBodyPtr);
  }
  
  (*arg1)->initDefaults();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsBodyPtr_resetMass(lua_State* L) {
  int SWIG_arg = 0;
  osg::PhysicsBodyPtr *arg1 = (osg::PhysicsBodyPtr *) 0 ;
  
  SWIG_check_num_args("resetMass",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("resetMass",1,"osg::PhysicsBodyPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__PhysicsBodyPtr,0))){
    SWIG_fail_ptr("PhysicsBodyPtr_resetMass",1,SWIGTYPE_p_osg__PhysicsBodyPtr);
  }
  
  (*arg1)->resetMass();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsBodyPtr_setMassParams(lua_State* L) {
  int SWIG_arg = 0;
  osg::PhysicsBodyPtr *arg1 = (osg::PhysicsBodyPtr *) 0 ;
  osg::Real32 arg2 ;
  osg::Vec3f *arg3 = 0 ;
  osg::Real32 arg4 ;
  osg::Real32 arg5 ;
  osg::Real32 arg6 ;
  osg::Real32 arg7 ;
  osg::Real32 arg8 ;
  osg::Real32 arg9 ;
  
  SWIG_check_num_args("setMassParams",9,9)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setMassParams",1,"osg::PhysicsBodyPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("setMassParams",2,"osg::Real32");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("setMassParams",3,"osg::Vec3f const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("setMassParams",4,"osg::Real32");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("setMassParams",5,"osg::Real32");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("setMassParams",6,"osg::Real32");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("setMassParams",7,"osg::Real32");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("setMassParams",8,"osg::Real32");
  if(!lua_isnumber(L,9)) SWIG_fail_arg("setMassParams",9,"osg::Real32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__PhysicsBodyPtr,0))){
    SWIG_fail_ptr("PhysicsBodyPtr_setMassParams",1,SWIGTYPE_p_osg__PhysicsBodyPtr);
  }
  
  arg2 = (osg::Real32)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_osg__Vec3f,0))){
    SWIG_fail_ptr("PhysicsBodyPtr_setMassParams",3,SWIGTYPE_p_osg__Vec3f);
  }
  
  arg4 = (osg::Real32)lua_tonumber(L, 4);
  arg5 = (osg::Real32)lua_tonumber(L, 5);
  arg6 = (osg::Real32)lua_tonumber(L, 6);
  arg7 = (osg::Real32)lua_tonumber(L, 7);
  arg8 = (osg::Real32)lua_tonumber(L, 8);
  arg9 = (osg::Real32)lua_tonumber(L, 9);
  (*arg1)->setMassParams(arg2,(osg::Vec3f const &)*arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsBodyPtr_setSphereMass(lua_State* L) {
  int SWIG_arg = 0;
  osg::PhysicsBodyPtr *arg1 = (osg::PhysicsBodyPtr *) 0 ;
  osg::Real32 arg2 ;
  osg::Real32 arg3 ;
  
  SWIG_check_num_args("setSphereMass",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setSphereMass",1,"osg::PhysicsBodyPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("setSphereMass",2,"osg::Real32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("setSphereMass",3,"osg::Real32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__PhysicsBodyPtr,0))){
    SWIG_fail_ptr("PhysicsBodyPtr_setSphereMass",1,SWIGTYPE_p_osg__PhysicsBodyPtr);
  }
  
  arg2 = (osg::Real32)lua_tonumber(L, 2);
  arg3 = (osg::Real32)lua_tonumber(L, 3);
  (*arg1)->setSphereMass(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsBodyPtr_setSphereMassTotal(lua_State* L) {
  int SWIG_arg = 0;
  osg::PhysicsBodyPtr *arg1 = (osg::PhysicsBodyPtr *) 0 ;
  osg::Real32 arg2 ;
  osg::Real32 arg3 ;
  
  SWIG_check_num_args("setSphereMassTotal",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setSphereMassTotal",1,"osg::PhysicsBodyPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("setSphereMassTotal",2,"osg::Real32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("setSphereMassTotal",3,"osg::Real32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__PhysicsBodyPtr,0))){
    SWIG_fail_ptr("PhysicsBodyPtr_setSphereMassTotal",1,SWIGTYPE_p_osg__PhysicsBodyPtr);
  }
  
  arg2 = (osg::Real32)lua_tonumber(L, 2);
  arg3 = (osg::Real32)lua_tonumber(L, 3);
  (*arg1)->setSphereMassTotal(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsBodyPtr_setCapsuleMass(lua_State* L) {
  int SWIG_arg = 0;
  osg::PhysicsBodyPtr *arg1 = (osg::PhysicsBodyPtr *) 0 ;
  osg::Real32 arg2 ;
  osg::Int32 arg3 ;
  osg::Real32 arg4 ;
  osg::Real32 arg5 ;
  
  SWIG_check_num_args("setCapsuleMass",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setCapsuleMass",1,"osg::PhysicsBodyPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("setCapsuleMass",2,"osg::Real32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("setCapsuleMass",3,"osg::Int32");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("setCapsuleMass",4,"osg::Real32");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("setCapsuleMass",5,"osg::Real32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__PhysicsBodyPtr,0))){
    SWIG_fail_ptr("PhysicsBodyPtr_setCapsuleMass",1,SWIGTYPE_p_osg__PhysicsBodyPtr);
  }
  
  arg2 = (osg::Real32)lua_tonumber(L, 2);
  arg3 = (osg::Int32)lua_tonumber(L, 3);
  arg4 = (osg::Real32)lua_tonumber(L, 4);
  arg5 = (osg::Real32)lua_tonumber(L, 5);
  (*arg1)->setCapsuleMass(arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsBodyPtr_setCapsuleMassTotal(lua_State* L) {
  int SWIG_arg = 0;
  osg::PhysicsBodyPtr *arg1 = (osg::PhysicsBodyPtr *) 0 ;
  osg::Real32 arg2 ;
  osg::Int32 arg3 ;
  osg::Real32 arg4 ;
  osg::Real32 arg5 ;
  
  SWIG_check_num_args("setCapsuleMassTotal",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setCapsuleMassTotal",1,"osg::PhysicsBodyPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("setCapsuleMassTotal",2,"osg::Real32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("setCapsuleMassTotal",3,"osg::Int32");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("setCapsuleMassTotal",4,"osg::Real32");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("setCapsuleMassTotal",5,"osg::Real32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__PhysicsBodyPtr,0))){
    SWIG_fail_ptr("PhysicsBodyPtr_setCapsuleMassTotal",1,SWIGTYPE_p_osg__PhysicsBodyPtr);
  }
  
  arg2 = (osg::Real32)lua_tonumber(L, 2);
  arg3 = (osg::Int32)lua_tonumber(L, 3);
  arg4 = (osg::Real32)lua_tonumber(L, 4);
  arg5 = (osg::Real32)lua_tonumber(L, 5);
  (*arg1)->setCapsuleMassTotal(arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsBodyPtr_setBoxMass(lua_State* L) {
  int SWIG_arg = 0;
  osg::PhysicsBodyPtr *arg1 = (osg::PhysicsBodyPtr *) 0 ;
  osg::Real32 arg2 ;
  osg::Real32 arg3 ;
  osg::Real32 arg4 ;
  osg::Real32 arg5 ;
  
  SWIG_check_num_args("setBoxMass",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setBoxMass",1,"osg::PhysicsBodyPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("setBoxMass",2,"osg::Real32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("setBoxMass",3,"osg::Real32");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("setBoxMass",4,"osg::Real32");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("setBoxMass",5,"osg::Real32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__PhysicsBodyPtr,0))){
    SWIG_fail_ptr("PhysicsBodyPtr_setBoxMass",1,SWIGTYPE_p_osg__PhysicsBodyPtr);
  }
  
  arg2 = (osg::Real32)lua_tonumber(L, 2);
  arg3 = (osg::Real32)lua_tonumber(L, 3);
  arg4 = (osg::Real32)lua_tonumber(L, 4);
  arg5 = (osg::Real32)lua_tonumber(L, 5);
  (*arg1)->setBoxMass(arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsBodyPtr_setBoxMassTotal(lua_State* L) {
  int SWIG_arg = 0;
  osg::PhysicsBodyPtr *arg1 = (osg::PhysicsBodyPtr *) 0 ;
  osg::Real32 arg2 ;
  osg::Real32 arg3 ;
  osg::Real32 arg4 ;
  osg::Real32 arg5 ;
  
  SWIG_check_num_args("setBoxMassTotal",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setBoxMassTotal",1,"osg::PhysicsBodyPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("setBoxMassTotal",2,"osg::Real32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("setBoxMassTotal",3,"osg::Real32");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("setBoxMassTotal",4,"osg::Real32");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("setBoxMassTotal",5,"osg::Real32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__PhysicsBodyPtr,0))){
    SWIG_fail_ptr("PhysicsBodyPtr_setBoxMassTotal",1,SWIGTYPE_p_osg__PhysicsBodyPtr);
  }
  
  arg2 = (osg::Real32)lua_tonumber(L, 2);
  arg3 = (osg::Real32)lua_tonumber(L, 3);
  arg4 = (osg::Real32)lua_tonumber(L, 4);
  arg5 = (osg::Real32)lua_tonumber(L, 5);
  (*arg1)->setBoxMassTotal(arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsBodyPtr_adjustMass(lua_State* L) {
  int SWIG_arg = 0;
  osg::PhysicsBodyPtr *arg1 = (osg::PhysicsBodyPtr *) 0 ;
  osg::Real32 arg2 ;
  
  SWIG_check_num_args("adjustMass",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("adjustMass",1,"osg::PhysicsBodyPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("adjustMass",2,"osg::Real32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__PhysicsBodyPtr,0))){
    SWIG_fail_ptr("PhysicsBodyPtr_adjustMass",1,SWIGTYPE_p_osg__PhysicsBodyPtr);
  }
  
  arg2 = (osg::Real32)lua_tonumber(L, 2);
  (*arg1)->adjustMass(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsBodyPtr_translateMass(lua_State* L) {
  int SWIG_arg = 0;
  osg::PhysicsBodyPtr *arg1 = (osg::PhysicsBodyPtr *) 0 ;
  osg::Vec3f *arg2 = 0 ;
  
  SWIG_check_num_args("translateMass",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("translateMass",1,"osg::PhysicsBodyPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("translateMass",2,"osg::Vec3f const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__PhysicsBodyPtr,0))){
    SWIG_fail_ptr("PhysicsBodyPtr_translateMass",1,SWIGTYPE_p_osg__PhysicsBodyPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__Vec3f,0))){
    SWIG_fail_ptr("PhysicsBodyPtr_translateMass",2,SWIGTYPE_p_osg__Vec3f);
  }
  
  (*arg1)->translateMass((osg::Vec3f const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsBodyPtr_rotateMass(lua_State* L) {
  int SWIG_arg = 0;
  osg::PhysicsBodyPtr *arg1 = (osg::PhysicsBodyPtr *) 0 ;
  osg::Matrix *arg2 = 0 ;
  
  SWIG_check_num_args("rotateMass",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rotateMass",1,"osg::PhysicsBodyPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("rotateMass",2,"osg::Matrix const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__PhysicsBodyPtr,0))){
    SWIG_fail_ptr("PhysicsBodyPtr_rotateMass",1,SWIGTYPE_p_osg__PhysicsBodyPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__Matrix,0))){
    SWIG_fail_ptr("PhysicsBodyPtr_rotateMass",2,SWIGTYPE_p_osg__Matrix);
  }
  
  (*arg1)->rotateMass((osg::Matrix const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsBodyPtr_setDamping(lua_State* L) {
  int SWIG_arg = 0;
  osg::PhysicsBodyPtr *arg1 = (osg::PhysicsBodyPtr *) 0 ;
  osg::Real32 arg2 ;
  osg::Real32 arg3 ;
  
  SWIG_check_num_args("setDamping",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setDamping",1,"osg::PhysicsBodyPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("setDamping",2,"osg::Real32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("setDamping",3,"osg::Real32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__PhysicsBodyPtr,0))){
    SWIG_fail_ptr("PhysicsBodyPtr_setDamping",1,SWIGTYPE_p_osg__PhysicsBodyPtr);
  }
  
  arg2 = (osg::Real32)lua_tonumber(L, 2);
  arg3 = (osg::Real32)lua_tonumber(L, 3);
  (*arg1)->setDamping(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsBodyPtr_setDampingDefaults(lua_State* L) {
  int SWIG_arg = 0;
  osg::PhysicsBodyPtr *arg1 = (osg::PhysicsBodyPtr *) 0 ;
  
  SWIG_check_num_args("setDampingDefaults",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setDampingDefaults",1,"osg::PhysicsBodyPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__PhysicsBodyPtr,0))){
    SWIG_fail_ptr("PhysicsBodyPtr_setDampingDefaults",1,SWIGTYPE_p_osg__PhysicsBodyPtr);
  }
  
  (*arg1)->setDampingDefaults();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsBodyPtr_getType(lua_State* L) {
  int SWIG_arg = 0;
  osg::PhysicsBodyPtr *arg1 = (osg::PhysicsBodyPtr *) 0 ;
  osg::FieldContainerType *result = 0 ;
  
  SWIG_check_num_args("getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getType",1,"osg::PhysicsBodyPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__PhysicsBodyPtr,0))){
    SWIG_fail_ptr("PhysicsBodyPtr_getType",1,SWIGTYPE_p_osg__PhysicsBodyPtr);
  }
  
  result = (osg::FieldContainerType *) &(*arg1)->getType();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_osg__FieldContainerType,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsBodyPtr_getGroupId(lua_State* L) {
  int SWIG_arg = 0;
  osg::PhysicsBodyPtr *arg1 = (osg::PhysicsBodyPtr *) 0 ;
  osg::UInt16 result;
  
  SWIG_check_num_args("getGroupId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getGroupId",1,"osg::PhysicsBodyPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__PhysicsBodyPtr,0))){
    SWIG_fail_ptr("PhysicsBodyPtr_getGroupId",1,SWIGTYPE_p_osg__PhysicsBodyPtr);
  }
  
  result = (osg::UInt16)(*arg1)->getGroupId();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsBodyPtr_getField__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  osg::PhysicsBodyPtr *arg1 = (osg::PhysicsBodyPtr *) 0 ;
  osg::UInt32 arg2 ;
  osg::Field *result = 0 ;
  
  SWIG_check_num_args("getField",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getField",1,"osg::PhysicsBodyPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getField",2,"osg::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__PhysicsBodyPtr,0))){
    SWIG_fail_ptr("PhysicsBodyPtr_getField",1,SWIGTYPE_p_osg__PhysicsBodyPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (osg::UInt32)lua_tonumber(L, 2);
  result = (osg::Field *)(*arg1)->getField(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_osg__Field,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsBodyPtr_getField__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  osg::PhysicsBodyPtr *arg1 = (osg::PhysicsBodyPtr *) 0 ;
  osg::Char8 *arg2 = (osg::Char8 *) 0 ;
  osg::Field *result = 0 ;
  
  SWIG_check_num_args("getField",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getField",1,"osg::PhysicsBodyPtr *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("getField",2,"osg::Char8 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__PhysicsBodyPtr,0))){
    SWIG_fail_ptr("PhysicsBodyPtr_getField",1,SWIGTYPE_p_osg__PhysicsBodyPtr);
  }
  
  arg2 = (osg::Char8 *)lua_tostring(L, 2);
  result = (osg::Field *)(*arg1)->getField((osg::Char8 const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_osg__Field,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsBodyPtr_getField(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_osg__PhysicsBodyPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_PhysicsBodyPtr_getField__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_osg__PhysicsBodyPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_PhysicsBodyPtr_getField__SWIG_1(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'PhysicsBodyPtr_getField'\n"
    "  Possible C/C++ prototypes are:\n"
    "    getField(osg::PhysicsBodyPtr *,osg::UInt32)\n"
    "    getField(osg::PhysicsBodyPtr *,osg::Char8 const *)\n");
  lua_error(L);return 0;
}


static int _wrap_PhysicsBodyPtr_shallowCopy(lua_State* L) {
  int SWIG_arg = 0;
  osg::PhysicsBodyPtr *arg1 = (osg::PhysicsBodyPtr *) 0 ;
  osg::FieldContainerPtr result;
  
  SWIG_check_num_args("shallowCopy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("shallowCopy",1,"osg::PhysicsBodyPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__PhysicsBodyPtr,0))){
    SWIG_fail_ptr("PhysicsBodyPtr_shallowCopy",1,SWIGTYPE_p_osg__PhysicsBodyPtr);
  }
  
  result = (*arg1)->shallowCopy();
  {
    osg::FieldContainerPtr * resultptr = new osg::FieldContainerPtr((const osg::FieldContainerPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_osg__FieldContainerPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_PhysicsBodyPtr(void *obj) {
osg::PhysicsBodyPtr *arg1 = (osg::PhysicsBodyPtr *) obj;
delete arg1;
}
static swig_lua_method swig_osg_PhysicsBodyPtr_methods[] = {
    {"__deref__", _wrap_PhysicsBodyPtr___deref__}, 
    {"create", _wrap_PhysicsBodyPtr_create}, 
    {"setEnable", _wrap_PhysicsBodyPtr_setEnable}, 
    {"getEnable", _wrap_PhysicsBodyPtr_getEnable}, 
    {"addForce", _wrap_PhysicsBodyPtr_addForce}, 
    {"addTorque", _wrap_PhysicsBodyPtr_addTorque}, 
    {"addRelForce", _wrap_PhysicsBodyPtr_addRelForce}, 
    {"addRelTorque", _wrap_PhysicsBodyPtr_addRelTorque}, 
    {"addForceAtPos", _wrap_PhysicsBodyPtr_addForceAtPos}, 
    {"addForceAtRelPos", _wrap_PhysicsBodyPtr_addForceAtRelPos}, 
    {"addRelForceAtPos", _wrap_PhysicsBodyPtr_addRelForceAtPos}, 
    {"addRelForceAtRelPos", _wrap_PhysicsBodyPtr_addRelForceAtRelPos}, 
    {"getRelPointPos", _wrap_PhysicsBodyPtr_getRelPointPos}, 
    {"getRelPointVel", _wrap_PhysicsBodyPtr_getRelPointVel}, 
    {"getPointVel", _wrap_PhysicsBodyPtr_getPointVel}, 
    {"getPosRelPoint", _wrap_PhysicsBodyPtr_getPosRelPoint}, 
    {"vectorToWorld", _wrap_PhysicsBodyPtr_vectorToWorld}, 
    {"vectorFromWorld", _wrap_PhysicsBodyPtr_vectorFromWorld}, 
    {"setAutoDisableDefaults", _wrap_PhysicsBodyPtr_setAutoDisableDefaults}, 
    {"getNumJoints", _wrap_PhysicsBodyPtr_getNumJoints}, 
    {"initDefaults", _wrap_PhysicsBodyPtr_initDefaults}, 
    {"resetMass", _wrap_PhysicsBodyPtr_resetMass}, 
    {"setMassParams", _wrap_PhysicsBodyPtr_setMassParams}, 
    {"setSphereMass", _wrap_PhysicsBodyPtr_setSphereMass}, 
    {"setSphereMassTotal", _wrap_PhysicsBodyPtr_setSphereMassTotal}, 
    {"setCapsuleMass", _wrap_PhysicsBodyPtr_setCapsuleMass}, 
    {"setCapsuleMassTotal", _wrap_PhysicsBodyPtr_setCapsuleMassTotal}, 
    {"setBoxMass", _wrap_PhysicsBodyPtr_setBoxMass}, 
    {"setBoxMassTotal", _wrap_PhysicsBodyPtr_setBoxMassTotal}, 
    {"adjustMass", _wrap_PhysicsBodyPtr_adjustMass}, 
    {"translateMass", _wrap_PhysicsBodyPtr_translateMass}, 
    {"rotateMass", _wrap_PhysicsBodyPtr_rotateMass}, 
    {"setDamping", _wrap_PhysicsBodyPtr_setDamping}, 
    {"setDampingDefaults", _wrap_PhysicsBodyPtr_setDampingDefaults}, 
    {"getType", _wrap_PhysicsBodyPtr_getType}, 
    {"getGroupId", _wrap_PhysicsBodyPtr_getGroupId}, 
    {"getField", _wrap_PhysicsBodyPtr_getField}, 
    {"shallowCopy", _wrap_PhysicsBodyPtr_shallowCopy}, 
    {0,0}
};
static swig_lua_attribute swig_osg_PhysicsBodyPtr_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_osg_PhysicsBodyPtr_bases[] = {0,0};
static const char *swig_osg_PhysicsBodyPtr_base_names[] = {"osg::FieldContainerPtr *",0};
static swig_lua_class _wrap_class_osg_PhysicsBodyPtr = { "PhysicsBodyPtr", &SWIGTYPE_p_osg__PhysicsBodyPtr,_wrap_new_PhysicsBodyPtr, swig_delete_PhysicsBodyPtr, swig_osg_PhysicsBodyPtr_methods, swig_osg_PhysicsBodyPtr_attributes, swig_osg_PhysicsBodyPtr_bases, swig_osg_PhysicsBodyPtr_base_names };

static int _wrap_PhysicsBody_create(lua_State* L) {
  int SWIG_arg = 0;
  osg::PhysicsWorldPtr arg1 ;
  osg::PhysicsWorldPtr *argp1 ;
  osg::PhysicsBodyPtr result;
  
  SWIG_check_num_args("osg::PhysicsBody::create",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("osg::PhysicsBody::create",1,"osg::PhysicsWorldPtr");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_osg__PhysicsWorldPtr,0))){
    SWIG_fail_ptr("PhysicsBody_create",1,SWIGTYPE_p_osg__PhysicsWorldPtr);
  }
  arg1 = *argp1;
  
  result = osg::PhysicsBody::create(arg1);
  {
    osg::PhysicsBodyPtr * resultptr = new osg::PhysicsBodyPtr((const osg::PhysicsBodyPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_osg__PhysicsBodyPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsBody_setEnable(lua_State* L) {
  int SWIG_arg = 0;
  osg::PhysicsBody *arg1 = (osg::PhysicsBody *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("setEnable",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setEnable",1,"osg::PhysicsBody *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("setEnable",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__PhysicsBody,0))){
    SWIG_fail_ptr("PhysicsBody_setEnable",1,SWIGTYPE_p_osg__PhysicsBody);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setEnable(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsBody_getEnable(lua_State* L) {
  int SWIG_arg = 0;
  osg::PhysicsBody *arg1 = (osg::PhysicsBody *) 0 ;
  bool result;
  
  SWIG_check_num_args("getEnable",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getEnable",1,"osg::PhysicsBody const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__PhysicsBody,0))){
    SWIG_fail_ptr("PhysicsBody_getEnable",1,SWIGTYPE_p_osg__PhysicsBody);
  }
  
  result = (bool)((osg::PhysicsBody const *)arg1)->getEnable();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsBody_addForce(lua_State* L) {
  int SWIG_arg = 0;
  osg::PhysicsBody *arg1 = (osg::PhysicsBody *) 0 ;
  osg::Vec3f *arg2 = 0 ;
  
  SWIG_check_num_args("addForce",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("addForce",1,"osg::PhysicsBody *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("addForce",2,"osg::Vec3f const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__PhysicsBody,0))){
    SWIG_fail_ptr("PhysicsBody_addForce",1,SWIGTYPE_p_osg__PhysicsBody);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__Vec3f,0))){
    SWIG_fail_ptr("PhysicsBody_addForce",2,SWIGTYPE_p_osg__Vec3f);
  }
  
  (arg1)->addForce((osg::Vec3f const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsBody_addTorque(lua_State* L) {
  int SWIG_arg = 0;
  osg::PhysicsBody *arg1 = (osg::PhysicsBody *) 0 ;
  osg::Vec3f *arg2 = 0 ;
  
  SWIG_check_num_args("addTorque",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("addTorque",1,"osg::PhysicsBody *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("addTorque",2,"osg::Vec3f const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__PhysicsBody,0))){
    SWIG_fail_ptr("PhysicsBody_addTorque",1,SWIGTYPE_p_osg__PhysicsBody);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__Vec3f,0))){
    SWIG_fail_ptr("PhysicsBody_addTorque",2,SWIGTYPE_p_osg__Vec3f);
  }
  
  (arg1)->addTorque((osg::Vec3f const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsBody_addRelForce(lua_State* L) {
  int SWIG_arg = 0;
  osg::PhysicsBody *arg1 = (osg::PhysicsBody *) 0 ;
  osg::Vec3f *arg2 = 0 ;
  
  SWIG_check_num_args("addRelForce",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("addRelForce",1,"osg::PhysicsBody *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("addRelForce",2,"osg::Vec3f const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__PhysicsBody,0))){
    SWIG_fail_ptr("PhysicsBody_addRelForce",1,SWIGTYPE_p_osg__PhysicsBody);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__Vec3f,0))){
    SWIG_fail_ptr("PhysicsBody_addRelForce",2,SWIGTYPE_p_osg__Vec3f);
  }
  
  (arg1)->addRelForce((osg::Vec3f const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsBody_addRelTorque(lua_State* L) {
  int SWIG_arg = 0;
  osg::PhysicsBody *arg1 = (osg::PhysicsBody *) 0 ;
  osg::Vec3f *arg2 = 0 ;
  
  SWIG_check_num_args("addRelTorque",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("addRelTorque",1,"osg::PhysicsBody *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("addRelTorque",2,"osg::Vec3f const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__PhysicsBody,0))){
    SWIG_fail_ptr("PhysicsBody_addRelTorque",1,SWIGTYPE_p_osg__PhysicsBody);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__Vec3f,0))){
    SWIG_fail_ptr("PhysicsBody_addRelTorque",2,SWIGTYPE_p_osg__Vec3f);
  }
  
  (arg1)->addRelTorque((osg::Vec3f const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsBody_addForceAtPos(lua_State* L) {
  int SWIG_arg = 0;
  osg::PhysicsBody *arg1 = (osg::PhysicsBody *) 0 ;
  osg::Vec3f *arg2 = 0 ;
  osg::Vec3f *arg3 = 0 ;
  
  SWIG_check_num_args("addForceAtPos",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("addForceAtPos",1,"osg::PhysicsBody *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("addForceAtPos",2,"osg::Vec3f const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("addForceAtPos",3,"osg::Vec3f const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__PhysicsBody,0))){
    SWIG_fail_ptr("PhysicsBody_addForceAtPos",1,SWIGTYPE_p_osg__PhysicsBody);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__Vec3f,0))){
    SWIG_fail_ptr("PhysicsBody_addForceAtPos",2,SWIGTYPE_p_osg__Vec3f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_osg__Vec3f,0))){
    SWIG_fail_ptr("PhysicsBody_addForceAtPos",3,SWIGTYPE_p_osg__Vec3f);
  }
  
  (arg1)->addForceAtPos((osg::Vec3f const &)*arg2,(osg::Vec3f const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsBody_addForceAtRelPos(lua_State* L) {
  int SWIG_arg = 0;
  osg::PhysicsBody *arg1 = (osg::PhysicsBody *) 0 ;
  osg::Vec3f *arg2 = 0 ;
  osg::Vec3f *arg3 = 0 ;
  
  SWIG_check_num_args("addForceAtRelPos",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("addForceAtRelPos",1,"osg::PhysicsBody *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("addForceAtRelPos",2,"osg::Vec3f const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("addForceAtRelPos",3,"osg::Vec3f const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__PhysicsBody,0))){
    SWIG_fail_ptr("PhysicsBody_addForceAtRelPos",1,SWIGTYPE_p_osg__PhysicsBody);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__Vec3f,0))){
    SWIG_fail_ptr("PhysicsBody_addForceAtRelPos",2,SWIGTYPE_p_osg__Vec3f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_osg__Vec3f,0))){
    SWIG_fail_ptr("PhysicsBody_addForceAtRelPos",3,SWIGTYPE_p_osg__Vec3f);
  }
  
  (arg1)->addForceAtRelPos((osg::Vec3f const &)*arg2,(osg::Vec3f const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsBody_addRelForceAtPos(lua_State* L) {
  int SWIG_arg = 0;
  osg::PhysicsBody *arg1 = (osg::PhysicsBody *) 0 ;
  osg::Vec3f *arg2 = 0 ;
  osg::Vec3f *arg3 = 0 ;
  
  SWIG_check_num_args("addRelForceAtPos",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("addRelForceAtPos",1,"osg::PhysicsBody *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("addRelForceAtPos",2,"osg::Vec3f const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("addRelForceAtPos",3,"osg::Vec3f const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__PhysicsBody,0))){
    SWIG_fail_ptr("PhysicsBody_addRelForceAtPos",1,SWIGTYPE_p_osg__PhysicsBody);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__Vec3f,0))){
    SWIG_fail_ptr("PhysicsBody_addRelForceAtPos",2,SWIGTYPE_p_osg__Vec3f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_osg__Vec3f,0))){
    SWIG_fail_ptr("PhysicsBody_addRelForceAtPos",3,SWIGTYPE_p_osg__Vec3f);
  }
  
  (arg1)->addRelForceAtPos((osg::Vec3f const &)*arg2,(osg::Vec3f const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsBody_addRelForceAtRelPos(lua_State* L) {
  int SWIG_arg = 0;
  osg::PhysicsBody *arg1 = (osg::PhysicsBody *) 0 ;
  osg::Vec3f *arg2 = 0 ;
  osg::Vec3f *arg3 = 0 ;
  
  SWIG_check_num_args("addRelForceAtRelPos",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("addRelForceAtRelPos",1,"osg::PhysicsBody *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("addRelForceAtRelPos",2,"osg::Vec3f const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("addRelForceAtRelPos",3,"osg::Vec3f const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__PhysicsBody,0))){
    SWIG_fail_ptr("PhysicsBody_addRelForceAtRelPos",1,SWIGTYPE_p_osg__PhysicsBody);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__Vec3f,0))){
    SWIG_fail_ptr("PhysicsBody_addRelForceAtRelPos",2,SWIGTYPE_p_osg__Vec3f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_osg__Vec3f,0))){
    SWIG_fail_ptr("PhysicsBody_addRelForceAtRelPos",3,SWIGTYPE_p_osg__Vec3f);
  }
  
  (arg1)->addRelForceAtRelPos((osg::Vec3f const &)*arg2,(osg::Vec3f const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsBody_getRelPointPos(lua_State* L) {
  int SWIG_arg = 0;
  osg::PhysicsBody *arg1 = (osg::PhysicsBody *) 0 ;
  osg::Vec3f *arg2 = 0 ;
  osg::Vec3f *arg3 = 0 ;
  
  SWIG_check_num_args("getRelPointPos",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getRelPointPos",1,"osg::PhysicsBody *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("getRelPointPos",2,"osg::Vec3f const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("getRelPointPos",3,"osg::Vec3f &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__PhysicsBody,0))){
    SWIG_fail_ptr("PhysicsBody_getRelPointPos",1,SWIGTYPE_p_osg__PhysicsBody);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__Vec3f,0))){
    SWIG_fail_ptr("PhysicsBody_getRelPointPos",2,SWIGTYPE_p_osg__Vec3f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_osg__Vec3f,0))){
    SWIG_fail_ptr("PhysicsBody_getRelPointPos",3,SWIGTYPE_p_osg__Vec3f);
  }
  
  (arg1)->getRelPointPos((osg::Vec3f const &)*arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsBody_getRelPointVel(lua_State* L) {
  int SWIG_arg = 0;
  osg::PhysicsBody *arg1 = (osg::PhysicsBody *) 0 ;
  osg::Vec3f *arg2 = 0 ;
  osg::Vec3f *arg3 = 0 ;
  
  SWIG_check_num_args("getRelPointVel",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getRelPointVel",1,"osg::PhysicsBody *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("getRelPointVel",2,"osg::Vec3f const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("getRelPointVel",3,"osg::Vec3f &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__PhysicsBody,0))){
    SWIG_fail_ptr("PhysicsBody_getRelPointVel",1,SWIGTYPE_p_osg__PhysicsBody);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__Vec3f,0))){
    SWIG_fail_ptr("PhysicsBody_getRelPointVel",2,SWIGTYPE_p_osg__Vec3f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_osg__Vec3f,0))){
    SWIG_fail_ptr("PhysicsBody_getRelPointVel",3,SWIGTYPE_p_osg__Vec3f);
  }
  
  (arg1)->getRelPointVel((osg::Vec3f const &)*arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsBody_getPointVel(lua_State* L) {
  int SWIG_arg = 0;
  osg::PhysicsBody *arg1 = (osg::PhysicsBody *) 0 ;
  osg::Vec3f *arg2 = 0 ;
  osg::Vec3f *arg3 = 0 ;
  
  SWIG_check_num_args("getPointVel",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getPointVel",1,"osg::PhysicsBody *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("getPointVel",2,"osg::Vec3f const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("getPointVel",3,"osg::Vec3f &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__PhysicsBody,0))){
    SWIG_fail_ptr("PhysicsBody_getPointVel",1,SWIGTYPE_p_osg__PhysicsBody);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__Vec3f,0))){
    SWIG_fail_ptr("PhysicsBody_getPointVel",2,SWIGTYPE_p_osg__Vec3f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_osg__Vec3f,0))){
    SWIG_fail_ptr("PhysicsBody_getPointVel",3,SWIGTYPE_p_osg__Vec3f);
  }
  
  (arg1)->getPointVel((osg::Vec3f const &)*arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsBody_getPosRelPoint(lua_State* L) {
  int SWIG_arg = 0;
  osg::PhysicsBody *arg1 = (osg::PhysicsBody *) 0 ;
  osg::Vec3f *arg2 = 0 ;
  osg::Vec3f *arg3 = 0 ;
  
  SWIG_check_num_args("getPosRelPoint",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getPosRelPoint",1,"osg::PhysicsBody *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("getPosRelPoint",2,"osg::Vec3f const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("getPosRelPoint",3,"osg::Vec3f &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__PhysicsBody,0))){
    SWIG_fail_ptr("PhysicsBody_getPosRelPoint",1,SWIGTYPE_p_osg__PhysicsBody);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__Vec3f,0))){
    SWIG_fail_ptr("PhysicsBody_getPosRelPoint",2,SWIGTYPE_p_osg__Vec3f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_osg__Vec3f,0))){
    SWIG_fail_ptr("PhysicsBody_getPosRelPoint",3,SWIGTYPE_p_osg__Vec3f);
  }
  
  (arg1)->getPosRelPoint((osg::Vec3f const &)*arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsBody_vectorToWorld(lua_State* L) {
  int SWIG_arg = 0;
  osg::PhysicsBody *arg1 = (osg::PhysicsBody *) 0 ;
  osg::Vec3f *arg2 = 0 ;
  osg::Vec3f *arg3 = 0 ;
  
  SWIG_check_num_args("vectorToWorld",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("vectorToWorld",1,"osg::PhysicsBody *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("vectorToWorld",2,"osg::Vec3f const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("vectorToWorld",3,"osg::Vec3f &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__PhysicsBody,0))){
    SWIG_fail_ptr("PhysicsBody_vectorToWorld",1,SWIGTYPE_p_osg__PhysicsBody);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__Vec3f,0))){
    SWIG_fail_ptr("PhysicsBody_vectorToWorld",2,SWIGTYPE_p_osg__Vec3f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_osg__Vec3f,0))){
    SWIG_fail_ptr("PhysicsBody_vectorToWorld",3,SWIGTYPE_p_osg__Vec3f);
  }
  
  (arg1)->vectorToWorld((osg::Vec3f const &)*arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsBody_vectorFromWorld(lua_State* L) {
  int SWIG_arg = 0;
  osg::PhysicsBody *arg1 = (osg::PhysicsBody *) 0 ;
  osg::Vec3f *arg2 = 0 ;
  osg::Vec3f *arg3 = 0 ;
  
  SWIG_check_num_args("vectorFromWorld",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("vectorFromWorld",1,"osg::PhysicsBody *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("vectorFromWorld",2,"osg::Vec3f const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("vectorFromWorld",3,"osg::Vec3f &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__PhysicsBody,0))){
    SWIG_fail_ptr("PhysicsBody_vectorFromWorld",1,SWIGTYPE_p_osg__PhysicsBody);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__Vec3f,0))){
    SWIG_fail_ptr("PhysicsBody_vectorFromWorld",2,SWIGTYPE_p_osg__Vec3f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_osg__Vec3f,0))){
    SWIG_fail_ptr("PhysicsBody_vectorFromWorld",3,SWIGTYPE_p_osg__Vec3f);
  }
  
  (arg1)->vectorFromWorld((osg::Vec3f const &)*arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsBody_setAutoDisableDefaults(lua_State* L) {
  int SWIG_arg = 0;
  osg::PhysicsBody *arg1 = (osg::PhysicsBody *) 0 ;
  
  SWIG_check_num_args("setAutoDisableDefaults",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setAutoDisableDefaults",1,"osg::PhysicsBody *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__PhysicsBody,0))){
    SWIG_fail_ptr("PhysicsBody_setAutoDisableDefaults",1,SWIGTYPE_p_osg__PhysicsBody);
  }
  
  (arg1)->setAutoDisableDefaults();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsBody_getNumJoints(lua_State* L) {
  int SWIG_arg = 0;
  osg::PhysicsBody *arg1 = (osg::PhysicsBody *) 0 ;
  osg::Int32 result;
  
  SWIG_check_num_args("getNumJoints",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getNumJoints",1,"osg::PhysicsBody *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__PhysicsBody,0))){
    SWIG_fail_ptr("PhysicsBody_getNumJoints",1,SWIGTYPE_p_osg__PhysicsBody);
  }
  
  result = (osg::Int32)(arg1)->getNumJoints();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsBody_initDefaults(lua_State* L) {
  int SWIG_arg = 0;
  osg::PhysicsBody *arg1 = (osg::PhysicsBody *) 0 ;
  
  SWIG_check_num_args("initDefaults",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("initDefaults",1,"osg::PhysicsBody *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__PhysicsBody,0))){
    SWIG_fail_ptr("PhysicsBody_initDefaults",1,SWIGTYPE_p_osg__PhysicsBody);
  }
  
  (arg1)->initDefaults();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsBody_resetMass(lua_State* L) {
  int SWIG_arg = 0;
  osg::PhysicsBody *arg1 = (osg::PhysicsBody *) 0 ;
  
  SWIG_check_num_args("resetMass",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("resetMass",1,"osg::PhysicsBody *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__PhysicsBody,0))){
    SWIG_fail_ptr("PhysicsBody_resetMass",1,SWIGTYPE_p_osg__PhysicsBody);
  }
  
  (arg1)->resetMass();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsBody_setMassParams(lua_State* L) {
  int SWIG_arg = 0;
  osg::PhysicsBody *arg1 = (osg::PhysicsBody *) 0 ;
  osg::Real32 arg2 ;
  osg::Vec3f *arg3 = 0 ;
  osg::Real32 arg4 ;
  osg::Real32 arg5 ;
  osg::Real32 arg6 ;
  osg::Real32 arg7 ;
  osg::Real32 arg8 ;
  osg::Real32 arg9 ;
  
  SWIG_check_num_args("setMassParams",9,9)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setMassParams",1,"osg::PhysicsBody *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("setMassParams",2,"osg::Real32");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("setMassParams",3,"osg::Vec3f const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("setMassParams",4,"osg::Real32");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("setMassParams",5,"osg::Real32");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("setMassParams",6,"osg::Real32");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("setMassParams",7,"osg::Real32");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("setMassParams",8,"osg::Real32");
  if(!lua_isnumber(L,9)) SWIG_fail_arg("setMassParams",9,"osg::Real32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__PhysicsBody,0))){
    SWIG_fail_ptr("PhysicsBody_setMassParams",1,SWIGTYPE_p_osg__PhysicsBody);
  }
  
  arg2 = (osg::Real32)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_osg__Vec3f,0))){
    SWIG_fail_ptr("PhysicsBody_setMassParams",3,SWIGTYPE_p_osg__Vec3f);
  }
  
  arg4 = (osg::Real32)lua_tonumber(L, 4);
  arg5 = (osg::Real32)lua_tonumber(L, 5);
  arg6 = (osg::Real32)lua_tonumber(L, 6);
  arg7 = (osg::Real32)lua_tonumber(L, 7);
  arg8 = (osg::Real32)lua_tonumber(L, 8);
  arg9 = (osg::Real32)lua_tonumber(L, 9);
  (arg1)->setMassParams(arg2,(osg::Vec3f const &)*arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsBody_setSphereMass(lua_State* L) {
  int SWIG_arg = 0;
  osg::PhysicsBody *arg1 = (osg::PhysicsBody *) 0 ;
  osg::Real32 arg2 ;
  osg::Real32 arg3 ;
  
  SWIG_check_num_args("setSphereMass",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setSphereMass",1,"osg::PhysicsBody *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("setSphereMass",2,"osg::Real32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("setSphereMass",3,"osg::Real32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__PhysicsBody,0))){
    SWIG_fail_ptr("PhysicsBody_setSphereMass",1,SWIGTYPE_p_osg__PhysicsBody);
  }
  
  arg2 = (osg::Real32)lua_tonumber(L, 2);
  arg3 = (osg::Real32)lua_tonumber(L, 3);
  (arg1)->setSphereMass(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsBody_setSphereMassTotal(lua_State* L) {
  int SWIG_arg = 0;
  osg::PhysicsBody *arg1 = (osg::PhysicsBody *) 0 ;
  osg::Real32 arg2 ;
  osg::Real32 arg3 ;
  
  SWIG_check_num_args("setSphereMassTotal",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setSphereMassTotal",1,"osg::PhysicsBody *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("setSphereMassTotal",2,"osg::Real32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("setSphereMassTotal",3,"osg::Real32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__PhysicsBody,0))){
    SWIG_fail_ptr("PhysicsBody_setSphereMassTotal",1,SWIGTYPE_p_osg__PhysicsBody);
  }
  
  arg2 = (osg::Real32)lua_tonumber(L, 2);
  arg3 = (osg::Real32)lua_tonumber(L, 3);
  (arg1)->setSphereMassTotal(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsBody_setCapsuleMass(lua_State* L) {
  int SWIG_arg = 0;
  osg::PhysicsBody *arg1 = (osg::PhysicsBody *) 0 ;
  osg::Real32 arg2 ;
  osg::Int32 arg3 ;
  osg::Real32 arg4 ;
  osg::Real32 arg5 ;
  
  SWIG_check_num_args("setCapsuleMass",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setCapsuleMass",1,"osg::PhysicsBody *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("setCapsuleMass",2,"osg::Real32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("setCapsuleMass",3,"osg::Int32");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("setCapsuleMass",4,"osg::Real32");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("setCapsuleMass",5,"osg::Real32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__PhysicsBody,0))){
    SWIG_fail_ptr("PhysicsBody_setCapsuleMass",1,SWIGTYPE_p_osg__PhysicsBody);
  }
  
  arg2 = (osg::Real32)lua_tonumber(L, 2);
  arg3 = (osg::Int32)lua_tonumber(L, 3);
  arg4 = (osg::Real32)lua_tonumber(L, 4);
  arg5 = (osg::Real32)lua_tonumber(L, 5);
  (arg1)->setCapsuleMass(arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsBody_setCapsuleMassTotal(lua_State* L) {
  int SWIG_arg = 0;
  osg::PhysicsBody *arg1 = (osg::PhysicsBody *) 0 ;
  osg::Real32 arg2 ;
  osg::Int32 arg3 ;
  osg::Real32 arg4 ;
  osg::Real32 arg5 ;
  
  SWIG_check_num_args("setCapsuleMassTotal",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setCapsuleMassTotal",1,"osg::PhysicsBody *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("setCapsuleMassTotal",2,"osg::Real32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("setCapsuleMassTotal",3,"osg::Int32");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("setCapsuleMassTotal",4,"osg::Real32");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("setCapsuleMassTotal",5,"osg::Real32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__PhysicsBody,0))){
    SWIG_fail_ptr("PhysicsBody_setCapsuleMassTotal",1,SWIGTYPE_p_osg__PhysicsBody);
  }
  
  arg2 = (osg::Real32)lua_tonumber(L, 2);
  arg3 = (osg::Int32)lua_tonumber(L, 3);
  arg4 = (osg::Real32)lua_tonumber(L, 4);
  arg5 = (osg::Real32)lua_tonumber(L, 5);
  (arg1)->setCapsuleMassTotal(arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsBody_setBoxMass(lua_State* L) {
  int SWIG_arg = 0;
  osg::PhysicsBody *arg1 = (osg::PhysicsBody *) 0 ;
  osg::Real32 arg2 ;
  osg::Real32 arg3 ;
  osg::Real32 arg4 ;
  osg::Real32 arg5 ;
  
  SWIG_check_num_args("setBoxMass",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setBoxMass",1,"osg::PhysicsBody *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("setBoxMass",2,"osg::Real32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("setBoxMass",3,"osg::Real32");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("setBoxMass",4,"osg::Real32");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("setBoxMass",5,"osg::Real32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__PhysicsBody,0))){
    SWIG_fail_ptr("PhysicsBody_setBoxMass",1,SWIGTYPE_p_osg__PhysicsBody);
  }
  
  arg2 = (osg::Real32)lua_tonumber(L, 2);
  arg3 = (osg::Real32)lua_tonumber(L, 3);
  arg4 = (osg::Real32)lua_tonumber(L, 4);
  arg5 = (osg::Real32)lua_tonumber(L, 5);
  (arg1)->setBoxMass(arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsBody_setBoxMassTotal(lua_State* L) {
  int SWIG_arg = 0;
  osg::PhysicsBody *arg1 = (osg::PhysicsBody *) 0 ;
  osg::Real32 arg2 ;
  osg::Real32 arg3 ;
  osg::Real32 arg4 ;
  osg::Real32 arg5 ;
  
  SWIG_check_num_args("setBoxMassTotal",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setBoxMassTotal",1,"osg::PhysicsBody *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("setBoxMassTotal",2,"osg::Real32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("setBoxMassTotal",3,"osg::Real32");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("setBoxMassTotal",4,"osg::Real32");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("setBoxMassTotal",5,"osg::Real32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__PhysicsBody,0))){
    SWIG_fail_ptr("PhysicsBody_setBoxMassTotal",1,SWIGTYPE_p_osg__PhysicsBody);
  }
  
  arg2 = (osg::Real32)lua_tonumber(L, 2);
  arg3 = (osg::Real32)lua_tonumber(L, 3);
  arg4 = (osg::Real32)lua_tonumber(L, 4);
  arg5 = (osg::Real32)lua_tonumber(L, 5);
  (arg1)->setBoxMassTotal(arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsBody_adjustMass(lua_State* L) {
  int SWIG_arg = 0;
  osg::PhysicsBody *arg1 = (osg::PhysicsBody *) 0 ;
  osg::Real32 arg2 ;
  
  SWIG_check_num_args("adjustMass",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("adjustMass",1,"osg::PhysicsBody *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("adjustMass",2,"osg::Real32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__PhysicsBody,0))){
    SWIG_fail_ptr("PhysicsBody_adjustMass",1,SWIGTYPE_p_osg__PhysicsBody);
  }
  
  arg2 = (osg::Real32)lua_tonumber(L, 2);
  (arg1)->adjustMass(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsBody_translateMass(lua_State* L) {
  int SWIG_arg = 0;
  osg::PhysicsBody *arg1 = (osg::PhysicsBody *) 0 ;
  osg::Vec3f *arg2 = 0 ;
  
  SWIG_check_num_args("translateMass",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("translateMass",1,"osg::PhysicsBody *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("translateMass",2,"osg::Vec3f const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__PhysicsBody,0))){
    SWIG_fail_ptr("PhysicsBody_translateMass",1,SWIGTYPE_p_osg__PhysicsBody);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__Vec3f,0))){
    SWIG_fail_ptr("PhysicsBody_translateMass",2,SWIGTYPE_p_osg__Vec3f);
  }
  
  (arg1)->translateMass((osg::Vec3f const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsBody_rotateMass(lua_State* L) {
  int SWIG_arg = 0;
  osg::PhysicsBody *arg1 = (osg::PhysicsBody *) 0 ;
  osg::Matrix *arg2 = 0 ;
  
  SWIG_check_num_args("rotateMass",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rotateMass",1,"osg::PhysicsBody *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("rotateMass",2,"osg::Matrix const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__PhysicsBody,0))){
    SWIG_fail_ptr("PhysicsBody_rotateMass",1,SWIGTYPE_p_osg__PhysicsBody);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__Matrix,0))){
    SWIG_fail_ptr("PhysicsBody_rotateMass",2,SWIGTYPE_p_osg__Matrix);
  }
  
  (arg1)->rotateMass((osg::Matrix const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsBody_setDamping(lua_State* L) {
  int SWIG_arg = 0;
  osg::PhysicsBody *arg1 = (osg::PhysicsBody *) 0 ;
  osg::Real32 arg2 ;
  osg::Real32 arg3 ;
  
  SWIG_check_num_args("setDamping",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setDamping",1,"osg::PhysicsBody *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("setDamping",2,"osg::Real32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("setDamping",3,"osg::Real32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__PhysicsBody,0))){
    SWIG_fail_ptr("PhysicsBody_setDamping",1,SWIGTYPE_p_osg__PhysicsBody);
  }
  
  arg2 = (osg::Real32)lua_tonumber(L, 2);
  arg3 = (osg::Real32)lua_tonumber(L, 3);
  (arg1)->setDamping(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsBody_setDampingDefaults(lua_State* L) {
  int SWIG_arg = 0;
  osg::PhysicsBody *arg1 = (osg::PhysicsBody *) 0 ;
  
  SWIG_check_num_args("setDampingDefaults",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setDampingDefaults",1,"osg::PhysicsBody *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__PhysicsBody,0))){
    SWIG_fail_ptr("PhysicsBody_setDampingDefaults",1,SWIGTYPE_p_osg__PhysicsBody);
  }
  
  (arg1)->setDampingDefaults();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static swig_lua_method swig_osg_PhysicsBody_methods[] = {
    {"setEnable", _wrap_PhysicsBody_setEnable}, 
    {"getEnable", _wrap_PhysicsBody_getEnable}, 
    {"addForce", _wrap_PhysicsBody_addForce}, 
    {"addTorque", _wrap_PhysicsBody_addTorque}, 
    {"addRelForce", _wrap_PhysicsBody_addRelForce}, 
    {"addRelTorque", _wrap_PhysicsBody_addRelTorque}, 
    {"addForceAtPos", _wrap_PhysicsBody_addForceAtPos}, 
    {"addForceAtRelPos", _wrap_PhysicsBody_addForceAtRelPos}, 
    {"addRelForceAtPos", _wrap_PhysicsBody_addRelForceAtPos}, 
    {"addRelForceAtRelPos", _wrap_PhysicsBody_addRelForceAtRelPos}, 
    {"getRelPointPos", _wrap_PhysicsBody_getRelPointPos}, 
    {"getRelPointVel", _wrap_PhysicsBody_getRelPointVel}, 
    {"getPointVel", _wrap_PhysicsBody_getPointVel}, 
    {"getPosRelPoint", _wrap_PhysicsBody_getPosRelPoint}, 
    {"vectorToWorld", _wrap_PhysicsBody_vectorToWorld}, 
    {"vectorFromWorld", _wrap_PhysicsBody_vectorFromWorld}, 
    {"setAutoDisableDefaults", _wrap_PhysicsBody_setAutoDisableDefaults}, 
    {"getNumJoints", _wrap_PhysicsBody_getNumJoints}, 
    {"initDefaults", _wrap_PhysicsBody_initDefaults}, 
    {"resetMass", _wrap_PhysicsBody_resetMass}, 
    {"setMassParams", _wrap_PhysicsBody_setMassParams}, 
    {"setSphereMass", _wrap_PhysicsBody_setSphereMass}, 
    {"setSphereMassTotal", _wrap_PhysicsBody_setSphereMassTotal}, 
    {"setCapsuleMass", _wrap_PhysicsBody_setCapsuleMass}, 
    {"setCapsuleMassTotal", _wrap_PhysicsBody_setCapsuleMassTotal}, 
    {"setBoxMass", _wrap_PhysicsBody_setBoxMass}, 
    {"setBoxMassTotal", _wrap_PhysicsBody_setBoxMassTotal}, 
    {"adjustMass", _wrap_PhysicsBody_adjustMass}, 
    {"translateMass", _wrap_PhysicsBody_translateMass}, 
    {"rotateMass", _wrap_PhysicsBody_rotateMass}, 
    {"setDamping", _wrap_PhysicsBody_setDamping}, 
    {"setDampingDefaults", _wrap_PhysicsBody_setDampingDefaults}, 
    {0,0}
};
static swig_lua_attribute swig_osg_PhysicsBody_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_osg_PhysicsBody_bases[] = {0,0};
static const char *swig_osg_PhysicsBody_base_names[] = {"osg::FieldContainer *",0};
static swig_lua_class _wrap_class_osg_PhysicsBody = { "PhysicsBody", &SWIGTYPE_p_osg__PhysicsBody,0,0, swig_osg_PhysicsBody_methods, swig_osg_PhysicsBody_attributes, swig_osg_PhysicsBody_bases, swig_osg_PhysicsBody_base_names };

static swig_lua_method swig_osg_KeyEvent_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_osg_KeyEvent_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_osg_KeyEvent_bases[] = {0};
static const char *swig_osg_KeyEvent_base_names[] = {0};
static swig_lua_class _wrap_class_osg_KeyEvent = { "KeyEvent", &SWIGTYPE_p_osg__KeyEvent,0,0, swig_osg_KeyEvent_methods, swig_osg_KeyEvent_attributes, swig_osg_KeyEvent_bases, swig_osg_KeyEvent_base_names };

static int _wrap_new_ParticleSystemPtr__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  osg::ParticleSystemPtr *result = 0 ;
  
  SWIG_check_num_args("osg::ParticleSystemPtr",0,0)
  result = (osg::ParticleSystemPtr *)new osg::ParticleSystemPtr();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_osg__ParticleSystemPtr,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ParticleSystemPtr__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  osg::ParticleSystemPtr *arg1 = 0 ;
  osg::ParticleSystemPtr *result = 0 ;
  
  SWIG_check_num_args("osg::ParticleSystemPtr",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("osg::ParticleSystemPtr",1,"osg::ParticleSystemPtr const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__ParticleSystemPtr,0))){
    SWIG_fail_ptr("new_ParticleSystemPtr",1,SWIGTYPE_p_osg__ParticleSystemPtr);
  }
  
  result = (osg::ParticleSystemPtr *)new osg::ParticleSystemPtr((osg::ParticleSystemPtr const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_osg__ParticleSystemPtr,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ParticleSystemPtr(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_ParticleSystemPtr__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_osg__ParticleSystemPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_ParticleSystemPtr__SWIG_1(L);
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_ParticleSystemPtr'\n"
    "  Possible C/C++ prototypes are:\n"
    "    osg::ParticleSystemPtr()\n"
    "    osg::ParticleSystemPtr(osg::ParticleSystemPtr const &)\n");
  lua_error(L);return 0;
}


static int _wrap_ParticleSystemPtr___deref__(lua_State* L) {
  int SWIG_arg = 0;
  osg::ParticleSystemPtr *arg1 = (osg::ParticleSystemPtr *) 0 ;
  osg::ParticleSystem *result = 0 ;
  
  SWIG_check_num_args("operator ->",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("operator ->",1,"osg::ParticleSystemPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__ParticleSystemPtr,0))){
    SWIG_fail_ptr("ParticleSystemPtr___deref__",1,SWIGTYPE_p_osg__ParticleSystemPtr);
  }
  
  result = (osg::ParticleSystem *)(arg1)->operator ->();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_osg__ParticleSystem,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystemPtr_dcast(lua_State* L) {
  int SWIG_arg = 0;
  osg::FieldContainerPtr arg1 ;
  osg::FieldContainerPtr *argp1 ;
  osg::ParticleSystemPtr result;
  
  SWIG_check_num_args("osg::ParticleSystemPtr::dcast",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("osg::ParticleSystemPtr::dcast",1,"osg::FieldContainerPtr const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_osg__FieldContainerPtr,0))){
    SWIG_fail_ptr("ParticleSystemPtr_dcast",1,SWIGTYPE_p_osg__FieldContainerPtr);
  }
  arg1 = *argp1;
  
  result = osg::ParticleSystemPtr::dcast(arg1);
  {
    osg::ParticleSystemPtr * resultptr = new osg::ParticleSystemPtr((const osg::ParticleSystemPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_osg__ParticleSystemPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystemPtr_getNumParticles(lua_State* L) {
  int SWIG_arg = 0;
  osg::ParticleSystemPtr *arg1 = (osg::ParticleSystemPtr *) 0 ;
  osg::UInt32 result;
  
  SWIG_check_num_args("getNumParticles",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getNumParticles",1,"osg::ParticleSystemPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__ParticleSystemPtr,0))){
    SWIG_fail_ptr("ParticleSystemPtr_getNumParticles",1,SWIGTYPE_p_osg__ParticleSystemPtr);
  }
  
  result = (osg::UInt32)(*arg1)->getNumParticles();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystemPtr_getPosition(lua_State* L) {
  int SWIG_arg = 0;
  osg::ParticleSystemPtr *arg1 = (osg::ParticleSystemPtr *) 0 ;
  osg::UInt32 *arg2 = 0 ;
  osg::UInt32 temp2 ;
  osg::Pnt3f *result = 0 ;
  
  SWIG_check_num_args("getPosition",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getPosition",1,"osg::ParticleSystemPtr const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getPosition",2,"osg::UInt32 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__ParticleSystemPtr,0))){
    SWIG_fail_ptr("ParticleSystemPtr_getPosition",1,SWIGTYPE_p_osg__ParticleSystemPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  temp2=(osg::UInt32)lua_tonumber(L,2); arg2=&temp2;
  result = (osg::Pnt3f *) &(*arg1)->getPosition((osg::UInt32 const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_osg__Pnt3f,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystemPtr_getSecPosition(lua_State* L) {
  int SWIG_arg = 0;
  osg::ParticleSystemPtr *arg1 = (osg::ParticleSystemPtr *) 0 ;
  osg::UInt32 *arg2 = 0 ;
  osg::UInt32 temp2 ;
  osg::Pnt3f *result = 0 ;
  
  SWIG_check_num_args("getSecPosition",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getSecPosition",1,"osg::ParticleSystemPtr const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getSecPosition",2,"osg::UInt32 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__ParticleSystemPtr,0))){
    SWIG_fail_ptr("ParticleSystemPtr_getSecPosition",1,SWIGTYPE_p_osg__ParticleSystemPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  temp2=(osg::UInt32)lua_tonumber(L,2); arg2=&temp2;
  result = (osg::Pnt3f *) &(*arg1)->getSecPosition((osg::UInt32 const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_osg__Pnt3f,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystemPtr_getPositionChange(lua_State* L) {
  int SWIG_arg = 0;
  osg::ParticleSystemPtr *arg1 = (osg::ParticleSystemPtr *) 0 ;
  osg::UInt32 *arg2 = 0 ;
  osg::UInt32 temp2 ;
  osg::Vec3f result;
  
  SWIG_check_num_args("getPositionChange",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getPositionChange",1,"osg::ParticleSystemPtr const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getPositionChange",2,"osg::UInt32 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__ParticleSystemPtr,0))){
    SWIG_fail_ptr("ParticleSystemPtr_getPositionChange",1,SWIGTYPE_p_osg__ParticleSystemPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  temp2=(osg::UInt32)lua_tonumber(L,2); arg2=&temp2;
  result = (*arg1)->getPositionChange((osg::UInt32 const &)*arg2);
  {
    osg::Vec3f * resultptr = new osg::Vec3f((const osg::Vec3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_osg__Vec3f,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystemPtr_getNormal(lua_State* L) {
  int SWIG_arg = 0;
  osg::ParticleSystemPtr *arg1 = (osg::ParticleSystemPtr *) 0 ;
  osg::UInt32 *arg2 = 0 ;
  osg::UInt32 temp2 ;
  osg::Vec3f *result = 0 ;
  
  SWIG_check_num_args("getNormal",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getNormal",1,"osg::ParticleSystemPtr const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getNormal",2,"osg::UInt32 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__ParticleSystemPtr,0))){
    SWIG_fail_ptr("ParticleSystemPtr_getNormal",1,SWIGTYPE_p_osg__ParticleSystemPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  temp2=(osg::UInt32)lua_tonumber(L,2); arg2=&temp2;
  result = (osg::Vec3f *) &(*arg1)->getNormal((osg::UInt32 const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_osg__Vec3f,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystemPtr_getColor(lua_State* L) {
  int SWIG_arg = 0;
  osg::ParticleSystemPtr *arg1 = (osg::ParticleSystemPtr *) 0 ;
  osg::UInt32 *arg2 = 0 ;
  osg::UInt32 temp2 ;
  osg::Color4f *result = 0 ;
  
  SWIG_check_num_args("getColor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getColor",1,"osg::ParticleSystemPtr const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getColor",2,"osg::UInt32 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__ParticleSystemPtr,0))){
    SWIG_fail_ptr("ParticleSystemPtr_getColor",1,SWIGTYPE_p_osg__ParticleSystemPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  temp2=(osg::UInt32)lua_tonumber(L,2); arg2=&temp2;
  result = (osg::Color4f *) &(*arg1)->getColor((osg::UInt32 const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_osg__Color4f,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystemPtr_getSize(lua_State* L) {
  int SWIG_arg = 0;
  osg::ParticleSystemPtr *arg1 = (osg::ParticleSystemPtr *) 0 ;
  osg::UInt32 *arg2 = 0 ;
  osg::UInt32 temp2 ;
  osg::Vec3f *result = 0 ;
  
  SWIG_check_num_args("getSize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getSize",1,"osg::ParticleSystemPtr const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getSize",2,"osg::UInt32 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__ParticleSystemPtr,0))){
    SWIG_fail_ptr("ParticleSystemPtr_getSize",1,SWIGTYPE_p_osg__ParticleSystemPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  temp2=(osg::UInt32)lua_tonumber(L,2); arg2=&temp2;
  result = (osg::Vec3f *) &(*arg1)->getSize((osg::UInt32 const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_osg__Vec3f,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystemPtr_getLifespan(lua_State* L) {
  int SWIG_arg = 0;
  osg::ParticleSystemPtr *arg1 = (osg::ParticleSystemPtr *) 0 ;
  osg::UInt32 *arg2 = 0 ;
  osg::UInt32 temp2 ;
  osg::Real32 result;
  
  SWIG_check_num_args("getLifespan",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getLifespan",1,"osg::ParticleSystemPtr const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getLifespan",2,"osg::UInt32 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__ParticleSystemPtr,0))){
    SWIG_fail_ptr("ParticleSystemPtr_getLifespan",1,SWIGTYPE_p_osg__ParticleSystemPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  temp2=(osg::UInt32)lua_tonumber(L,2); arg2=&temp2;
  result = (osg::Real32)(*arg1)->getLifespan((osg::UInt32 const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystemPtr_getAge(lua_State* L) {
  int SWIG_arg = 0;
  osg::ParticleSystemPtr *arg1 = (osg::ParticleSystemPtr *) 0 ;
  osg::UInt32 *arg2 = 0 ;
  osg::UInt32 temp2 ;
  osg::Real32 result;
  
  SWIG_check_num_args("getAge",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getAge",1,"osg::ParticleSystemPtr const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getAge",2,"osg::UInt32 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__ParticleSystemPtr,0))){
    SWIG_fail_ptr("ParticleSystemPtr_getAge",1,SWIGTYPE_p_osg__ParticleSystemPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  temp2=(osg::UInt32)lua_tonumber(L,2); arg2=&temp2;
  result = (osg::Real32)(*arg1)->getAge((osg::UInt32 const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystemPtr_getVelocity(lua_State* L) {
  int SWIG_arg = 0;
  osg::ParticleSystemPtr *arg1 = (osg::ParticleSystemPtr *) 0 ;
  osg::UInt32 *arg2 = 0 ;
  osg::UInt32 temp2 ;
  osg::Vec3f *result = 0 ;
  
  SWIG_check_num_args("getVelocity",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getVelocity",1,"osg::ParticleSystemPtr const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getVelocity",2,"osg::UInt32 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__ParticleSystemPtr,0))){
    SWIG_fail_ptr("ParticleSystemPtr_getVelocity",1,SWIGTYPE_p_osg__ParticleSystemPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  temp2=(osg::UInt32)lua_tonumber(L,2); arg2=&temp2;
  result = (osg::Vec3f *) &(*arg1)->getVelocity((osg::UInt32 const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_osg__Vec3f,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystemPtr_getSecVelocity(lua_State* L) {
  int SWIG_arg = 0;
  osg::ParticleSystemPtr *arg1 = (osg::ParticleSystemPtr *) 0 ;
  osg::UInt32 *arg2 = 0 ;
  osg::UInt32 temp2 ;
  osg::Vec3f *result = 0 ;
  
  SWIG_check_num_args("getSecVelocity",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getSecVelocity",1,"osg::ParticleSystemPtr const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getSecVelocity",2,"osg::UInt32 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__ParticleSystemPtr,0))){
    SWIG_fail_ptr("ParticleSystemPtr_getSecVelocity",1,SWIGTYPE_p_osg__ParticleSystemPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  temp2=(osg::UInt32)lua_tonumber(L,2); arg2=&temp2;
  result = (osg::Vec3f *) &(*arg1)->getSecVelocity((osg::UInt32 const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_osg__Vec3f,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystemPtr_getVelocityChange(lua_State* L) {
  int SWIG_arg = 0;
  osg::ParticleSystemPtr *arg1 = (osg::ParticleSystemPtr *) 0 ;
  osg::UInt32 *arg2 = 0 ;
  osg::UInt32 temp2 ;
  osg::Vec3f result;
  
  SWIG_check_num_args("getVelocityChange",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getVelocityChange",1,"osg::ParticleSystemPtr const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getVelocityChange",2,"osg::UInt32 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__ParticleSystemPtr,0))){
    SWIG_fail_ptr("ParticleSystemPtr_getVelocityChange",1,SWIGTYPE_p_osg__ParticleSystemPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  temp2=(osg::UInt32)lua_tonumber(L,2); arg2=&temp2;
  result = (*arg1)->getVelocityChange((osg::UInt32 const &)*arg2);
  {
    osg::Vec3f * resultptr = new osg::Vec3f((const osg::Vec3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_osg__Vec3f,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystemPtr_getAcceleration(lua_State* L) {
  int SWIG_arg = 0;
  osg::ParticleSystemPtr *arg1 = (osg::ParticleSystemPtr *) 0 ;
  osg::UInt32 *arg2 = 0 ;
  osg::UInt32 temp2 ;
  osg::Vec3f *result = 0 ;
  
  SWIG_check_num_args("getAcceleration",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getAcceleration",1,"osg::ParticleSystemPtr const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getAcceleration",2,"osg::UInt32 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__ParticleSystemPtr,0))){
    SWIG_fail_ptr("ParticleSystemPtr_getAcceleration",1,SWIGTYPE_p_osg__ParticleSystemPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  temp2=(osg::UInt32)lua_tonumber(L,2); arg2=&temp2;
  result = (osg::Vec3f *) &(*arg1)->getAcceleration((osg::UInt32 const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_osg__Vec3f,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystemPtr_getAttribute(lua_State* L) {
  int SWIG_arg = 0;
  osg::ParticleSystemPtr *arg1 = (osg::ParticleSystemPtr *) 0 ;
  osg::UInt32 *arg2 = 0 ;
  std::string *arg3 = 0 ;
  osg::UInt32 temp2 ;
  std::string temp3 ;
  osg::UInt32 result;
  
  SWIG_check_num_args("getAttribute",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getAttribute",1,"osg::ParticleSystemPtr const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getAttribute",2,"osg::UInt32 const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("getAttribute",3,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__ParticleSystemPtr,0))){
    SWIG_fail_ptr("ParticleSystemPtr_getAttribute",1,SWIGTYPE_p_osg__ParticleSystemPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  temp2=(osg::UInt32)lua_tonumber(L,2); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_strlen(L,3)); arg3=&temp3;
  result = (osg::UInt32)(*arg1)->getAttribute((osg::UInt32 const &)*arg2,(std::string const &)*arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystemPtr_getAttributes(lua_State* L) {
  int SWIG_arg = 0;
  osg::ParticleSystemPtr *arg1 = (osg::ParticleSystemPtr *) 0 ;
  osg::UInt32 *arg2 = 0 ;
  osg::UInt32 temp2 ;
  std::map< std::string,osg::UInt32 > *result = 0 ;
  
  SWIG_check_num_args("getAttributes",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getAttributes",1,"osg::ParticleSystemPtr const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getAttributes",2,"osg::UInt32 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__ParticleSystemPtr,0))){
    SWIG_fail_ptr("ParticleSystemPtr_getAttributes",1,SWIGTYPE_p_osg__ParticleSystemPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  temp2=(osg::UInt32)lua_tonumber(L,2); arg2=&temp2;
  result = (std::map< std::string,osg::UInt32 > *) &(*arg1)->getAttributes((osg::UInt32 const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__mapT_std__string_unsigned_int_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystemPtr_setPosition(lua_State* L) {
  int SWIG_arg = 0;
  osg::ParticleSystemPtr *arg1 = (osg::ParticleSystemPtr *) 0 ;
  osg::Pnt3f *arg2 = 0 ;
  osg::UInt32 *arg3 = 0 ;
  osg::UInt32 temp3 ;
  
  SWIG_check_num_args("setPosition",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setPosition",1,"osg::ParticleSystemPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setPosition",2,"osg::Pnt3f const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("setPosition",3,"osg::UInt32 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__ParticleSystemPtr,0))){
    SWIG_fail_ptr("ParticleSystemPtr_setPosition",1,SWIGTYPE_p_osg__ParticleSystemPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__Pnt3f,0))){
    SWIG_fail_ptr("ParticleSystemPtr_setPosition",2,SWIGTYPE_p_osg__Pnt3f);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  temp3=(osg::UInt32)lua_tonumber(L,3); arg3=&temp3;
  (*arg1)->setPosition((osg::Pnt3f const &)*arg2,(osg::UInt32 const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystemPtr_setSecPosition(lua_State* L) {
  int SWIG_arg = 0;
  osg::ParticleSystemPtr *arg1 = (osg::ParticleSystemPtr *) 0 ;
  osg::Pnt3f *arg2 = 0 ;
  osg::UInt32 *arg3 = 0 ;
  osg::UInt32 temp3 ;
  
  SWIG_check_num_args("setSecPosition",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setSecPosition",1,"osg::ParticleSystemPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setSecPosition",2,"osg::Pnt3f const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("setSecPosition",3,"osg::UInt32 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__ParticleSystemPtr,0))){
    SWIG_fail_ptr("ParticleSystemPtr_setSecPosition",1,SWIGTYPE_p_osg__ParticleSystemPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__Pnt3f,0))){
    SWIG_fail_ptr("ParticleSystemPtr_setSecPosition",2,SWIGTYPE_p_osg__Pnt3f);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  temp3=(osg::UInt32)lua_tonumber(L,3); arg3=&temp3;
  (*arg1)->setSecPosition((osg::Pnt3f const &)*arg2,(osg::UInt32 const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystemPtr_setNormal(lua_State* L) {
  int SWIG_arg = 0;
  osg::ParticleSystemPtr *arg1 = (osg::ParticleSystemPtr *) 0 ;
  osg::Vec3f *arg2 = 0 ;
  osg::UInt32 *arg3 = 0 ;
  osg::UInt32 temp3 ;
  
  SWIG_check_num_args("setNormal",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setNormal",1,"osg::ParticleSystemPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setNormal",2,"osg::Vec3f const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("setNormal",3,"osg::UInt32 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__ParticleSystemPtr,0))){
    SWIG_fail_ptr("ParticleSystemPtr_setNormal",1,SWIGTYPE_p_osg__ParticleSystemPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__Vec3f,0))){
    SWIG_fail_ptr("ParticleSystemPtr_setNormal",2,SWIGTYPE_p_osg__Vec3f);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  temp3=(osg::UInt32)lua_tonumber(L,3); arg3=&temp3;
  (*arg1)->setNormal((osg::Vec3f const &)*arg2,(osg::UInt32 const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystemPtr_setColor(lua_State* L) {
  int SWIG_arg = 0;
  osg::ParticleSystemPtr *arg1 = (osg::ParticleSystemPtr *) 0 ;
  osg::Color4f *arg2 = 0 ;
  osg::UInt32 *arg3 = 0 ;
  osg::UInt32 temp3 ;
  
  SWIG_check_num_args("setColor",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setColor",1,"osg::ParticleSystemPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setColor",2,"osg::Color4f const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("setColor",3,"osg::UInt32 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__ParticleSystemPtr,0))){
    SWIG_fail_ptr("ParticleSystemPtr_setColor",1,SWIGTYPE_p_osg__ParticleSystemPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__Color4f,0))){
    SWIG_fail_ptr("ParticleSystemPtr_setColor",2,SWIGTYPE_p_osg__Color4f);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  temp3=(osg::UInt32)lua_tonumber(L,3); arg3=&temp3;
  (*arg1)->setColor((osg::Color4f const &)*arg2,(osg::UInt32 const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystemPtr_setSize(lua_State* L) {
  int SWIG_arg = 0;
  osg::ParticleSystemPtr *arg1 = (osg::ParticleSystemPtr *) 0 ;
  osg::Vec3f *arg2 = 0 ;
  osg::UInt32 *arg3 = 0 ;
  osg::UInt32 temp3 ;
  
  SWIG_check_num_args("setSize",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setSize",1,"osg::ParticleSystemPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setSize",2,"osg::Vec3f const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("setSize",3,"osg::UInt32 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__ParticleSystemPtr,0))){
    SWIG_fail_ptr("ParticleSystemPtr_setSize",1,SWIGTYPE_p_osg__ParticleSystemPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__Vec3f,0))){
    SWIG_fail_ptr("ParticleSystemPtr_setSize",2,SWIGTYPE_p_osg__Vec3f);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  temp3=(osg::UInt32)lua_tonumber(L,3); arg3=&temp3;
  (*arg1)->setSize((osg::Vec3f const &)*arg2,(osg::UInt32 const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystemPtr_setLifespan(lua_State* L) {
  int SWIG_arg = 0;
  osg::ParticleSystemPtr *arg1 = (osg::ParticleSystemPtr *) 0 ;
  osg::Time *arg2 = 0 ;
  osg::UInt32 *arg3 = 0 ;
  osg::Time temp2 ;
  osg::UInt32 temp3 ;
  
  SWIG_check_num_args("setLifespan",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setLifespan",1,"osg::ParticleSystemPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("setLifespan",2,"osg::Time const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("setLifespan",3,"osg::UInt32 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__ParticleSystemPtr,0))){
    SWIG_fail_ptr("ParticleSystemPtr_setLifespan",1,SWIGTYPE_p_osg__ParticleSystemPtr);
  }
  
  temp2=(osg::Time)lua_tonumber(L,2); arg2=&temp2;
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  temp3=(osg::UInt32)lua_tonumber(L,3); arg3=&temp3;
  (*arg1)->setLifespan((osg::Time const &)*arg2,(osg::UInt32 const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystemPtr_setAge(lua_State* L) {
  int SWIG_arg = 0;
  osg::ParticleSystemPtr *arg1 = (osg::ParticleSystemPtr *) 0 ;
  osg::Time *arg2 = 0 ;
  osg::UInt32 *arg3 = 0 ;
  osg::Time temp2 ;
  osg::UInt32 temp3 ;
  
  SWIG_check_num_args("setAge",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setAge",1,"osg::ParticleSystemPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("setAge",2,"osg::Time const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("setAge",3,"osg::UInt32 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__ParticleSystemPtr,0))){
    SWIG_fail_ptr("ParticleSystemPtr_setAge",1,SWIGTYPE_p_osg__ParticleSystemPtr);
  }
  
  temp2=(osg::Time)lua_tonumber(L,2); arg2=&temp2;
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  temp3=(osg::UInt32)lua_tonumber(L,3); arg3=&temp3;
  (*arg1)->setAge((osg::Time const &)*arg2,(osg::UInt32 const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystemPtr_setVelocity(lua_State* L) {
  int SWIG_arg = 0;
  osg::ParticleSystemPtr *arg1 = (osg::ParticleSystemPtr *) 0 ;
  osg::Vec3f *arg2 = 0 ;
  osg::UInt32 *arg3 = 0 ;
  osg::UInt32 temp3 ;
  
  SWIG_check_num_args("setVelocity",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setVelocity",1,"osg::ParticleSystemPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setVelocity",2,"osg::Vec3f const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("setVelocity",3,"osg::UInt32 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__ParticleSystemPtr,0))){
    SWIG_fail_ptr("ParticleSystemPtr_setVelocity",1,SWIGTYPE_p_osg__ParticleSystemPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__Vec3f,0))){
    SWIG_fail_ptr("ParticleSystemPtr_setVelocity",2,SWIGTYPE_p_osg__Vec3f);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  temp3=(osg::UInt32)lua_tonumber(L,3); arg3=&temp3;
  (*arg1)->setVelocity((osg::Vec3f const &)*arg2,(osg::UInt32 const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystemPtr_setSecVelocity(lua_State* L) {
  int SWIG_arg = 0;
  osg::ParticleSystemPtr *arg1 = (osg::ParticleSystemPtr *) 0 ;
  osg::Vec3f *arg2 = 0 ;
  osg::UInt32 *arg3 = 0 ;
  osg::UInt32 temp3 ;
  
  SWIG_check_num_args("setSecVelocity",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setSecVelocity",1,"osg::ParticleSystemPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setSecVelocity",2,"osg::Vec3f const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("setSecVelocity",3,"osg::UInt32 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__ParticleSystemPtr,0))){
    SWIG_fail_ptr("ParticleSystemPtr_setSecVelocity",1,SWIGTYPE_p_osg__ParticleSystemPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__Vec3f,0))){
    SWIG_fail_ptr("ParticleSystemPtr_setSecVelocity",2,SWIGTYPE_p_osg__Vec3f);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  temp3=(osg::UInt32)lua_tonumber(L,3); arg3=&temp3;
  (*arg1)->setSecVelocity((osg::Vec3f const &)*arg2,(osg::UInt32 const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystemPtr_setAcceleration(lua_State* L) {
  int SWIG_arg = 0;
  osg::ParticleSystemPtr *arg1 = (osg::ParticleSystemPtr *) 0 ;
  osg::Vec3f *arg2 = 0 ;
  osg::UInt32 *arg3 = 0 ;
  osg::UInt32 temp3 ;
  
  SWIG_check_num_args("setAcceleration",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setAcceleration",1,"osg::ParticleSystemPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setAcceleration",2,"osg::Vec3f const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("setAcceleration",3,"osg::UInt32 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__ParticleSystemPtr,0))){
    SWIG_fail_ptr("ParticleSystemPtr_setAcceleration",1,SWIGTYPE_p_osg__ParticleSystemPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__Vec3f,0))){
    SWIG_fail_ptr("ParticleSystemPtr_setAcceleration",2,SWIGTYPE_p_osg__Vec3f);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  temp3=(osg::UInt32)lua_tonumber(L,3); arg3=&temp3;
  (*arg1)->setAcceleration((osg::Vec3f const &)*arg2,(osg::UInt32 const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystemPtr_setAttributes(lua_State* L) {
  int SWIG_arg = 0;
  osg::ParticleSystemPtr *arg1 = (osg::ParticleSystemPtr *) 0 ;
  std::map< std::string,osg::UInt32 > *arg2 = 0 ;
  osg::UInt32 *arg3 = 0 ;
  osg::UInt32 temp3 ;
  
  SWIG_check_num_args("setAttributes",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setAttributes",1,"osg::ParticleSystemPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setAttributes",2,"std::map< std::string,osg::UInt32 > const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("setAttributes",3,"osg::UInt32 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__ParticleSystemPtr,0))){
    SWIG_fail_ptr("ParticleSystemPtr_setAttributes",1,SWIGTYPE_p_osg__ParticleSystemPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__mapT_std__string_unsigned_int_t,0))){
    SWIG_fail_ptr("ParticleSystemPtr_setAttributes",2,SWIGTYPE_p_std__mapT_std__string_unsigned_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  temp3=(osg::UInt32)lua_tonumber(L,3); arg3=&temp3;
  (*arg1)->setAttributes((std::map< std::string,osg::UInt32 > const &)*arg2,(osg::UInt32 const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystemPtr_addParticle(lua_State* L) {
  int SWIG_arg = 0;
  osg::ParticleSystemPtr *arg1 = (osg::ParticleSystemPtr *) 0 ;
  osg::Pnt3f *arg2 = 0 ;
  osg::Pnt3f *arg3 = 0 ;
  osg::Vec3f *arg4 = 0 ;
  osg::Color4f *arg5 = 0 ;
  osg::Vec3f *arg6 = 0 ;
  osg::Real32 arg7 ;
  osg::Real32 arg8 ;
  osg::Vec3f *arg9 = 0 ;
  osg::Vec3f *arg10 = 0 ;
  osg::Vec3f *arg11 = 0 ;
  std::map< std::string,osg::UInt32 > *arg12 = 0 ;
  bool result;
  
  SWIG_check_num_args("addParticle",12,12)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("addParticle",1,"osg::ParticleSystemPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("addParticle",2,"osg::Pnt3f const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("addParticle",3,"osg::Pnt3f const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("addParticle",4,"osg::Vec3f const &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("addParticle",5,"osg::Color4f const &");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("addParticle",6,"osg::Vec3f const &");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("addParticle",7,"osg::Real32");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("addParticle",8,"osg::Real32");
  if(!lua_isuserdata(L,9)) SWIG_fail_arg("addParticle",9,"osg::Vec3f const &");
  if(!lua_isuserdata(L,10)) SWIG_fail_arg("addParticle",10,"osg::Vec3f const &");
  if(!lua_isuserdata(L,11)) SWIG_fail_arg("addParticle",11,"osg::Vec3f const &");
  if(!lua_isuserdata(L,12)) SWIG_fail_arg("addParticle",12,"std::map< std::string,osg::UInt32 > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__ParticleSystemPtr,0))){
    SWIG_fail_ptr("ParticleSystemPtr_addParticle",1,SWIGTYPE_p_osg__ParticleSystemPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__Pnt3f,0))){
    SWIG_fail_ptr("ParticleSystemPtr_addParticle",2,SWIGTYPE_p_osg__Pnt3f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_osg__Pnt3f,0))){
    SWIG_fail_ptr("ParticleSystemPtr_addParticle",3,SWIGTYPE_p_osg__Pnt3f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_osg__Vec3f,0))){
    SWIG_fail_ptr("ParticleSystemPtr_addParticle",4,SWIGTYPE_p_osg__Vec3f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_osg__Color4f,0))){
    SWIG_fail_ptr("ParticleSystemPtr_addParticle",5,SWIGTYPE_p_osg__Color4f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_osg__Vec3f,0))){
    SWIG_fail_ptr("ParticleSystemPtr_addParticle",6,SWIGTYPE_p_osg__Vec3f);
  }
  
  arg7 = (osg::Real32)lua_tonumber(L, 7);
  arg8 = (osg::Real32)lua_tonumber(L, 8);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&arg9,SWIGTYPE_p_osg__Vec3f,0))){
    SWIG_fail_ptr("ParticleSystemPtr_addParticle",9,SWIGTYPE_p_osg__Vec3f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,10,(void**)&arg10,SWIGTYPE_p_osg__Vec3f,0))){
    SWIG_fail_ptr("ParticleSystemPtr_addParticle",10,SWIGTYPE_p_osg__Vec3f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,11,(void**)&arg11,SWIGTYPE_p_osg__Vec3f,0))){
    SWIG_fail_ptr("ParticleSystemPtr_addParticle",11,SWIGTYPE_p_osg__Vec3f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,12,(void**)&arg12,SWIGTYPE_p_std__mapT_std__string_unsigned_int_t,0))){
    SWIG_fail_ptr("ParticleSystemPtr_addParticle",12,SWIGTYPE_p_std__mapT_std__string_unsigned_int_t);
  }
  
  result = (bool)(*arg1)->addParticle((osg::Pnt3f const &)*arg2,(osg::Pnt3f const &)*arg3,(osg::Vec3f const &)*arg4,(osg::Color4f const &)*arg5,(osg::Vec3f const &)*arg6,arg7,arg8,(osg::Vec3f const &)*arg9,(osg::Vec3f const &)*arg10,(osg::Vec3f const &)*arg11,(std::map< std::string,osg::UInt32 > const &)*arg12);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystemPtr_addWorldSpaceParticle(lua_State* L) {
  int SWIG_arg = 0;
  osg::ParticleSystemPtr *arg1 = (osg::ParticleSystemPtr *) 0 ;
  osg::Pnt3f *arg2 = 0 ;
  osg::Pnt3f *arg3 = 0 ;
  osg::Vec3f *arg4 = 0 ;
  osg::Color4f *arg5 = 0 ;
  osg::Vec3f *arg6 = 0 ;
  osg::Real32 arg7 ;
  osg::Real32 arg8 ;
  osg::Vec3f *arg9 = 0 ;
  osg::Vec3f *arg10 = 0 ;
  osg::Vec3f *arg11 = 0 ;
  std::map< std::string,osg::UInt32 > *arg12 = 0 ;
  bool result;
  
  SWIG_check_num_args("addWorldSpaceParticle",12,12)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("addWorldSpaceParticle",1,"osg::ParticleSystemPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("addWorldSpaceParticle",2,"osg::Pnt3f const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("addWorldSpaceParticle",3,"osg::Pnt3f const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("addWorldSpaceParticle",4,"osg::Vec3f const &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("addWorldSpaceParticle",5,"osg::Color4f const &");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("addWorldSpaceParticle",6,"osg::Vec3f const &");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("addWorldSpaceParticle",7,"osg::Real32");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("addWorldSpaceParticle",8,"osg::Real32");
  if(!lua_isuserdata(L,9)) SWIG_fail_arg("addWorldSpaceParticle",9,"osg::Vec3f const &");
  if(!lua_isuserdata(L,10)) SWIG_fail_arg("addWorldSpaceParticle",10,"osg::Vec3f const &");
  if(!lua_isuserdata(L,11)) SWIG_fail_arg("addWorldSpaceParticle",11,"osg::Vec3f const &");
  if(!lua_isuserdata(L,12)) SWIG_fail_arg("addWorldSpaceParticle",12,"std::map< std::string,osg::UInt32 > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__ParticleSystemPtr,0))){
    SWIG_fail_ptr("ParticleSystemPtr_addWorldSpaceParticle",1,SWIGTYPE_p_osg__ParticleSystemPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__Pnt3f,0))){
    SWIG_fail_ptr("ParticleSystemPtr_addWorldSpaceParticle",2,SWIGTYPE_p_osg__Pnt3f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_osg__Pnt3f,0))){
    SWIG_fail_ptr("ParticleSystemPtr_addWorldSpaceParticle",3,SWIGTYPE_p_osg__Pnt3f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_osg__Vec3f,0))){
    SWIG_fail_ptr("ParticleSystemPtr_addWorldSpaceParticle",4,SWIGTYPE_p_osg__Vec3f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_osg__Color4f,0))){
    SWIG_fail_ptr("ParticleSystemPtr_addWorldSpaceParticle",5,SWIGTYPE_p_osg__Color4f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_osg__Vec3f,0))){
    SWIG_fail_ptr("ParticleSystemPtr_addWorldSpaceParticle",6,SWIGTYPE_p_osg__Vec3f);
  }
  
  arg7 = (osg::Real32)lua_tonumber(L, 7);
  arg8 = (osg::Real32)lua_tonumber(L, 8);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&arg9,SWIGTYPE_p_osg__Vec3f,0))){
    SWIG_fail_ptr("ParticleSystemPtr_addWorldSpaceParticle",9,SWIGTYPE_p_osg__Vec3f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,10,(void**)&arg10,SWIGTYPE_p_osg__Vec3f,0))){
    SWIG_fail_ptr("ParticleSystemPtr_addWorldSpaceParticle",10,SWIGTYPE_p_osg__Vec3f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,11,(void**)&arg11,SWIGTYPE_p_osg__Vec3f,0))){
    SWIG_fail_ptr("ParticleSystemPtr_addWorldSpaceParticle",11,SWIGTYPE_p_osg__Vec3f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,12,(void**)&arg12,SWIGTYPE_p_std__mapT_std__string_unsigned_int_t,0))){
    SWIG_fail_ptr("ParticleSystemPtr_addWorldSpaceParticle",12,SWIGTYPE_p_std__mapT_std__string_unsigned_int_t);
  }
  
  result = (bool)(*arg1)->addWorldSpaceParticle((osg::Pnt3f const &)*arg2,(osg::Pnt3f const &)*arg3,(osg::Vec3f const &)*arg4,(osg::Color4f const &)*arg5,(osg::Vec3f const &)*arg6,arg7,arg8,(osg::Vec3f const &)*arg9,(osg::Vec3f const &)*arg10,(osg::Vec3f const &)*arg11,(std::map< std::string,osg::UInt32 > const &)*arg12);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystemPtr_killParticle(lua_State* L) {
  int SWIG_arg = 0;
  osg::ParticleSystemPtr *arg1 = (osg::ParticleSystemPtr *) 0 ;
  osg::UInt32 arg2 ;
  bool result;
  
  SWIG_check_num_args("killParticle",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("killParticle",1,"osg::ParticleSystemPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("killParticle",2,"osg::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__ParticleSystemPtr,0))){
    SWIG_fail_ptr("ParticleSystemPtr_killParticle",1,SWIGTYPE_p_osg__ParticleSystemPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (osg::UInt32)lua_tonumber(L, 2);
  result = (bool)(*arg1)->killParticle(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystemPtr_attachUpdateListener(lua_State* L) {
  int SWIG_arg = 0;
  osg::ParticleSystemPtr *arg1 = (osg::ParticleSystemPtr *) 0 ;
  osg::WindowEventProducerPtr arg2 ;
  osg::WindowEventProducerPtr *argp2 ;
  bool result;
  
  SWIG_check_num_args("attachUpdateListener",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("attachUpdateListener",1,"osg::ParticleSystemPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("attachUpdateListener",2,"osg::WindowEventProducerPtr");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__ParticleSystemPtr,0))){
    SWIG_fail_ptr("ParticleSystemPtr_attachUpdateListener",1,SWIGTYPE_p_osg__ParticleSystemPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_osg__WindowEventProducerPtr,0))){
    SWIG_fail_ptr("ParticleSystemPtr_attachUpdateListener",2,SWIGTYPE_p_osg__WindowEventProducerPtr);
  }
  arg2 = *argp2;
  
  result = (bool)(*arg1)->attachUpdateListener(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystemPtr_dettachUpdateListener(lua_State* L) {
  int SWIG_arg = 0;
  osg::ParticleSystemPtr *arg1 = (osg::ParticleSystemPtr *) 0 ;
  osg::WindowEventProducerPtr arg2 ;
  osg::WindowEventProducerPtr *argp2 ;
  
  SWIG_check_num_args("dettachUpdateListener",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dettachUpdateListener",1,"osg::ParticleSystemPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("dettachUpdateListener",2,"osg::WindowEventProducerPtr");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__ParticleSystemPtr,0))){
    SWIG_fail_ptr("ParticleSystemPtr_dettachUpdateListener",1,SWIGTYPE_p_osg__ParticleSystemPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_osg__WindowEventProducerPtr,0))){
    SWIG_fail_ptr("ParticleSystemPtr_dettachUpdateListener",2,SWIGTYPE_p_osg__WindowEventProducerPtr);
  }
  arg2 = *argp2;
  
  (*arg1)->dettachUpdateListener(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystemPtr_intersect__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  osg::ParticleSystemPtr *arg1 = (osg::ParticleSystemPtr *) 0 ;
  osg::Line *arg2 = 0 ;
  osg::Real32 arg3 ;
  osg::NodePtr arg4 ;
  osg::NodePtr *argp4 ;
  std::vector< osg::UInt32 > result;
  
  SWIG_check_num_args("intersect",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("intersect",1,"osg::ParticleSystemPtr const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("intersect",2,"osg::Line const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("intersect",3,"osg::Real32");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("intersect",4,"osg::NodePtr");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__ParticleSystemPtr,0))){
    SWIG_fail_ptr("ParticleSystemPtr_intersect",1,SWIGTYPE_p_osg__ParticleSystemPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__Line,0))){
    SWIG_fail_ptr("ParticleSystemPtr_intersect",2,SWIGTYPE_p_osg__Line);
  }
  
  arg3 = (osg::Real32)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_osg__NodePtr,0))){
    SWIG_fail_ptr("ParticleSystemPtr_intersect",4,SWIGTYPE_p_osg__NodePtr);
  }
  arg4 = *argp4;
  
  result = (*arg1)->intersect((osg::Line const &)*arg2,arg3,arg4);
  {
    std::vector< osg::UInt32 > * resultptr = new std::vector< osg::UInt32 >((const std::vector< osg::UInt32 > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_unsigned_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystemPtr_intersect__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  osg::ParticleSystemPtr *arg1 = (osg::ParticleSystemPtr *) 0 ;
  osg::Line *arg2 = 0 ;
  osg::Real32 arg3 ;
  std::vector< osg::UInt32 > result;
  
  SWIG_check_num_args("intersect",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("intersect",1,"osg::ParticleSystemPtr const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("intersect",2,"osg::Line const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("intersect",3,"osg::Real32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__ParticleSystemPtr,0))){
    SWIG_fail_ptr("ParticleSystemPtr_intersect",1,SWIGTYPE_p_osg__ParticleSystemPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__Line,0))){
    SWIG_fail_ptr("ParticleSystemPtr_intersect",2,SWIGTYPE_p_osg__Line);
  }
  
  arg3 = (osg::Real32)lua_tonumber(L, 3);
  result = (*arg1)->intersect((osg::Line const &)*arg2,arg3);
  {
    std::vector< osg::UInt32 > * resultptr = new std::vector< osg::UInt32 >((const std::vector< osg::UInt32 > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_unsigned_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystemPtr_intersect(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_osg__ParticleSystemPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_osg__Line, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_ParticleSystemPtr_intersect__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_osg__ParticleSystemPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_osg__Line, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_osg__NodePtr, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_ParticleSystemPtr_intersect__SWIG_0(L);
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'ParticleSystemPtr_intersect'\n"
    "  Possible C/C++ prototypes are:\n"
    "    intersect(osg::ParticleSystemPtr const *,osg::Line const &,osg::Real32,osg::NodePtr)\n"
    "    intersect(osg::ParticleSystemPtr const *,osg::Line const &,osg::Real32)\n");
  lua_error(L);return 0;
}


static int _wrap_ParticleSystemPtr_addAttachment__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  osg::ParticleSystemPtr *arg1 = (osg::ParticleSystemPtr *) 0 ;
  osg::AttachmentPtr *arg2 = 0 ;
  osg::UInt16 arg3 ;
  
  SWIG_check_num_args("addAttachment",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("addAttachment",1,"osg::ParticleSystemPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("addAttachment",2,"osg::AttachmentPtr const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("addAttachment",3,"osg::UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__ParticleSystemPtr,0))){
    SWIG_fail_ptr("ParticleSystemPtr_addAttachment",1,SWIGTYPE_p_osg__ParticleSystemPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__AttachmentPtr,0))){
    SWIG_fail_ptr("ParticleSystemPtr_addAttachment",2,SWIGTYPE_p_osg__AttachmentPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (osg::UInt16)lua_tonumber(L, 3);
  (*arg1)->addAttachment((osg::AttachmentPtr const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystemPtr_addAttachment__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  osg::ParticleSystemPtr *arg1 = (osg::ParticleSystemPtr *) 0 ;
  osg::AttachmentPtr *arg2 = 0 ;
  
  SWIG_check_num_args("addAttachment",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("addAttachment",1,"osg::ParticleSystemPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("addAttachment",2,"osg::AttachmentPtr const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__ParticleSystemPtr,0))){
    SWIG_fail_ptr("ParticleSystemPtr_addAttachment",1,SWIGTYPE_p_osg__ParticleSystemPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__AttachmentPtr,0))){
    SWIG_fail_ptr("ParticleSystemPtr_addAttachment",2,SWIGTYPE_p_osg__AttachmentPtr);
  }
  
  (*arg1)->addAttachment((osg::AttachmentPtr const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystemPtr_addAttachment(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_osg__ParticleSystemPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_osg__AttachmentPtr, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ParticleSystemPtr_addAttachment__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_osg__ParticleSystemPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_osg__AttachmentPtr, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_ParticleSystemPtr_addAttachment__SWIG_0(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'ParticleSystemPtr_addAttachment'\n"
    "  Possible C/C++ prototypes are:\n"
    "    addAttachment(osg::ParticleSystemPtr *,osg::AttachmentPtr const &,osg::UInt16)\n"
    "    addAttachment(osg::ParticleSystemPtr *,osg::AttachmentPtr const &)\n");
  lua_error(L);return 0;
}


static int _wrap_ParticleSystemPtr_subAttachment__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  osg::ParticleSystemPtr *arg1 = (osg::ParticleSystemPtr *) 0 ;
  osg::AttachmentPtr *arg2 = 0 ;
  osg::UInt16 arg3 ;
  
  SWIG_check_num_args("subAttachment",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("subAttachment",1,"osg::ParticleSystemPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("subAttachment",2,"osg::AttachmentPtr const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("subAttachment",3,"osg::UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__ParticleSystemPtr,0))){
    SWIG_fail_ptr("ParticleSystemPtr_subAttachment",1,SWIGTYPE_p_osg__ParticleSystemPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__AttachmentPtr,0))){
    SWIG_fail_ptr("ParticleSystemPtr_subAttachment",2,SWIGTYPE_p_osg__AttachmentPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (osg::UInt16)lua_tonumber(L, 3);
  (*arg1)->subAttachment((osg::AttachmentPtr const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystemPtr_subAttachment__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  osg::ParticleSystemPtr *arg1 = (osg::ParticleSystemPtr *) 0 ;
  osg::AttachmentPtr *arg2 = 0 ;
  
  SWIG_check_num_args("subAttachment",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("subAttachment",1,"osg::ParticleSystemPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("subAttachment",2,"osg::AttachmentPtr const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__ParticleSystemPtr,0))){
    SWIG_fail_ptr("ParticleSystemPtr_subAttachment",1,SWIGTYPE_p_osg__ParticleSystemPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__AttachmentPtr,0))){
    SWIG_fail_ptr("ParticleSystemPtr_subAttachment",2,SWIGTYPE_p_osg__AttachmentPtr);
  }
  
  (*arg1)->subAttachment((osg::AttachmentPtr const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystemPtr_subAttachment(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_osg__ParticleSystemPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_osg__AttachmentPtr, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ParticleSystemPtr_subAttachment__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_osg__ParticleSystemPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_osg__AttachmentPtr, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_ParticleSystemPtr_subAttachment__SWIG_0(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'ParticleSystemPtr_subAttachment'\n"
    "  Possible C/C++ prototypes are:\n"
    "    subAttachment(osg::ParticleSystemPtr *,osg::AttachmentPtr const &,osg::UInt16)\n"
    "    subAttachment(osg::ParticleSystemPtr *,osg::AttachmentPtr const &)\n");
  lua_error(L);return 0;
}


static int _wrap_ParticleSystemPtr_findAttachment__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  osg::ParticleSystemPtr *arg1 = (osg::ParticleSystemPtr *) 0 ;
  osg::UInt32 arg2 ;
  osg::UInt16 arg3 ;
  osg::AttachmentPtr result;
  
  SWIG_check_num_args("findAttachment",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("findAttachment",1,"osg::ParticleSystemPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("findAttachment",2,"osg::UInt32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("findAttachment",3,"osg::UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__ParticleSystemPtr,0))){
    SWIG_fail_ptr("ParticleSystemPtr_findAttachment",1,SWIGTYPE_p_osg__ParticleSystemPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (osg::UInt32)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (osg::UInt16)lua_tonumber(L, 3);
  result = (*arg1)->findAttachment(arg2,arg3);
  {
    osg::AttachmentPtr * resultptr = new osg::AttachmentPtr((const osg::AttachmentPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_osg__AttachmentPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystemPtr_findAttachment__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  osg::ParticleSystemPtr *arg1 = (osg::ParticleSystemPtr *) 0 ;
  osg::UInt32 arg2 ;
  osg::AttachmentPtr result;
  
  SWIG_check_num_args("findAttachment",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("findAttachment",1,"osg::ParticleSystemPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("findAttachment",2,"osg::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__ParticleSystemPtr,0))){
    SWIG_fail_ptr("ParticleSystemPtr_findAttachment",1,SWIGTYPE_p_osg__ParticleSystemPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (osg::UInt32)lua_tonumber(L, 2);
  result = (*arg1)->findAttachment(arg2);
  {
    osg::AttachmentPtr * resultptr = new osg::AttachmentPtr((const osg::AttachmentPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_osg__AttachmentPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystemPtr_findAttachment__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  osg::ParticleSystemPtr *arg1 = (osg::ParticleSystemPtr *) 0 ;
  osg::FieldContainerType *arg2 = 0 ;
  osg::UInt16 arg3 ;
  osg::AttachmentPtr result;
  
  SWIG_check_num_args("findAttachment",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("findAttachment",1,"osg::ParticleSystemPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("findAttachment",2,"osg::FieldContainerType const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("findAttachment",3,"osg::UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__ParticleSystemPtr,0))){
    SWIG_fail_ptr("ParticleSystemPtr_findAttachment",1,SWIGTYPE_p_osg__ParticleSystemPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__FieldContainerType,0))){
    SWIG_fail_ptr("ParticleSystemPtr_findAttachment",2,SWIGTYPE_p_osg__FieldContainerType);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (osg::UInt16)lua_tonumber(L, 3);
  result = (*arg1)->findAttachment((osg::FieldContainerType const &)*arg2,arg3);
  {
    osg::AttachmentPtr * resultptr = new osg::AttachmentPtr((const osg::AttachmentPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_osg__AttachmentPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystemPtr_findAttachment__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  osg::ParticleSystemPtr *arg1 = (osg::ParticleSystemPtr *) 0 ;
  osg::FieldContainerType *arg2 = 0 ;
  osg::AttachmentPtr result;
  
  SWIG_check_num_args("findAttachment",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("findAttachment",1,"osg::ParticleSystemPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("findAttachment",2,"osg::FieldContainerType const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__ParticleSystemPtr,0))){
    SWIG_fail_ptr("ParticleSystemPtr_findAttachment",1,SWIGTYPE_p_osg__ParticleSystemPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__FieldContainerType,0))){
    SWIG_fail_ptr("ParticleSystemPtr_findAttachment",2,SWIGTYPE_p_osg__FieldContainerType);
  }
  
  result = (*arg1)->findAttachment((osg::FieldContainerType const &)*arg2);
  {
    osg::AttachmentPtr * resultptr = new osg::AttachmentPtr((const osg::AttachmentPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_osg__AttachmentPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystemPtr_findAttachment(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_osg__ParticleSystemPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_osg__FieldContainerType, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ParticleSystemPtr_findAttachment__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_osg__ParticleSystemPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_ParticleSystemPtr_findAttachment__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_osg__ParticleSystemPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_osg__FieldContainerType, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_ParticleSystemPtr_findAttachment__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_osg__ParticleSystemPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_ParticleSystemPtr_findAttachment__SWIG_0(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'ParticleSystemPtr_findAttachment'\n"
    "  Possible C/C++ prototypes are:\n"
    "    findAttachment(osg::ParticleSystemPtr *,osg::UInt32,osg::UInt16)\n"
    "    findAttachment(osg::ParticleSystemPtr *,osg::UInt32)\n"
    "    findAttachment(osg::ParticleSystemPtr *,osg::FieldContainerType const &,osg::UInt16)\n"
    "    findAttachment(osg::ParticleSystemPtr *,osg::FieldContainerType const &)\n");
  lua_error(L);return 0;
}


static int _wrap_ParticleSystemPtr_getType(lua_State* L) {
  int SWIG_arg = 0;
  osg::ParticleSystemPtr *arg1 = (osg::ParticleSystemPtr *) 0 ;
  osg::FieldContainerType *result = 0 ;
  
  SWIG_check_num_args("getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getType",1,"osg::ParticleSystemPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__ParticleSystemPtr,0))){
    SWIG_fail_ptr("ParticleSystemPtr_getType",1,SWIGTYPE_p_osg__ParticleSystemPtr);
  }
  
  result = (osg::FieldContainerType *) &(*arg1)->getType();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_osg__FieldContainerType,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystemPtr_getGroupId(lua_State* L) {
  int SWIG_arg = 0;
  osg::ParticleSystemPtr *arg1 = (osg::ParticleSystemPtr *) 0 ;
  osg::UInt16 result;
  
  SWIG_check_num_args("getGroupId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getGroupId",1,"osg::ParticleSystemPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__ParticleSystemPtr,0))){
    SWIG_fail_ptr("ParticleSystemPtr_getGroupId",1,SWIGTYPE_p_osg__ParticleSystemPtr);
  }
  
  result = (osg::UInt16)(*arg1)->getGroupId();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystemPtr_getField__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  osg::ParticleSystemPtr *arg1 = (osg::ParticleSystemPtr *) 0 ;
  osg::UInt32 arg2 ;
  osg::Field *result = 0 ;
  
  SWIG_check_num_args("getField",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getField",1,"osg::ParticleSystemPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getField",2,"osg::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__ParticleSystemPtr,0))){
    SWIG_fail_ptr("ParticleSystemPtr_getField",1,SWIGTYPE_p_osg__ParticleSystemPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (osg::UInt32)lua_tonumber(L, 2);
  result = (osg::Field *)(*arg1)->getField(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_osg__Field,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystemPtr_getField__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  osg::ParticleSystemPtr *arg1 = (osg::ParticleSystemPtr *) 0 ;
  osg::Char8 *arg2 = (osg::Char8 *) 0 ;
  osg::Field *result = 0 ;
  
  SWIG_check_num_args("getField",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getField",1,"osg::ParticleSystemPtr *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("getField",2,"osg::Char8 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__ParticleSystemPtr,0))){
    SWIG_fail_ptr("ParticleSystemPtr_getField",1,SWIGTYPE_p_osg__ParticleSystemPtr);
  }
  
  arg2 = (osg::Char8 *)lua_tostring(L, 2);
  result = (osg::Field *)(*arg1)->getField((osg::Char8 const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_osg__Field,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystemPtr_getField(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_osg__ParticleSystemPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_ParticleSystemPtr_getField__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_osg__ParticleSystemPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_ParticleSystemPtr_getField__SWIG_1(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'ParticleSystemPtr_getField'\n"
    "  Possible C/C++ prototypes are:\n"
    "    getField(osg::ParticleSystemPtr *,osg::UInt32)\n"
    "    getField(osg::ParticleSystemPtr *,osg::Char8 const *)\n");
  lua_error(L);return 0;
}


static int _wrap_ParticleSystemPtr_shallowCopy(lua_State* L) {
  int SWIG_arg = 0;
  osg::ParticleSystemPtr *arg1 = (osg::ParticleSystemPtr *) 0 ;
  osg::FieldContainerPtr result;
  
  SWIG_check_num_args("shallowCopy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("shallowCopy",1,"osg::ParticleSystemPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__ParticleSystemPtr,0))){
    SWIG_fail_ptr("ParticleSystemPtr_shallowCopy",1,SWIGTYPE_p_osg__ParticleSystemPtr);
  }
  
  result = (*arg1)->shallowCopy();
  {
    osg::FieldContainerPtr * resultptr = new osg::FieldContainerPtr((const osg::FieldContainerPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_osg__FieldContainerPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ParticleSystemPtr(void *obj) {
osg::ParticleSystemPtr *arg1 = (osg::ParticleSystemPtr *) obj;
delete arg1;
}
static swig_lua_method swig_osg_ParticleSystemPtr_methods[] = {
    {"__deref__", _wrap_ParticleSystemPtr___deref__}, 
    {"getNumParticles", _wrap_ParticleSystemPtr_getNumParticles}, 
    {"getPosition", _wrap_ParticleSystemPtr_getPosition}, 
    {"getSecPosition", _wrap_ParticleSystemPtr_getSecPosition}, 
    {"getPositionChange", _wrap_ParticleSystemPtr_getPositionChange}, 
    {"getNormal", _wrap_ParticleSystemPtr_getNormal}, 
    {"getColor", _wrap_ParticleSystemPtr_getColor}, 
    {"getSize", _wrap_ParticleSystemPtr_getSize}, 
    {"getLifespan", _wrap_ParticleSystemPtr_getLifespan}, 
    {"getAge", _wrap_ParticleSystemPtr_getAge}, 
    {"getVelocity", _wrap_ParticleSystemPtr_getVelocity}, 
    {"getSecVelocity", _wrap_ParticleSystemPtr_getSecVelocity}, 
    {"getVelocityChange", _wrap_ParticleSystemPtr_getVelocityChange}, 
    {"getAcceleration", _wrap_ParticleSystemPtr_getAcceleration}, 
    {"getAttribute", _wrap_ParticleSystemPtr_getAttribute}, 
    {"getAttributes", _wrap_ParticleSystemPtr_getAttributes}, 
    {"setPosition", _wrap_ParticleSystemPtr_setPosition}, 
    {"setSecPosition", _wrap_ParticleSystemPtr_setSecPosition}, 
    {"setNormal", _wrap_ParticleSystemPtr_setNormal}, 
    {"setColor", _wrap_ParticleSystemPtr_setColor}, 
    {"setSize", _wrap_ParticleSystemPtr_setSize}, 
    {"setLifespan", _wrap_ParticleSystemPtr_setLifespan}, 
    {"setAge", _wrap_ParticleSystemPtr_setAge}, 
    {"setVelocity", _wrap_ParticleSystemPtr_setVelocity}, 
    {"setSecVelocity", _wrap_ParticleSystemPtr_setSecVelocity}, 
    {"setAcceleration", _wrap_ParticleSystemPtr_setAcceleration}, 
    {"setAttributes", _wrap_ParticleSystemPtr_setAttributes}, 
    {"addParticle", _wrap_ParticleSystemPtr_addParticle}, 
    {"addWorldSpaceParticle", _wrap_ParticleSystemPtr_addWorldSpaceParticle}, 
    {"killParticle", _wrap_ParticleSystemPtr_killParticle}, 
    {"attachUpdateListener", _wrap_ParticleSystemPtr_attachUpdateListener}, 
    {"dettachUpdateListener", _wrap_ParticleSystemPtr_dettachUpdateListener}, 
    {"intersect", _wrap_ParticleSystemPtr_intersect}, 
    {"addAttachment", _wrap_ParticleSystemPtr_addAttachment}, 
    {"subAttachment", _wrap_ParticleSystemPtr_subAttachment}, 
    {"findAttachment", _wrap_ParticleSystemPtr_findAttachment}, 
    {"getType", _wrap_ParticleSystemPtr_getType}, 
    {"getGroupId", _wrap_ParticleSystemPtr_getGroupId}, 
    {"getField", _wrap_ParticleSystemPtr_getField}, 
    {"shallowCopy", _wrap_ParticleSystemPtr_shallowCopy}, 
    {0,0}
};
static swig_lua_attribute swig_osg_ParticleSystemPtr_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_osg_ParticleSystemPtr_bases[] = {0,0};
static const char *swig_osg_ParticleSystemPtr_base_names[] = {"osg::AttachmentContainerPtr *",0};
static swig_lua_class _wrap_class_osg_ParticleSystemPtr = { "ParticleSystemPtr", &SWIGTYPE_p_osg__ParticleSystemPtr,_wrap_new_ParticleSystemPtr, swig_delete_ParticleSystemPtr, swig_osg_ParticleSystemPtr_methods, swig_osg_ParticleSystemPtr_attributes, swig_osg_ParticleSystemPtr_bases, swig_osg_ParticleSystemPtr_base_names };

static int _wrap_ParticleSystem_getNumParticles(lua_State* L) {
  int SWIG_arg = 0;
  osg::ParticleSystem *arg1 = (osg::ParticleSystem *) 0 ;
  osg::UInt32 result;
  
  SWIG_check_num_args("getNumParticles",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getNumParticles",1,"osg::ParticleSystem const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__ParticleSystem,0))){
    SWIG_fail_ptr("ParticleSystem_getNumParticles",1,SWIGTYPE_p_osg__ParticleSystem);
  }
  
  result = (osg::UInt32)((osg::ParticleSystem const *)arg1)->getNumParticles();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystem_getPosition(lua_State* L) {
  int SWIG_arg = 0;
  osg::ParticleSystem *arg1 = (osg::ParticleSystem *) 0 ;
  osg::UInt32 *arg2 = 0 ;
  osg::UInt32 temp2 ;
  osg::Pnt3f *result = 0 ;
  
  SWIG_check_num_args("getPosition",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getPosition",1,"osg::ParticleSystem const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getPosition",2,"osg::UInt32 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__ParticleSystem,0))){
    SWIG_fail_ptr("ParticleSystem_getPosition",1,SWIGTYPE_p_osg__ParticleSystem);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  temp2=(osg::UInt32)lua_tonumber(L,2); arg2=&temp2;
  result = (osg::Pnt3f *) &((osg::ParticleSystem const *)arg1)->getPosition((osg::UInt32 const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_osg__Pnt3f,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystem_getSecPosition(lua_State* L) {
  int SWIG_arg = 0;
  osg::ParticleSystem *arg1 = (osg::ParticleSystem *) 0 ;
  osg::UInt32 *arg2 = 0 ;
  osg::UInt32 temp2 ;
  osg::Pnt3f *result = 0 ;
  
  SWIG_check_num_args("getSecPosition",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getSecPosition",1,"osg::ParticleSystem const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getSecPosition",2,"osg::UInt32 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__ParticleSystem,0))){
    SWIG_fail_ptr("ParticleSystem_getSecPosition",1,SWIGTYPE_p_osg__ParticleSystem);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  temp2=(osg::UInt32)lua_tonumber(L,2); arg2=&temp2;
  result = (osg::Pnt3f *) &((osg::ParticleSystem const *)arg1)->getSecPosition((osg::UInt32 const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_osg__Pnt3f,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystem_getPositionChange(lua_State* L) {
  int SWIG_arg = 0;
  osg::ParticleSystem *arg1 = (osg::ParticleSystem *) 0 ;
  osg::UInt32 *arg2 = 0 ;
  osg::UInt32 temp2 ;
  osg::Vec3f result;
  
  SWIG_check_num_args("getPositionChange",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getPositionChange",1,"osg::ParticleSystem const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getPositionChange",2,"osg::UInt32 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__ParticleSystem,0))){
    SWIG_fail_ptr("ParticleSystem_getPositionChange",1,SWIGTYPE_p_osg__ParticleSystem);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  temp2=(osg::UInt32)lua_tonumber(L,2); arg2=&temp2;
  result = ((osg::ParticleSystem const *)arg1)->getPositionChange((osg::UInt32 const &)*arg2);
  {
    osg::Vec3f * resultptr = new osg::Vec3f((const osg::Vec3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_osg__Vec3f,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystem_getNormal(lua_State* L) {
  int SWIG_arg = 0;
  osg::ParticleSystem *arg1 = (osg::ParticleSystem *) 0 ;
  osg::UInt32 *arg2 = 0 ;
  osg::UInt32 temp2 ;
  osg::Vec3f *result = 0 ;
  
  SWIG_check_num_args("getNormal",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getNormal",1,"osg::ParticleSystem const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getNormal",2,"osg::UInt32 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__ParticleSystem,0))){
    SWIG_fail_ptr("ParticleSystem_getNormal",1,SWIGTYPE_p_osg__ParticleSystem);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  temp2=(osg::UInt32)lua_tonumber(L,2); arg2=&temp2;
  result = (osg::Vec3f *) &((osg::ParticleSystem const *)arg1)->getNormal((osg::UInt32 const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_osg__Vec3f,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystem_getColor(lua_State* L) {
  int SWIG_arg = 0;
  osg::ParticleSystem *arg1 = (osg::ParticleSystem *) 0 ;
  osg::UInt32 *arg2 = 0 ;
  osg::UInt32 temp2 ;
  osg::Color4f *result = 0 ;
  
  SWIG_check_num_args("getColor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getColor",1,"osg::ParticleSystem const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getColor",2,"osg::UInt32 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__ParticleSystem,0))){
    SWIG_fail_ptr("ParticleSystem_getColor",1,SWIGTYPE_p_osg__ParticleSystem);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  temp2=(osg::UInt32)lua_tonumber(L,2); arg2=&temp2;
  result = (osg::Color4f *) &((osg::ParticleSystem const *)arg1)->getColor((osg::UInt32 const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_osg__Color4f,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystem_getSize(lua_State* L) {
  int SWIG_arg = 0;
  osg::ParticleSystem *arg1 = (osg::ParticleSystem *) 0 ;
  osg::UInt32 *arg2 = 0 ;
  osg::UInt32 temp2 ;
  osg::Vec3f *result = 0 ;
  
  SWIG_check_num_args("getSize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getSize",1,"osg::ParticleSystem const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getSize",2,"osg::UInt32 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__ParticleSystem,0))){
    SWIG_fail_ptr("ParticleSystem_getSize",1,SWIGTYPE_p_osg__ParticleSystem);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  temp2=(osg::UInt32)lua_tonumber(L,2); arg2=&temp2;
  result = (osg::Vec3f *) &((osg::ParticleSystem const *)arg1)->getSize((osg::UInt32 const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_osg__Vec3f,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystem_getLifespan(lua_State* L) {
  int SWIG_arg = 0;
  osg::ParticleSystem *arg1 = (osg::ParticleSystem *) 0 ;
  osg::UInt32 *arg2 = 0 ;
  osg::UInt32 temp2 ;
  osg::Real32 result;
  
  SWIG_check_num_args("getLifespan",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getLifespan",1,"osg::ParticleSystem const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getLifespan",2,"osg::UInt32 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__ParticleSystem,0))){
    SWIG_fail_ptr("ParticleSystem_getLifespan",1,SWIGTYPE_p_osg__ParticleSystem);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  temp2=(osg::UInt32)lua_tonumber(L,2); arg2=&temp2;
  result = (osg::Real32)((osg::ParticleSystem const *)arg1)->getLifespan((osg::UInt32 const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystem_getAge(lua_State* L) {
  int SWIG_arg = 0;
  osg::ParticleSystem *arg1 = (osg::ParticleSystem *) 0 ;
  osg::UInt32 *arg2 = 0 ;
  osg::UInt32 temp2 ;
  osg::Real32 result;
  
  SWIG_check_num_args("getAge",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getAge",1,"osg::ParticleSystem const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getAge",2,"osg::UInt32 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__ParticleSystem,0))){
    SWIG_fail_ptr("ParticleSystem_getAge",1,SWIGTYPE_p_osg__ParticleSystem);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  temp2=(osg::UInt32)lua_tonumber(L,2); arg2=&temp2;
  result = (osg::Real32)((osg::ParticleSystem const *)arg1)->getAge((osg::UInt32 const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystem_getVelocity(lua_State* L) {
  int SWIG_arg = 0;
  osg::ParticleSystem *arg1 = (osg::ParticleSystem *) 0 ;
  osg::UInt32 *arg2 = 0 ;
  osg::UInt32 temp2 ;
  osg::Vec3f *result = 0 ;
  
  SWIG_check_num_args("getVelocity",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getVelocity",1,"osg::ParticleSystem const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getVelocity",2,"osg::UInt32 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__ParticleSystem,0))){
    SWIG_fail_ptr("ParticleSystem_getVelocity",1,SWIGTYPE_p_osg__ParticleSystem);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  temp2=(osg::UInt32)lua_tonumber(L,2); arg2=&temp2;
  result = (osg::Vec3f *) &((osg::ParticleSystem const *)arg1)->getVelocity((osg::UInt32 const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_osg__Vec3f,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystem_getSecVelocity(lua_State* L) {
  int SWIG_arg = 0;
  osg::ParticleSystem *arg1 = (osg::ParticleSystem *) 0 ;
  osg::UInt32 *arg2 = 0 ;
  osg::UInt32 temp2 ;
  osg::Vec3f *result = 0 ;
  
  SWIG_check_num_args("getSecVelocity",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getSecVelocity",1,"osg::ParticleSystem const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getSecVelocity",2,"osg::UInt32 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__ParticleSystem,0))){
    SWIG_fail_ptr("ParticleSystem_getSecVelocity",1,SWIGTYPE_p_osg__ParticleSystem);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  temp2=(osg::UInt32)lua_tonumber(L,2); arg2=&temp2;
  result = (osg::Vec3f *) &((osg::ParticleSystem const *)arg1)->getSecVelocity((osg::UInt32 const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_osg__Vec3f,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystem_getVelocityChange(lua_State* L) {
  int SWIG_arg = 0;
  osg::ParticleSystem *arg1 = (osg::ParticleSystem *) 0 ;
  osg::UInt32 *arg2 = 0 ;
  osg::UInt32 temp2 ;
  osg::Vec3f result;
  
  SWIG_check_num_args("getVelocityChange",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getVelocityChange",1,"osg::ParticleSystem const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getVelocityChange",2,"osg::UInt32 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__ParticleSystem,0))){
    SWIG_fail_ptr("ParticleSystem_getVelocityChange",1,SWIGTYPE_p_osg__ParticleSystem);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  temp2=(osg::UInt32)lua_tonumber(L,2); arg2=&temp2;
  result = ((osg::ParticleSystem const *)arg1)->getVelocityChange((osg::UInt32 const &)*arg2);
  {
    osg::Vec3f * resultptr = new osg::Vec3f((const osg::Vec3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_osg__Vec3f,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystem_getAcceleration(lua_State* L) {
  int SWIG_arg = 0;
  osg::ParticleSystem *arg1 = (osg::ParticleSystem *) 0 ;
  osg::UInt32 *arg2 = 0 ;
  osg::UInt32 temp2 ;
  osg::Vec3f *result = 0 ;
  
  SWIG_check_num_args("getAcceleration",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getAcceleration",1,"osg::ParticleSystem const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getAcceleration",2,"osg::UInt32 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__ParticleSystem,0))){
    SWIG_fail_ptr("ParticleSystem_getAcceleration",1,SWIGTYPE_p_osg__ParticleSystem);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  temp2=(osg::UInt32)lua_tonumber(L,2); arg2=&temp2;
  result = (osg::Vec3f *) &((osg::ParticleSystem const *)arg1)->getAcceleration((osg::UInt32 const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_osg__Vec3f,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystem_getAttribute(lua_State* L) {
  int SWIG_arg = 0;
  osg::ParticleSystem *arg1 = (osg::ParticleSystem *) 0 ;
  osg::UInt32 *arg2 = 0 ;
  std::string *arg3 = 0 ;
  osg::UInt32 temp2 ;
  std::string temp3 ;
  osg::UInt32 result;
  
  SWIG_check_num_args("getAttribute",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getAttribute",1,"osg::ParticleSystem const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getAttribute",2,"osg::UInt32 const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("getAttribute",3,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__ParticleSystem,0))){
    SWIG_fail_ptr("ParticleSystem_getAttribute",1,SWIGTYPE_p_osg__ParticleSystem);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  temp2=(osg::UInt32)lua_tonumber(L,2); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_strlen(L,3)); arg3=&temp3;
  result = (osg::UInt32)((osg::ParticleSystem const *)arg1)->getAttribute((osg::UInt32 const &)*arg2,(std::string const &)*arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystem_getAttributes(lua_State* L) {
  int SWIG_arg = 0;
  osg::ParticleSystem *arg1 = (osg::ParticleSystem *) 0 ;
  osg::UInt32 *arg2 = 0 ;
  osg::UInt32 temp2 ;
  std::map< std::string,osg::UInt32 > *result = 0 ;
  
  SWIG_check_num_args("getAttributes",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getAttributes",1,"osg::ParticleSystem const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getAttributes",2,"osg::UInt32 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__ParticleSystem,0))){
    SWIG_fail_ptr("ParticleSystem_getAttributes",1,SWIGTYPE_p_osg__ParticleSystem);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  temp2=(osg::UInt32)lua_tonumber(L,2); arg2=&temp2;
  result = (std::map< std::string,osg::UInt32 > *) &((osg::ParticleSystem const *)arg1)->getAttributes((osg::UInt32 const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__mapT_std__string_unsigned_int_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystem_setPosition(lua_State* L) {
  int SWIG_arg = 0;
  osg::ParticleSystem *arg1 = (osg::ParticleSystem *) 0 ;
  osg::Pnt3f *arg2 = 0 ;
  osg::UInt32 *arg3 = 0 ;
  osg::UInt32 temp3 ;
  
  SWIG_check_num_args("setPosition",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setPosition",1,"osg::ParticleSystem *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setPosition",2,"osg::Pnt3f const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("setPosition",3,"osg::UInt32 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__ParticleSystem,0))){
    SWIG_fail_ptr("ParticleSystem_setPosition",1,SWIGTYPE_p_osg__ParticleSystem);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__Pnt3f,0))){
    SWIG_fail_ptr("ParticleSystem_setPosition",2,SWIGTYPE_p_osg__Pnt3f);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  temp3=(osg::UInt32)lua_tonumber(L,3); arg3=&temp3;
  (arg1)->setPosition((osg::Pnt3f const &)*arg2,(osg::UInt32 const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystem_setSecPosition(lua_State* L) {
  int SWIG_arg = 0;
  osg::ParticleSystem *arg1 = (osg::ParticleSystem *) 0 ;
  osg::Pnt3f *arg2 = 0 ;
  osg::UInt32 *arg3 = 0 ;
  osg::UInt32 temp3 ;
  
  SWIG_check_num_args("setSecPosition",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setSecPosition",1,"osg::ParticleSystem *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setSecPosition",2,"osg::Pnt3f const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("setSecPosition",3,"osg::UInt32 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__ParticleSystem,0))){
    SWIG_fail_ptr("ParticleSystem_setSecPosition",1,SWIGTYPE_p_osg__ParticleSystem);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__Pnt3f,0))){
    SWIG_fail_ptr("ParticleSystem_setSecPosition",2,SWIGTYPE_p_osg__Pnt3f);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  temp3=(osg::UInt32)lua_tonumber(L,3); arg3=&temp3;
  (arg1)->setSecPosition((osg::Pnt3f const &)*arg2,(osg::UInt32 const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystem_setNormal(lua_State* L) {
  int SWIG_arg = 0;
  osg::ParticleSystem *arg1 = (osg::ParticleSystem *) 0 ;
  osg::Vec3f *arg2 = 0 ;
  osg::UInt32 *arg3 = 0 ;
  osg::UInt32 temp3 ;
  
  SWIG_check_num_args("setNormal",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setNormal",1,"osg::ParticleSystem *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setNormal",2,"osg::Vec3f const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("setNormal",3,"osg::UInt32 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__ParticleSystem,0))){
    SWIG_fail_ptr("ParticleSystem_setNormal",1,SWIGTYPE_p_osg__ParticleSystem);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__Vec3f,0))){
    SWIG_fail_ptr("ParticleSystem_setNormal",2,SWIGTYPE_p_osg__Vec3f);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  temp3=(osg::UInt32)lua_tonumber(L,3); arg3=&temp3;
  (arg1)->setNormal((osg::Vec3f const &)*arg2,(osg::UInt32 const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystem_setColor(lua_State* L) {
  int SWIG_arg = 0;
  osg::ParticleSystem *arg1 = (osg::ParticleSystem *) 0 ;
  osg::Color4f *arg2 = 0 ;
  osg::UInt32 *arg3 = 0 ;
  osg::UInt32 temp3 ;
  
  SWIG_check_num_args("setColor",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setColor",1,"osg::ParticleSystem *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setColor",2,"osg::Color4f const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("setColor",3,"osg::UInt32 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__ParticleSystem,0))){
    SWIG_fail_ptr("ParticleSystem_setColor",1,SWIGTYPE_p_osg__ParticleSystem);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__Color4f,0))){
    SWIG_fail_ptr("ParticleSystem_setColor",2,SWIGTYPE_p_osg__Color4f);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  temp3=(osg::UInt32)lua_tonumber(L,3); arg3=&temp3;
  (arg1)->setColor((osg::Color4f const &)*arg2,(osg::UInt32 const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystem_setSize(lua_State* L) {
  int SWIG_arg = 0;
  osg::ParticleSystem *arg1 = (osg::ParticleSystem *) 0 ;
  osg::Vec3f *arg2 = 0 ;
  osg::UInt32 *arg3 = 0 ;
  osg::UInt32 temp3 ;
  
  SWIG_check_num_args("setSize",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setSize",1,"osg::ParticleSystem *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setSize",2,"osg::Vec3f const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("setSize",3,"osg::UInt32 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__ParticleSystem,0))){
    SWIG_fail_ptr("ParticleSystem_setSize",1,SWIGTYPE_p_osg__ParticleSystem);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__Vec3f,0))){
    SWIG_fail_ptr("ParticleSystem_setSize",2,SWIGTYPE_p_osg__Vec3f);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  temp3=(osg::UInt32)lua_tonumber(L,3); arg3=&temp3;
  (arg1)->setSize((osg::Vec3f const &)*arg2,(osg::UInt32 const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystem_setLifespan(lua_State* L) {
  int SWIG_arg = 0;
  osg::ParticleSystem *arg1 = (osg::ParticleSystem *) 0 ;
  osg::Time *arg2 = 0 ;
  osg::UInt32 *arg3 = 0 ;
  osg::Time temp2 ;
  osg::UInt32 temp3 ;
  
  SWIG_check_num_args("setLifespan",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setLifespan",1,"osg::ParticleSystem *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("setLifespan",2,"osg::Time const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("setLifespan",3,"osg::UInt32 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__ParticleSystem,0))){
    SWIG_fail_ptr("ParticleSystem_setLifespan",1,SWIGTYPE_p_osg__ParticleSystem);
  }
  
  temp2=(osg::Time)lua_tonumber(L,2); arg2=&temp2;
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  temp3=(osg::UInt32)lua_tonumber(L,3); arg3=&temp3;
  (arg1)->setLifespan((osg::Time const &)*arg2,(osg::UInt32 const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystem_setAge(lua_State* L) {
  int SWIG_arg = 0;
  osg::ParticleSystem *arg1 = (osg::ParticleSystem *) 0 ;
  osg::Time *arg2 = 0 ;
  osg::UInt32 *arg3 = 0 ;
  osg::Time temp2 ;
  osg::UInt32 temp3 ;
  
  SWIG_check_num_args("setAge",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setAge",1,"osg::ParticleSystem *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("setAge",2,"osg::Time const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("setAge",3,"osg::UInt32 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__ParticleSystem,0))){
    SWIG_fail_ptr("ParticleSystem_setAge",1,SWIGTYPE_p_osg__ParticleSystem);
  }
  
  temp2=(osg::Time)lua_tonumber(L,2); arg2=&temp2;
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  temp3=(osg::UInt32)lua_tonumber(L,3); arg3=&temp3;
  (arg1)->setAge((osg::Time const &)*arg2,(osg::UInt32 const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystem_setVelocity(lua_State* L) {
  int SWIG_arg = 0;
  osg::ParticleSystem *arg1 = (osg::ParticleSystem *) 0 ;
  osg::Vec3f *arg2 = 0 ;
  osg::UInt32 *arg3 = 0 ;
  osg::UInt32 temp3 ;
  
  SWIG_check_num_args("setVelocity",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setVelocity",1,"osg::ParticleSystem *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setVelocity",2,"osg::Vec3f const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("setVelocity",3,"osg::UInt32 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__ParticleSystem,0))){
    SWIG_fail_ptr("ParticleSystem_setVelocity",1,SWIGTYPE_p_osg__ParticleSystem);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__Vec3f,0))){
    SWIG_fail_ptr("ParticleSystem_setVelocity",2,SWIGTYPE_p_osg__Vec3f);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  temp3=(osg::UInt32)lua_tonumber(L,3); arg3=&temp3;
  (arg1)->setVelocity((osg::Vec3f const &)*arg2,(osg::UInt32 const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystem_setSecVelocity(lua_State* L) {
  int SWIG_arg = 0;
  osg::ParticleSystem *arg1 = (osg::ParticleSystem *) 0 ;
  osg::Vec3f *arg2 = 0 ;
  osg::UInt32 *arg3 = 0 ;
  osg::UInt32 temp3 ;
  
  SWIG_check_num_args("setSecVelocity",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setSecVelocity",1,"osg::ParticleSystem *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setSecVelocity",2,"osg::Vec3f const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("setSecVelocity",3,"osg::UInt32 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__ParticleSystem,0))){
    SWIG_fail_ptr("ParticleSystem_setSecVelocity",1,SWIGTYPE_p_osg__ParticleSystem);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__Vec3f,0))){
    SWIG_fail_ptr("ParticleSystem_setSecVelocity",2,SWIGTYPE_p_osg__Vec3f);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  temp3=(osg::UInt32)lua_tonumber(L,3); arg3=&temp3;
  (arg1)->setSecVelocity((osg::Vec3f const &)*arg2,(osg::UInt32 const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystem_setAcceleration(lua_State* L) {
  int SWIG_arg = 0;
  osg::ParticleSystem *arg1 = (osg::ParticleSystem *) 0 ;
  osg::Vec3f *arg2 = 0 ;
  osg::UInt32 *arg3 = 0 ;
  osg::UInt32 temp3 ;
  
  SWIG_check_num_args("setAcceleration",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setAcceleration",1,"osg::ParticleSystem *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setAcceleration",2,"osg::Vec3f const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("setAcceleration",3,"osg::UInt32 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__ParticleSystem,0))){
    SWIG_fail_ptr("ParticleSystem_setAcceleration",1,SWIGTYPE_p_osg__ParticleSystem);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__Vec3f,0))){
    SWIG_fail_ptr("ParticleSystem_setAcceleration",2,SWIGTYPE_p_osg__Vec3f);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  temp3=(osg::UInt32)lua_tonumber(L,3); arg3=&temp3;
  (arg1)->setAcceleration((osg::Vec3f const &)*arg2,(osg::UInt32 const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystem_setAttributes(lua_State* L) {
  int SWIG_arg = 0;
  osg::ParticleSystem *arg1 = (osg::ParticleSystem *) 0 ;
  std::map< std::string,osg::UInt32 > *arg2 = 0 ;
  osg::UInt32 *arg3 = 0 ;
  osg::UInt32 temp3 ;
  
  SWIG_check_num_args("setAttributes",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setAttributes",1,"osg::ParticleSystem *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setAttributes",2,"std::map< std::string,osg::UInt32 > const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("setAttributes",3,"osg::UInt32 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__ParticleSystem,0))){
    SWIG_fail_ptr("ParticleSystem_setAttributes",1,SWIGTYPE_p_osg__ParticleSystem);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__mapT_std__string_unsigned_int_t,0))){
    SWIG_fail_ptr("ParticleSystem_setAttributes",2,SWIGTYPE_p_std__mapT_std__string_unsigned_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  temp3=(osg::UInt32)lua_tonumber(L,3); arg3=&temp3;
  (arg1)->setAttributes((std::map< std::string,osg::UInt32 > const &)*arg2,(osg::UInt32 const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystem_addParticle(lua_State* L) {
  int SWIG_arg = 0;
  osg::ParticleSystem *arg1 = (osg::ParticleSystem *) 0 ;
  osg::Pnt3f *arg2 = 0 ;
  osg::Pnt3f *arg3 = 0 ;
  osg::Vec3f *arg4 = 0 ;
  osg::Color4f *arg5 = 0 ;
  osg::Vec3f *arg6 = 0 ;
  osg::Real32 arg7 ;
  osg::Real32 arg8 ;
  osg::Vec3f *arg9 = 0 ;
  osg::Vec3f *arg10 = 0 ;
  osg::Vec3f *arg11 = 0 ;
  std::map< std::string,osg::UInt32 > *arg12 = 0 ;
  bool result;
  
  SWIG_check_num_args("addParticle",12,12)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("addParticle",1,"osg::ParticleSystem *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("addParticle",2,"osg::Pnt3f const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("addParticle",3,"osg::Pnt3f const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("addParticle",4,"osg::Vec3f const &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("addParticle",5,"osg::Color4f const &");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("addParticle",6,"osg::Vec3f const &");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("addParticle",7,"osg::Real32");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("addParticle",8,"osg::Real32");
  if(!lua_isuserdata(L,9)) SWIG_fail_arg("addParticle",9,"osg::Vec3f const &");
  if(!lua_isuserdata(L,10)) SWIG_fail_arg("addParticle",10,"osg::Vec3f const &");
  if(!lua_isuserdata(L,11)) SWIG_fail_arg("addParticle",11,"osg::Vec3f const &");
  if(!lua_isuserdata(L,12)) SWIG_fail_arg("addParticle",12,"std::map< std::string,osg::UInt32 > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__ParticleSystem,0))){
    SWIG_fail_ptr("ParticleSystem_addParticle",1,SWIGTYPE_p_osg__ParticleSystem);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__Pnt3f,0))){
    SWIG_fail_ptr("ParticleSystem_addParticle",2,SWIGTYPE_p_osg__Pnt3f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_osg__Pnt3f,0))){
    SWIG_fail_ptr("ParticleSystem_addParticle",3,SWIGTYPE_p_osg__Pnt3f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_osg__Vec3f,0))){
    SWIG_fail_ptr("ParticleSystem_addParticle",4,SWIGTYPE_p_osg__Vec3f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_osg__Color4f,0))){
    SWIG_fail_ptr("ParticleSystem_addParticle",5,SWIGTYPE_p_osg__Color4f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_osg__Vec3f,0))){
    SWIG_fail_ptr("ParticleSystem_addParticle",6,SWIGTYPE_p_osg__Vec3f);
  }
  
  arg7 = (osg::Real32)lua_tonumber(L, 7);
  arg8 = (osg::Real32)lua_tonumber(L, 8);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&arg9,SWIGTYPE_p_osg__Vec3f,0))){
    SWIG_fail_ptr("ParticleSystem_addParticle",9,SWIGTYPE_p_osg__Vec3f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,10,(void**)&arg10,SWIGTYPE_p_osg__Vec3f,0))){
    SWIG_fail_ptr("ParticleSystem_addParticle",10,SWIGTYPE_p_osg__Vec3f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,11,(void**)&arg11,SWIGTYPE_p_osg__Vec3f,0))){
    SWIG_fail_ptr("ParticleSystem_addParticle",11,SWIGTYPE_p_osg__Vec3f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,12,(void**)&arg12,SWIGTYPE_p_std__mapT_std__string_unsigned_int_t,0))){
    SWIG_fail_ptr("ParticleSystem_addParticle",12,SWIGTYPE_p_std__mapT_std__string_unsigned_int_t);
  }
  
  result = (bool)(arg1)->addParticle((osg::Pnt3f const &)*arg2,(osg::Pnt3f const &)*arg3,(osg::Vec3f const &)*arg4,(osg::Color4f const &)*arg5,(osg::Vec3f const &)*arg6,arg7,arg8,(osg::Vec3f const &)*arg9,(osg::Vec3f const &)*arg10,(osg::Vec3f const &)*arg11,(std::map< std::string,osg::UInt32 > const &)*arg12);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystem_addWorldSpaceParticle(lua_State* L) {
  int SWIG_arg = 0;
  osg::ParticleSystem *arg1 = (osg::ParticleSystem *) 0 ;
  osg::Pnt3f *arg2 = 0 ;
  osg::Pnt3f *arg3 = 0 ;
  osg::Vec3f *arg4 = 0 ;
  osg::Color4f *arg5 = 0 ;
  osg::Vec3f *arg6 = 0 ;
  osg::Real32 arg7 ;
  osg::Real32 arg8 ;
  osg::Vec3f *arg9 = 0 ;
  osg::Vec3f *arg10 = 0 ;
  osg::Vec3f *arg11 = 0 ;
  std::map< std::string,osg::UInt32 > *arg12 = 0 ;
  bool result;
  
  SWIG_check_num_args("addWorldSpaceParticle",12,12)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("addWorldSpaceParticle",1,"osg::ParticleSystem *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("addWorldSpaceParticle",2,"osg::Pnt3f const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("addWorldSpaceParticle",3,"osg::Pnt3f const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("addWorldSpaceParticle",4,"osg::Vec3f const &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("addWorldSpaceParticle",5,"osg::Color4f const &");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("addWorldSpaceParticle",6,"osg::Vec3f const &");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("addWorldSpaceParticle",7,"osg::Real32");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("addWorldSpaceParticle",8,"osg::Real32");
  if(!lua_isuserdata(L,9)) SWIG_fail_arg("addWorldSpaceParticle",9,"osg::Vec3f const &");
  if(!lua_isuserdata(L,10)) SWIG_fail_arg("addWorldSpaceParticle",10,"osg::Vec3f const &");
  if(!lua_isuserdata(L,11)) SWIG_fail_arg("addWorldSpaceParticle",11,"osg::Vec3f const &");
  if(!lua_isuserdata(L,12)) SWIG_fail_arg("addWorldSpaceParticle",12,"std::map< std::string,osg::UInt32 > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__ParticleSystem,0))){
    SWIG_fail_ptr("ParticleSystem_addWorldSpaceParticle",1,SWIGTYPE_p_osg__ParticleSystem);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__Pnt3f,0))){
    SWIG_fail_ptr("ParticleSystem_addWorldSpaceParticle",2,SWIGTYPE_p_osg__Pnt3f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_osg__Pnt3f,0))){
    SWIG_fail_ptr("ParticleSystem_addWorldSpaceParticle",3,SWIGTYPE_p_osg__Pnt3f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_osg__Vec3f,0))){
    SWIG_fail_ptr("ParticleSystem_addWorldSpaceParticle",4,SWIGTYPE_p_osg__Vec3f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_osg__Color4f,0))){
    SWIG_fail_ptr("ParticleSystem_addWorldSpaceParticle",5,SWIGTYPE_p_osg__Color4f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_osg__Vec3f,0))){
    SWIG_fail_ptr("ParticleSystem_addWorldSpaceParticle",6,SWIGTYPE_p_osg__Vec3f);
  }
  
  arg7 = (osg::Real32)lua_tonumber(L, 7);
  arg8 = (osg::Real32)lua_tonumber(L, 8);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&arg9,SWIGTYPE_p_osg__Vec3f,0))){
    SWIG_fail_ptr("ParticleSystem_addWorldSpaceParticle",9,SWIGTYPE_p_osg__Vec3f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,10,(void**)&arg10,SWIGTYPE_p_osg__Vec3f,0))){
    SWIG_fail_ptr("ParticleSystem_addWorldSpaceParticle",10,SWIGTYPE_p_osg__Vec3f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,11,(void**)&arg11,SWIGTYPE_p_osg__Vec3f,0))){
    SWIG_fail_ptr("ParticleSystem_addWorldSpaceParticle",11,SWIGTYPE_p_osg__Vec3f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,12,(void**)&arg12,SWIGTYPE_p_std__mapT_std__string_unsigned_int_t,0))){
    SWIG_fail_ptr("ParticleSystem_addWorldSpaceParticle",12,SWIGTYPE_p_std__mapT_std__string_unsigned_int_t);
  }
  
  result = (bool)(arg1)->addWorldSpaceParticle((osg::Pnt3f const &)*arg2,(osg::Pnt3f const &)*arg3,(osg::Vec3f const &)*arg4,(osg::Color4f const &)*arg5,(osg::Vec3f const &)*arg6,arg7,arg8,(osg::Vec3f const &)*arg9,(osg::Vec3f const &)*arg10,(osg::Vec3f const &)*arg11,(std::map< std::string,osg::UInt32 > const &)*arg12);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystem_killParticle(lua_State* L) {
  int SWIG_arg = 0;
  osg::ParticleSystem *arg1 = (osg::ParticleSystem *) 0 ;
  osg::UInt32 arg2 ;
  bool result;
  
  SWIG_check_num_args("killParticle",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("killParticle",1,"osg::ParticleSystem *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("killParticle",2,"osg::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__ParticleSystem,0))){
    SWIG_fail_ptr("ParticleSystem_killParticle",1,SWIGTYPE_p_osg__ParticleSystem);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (osg::UInt32)lua_tonumber(L, 2);
  result = (bool)(arg1)->killParticle(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystem_attachUpdateListener(lua_State* L) {
  int SWIG_arg = 0;
  osg::ParticleSystem *arg1 = (osg::ParticleSystem *) 0 ;
  osg::WindowEventProducerPtr arg2 ;
  osg::WindowEventProducerPtr *argp2 ;
  bool result;
  
  SWIG_check_num_args("attachUpdateListener",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("attachUpdateListener",1,"osg::ParticleSystem *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("attachUpdateListener",2,"osg::WindowEventProducerPtr");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__ParticleSystem,0))){
    SWIG_fail_ptr("ParticleSystem_attachUpdateListener",1,SWIGTYPE_p_osg__ParticleSystem);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_osg__WindowEventProducerPtr,0))){
    SWIG_fail_ptr("ParticleSystem_attachUpdateListener",2,SWIGTYPE_p_osg__WindowEventProducerPtr);
  }
  arg2 = *argp2;
  
  result = (bool)(arg1)->attachUpdateListener(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystem_dettachUpdateListener(lua_State* L) {
  int SWIG_arg = 0;
  osg::ParticleSystem *arg1 = (osg::ParticleSystem *) 0 ;
  osg::WindowEventProducerPtr arg2 ;
  osg::WindowEventProducerPtr *argp2 ;
  
  SWIG_check_num_args("dettachUpdateListener",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dettachUpdateListener",1,"osg::ParticleSystem *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("dettachUpdateListener",2,"osg::WindowEventProducerPtr");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__ParticleSystem,0))){
    SWIG_fail_ptr("ParticleSystem_dettachUpdateListener",1,SWIGTYPE_p_osg__ParticleSystem);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_osg__WindowEventProducerPtr,0))){
    SWIG_fail_ptr("ParticleSystem_dettachUpdateListener",2,SWIGTYPE_p_osg__WindowEventProducerPtr);
  }
  arg2 = *argp2;
  
  (arg1)->dettachUpdateListener(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystem_intersect__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  osg::ParticleSystem *arg1 = (osg::ParticleSystem *) 0 ;
  osg::Line *arg2 = 0 ;
  osg::Real32 arg3 ;
  osg::NodePtr arg4 ;
  osg::NodePtr *argp4 ;
  std::vector< osg::UInt32 > result;
  
  SWIG_check_num_args("intersect",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("intersect",1,"osg::ParticleSystem const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("intersect",2,"osg::Line const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("intersect",3,"osg::Real32");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("intersect",4,"osg::NodePtr");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__ParticleSystem,0))){
    SWIG_fail_ptr("ParticleSystem_intersect",1,SWIGTYPE_p_osg__ParticleSystem);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__Line,0))){
    SWIG_fail_ptr("ParticleSystem_intersect",2,SWIGTYPE_p_osg__Line);
  }
  
  arg3 = (osg::Real32)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_osg__NodePtr,0))){
    SWIG_fail_ptr("ParticleSystem_intersect",4,SWIGTYPE_p_osg__NodePtr);
  }
  arg4 = *argp4;
  
  result = ((osg::ParticleSystem const *)arg1)->intersect((osg::Line const &)*arg2,arg3,arg4);
  {
    std::vector< osg::UInt32 > * resultptr = new std::vector< osg::UInt32 >((const std::vector< osg::UInt32 > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_unsigned_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystem_intersect__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  osg::ParticleSystem *arg1 = (osg::ParticleSystem *) 0 ;
  osg::Line *arg2 = 0 ;
  osg::Real32 arg3 ;
  std::vector< osg::UInt32 > result;
  
  SWIG_check_num_args("intersect",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("intersect",1,"osg::ParticleSystem const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("intersect",2,"osg::Line const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("intersect",3,"osg::Real32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__ParticleSystem,0))){
    SWIG_fail_ptr("ParticleSystem_intersect",1,SWIGTYPE_p_osg__ParticleSystem);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__Line,0))){
    SWIG_fail_ptr("ParticleSystem_intersect",2,SWIGTYPE_p_osg__Line);
  }
  
  arg3 = (osg::Real32)lua_tonumber(L, 3);
  result = ((osg::ParticleSystem const *)arg1)->intersect((osg::Line const &)*arg2,arg3);
  {
    std::vector< osg::UInt32 > * resultptr = new std::vector< osg::UInt32 >((const std::vector< osg::UInt32 > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_unsigned_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystem_intersect(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_osg__ParticleSystem, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_osg__Line, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_ParticleSystem_intersect__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_osg__ParticleSystem, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_osg__Line, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_osg__NodePtr, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_ParticleSystem_intersect__SWIG_0(L);
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'ParticleSystem_intersect'\n"
    "  Possible C/C++ prototypes are:\n"
    "    intersect(osg::ParticleSystem const *,osg::Line const &,osg::Real32,osg::NodePtr)\n"
    "    intersect(osg::ParticleSystem const *,osg::Line const &,osg::Real32)\n");
  lua_error(L);return 0;
}


static swig_lua_method swig_osg_ParticleSystem_methods[] = {
    {"getNumParticles", _wrap_ParticleSystem_getNumParticles}, 
    {"getPosition", _wrap_ParticleSystem_getPosition}, 
    {"getSecPosition", _wrap_ParticleSystem_getSecPosition}, 
    {"getPositionChange", _wrap_ParticleSystem_getPositionChange}, 
    {"getNormal", _wrap_ParticleSystem_getNormal}, 
    {"getColor", _wrap_ParticleSystem_getColor}, 
    {"getSize", _wrap_ParticleSystem_getSize}, 
    {"getLifespan", _wrap_ParticleSystem_getLifespan}, 
    {"getAge", _wrap_ParticleSystem_getAge}, 
    {"getVelocity", _wrap_ParticleSystem_getVelocity}, 
    {"getSecVelocity", _wrap_ParticleSystem_getSecVelocity}, 
    {"getVelocityChange", _wrap_ParticleSystem_getVelocityChange}, 
    {"getAcceleration", _wrap_ParticleSystem_getAcceleration}, 
    {"getAttribute", _wrap_ParticleSystem_getAttribute}, 
    {"getAttributes", _wrap_ParticleSystem_getAttributes}, 
    {"setPosition", _wrap_ParticleSystem_setPosition}, 
    {"setSecPosition", _wrap_ParticleSystem_setSecPosition}, 
    {"setNormal", _wrap_ParticleSystem_setNormal}, 
    {"setColor", _wrap_ParticleSystem_setColor}, 
    {"setSize", _wrap_ParticleSystem_setSize}, 
    {"setLifespan", _wrap_ParticleSystem_setLifespan}, 
    {"setAge", _wrap_ParticleSystem_setAge}, 
    {"setVelocity", _wrap_ParticleSystem_setVelocity}, 
    {"setSecVelocity", _wrap_ParticleSystem_setSecVelocity}, 
    {"setAcceleration", _wrap_ParticleSystem_setAcceleration}, 
    {"setAttributes", _wrap_ParticleSystem_setAttributes}, 
    {"addParticle", _wrap_ParticleSystem_addParticle}, 
    {"addWorldSpaceParticle", _wrap_ParticleSystem_addWorldSpaceParticle}, 
    {"killParticle", _wrap_ParticleSystem_killParticle}, 
    {"attachUpdateListener", _wrap_ParticleSystem_attachUpdateListener}, 
    {"dettachUpdateListener", _wrap_ParticleSystem_dettachUpdateListener}, 
    {"intersect", _wrap_ParticleSystem_intersect}, 
    {0,0}
};
static swig_lua_attribute swig_osg_ParticleSystem_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_osg_ParticleSystem_bases[] = {0,0};
static const char *swig_osg_ParticleSystem_base_names[] = {"osg::AttachmentContainer *",0};
static swig_lua_class _wrap_class_osg_ParticleSystem = { "ParticleSystem", &SWIGTYPE_p_osg__ParticleSystem,0,0, swig_osg_ParticleSystem_methods, swig_osg_ParticleSystem_attributes, swig_osg_ParticleSystem_bases, swig_osg_ParticleSystem_base_names };

static int _wrap_new_ComponentPtr__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  osg::ComponentPtr *result = 0 ;
  
  SWIG_check_num_args("osg::ComponentPtr",0,0)
  result = (osg::ComponentPtr *)new osg::ComponentPtr();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_osg__ComponentPtr,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ComponentPtr__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  osg::ComponentPtr *arg1 = 0 ;
  osg::ComponentPtr *result = 0 ;
  
  SWIG_check_num_args("osg::ComponentPtr",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("osg::ComponentPtr",1,"osg::ComponentPtr const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__ComponentPtr,0))){
    SWIG_fail_ptr("new_ComponentPtr",1,SWIGTYPE_p_osg__ComponentPtr);
  }
  
  result = (osg::ComponentPtr *)new osg::ComponentPtr((osg::ComponentPtr const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_osg__ComponentPtr,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ComponentPtr(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_ComponentPtr__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_osg__ComponentPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_ComponentPtr__SWIG_1(L);
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_ComponentPtr'\n"
    "  Possible C/C++ prototypes are:\n"
    "    osg::ComponentPtr()\n"
    "    osg::ComponentPtr(osg::ComponentPtr const &)\n");
  lua_error(L);return 0;
}


static int _wrap_ComponentPtr___deref__(lua_State* L) {
  int SWIG_arg = 0;
  osg::ComponentPtr *arg1 = (osg::ComponentPtr *) 0 ;
  osg::Component *result = 0 ;
  
  SWIG_check_num_args("operator ->",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("operator ->",1,"osg::ComponentPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__ComponentPtr,0))){
    SWIG_fail_ptr("ComponentPtr___deref__",1,SWIGTYPE_p_osg__ComponentPtr);
  }
  
  result = (osg::Component *)(arg1)->operator ->();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_osg__Component,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComponentPtr_dcast(lua_State* L) {
  int SWIG_arg = 0;
  osg::FieldContainerPtr arg1 ;
  osg::FieldContainerPtr *argp1 ;
  osg::ComponentPtr result;
  
  SWIG_check_num_args("osg::ComponentPtr::dcast",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("osg::ComponentPtr::dcast",1,"osg::FieldContainerPtr const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_osg__FieldContainerPtr,0))){
    SWIG_fail_ptr("ComponentPtr_dcast",1,SWIGTYPE_p_osg__FieldContainerPtr);
  }
  arg1 = *argp1;
  
  result = osg::ComponentPtr::dcast(arg1);
  {
    osg::ComponentPtr * resultptr = new osg::ComponentPtr((const osg::ComponentPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_osg__ComponentPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComponentPtr_getBounds(lua_State* L) {
  int SWIG_arg = 0;
  osg::ComponentPtr *arg1 = (osg::ComponentPtr *) 0 ;
  osg::Pnt2f *arg2 = 0 ;
  osg::Pnt2f *arg3 = 0 ;
  
  SWIG_check_num_args("getBounds",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getBounds",1,"osg::ComponentPtr const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("getBounds",2,"osg::Pnt2f &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("getBounds",3,"osg::Pnt2f &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__ComponentPtr,0))){
    SWIG_fail_ptr("ComponentPtr_getBounds",1,SWIGTYPE_p_osg__ComponentPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__Pnt2f,0))){
    SWIG_fail_ptr("ComponentPtr_getBounds",2,SWIGTYPE_p_osg__Pnt2f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_osg__Pnt2f,0))){
    SWIG_fail_ptr("ComponentPtr_getBounds",3,SWIGTYPE_p_osg__Pnt2f);
  }
  
  (*arg1)->getBounds(*arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComponentPtr_getClipBounds(lua_State* L) {
  int SWIG_arg = 0;
  osg::ComponentPtr *arg1 = (osg::ComponentPtr *) 0 ;
  osg::Pnt2f *arg2 = 0 ;
  osg::Pnt2f *arg3 = 0 ;
  
  SWIG_check_num_args("getClipBounds",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getClipBounds",1,"osg::ComponentPtr const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("getClipBounds",2,"osg::Pnt2f &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("getClipBounds",3,"osg::Pnt2f &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__ComponentPtr,0))){
    SWIG_fail_ptr("ComponentPtr_getClipBounds",1,SWIGTYPE_p_osg__ComponentPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__Pnt2f,0))){
    SWIG_fail_ptr("ComponentPtr_getClipBounds",2,SWIGTYPE_p_osg__Pnt2f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_osg__Pnt2f,0))){
    SWIG_fail_ptr("ComponentPtr_getClipBounds",3,SWIGTYPE_p_osg__Pnt2f);
  }
  
  (*arg1)->getClipBounds(*arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComponentPtr_getInsideBorderBounds(lua_State* L) {
  int SWIG_arg = 0;
  osg::ComponentPtr *arg1 = (osg::ComponentPtr *) 0 ;
  osg::Pnt2f *arg2 = 0 ;
  osg::Pnt2f *arg3 = 0 ;
  
  SWIG_check_num_args("getInsideBorderBounds",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getInsideBorderBounds",1,"osg::ComponentPtr const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("getInsideBorderBounds",2,"osg::Pnt2f &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("getInsideBorderBounds",3,"osg::Pnt2f &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__ComponentPtr,0))){
    SWIG_fail_ptr("ComponentPtr_getInsideBorderBounds",1,SWIGTYPE_p_osg__ComponentPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__Pnt2f,0))){
    SWIG_fail_ptr("ComponentPtr_getInsideBorderBounds",2,SWIGTYPE_p_osg__Pnt2f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_osg__Pnt2f,0))){
    SWIG_fail_ptr("ComponentPtr_getInsideBorderBounds",3,SWIGTYPE_p_osg__Pnt2f);
  }
  
  (*arg1)->getInsideBorderBounds(*arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComponentPtr_getBoundsRenderingSurfaceSpace(lua_State* L) {
  int SWIG_arg = 0;
  osg::ComponentPtr *arg1 = (osg::ComponentPtr *) 0 ;
  osg::Pnt2f *arg2 = 0 ;
  osg::Pnt2f *arg3 = 0 ;
  
  SWIG_check_num_args("getBoundsRenderingSurfaceSpace",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getBoundsRenderingSurfaceSpace",1,"osg::ComponentPtr const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("getBoundsRenderingSurfaceSpace",2,"osg::Pnt2f &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("getBoundsRenderingSurfaceSpace",3,"osg::Pnt2f &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__ComponentPtr,0))){
    SWIG_fail_ptr("ComponentPtr_getBoundsRenderingSurfaceSpace",1,SWIGTYPE_p_osg__ComponentPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__Pnt2f,0))){
    SWIG_fail_ptr("ComponentPtr_getBoundsRenderingSurfaceSpace",2,SWIGTYPE_p_osg__Pnt2f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_osg__Pnt2f,0))){
    SWIG_fail_ptr("ComponentPtr_getBoundsRenderingSurfaceSpace",3,SWIGTYPE_p_osg__Pnt2f);
  }
  
  (*arg1)->getBoundsRenderingSurfaceSpace(*arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComponentPtr_updateContainerLayout(lua_State* L) {
  int SWIG_arg = 0;
  osg::ComponentPtr *arg1 = (osg::ComponentPtr *) 0 ;
  
  SWIG_check_num_args("updateContainerLayout",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("updateContainerLayout",1,"osg::ComponentPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__ComponentPtr,0))){
    SWIG_fail_ptr("ComponentPtr_updateContainerLayout",1,SWIGTYPE_p_osg__ComponentPtr);
  }
  
  (*arg1)->updateContainerLayout();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComponentPtr_updateClipBounds(lua_State* L) {
  int SWIG_arg = 0;
  osg::ComponentPtr *arg1 = (osg::ComponentPtr *) 0 ;
  
  SWIG_check_num_args("updateClipBounds",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("updateClipBounds",1,"osg::ComponentPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__ComponentPtr,0))){
    SWIG_fail_ptr("ComponentPtr_updateClipBounds",1,SWIGTYPE_p_osg__ComponentPtr);
  }
  
  (*arg1)->updateClipBounds();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComponentPtr_getRequestedSize(lua_State* L) {
  int SWIG_arg = 0;
  osg::ComponentPtr *arg1 = (osg::ComponentPtr *) 0 ;
  osg::Vec2f result;
  
  SWIG_check_num_args("getRequestedSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getRequestedSize",1,"osg::ComponentPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__ComponentPtr,0))){
    SWIG_fail_ptr("ComponentPtr_getRequestedSize",1,SWIGTYPE_p_osg__ComponentPtr);
  }
  
  result = (*arg1)->getRequestedSize();
  {
    osg::Vec2f * resultptr = new osg::Vec2f((const osg::Vec2f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_osg__Vec2f,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComponentPtr_getContentRequestedSize(lua_State* L) {
  int SWIG_arg = 0;
  osg::ComponentPtr *arg1 = (osg::ComponentPtr *) 0 ;
  osg::Vec2f result;
  
  SWIG_check_num_args("getContentRequestedSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getContentRequestedSize",1,"osg::ComponentPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__ComponentPtr,0))){
    SWIG_fail_ptr("ComponentPtr_getContentRequestedSize",1,SWIGTYPE_p_osg__ComponentPtr);
  }
  
  result = (*arg1)->getContentRequestedSize();
  {
    osg::Vec2f * resultptr = new osg::Vec2f((const osg::Vec2f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_osg__Vec2f,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComponentPtr_getBorderingLength(lua_State* L) {
  int SWIG_arg = 0;
  osg::ComponentPtr *arg1 = (osg::ComponentPtr *) 0 ;
  osg::Vec2f result;
  
  SWIG_check_num_args("getBorderingLength",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getBorderingLength",1,"osg::ComponentPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__ComponentPtr,0))){
    SWIG_fail_ptr("ComponentPtr_getBorderingLength",1,SWIGTYPE_p_osg__ComponentPtr);
  }
  
  result = (*arg1)->getBorderingLength();
  {
    osg::Vec2f * resultptr = new osg::Vec2f((const osg::Vec2f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_osg__Vec2f,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComponentPtr_setMouseContained(lua_State* L) {
  int SWIG_arg = 0;
  osg::ComponentPtr *arg1 = (osg::ComponentPtr *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("setMouseContained",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setMouseContained",1,"osg::ComponentPtr *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("setMouseContained",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__ComponentPtr,0))){
    SWIG_fail_ptr("ComponentPtr_setMouseContained",1,SWIGTYPE_p_osg__ComponentPtr);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (*arg1)->setMouseContained(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComponentPtr_getMouseContained(lua_State* L) {
  int SWIG_arg = 0;
  osg::ComponentPtr *arg1 = (osg::ComponentPtr *) 0 ;
  bool result;
  
  SWIG_check_num_args("getMouseContained",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getMouseContained",1,"osg::ComponentPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__ComponentPtr,0))){
    SWIG_fail_ptr("ComponentPtr_getMouseContained",1,SWIGTYPE_p_osg__ComponentPtr);
  }
  
  result = (bool)(*arg1)->getMouseContained();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComponentPtr_takeFocus__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  osg::ComponentPtr *arg1 = (osg::ComponentPtr *) 0 ;
  bool arg2 ;
  bool result;
  
  SWIG_check_num_args("takeFocus",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("takeFocus",1,"osg::ComponentPtr *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("takeFocus",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__ComponentPtr,0))){
    SWIG_fail_ptr("ComponentPtr_takeFocus",1,SWIGTYPE_p_osg__ComponentPtr);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  result = (bool)(*arg1)->takeFocus(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComponentPtr_takeFocus__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  osg::ComponentPtr *arg1 = (osg::ComponentPtr *) 0 ;
  bool result;
  
  SWIG_check_num_args("takeFocus",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("takeFocus",1,"osg::ComponentPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__ComponentPtr,0))){
    SWIG_fail_ptr("ComponentPtr_takeFocus",1,SWIGTYPE_p_osg__ComponentPtr);
  }
  
  result = (bool)(*arg1)->takeFocus();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComponentPtr_takeFocus(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_osg__ComponentPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_ComponentPtr_takeFocus__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_osg__ComponentPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_ComponentPtr_takeFocus__SWIG_0(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'ComponentPtr_takeFocus'\n"
    "  Possible C/C++ prototypes are:\n"
    "    takeFocus(osg::ComponentPtr *,bool)\n"
    "    takeFocus(osg::ComponentPtr *)\n");
  lua_error(L);return 0;
}


static int _wrap_ComponentPtr_isContained__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  osg::ComponentPtr *arg1 = (osg::ComponentPtr *) 0 ;
  osg::Pnt2f *arg2 = 0 ;
  bool arg3 ;
  bool result;
  
  SWIG_check_num_args("isContained",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isContained",1,"osg::ComponentPtr const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("isContained",2,"osg::Pnt2f const &");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("isContained",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__ComponentPtr,0))){
    SWIG_fail_ptr("ComponentPtr_isContained",1,SWIGTYPE_p_osg__ComponentPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__Pnt2f,0))){
    SWIG_fail_ptr("ComponentPtr_isContained",2,SWIGTYPE_p_osg__Pnt2f);
  }
  
  arg3 = (lua_toboolean(L, 3)!=0);
  result = (bool)(*arg1)->isContained((osg::Pnt2f const &)*arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComponentPtr_isContained__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  osg::ComponentPtr *arg1 = (osg::ComponentPtr *) 0 ;
  osg::Pnt2f *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("isContained",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isContained",1,"osg::ComponentPtr const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("isContained",2,"osg::Pnt2f const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__ComponentPtr,0))){
    SWIG_fail_ptr("ComponentPtr_isContained",1,SWIGTYPE_p_osg__ComponentPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__Pnt2f,0))){
    SWIG_fail_ptr("ComponentPtr_isContained",2,SWIGTYPE_p_osg__Pnt2f);
  }
  
  result = (bool)(*arg1)->isContained((osg::Pnt2f const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComponentPtr_isContained(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_osg__ComponentPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_osg__Pnt2f, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ComponentPtr_isContained__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_osg__ComponentPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_osg__Pnt2f, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_ComponentPtr_isContained__SWIG_0(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'ComponentPtr_isContained'\n"
    "  Possible C/C++ prototypes are:\n"
    "    isContained(osg::ComponentPtr const *,osg::Pnt2f const &,bool)\n"
    "    isContained(osg::ComponentPtr const *,osg::Pnt2f const &)\n");
  lua_error(L);return 0;
}


static int _wrap_ComponentPtr_getBaseline(lua_State* L) {
  int SWIG_arg = 0;
  osg::ComponentPtr *arg1 = (osg::ComponentPtr *) 0 ;
  osg::Real32 *arg2 = 0 ;
  osg::Real32 *arg3 = 0 ;
  osg::Real32 temp2 ;
  osg::Real32 temp3 ;
  osg::Real32 result;
  
  SWIG_check_num_args("getBaseline",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getBaseline",1,"osg::ComponentPtr const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getBaseline",2,"osg::Real32 const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("getBaseline",3,"osg::Real32 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__ComponentPtr,0))){
    SWIG_fail_ptr("ComponentPtr_getBaseline",1,SWIGTYPE_p_osg__ComponentPtr);
  }
  
  temp2=(osg::Real32)lua_tonumber(L,2); arg2=&temp2;
  temp3=(osg::Real32)lua_tonumber(L,3); arg3=&temp3;
  result = (osg::Real32)(*arg1)->getBaseline((osg::Real32 const &)*arg2,(osg::Real32 const &)*arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComponentPtr_getToolTipLocation(lua_State* L) {
  int SWIG_arg = 0;
  osg::ComponentPtr *arg1 = (osg::ComponentPtr *) 0 ;
  osg::Pnt2f arg2 ;
  osg::Pnt2f *argp2 ;
  osg::Pnt2f result;
  
  SWIG_check_num_args("getToolTipLocation",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getToolTipLocation",1,"osg::ComponentPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("getToolTipLocation",2,"osg::Pnt2f");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__ComponentPtr,0))){
    SWIG_fail_ptr("ComponentPtr_getToolTipLocation",1,SWIGTYPE_p_osg__ComponentPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_osg__Pnt2f,0))){
    SWIG_fail_ptr("ComponentPtr_getToolTipLocation",2,SWIGTYPE_p_osg__Pnt2f);
  }
  arg2 = *argp2;
  
  result = (*arg1)->getToolTipLocation(arg2);
  {
    osg::Pnt2f * resultptr = new osg::Pnt2f((const osg::Pnt2f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_osg__Pnt2f,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComponentPtr_getPreferredScrollableViewportSize(lua_State* L) {
  int SWIG_arg = 0;
  osg::ComponentPtr *arg1 = (osg::ComponentPtr *) 0 ;
  osg::Vec2f result;
  
  SWIG_check_num_args("getPreferredScrollableViewportSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getPreferredScrollableViewportSize",1,"osg::ComponentPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__ComponentPtr,0))){
    SWIG_fail_ptr("ComponentPtr_getPreferredScrollableViewportSize",1,SWIGTYPE_p_osg__ComponentPtr);
  }
  
  result = (*arg1)->getPreferredScrollableViewportSize();
  {
    osg::Vec2f * resultptr = new osg::Vec2f((const osg::Vec2f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_osg__Vec2f,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComponentPtr_getScrollableBlockIncrement(lua_State* L) {
  int SWIG_arg = 0;
  osg::ComponentPtr *arg1 = (osg::ComponentPtr *) 0 ;
  osg::Pnt2f *arg2 = 0 ;
  osg::Pnt2f *arg3 = 0 ;
  osg::UInt32 *arg4 = 0 ;
  osg::Int32 *arg5 = 0 ;
  osg::UInt32 temp4 ;
  osg::Int32 temp5 ;
  osg::Int32 result;
  
  SWIG_check_num_args("getScrollableBlockIncrement",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getScrollableBlockIncrement",1,"osg::ComponentPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("getScrollableBlockIncrement",2,"osg::Pnt2f const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("getScrollableBlockIncrement",3,"osg::Pnt2f const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("getScrollableBlockIncrement",4,"osg::UInt32 const &");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("getScrollableBlockIncrement",5,"osg::Int32 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__ComponentPtr,0))){
    SWIG_fail_ptr("ComponentPtr_getScrollableBlockIncrement",1,SWIGTYPE_p_osg__ComponentPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__Pnt2f,0))){
    SWIG_fail_ptr("ComponentPtr_getScrollableBlockIncrement",2,SWIGTYPE_p_osg__Pnt2f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_osg__Pnt2f,0))){
    SWIG_fail_ptr("ComponentPtr_getScrollableBlockIncrement",3,SWIGTYPE_p_osg__Pnt2f);
  }
  
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  temp4=(osg::UInt32)lua_tonumber(L,4); arg4=&temp4;
  temp5=(osg::Int32)lua_tonumber(L,5); arg5=&temp5;
  result = (osg::Int32)(*arg1)->getScrollableBlockIncrement((osg::Pnt2f const &)*arg2,(osg::Pnt2f const &)*arg3,(osg::UInt32 const &)*arg4,(osg::Int32 const &)*arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComponentPtr_getScrollableTracksViewportHeight(lua_State* L) {
  int SWIG_arg = 0;
  osg::ComponentPtr *arg1 = (osg::ComponentPtr *) 0 ;
  bool result;
  
  SWIG_check_num_args("getScrollableTracksViewportHeight",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getScrollableTracksViewportHeight",1,"osg::ComponentPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__ComponentPtr,0))){
    SWIG_fail_ptr("ComponentPtr_getScrollableTracksViewportHeight",1,SWIGTYPE_p_osg__ComponentPtr);
  }
  
  result = (bool)(*arg1)->getScrollableTracksViewportHeight();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComponentPtr_getScrollableTracksViewportWidth(lua_State* L) {
  int SWIG_arg = 0;
  osg::ComponentPtr *arg1 = (osg::ComponentPtr *) 0 ;
  bool result;
  
  SWIG_check_num_args("getScrollableTracksViewportWidth",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getScrollableTracksViewportWidth",1,"osg::ComponentPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__ComponentPtr,0))){
    SWIG_fail_ptr("ComponentPtr_getScrollableTracksViewportWidth",1,SWIGTYPE_p_osg__ComponentPtr);
  }
  
  result = (bool)(*arg1)->getScrollableTracksViewportWidth();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComponentPtr_getScrollableUnitIncrement(lua_State* L) {
  int SWIG_arg = 0;
  osg::ComponentPtr *arg1 = (osg::ComponentPtr *) 0 ;
  osg::Pnt2f *arg2 = 0 ;
  osg::Pnt2f *arg3 = 0 ;
  osg::UInt32 *arg4 = 0 ;
  osg::Int32 *arg5 = 0 ;
  osg::UInt32 temp4 ;
  osg::Int32 temp5 ;
  osg::Int32 result;
  
  SWIG_check_num_args("getScrollableUnitIncrement",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getScrollableUnitIncrement",1,"osg::ComponentPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("getScrollableUnitIncrement",2,"osg::Pnt2f const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("getScrollableUnitIncrement",3,"osg::Pnt2f const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("getScrollableUnitIncrement",4,"osg::UInt32 const &");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("getScrollableUnitIncrement",5,"osg::Int32 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__ComponentPtr,0))){
    SWIG_fail_ptr("ComponentPtr_getScrollableUnitIncrement",1,SWIGTYPE_p_osg__ComponentPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__Pnt2f,0))){
    SWIG_fail_ptr("ComponentPtr_getScrollableUnitIncrement",2,SWIGTYPE_p_osg__Pnt2f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_osg__Pnt2f,0))){
    SWIG_fail_ptr("ComponentPtr_getScrollableUnitIncrement",3,SWIGTYPE_p_osg__Pnt2f);
  }
  
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  temp4=(osg::UInt32)lua_tonumber(L,4); arg4=&temp4;
  temp5=(osg::Int32)lua_tonumber(L,5); arg5=&temp5;
  result = (osg::Int32)(*arg1)->getScrollableUnitIncrement((osg::Pnt2f const &)*arg2,(osg::Pnt2f const &)*arg3,(osg::UInt32 const &)*arg4,(osg::Int32 const &)*arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComponentPtr_scrollToPoint(lua_State* L) {
  int SWIG_arg = 0;
  osg::ComponentPtr *arg1 = (osg::ComponentPtr *) 0 ;
  osg::Pnt2f *arg2 = 0 ;
  
  SWIG_check_num_args("scrollToPoint",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("scrollToPoint",1,"osg::ComponentPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("scrollToPoint",2,"osg::Pnt2f const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__ComponentPtr,0))){
    SWIG_fail_ptr("ComponentPtr_scrollToPoint",1,SWIGTYPE_p_osg__ComponentPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__Pnt2f,0))){
    SWIG_fail_ptr("ComponentPtr_scrollToPoint",2,SWIGTYPE_p_osg__Pnt2f);
  }
  
  (*arg1)->scrollToPoint((osg::Pnt2f const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComponentPtr_getParentToLocal(lua_State* L) {
  int SWIG_arg = 0;
  osg::ComponentPtr *arg1 = (osg::ComponentPtr *) 0 ;
  osg::Pnt2f *arg2 = 0 ;
  osg::Pnt2f result;
  
  SWIG_check_num_args("getParentToLocal",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getParentToLocal",1,"osg::ComponentPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("getParentToLocal",2,"osg::Pnt2f const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__ComponentPtr,0))){
    SWIG_fail_ptr("ComponentPtr_getParentToLocal",1,SWIGTYPE_p_osg__ComponentPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__Pnt2f,0))){
    SWIG_fail_ptr("ComponentPtr_getParentToLocal",2,SWIGTYPE_p_osg__Pnt2f);
  }
  
  result = (*arg1)->getParentToLocal((osg::Pnt2f const &)*arg2);
  {
    osg::Pnt2f * resultptr = new osg::Pnt2f((const osg::Pnt2f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_osg__Pnt2f,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComponentPtr_getLocalToParent(lua_State* L) {
  int SWIG_arg = 0;
  osg::ComponentPtr *arg1 = (osg::ComponentPtr *) 0 ;
  osg::Pnt2f *arg2 = 0 ;
  osg::Pnt2f result;
  
  SWIG_check_num_args("getLocalToParent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getLocalToParent",1,"osg::ComponentPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("getLocalToParent",2,"osg::Pnt2f const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__ComponentPtr,0))){
    SWIG_fail_ptr("ComponentPtr_getLocalToParent",1,SWIGTYPE_p_osg__ComponentPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__Pnt2f,0))){
    SWIG_fail_ptr("ComponentPtr_getLocalToParent",2,SWIGTYPE_p_osg__Pnt2f);
  }
  
  result = (*arg1)->getLocalToParent((osg::Pnt2f const &)*arg2);
  {
    osg::Pnt2f * resultptr = new osg::Pnt2f((const osg::Pnt2f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_osg__Pnt2f,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComponentPtr_addAttachment__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  osg::ComponentPtr *arg1 = (osg::ComponentPtr *) 0 ;
  osg::AttachmentPtr *arg2 = 0 ;
  osg::UInt16 arg3 ;
  
  SWIG_check_num_args("addAttachment",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("addAttachment",1,"osg::ComponentPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("addAttachment",2,"osg::AttachmentPtr const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("addAttachment",3,"osg::UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__ComponentPtr,0))){
    SWIG_fail_ptr("ComponentPtr_addAttachment",1,SWIGTYPE_p_osg__ComponentPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__AttachmentPtr,0))){
    SWIG_fail_ptr("ComponentPtr_addAttachment",2,SWIGTYPE_p_osg__AttachmentPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (osg::UInt16)lua_tonumber(L, 3);
  (*arg1)->addAttachment((osg::AttachmentPtr const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComponentPtr_addAttachment__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  osg::ComponentPtr *arg1 = (osg::ComponentPtr *) 0 ;
  osg::AttachmentPtr *arg2 = 0 ;
  
  SWIG_check_num_args("addAttachment",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("addAttachment",1,"osg::ComponentPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("addAttachment",2,"osg::AttachmentPtr const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__ComponentPtr,0))){
    SWIG_fail_ptr("ComponentPtr_addAttachment",1,SWIGTYPE_p_osg__ComponentPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__AttachmentPtr,0))){
    SWIG_fail_ptr("ComponentPtr_addAttachment",2,SWIGTYPE_p_osg__AttachmentPtr);
  }
  
  (*arg1)->addAttachment((osg::AttachmentPtr const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComponentPtr_addAttachment(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_osg__ComponentPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_osg__AttachmentPtr, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ComponentPtr_addAttachment__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_osg__ComponentPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_osg__AttachmentPtr, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_ComponentPtr_addAttachment__SWIG_0(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'ComponentPtr_addAttachment'\n"
    "  Possible C/C++ prototypes are:\n"
    "    addAttachment(osg::ComponentPtr *,osg::AttachmentPtr const &,osg::UInt16)\n"
    "    addAttachment(osg::ComponentPtr *,osg::AttachmentPtr const &)\n");
  lua_error(L);return 0;
}


static int _wrap_ComponentPtr_subAttachment__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  osg::ComponentPtr *arg1 = (osg::ComponentPtr *) 0 ;
  osg::AttachmentPtr *arg2 = 0 ;
  osg::UInt16 arg3 ;
  
  SWIG_check_num_args("subAttachment",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("subAttachment",1,"osg::ComponentPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("subAttachment",2,"osg::AttachmentPtr const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("subAttachment",3,"osg::UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__ComponentPtr,0))){
    SWIG_fail_ptr("ComponentPtr_subAttachment",1,SWIGTYPE_p_osg__ComponentPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__AttachmentPtr,0))){
    SWIG_fail_ptr("ComponentPtr_subAttachment",2,SWIGTYPE_p_osg__AttachmentPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (osg::UInt16)lua_tonumber(L, 3);
  (*arg1)->subAttachment((osg::AttachmentPtr const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComponentPtr_subAttachment__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  osg::ComponentPtr *arg1 = (osg::ComponentPtr *) 0 ;
  osg::AttachmentPtr *arg2 = 0 ;
  
  SWIG_check_num_args("subAttachment",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("subAttachment",1,"osg::ComponentPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("subAttachment",2,"osg::AttachmentPtr const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__ComponentPtr,0))){
    SWIG_fail_ptr("ComponentPtr_subAttachment",1,SWIGTYPE_p_osg__ComponentPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__AttachmentPtr,0))){
    SWIG_fail_ptr("ComponentPtr_subAttachment",2,SWIGTYPE_p_osg__AttachmentPtr);
  }
  
  (*arg1)->subAttachment((osg::AttachmentPtr const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComponentPtr_subAttachment(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_osg__ComponentPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_osg__AttachmentPtr, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ComponentPtr_subAttachment__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_osg__ComponentPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_osg__AttachmentPtr, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_ComponentPtr_subAttachment__SWIG_0(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'ComponentPtr_subAttachment'\n"
    "  Possible C/C++ prototypes are:\n"
    "    subAttachment(osg::ComponentPtr *,osg::AttachmentPtr const &,osg::UInt16)\n"
    "    subAttachment(osg::ComponentPtr *,osg::AttachmentPtr const &)\n");
  lua_error(L);return 0;
}


static int _wrap_ComponentPtr_findAttachment__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  osg::ComponentPtr *arg1 = (osg::ComponentPtr *) 0 ;
  osg::UInt32 arg2 ;
  osg::UInt16 arg3 ;
  osg::AttachmentPtr result;
  
  SWIG_check_num_args("findAttachment",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("findAttachment",1,"osg::ComponentPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("findAttachment",2,"osg::UInt32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("findAttachment",3,"osg::UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__ComponentPtr,0))){
    SWIG_fail_ptr("ComponentPtr_findAttachment",1,SWIGTYPE_p_osg__ComponentPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (osg::UInt32)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (osg::UInt16)lua_tonumber(L, 3);
  result = (*arg1)->findAttachment(arg2,arg3);
  {
    osg::AttachmentPtr * resultptr = new osg::AttachmentPtr((const osg::AttachmentPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_osg__AttachmentPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComponentPtr_findAttachment__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  osg::ComponentPtr *arg1 = (osg::ComponentPtr *) 0 ;
  osg::UInt32 arg2 ;
  osg::AttachmentPtr result;
  
  SWIG_check_num_args("findAttachment",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("findAttachment",1,"osg::ComponentPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("findAttachment",2,"osg::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__ComponentPtr,0))){
    SWIG_fail_ptr("ComponentPtr_findAttachment",1,SWIGTYPE_p_osg__ComponentPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (osg::UInt32)lua_tonumber(L, 2);
  result = (*arg1)->findAttachment(arg2);
  {
    osg::AttachmentPtr * resultptr = new osg::AttachmentPtr((const osg::AttachmentPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_osg__AttachmentPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComponentPtr_findAttachment__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  osg::ComponentPtr *arg1 = (osg::ComponentPtr *) 0 ;
  osg::FieldContainerType *arg2 = 0 ;
  osg::UInt16 arg3 ;
  osg::AttachmentPtr result;
  
  SWIG_check_num_args("findAttachment",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("findAttachment",1,"osg::ComponentPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("findAttachment",2,"osg::FieldContainerType const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("findAttachment",3,"osg::UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__ComponentPtr,0))){
    SWIG_fail_ptr("ComponentPtr_findAttachment",1,SWIGTYPE_p_osg__ComponentPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__FieldContainerType,0))){
    SWIG_fail_ptr("ComponentPtr_findAttachment",2,SWIGTYPE_p_osg__FieldContainerType);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (osg::UInt16)lua_tonumber(L, 3);
  result = (*arg1)->findAttachment((osg::FieldContainerType const &)*arg2,arg3);
  {
    osg::AttachmentPtr * resultptr = new osg::AttachmentPtr((const osg::AttachmentPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_osg__AttachmentPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComponentPtr_findAttachment__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  osg::ComponentPtr *arg1 = (osg::ComponentPtr *) 0 ;
  osg::FieldContainerType *arg2 = 0 ;
  osg::AttachmentPtr result;
  
  SWIG_check_num_args("findAttachment",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("findAttachment",1,"osg::ComponentPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("findAttachment",2,"osg::FieldContainerType const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__ComponentPtr,0))){
    SWIG_fail_ptr("ComponentPtr_findAttachment",1,SWIGTYPE_p_osg__ComponentPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__FieldContainerType,0))){
    SWIG_fail_ptr("ComponentPtr_findAttachment",2,SWIGTYPE_p_osg__FieldContainerType);
  }
  
  result = (*arg1)->findAttachment((osg::FieldContainerType const &)*arg2);
  {
    osg::AttachmentPtr * resultptr = new osg::AttachmentPtr((const osg::AttachmentPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_osg__AttachmentPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComponentPtr_findAttachment(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_osg__ComponentPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_osg__FieldContainerType, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ComponentPtr_findAttachment__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_osg__ComponentPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_ComponentPtr_findAttachment__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_osg__ComponentPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_osg__FieldContainerType, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_ComponentPtr_findAttachment__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_osg__ComponentPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_ComponentPtr_findAttachment__SWIG_0(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'ComponentPtr_findAttachment'\n"
    "  Possible C/C++ prototypes are:\n"
    "    findAttachment(osg::ComponentPtr *,osg::UInt32,osg::UInt16)\n"
    "    findAttachment(osg::ComponentPtr *,osg::UInt32)\n"
    "    findAttachment(osg::ComponentPtr *,osg::FieldContainerType const &,osg::UInt16)\n"
    "    findAttachment(osg::ComponentPtr *,osg::FieldContainerType const &)\n");
  lua_error(L);return 0;
}


static int _wrap_ComponentPtr_getType(lua_State* L) {
  int SWIG_arg = 0;
  osg::ComponentPtr *arg1 = (osg::ComponentPtr *) 0 ;
  osg::FieldContainerType *result = 0 ;
  
  SWIG_check_num_args("getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getType",1,"osg::ComponentPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__ComponentPtr,0))){
    SWIG_fail_ptr("ComponentPtr_getType",1,SWIGTYPE_p_osg__ComponentPtr);
  }
  
  result = (osg::FieldContainerType *) &(*arg1)->getType();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_osg__FieldContainerType,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComponentPtr_getGroupId(lua_State* L) {
  int SWIG_arg = 0;
  osg::ComponentPtr *arg1 = (osg::ComponentPtr *) 0 ;
  osg::UInt16 result;
  
  SWIG_check_num_args("getGroupId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getGroupId",1,"osg::ComponentPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__ComponentPtr,0))){
    SWIG_fail_ptr("ComponentPtr_getGroupId",1,SWIGTYPE_p_osg__ComponentPtr);
  }
  
  result = (osg::UInt16)(*arg1)->getGroupId();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComponentPtr_getField__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  osg::ComponentPtr *arg1 = (osg::ComponentPtr *) 0 ;
  osg::UInt32 arg2 ;
  osg::Field *result = 0 ;
  
  SWIG_check_num_args("getField",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getField",1,"osg::ComponentPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getField",2,"osg::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__ComponentPtr,0))){
    SWIG_fail_ptr("ComponentPtr_getField",1,SWIGTYPE_p_osg__ComponentPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (osg::UInt32)lua_tonumber(L, 2);
  result = (osg::Field *)(*arg1)->getField(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_osg__Field,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComponentPtr_getField__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  osg::ComponentPtr *arg1 = (osg::ComponentPtr *) 0 ;
  osg::Char8 *arg2 = (osg::Char8 *) 0 ;
  osg::Field *result = 0 ;
  
  SWIG_check_num_args("getField",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getField",1,"osg::ComponentPtr *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("getField",2,"osg::Char8 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__ComponentPtr,0))){
    SWIG_fail_ptr("ComponentPtr_getField",1,SWIGTYPE_p_osg__ComponentPtr);
  }
  
  arg2 = (osg::Char8 *)lua_tostring(L, 2);
  result = (osg::Field *)(*arg1)->getField((osg::Char8 const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_osg__Field,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComponentPtr_getField(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_osg__ComponentPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_ComponentPtr_getField__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_osg__ComponentPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_ComponentPtr_getField__SWIG_1(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'ComponentPtr_getField'\n"
    "  Possible C/C++ prototypes are:\n"
    "    getField(osg::ComponentPtr *,osg::UInt32)\n"
    "    getField(osg::ComponentPtr *,osg::Char8 const *)\n");
  lua_error(L);return 0;
}


static int _wrap_ComponentPtr_shallowCopy(lua_State* L) {
  int SWIG_arg = 0;
  osg::ComponentPtr *arg1 = (osg::ComponentPtr *) 0 ;
  osg::FieldContainerPtr result;
  
  SWIG_check_num_args("shallowCopy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("shallowCopy",1,"osg::ComponentPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__ComponentPtr,0))){
    SWIG_fail_ptr("ComponentPtr_shallowCopy",1,SWIGTYPE_p_osg__ComponentPtr);
  }
  
  result = (*arg1)->shallowCopy();
  {
    osg::FieldContainerPtr * resultptr = new osg::FieldContainerPtr((const osg::FieldContainerPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_osg__FieldContainerPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ComponentPtr(void *obj) {
osg::ComponentPtr *arg1 = (osg::ComponentPtr *) obj;
delete arg1;
}
static swig_lua_method swig_osg_ComponentPtr_methods[] = {
    {"__deref__", _wrap_ComponentPtr___deref__}, 
    {"getBounds", _wrap_ComponentPtr_getBounds}, 
    {"getClipBounds", _wrap_ComponentPtr_getClipBounds}, 
    {"getInsideBorderBounds", _wrap_ComponentPtr_getInsideBorderBounds}, 
    {"getBoundsRenderingSurfaceSpace", _wrap_ComponentPtr_getBoundsRenderingSurfaceSpace}, 
    {"updateContainerLayout", _wrap_ComponentPtr_updateContainerLayout}, 
    {"updateClipBounds", _wrap_ComponentPtr_updateClipBounds}, 
    {"getRequestedSize", _wrap_ComponentPtr_getRequestedSize}, 
    {"getContentRequestedSize", _wrap_ComponentPtr_getContentRequestedSize}, 
    {"getBorderingLength", _wrap_ComponentPtr_getBorderingLength}, 
    {"setMouseContained", _wrap_ComponentPtr_setMouseContained}, 
    {"getMouseContained", _wrap_ComponentPtr_getMouseContained}, 
    {"takeFocus", _wrap_ComponentPtr_takeFocus}, 
    {"isContained", _wrap_ComponentPtr_isContained}, 
    {"getBaseline", _wrap_ComponentPtr_getBaseline}, 
    {"getToolTipLocation", _wrap_ComponentPtr_getToolTipLocation}, 
    {"getPreferredScrollableViewportSize", _wrap_ComponentPtr_getPreferredScrollableViewportSize}, 
    {"getScrollableBlockIncrement", _wrap_ComponentPtr_getScrollableBlockIncrement}, 
    {"getScrollableTracksViewportHeight", _wrap_ComponentPtr_getScrollableTracksViewportHeight}, 
    {"getScrollableTracksViewportWidth", _wrap_ComponentPtr_getScrollableTracksViewportWidth}, 
    {"getScrollableUnitIncrement", _wrap_ComponentPtr_getScrollableUnitIncrement}, 
    {"scrollToPoint", _wrap_ComponentPtr_scrollToPoint}, 
    {"getParentToLocal", _wrap_ComponentPtr_getParentToLocal}, 
    {"getLocalToParent", _wrap_ComponentPtr_getLocalToParent}, 
    {"addAttachment", _wrap_ComponentPtr_addAttachment}, 
    {"subAttachment", _wrap_ComponentPtr_subAttachment}, 
    {"findAttachment", _wrap_ComponentPtr_findAttachment}, 
    {"getType", _wrap_ComponentPtr_getType}, 
    {"getGroupId", _wrap_ComponentPtr_getGroupId}, 
    {"getField", _wrap_ComponentPtr_getField}, 
    {"shallowCopy", _wrap_ComponentPtr_shallowCopy}, 
    {0,0}
};
static swig_lua_attribute swig_osg_ComponentPtr_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_osg_ComponentPtr_bases[] = {0,0};
static const char *swig_osg_ComponentPtr_base_names[] = {"osg::AttachmentContainerPtr *",0};
static swig_lua_class _wrap_class_osg_ComponentPtr = { "ComponentPtr", &SWIGTYPE_p_osg__ComponentPtr,_wrap_new_ComponentPtr, swig_delete_ComponentPtr, swig_osg_ComponentPtr_methods, swig_osg_ComponentPtr_attributes, swig_osg_ComponentPtr_bases, swig_osg_ComponentPtr_base_names };

static int _wrap_Component_getBounds(lua_State* L) {
  int SWIG_arg = 0;
  osg::Component *arg1 = (osg::Component *) 0 ;
  osg::Pnt2f *arg2 = 0 ;
  osg::Pnt2f *arg3 = 0 ;
  
  SWIG_check_num_args("getBounds",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getBounds",1,"osg::Component const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("getBounds",2,"osg::Pnt2f &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("getBounds",3,"osg::Pnt2f &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__Component,0))){
    SWIG_fail_ptr("Component_getBounds",1,SWIGTYPE_p_osg__Component);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__Pnt2f,0))){
    SWIG_fail_ptr("Component_getBounds",2,SWIGTYPE_p_osg__Pnt2f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_osg__Pnt2f,0))){
    SWIG_fail_ptr("Component_getBounds",3,SWIGTYPE_p_osg__Pnt2f);
  }
  
  ((osg::Component const *)arg1)->getBounds(*arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Component_getClipBounds(lua_State* L) {
  int SWIG_arg = 0;
  osg::Component *arg1 = (osg::Component *) 0 ;
  osg::Pnt2f *arg2 = 0 ;
  osg::Pnt2f *arg3 = 0 ;
  
  SWIG_check_num_args("getClipBounds",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getClipBounds",1,"osg::Component const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("getClipBounds",2,"osg::Pnt2f &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("getClipBounds",3,"osg::Pnt2f &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__Component,0))){
    SWIG_fail_ptr("Component_getClipBounds",1,SWIGTYPE_p_osg__Component);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__Pnt2f,0))){
    SWIG_fail_ptr("Component_getClipBounds",2,SWIGTYPE_p_osg__Pnt2f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_osg__Pnt2f,0))){
    SWIG_fail_ptr("Component_getClipBounds",3,SWIGTYPE_p_osg__Pnt2f);
  }
  
  ((osg::Component const *)arg1)->getClipBounds(*arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Component_getInsideBorderBounds(lua_State* L) {
  int SWIG_arg = 0;
  osg::Component *arg1 = (osg::Component *) 0 ;
  osg::Pnt2f *arg2 = 0 ;
  osg::Pnt2f *arg3 = 0 ;
  
  SWIG_check_num_args("getInsideBorderBounds",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getInsideBorderBounds",1,"osg::Component const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("getInsideBorderBounds",2,"osg::Pnt2f &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("getInsideBorderBounds",3,"osg::Pnt2f &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__Component,0))){
    SWIG_fail_ptr("Component_getInsideBorderBounds",1,SWIGTYPE_p_osg__Component);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__Pnt2f,0))){
    SWIG_fail_ptr("Component_getInsideBorderBounds",2,SWIGTYPE_p_osg__Pnt2f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_osg__Pnt2f,0))){
    SWIG_fail_ptr("Component_getInsideBorderBounds",3,SWIGTYPE_p_osg__Pnt2f);
  }
  
  ((osg::Component const *)arg1)->getInsideBorderBounds(*arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Component_getBoundsRenderingSurfaceSpace(lua_State* L) {
  int SWIG_arg = 0;
  osg::Component *arg1 = (osg::Component *) 0 ;
  osg::Pnt2f *arg2 = 0 ;
  osg::Pnt2f *arg3 = 0 ;
  
  SWIG_check_num_args("getBoundsRenderingSurfaceSpace",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getBoundsRenderingSurfaceSpace",1,"osg::Component const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("getBoundsRenderingSurfaceSpace",2,"osg::Pnt2f &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("getBoundsRenderingSurfaceSpace",3,"osg::Pnt2f &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__Component,0))){
    SWIG_fail_ptr("Component_getBoundsRenderingSurfaceSpace",1,SWIGTYPE_p_osg__Component);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__Pnt2f,0))){
    SWIG_fail_ptr("Component_getBoundsRenderingSurfaceSpace",2,SWIGTYPE_p_osg__Pnt2f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_osg__Pnt2f,0))){
    SWIG_fail_ptr("Component_getBoundsRenderingSurfaceSpace",3,SWIGTYPE_p_osg__Pnt2f);
  }
  
  ((osg::Component const *)arg1)->getBoundsRenderingSurfaceSpace(*arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Component_updateContainerLayout(lua_State* L) {
  int SWIG_arg = 0;
  osg::Component *arg1 = (osg::Component *) 0 ;
  
  SWIG_check_num_args("updateContainerLayout",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("updateContainerLayout",1,"osg::Component *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__Component,0))){
    SWIG_fail_ptr("Component_updateContainerLayout",1,SWIGTYPE_p_osg__Component);
  }
  
  (arg1)->updateContainerLayout();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Component_updateClipBounds(lua_State* L) {
  int SWIG_arg = 0;
  osg::Component *arg1 = (osg::Component *) 0 ;
  
  SWIG_check_num_args("updateClipBounds",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("updateClipBounds",1,"osg::Component *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__Component,0))){
    SWIG_fail_ptr("Component_updateClipBounds",1,SWIGTYPE_p_osg__Component);
  }
  
  (arg1)->updateClipBounds();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Component_getRequestedSize(lua_State* L) {
  int SWIG_arg = 0;
  osg::Component *arg1 = (osg::Component *) 0 ;
  osg::Vec2f result;
  
  SWIG_check_num_args("getRequestedSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getRequestedSize",1,"osg::Component const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__Component,0))){
    SWIG_fail_ptr("Component_getRequestedSize",1,SWIGTYPE_p_osg__Component);
  }
  
  result = ((osg::Component const *)arg1)->getRequestedSize();
  {
    osg::Vec2f * resultptr = new osg::Vec2f((const osg::Vec2f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_osg__Vec2f,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Component_getContentRequestedSize(lua_State* L) {
  int SWIG_arg = 0;
  osg::Component *arg1 = (osg::Component *) 0 ;
  osg::Vec2f result;
  
  SWIG_check_num_args("getContentRequestedSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getContentRequestedSize",1,"osg::Component const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__Component,0))){
    SWIG_fail_ptr("Component_getContentRequestedSize",1,SWIGTYPE_p_osg__Component);
  }
  
  result = ((osg::Component const *)arg1)->getContentRequestedSize();
  {
    osg::Vec2f * resultptr = new osg::Vec2f((const osg::Vec2f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_osg__Vec2f,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Component_getBorderingLength(lua_State* L) {
  int SWIG_arg = 0;
  osg::Component *arg1 = (osg::Component *) 0 ;
  osg::Vec2f result;
  
  SWIG_check_num_args("getBorderingLength",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getBorderingLength",1,"osg::Component const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__Component,0))){
    SWIG_fail_ptr("Component_getBorderingLength",1,SWIGTYPE_p_osg__Component);
  }
  
  result = ((osg::Component const *)arg1)->getBorderingLength();
  {
    osg::Vec2f * resultptr = new osg::Vec2f((const osg::Vec2f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_osg__Vec2f,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Component_setMouseContained(lua_State* L) {
  int SWIG_arg = 0;
  osg::Component *arg1 = (osg::Component *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("setMouseContained",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setMouseContained",1,"osg::Component *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("setMouseContained",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__Component,0))){
    SWIG_fail_ptr("Component_setMouseContained",1,SWIGTYPE_p_osg__Component);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setMouseContained(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Component_getMouseContained(lua_State* L) {
  int SWIG_arg = 0;
  osg::Component *arg1 = (osg::Component *) 0 ;
  bool result;
  
  SWIG_check_num_args("getMouseContained",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getMouseContained",1,"osg::Component *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__Component,0))){
    SWIG_fail_ptr("Component_getMouseContained",1,SWIGTYPE_p_osg__Component);
  }
  
  result = (bool)(arg1)->getMouseContained();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Component_takeFocus__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  osg::Component *arg1 = (osg::Component *) 0 ;
  bool arg2 ;
  bool result;
  
  SWIG_check_num_args("takeFocus",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("takeFocus",1,"osg::Component *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("takeFocus",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__Component,0))){
    SWIG_fail_ptr("Component_takeFocus",1,SWIGTYPE_p_osg__Component);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  result = (bool)(arg1)->takeFocus(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Component_takeFocus__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  osg::Component *arg1 = (osg::Component *) 0 ;
  bool result;
  
  SWIG_check_num_args("takeFocus",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("takeFocus",1,"osg::Component *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__Component,0))){
    SWIG_fail_ptr("Component_takeFocus",1,SWIGTYPE_p_osg__Component);
  }
  
  result = (bool)(arg1)->takeFocus();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Component_takeFocus(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_osg__Component, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Component_takeFocus__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_osg__Component, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_Component_takeFocus__SWIG_0(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'Component_takeFocus'\n"
    "  Possible C/C++ prototypes are:\n"
    "    takeFocus(osg::Component *,bool)\n"
    "    takeFocus(osg::Component *)\n");
  lua_error(L);return 0;
}


static int _wrap_Component_isContained__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  osg::Component *arg1 = (osg::Component *) 0 ;
  osg::Pnt2f *arg2 = 0 ;
  bool arg3 ;
  bool result;
  
  SWIG_check_num_args("isContained",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isContained",1,"osg::Component const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("isContained",2,"osg::Pnt2f const &");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("isContained",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__Component,0))){
    SWIG_fail_ptr("Component_isContained",1,SWIGTYPE_p_osg__Component);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__Pnt2f,0))){
    SWIG_fail_ptr("Component_isContained",2,SWIGTYPE_p_osg__Pnt2f);
  }
  
  arg3 = (lua_toboolean(L, 3)!=0);
  result = (bool)((osg::Component const *)arg1)->isContained((osg::Pnt2f const &)*arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Component_isContained__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  osg::Component *arg1 = (osg::Component *) 0 ;
  osg::Pnt2f *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("isContained",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isContained",1,"osg::Component const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("isContained",2,"osg::Pnt2f const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__Component,0))){
    SWIG_fail_ptr("Component_isContained",1,SWIGTYPE_p_osg__Component);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__Pnt2f,0))){
    SWIG_fail_ptr("Component_isContained",2,SWIGTYPE_p_osg__Pnt2f);
  }
  
  result = (bool)((osg::Component const *)arg1)->isContained((osg::Pnt2f const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Component_isContained(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_osg__Component, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_osg__Pnt2f, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Component_isContained__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_osg__Component, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_osg__Pnt2f, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_Component_isContained__SWIG_0(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'Component_isContained'\n"
    "  Possible C/C++ prototypes are:\n"
    "    isContained(osg::Component const *,osg::Pnt2f const &,bool)\n"
    "    isContained(osg::Component const *,osg::Pnt2f const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Component_getBaseline(lua_State* L) {
  int SWIG_arg = 0;
  osg::Component *arg1 = (osg::Component *) 0 ;
  osg::Real32 *arg2 = 0 ;
  osg::Real32 *arg3 = 0 ;
  osg::Real32 temp2 ;
  osg::Real32 temp3 ;
  osg::Real32 result;
  
  SWIG_check_num_args("getBaseline",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getBaseline",1,"osg::Component const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getBaseline",2,"osg::Real32 const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("getBaseline",3,"osg::Real32 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__Component,0))){
    SWIG_fail_ptr("Component_getBaseline",1,SWIGTYPE_p_osg__Component);
  }
  
  temp2=(osg::Real32)lua_tonumber(L,2); arg2=&temp2;
  temp3=(osg::Real32)lua_tonumber(L,3); arg3=&temp3;
  result = (osg::Real32)((osg::Component const *)arg1)->getBaseline((osg::Real32 const &)*arg2,(osg::Real32 const &)*arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Component_getToolTipLocation(lua_State* L) {
  int SWIG_arg = 0;
  osg::Component *arg1 = (osg::Component *) 0 ;
  osg::Pnt2f arg2 ;
  osg::Pnt2f *argp2 ;
  osg::Pnt2f result;
  
  SWIG_check_num_args("getToolTipLocation",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getToolTipLocation",1,"osg::Component *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("getToolTipLocation",2,"osg::Pnt2f");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__Component,0))){
    SWIG_fail_ptr("Component_getToolTipLocation",1,SWIGTYPE_p_osg__Component);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_osg__Pnt2f,0))){
    SWIG_fail_ptr("Component_getToolTipLocation",2,SWIGTYPE_p_osg__Pnt2f);
  }
  arg2 = *argp2;
  
  result = (arg1)->getToolTipLocation(arg2);
  {
    osg::Pnt2f * resultptr = new osg::Pnt2f((const osg::Pnt2f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_osg__Pnt2f,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Component_getPreferredScrollableViewportSize(lua_State* L) {
  int SWIG_arg = 0;
  osg::Component *arg1 = (osg::Component *) 0 ;
  osg::Vec2f result;
  
  SWIG_check_num_args("getPreferredScrollableViewportSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getPreferredScrollableViewportSize",1,"osg::Component *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__Component,0))){
    SWIG_fail_ptr("Component_getPreferredScrollableViewportSize",1,SWIGTYPE_p_osg__Component);
  }
  
  result = (arg1)->getPreferredScrollableViewportSize();
  {
    osg::Vec2f * resultptr = new osg::Vec2f((const osg::Vec2f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_osg__Vec2f,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Component_getScrollableBlockIncrement(lua_State* L) {
  int SWIG_arg = 0;
  osg::Component *arg1 = (osg::Component *) 0 ;
  osg::Pnt2f *arg2 = 0 ;
  osg::Pnt2f *arg3 = 0 ;
  osg::UInt32 *arg4 = 0 ;
  osg::Int32 *arg5 = 0 ;
  osg::UInt32 temp4 ;
  osg::Int32 temp5 ;
  osg::Int32 result;
  
  SWIG_check_num_args("getScrollableBlockIncrement",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getScrollableBlockIncrement",1,"osg::Component *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("getScrollableBlockIncrement",2,"osg::Pnt2f const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("getScrollableBlockIncrement",3,"osg::Pnt2f const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("getScrollableBlockIncrement",4,"osg::UInt32 const &");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("getScrollableBlockIncrement",5,"osg::Int32 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__Component,0))){
    SWIG_fail_ptr("Component_getScrollableBlockIncrement",1,SWIGTYPE_p_osg__Component);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__Pnt2f,0))){
    SWIG_fail_ptr("Component_getScrollableBlockIncrement",2,SWIGTYPE_p_osg__Pnt2f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_osg__Pnt2f,0))){
    SWIG_fail_ptr("Component_getScrollableBlockIncrement",3,SWIGTYPE_p_osg__Pnt2f);
  }
  
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  temp4=(osg::UInt32)lua_tonumber(L,4); arg4=&temp4;
  temp5=(osg::Int32)lua_tonumber(L,5); arg5=&temp5;
  result = (osg::Int32)(arg1)->getScrollableBlockIncrement((osg::Pnt2f const &)*arg2,(osg::Pnt2f const &)*arg3,(osg::UInt32 const &)*arg4,(osg::Int32 const &)*arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Component_getScrollableTracksViewportHeight(lua_State* L) {
  int SWIG_arg = 0;
  osg::Component *arg1 = (osg::Component *) 0 ;
  bool result;
  
  SWIG_check_num_args("getScrollableTracksViewportHeight",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getScrollableTracksViewportHeight",1,"osg::Component *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__Component,0))){
    SWIG_fail_ptr("Component_getScrollableTracksViewportHeight",1,SWIGTYPE_p_osg__Component);
  }
  
  result = (bool)(arg1)->getScrollableTracksViewportHeight();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Component_getScrollableTracksViewportWidth(lua_State* L) {
  int SWIG_arg = 0;
  osg::Component *arg1 = (osg::Component *) 0 ;
  bool result;
  
  SWIG_check_num_args("getScrollableTracksViewportWidth",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getScrollableTracksViewportWidth",1,"osg::Component *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__Component,0))){
    SWIG_fail_ptr("Component_getScrollableTracksViewportWidth",1,SWIGTYPE_p_osg__Component);
  }
  
  result = (bool)(arg1)->getScrollableTracksViewportWidth();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Component_getScrollableUnitIncrement(lua_State* L) {
  int SWIG_arg = 0;
  osg::Component *arg1 = (osg::Component *) 0 ;
  osg::Pnt2f *arg2 = 0 ;
  osg::Pnt2f *arg3 = 0 ;
  osg::UInt32 *arg4 = 0 ;
  osg::Int32 *arg5 = 0 ;
  osg::UInt32 temp4 ;
  osg::Int32 temp5 ;
  osg::Int32 result;
  
  SWIG_check_num_args("getScrollableUnitIncrement",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getScrollableUnitIncrement",1,"osg::Component *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("getScrollableUnitIncrement",2,"osg::Pnt2f const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("getScrollableUnitIncrement",3,"osg::Pnt2f const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("getScrollableUnitIncrement",4,"osg::UInt32 const &");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("getScrollableUnitIncrement",5,"osg::Int32 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__Component,0))){
    SWIG_fail_ptr("Component_getScrollableUnitIncrement",1,SWIGTYPE_p_osg__Component);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__Pnt2f,0))){
    SWIG_fail_ptr("Component_getScrollableUnitIncrement",2,SWIGTYPE_p_osg__Pnt2f);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_osg__Pnt2f,0))){
    SWIG_fail_ptr("Component_getScrollableUnitIncrement",3,SWIGTYPE_p_osg__Pnt2f);
  }
  
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  temp4=(osg::UInt32)lua_tonumber(L,4); arg4=&temp4;
  temp5=(osg::Int32)lua_tonumber(L,5); arg5=&temp5;
  result = (osg::Int32)(arg1)->getScrollableUnitIncrement((osg::Pnt2f const &)*arg2,(osg::Pnt2f const &)*arg3,(osg::UInt32 const &)*arg4,(osg::Int32 const &)*arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Component_scrollToPoint(lua_State* L) {
  int SWIG_arg = 0;
  osg::Component *arg1 = (osg::Component *) 0 ;
  osg::Pnt2f *arg2 = 0 ;
  
  SWIG_check_num_args("scrollToPoint",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("scrollToPoint",1,"osg::Component *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("scrollToPoint",2,"osg::Pnt2f const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__Component,0))){
    SWIG_fail_ptr("Component_scrollToPoint",1,SWIGTYPE_p_osg__Component);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__Pnt2f,0))){
    SWIG_fail_ptr("Component_scrollToPoint",2,SWIGTYPE_p_osg__Pnt2f);
  }
  
  (arg1)->scrollToPoint((osg::Pnt2f const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Component_getParentToLocal(lua_State* L) {
  int SWIG_arg = 0;
  osg::Component *arg1 = (osg::Component *) 0 ;
  osg::Pnt2f *arg2 = 0 ;
  osg::Pnt2f result;
  
  SWIG_check_num_args("getParentToLocal",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getParentToLocal",1,"osg::Component *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("getParentToLocal",2,"osg::Pnt2f const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__Component,0))){
    SWIG_fail_ptr("Component_getParentToLocal",1,SWIGTYPE_p_osg__Component);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__Pnt2f,0))){
    SWIG_fail_ptr("Component_getParentToLocal",2,SWIGTYPE_p_osg__Pnt2f);
  }
  
  result = (arg1)->getParentToLocal((osg::Pnt2f const &)*arg2);
  {
    osg::Pnt2f * resultptr = new osg::Pnt2f((const osg::Pnt2f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_osg__Pnt2f,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Component_getLocalToParent(lua_State* L) {
  int SWIG_arg = 0;
  osg::Component *arg1 = (osg::Component *) 0 ;
  osg::Pnt2f *arg2 = 0 ;
  osg::Pnt2f result;
  
  SWIG_check_num_args("getLocalToParent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getLocalToParent",1,"osg::Component *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("getLocalToParent",2,"osg::Pnt2f const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__Component,0))){
    SWIG_fail_ptr("Component_getLocalToParent",1,SWIGTYPE_p_osg__Component);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__Pnt2f,0))){
    SWIG_fail_ptr("Component_getLocalToParent",2,SWIGTYPE_p_osg__Pnt2f);
  }
  
  result = (arg1)->getLocalToParent((osg::Pnt2f const &)*arg2);
  {
    osg::Pnt2f * resultptr = new osg::Pnt2f((const osg::Pnt2f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_osg__Pnt2f,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static swig_lua_method swig_osg_Component_methods[] = {
    {"getBounds", _wrap_Component_getBounds}, 
    {"getClipBounds", _wrap_Component_getClipBounds}, 
    {"getInsideBorderBounds", _wrap_Component_getInsideBorderBounds}, 
    {"getBoundsRenderingSurfaceSpace", _wrap_Component_getBoundsRenderingSurfaceSpace}, 
    {"updateContainerLayout", _wrap_Component_updateContainerLayout}, 
    {"updateClipBounds", _wrap_Component_updateClipBounds}, 
    {"getRequestedSize", _wrap_Component_getRequestedSize}, 
    {"getContentRequestedSize", _wrap_Component_getContentRequestedSize}, 
    {"getBorderingLength", _wrap_Component_getBorderingLength}, 
    {"setMouseContained", _wrap_Component_setMouseContained}, 
    {"getMouseContained", _wrap_Component_getMouseContained}, 
    {"takeFocus", _wrap_Component_takeFocus}, 
    {"isContained", _wrap_Component_isContained}, 
    {"getBaseline", _wrap_Component_getBaseline}, 
    {"getToolTipLocation", _wrap_Component_getToolTipLocation}, 
    {"getPreferredScrollableViewportSize", _wrap_Component_getPreferredScrollableViewportSize}, 
    {"getScrollableBlockIncrement", _wrap_Component_getScrollableBlockIncrement}, 
    {"getScrollableTracksViewportHeight", _wrap_Component_getScrollableTracksViewportHeight}, 
    {"getScrollableTracksViewportWidth", _wrap_Component_getScrollableTracksViewportWidth}, 
    {"getScrollableUnitIncrement", _wrap_Component_getScrollableUnitIncrement}, 
    {"scrollToPoint", _wrap_Component_scrollToPoint}, 
    {"getParentToLocal", _wrap_Component_getParentToLocal}, 
    {"getLocalToParent", _wrap_Component_getLocalToParent}, 
    {0,0}
};
static swig_lua_attribute swig_osg_Component_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_osg_Component_bases[] = {0,0};
static const char *swig_osg_Component_base_names[] = {"osg::AttachmentContainer *",0};
static swig_lua_class _wrap_class_osg_Component = { "Component", &SWIGTYPE_p_osg__Component,0,0, swig_osg_Component_methods, swig_osg_Component_attributes, swig_osg_Component_bases, swig_osg_Component_base_names };

static int _wrap_new_SoundPtr__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  osg::SoundPtr *result = 0 ;
  
  SWIG_check_num_args("osg::SoundPtr",0,0)
  result = (osg::SoundPtr *)new osg::SoundPtr();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_osg__SoundPtr,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SoundPtr__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  osg::SoundPtr *arg1 = 0 ;
  osg::SoundPtr *result = 0 ;
  
  SWIG_check_num_args("osg::SoundPtr",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("osg::SoundPtr",1,"osg::SoundPtr const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__SoundPtr,0))){
    SWIG_fail_ptr("new_SoundPtr",1,SWIGTYPE_p_osg__SoundPtr);
  }
  
  result = (osg::SoundPtr *)new osg::SoundPtr((osg::SoundPtr const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_osg__SoundPtr,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SoundPtr(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_SoundPtr__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_osg__SoundPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_SoundPtr__SWIG_1(L);
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_SoundPtr'\n"
    "  Possible C/C++ prototypes are:\n"
    "    osg::SoundPtr()\n"
    "    osg::SoundPtr(osg::SoundPtr const &)\n");
  lua_error(L);return 0;
}


static int _wrap_SoundPtr___deref__(lua_State* L) {
  int SWIG_arg = 0;
  osg::SoundPtr *arg1 = (osg::SoundPtr *) 0 ;
  osg::Sound *result = 0 ;
  
  SWIG_check_num_args("operator ->",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("operator ->",1,"osg::SoundPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__SoundPtr,0))){
    SWIG_fail_ptr("SoundPtr___deref__",1,SWIGTYPE_p_osg__SoundPtr);
  }
  
  result = (osg::Sound *)(arg1)->operator ->();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_osg__Sound,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundPtr_dcast(lua_State* L) {
  int SWIG_arg = 0;
  osg::FieldContainerPtr arg1 ;
  osg::FieldContainerPtr *argp1 ;
  osg::SoundPtr result;
  
  SWIG_check_num_args("osg::SoundPtr::dcast",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("osg::SoundPtr::dcast",1,"osg::FieldContainerPtr const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_osg__FieldContainerPtr,0))){
    SWIG_fail_ptr("SoundPtr_dcast",1,SWIGTYPE_p_osg__FieldContainerPtr);
  }
  arg1 = *argp1;
  
  result = osg::SoundPtr::dcast(arg1);
  {
    osg::SoundPtr * resultptr = new osg::SoundPtr((const osg::SoundPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_osg__SoundPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundPtr_play(lua_State* L) {
  int SWIG_arg = 0;
  osg::SoundPtr *arg1 = (osg::SoundPtr *) 0 ;
  osg::UInt32 result;
  
  SWIG_check_num_args("play",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("play",1,"osg::SoundPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__SoundPtr,0))){
    SWIG_fail_ptr("SoundPtr_play",1,SWIGTYPE_p_osg__SoundPtr);
  }
  
  result = (osg::UInt32)(*arg1)->play();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundPtr_getLength(lua_State* L) {
  int SWIG_arg = 0;
  osg::SoundPtr *arg1 = (osg::SoundPtr *) 0 ;
  osg::Real32 result;
  
  SWIG_check_num_args("getLength",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getLength",1,"osg::SoundPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__SoundPtr,0))){
    SWIG_fail_ptr("SoundPtr_getLength",1,SWIGTYPE_p_osg__SoundPtr);
  }
  
  result = (osg::Real32)(*arg1)->getLength();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundPtr_getNumChannels(lua_State* L) {
  int SWIG_arg = 0;
  osg::SoundPtr *arg1 = (osg::SoundPtr *) 0 ;
  osg::UInt32 result;
  
  SWIG_check_num_args("getNumChannels",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getNumChannels",1,"osg::SoundPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__SoundPtr,0))){
    SWIG_fail_ptr("SoundPtr_getNumChannels",1,SWIGTYPE_p_osg__SoundPtr);
  }
  
  result = (osg::UInt32)(*arg1)->getNumChannels();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundPtr_getNumPlayingChannels(lua_State* L) {
  int SWIG_arg = 0;
  osg::SoundPtr *arg1 = (osg::SoundPtr *) 0 ;
  osg::UInt32 result;
  
  SWIG_check_num_args("getNumPlayingChannels",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getNumPlayingChannels",1,"osg::SoundPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__SoundPtr,0))){
    SWIG_fail_ptr("SoundPtr_getNumPlayingChannels",1,SWIGTYPE_p_osg__SoundPtr);
  }
  
  result = (osg::UInt32)(*arg1)->getNumPlayingChannels();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundPtr_isPlaying(lua_State* L) {
  int SWIG_arg = 0;
  osg::SoundPtr *arg1 = (osg::SoundPtr *) 0 ;
  osg::UInt32 arg2 ;
  bool result;
  
  SWIG_check_num_args("isPlaying",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isPlaying",1,"osg::SoundPtr const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("isPlaying",2,"osg::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__SoundPtr,0))){
    SWIG_fail_ptr("SoundPtr_isPlaying",1,SWIGTYPE_p_osg__SoundPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (osg::UInt32)lua_tonumber(L, 2);
  result = (bool)(*arg1)->isPlaying(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundPtr_isValid(lua_State* L) {
  int SWIG_arg = 0;
  osg::SoundPtr *arg1 = (osg::SoundPtr *) 0 ;
  osg::UInt32 arg2 ;
  bool result;
  
  SWIG_check_num_args("isValid",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isValid",1,"osg::SoundPtr const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("isValid",2,"osg::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__SoundPtr,0))){
    SWIG_fail_ptr("SoundPtr_isValid",1,SWIGTYPE_p_osg__SoundPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (osg::UInt32)lua_tonumber(L, 2);
  result = (bool)(*arg1)->isValid(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundPtr_stop(lua_State* L) {
  int SWIG_arg = 0;
  osg::SoundPtr *arg1 = (osg::SoundPtr *) 0 ;
  osg::UInt32 arg2 ;
  
  SWIG_check_num_args("stop",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stop",1,"osg::SoundPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stop",2,"osg::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__SoundPtr,0))){
    SWIG_fail_ptr("SoundPtr_stop",1,SWIGTYPE_p_osg__SoundPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (osg::UInt32)lua_tonumber(L, 2);
  (*arg1)->stop(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundPtr_pause(lua_State* L) {
  int SWIG_arg = 0;
  osg::SoundPtr *arg1 = (osg::SoundPtr *) 0 ;
  osg::UInt32 arg2 ;
  
  SWIG_check_num_args("pause",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pause",1,"osg::SoundPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pause",2,"osg::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__SoundPtr,0))){
    SWIG_fail_ptr("SoundPtr_pause",1,SWIGTYPE_p_osg__SoundPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (osg::UInt32)lua_tonumber(L, 2);
  (*arg1)->pause(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundPtr_unpause(lua_State* L) {
  int SWIG_arg = 0;
  osg::SoundPtr *arg1 = (osg::SoundPtr *) 0 ;
  osg::UInt32 arg2 ;
  
  SWIG_check_num_args("unpause",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("unpause",1,"osg::SoundPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("unpause",2,"osg::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__SoundPtr,0))){
    SWIG_fail_ptr("SoundPtr_unpause",1,SWIGTYPE_p_osg__SoundPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (osg::UInt32)lua_tonumber(L, 2);
  (*arg1)->unpause(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundPtr_pauseToggle(lua_State* L) {
  int SWIG_arg = 0;
  osg::SoundPtr *arg1 = (osg::SoundPtr *) 0 ;
  osg::UInt32 arg2 ;
  
  SWIG_check_num_args("pauseToggle",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pauseToggle",1,"osg::SoundPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pauseToggle",2,"osg::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__SoundPtr,0))){
    SWIG_fail_ptr("SoundPtr_pauseToggle",1,SWIGTYPE_p_osg__SoundPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (osg::UInt32)lua_tonumber(L, 2);
  (*arg1)->pauseToggle(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundPtr_isPaused(lua_State* L) {
  int SWIG_arg = 0;
  osg::SoundPtr *arg1 = (osg::SoundPtr *) 0 ;
  osg::UInt32 arg2 ;
  bool result;
  
  SWIG_check_num_args("isPaused",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isPaused",1,"osg::SoundPtr const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("isPaused",2,"osg::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__SoundPtr,0))){
    SWIG_fail_ptr("SoundPtr_isPaused",1,SWIGTYPE_p_osg__SoundPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (osg::UInt32)lua_tonumber(L, 2);
  result = (bool)(*arg1)->isPaused(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundPtr_seek(lua_State* L) {
  int SWIG_arg = 0;
  osg::SoundPtr *arg1 = (osg::SoundPtr *) 0 ;
  osg::Real32 arg2 ;
  osg::UInt32 arg3 ;
  
  SWIG_check_num_args("seek",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("seek",1,"osg::SoundPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("seek",2,"osg::Real32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("seek",3,"osg::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__SoundPtr,0))){
    SWIG_fail_ptr("SoundPtr_seek",1,SWIGTYPE_p_osg__SoundPtr);
  }
  
  arg2 = (osg::Real32)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (osg::UInt32)lua_tonumber(L, 3);
  (*arg1)->seek(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundPtr_getTime(lua_State* L) {
  int SWIG_arg = 0;
  osg::SoundPtr *arg1 = (osg::SoundPtr *) 0 ;
  osg::UInt32 arg2 ;
  osg::Real32 result;
  
  SWIG_check_num_args("getTime",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getTime",1,"osg::SoundPtr const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getTime",2,"osg::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__SoundPtr,0))){
    SWIG_fail_ptr("SoundPtr_getTime",1,SWIGTYPE_p_osg__SoundPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (osg::UInt32)lua_tonumber(L, 2);
  result = (osg::Real32)(*arg1)->getTime(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundPtr_setChannelPosition(lua_State* L) {
  int SWIG_arg = 0;
  osg::SoundPtr *arg1 = (osg::SoundPtr *) 0 ;
  osg::Pnt3f *arg2 = 0 ;
  osg::UInt32 arg3 ;
  
  SWIG_check_num_args("setChannelPosition",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setChannelPosition",1,"osg::SoundPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setChannelPosition",2,"osg::Pnt3f const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("setChannelPosition",3,"osg::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__SoundPtr,0))){
    SWIG_fail_ptr("SoundPtr_setChannelPosition",1,SWIGTYPE_p_osg__SoundPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__Pnt3f,0))){
    SWIG_fail_ptr("SoundPtr_setChannelPosition",2,SWIGTYPE_p_osg__Pnt3f);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (osg::UInt32)lua_tonumber(L, 3);
  (*arg1)->setChannelPosition((osg::Pnt3f const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundPtr_getChannelPosition(lua_State* L) {
  int SWIG_arg = 0;
  osg::SoundPtr *arg1 = (osg::SoundPtr *) 0 ;
  osg::UInt32 arg2 ;
  osg::Pnt3f result;
  
  SWIG_check_num_args("getChannelPosition",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getChannelPosition",1,"osg::SoundPtr const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getChannelPosition",2,"osg::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__SoundPtr,0))){
    SWIG_fail_ptr("SoundPtr_getChannelPosition",1,SWIGTYPE_p_osg__SoundPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (osg::UInt32)lua_tonumber(L, 2);
  result = (*arg1)->getChannelPosition(arg2);
  {
    osg::Pnt3f * resultptr = new osg::Pnt3f((const osg::Pnt3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_osg__Pnt3f,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundPtr_setChannelVelocity(lua_State* L) {
  int SWIG_arg = 0;
  osg::SoundPtr *arg1 = (osg::SoundPtr *) 0 ;
  osg::Vec3f *arg2 = 0 ;
  osg::UInt32 arg3 ;
  
  SWIG_check_num_args("setChannelVelocity",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setChannelVelocity",1,"osg::SoundPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setChannelVelocity",2,"osg::Vec3f const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("setChannelVelocity",3,"osg::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__SoundPtr,0))){
    SWIG_fail_ptr("SoundPtr_setChannelVelocity",1,SWIGTYPE_p_osg__SoundPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__Vec3f,0))){
    SWIG_fail_ptr("SoundPtr_setChannelVelocity",2,SWIGTYPE_p_osg__Vec3f);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (osg::UInt32)lua_tonumber(L, 3);
  (*arg1)->setChannelVelocity((osg::Vec3f const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundPtr_getChannelVelocity(lua_State* L) {
  int SWIG_arg = 0;
  osg::SoundPtr *arg1 = (osg::SoundPtr *) 0 ;
  osg::UInt32 arg2 ;
  osg::Vec3f result;
  
  SWIG_check_num_args("getChannelVelocity",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getChannelVelocity",1,"osg::SoundPtr const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getChannelVelocity",2,"osg::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__SoundPtr,0))){
    SWIG_fail_ptr("SoundPtr_getChannelVelocity",1,SWIGTYPE_p_osg__SoundPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (osg::UInt32)lua_tonumber(L, 2);
  result = (*arg1)->getChannelVelocity(arg2);
  {
    osg::Vec3f * resultptr = new osg::Vec3f((const osg::Vec3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_osg__Vec3f,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundPtr_setChannelVolume(lua_State* L) {
  int SWIG_arg = 0;
  osg::SoundPtr *arg1 = (osg::SoundPtr *) 0 ;
  osg::Real32 arg2 ;
  osg::UInt32 arg3 ;
  
  SWIG_check_num_args("setChannelVolume",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setChannelVolume",1,"osg::SoundPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("setChannelVolume",2,"osg::Real32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("setChannelVolume",3,"osg::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__SoundPtr,0))){
    SWIG_fail_ptr("SoundPtr_setChannelVolume",1,SWIGTYPE_p_osg__SoundPtr);
  }
  
  arg2 = (osg::Real32)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (osg::UInt32)lua_tonumber(L, 3);
  (*arg1)->setChannelVolume(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundPtr_getChannelVolume(lua_State* L) {
  int SWIG_arg = 0;
  osg::SoundPtr *arg1 = (osg::SoundPtr *) 0 ;
  osg::UInt32 arg2 ;
  osg::Real32 result;
  
  SWIG_check_num_args("getChannelVolume",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getChannelVolume",1,"osg::SoundPtr const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getChannelVolume",2,"osg::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__SoundPtr,0))){
    SWIG_fail_ptr("SoundPtr_getChannelVolume",1,SWIGTYPE_p_osg__SoundPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (osg::UInt32)lua_tonumber(L, 2);
  result = (osg::Real32)(*arg1)->getChannelVolume(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundPtr_getMute(lua_State* L) {
  int SWIG_arg = 0;
  osg::SoundPtr *arg1 = (osg::SoundPtr *) 0 ;
  osg::UInt32 arg2 ;
  bool result;
  
  SWIG_check_num_args("getMute",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getMute",1,"osg::SoundPtr const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getMute",2,"osg::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__SoundPtr,0))){
    SWIG_fail_ptr("SoundPtr_getMute",1,SWIGTYPE_p_osg__SoundPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (osg::UInt32)lua_tonumber(L, 2);
  result = (bool)(*arg1)->getMute(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundPtr_mute(lua_State* L) {
  int SWIG_arg = 0;
  osg::SoundPtr *arg1 = (osg::SoundPtr *) 0 ;
  bool arg2 ;
  osg::UInt32 arg3 ;
  
  SWIG_check_num_args("mute",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mute",1,"osg::SoundPtr *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("mute",2,"bool");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("mute",3,"osg::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__SoundPtr,0))){
    SWIG_fail_ptr("SoundPtr_mute",1,SWIGTYPE_p_osg__SoundPtr);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (osg::UInt32)lua_tonumber(L, 3);
  (*arg1)->mute(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundPtr_setAllChannelsVolume(lua_State* L) {
  int SWIG_arg = 0;
  osg::SoundPtr *arg1 = (osg::SoundPtr *) 0 ;
  osg::Real32 arg2 ;
  
  SWIG_check_num_args("setAllChannelsVolume",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setAllChannelsVolume",1,"osg::SoundPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("setAllChannelsVolume",2,"osg::Real32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__SoundPtr,0))){
    SWIG_fail_ptr("SoundPtr_setAllChannelsVolume",1,SWIGTYPE_p_osg__SoundPtr);
  }
  
  arg2 = (osg::Real32)lua_tonumber(L, 2);
  (*arg1)->setAllChannelsVolume(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundPtr_stopAllChannels(lua_State* L) {
  int SWIG_arg = 0;
  osg::SoundPtr *arg1 = (osg::SoundPtr *) 0 ;
  
  SWIG_check_num_args("stopAllChannels",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stopAllChannels",1,"osg::SoundPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__SoundPtr,0))){
    SWIG_fail_ptr("SoundPtr_stopAllChannels",1,SWIGTYPE_p_osg__SoundPtr);
  }
  
  (*arg1)->stopAllChannels();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundPtr_setAllChannelPaused(lua_State* L) {
  int SWIG_arg = 0;
  osg::SoundPtr *arg1 = (osg::SoundPtr *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("setAllChannelPaused",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setAllChannelPaused",1,"osg::SoundPtr *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("setAllChannelPaused",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__SoundPtr,0))){
    SWIG_fail_ptr("SoundPtr_setAllChannelPaused",1,SWIGTYPE_p_osg__SoundPtr);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (*arg1)->setAllChannelPaused(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundPtr_setAllChannelMute(lua_State* L) {
  int SWIG_arg = 0;
  osg::SoundPtr *arg1 = (osg::SoundPtr *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("setAllChannelMute",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setAllChannelMute",1,"osg::SoundPtr *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("setAllChannelMute",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__SoundPtr,0))){
    SWIG_fail_ptr("SoundPtr_setAllChannelMute",1,SWIGTYPE_p_osg__SoundPtr);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (*arg1)->setAllChannelMute(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundPtr_create(lua_State* L) {
  int SWIG_arg = 0;
  osg::SoundPtr *arg1 = (osg::SoundPtr *) 0 ;
  osg::SoundPtr result;
  
  SWIG_check_num_args("create",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("create",1,"osg::SoundPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__SoundPtr,0))){
    SWIG_fail_ptr("SoundPtr_create",1,SWIGTYPE_p_osg__SoundPtr);
  }
  
  result = (*arg1)->create();
  {
    osg::SoundPtr * resultptr = new osg::SoundPtr((const osg::SoundPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_osg__SoundPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundPtr_addAttachment__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  osg::SoundPtr *arg1 = (osg::SoundPtr *) 0 ;
  osg::AttachmentPtr *arg2 = 0 ;
  osg::UInt16 arg3 ;
  
  SWIG_check_num_args("addAttachment",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("addAttachment",1,"osg::SoundPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("addAttachment",2,"osg::AttachmentPtr const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("addAttachment",3,"osg::UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__SoundPtr,0))){
    SWIG_fail_ptr("SoundPtr_addAttachment",1,SWIGTYPE_p_osg__SoundPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__AttachmentPtr,0))){
    SWIG_fail_ptr("SoundPtr_addAttachment",2,SWIGTYPE_p_osg__AttachmentPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (osg::UInt16)lua_tonumber(L, 3);
  (*arg1)->addAttachment((osg::AttachmentPtr const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundPtr_addAttachment__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  osg::SoundPtr *arg1 = (osg::SoundPtr *) 0 ;
  osg::AttachmentPtr *arg2 = 0 ;
  
  SWIG_check_num_args("addAttachment",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("addAttachment",1,"osg::SoundPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("addAttachment",2,"osg::AttachmentPtr const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__SoundPtr,0))){
    SWIG_fail_ptr("SoundPtr_addAttachment",1,SWIGTYPE_p_osg__SoundPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__AttachmentPtr,0))){
    SWIG_fail_ptr("SoundPtr_addAttachment",2,SWIGTYPE_p_osg__AttachmentPtr);
  }
  
  (*arg1)->addAttachment((osg::AttachmentPtr const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundPtr_addAttachment(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_osg__SoundPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_osg__AttachmentPtr, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_SoundPtr_addAttachment__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_osg__SoundPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_osg__AttachmentPtr, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_SoundPtr_addAttachment__SWIG_0(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'SoundPtr_addAttachment'\n"
    "  Possible C/C++ prototypes are:\n"
    "    addAttachment(osg::SoundPtr *,osg::AttachmentPtr const &,osg::UInt16)\n"
    "    addAttachment(osg::SoundPtr *,osg::AttachmentPtr const &)\n");
  lua_error(L);return 0;
}


static int _wrap_SoundPtr_subAttachment__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  osg::SoundPtr *arg1 = (osg::SoundPtr *) 0 ;
  osg::AttachmentPtr *arg2 = 0 ;
  osg::UInt16 arg3 ;
  
  SWIG_check_num_args("subAttachment",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("subAttachment",1,"osg::SoundPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("subAttachment",2,"osg::AttachmentPtr const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("subAttachment",3,"osg::UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__SoundPtr,0))){
    SWIG_fail_ptr("SoundPtr_subAttachment",1,SWIGTYPE_p_osg__SoundPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__AttachmentPtr,0))){
    SWIG_fail_ptr("SoundPtr_subAttachment",2,SWIGTYPE_p_osg__AttachmentPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (osg::UInt16)lua_tonumber(L, 3);
  (*arg1)->subAttachment((osg::AttachmentPtr const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundPtr_subAttachment__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  osg::SoundPtr *arg1 = (osg::SoundPtr *) 0 ;
  osg::AttachmentPtr *arg2 = 0 ;
  
  SWIG_check_num_args("subAttachment",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("subAttachment",1,"osg::SoundPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("subAttachment",2,"osg::AttachmentPtr const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__SoundPtr,0))){
    SWIG_fail_ptr("SoundPtr_subAttachment",1,SWIGTYPE_p_osg__SoundPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__AttachmentPtr,0))){
    SWIG_fail_ptr("SoundPtr_subAttachment",2,SWIGTYPE_p_osg__AttachmentPtr);
  }
  
  (*arg1)->subAttachment((osg::AttachmentPtr const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundPtr_subAttachment(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_osg__SoundPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_osg__AttachmentPtr, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_SoundPtr_subAttachment__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_osg__SoundPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_osg__AttachmentPtr, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_SoundPtr_subAttachment__SWIG_0(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'SoundPtr_subAttachment'\n"
    "  Possible C/C++ prototypes are:\n"
    "    subAttachment(osg::SoundPtr *,osg::AttachmentPtr const &,osg::UInt16)\n"
    "    subAttachment(osg::SoundPtr *,osg::AttachmentPtr const &)\n");
  lua_error(L);return 0;
}


static int _wrap_SoundPtr_findAttachment__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  osg::SoundPtr *arg1 = (osg::SoundPtr *) 0 ;
  osg::UInt32 arg2 ;
  osg::UInt16 arg3 ;
  osg::AttachmentPtr result;
  
  SWIG_check_num_args("findAttachment",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("findAttachment",1,"osg::SoundPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("findAttachment",2,"osg::UInt32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("findAttachment",3,"osg::UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__SoundPtr,0))){
    SWIG_fail_ptr("SoundPtr_findAttachment",1,SWIGTYPE_p_osg__SoundPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (osg::UInt32)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (osg::UInt16)lua_tonumber(L, 3);
  result = (*arg1)->findAttachment(arg2,arg3);
  {
    osg::AttachmentPtr * resultptr = new osg::AttachmentPtr((const osg::AttachmentPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_osg__AttachmentPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundPtr_findAttachment__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  osg::SoundPtr *arg1 = (osg::SoundPtr *) 0 ;
  osg::UInt32 arg2 ;
  osg::AttachmentPtr result;
  
  SWIG_check_num_args("findAttachment",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("findAttachment",1,"osg::SoundPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("findAttachment",2,"osg::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__SoundPtr,0))){
    SWIG_fail_ptr("SoundPtr_findAttachment",1,SWIGTYPE_p_osg__SoundPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (osg::UInt32)lua_tonumber(L, 2);
  result = (*arg1)->findAttachment(arg2);
  {
    osg::AttachmentPtr * resultptr = new osg::AttachmentPtr((const osg::AttachmentPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_osg__AttachmentPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundPtr_findAttachment__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  osg::SoundPtr *arg1 = (osg::SoundPtr *) 0 ;
  osg::FieldContainerType *arg2 = 0 ;
  osg::UInt16 arg3 ;
  osg::AttachmentPtr result;
  
  SWIG_check_num_args("findAttachment",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("findAttachment",1,"osg::SoundPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("findAttachment",2,"osg::FieldContainerType const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("findAttachment",3,"osg::UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__SoundPtr,0))){
    SWIG_fail_ptr("SoundPtr_findAttachment",1,SWIGTYPE_p_osg__SoundPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__FieldContainerType,0))){
    SWIG_fail_ptr("SoundPtr_findAttachment",2,SWIGTYPE_p_osg__FieldContainerType);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (osg::UInt16)lua_tonumber(L, 3);
  result = (*arg1)->findAttachment((osg::FieldContainerType const &)*arg2,arg3);
  {
    osg::AttachmentPtr * resultptr = new osg::AttachmentPtr((const osg::AttachmentPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_osg__AttachmentPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundPtr_findAttachment__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  osg::SoundPtr *arg1 = (osg::SoundPtr *) 0 ;
  osg::FieldContainerType *arg2 = 0 ;
  osg::AttachmentPtr result;
  
  SWIG_check_num_args("findAttachment",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("findAttachment",1,"osg::SoundPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("findAttachment",2,"osg::FieldContainerType const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__SoundPtr,0))){
    SWIG_fail_ptr("SoundPtr_findAttachment",1,SWIGTYPE_p_osg__SoundPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__FieldContainerType,0))){
    SWIG_fail_ptr("SoundPtr_findAttachment",2,SWIGTYPE_p_osg__FieldContainerType);
  }
  
  result = (*arg1)->findAttachment((osg::FieldContainerType const &)*arg2);
  {
    osg::AttachmentPtr * resultptr = new osg::AttachmentPtr((const osg::AttachmentPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_osg__AttachmentPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundPtr_findAttachment(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_osg__SoundPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_osg__FieldContainerType, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_SoundPtr_findAttachment__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_osg__SoundPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_SoundPtr_findAttachment__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_osg__SoundPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_osg__FieldContainerType, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_SoundPtr_findAttachment__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_osg__SoundPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_SoundPtr_findAttachment__SWIG_0(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'SoundPtr_findAttachment'\n"
    "  Possible C/C++ prototypes are:\n"
    "    findAttachment(osg::SoundPtr *,osg::UInt32,osg::UInt16)\n"
    "    findAttachment(osg::SoundPtr *,osg::UInt32)\n"
    "    findAttachment(osg::SoundPtr *,osg::FieldContainerType const &,osg::UInt16)\n"
    "    findAttachment(osg::SoundPtr *,osg::FieldContainerType const &)\n");
  lua_error(L);return 0;
}


static int _wrap_SoundPtr_getType(lua_State* L) {
  int SWIG_arg = 0;
  osg::SoundPtr *arg1 = (osg::SoundPtr *) 0 ;
  osg::FieldContainerType *result = 0 ;
  
  SWIG_check_num_args("getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getType",1,"osg::SoundPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__SoundPtr,0))){
    SWIG_fail_ptr("SoundPtr_getType",1,SWIGTYPE_p_osg__SoundPtr);
  }
  
  result = (osg::FieldContainerType *) &(*arg1)->getType();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_osg__FieldContainerType,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundPtr_getGroupId(lua_State* L) {
  int SWIG_arg = 0;
  osg::SoundPtr *arg1 = (osg::SoundPtr *) 0 ;
  osg::UInt16 result;
  
  SWIG_check_num_args("getGroupId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getGroupId",1,"osg::SoundPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__SoundPtr,0))){
    SWIG_fail_ptr("SoundPtr_getGroupId",1,SWIGTYPE_p_osg__SoundPtr);
  }
  
  result = (osg::UInt16)(*arg1)->getGroupId();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundPtr_getField__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  osg::SoundPtr *arg1 = (osg::SoundPtr *) 0 ;
  osg::UInt32 arg2 ;
  osg::Field *result = 0 ;
  
  SWIG_check_num_args("getField",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getField",1,"osg::SoundPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getField",2,"osg::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__SoundPtr,0))){
    SWIG_fail_ptr("SoundPtr_getField",1,SWIGTYPE_p_osg__SoundPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (osg::UInt32)lua_tonumber(L, 2);
  result = (osg::Field *)(*arg1)->getField(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_osg__Field,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundPtr_getField__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  osg::SoundPtr *arg1 = (osg::SoundPtr *) 0 ;
  osg::Char8 *arg2 = (osg::Char8 *) 0 ;
  osg::Field *result = 0 ;
  
  SWIG_check_num_args("getField",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getField",1,"osg::SoundPtr *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("getField",2,"osg::Char8 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__SoundPtr,0))){
    SWIG_fail_ptr("SoundPtr_getField",1,SWIGTYPE_p_osg__SoundPtr);
  }
  
  arg2 = (osg::Char8 *)lua_tostring(L, 2);
  result = (osg::Field *)(*arg1)->getField((osg::Char8 const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_osg__Field,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundPtr_getField(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_osg__SoundPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_SoundPtr_getField__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_osg__SoundPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_SoundPtr_getField__SWIG_1(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'SoundPtr_getField'\n"
    "  Possible C/C++ prototypes are:\n"
    "    getField(osg::SoundPtr *,osg::UInt32)\n"
    "    getField(osg::SoundPtr *,osg::Char8 const *)\n");
  lua_error(L);return 0;
}


static int _wrap_SoundPtr_shallowCopy(lua_State* L) {
  int SWIG_arg = 0;
  osg::SoundPtr *arg1 = (osg::SoundPtr *) 0 ;
  osg::FieldContainerPtr result;
  
  SWIG_check_num_args("shallowCopy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("shallowCopy",1,"osg::SoundPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__SoundPtr,0))){
    SWIG_fail_ptr("SoundPtr_shallowCopy",1,SWIGTYPE_p_osg__SoundPtr);
  }
  
  result = (*arg1)->shallowCopy();
  {
    osg::FieldContainerPtr * resultptr = new osg::FieldContainerPtr((const osg::FieldContainerPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_osg__FieldContainerPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_SoundPtr(void *obj) {
osg::SoundPtr *arg1 = (osg::SoundPtr *) obj;
delete arg1;
}
static swig_lua_method swig_osg_SoundPtr_methods[] = {
    {"__deref__", _wrap_SoundPtr___deref__}, 
    {"play", _wrap_SoundPtr_play}, 
    {"getLength", _wrap_SoundPtr_getLength}, 
    {"getNumChannels", _wrap_SoundPtr_getNumChannels}, 
    {"getNumPlayingChannels", _wrap_SoundPtr_getNumPlayingChannels}, 
    {"isPlaying", _wrap_SoundPtr_isPlaying}, 
    {"isValid", _wrap_SoundPtr_isValid}, 
    {"stop", _wrap_SoundPtr_stop}, 
    {"pause", _wrap_SoundPtr_pause}, 
    {"unpause", _wrap_SoundPtr_unpause}, 
    {"pauseToggle", _wrap_SoundPtr_pauseToggle}, 
    {"isPaused", _wrap_SoundPtr_isPaused}, 
    {"seek", _wrap_SoundPtr_seek}, 
    {"getTime", _wrap_SoundPtr_getTime}, 
    {"setChannelPosition", _wrap_SoundPtr_setChannelPosition}, 
    {"getChannelPosition", _wrap_SoundPtr_getChannelPosition}, 
    {"setChannelVelocity", _wrap_SoundPtr_setChannelVelocity}, 
    {"getChannelVelocity", _wrap_SoundPtr_getChannelVelocity}, 
    {"setChannelVolume", _wrap_SoundPtr_setChannelVolume}, 
    {"getChannelVolume", _wrap_SoundPtr_getChannelVolume}, 
    {"getMute", _wrap_SoundPtr_getMute}, 
    {"mute", _wrap_SoundPtr_mute}, 
    {"setAllChannelsVolume", _wrap_SoundPtr_setAllChannelsVolume}, 
    {"stopAllChannels", _wrap_SoundPtr_stopAllChannels}, 
    {"setAllChannelPaused", _wrap_SoundPtr_setAllChannelPaused}, 
    {"setAllChannelMute", _wrap_SoundPtr_setAllChannelMute}, 
    {"create", _wrap_SoundPtr_create}, 
    {"addAttachment", _wrap_SoundPtr_addAttachment}, 
    {"subAttachment", _wrap_SoundPtr_subAttachment}, 
    {"findAttachment", _wrap_SoundPtr_findAttachment}, 
    {"getType", _wrap_SoundPtr_getType}, 
    {"getGroupId", _wrap_SoundPtr_getGroupId}, 
    {"getField", _wrap_SoundPtr_getField}, 
    {"shallowCopy", _wrap_SoundPtr_shallowCopy}, 
    {0,0}
};
static swig_lua_attribute swig_osg_SoundPtr_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_osg_SoundPtr_bases[] = {0,0};
static const char *swig_osg_SoundPtr_base_names[] = {"osg::AttachmentContainerPtr *",0};
static swig_lua_class _wrap_class_osg_SoundPtr = { "SoundPtr", &SWIGTYPE_p_osg__SoundPtr,_wrap_new_SoundPtr, swig_delete_SoundPtr, swig_osg_SoundPtr_methods, swig_osg_SoundPtr_attributes, swig_osg_SoundPtr_bases, swig_osg_SoundPtr_base_names };

static int _wrap_Sound_play(lua_State* L) {
  int SWIG_arg = 0;
  osg::Sound *arg1 = (osg::Sound *) 0 ;
  osg::UInt32 result;
  
  SWIG_check_num_args("play",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("play",1,"osg::Sound *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__Sound,0))){
    SWIG_fail_ptr("Sound_play",1,SWIGTYPE_p_osg__Sound);
  }
  
  result = (osg::UInt32)(arg1)->play();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Sound_getLength(lua_State* L) {
  int SWIG_arg = 0;
  osg::Sound *arg1 = (osg::Sound *) 0 ;
  osg::Real32 result;
  
  SWIG_check_num_args("getLength",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getLength",1,"osg::Sound const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__Sound,0))){
    SWIG_fail_ptr("Sound_getLength",1,SWIGTYPE_p_osg__Sound);
  }
  
  result = (osg::Real32)((osg::Sound const *)arg1)->getLength();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Sound_getNumChannels(lua_State* L) {
  int SWIG_arg = 0;
  osg::Sound *arg1 = (osg::Sound *) 0 ;
  osg::UInt32 result;
  
  SWIG_check_num_args("getNumChannels",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getNumChannels",1,"osg::Sound const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__Sound,0))){
    SWIG_fail_ptr("Sound_getNumChannels",1,SWIGTYPE_p_osg__Sound);
  }
  
  result = (osg::UInt32)((osg::Sound const *)arg1)->getNumChannels();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Sound_getNumPlayingChannels(lua_State* L) {
  int SWIG_arg = 0;
  osg::Sound *arg1 = (osg::Sound *) 0 ;
  osg::UInt32 result;
  
  SWIG_check_num_args("getNumPlayingChannels",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getNumPlayingChannels",1,"osg::Sound const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__Sound,0))){
    SWIG_fail_ptr("Sound_getNumPlayingChannels",1,SWIGTYPE_p_osg__Sound);
  }
  
  result = (osg::UInt32)((osg::Sound const *)arg1)->getNumPlayingChannels();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Sound_isPlaying(lua_State* L) {
  int SWIG_arg = 0;
  osg::Sound *arg1 = (osg::Sound *) 0 ;
  osg::UInt32 arg2 ;
  bool result;
  
  SWIG_check_num_args("isPlaying",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isPlaying",1,"osg::Sound const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("isPlaying",2,"osg::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__Sound,0))){
    SWIG_fail_ptr("Sound_isPlaying",1,SWIGTYPE_p_osg__Sound);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (osg::UInt32)lua_tonumber(L, 2);
  result = (bool)((osg::Sound const *)arg1)->isPlaying(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Sound_isValid(lua_State* L) {
  int SWIG_arg = 0;
  osg::Sound *arg1 = (osg::Sound *) 0 ;
  osg::UInt32 arg2 ;
  bool result;
  
  SWIG_check_num_args("isValid",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isValid",1,"osg::Sound const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("isValid",2,"osg::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__Sound,0))){
    SWIG_fail_ptr("Sound_isValid",1,SWIGTYPE_p_osg__Sound);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (osg::UInt32)lua_tonumber(L, 2);
  result = (bool)((osg::Sound const *)arg1)->isValid(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Sound_stop(lua_State* L) {
  int SWIG_arg = 0;
  osg::Sound *arg1 = (osg::Sound *) 0 ;
  osg::UInt32 arg2 ;
  
  SWIG_check_num_args("stop",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stop",1,"osg::Sound *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stop",2,"osg::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__Sound,0))){
    SWIG_fail_ptr("Sound_stop",1,SWIGTYPE_p_osg__Sound);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (osg::UInt32)lua_tonumber(L, 2);
  (arg1)->stop(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Sound_pause(lua_State* L) {
  int SWIG_arg = 0;
  osg::Sound *arg1 = (osg::Sound *) 0 ;
  osg::UInt32 arg2 ;
  
  SWIG_check_num_args("pause",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pause",1,"osg::Sound *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pause",2,"osg::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__Sound,0))){
    SWIG_fail_ptr("Sound_pause",1,SWIGTYPE_p_osg__Sound);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (osg::UInt32)lua_tonumber(L, 2);
  (arg1)->pause(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Sound_unpause(lua_State* L) {
  int SWIG_arg = 0;
  osg::Sound *arg1 = (osg::Sound *) 0 ;
  osg::UInt32 arg2 ;
  
  SWIG_check_num_args("unpause",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("unpause",1,"osg::Sound *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("unpause",2,"osg::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__Sound,0))){
    SWIG_fail_ptr("Sound_unpause",1,SWIGTYPE_p_osg__Sound);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (osg::UInt32)lua_tonumber(L, 2);
  (arg1)->unpause(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Sound_pauseToggle(lua_State* L) {
  int SWIG_arg = 0;
  osg::Sound *arg1 = (osg::Sound *) 0 ;
  osg::UInt32 arg2 ;
  
  SWIG_check_num_args("pauseToggle",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pauseToggle",1,"osg::Sound *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pauseToggle",2,"osg::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__Sound,0))){
    SWIG_fail_ptr("Sound_pauseToggle",1,SWIGTYPE_p_osg__Sound);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (osg::UInt32)lua_tonumber(L, 2);
  (arg1)->pauseToggle(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Sound_isPaused(lua_State* L) {
  int SWIG_arg = 0;
  osg::Sound *arg1 = (osg::Sound *) 0 ;
  osg::UInt32 arg2 ;
  bool result;
  
  SWIG_check_num_args("isPaused",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isPaused",1,"osg::Sound const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("isPaused",2,"osg::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__Sound,0))){
    SWIG_fail_ptr("Sound_isPaused",1,SWIGTYPE_p_osg__Sound);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (osg::UInt32)lua_tonumber(L, 2);
  result = (bool)((osg::Sound const *)arg1)->isPaused(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Sound_seek(lua_State* L) {
  int SWIG_arg = 0;
  osg::Sound *arg1 = (osg::Sound *) 0 ;
  osg::Real32 arg2 ;
  osg::UInt32 arg3 ;
  
  SWIG_check_num_args("seek",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("seek",1,"osg::Sound *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("seek",2,"osg::Real32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("seek",3,"osg::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__Sound,0))){
    SWIG_fail_ptr("Sound_seek",1,SWIGTYPE_p_osg__Sound);
  }
  
  arg2 = (osg::Real32)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (osg::UInt32)lua_tonumber(L, 3);
  (arg1)->seek(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Sound_getTime(lua_State* L) {
  int SWIG_arg = 0;
  osg::Sound *arg1 = (osg::Sound *) 0 ;
  osg::UInt32 arg2 ;
  osg::Real32 result;
  
  SWIG_check_num_args("getTime",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getTime",1,"osg::Sound const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getTime",2,"osg::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__Sound,0))){
    SWIG_fail_ptr("Sound_getTime",1,SWIGTYPE_p_osg__Sound);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (osg::UInt32)lua_tonumber(L, 2);
  result = (osg::Real32)((osg::Sound const *)arg1)->getTime(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Sound_setChannelPosition(lua_State* L) {
  int SWIG_arg = 0;
  osg::Sound *arg1 = (osg::Sound *) 0 ;
  osg::Pnt3f *arg2 = 0 ;
  osg::UInt32 arg3 ;
  
  SWIG_check_num_args("setChannelPosition",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setChannelPosition",1,"osg::Sound *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setChannelPosition",2,"osg::Pnt3f const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("setChannelPosition",3,"osg::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__Sound,0))){
    SWIG_fail_ptr("Sound_setChannelPosition",1,SWIGTYPE_p_osg__Sound);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__Pnt3f,0))){
    SWIG_fail_ptr("Sound_setChannelPosition",2,SWIGTYPE_p_osg__Pnt3f);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (osg::UInt32)lua_tonumber(L, 3);
  (arg1)->setChannelPosition((osg::Pnt3f const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Sound_getChannelPosition(lua_State* L) {
  int SWIG_arg = 0;
  osg::Sound *arg1 = (osg::Sound *) 0 ;
  osg::UInt32 arg2 ;
  osg::Pnt3f result;
  
  SWIG_check_num_args("getChannelPosition",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getChannelPosition",1,"osg::Sound const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getChannelPosition",2,"osg::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__Sound,0))){
    SWIG_fail_ptr("Sound_getChannelPosition",1,SWIGTYPE_p_osg__Sound);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (osg::UInt32)lua_tonumber(L, 2);
  result = ((osg::Sound const *)arg1)->getChannelPosition(arg2);
  {
    osg::Pnt3f * resultptr = new osg::Pnt3f((const osg::Pnt3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_osg__Pnt3f,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Sound_setChannelVelocity(lua_State* L) {
  int SWIG_arg = 0;
  osg::Sound *arg1 = (osg::Sound *) 0 ;
  osg::Vec3f *arg2 = 0 ;
  osg::UInt32 arg3 ;
  
  SWIG_check_num_args("setChannelVelocity",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setChannelVelocity",1,"osg::Sound *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setChannelVelocity",2,"osg::Vec3f const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("setChannelVelocity",3,"osg::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__Sound,0))){
    SWIG_fail_ptr("Sound_setChannelVelocity",1,SWIGTYPE_p_osg__Sound);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__Vec3f,0))){
    SWIG_fail_ptr("Sound_setChannelVelocity",2,SWIGTYPE_p_osg__Vec3f);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (osg::UInt32)lua_tonumber(L, 3);
  (arg1)->setChannelVelocity((osg::Vec3f const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Sound_getChannelVelocity(lua_State* L) {
  int SWIG_arg = 0;
  osg::Sound *arg1 = (osg::Sound *) 0 ;
  osg::UInt32 arg2 ;
  osg::Vec3f result;
  
  SWIG_check_num_args("getChannelVelocity",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getChannelVelocity",1,"osg::Sound const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getChannelVelocity",2,"osg::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__Sound,0))){
    SWIG_fail_ptr("Sound_getChannelVelocity",1,SWIGTYPE_p_osg__Sound);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (osg::UInt32)lua_tonumber(L, 2);
  result = ((osg::Sound const *)arg1)->getChannelVelocity(arg2);
  {
    osg::Vec3f * resultptr = new osg::Vec3f((const osg::Vec3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_osg__Vec3f,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Sound_setChannelVolume(lua_State* L) {
  int SWIG_arg = 0;
  osg::Sound *arg1 = (osg::Sound *) 0 ;
  osg::Real32 arg2 ;
  osg::UInt32 arg3 ;
  
  SWIG_check_num_args("setChannelVolume",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setChannelVolume",1,"osg::Sound *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("setChannelVolume",2,"osg::Real32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("setChannelVolume",3,"osg::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__Sound,0))){
    SWIG_fail_ptr("Sound_setChannelVolume",1,SWIGTYPE_p_osg__Sound);
  }
  
  arg2 = (osg::Real32)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (osg::UInt32)lua_tonumber(L, 3);
  (arg1)->setChannelVolume(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Sound_getChannelVolume(lua_State* L) {
  int SWIG_arg = 0;
  osg::Sound *arg1 = (osg::Sound *) 0 ;
  osg::UInt32 arg2 ;
  osg::Real32 result;
  
  SWIG_check_num_args("getChannelVolume",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getChannelVolume",1,"osg::Sound const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getChannelVolume",2,"osg::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__Sound,0))){
    SWIG_fail_ptr("Sound_getChannelVolume",1,SWIGTYPE_p_osg__Sound);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (osg::UInt32)lua_tonumber(L, 2);
  result = (osg::Real32)((osg::Sound const *)arg1)->getChannelVolume(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Sound_getMute(lua_State* L) {
  int SWIG_arg = 0;
  osg::Sound *arg1 = (osg::Sound *) 0 ;
  osg::UInt32 arg2 ;
  bool result;
  
  SWIG_check_num_args("getMute",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getMute",1,"osg::Sound const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getMute",2,"osg::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__Sound,0))){
    SWIG_fail_ptr("Sound_getMute",1,SWIGTYPE_p_osg__Sound);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (osg::UInt32)lua_tonumber(L, 2);
  result = (bool)((osg::Sound const *)arg1)->getMute(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Sound_mute(lua_State* L) {
  int SWIG_arg = 0;
  osg::Sound *arg1 = (osg::Sound *) 0 ;
  bool arg2 ;
  osg::UInt32 arg3 ;
  
  SWIG_check_num_args("mute",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mute",1,"osg::Sound *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("mute",2,"bool");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("mute",3,"osg::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__Sound,0))){
    SWIG_fail_ptr("Sound_mute",1,SWIGTYPE_p_osg__Sound);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (osg::UInt32)lua_tonumber(L, 3);
  (arg1)->mute(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Sound_setAllChannelsVolume(lua_State* L) {
  int SWIG_arg = 0;
  osg::Sound *arg1 = (osg::Sound *) 0 ;
  osg::Real32 arg2 ;
  
  SWIG_check_num_args("setAllChannelsVolume",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setAllChannelsVolume",1,"osg::Sound *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("setAllChannelsVolume",2,"osg::Real32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__Sound,0))){
    SWIG_fail_ptr("Sound_setAllChannelsVolume",1,SWIGTYPE_p_osg__Sound);
  }
  
  arg2 = (osg::Real32)lua_tonumber(L, 2);
  (arg1)->setAllChannelsVolume(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Sound_stopAllChannels(lua_State* L) {
  int SWIG_arg = 0;
  osg::Sound *arg1 = (osg::Sound *) 0 ;
  
  SWIG_check_num_args("stopAllChannels",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stopAllChannels",1,"osg::Sound *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__Sound,0))){
    SWIG_fail_ptr("Sound_stopAllChannels",1,SWIGTYPE_p_osg__Sound);
  }
  
  (arg1)->stopAllChannels();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Sound_setAllChannelPaused(lua_State* L) {
  int SWIG_arg = 0;
  osg::Sound *arg1 = (osg::Sound *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("setAllChannelPaused",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setAllChannelPaused",1,"osg::Sound *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("setAllChannelPaused",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__Sound,0))){
    SWIG_fail_ptr("Sound_setAllChannelPaused",1,SWIGTYPE_p_osg__Sound);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setAllChannelPaused(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Sound_setAllChannelMute(lua_State* L) {
  int SWIG_arg = 0;
  osg::Sound *arg1 = (osg::Sound *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("setAllChannelMute",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setAllChannelMute",1,"osg::Sound *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("setAllChannelMute",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__Sound,0))){
    SWIG_fail_ptr("Sound_setAllChannelMute",1,SWIGTYPE_p_osg__Sound);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setAllChannelMute(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Sound_create(lua_State* L) {
  int SWIG_arg = 0;
  osg::SoundPtr result;
  
  SWIG_check_num_args("osg::Sound::create",0,0)
  result = osg::Sound::create();
  {
    osg::SoundPtr * resultptr = new osg::SoundPtr((const osg::SoundPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_osg__SoundPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static swig_lua_method swig_osg_Sound_methods[] = {
    {"play", _wrap_Sound_play}, 
    {"getLength", _wrap_Sound_getLength}, 
    {"getNumChannels", _wrap_Sound_getNumChannels}, 
    {"getNumPlayingChannels", _wrap_Sound_getNumPlayingChannels}, 
    {"isPlaying", _wrap_Sound_isPlaying}, 
    {"isValid", _wrap_Sound_isValid}, 
    {"stop", _wrap_Sound_stop}, 
    {"pause", _wrap_Sound_pause}, 
    {"unpause", _wrap_Sound_unpause}, 
    {"pauseToggle", _wrap_Sound_pauseToggle}, 
    {"isPaused", _wrap_Sound_isPaused}, 
    {"seek", _wrap_Sound_seek}, 
    {"getTime", _wrap_Sound_getTime}, 
    {"setChannelPosition", _wrap_Sound_setChannelPosition}, 
    {"getChannelPosition", _wrap_Sound_getChannelPosition}, 
    {"setChannelVelocity", _wrap_Sound_setChannelVelocity}, 
    {"getChannelVelocity", _wrap_Sound_getChannelVelocity}, 
    {"setChannelVolume", _wrap_Sound_setChannelVolume}, 
    {"getChannelVolume", _wrap_Sound_getChannelVolume}, 
    {"getMute", _wrap_Sound_getMute}, 
    {"mute", _wrap_Sound_mute}, 
    {"setAllChannelsVolume", _wrap_Sound_setAllChannelsVolume}, 
    {"stopAllChannels", _wrap_Sound_stopAllChannels}, 
    {"setAllChannelPaused", _wrap_Sound_setAllChannelPaused}, 
    {"setAllChannelMute", _wrap_Sound_setAllChannelMute}, 
    {0,0}
};
static swig_lua_attribute swig_osg_Sound_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_osg_Sound_bases[] = {0,0};
static const char *swig_osg_Sound_base_names[] = {"osg::AttachmentContainer *",0};
static swig_lua_class _wrap_class_osg_Sound = { "Sound", &SWIGTYPE_p_osg__Sound,0,0, swig_osg_Sound_methods, swig_osg_Sound_attributes, swig_osg_Sound_bases, swig_osg_Sound_base_names };

static int _wrap_SoundManager_the(lua_State* L) {
  int SWIG_arg = 0;
  osg::SoundManager *result = 0 ;
  
  SWIG_check_num_args("osg::SoundManager::the",0,0)
  result = (osg::SoundManager *)osg::SoundManager::the();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_osg__SoundManager,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundManager_createSound(lua_State* L) {
  int SWIG_arg = 0;
  osg::SoundManager *arg1 = (osg::SoundManager *) 0 ;
  osg::SoundPtr result;
  
  SWIG_check_num_args("createSound",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("createSound",1,"osg::SoundManager const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__SoundManager,0))){
    SWIG_fail_ptr("SoundManager_createSound",1,SWIGTYPE_p_osg__SoundManager);
  }
  
  result = ((osg::SoundManager const *)arg1)->createSound();
  {
    osg::SoundPtr * resultptr = new osg::SoundPtr((const osg::SoundPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_osg__SoundPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundManager_setCamera(lua_State* L) {
  int SWIG_arg = 0;
  osg::SoundManager *arg1 = (osg::SoundManager *) 0 ;
  osg::CameraPtr arg2 ;
  osg::CameraPtr *argp2 ;
  
  SWIG_check_num_args("setCamera",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setCamera",1,"osg::SoundManager *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setCamera",2,"osg::CameraPtr");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__SoundManager,0))){
    SWIG_fail_ptr("SoundManager_setCamera",1,SWIGTYPE_p_osg__SoundManager);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_osg__CameraPtr,0))){
    SWIG_fail_ptr("SoundManager_setCamera",2,SWIGTYPE_p_osg__CameraPtr);
  }
  arg2 = *argp2;
  
  (arg1)->setCamera(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundManager_getCamera(lua_State* L) {
  int SWIG_arg = 0;
  osg::SoundManager *arg1 = (osg::SoundManager *) 0 ;
  osg::CameraPtr result;
  
  SWIG_check_num_args("getCamera",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getCamera",1,"osg::SoundManager const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__SoundManager,0))){
    SWIG_fail_ptr("SoundManager_getCamera",1,SWIGTYPE_p_osg__SoundManager);
  }
  
  result = ((osg::SoundManager const *)arg1)->getCamera();
  {
    osg::CameraPtr * resultptr = new osg::CameraPtr((const osg::CameraPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_osg__CameraPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundManager_attachUpdateProducer(lua_State* L) {
  int SWIG_arg = 0;
  osg::SoundManager *arg1 = (osg::SoundManager *) 0 ;
  osg::WindowEventProducerPtr arg2 ;
  osg::WindowEventProducerPtr *argp2 ;
  
  SWIG_check_num_args("attachUpdateProducer",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("attachUpdateProducer",1,"osg::SoundManager *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("attachUpdateProducer",2,"osg::WindowEventProducerPtr");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__SoundManager,0))){
    SWIG_fail_ptr("SoundManager_attachUpdateProducer",1,SWIGTYPE_p_osg__SoundManager);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_osg__WindowEventProducerPtr,0))){
    SWIG_fail_ptr("SoundManager_attachUpdateProducer",2,SWIGTYPE_p_osg__WindowEventProducerPtr);
  }
  arg2 = *argp2;
  
  (arg1)->attachUpdateProducer(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundManager_detachUpdateProducer(lua_State* L) {
  int SWIG_arg = 0;
  osg::SoundManager *arg1 = (osg::SoundManager *) 0 ;
  osg::WindowEventProducerPtr arg2 ;
  osg::WindowEventProducerPtr *argp2 ;
  
  SWIG_check_num_args("detachUpdateProducer",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("detachUpdateProducer",1,"osg::SoundManager *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("detachUpdateProducer",2,"osg::WindowEventProducerPtr");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__SoundManager,0))){
    SWIG_fail_ptr("SoundManager_detachUpdateProducer",1,SWIGTYPE_p_osg__SoundManager);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_osg__WindowEventProducerPtr,0))){
    SWIG_fail_ptr("SoundManager_detachUpdateProducer",2,SWIGTYPE_p_osg__WindowEventProducerPtr);
  }
  arg2 = *argp2;
  
  (arg1)->detachUpdateProducer(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static swig_lua_method swig_osg_SoundManager_methods[] = {
    {"createSound", _wrap_SoundManager_createSound}, 
    {"setCamera", _wrap_SoundManager_setCamera}, 
    {"getCamera", _wrap_SoundManager_getCamera}, 
    {"attachUpdateProducer", _wrap_SoundManager_attachUpdateProducer}, 
    {"detachUpdateProducer", _wrap_SoundManager_detachUpdateProducer}, 
    {0,0}
};
static swig_lua_attribute swig_osg_SoundManager_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_osg_SoundManager_bases[] = {0};
static const char *swig_osg_SoundManager_base_names[] = {0};
static swig_lua_class _wrap_class_osg_SoundManager = { "SoundManager", &SWIGTYPE_p_osg__SoundManager,0,0, swig_osg_SoundManager_methods, swig_osg_SoundManager_attributes, swig_osg_SoundManager_bases, swig_osg_SoundManager_base_names };

static int _wrap_new_AnimationPtr__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  osg::AnimationPtr *result = 0 ;
  
  SWIG_check_num_args("osg::AnimationPtr",0,0)
  result = (osg::AnimationPtr *)new osg::AnimationPtr();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_osg__AnimationPtr,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_AnimationPtr__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  osg::AnimationPtr *arg1 = 0 ;
  osg::AnimationPtr *result = 0 ;
  
  SWIG_check_num_args("osg::AnimationPtr",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("osg::AnimationPtr",1,"osg::AnimationPtr const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__AnimationPtr,0))){
    SWIG_fail_ptr("new_AnimationPtr",1,SWIGTYPE_p_osg__AnimationPtr);
  }
  
  result = (osg::AnimationPtr *)new osg::AnimationPtr((osg::AnimationPtr const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_osg__AnimationPtr,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_AnimationPtr(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_AnimationPtr__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_osg__AnimationPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_AnimationPtr__SWIG_1(L);
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_AnimationPtr'\n"
    "  Possible C/C++ prototypes are:\n"
    "    osg::AnimationPtr()\n"
    "    osg::AnimationPtr(osg::AnimationPtr const &)\n");
  lua_error(L);return 0;
}


static int _wrap_AnimationPtr___deref__(lua_State* L) {
  int SWIG_arg = 0;
  osg::AnimationPtr *arg1 = (osg::AnimationPtr *) 0 ;
  osg::Animation *result = 0 ;
  
  SWIG_check_num_args("operator ->",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("operator ->",1,"osg::AnimationPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__AnimationPtr,0))){
    SWIG_fail_ptr("AnimationPtr___deref__",1,SWIGTYPE_p_osg__AnimationPtr);
  }
  
  result = (osg::Animation *)(arg1)->operator ->();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_osg__Animation,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AnimationPtr_dcast(lua_State* L) {
  int SWIG_arg = 0;
  osg::FieldContainerPtr arg1 ;
  osg::FieldContainerPtr *argp1 ;
  osg::AnimationPtr result;
  
  SWIG_check_num_args("osg::AnimationPtr::dcast",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("osg::AnimationPtr::dcast",1,"osg::FieldContainerPtr const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_osg__FieldContainerPtr,0))){
    SWIG_fail_ptr("AnimationPtr_dcast",1,SWIGTYPE_p_osg__FieldContainerPtr);
  }
  arg1 = *argp1;
  
  result = osg::AnimationPtr::dcast(arg1);
  {
    osg::AnimationPtr * resultptr = new osg::AnimationPtr((const osg::AnimationPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_osg__AnimationPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AnimationPtr_getLength(lua_State* L) {
  int SWIG_arg = 0;
  osg::AnimationPtr *arg1 = (osg::AnimationPtr *) 0 ;
  osg::Real32 result;
  
  SWIG_check_num_args("getLength",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getLength",1,"osg::AnimationPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__AnimationPtr,0))){
    SWIG_fail_ptr("AnimationPtr_getLength",1,SWIGTYPE_p_osg__AnimationPtr);
  }
  
  result = (osg::Real32)(*arg1)->getLength();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AnimationPtr_addAttachment__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  osg::AnimationPtr *arg1 = (osg::AnimationPtr *) 0 ;
  osg::AttachmentPtr *arg2 = 0 ;
  osg::UInt16 arg3 ;
  
  SWIG_check_num_args("addAttachment",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("addAttachment",1,"osg::AnimationPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("addAttachment",2,"osg::AttachmentPtr const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("addAttachment",3,"osg::UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__AnimationPtr,0))){
    SWIG_fail_ptr("AnimationPtr_addAttachment",1,SWIGTYPE_p_osg__AnimationPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__AttachmentPtr,0))){
    SWIG_fail_ptr("AnimationPtr_addAttachment",2,SWIGTYPE_p_osg__AttachmentPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (osg::UInt16)lua_tonumber(L, 3);
  (*arg1)->addAttachment((osg::AttachmentPtr const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AnimationPtr_addAttachment__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  osg::AnimationPtr *arg1 = (osg::AnimationPtr *) 0 ;
  osg::AttachmentPtr *arg2 = 0 ;
  
  SWIG_check_num_args("addAttachment",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("addAttachment",1,"osg::AnimationPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("addAttachment",2,"osg::AttachmentPtr const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__AnimationPtr,0))){
    SWIG_fail_ptr("AnimationPtr_addAttachment",1,SWIGTYPE_p_osg__AnimationPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__AttachmentPtr,0))){
    SWIG_fail_ptr("AnimationPtr_addAttachment",2,SWIGTYPE_p_osg__AttachmentPtr);
  }
  
  (*arg1)->addAttachment((osg::AttachmentPtr const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AnimationPtr_addAttachment(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_osg__AnimationPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_osg__AttachmentPtr, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_AnimationPtr_addAttachment__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_osg__AnimationPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_osg__AttachmentPtr, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_AnimationPtr_addAttachment__SWIG_0(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'AnimationPtr_addAttachment'\n"
    "  Possible C/C++ prototypes are:\n"
    "    addAttachment(osg::AnimationPtr *,osg::AttachmentPtr const &,osg::UInt16)\n"
    "    addAttachment(osg::AnimationPtr *,osg::AttachmentPtr const &)\n");
  lua_error(L);return 0;
}


static int _wrap_AnimationPtr_subAttachment__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  osg::AnimationPtr *arg1 = (osg::AnimationPtr *) 0 ;
  osg::AttachmentPtr *arg2 = 0 ;
  osg::UInt16 arg3 ;
  
  SWIG_check_num_args("subAttachment",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("subAttachment",1,"osg::AnimationPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("subAttachment",2,"osg::AttachmentPtr const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("subAttachment",3,"osg::UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__AnimationPtr,0))){
    SWIG_fail_ptr("AnimationPtr_subAttachment",1,SWIGTYPE_p_osg__AnimationPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__AttachmentPtr,0))){
    SWIG_fail_ptr("AnimationPtr_subAttachment",2,SWIGTYPE_p_osg__AttachmentPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (osg::UInt16)lua_tonumber(L, 3);
  (*arg1)->subAttachment((osg::AttachmentPtr const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AnimationPtr_subAttachment__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  osg::AnimationPtr *arg1 = (osg::AnimationPtr *) 0 ;
  osg::AttachmentPtr *arg2 = 0 ;
  
  SWIG_check_num_args("subAttachment",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("subAttachment",1,"osg::AnimationPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("subAttachment",2,"osg::AttachmentPtr const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__AnimationPtr,0))){
    SWIG_fail_ptr("AnimationPtr_subAttachment",1,SWIGTYPE_p_osg__AnimationPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__AttachmentPtr,0))){
    SWIG_fail_ptr("AnimationPtr_subAttachment",2,SWIGTYPE_p_osg__AttachmentPtr);
  }
  
  (*arg1)->subAttachment((osg::AttachmentPtr const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AnimationPtr_subAttachment(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_osg__AnimationPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_osg__AttachmentPtr, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_AnimationPtr_subAttachment__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_osg__AnimationPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_osg__AttachmentPtr, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_AnimationPtr_subAttachment__SWIG_0(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'AnimationPtr_subAttachment'\n"
    "  Possible C/C++ prototypes are:\n"
    "    subAttachment(osg::AnimationPtr *,osg::AttachmentPtr const &,osg::UInt16)\n"
    "    subAttachment(osg::AnimationPtr *,osg::AttachmentPtr const &)\n");
  lua_error(L);return 0;
}


static int _wrap_AnimationPtr_findAttachment__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  osg::AnimationPtr *arg1 = (osg::AnimationPtr *) 0 ;
  osg::UInt32 arg2 ;
  osg::UInt16 arg3 ;
  osg::AttachmentPtr result;
  
  SWIG_check_num_args("findAttachment",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("findAttachment",1,"osg::AnimationPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("findAttachment",2,"osg::UInt32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("findAttachment",3,"osg::UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__AnimationPtr,0))){
    SWIG_fail_ptr("AnimationPtr_findAttachment",1,SWIGTYPE_p_osg__AnimationPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (osg::UInt32)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (osg::UInt16)lua_tonumber(L, 3);
  result = (*arg1)->findAttachment(arg2,arg3);
  {
    osg::AttachmentPtr * resultptr = new osg::AttachmentPtr((const osg::AttachmentPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_osg__AttachmentPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AnimationPtr_findAttachment__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  osg::AnimationPtr *arg1 = (osg::AnimationPtr *) 0 ;
  osg::UInt32 arg2 ;
  osg::AttachmentPtr result;
  
  SWIG_check_num_args("findAttachment",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("findAttachment",1,"osg::AnimationPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("findAttachment",2,"osg::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__AnimationPtr,0))){
    SWIG_fail_ptr("AnimationPtr_findAttachment",1,SWIGTYPE_p_osg__AnimationPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (osg::UInt32)lua_tonumber(L, 2);
  result = (*arg1)->findAttachment(arg2);
  {
    osg::AttachmentPtr * resultptr = new osg::AttachmentPtr((const osg::AttachmentPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_osg__AttachmentPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AnimationPtr_findAttachment__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  osg::AnimationPtr *arg1 = (osg::AnimationPtr *) 0 ;
  osg::FieldContainerType *arg2 = 0 ;
  osg::UInt16 arg3 ;
  osg::AttachmentPtr result;
  
  SWIG_check_num_args("findAttachment",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("findAttachment",1,"osg::AnimationPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("findAttachment",2,"osg::FieldContainerType const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("findAttachment",3,"osg::UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__AnimationPtr,0))){
    SWIG_fail_ptr("AnimationPtr_findAttachment",1,SWIGTYPE_p_osg__AnimationPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__FieldContainerType,0))){
    SWIG_fail_ptr("AnimationPtr_findAttachment",2,SWIGTYPE_p_osg__FieldContainerType);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (osg::UInt16)lua_tonumber(L, 3);
  result = (*arg1)->findAttachment((osg::FieldContainerType const &)*arg2,arg3);
  {
    osg::AttachmentPtr * resultptr = new osg::AttachmentPtr((const osg::AttachmentPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_osg__AttachmentPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AnimationPtr_findAttachment__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  osg::AnimationPtr *arg1 = (osg::AnimationPtr *) 0 ;
  osg::FieldContainerType *arg2 = 0 ;
  osg::AttachmentPtr result;
  
  SWIG_check_num_args("findAttachment",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("findAttachment",1,"osg::AnimationPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("findAttachment",2,"osg::FieldContainerType const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__AnimationPtr,0))){
    SWIG_fail_ptr("AnimationPtr_findAttachment",1,SWIGTYPE_p_osg__AnimationPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__FieldContainerType,0))){
    SWIG_fail_ptr("AnimationPtr_findAttachment",2,SWIGTYPE_p_osg__FieldContainerType);
  }
  
  result = (*arg1)->findAttachment((osg::FieldContainerType const &)*arg2);
  {
    osg::AttachmentPtr * resultptr = new osg::AttachmentPtr((const osg::AttachmentPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_osg__AttachmentPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AnimationPtr_findAttachment(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_osg__AnimationPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_osg__FieldContainerType, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_AnimationPtr_findAttachment__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_osg__AnimationPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_AnimationPtr_findAttachment__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_osg__AnimationPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_osg__FieldContainerType, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_AnimationPtr_findAttachment__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_osg__AnimationPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_AnimationPtr_findAttachment__SWIG_0(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'AnimationPtr_findAttachment'\n"
    "  Possible C/C++ prototypes are:\n"
    "    findAttachment(osg::AnimationPtr *,osg::UInt32,osg::UInt16)\n"
    "    findAttachment(osg::AnimationPtr *,osg::UInt32)\n"
    "    findAttachment(osg::AnimationPtr *,osg::FieldContainerType const &,osg::UInt16)\n"
    "    findAttachment(osg::AnimationPtr *,osg::FieldContainerType const &)\n");
  lua_error(L);return 0;
}


static int _wrap_AnimationPtr_getType(lua_State* L) {
  int SWIG_arg = 0;
  osg::AnimationPtr *arg1 = (osg::AnimationPtr *) 0 ;
  osg::FieldContainerType *result = 0 ;
  
  SWIG_check_num_args("getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getType",1,"osg::AnimationPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__AnimationPtr,0))){
    SWIG_fail_ptr("AnimationPtr_getType",1,SWIGTYPE_p_osg__AnimationPtr);
  }
  
  result = (osg::FieldContainerType *) &(*arg1)->getType();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_osg__FieldContainerType,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AnimationPtr_getGroupId(lua_State* L) {
  int SWIG_arg = 0;
  osg::AnimationPtr *arg1 = (osg::AnimationPtr *) 0 ;
  osg::UInt16 result;
  
  SWIG_check_num_args("getGroupId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getGroupId",1,"osg::AnimationPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__AnimationPtr,0))){
    SWIG_fail_ptr("AnimationPtr_getGroupId",1,SWIGTYPE_p_osg__AnimationPtr);
  }
  
  result = (osg::UInt16)(*arg1)->getGroupId();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AnimationPtr_getField__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  osg::AnimationPtr *arg1 = (osg::AnimationPtr *) 0 ;
  osg::UInt32 arg2 ;
  osg::Field *result = 0 ;
  
  SWIG_check_num_args("getField",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getField",1,"osg::AnimationPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getField",2,"osg::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__AnimationPtr,0))){
    SWIG_fail_ptr("AnimationPtr_getField",1,SWIGTYPE_p_osg__AnimationPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (osg::UInt32)lua_tonumber(L, 2);
  result = (osg::Field *)(*arg1)->getField(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_osg__Field,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AnimationPtr_getField__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  osg::AnimationPtr *arg1 = (osg::AnimationPtr *) 0 ;
  osg::Char8 *arg2 = (osg::Char8 *) 0 ;
  osg::Field *result = 0 ;
  
  SWIG_check_num_args("getField",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getField",1,"osg::AnimationPtr *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("getField",2,"osg::Char8 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__AnimationPtr,0))){
    SWIG_fail_ptr("AnimationPtr_getField",1,SWIGTYPE_p_osg__AnimationPtr);
  }
  
  arg2 = (osg::Char8 *)lua_tostring(L, 2);
  result = (osg::Field *)(*arg1)->getField((osg::Char8 const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_osg__Field,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AnimationPtr_getField(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_osg__AnimationPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_AnimationPtr_getField__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_osg__AnimationPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_AnimationPtr_getField__SWIG_1(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'AnimationPtr_getField'\n"
    "  Possible C/C++ prototypes are:\n"
    "    getField(osg::AnimationPtr *,osg::UInt32)\n"
    "    getField(osg::AnimationPtr *,osg::Char8 const *)\n");
  lua_error(L);return 0;
}


static int _wrap_AnimationPtr_shallowCopy(lua_State* L) {
  int SWIG_arg = 0;
  osg::AnimationPtr *arg1 = (osg::AnimationPtr *) 0 ;
  osg::FieldContainerPtr result;
  
  SWIG_check_num_args("shallowCopy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("shallowCopy",1,"osg::AnimationPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__AnimationPtr,0))){
    SWIG_fail_ptr("AnimationPtr_shallowCopy",1,SWIGTYPE_p_osg__AnimationPtr);
  }
  
  result = (*arg1)->shallowCopy();
  {
    osg::FieldContainerPtr * resultptr = new osg::FieldContainerPtr((const osg::FieldContainerPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_osg__FieldContainerPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_AnimationPtr(void *obj) {
osg::AnimationPtr *arg1 = (osg::AnimationPtr *) obj;
delete arg1;
}
static swig_lua_method swig_osg_AnimationPtr_methods[] = {
    {"__deref__", _wrap_AnimationPtr___deref__}, 
    {"getLength", _wrap_AnimationPtr_getLength}, 
    {"addAttachment", _wrap_AnimationPtr_addAttachment}, 
    {"subAttachment", _wrap_AnimationPtr_subAttachment}, 
    {"findAttachment", _wrap_AnimationPtr_findAttachment}, 
    {"getType", _wrap_AnimationPtr_getType}, 
    {"getGroupId", _wrap_AnimationPtr_getGroupId}, 
    {"getField", _wrap_AnimationPtr_getField}, 
    {"shallowCopy", _wrap_AnimationPtr_shallowCopy}, 
    {0,0}
};
static swig_lua_attribute swig_osg_AnimationPtr_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_osg_AnimationPtr_bases[] = {0,0};
static const char *swig_osg_AnimationPtr_base_names[] = {"osg::AttachmentContainerPtr *",0};
static swig_lua_class _wrap_class_osg_AnimationPtr = { "AnimationPtr", &SWIGTYPE_p_osg__AnimationPtr,_wrap_new_AnimationPtr, swig_delete_AnimationPtr, swig_osg_AnimationPtr_methods, swig_osg_AnimationPtr_attributes, swig_osg_AnimationPtr_bases, swig_osg_AnimationPtr_base_names };

static int _wrap_Animation_getLength(lua_State* L) {
  int SWIG_arg = 0;
  osg::Animation *arg1 = (osg::Animation *) 0 ;
  osg::Real32 result;
  
  SWIG_check_num_args("getLength",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getLength",1,"osg::Animation const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__Animation,0))){
    SWIG_fail_ptr("Animation_getLength",1,SWIGTYPE_p_osg__Animation);
  }
  
  result = (osg::Real32)((osg::Animation const *)arg1)->getLength();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static swig_lua_method swig_osg_Animation_methods[] = {
    {"getLength", _wrap_Animation_getLength}, 
    {0,0}
};
static swig_lua_attribute swig_osg_Animation_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_osg_Animation_bases[] = {0,0};
static const char *swig_osg_Animation_base_names[] = {"osg::AttachmentContainer *",0};
static swig_lua_class _wrap_class_osg_Animation = { "Animation", &SWIGTYPE_p_osg__Animation,0,0, swig_osg_Animation_methods, swig_osg_Animation_attributes, swig_osg_Animation_bases, swig_osg_Animation_base_names };

#ifdef __cplusplus
}
#endif

static const struct luaL_reg swig_commands[] = {
    { "WindowEventProducerPtr_dcast", _wrap_WindowEventProducerPtr_dcast},
    { "PhysicsHandlerPtr_dcast", _wrap_PhysicsHandlerPtr_dcast},
    { "PhysicsWorldPtr_dcast", _wrap_PhysicsWorldPtr_dcast},
    { "PhysicsBodyPtr_dcast", _wrap_PhysicsBodyPtr_dcast},
    { "PhysicsBody_create", _wrap_PhysicsBody_create},
    { "ParticleSystemPtr_dcast", _wrap_ParticleSystemPtr_dcast},
    { "ComponentPtr_dcast", _wrap_ComponentPtr_dcast},
    { "SoundPtr_dcast", _wrap_SoundPtr_dcast},
    { "Sound_create", _wrap_Sound_create},
    { "SoundManager_the", _wrap_SoundManager_the},
    { "AnimationPtr_dcast", _wrap_AnimationPtr_dcast},
    {0,0}
};

static swig_lua_var_info swig_variables[] = {
    {0,0,0}
};

static swig_lua_const_info swig_constants[] = {
{ SWIG_LUA_INT,     (char *)"WindowEventProducer_CURSOR_POINTER", (long) osg::WindowEventProducer::CURSOR_POINTER, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"WindowEventProducer_CURSOR_HAND", (long) osg::WindowEventProducer::CURSOR_HAND, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"WindowEventProducer_CURSOR_I_BEAM", (long) osg::WindowEventProducer::CURSOR_I_BEAM, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"WindowEventProducer_CURSOR_WAIT", (long) osg::WindowEventProducer::CURSOR_WAIT, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"WindowEventProducer_CURSOR_RESIZE_W_TO_E", (long) osg::WindowEventProducer::CURSOR_RESIZE_W_TO_E, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"WindowEventProducer_CURSOR_RESIZE_N_TO_S", (long) osg::WindowEventProducer::CURSOR_RESIZE_N_TO_S, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"WindowEventProducer_CURSOR_RESIZE_NW_TO_SE", (long) osg::WindowEventProducer::CURSOR_RESIZE_NW_TO_SE, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"WindowEventProducer_CURSOR_RESIZE_SW_TO_NE", (long) osg::WindowEventProducer::CURSOR_RESIZE_SW_TO_NE, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"WindowEventProducer_CURSOR_RESIZE_ALL", (long) osg::WindowEventProducer::CURSOR_RESIZE_ALL, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"WindowEventProducer_CURSOR_NONE", (long) osg::WindowEventProducer::CURSOR_NONE, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEvent_KEY_MODIFIER_UNKNOWN", (long) osg::KeyEvent::KEY_MODIFIER_UNKNOWN, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEvent_KEY_MODIFIER_SHIFT", (long) osg::KeyEvent::KEY_MODIFIER_SHIFT, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEvent_KEY_MODIFIER_CONTROL", (long) osg::KeyEvent::KEY_MODIFIER_CONTROL, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEvent_KEY_MODIFIER_ALT", (long) osg::KeyEvent::KEY_MODIFIER_ALT, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEvent_KEY_MODIFIER_META", (long) osg::KeyEvent::KEY_MODIFIER_META, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEvent_KEY_MODIFIER_CAPS_LOCK", (long) osg::KeyEvent::KEY_MODIFIER_CAPS_LOCK, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEvent_KEY_MODIFIER_NUM_LOCK", (long) osg::KeyEvent::KEY_MODIFIER_NUM_LOCK, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEvent_KEY_MODIFIER_SCROLL_LOCK", (long) osg::KeyEvent::KEY_MODIFIER_SCROLL_LOCK, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEvent_KEY_UNKNOWN", (long) osg::KeyEvent::KEY_UNKNOWN, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEvent_KEY_BACK_SPACE", (long) osg::KeyEvent::KEY_BACK_SPACE, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEvent_KEY_TAB", (long) osg::KeyEvent::KEY_TAB, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEvent_KEY_ESCAPE", (long) osg::KeyEvent::KEY_ESCAPE, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEvent_KEY_SPACE", (long) osg::KeyEvent::KEY_SPACE, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEvent_KEY_EXCLAMATION_MARK", (long) osg::KeyEvent::KEY_EXCLAMATION_MARK, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEvent_KEY_QUOTE", (long) osg::KeyEvent::KEY_QUOTE, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEvent_KEY_NUMBER_SIGN", (long) osg::KeyEvent::KEY_NUMBER_SIGN, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEvent_KEY_DOLLAR", (long) osg::KeyEvent::KEY_DOLLAR, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEvent_KEY_PERCENT", (long) osg::KeyEvent::KEY_PERCENT, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEvent_KEY_AMPERSAND", (long) osg::KeyEvent::KEY_AMPERSAND, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEvent_KEY_APOSTROPHE", (long) osg::KeyEvent::KEY_APOSTROPHE, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEvent_KEY_LEFT_PARENTHESIS", (long) osg::KeyEvent::KEY_LEFT_PARENTHESIS, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEvent_KEY_RIGHT_PARENTHESIS", (long) osg::KeyEvent::KEY_RIGHT_PARENTHESIS, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEvent_KEY_ASTERISK", (long) osg::KeyEvent::KEY_ASTERISK, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEvent_KEY_PLUS", (long) osg::KeyEvent::KEY_PLUS, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEvent_KEY_COMMA", (long) osg::KeyEvent::KEY_COMMA, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEvent_KEY_MINUS", (long) osg::KeyEvent::KEY_MINUS, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEvent_KEY_PERIOD", (long) osg::KeyEvent::KEY_PERIOD, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEvent_KEY_SLASH", (long) osg::KeyEvent::KEY_SLASH, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEvent_KEY_0", (long) osg::KeyEvent::KEY_0, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEvent_KEY_1", (long) osg::KeyEvent::KEY_1, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEvent_KEY_2", (long) osg::KeyEvent::KEY_2, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEvent_KEY_3", (long) osg::KeyEvent::KEY_3, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEvent_KEY_4", (long) osg::KeyEvent::KEY_4, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEvent_KEY_5", (long) osg::KeyEvent::KEY_5, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEvent_KEY_6", (long) osg::KeyEvent::KEY_6, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEvent_KEY_7", (long) osg::KeyEvent::KEY_7, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEvent_KEY_8", (long) osg::KeyEvent::KEY_8, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEvent_KEY_9", (long) osg::KeyEvent::KEY_9, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEvent_KEY_COLON", (long) osg::KeyEvent::KEY_COLON, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEvent_KEY_SEMICOLON", (long) osg::KeyEvent::KEY_SEMICOLON, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEvent_KEY_LESS", (long) osg::KeyEvent::KEY_LESS, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEvent_KEY_EQUALS", (long) osg::KeyEvent::KEY_EQUALS, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEvent_KEY_GREATER", (long) osg::KeyEvent::KEY_GREATER, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEvent_KEY_QUESTION_MARK", (long) osg::KeyEvent::KEY_QUESTION_MARK, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEvent_KEY_AT", (long) osg::KeyEvent::KEY_AT, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEvent_KEY_A", (long) osg::KeyEvent::KEY_A, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEvent_KEY_B", (long) osg::KeyEvent::KEY_B, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEvent_KEY_C", (long) osg::KeyEvent::KEY_C, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEvent_KEY_D", (long) osg::KeyEvent::KEY_D, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEvent_KEY_E", (long) osg::KeyEvent::KEY_E, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEvent_KEY_F", (long) osg::KeyEvent::KEY_F, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEvent_KEY_G", (long) osg::KeyEvent::KEY_G, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEvent_KEY_H", (long) osg::KeyEvent::KEY_H, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEvent_KEY_I", (long) osg::KeyEvent::KEY_I, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEvent_KEY_J", (long) osg::KeyEvent::KEY_J, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEvent_KEY_K", (long) osg::KeyEvent::KEY_K, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEvent_KEY_L", (long) osg::KeyEvent::KEY_L, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEvent_KEY_M", (long) osg::KeyEvent::KEY_M, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEvent_KEY_N", (long) osg::KeyEvent::KEY_N, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEvent_KEY_O", (long) osg::KeyEvent::KEY_O, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEvent_KEY_P", (long) osg::KeyEvent::KEY_P, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEvent_KEY_Q", (long) osg::KeyEvent::KEY_Q, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEvent_KEY_R", (long) osg::KeyEvent::KEY_R, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEvent_KEY_S", (long) osg::KeyEvent::KEY_S, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEvent_KEY_T", (long) osg::KeyEvent::KEY_T, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEvent_KEY_U", (long) osg::KeyEvent::KEY_U, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEvent_KEY_V", (long) osg::KeyEvent::KEY_V, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEvent_KEY_W", (long) osg::KeyEvent::KEY_W, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEvent_KEY_X", (long) osg::KeyEvent::KEY_X, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEvent_KEY_Y", (long) osg::KeyEvent::KEY_Y, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEvent_KEY_Z", (long) osg::KeyEvent::KEY_Z, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEvent_KEY_OPEN_BRACKET", (long) osg::KeyEvent::KEY_OPEN_BRACKET, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEvent_KEY_BACK_SLASH", (long) osg::KeyEvent::KEY_BACK_SLASH, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEvent_KEY_CLOSE_BRACKET", (long) osg::KeyEvent::KEY_CLOSE_BRACKET, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEvent_KEY_CIRCUMFLEX", (long) osg::KeyEvent::KEY_CIRCUMFLEX, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEvent_KEY_UNDERSCORE", (long) osg::KeyEvent::KEY_UNDERSCORE, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEvent_KEY_BACK_QUOTE", (long) osg::KeyEvent::KEY_BACK_QUOTE, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEvent_KEY_BRACE_LEFT", (long) osg::KeyEvent::KEY_BRACE_LEFT, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEvent_KEY_PIPE", (long) osg::KeyEvent::KEY_PIPE, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEvent_KEY_BRACE_RIGHT", (long) osg::KeyEvent::KEY_BRACE_RIGHT, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEvent_KEY_TILDE", (long) osg::KeyEvent::KEY_TILDE, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEvent_KEY_DELETE", (long) osg::KeyEvent::KEY_DELETE, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEvent_KEY_INVERTED_EXCLAMATION_MARK", (long) osg::KeyEvent::KEY_INVERTED_EXCLAMATION_MARK, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEvent_KEY_ALT", (long) osg::KeyEvent::KEY_ALT, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEvent_KEY_CONTROL", (long) osg::KeyEvent::KEY_CONTROL, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEvent_KEY_CAPS_LOCK", (long) osg::KeyEvent::KEY_CAPS_LOCK, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEvent_KEY_SCROLL_LOCK", (long) osg::KeyEvent::KEY_SCROLL_LOCK, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEvent_KEY_NUM_LOCK", (long) osg::KeyEvent::KEY_NUM_LOCK, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEvent_KEY_SHIFT", (long) osg::KeyEvent::KEY_SHIFT, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEvent_KEY_MENU", (long) osg::KeyEvent::KEY_MENU, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEvent_KEY_META", (long) osg::KeyEvent::KEY_META, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEvent_KEY_ENTER", (long) osg::KeyEvent::KEY_ENTER, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEvent_KEY_CANCEL", (long) osg::KeyEvent::KEY_CANCEL, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEvent_KEY_CLEAR", (long) osg::KeyEvent::KEY_CLEAR, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEvent_KEY_COPY", (long) osg::KeyEvent::KEY_COPY, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEvent_KEY_CUT", (long) osg::KeyEvent::KEY_CUT, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEvent_KEY_END", (long) osg::KeyEvent::KEY_END, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEvent_KEY_INSERT", (long) osg::KeyEvent::KEY_INSERT, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEvent_KEY_HOME", (long) osg::KeyEvent::KEY_HOME, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEvent_KEY_PAGE_DOWN", (long) osg::KeyEvent::KEY_PAGE_DOWN, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEvent_KEY_PAGE_UP", (long) osg::KeyEvent::KEY_PAGE_UP, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEvent_KEY_FIND", (long) osg::KeyEvent::KEY_FIND, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEvent_KEY_HELP", (long) osg::KeyEvent::KEY_HELP, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEvent_KEY_PASTE", (long) osg::KeyEvent::KEY_PASTE, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEvent_KEY_PAUSE", (long) osg::KeyEvent::KEY_PAUSE, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEvent_KEY_PRINTSCREEN", (long) osg::KeyEvent::KEY_PRINTSCREEN, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEvent_KEY_STOP", (long) osg::KeyEvent::KEY_STOP, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEvent_KEY_UNDO", (long) osg::KeyEvent::KEY_UNDO, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEvent_KEY_F1", (long) osg::KeyEvent::KEY_F1, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEvent_KEY_F2", (long) osg::KeyEvent::KEY_F2, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEvent_KEY_F3", (long) osg::KeyEvent::KEY_F3, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEvent_KEY_F4", (long) osg::KeyEvent::KEY_F4, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEvent_KEY_F5", (long) osg::KeyEvent::KEY_F5, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEvent_KEY_F6", (long) osg::KeyEvent::KEY_F6, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEvent_KEY_F7", (long) osg::KeyEvent::KEY_F7, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEvent_KEY_F8", (long) osg::KeyEvent::KEY_F8, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEvent_KEY_F9", (long) osg::KeyEvent::KEY_F9, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEvent_KEY_F10", (long) osg::KeyEvent::KEY_F10, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEvent_KEY_F11", (long) osg::KeyEvent::KEY_F11, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEvent_KEY_F12", (long) osg::KeyEvent::KEY_F12, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEvent_KEY_F13", (long) osg::KeyEvent::KEY_F13, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEvent_KEY_F14", (long) osg::KeyEvent::KEY_F14, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEvent_KEY_F15", (long) osg::KeyEvent::KEY_F15, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEvent_KEY_F16", (long) osg::KeyEvent::KEY_F16, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEvent_KEY_F17", (long) osg::KeyEvent::KEY_F17, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEvent_KEY_F18", (long) osg::KeyEvent::KEY_F18, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEvent_KEY_F19", (long) osg::KeyEvent::KEY_F19, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEvent_KEY_F20", (long) osg::KeyEvent::KEY_F20, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEvent_KEY_F21", (long) osg::KeyEvent::KEY_F21, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEvent_KEY_F22", (long) osg::KeyEvent::KEY_F22, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEvent_KEY_F23", (long) osg::KeyEvent::KEY_F23, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEvent_KEY_F24", (long) osg::KeyEvent::KEY_F24, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEvent_KEY_RIGHT", (long) osg::KeyEvent::KEY_RIGHT, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEvent_KEY_LEFT", (long) osg::KeyEvent::KEY_LEFT, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEvent_KEY_UP", (long) osg::KeyEvent::KEY_UP, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEvent_KEY_DOWN", (long) osg::KeyEvent::KEY_DOWN, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEvent_KEY_MULTIPLY", (long) osg::KeyEvent::KEY_MULTIPLY, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEvent_KEY_DECIMAL", (long) osg::KeyEvent::KEY_DECIMAL, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEvent_KEY_ADD", (long) osg::KeyEvent::KEY_ADD, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEvent_KEY_DIVIDE", (long) osg::KeyEvent::KEY_DIVIDE, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEvent_KEY_SUBTRACT", (long) osg::KeyEvent::KEY_SUBTRACT, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEvent_KEY_KEYPAD_UP", (long) osg::KeyEvent::KEY_KEYPAD_UP, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEvent_KEY_KEYPAD_DOWN", (long) osg::KeyEvent::KEY_KEYPAD_DOWN, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEvent_KEY_KEYPAD_LEFT", (long) osg::KeyEvent::KEY_KEYPAD_LEFT, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEvent_KEY_KEYPAD_RIGHT", (long) osg::KeyEvent::KEY_KEYPAD_RIGHT, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEvent_KEY_NONE", (long) osg::KeyEvent::KEY_NONE, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEvent_KEY_NUMPAD_0", (long) osg::KeyEvent::KEY_NUMPAD_0, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEvent_KEY_NUMPAD_1", (long) osg::KeyEvent::KEY_NUMPAD_1, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEvent_KEY_NUMPAD_2", (long) osg::KeyEvent::KEY_NUMPAD_2, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEvent_KEY_NUMPAD_3", (long) osg::KeyEvent::KEY_NUMPAD_3, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEvent_KEY_NUMPAD_4", (long) osg::KeyEvent::KEY_NUMPAD_4, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEvent_KEY_NUMPAD_5", (long) osg::KeyEvent::KEY_NUMPAD_5, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEvent_KEY_NUMPAD_6", (long) osg::KeyEvent::KEY_NUMPAD_6, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEvent_KEY_NUMPAD_7", (long) osg::KeyEvent::KEY_NUMPAD_7, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEvent_KEY_NUMPAD_8", (long) osg::KeyEvent::KEY_NUMPAD_8, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEvent_KEY_NUMPAD_9", (long) osg::KeyEvent::KEY_NUMPAD_9, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEvent_KEY_NUMPAD_EQUALS", (long) osg::KeyEvent::KEY_NUMPAD_EQUALS, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEvent_KEY_UNDEFINED", (long) osg::KeyEvent::KEY_UNDEFINED, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEvent_KEY_STATE_UP", (long) osg::KeyEvent::KEY_STATE_UP, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEvent_KEY_STATE_DOWN", (long) osg::KeyEvent::KEY_STATE_DOWN, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyEvent_KEY_STATE_TOGGLED", (long) osg::KeyEvent::KEY_STATE_TOGGLED, 0, 0, 0},
    {0,0,0,0,0,0}
};

/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_osg__Vec2fTo_p_osg__Pnt2f(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((osg::Pnt2f *)  ((osg::Vec2f *) x));
}
static void *_p_osg__NodeTo_p_osg__AttachmentContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((osg::AttachmentContainer *)  ((osg::Node *) x));
}
static void *_p_osg__ComponentTo_p_osg__AttachmentContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((osg::AttachmentContainer *)  ((osg::Component *) x));
}
static void *_p_osg__SoundTo_p_osg__AttachmentContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((osg::AttachmentContainer *)  ((osg::Sound *) x));
}
static void *_p_osg__GeometryTo_p_osg__AttachmentContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((osg::AttachmentContainer *) (osg::NodeCore *) ((osg::Geometry *) x));
}
static void *_p_osg__ParticleSystemTo_p_osg__AttachmentContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((osg::AttachmentContainer *)  ((osg::ParticleSystem *) x));
}
static void *_p_osg__NodeCoreTo_p_osg__AttachmentContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((osg::AttachmentContainer *)  ((osg::NodeCore *) x));
}
static void *_p_osg__CameraTo_p_osg__AttachmentContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((osg::AttachmentContainer *)  ((osg::Camera *) x));
}
static void *_p_osg__ViewportTo_p_osg__AttachmentContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((osg::AttachmentContainer *)  ((osg::Viewport *) x));
}
static void *_p_osg__ImageTo_p_osg__AttachmentContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((osg::AttachmentContainer *)  ((osg::Image *) x));
}
static void *_p_osg__AnimationTo_p_osg__AttachmentContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((osg::AttachmentContainer *)  ((osg::Animation *) x));
}
static void *_p_osg__PhysicsBodyTo_p_osg__FieldContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((osg::FieldContainer *)  ((osg::PhysicsBody *) x));
}
static void *_p_osg__SoundTo_p_osg__FieldContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((osg::FieldContainer *) (osg::AttachmentContainer *) ((osg::Sound *) x));
}
static void *_p_osg__ComponentTo_p_osg__FieldContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((osg::FieldContainer *) (osg::AttachmentContainer *) ((osg::Component *) x));
}
static void *_p_osg__NodeTo_p_osg__FieldContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((osg::FieldContainer *) (osg::AttachmentContainer *) ((osg::Node *) x));
}
static void *_p_osg__AnimationTo_p_osg__FieldContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((osg::FieldContainer *) (osg::AttachmentContainer *) ((osg::Animation *) x));
}
static void *_p_osg__ViewportTo_p_osg__FieldContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((osg::FieldContainer *) (osg::AttachmentContainer *) ((osg::Viewport *) x));
}
static void *_p_osg__CameraTo_p_osg__FieldContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((osg::FieldContainer *) (osg::AttachmentContainer *) ((osg::Camera *) x));
}
static void *_p_osg__ParticleSystemTo_p_osg__FieldContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((osg::FieldContainer *) (osg::AttachmentContainer *) ((osg::ParticleSystem *) x));
}
static void *_p_osg__PhysicsHandlerTo_p_osg__FieldContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((osg::FieldContainer *)  ((osg::PhysicsHandler *) x));
}
static void *_p_osg__AttachmentTo_p_osg__FieldContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((osg::FieldContainer *)  ((osg::Attachment *) x));
}
static void *_p_osg__NodeCoreTo_p_osg__FieldContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((osg::FieldContainer *) (osg::AttachmentContainer *) ((osg::NodeCore *) x));
}
static void *_p_osg__AttachmentContainerTo_p_osg__FieldContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((osg::FieldContainer *)  ((osg::AttachmentContainer *) x));
}
static void *_p_osg__GeometryTo_p_osg__FieldContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((osg::FieldContainer *) (osg::AttachmentContainer *)(osg::NodeCore *) ((osg::Geometry *) x));
}
static void *_p_osg__ImageTo_p_osg__FieldContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((osg::FieldContainer *) (osg::AttachmentContainer *) ((osg::Image *) x));
}
static void *_p_osg__PhysicsWorldTo_p_osg__FieldContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((osg::FieldContainer *)  ((osg::PhysicsWorld *) x));
}
static void *_p_osg__ParticleSystemPtrTo_p_osg__FieldContainerPtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((osg::FieldContainerPtr *) (osg::AttachmentContainerPtr *) ((osg::ParticleSystemPtr *) x));
}
static void *_p_osg__NodePtrTo_p_osg__FieldContainerPtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((osg::FieldContainerPtr *) (osg::AttachmentContainerPtr *) ((osg::NodePtr *) x));
}
static void *_p_osg__CameraPtrTo_p_osg__FieldContainerPtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((osg::FieldContainerPtr *) (osg::AttachmentContainerPtr *) ((osg::CameraPtr *) x));
}
static void *_p_osg__ViewportPtrTo_p_osg__FieldContainerPtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((osg::FieldContainerPtr *) (osg::AttachmentContainerPtr *) ((osg::ViewportPtr *) x));
}
static void *_p_osg__ComponentPtrTo_p_osg__FieldContainerPtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((osg::FieldContainerPtr *) (osg::AttachmentContainerPtr *) ((osg::ComponentPtr *) x));
}
static void *_p_osg__NodeCorePtrTo_p_osg__FieldContainerPtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((osg::FieldContainerPtr *) (osg::AttachmentContainerPtr *) ((osg::NodeCorePtr *) x));
}
static void *_p_osg__AttachmentPtrTo_p_osg__FieldContainerPtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((osg::FieldContainerPtr *)  ((osg::AttachmentPtr *) x));
}
static void *_p_osg__ImagePtrTo_p_osg__FieldContainerPtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((osg::FieldContainerPtr *) (osg::AttachmentContainerPtr *) ((osg::ImagePtr *) x));
}
static void *_p_osg__AnimationPtrTo_p_osg__FieldContainerPtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((osg::FieldContainerPtr *) (osg::AttachmentContainerPtr *) ((osg::AnimationPtr *) x));
}
static void *_p_osg__PhysicsHandlerPtrTo_p_osg__FieldContainerPtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((osg::FieldContainerPtr *)  ((osg::PhysicsHandlerPtr *) x));
}
static void *_p_osg__PhysicsWorldPtrTo_p_osg__FieldContainerPtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((osg::FieldContainerPtr *)  ((osg::PhysicsWorldPtr *) x));
}
static void *_p_osg__GeometryPtrTo_p_osg__FieldContainerPtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((osg::FieldContainerPtr *) (osg::AttachmentContainerPtr *)(osg::NodeCorePtr *) ((osg::GeometryPtr *) x));
}
static void *_p_osg__PhysicsBodyPtrTo_p_osg__FieldContainerPtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((osg::FieldContainerPtr *)  ((osg::PhysicsBodyPtr *) x));
}
static void *_p_osg__WindowEventProducerPtrTo_p_osg__FieldContainerPtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((osg::FieldContainerPtr *) (osg::AttachmentContainerPtr *) ((osg::WindowEventProducerPtr *) x));
}
static void *_p_osg__WindowEventProducerTo_p_osg__FieldContainerPtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((osg::FieldContainerPtr *) (osg::AttachmentContainerPtr *) ((osg::WindowEventProducer *) x));
}
static void *_p_osg__SoundPtrTo_p_osg__FieldContainerPtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((osg::FieldContainerPtr *) (osg::AttachmentContainerPtr *) ((osg::SoundPtr *) x));
}
static void *_p_osg__AttachmentContainerPtrTo_p_osg__FieldContainerPtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((osg::FieldContainerPtr *)  ((osg::AttachmentContainerPtr *) x));
}
static void *_p_osg__ImagePtrTo_p_osg__AttachmentContainerPtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((osg::AttachmentContainerPtr *)  ((osg::ImagePtr *) x));
}
static void *_p_osg__NodeCorePtrTo_p_osg__AttachmentContainerPtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((osg::AttachmentContainerPtr *)  ((osg::NodeCorePtr *) x));
}
static void *_p_osg__WindowEventProducerPtrTo_p_osg__AttachmentContainerPtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((osg::AttachmentContainerPtr *)  ((osg::WindowEventProducerPtr *) x));
}
static void *_p_osg__AnimationPtrTo_p_osg__AttachmentContainerPtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((osg::AttachmentContainerPtr *)  ((osg::AnimationPtr *) x));
}
static void *_p_osg__NodePtrTo_p_osg__AttachmentContainerPtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((osg::AttachmentContainerPtr *)  ((osg::NodePtr *) x));
}
static void *_p_osg__ParticleSystemPtrTo_p_osg__AttachmentContainerPtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((osg::AttachmentContainerPtr *)  ((osg::ParticleSystemPtr *) x));
}
static void *_p_osg__ComponentPtrTo_p_osg__AttachmentContainerPtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((osg::AttachmentContainerPtr *)  ((osg::ComponentPtr *) x));
}
static void *_p_osg__GeometryPtrTo_p_osg__AttachmentContainerPtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((osg::AttachmentContainerPtr *) (osg::NodeCorePtr *) ((osg::GeometryPtr *) x));
}
static void *_p_osg__ViewportPtrTo_p_osg__AttachmentContainerPtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((osg::AttachmentContainerPtr *)  ((osg::ViewportPtr *) x));
}
static void *_p_osg__WindowEventProducerTo_p_osg__AttachmentContainerPtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((osg::AttachmentContainerPtr *)  ((osg::WindowEventProducer *) x));
}
static void *_p_osg__SoundPtrTo_p_osg__AttachmentContainerPtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((osg::AttachmentContainerPtr *)  ((osg::SoundPtr *) x));
}
static void *_p_osg__CameraPtrTo_p_osg__AttachmentContainerPtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((osg::AttachmentContainerPtr *)  ((osg::CameraPtr *) x));
}
static void *_p_osg__Vec3fTo_p_osg__Pnt3f(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((osg::Pnt3f *)  ((osg::Vec3f *) x));
}
static swig_type_info _swigt__p_Inherited = {"_p_Inherited", "Inherited *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_MatrixType = {"_p_MatrixType", "MatrixType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ObjectType = {"_p_ObjectType", "ObjectType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_PointType = {"_p_PointType", "PointType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_PointType3f = {"_p_PointType3f", "PointType3f *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_QuaternionType = {"_p_QuaternionType", "QuaternionType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_StoredObjectType = {"_p_StoredObjectType", "StoredObjectType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ValueType = {"_p_ValueType", "ValueType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_VectorType = {"_p_VectorType", "VectorType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_VectorType3f = {"_p_VectorType3f", "VectorType3f *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_char = {"_p_char", "char *|osg::Char8 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_difference_type = {"_p_difference_type", "difference_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_double = {"_p_double", "osg::Time *|double *|osg::Real64 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_float = {"_p_float", "float *|osg::Real32 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int = {"_p_int", "osg::Int16 *|int *|osg::Int32 *|osg::Int8 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_key_type = {"_p_key_type", "key_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_long = {"_p_long", "osg::TimeStamp *|osg::Int64 *|long *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_long_double = {"_p_long_double", "long double *|osg::Real128 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mapped_type = {"_p_mapped_type", "mapped_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_osg__Animation = {"_p_osg__Animation", "osg::Animation *", 0, 0, (void*)&_wrap_class_osg_Animation, 0};
static swig_type_info _swigt__p_osg__AnimationPtr = {"_p_osg__AnimationPtr", "osg::AnimationPtr *", 0, 0, (void*)&_wrap_class_osg_AnimationPtr, 0};
static swig_type_info _swigt__p_osg__AttachmentContainer = {"_p_osg__AttachmentContainer", "osg::AttachmentContainer *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_osg__Image = {"_p_osg__Image", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_osg__Node = {"_p_osg__Node", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_osg__Geometry = {"_p_osg__Geometry", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_osg__NodeCore = {"_p_osg__NodeCore", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_osg__Camera = {"_p_osg__Camera", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_osg__Viewport = {"_p_osg__Viewport", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_osg__AttachmentContainerPtr = {"_p_osg__AttachmentContainerPtr", "osg::AttachmentContainerPtr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_osg__ImagePtr = {"_p_osg__ImagePtr", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_osg__NodeCorePtr = {"_p_osg__NodeCorePtr", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_osg__GeometryPtr = {"_p_osg__GeometryPtr", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_osg__AttachmentPtr = {"_p_osg__AttachmentPtr", "osg::AttachmentPtr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_osg__CameraPtr = {"_p_osg__CameraPtr", "osg::CameraPtr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_osg__Color4f = {"_p_osg__Color4f", "osg::Color4f *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_osg__Component = {"_p_osg__Component", "osg::Component *", 0, 0, (void*)&_wrap_class_osg_Component, 0};
static swig_type_info _swigt__p_osg__ComponentPtr = {"_p_osg__ComponentPtr", "osg::ComponentPtr *", 0, 0, (void*)&_wrap_class_osg_ComponentPtr, 0};
static swig_type_info _swigt__p_osg__Field = {"_p_osg__Field", "osg::Field *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_osg__FieldContainer = {"_p_osg__FieldContainer", "osg::FieldContainer *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_osg__Attachment = {"_p_osg__Attachment", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_osg__FieldContainerPtr = {"_p_osg__FieldContainerPtr", "osg::FieldContainerPtr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_osg__FieldContainerType = {"_p_osg__FieldContainerType", "osg::FieldContainerType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_osg__KeyEvent = {"_p_osg__KeyEvent", "osg::KeyEvent *", 0, 0, (void*)&_wrap_class_osg_KeyEvent, 0};
static swig_type_info _swigt__p_osg__Line = {"_p_osg__Line", "osg::Line *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_osg__Matrix = {"_p_osg__Matrix", "osg::Matrix *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_osg__NodePtr = {"_p_osg__NodePtr", "osg::NodePtr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_osg__ParticleSystem = {"_p_osg__ParticleSystem", "osg::ParticleSystem *", 0, 0, (void*)&_wrap_class_osg_ParticleSystem, 0};
static swig_type_info _swigt__p_osg__ParticleSystemPtr = {"_p_osg__ParticleSystemPtr", "osg::ParticleSystemPtr *", 0, 0, (void*)&_wrap_class_osg_ParticleSystemPtr, 0};
static swig_type_info _swigt__p_osg__PhysicsBody = {"_p_osg__PhysicsBody", "osg::PhysicsBody *", 0, 0, (void*)&_wrap_class_osg_PhysicsBody, 0};
static swig_type_info _swigt__p_osg__PhysicsBodyPtr = {"_p_osg__PhysicsBodyPtr", "osg::PhysicsBodyPtr *", 0, 0, (void*)&_wrap_class_osg_PhysicsBodyPtr, 0};
static swig_type_info _swigt__p_osg__PhysicsHandler = {"_p_osg__PhysicsHandler", "osg::PhysicsHandler *", 0, 0, (void*)&_wrap_class_osg_PhysicsHandler, 0};
static swig_type_info _swigt__p_osg__PhysicsHandlerPtr = {"_p_osg__PhysicsHandlerPtr", "osg::PhysicsHandlerPtr *", 0, 0, (void*)&_wrap_class_osg_PhysicsHandlerPtr, 0};
static swig_type_info _swigt__p_osg__PhysicsWorld = {"_p_osg__PhysicsWorld", "osg::PhysicsWorld *", 0, 0, (void*)&_wrap_class_osg_PhysicsWorld, 0};
static swig_type_info _swigt__p_osg__PhysicsWorldPtr = {"_p_osg__PhysicsWorldPtr", "osg::PhysicsWorldPtr *", 0, 0, (void*)&_wrap_class_osg_PhysicsWorldPtr, 0};
static swig_type_info _swigt__p_osg__Pnt2f = {"_p_osg__Pnt2f", "osg::Pnt2f *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_osg__Pnt3f = {"_p_osg__Pnt3f", "osg::Pnt3f *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_osg__Sound = {"_p_osg__Sound", "osg::Sound *", 0, 0, (void*)&_wrap_class_osg_Sound, 0};
static swig_type_info _swigt__p_osg__SoundManager = {"_p_osg__SoundManager", "osg::SoundManager *", 0, 0, (void*)&_wrap_class_osg_SoundManager, 0};
static swig_type_info _swigt__p_osg__SoundPtr = {"_p_osg__SoundPtr", "osg::SoundPtr *", 0, 0, (void*)&_wrap_class_osg_SoundPtr, 0};
static swig_type_info _swigt__p_osg__Vec2f = {"_p_osg__Vec2f", "osg::Vec2f *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_osg__Vec3f = {"_p_osg__Vec3f", "osg::Vec3f *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_osg__ViewportPtr = {"_p_osg__ViewportPtr", "osg::ViewportPtr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_osg__WindowEventProducer = {"_p_osg__WindowEventProducer", "osg::WindowEventProducer *", 0, 0, (void*)&_wrap_class_osg_WindowEventProducer, 0};
static swig_type_info _swigt__p_osg__WindowEventProducerPtr = {"_p_osg__WindowEventProducerPtr", "osg::WindowEventProducerPtr *", 0, 0, (void*)&_wrap_class_osg_WindowEventProducerPtr, 0};
static swig_type_info _swigt__p_signed_char = {"_p_signed_char", "signed char *|osg::SChar8 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_size_type = {"_p_size_type", "size_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__mapT_std__string_unsigned_int_t = {"_p_std__mapT_std__string_unsigned_int_t", "std::map< std::string,osg::UInt32 > *|std::map< std::string,unsigned int > *", 0, 0, (void*)&_wrap_class_std_map_Sl_std_string_Sc_osg_UInt32_Sg_, 0};
static swig_type_info _swigt__p_std__vectorT_unsigned_int_t = {"_p_std__vectorT_unsigned_int_t", "std::vector< osg::UInt32 > *|std::vector< unsigned int > *", 0, 0, (void*)&_wrap_class_std_vector_Sl_osg_UInt32_Sg_, 0};
static swig_type_info _swigt__p_unsigned_char = {"_p_unsigned_char", "unsigned char *|osg::UChar8 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_int = {"_p_unsigned_int", "osg::UInt16 *|osg::UInt32 *|unsigned int *|osg::UInt8 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_long = {"_p_unsigned_long", "osg::UInt64 *|unsigned long *|osg::BitVector *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_Inherited,
  &_swigt__p_MatrixType,
  &_swigt__p_ObjectType,
  &_swigt__p_PointType,
  &_swigt__p_PointType3f,
  &_swigt__p_QuaternionType,
  &_swigt__p_StoredObjectType,
  &_swigt__p_ValueType,
  &_swigt__p_VectorType,
  &_swigt__p_VectorType3f,
  &_swigt__p_char,
  &_swigt__p_difference_type,
  &_swigt__p_double,
  &_swigt__p_float,
  &_swigt__p_int,
  &_swigt__p_key_type,
  &_swigt__p_long,
  &_swigt__p_long_double,
  &_swigt__p_mapped_type,
  &_swigt__p_osg__Animation,
  &_swigt__p_osg__AnimationPtr,
  &_swigt__p_osg__Attachment,
  &_swigt__p_osg__AttachmentContainer,
  &_swigt__p_osg__AttachmentContainerPtr,
  &_swigt__p_osg__AttachmentPtr,
  &_swigt__p_osg__Camera,
  &_swigt__p_osg__CameraPtr,
  &_swigt__p_osg__Color4f,
  &_swigt__p_osg__Component,
  &_swigt__p_osg__ComponentPtr,
  &_swigt__p_osg__Field,
  &_swigt__p_osg__FieldContainer,
  &_swigt__p_osg__FieldContainerPtr,
  &_swigt__p_osg__FieldContainerType,
  &_swigt__p_osg__Geometry,
  &_swigt__p_osg__GeometryPtr,
  &_swigt__p_osg__Image,
  &_swigt__p_osg__ImagePtr,
  &_swigt__p_osg__KeyEvent,
  &_swigt__p_osg__Line,
  &_swigt__p_osg__Matrix,
  &_swigt__p_osg__Node,
  &_swigt__p_osg__NodeCore,
  &_swigt__p_osg__NodeCorePtr,
  &_swigt__p_osg__NodePtr,
  &_swigt__p_osg__ParticleSystem,
  &_swigt__p_osg__ParticleSystemPtr,
  &_swigt__p_osg__PhysicsBody,
  &_swigt__p_osg__PhysicsBodyPtr,
  &_swigt__p_osg__PhysicsHandler,
  &_swigt__p_osg__PhysicsHandlerPtr,
  &_swigt__p_osg__PhysicsWorld,
  &_swigt__p_osg__PhysicsWorldPtr,
  &_swigt__p_osg__Pnt2f,
  &_swigt__p_osg__Pnt3f,
  &_swigt__p_osg__Sound,
  &_swigt__p_osg__SoundManager,
  &_swigt__p_osg__SoundPtr,
  &_swigt__p_osg__Vec2f,
  &_swigt__p_osg__Vec3f,
  &_swigt__p_osg__Viewport,
  &_swigt__p_osg__ViewportPtr,
  &_swigt__p_osg__WindowEventProducer,
  &_swigt__p_osg__WindowEventProducerPtr,
  &_swigt__p_signed_char,
  &_swigt__p_size_type,
  &_swigt__p_std__mapT_std__string_unsigned_int_t,
  &_swigt__p_std__vectorT_unsigned_int_t,
  &_swigt__p_unsigned_char,
  &_swigt__p_unsigned_int,
  &_swigt__p_unsigned_long,
};

static swig_cast_info _swigc__p_Inherited[] = {  {&_swigt__p_Inherited, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MatrixType[] = {  {&_swigt__p_MatrixType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ObjectType[] = {  {&_swigt__p_ObjectType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_PointType[] = {  {&_swigt__p_PointType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_PointType3f[] = {  {&_swigt__p_PointType3f, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_QuaternionType[] = {  {&_swigt__p_QuaternionType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_StoredObjectType[] = {  {&_swigt__p_StoredObjectType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ValueType[] = {  {&_swigt__p_ValueType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_VectorType[] = {  {&_swigt__p_VectorType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_VectorType3f[] = {  {&_swigt__p_VectorType3f, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_difference_type[] = {  {&_swigt__p_difference_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_double[] = {  {&_swigt__p_double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_float[] = {  {&_swigt__p_float, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int[] = {  {&_swigt__p_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_key_type[] = {  {&_swigt__p_key_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_long[] = {  {&_swigt__p_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_long_double[] = {  {&_swigt__p_long_double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mapped_type[] = {  {&_swigt__p_mapped_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_osg__Animation[] = {  {&_swigt__p_osg__Animation, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_osg__AnimationPtr[] = {  {&_swigt__p_osg__AnimationPtr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_osg__Image[] = {{&_swigt__p_osg__Image, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_osg__Node[] = {{&_swigt__p_osg__Node, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_osg__Geometry[] = {{&_swigt__p_osg__Geometry, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_osg__NodeCore[] = {{&_swigt__p_osg__NodeCore, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_osg__Camera[] = {{&_swigt__p_osg__Camera, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_osg__Viewport[] = {{&_swigt__p_osg__Viewport, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_osg__AttachmentContainer[] = {  {&_swigt__p_osg__Component, _p_osg__ComponentTo_p_osg__AttachmentContainer, 0, 0},  {&_swigt__p_osg__Image, _p_osg__ImageTo_p_osg__AttachmentContainer, 0, 0},  {&_swigt__p_osg__Node, _p_osg__NodeTo_p_osg__AttachmentContainer, 0, 0},  {&_swigt__p_osg__Sound, _p_osg__SoundTo_p_osg__AttachmentContainer, 0, 0},  {&_swigt__p_osg__Geometry, _p_osg__GeometryTo_p_osg__AttachmentContainer, 0, 0},  {&_swigt__p_osg__ParticleSystem, _p_osg__ParticleSystemTo_p_osg__AttachmentContainer, 0, 0},  {&_swigt__p_osg__AttachmentContainer, 0, 0, 0},  {&_swigt__p_osg__NodeCore, _p_osg__NodeCoreTo_p_osg__AttachmentContainer, 0, 0},  {&_swigt__p_osg__Camera, _p_osg__CameraTo_p_osg__AttachmentContainer, 0, 0},  {&_swigt__p_osg__Viewport, _p_osg__ViewportTo_p_osg__AttachmentContainer, 0, 0},  {&_swigt__p_osg__Animation, _p_osg__AnimationTo_p_osg__AttachmentContainer, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_osg__ImagePtr[] = {{&_swigt__p_osg__ImagePtr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_osg__NodeCorePtr[] = {{&_swigt__p_osg__NodeCorePtr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_osg__GeometryPtr[] = {{&_swigt__p_osg__GeometryPtr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_osg__AttachmentContainerPtr[] = {  {&_swigt__p_osg__ImagePtr, _p_osg__ImagePtrTo_p_osg__AttachmentContainerPtr, 0, 0},  {&_swigt__p_osg__NodeCorePtr, _p_osg__NodeCorePtrTo_p_osg__AttachmentContainerPtr, 0, 0},  {&_swigt__p_osg__WindowEventProducerPtr, _p_osg__WindowEventProducerPtrTo_p_osg__AttachmentContainerPtr, 0, 0},  {&_swigt__p_osg__AnimationPtr, _p_osg__AnimationPtrTo_p_osg__AttachmentContainerPtr, 0, 0},  {&_swigt__p_osg__AttachmentContainerPtr, 0, 0, 0},  {&_swigt__p_osg__NodePtr, _p_osg__NodePtrTo_p_osg__AttachmentContainerPtr, 0, 0},  {&_swigt__p_osg__ParticleSystemPtr, _p_osg__ParticleSystemPtrTo_p_osg__AttachmentContainerPtr, 0, 0},  {&_swigt__p_osg__ComponentPtr, _p_osg__ComponentPtrTo_p_osg__AttachmentContainerPtr, 0, 0},  {&_swigt__p_osg__GeometryPtr, _p_osg__GeometryPtrTo_p_osg__AttachmentContainerPtr, 0, 0},  {&_swigt__p_osg__ViewportPtr, _p_osg__ViewportPtrTo_p_osg__AttachmentContainerPtr, 0, 0},  {&_swigt__p_osg__WindowEventProducer, _p_osg__WindowEventProducerTo_p_osg__AttachmentContainerPtr, 0, 0},  {&_swigt__p_osg__SoundPtr, _p_osg__SoundPtrTo_p_osg__AttachmentContainerPtr, 0, 0},  {&_swigt__p_osg__CameraPtr, _p_osg__CameraPtrTo_p_osg__AttachmentContainerPtr, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_osg__AttachmentPtr[] = {  {&_swigt__p_osg__AttachmentPtr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_osg__CameraPtr[] = {  {&_swigt__p_osg__CameraPtr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_osg__Color4f[] = {  {&_swigt__p_osg__Color4f, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_osg__Component[] = {  {&_swigt__p_osg__Component, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_osg__ComponentPtr[] = {  {&_swigt__p_osg__ComponentPtr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_osg__Field[] = {  {&_swigt__p_osg__Field, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_osg__Attachment[] = {{&_swigt__p_osg__Attachment, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_osg__FieldContainer[] = {  {&_swigt__p_osg__PhysicsBody, _p_osg__PhysicsBodyTo_p_osg__FieldContainer, 0, 0},  {&_swigt__p_osg__Camera, _p_osg__CameraTo_p_osg__FieldContainer, 0, 0},  {&_swigt__p_osg__Sound, _p_osg__SoundTo_p_osg__FieldContainer, 0, 0},  {&_swigt__p_osg__Component, _p_osg__ComponentTo_p_osg__FieldContainer, 0, 0},  {&_swigt__p_osg__Animation, _p_osg__AnimationTo_p_osg__FieldContainer, 0, 0},  {&_swigt__p_osg__Viewport, _p_osg__ViewportTo_p_osg__FieldContainer, 0, 0},  {&_swigt__p_osg__ParticleSystem, _p_osg__ParticleSystemTo_p_osg__FieldContainer, 0, 0},  {&_swigt__p_osg__PhysicsHandler, _p_osg__PhysicsHandlerTo_p_osg__FieldContainer, 0, 0},  {&_swigt__p_osg__Attachment, _p_osg__AttachmentTo_p_osg__FieldContainer, 0, 0},  {&_swigt__p_osg__NodeCore, _p_osg__NodeCoreTo_p_osg__FieldContainer, 0, 0},  {&_swigt__p_osg__AttachmentContainer, _p_osg__AttachmentContainerTo_p_osg__FieldContainer, 0, 0},  {&_swigt__p_osg__FieldContainer, 0, 0, 0},  {&_swigt__p_osg__Geometry, _p_osg__GeometryTo_p_osg__FieldContainer, 0, 0},  {&_swigt__p_osg__Node, _p_osg__NodeTo_p_osg__FieldContainer, 0, 0},  {&_swigt__p_osg__PhysicsWorld, _p_osg__PhysicsWorldTo_p_osg__FieldContainer, 0, 0},  {&_swigt__p_osg__Image, _p_osg__ImageTo_p_osg__FieldContainer, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_osg__FieldContainerPtr[] = {  {&_swigt__p_osg__ParticleSystemPtr, _p_osg__ParticleSystemPtrTo_p_osg__FieldContainerPtr, 0, 0},  {&_swigt__p_osg__NodePtr, _p_osg__NodePtrTo_p_osg__FieldContainerPtr, 0, 0},  {&_swigt__p_osg__CameraPtr, _p_osg__CameraPtrTo_p_osg__FieldContainerPtr, 0, 0},  {&_swigt__p_osg__ViewportPtr, _p_osg__ViewportPtrTo_p_osg__FieldContainerPtr, 0, 0},  {&_swigt__p_osg__ComponentPtr, _p_osg__ComponentPtrTo_p_osg__FieldContainerPtr, 0, 0},  {&_swigt__p_osg__NodeCorePtr, _p_osg__NodeCorePtrTo_p_osg__FieldContainerPtr, 0, 0},  {&_swigt__p_osg__AttachmentPtr, _p_osg__AttachmentPtrTo_p_osg__FieldContainerPtr, 0, 0},  {&_swigt__p_osg__AnimationPtr, _p_osg__AnimationPtrTo_p_osg__FieldContainerPtr, 0, 0},  {&_swigt__p_osg__ImagePtr, _p_osg__ImagePtrTo_p_osg__FieldContainerPtr, 0, 0},  {&_swigt__p_osg__PhysicsHandlerPtr, _p_osg__PhysicsHandlerPtrTo_p_osg__FieldContainerPtr, 0, 0},  {&_swigt__p_osg__PhysicsWorldPtr, _p_osg__PhysicsWorldPtrTo_p_osg__FieldContainerPtr, 0, 0},  {&_swigt__p_osg__GeometryPtr, _p_osg__GeometryPtrTo_p_osg__FieldContainerPtr, 0, 0},  {&_swigt__p_osg__PhysicsBodyPtr, _p_osg__PhysicsBodyPtrTo_p_osg__FieldContainerPtr, 0, 0},  {&_swigt__p_osg__WindowEventProducerPtr, _p_osg__WindowEventProducerPtrTo_p_osg__FieldContainerPtr, 0, 0},  {&_swigt__p_osg__WindowEventProducer, _p_osg__WindowEventProducerTo_p_osg__FieldContainerPtr, 0, 0},  {&_swigt__p_osg__SoundPtr, _p_osg__SoundPtrTo_p_osg__FieldContainerPtr, 0, 0},  {&_swigt__p_osg__FieldContainerPtr, 0, 0, 0},  {&_swigt__p_osg__AttachmentContainerPtr, _p_osg__AttachmentContainerPtrTo_p_osg__FieldContainerPtr, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_osg__FieldContainerType[] = {  {&_swigt__p_osg__FieldContainerType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_osg__KeyEvent[] = {  {&_swigt__p_osg__KeyEvent, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_osg__Line[] = {  {&_swigt__p_osg__Line, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_osg__Matrix[] = {  {&_swigt__p_osg__Matrix, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_osg__NodePtr[] = {  {&_swigt__p_osg__NodePtr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_osg__ParticleSystem[] = {  {&_swigt__p_osg__ParticleSystem, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_osg__ParticleSystemPtr[] = {  {&_swigt__p_osg__ParticleSystemPtr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_osg__PhysicsBody[] = {  {&_swigt__p_osg__PhysicsBody, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_osg__PhysicsBodyPtr[] = {  {&_swigt__p_osg__PhysicsBodyPtr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_osg__PhysicsHandler[] = {  {&_swigt__p_osg__PhysicsHandler, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_osg__PhysicsHandlerPtr[] = {  {&_swigt__p_osg__PhysicsHandlerPtr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_osg__PhysicsWorld[] = {  {&_swigt__p_osg__PhysicsWorld, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_osg__PhysicsWorldPtr[] = {  {&_swigt__p_osg__PhysicsWorldPtr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_osg__Pnt2f[] = {  {&_swigt__p_osg__Pnt2f, 0, 0, 0},  {&_swigt__p_osg__Vec2f, _p_osg__Vec2fTo_p_osg__Pnt2f, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_osg__Pnt3f[] = {  {&_swigt__p_osg__Pnt3f, 0, 0, 0},  {&_swigt__p_osg__Vec3f, _p_osg__Vec3fTo_p_osg__Pnt3f, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_osg__Sound[] = {  {&_swigt__p_osg__Sound, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_osg__SoundManager[] = {  {&_swigt__p_osg__SoundManager, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_osg__SoundPtr[] = {  {&_swigt__p_osg__SoundPtr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_osg__Vec2f[] = {  {&_swigt__p_osg__Vec2f, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_osg__Vec3f[] = {  {&_swigt__p_osg__Vec3f, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_osg__ViewportPtr[] = {  {&_swigt__p_osg__ViewportPtr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_osg__WindowEventProducer[] = {  {&_swigt__p_osg__WindowEventProducer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_osg__WindowEventProducerPtr[] = {  {&_swigt__p_osg__WindowEventProducerPtr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_signed_char[] = {  {&_swigt__p_signed_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_size_type[] = {  {&_swigt__p_size_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__mapT_std__string_unsigned_int_t[] = {  {&_swigt__p_std__mapT_std__string_unsigned_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_unsigned_int_t[] = {  {&_swigt__p_std__vectorT_unsigned_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_char[] = {  {&_swigt__p_unsigned_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_int[] = {  {&_swigt__p_unsigned_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_long[] = {  {&_swigt__p_unsigned_long, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_Inherited,
  _swigc__p_MatrixType,
  _swigc__p_ObjectType,
  _swigc__p_PointType,
  _swigc__p_PointType3f,
  _swigc__p_QuaternionType,
  _swigc__p_StoredObjectType,
  _swigc__p_ValueType,
  _swigc__p_VectorType,
  _swigc__p_VectorType3f,
  _swigc__p_char,
  _swigc__p_difference_type,
  _swigc__p_double,
  _swigc__p_float,
  _swigc__p_int,
  _swigc__p_key_type,
  _swigc__p_long,
  _swigc__p_long_double,
  _swigc__p_mapped_type,
  _swigc__p_osg__Animation,
  _swigc__p_osg__AnimationPtr,
  _swigc__p_osg__Attachment,
  _swigc__p_osg__AttachmentContainer,
  _swigc__p_osg__AttachmentContainerPtr,
  _swigc__p_osg__AttachmentPtr,
  _swigc__p_osg__Camera,
  _swigc__p_osg__CameraPtr,
  _swigc__p_osg__Color4f,
  _swigc__p_osg__Component,
  _swigc__p_osg__ComponentPtr,
  _swigc__p_osg__Field,
  _swigc__p_osg__FieldContainer,
  _swigc__p_osg__FieldContainerPtr,
  _swigc__p_osg__FieldContainerType,
  _swigc__p_osg__Geometry,
  _swigc__p_osg__GeometryPtr,
  _swigc__p_osg__Image,
  _swigc__p_osg__ImagePtr,
  _swigc__p_osg__KeyEvent,
  _swigc__p_osg__Line,
  _swigc__p_osg__Matrix,
  _swigc__p_osg__Node,
  _swigc__p_osg__NodeCore,
  _swigc__p_osg__NodeCorePtr,
  _swigc__p_osg__NodePtr,
  _swigc__p_osg__ParticleSystem,
  _swigc__p_osg__ParticleSystemPtr,
  _swigc__p_osg__PhysicsBody,
  _swigc__p_osg__PhysicsBodyPtr,
  _swigc__p_osg__PhysicsHandler,
  _swigc__p_osg__PhysicsHandlerPtr,
  _swigc__p_osg__PhysicsWorld,
  _swigc__p_osg__PhysicsWorldPtr,
  _swigc__p_osg__Pnt2f,
  _swigc__p_osg__Pnt3f,
  _swigc__p_osg__Sound,
  _swigc__p_osg__SoundManager,
  _swigc__p_osg__SoundPtr,
  _swigc__p_osg__Vec2f,
  _swigc__p_osg__Vec3f,
  _swigc__p_osg__Viewport,
  _swigc__p_osg__ViewportPtr,
  _swigc__p_osg__WindowEventProducer,
  _swigc__p_osg__WindowEventProducerPtr,
  _swigc__p_signed_char,
  _swigc__p_size_type,
  _swigc__p_std__mapT_std__string_unsigned_int_t,
  _swigc__p_std__vectorT_unsigned_int_t,
  _swigc__p_unsigned_char,
  _swigc__p_unsigned_int,
  _swigc__p_unsigned_long,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic 
 * memory is used. Also, since swig_type_info structures store pointers to 
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization. 
 * The idea is that swig generates all the structures that are needed. 
 * The runtime then collects these partially filled structures. 
 * The SWIG_InitializeModule function takes these initial arrays out of 
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned staticly to an initial 
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it 
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded. 
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the 
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int found, init;

  clientdata = clientdata;

  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }

  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
    module_head = &swig_module;
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    found=0;
    iter=module_head;
    do {
      if (iter==&swig_module) {
        found=1;
        break;
      }
      iter=iter->next;
    } while (iter!= module_head);

    /* if the is found in the list, then all is done and we may leave */
    if (found) return;
    /* otherwise we must add out module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }

  /* When multiple interpeters are used, a module could have already been initialized in
     a different interpreter, but not yet have a pointer in this interpreter.
     In this case, we do not want to continue adding types... everything should be
     set up already */
  if (init == 0) return;

  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %d\n", swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;
  
#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
#endif

    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
	type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }

    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {
    
      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
	if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
	if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
	  printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
	  cast->type = ret;
	  ret = 0;
	} else {
	  /* Check for casting already in the list */
	  swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
	  if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
	  if (!ocast) ret = 0;
	}
      }

      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
	printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;

#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
  printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;

  if (init_run) return;
  init_run = 1;

  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
            SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{ /* c-mode */
#endif
}
#endif



/* Forward declaration of where the user's %init{} gets inserted */
void SWIG_init_user(lua_State* L );
    
#ifdef __cplusplus
extern "C" {
#endif
/* this is the initialization function
  added at the very end of the code
  the function is always called SWIG_init, but an eariler #define will rename it
*/
SWIGEXPORT int SWIG_init(lua_State* L)
{
  int i;
  /* start with global table */
  lua_pushvalue(L,LUA_GLOBALSINDEX);
  /* SWIG's internal initalisation */
  SWIG_InitializeModule((void*)L);
  SWIG_PropagateClientData();
  /* add a global fn */
  SWIG_Lua_add_function(L,"swig_type",SWIG_Lua_type);
  SWIG_Lua_add_function(L,"swig_equals",SWIG_Lua_equal);
  /* begin the module (its a table with the same name as the module) */
  SWIG_Lua_module_begin(L,SWIG_name);
  /* add commands/functions */
  for (i = 0; swig_commands[i].name; i++){
    SWIG_Lua_module_add_function(L,swig_commands[i].name,swig_commands[i].func);
  }
  /* add variables */
  for (i = 0; swig_variables[i].name; i++){
    SWIG_Lua_module_add_variable(L,swig_variables[i].name,swig_variables[i].get,swig_variables[i].set);
  }
  /* set up base class pointers (the hierachy) */
  for (i = 0; swig_types[i]; i++){
    if (swig_types[i]->clientdata){
      SWIG_Lua_init_base_class(L,(swig_lua_class*)(swig_types[i]->clientdata));
    }
  }
  /* additional registration structs & classes in lua */
  for (i = 0; swig_types[i]; i++){
    if (swig_types[i]->clientdata){
      SWIG_Lua_class_register(L,(swig_lua_class*)(swig_types[i]->clientdata));
    }
  }
  /* constants */
  SWIG_Lua_InstallConstants(L,swig_constants);
  /* invoke user-specific initialization */
  SWIG_init_user(L);
  /* end module */
  lua_pop(L,1);  /* tidy stack (remove module table)*/
  lua_pop(L,1);  /* tidy stack (remove global table)*/
  return 1;
}

#ifdef __cplusplus
}
#endif


const char* SWIG_LUACODE=
  "";

void SWIG_init_user(lua_State* L)
{
  /* exec Lua code if applicable */
  SWIG_Lua_dostring(L,SWIG_LUACODE);
}

#include "OSGToolbox_wrap.h"
#include <boost/bind.hpp>
osg::LuaManager::OpenBoundLuaLibFunctor getOSGToolboxLuaBindingsLibFunctor(void)
{
    return boost::bind(&luaopen_OSGToolbox, _1);
}
