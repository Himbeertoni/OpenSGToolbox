/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGLUA


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif


/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.
  
  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/* 
   Flags/methods for returning states.
   
   The SWIG conversion methods, as ConvertPtr, return and integer 
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).
   
   Use the following macros/flags to set or process the returning
   states.
   
   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }
    
   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {         
        if (<obj is ok>) {			       
          if (<need new object>) {		       
            *ptr = <ptr to new allocated object>; 
            return SWIG_NEWOBJ;		       
          } else {				       
            *ptr = <ptr to old object>;	       
            return SWIG_OLDOBJ;		       
          } 				       
        } else {				       
          return SWIG_BADOBJ;		       
        }					       
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call
 
      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0) 
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)  

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) { 
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) { 
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0; 
}
#else /* no cast-rank mode */
#  define SWIG_AddCast
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/* 
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCompare(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}


/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/* 
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/* 
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/* 
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;
  
  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }    
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}
  
/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start, 
                            swig_module_info *end, 
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      register size_t l = 0;
      register size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	register size_t i = (l + r) >> 1; 
	const char *iname = iter->types[i]->name;
	if (iname) {
	  register int compare = strcmp(name, iname);
	  if (compare == 0) {	    
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start, 
                     swig_module_info *end, 
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      register size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }
  
  /* neither found a match */
  return 0;
}

/* 
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  register const unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    register unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/* 
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  register unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    register char d = *(c++);
    register unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    else 
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    else 
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/* 
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------
 * See the LICENSE file for information on copyright, usage and redistribution
 * of SWIG, and the README file for authors - http://www.swig.org/release.html.
 *
 * luarun.swg
 *
 * This file contains the runtime support for Lua modules
 * and includes code for managing global variables and pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

#include "lua.h"
#include "lauxlib.h"
#include <stdlib.h>  /* for malloc */
#include <assert.h>  /* for a few sanity tests */

/* -----------------------------------------------------------------------------
 * global swig types
 * ----------------------------------------------------------------------------- */
/* Constant table */
#define SWIG_LUA_INT     1
#define SWIG_LUA_FLOAT   2
#define SWIG_LUA_STRING  3
#define SWIG_LUA_POINTER 4
#define SWIG_LUA_BINARY  5
#define SWIG_LUA_CHAR    6

/* Structure for variable linking table */
typedef struct {
  const char *name;
  lua_CFunction get;
  lua_CFunction set;
} swig_lua_var_info;

/* Constant information structure */
typedef struct {
    int type;
    char *name;
    long lvalue;
    double dvalue;
    void   *pvalue;
    swig_type_info **ptype;
} swig_lua_const_info;

typedef struct {
  const char     *name;
  lua_CFunction   method;
} swig_lua_method;

typedef struct {
  const char     *name;
  lua_CFunction   getmethod;
  lua_CFunction   setmethod;
} swig_lua_attribute;

typedef struct swig_lua_class {
  const char    *name;
  swig_type_info   **type;
  lua_CFunction  constructor;
  void    (*destructor)(void *);
  swig_lua_method   *methods;
  swig_lua_attribute     *attributes;
  struct swig_lua_class **bases;
  const char **base_names;
} swig_lua_class;

/* this is the struct for wrappering all pointers in SwigLua
*/
typedef struct {
  swig_type_info   *type;
  int     own;  /* 1 if owned & must be destroyed */
  void        *ptr;
} swig_lua_userdata;

/* this is the struct for wrapping arbitary packed binary data
(currently it is only used for member function pointers)
the data ordering is similar to swig_lua_userdata, but it is currently not possible
to tell the two structures apart within Swig, other than by looking at the type
*/
typedef struct {
  swig_type_info   *type;
  int     own;  /* 1 if owned & must be destroyed */
  char data[1];       /* arbitary amount of data */    
} swig_lua_rawdata;

/* Common SWIG API */
#define SWIG_NewPointerObj(L, ptr, type, owner)       SWIG_Lua_NewPointerObj(L, (void *)ptr, type, owner)
#define SWIG_ConvertPtr(L,idx, ptr, type, flags)    SWIG_Lua_ConvertPtr(L,idx,ptr,type,flags)
#define SWIG_MustGetPtr(L,idx, type,flags, argnum,fnname)  SWIG_Lua_MustGetPtr(L,idx, type,flags, argnum,fnname)
/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(L, idx, ptr, sz, ty)       SWIG_Lua_ConvertPacked(L, idx, ptr, sz, ty)
#define SWIG_NewMemberObj(L, ptr, sz, type)      SWIG_Lua_NewPackedObj(L, ptr, sz, type)

/* Runtime API */
#define SWIG_GetModule(clientdata) SWIG_Lua_GetModule((lua_State*)(clientdata))
#define SWIG_SetModule(clientdata, pointer) SWIG_Lua_SetModule((lua_State*) (clientdata), pointer)
#define SWIG_MODULE_CLIENTDATA_TYPE lua_State*

/* Contract support */
#define SWIG_contract_assert(expr, msg)  \
  if (!(expr)) { lua_pushstring(L, (char *) msg); goto fail; } else

/* helper #defines */
#define SWIG_fail {goto fail;}
#define SWIG_fail_arg(func_name,argnum,type) \
  {lua_pushfstring(L,"Error in %s (arg %d), expected '%s' got '%s'",\
  func_name,argnum,type,SWIG_Lua_typename(L,argnum));\
  goto fail;}
#define SWIG_fail_ptr(func_name,argnum,type) \
  SWIG_fail_arg(func_name,argnum,(type && type->str)?type->str:"void*")
#define SWIG_check_num_args(func_name,a,b) \
  if (lua_gettop(L)<a || lua_gettop(L)>b) \
  {lua_pushfstring(L,"Error in %s expected %d..%d args, got %d",func_name,a,b,lua_gettop(L));\
  goto fail;}


#define SWIG_Lua_get_table(L,n) \
  (lua_pushstring(L, n), lua_rawget(L,-2))

#define SWIG_Lua_add_function(L,n,f) \
  (lua_pushstring(L, n), \
      lua_pushcfunction(L, f), \
      lua_rawset(L,-3))

/* special helper for allowing 'nil' for usertypes */
#define SWIG_isptrtype(L,I) (lua_isuserdata(L,I) || lua_isnil(L,I))

#ifdef __cplusplus
/* Special helper for member function pointers 
it gets the address, casts it, then dereferences it */
//#define SWIG_mem_fn_as_voidptr(a)  (*((char**)&(a)))
#endif

/* storing/access of swig_module_info */
SWIGRUNTIME swig_module_info *
SWIG_Lua_GetModule(lua_State* L) {
  swig_module_info *ret = 0;
  lua_pushstring(L,"swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
  lua_rawget(L,LUA_REGISTRYINDEX);
  if (lua_islightuserdata(L,-1))
    ret=(swig_module_info*)lua_touserdata(L,-1);
  lua_pop(L,1);  /* tidy */
  return ret;
}

SWIGRUNTIME void
SWIG_Lua_SetModule(lua_State* L, swig_module_info *module) {
  /* add this all into the Lua registry: */
  lua_pushstring(L,"swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
  lua_pushlightuserdata(L,(void*)module);
  lua_rawset(L,LUA_REGISTRYINDEX);
}

/* -----------------------------------------------------------------------------
 * global variable support code: modules
 * ----------------------------------------------------------------------------- */

/* this function is called when trying to set an immutable.
default value is to print an error.
This can removed with a compile flag SWIGLUA_IGNORE_SET_IMMUTABLE */
SWIGINTERN int SWIG_Lua_set_immutable(lua_State* L)
{
/*  there should be 1 param passed in: the new value */
#ifndef SWIGLUA_IGNORE_SET_IMMUTABLE
  lua_pop(L,1);  /* remove it */
  lua_pushstring(L,"This variable is immutable");
  lua_error(L);
#endif
    return 0;   /* should not return anything */
}

/* the module.get method used for getting linked data */
SWIGINTERN int SWIG_Lua_module_get(lua_State* L)
{
/*  there should be 2 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  printf("SWIG_Lua_module_get %p(%s) '%s'\n",
   lua_topointer(L,1),lua_typename(L,lua_type(L,1)),
   lua_tostring(L,2));
*/
  /* get the metatable */
  assert(lua_istable(L,1));  /* just in case */
  lua_getmetatable(L,1);  /* get the metatable */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get");  /* get the .get table */
  lua_remove(L,3);  /* remove metatable */
  if (lua_istable(L,-1))
  {
    /* look for the key in the .get table */
    lua_pushvalue(L,2);  /* key */
    lua_rawget(L,-2);
    lua_remove(L,3);  /* remove .get */
    if (lua_iscfunction(L,-1))
    {  /* found it so call the fn & return its value */
      lua_call(L,0,1);
      return 1;
    }
    lua_pop(L,1);  /* remove the top */
  }
  lua_pop(L,1);  /* remove the .get */
  lua_pushnil(L);  /* return a nil */
    return 1;
}

/* the module.set method used for setting linked data */
SWIGINTERN int SWIG_Lua_module_set(lua_State* L)
{
/*  there should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
*/
  /* get the metatable */
  assert(lua_istable(L,1));  /* just in case */
  lua_getmetatable(L,1);  /* get the metatable */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".set");  /* get the .set table */
  lua_remove(L,4);  /* remove metatable */
  if (lua_istable(L,-1))
  {
    /* look for the key in the .set table */
    lua_pushvalue(L,2);  /* key */
    lua_rawget(L,-2);
    lua_remove(L,4);  /* remove .set */
    if (lua_iscfunction(L,-1))
    {  /* found it so call the fn & return its value */
      lua_pushvalue(L,3);  /* value */
      lua_call(L,1,0);
      return 0;
    }
  }
  lua_settop(L,3);  /* reset back to start */
  /* we now have the table, key & new value, so just set directly */
  lua_rawset(L,1);  /* add direct */
  return 0;
}

/* registering a module in lua */
SWIGINTERN void  SWIG_Lua_module_begin(lua_State* L,const char* name)
{
  assert(lua_istable(L,-1));  /* just in case */
  lua_pushstring(L,name);
  lua_newtable(L);   /* the table */
  /* add meta table */
  lua_newtable(L);    /* the meta table */
  SWIG_Lua_add_function(L,"__index",SWIG_Lua_module_get);
  SWIG_Lua_add_function(L,"__newindex",SWIG_Lua_module_set);
  lua_pushstring(L,".get");
  lua_newtable(L);    /* the .get table */
  lua_rawset(L,-3);  /* add .get into metatable */
  lua_pushstring(L,".set");
  lua_newtable(L);    /* the .set table */
  lua_rawset(L,-3);  /* add .set into metatable */
  lua_setmetatable(L,-2);  /* sets meta table in module */
  lua_rawset(L,-3);        /* add module into parent */
  SWIG_Lua_get_table(L,name);   /* get the table back out */
}

/* ending the register */
SWIGINTERN void  SWIG_Lua_module_end(lua_State* L)
{
  lua_pop(L,1);       /* tidy stack (remove module) */
}

/* adding a linked variable to the module */
SWIGINTERN void SWIG_Lua_module_add_variable(lua_State* L,const char* name,lua_CFunction getFn,lua_CFunction setFn)
{
  assert(lua_istable(L,-1));  /* just in case */
  lua_getmetatable(L,-1);  /* get the metatable */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));  /* should be a table: */
  SWIG_Lua_add_function(L,name,getFn);
  lua_pop(L,1);       /* tidy stack (remove table) */
  if (setFn)  /* if there is a set fn */
  {
    SWIG_Lua_get_table(L,".set"); /* find the .set table */
    assert(lua_istable(L,-1));  /* should be a table: */
    SWIG_Lua_add_function(L,name,setFn);
    lua_pop(L,1);       /* tidy stack (remove table) */
  }
  lua_pop(L,1);       /* tidy stack (remove meta) */
}

/* adding a function module */
SWIGINTERN void  SWIG_Lua_module_add_function(lua_State* L,const char* name,lua_CFunction fn)
{
  SWIG_Lua_add_function(L,name,fn);
}

/* -----------------------------------------------------------------------------
 * global variable support code: classes
 * ----------------------------------------------------------------------------- */

/* the class.get method, performs the lookup of class attributes */
SWIGINTERN int  SWIG_Lua_class_get(lua_State* L)
{
/*  there should be 2 params passed in
  (1) userdata (not the meta table)
  (2) string name of the attribute
*/
  assert(lua_isuserdata(L,-2));  /* just in case */
  lua_getmetatable(L,-2);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  /* look for the key in the .get table */
  lua_pushvalue(L,2);  /* key */
  lua_rawget(L,-2);
  lua_remove(L,-2); /* stack tidy, remove .get table */
  if (lua_iscfunction(L,-1))
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,1);  /* the userdata */
    lua_call(L,1,1);  /* 1 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* ok, so try the .fn table */
  SWIG_Lua_get_table(L,".fn"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  lua_pushvalue(L,2);  /* key */
  lua_rawget(L,-2);  /* look for the fn */
  lua_remove(L,-2); /* stack tidy, remove .fn table */
  if (lua_isfunction(L,-1)) /* note: if its a C function or lua function */
  {  /* found it so return the fn & let lua call it */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* NEW: looks for the __getitem() fn
  this is a user provided get fn */
  SWIG_Lua_get_table(L,"__getitem"); /* find the __getitem fn */
  if (lua_iscfunction(L,-1))  /* if its there */
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,1);  /* the userdata */
    lua_pushvalue(L,2);  /* the parameter */
    lua_call(L,2,1);  /* 2 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  return 0;  /* sorry not known */
}

/* the class.set method, performs the lookup of class attributes */
SWIGINTERN int  SWIG_Lua_class_set(lua_State* L)
{
/*  there should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
printf("SWIG_Lua_class_set %p(%s) '%s' %p(%s)\n",
      lua_topointer(L,1),lua_typename(L,lua_type(L,1)),
      lua_tostring(L,2),
      lua_topointer(L,3),lua_typename(L,lua_type(L,3)));*/

  assert(lua_isuserdata(L,1));  /* just in case */
  lua_getmetatable(L,1);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */

  SWIG_Lua_get_table(L,".set"); /* find the .set table */
  if (lua_istable(L,-1))
  {
    /* look for the key in the .set table */
    lua_pushvalue(L,2);  /* key */
    lua_rawget(L,-2);
    if (lua_iscfunction(L,-1))
    {  /* found it so call the fn & return its value */
      lua_pushvalue(L,1);  /* userdata */
      lua_pushvalue(L,3);  /* value */
      lua_call(L,2,0);
      return 0;
    }
    lua_pop(L,1);  /* remove the value */
  }
  lua_pop(L,1);  /* remove the value .set table */
  /* NEW: looks for the __setitem() fn
  this is a user provided set fn */
  SWIG_Lua_get_table(L,"__setitem"); /* find the fn */
  if (lua_iscfunction(L,-1))  /* if its there */
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,1);  /* the userdata */
    lua_pushvalue(L,2);  /* the parameter */
    lua_pushvalue(L,3);  /* the value */
    lua_call(L,3,0);  /* 3 values in ,0 out */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  return 0;
}

/* the class.destruct method called by the interpreter */
SWIGINTERN int  SWIG_Lua_class_destruct(lua_State* L)
{
/*  there should be 1 params passed in
  (1) userdata (not the meta table) */
  swig_lua_userdata* usr;
  swig_lua_class* clss;
  assert(lua_isuserdata(L,-1));  /* just in case */
  usr=(swig_lua_userdata*)lua_touserdata(L,-1);  /* get it */
  /* if must be destroyed & has a destructor */
  if (usr->own) /* if must be destroyed */
  {
    clss=(swig_lua_class*)usr->type->clientdata;  /* get the class */
    if (clss && clss->destructor)  /* there is a destroy fn */
    {
      clss->destructor(usr->ptr);  /* bye bye */
    }
  }
  return 0;
}

/* gets the swig class registry (or creates it) */
SWIGINTERN void  SWIG_Lua_get_class_registry(lua_State* L)
{
  /* add this all into the swig registry: */
  lua_pushstring(L,"SWIG");
  lua_rawget(L,LUA_REGISTRYINDEX);  /* get the registry */
  if (!lua_istable(L,-1))  /* not there */
  {  /* must be first time, so add it */
    lua_pop(L,1);  /* remove the result */
    lua_pushstring(L,"SWIG");
    lua_newtable(L);
    lua_rawset(L,LUA_REGISTRYINDEX);
    /* then get it */
    lua_pushstring(L,"SWIG");
    lua_rawget(L,LUA_REGISTRYINDEX);
  }
}

/* helper fn to get the classes metatable from the register */
SWIGINTERN void  SWIG_Lua_get_class_metatable(lua_State* L,const char* cname)
{
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,cname);  /* get the name */
  lua_rawget(L,-2);    /* get it */
  lua_remove(L,-2);    /* tidy up (remove registry) */
}

/* helper add a variable to a registered class */
SWIGINTERN void  SWIG_Lua_add_class_variable(lua_State* L,const char* name,lua_CFunction getFn,lua_CFunction setFn)
{
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_add_function(L,name,getFn);
  lua_pop(L,1);       /* tidy stack (remove table) */
  if (setFn)
  {
    SWIG_Lua_get_table(L,".set"); /* find the .set table */
    assert(lua_istable(L,-1));  /* just in case */
    SWIG_Lua_add_function(L,name,setFn);
    lua_pop(L,1);       /* tidy stack (remove table) */
  }
}

/* helper to recursively add class details (attributes & operations) */
SWIGINTERN void  SWIG_Lua_add_class_details(lua_State* L,swig_lua_class* clss)
{
  int i;
  /* call all the base classes first: we can then override these later: */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_add_class_details(L,clss->bases[i]);
  }
  /* add fns */
  for(i=0;clss->attributes[i].name;i++){
    SWIG_Lua_add_class_variable(L,clss->attributes[i].name,clss->attributes[i].getmethod,clss->attributes[i].setmethod);
  }
  /* add methods to the metatable */
  SWIG_Lua_get_table(L,".fn"); /* find the .fn table */
  assert(lua_istable(L,-1));  /* just in case */
  for(i=0;clss->methods[i].name;i++){
    SWIG_Lua_add_function(L,clss->methods[i].name,clss->methods[i].method);
  }
  lua_pop(L,1);       /* tidy stack (remove table) */
  /*   add operator overloads
    these look ANY method which start with "__" and assume they
    are operator overloads & add them to the metatable
    (this might mess up is someone defines a method __gc (the destructor)*/
  for(i=0;clss->methods[i].name;i++){
    if (clss->methods[i].name[0]=='_' && clss->methods[i].name[1]=='_'){
      SWIG_Lua_add_function(L,clss->methods[i].name,clss->methods[i].method);
    }
  }
}

/* set up the base classes pointers.
Each class structure has a list of pointers to the base class structures.
This function fills them.
It cannot be done at compile time, as this will not work with hireachies
spread over more than one swig file. 
Therefore it must be done at runtime, querying the SWIG type system.
*/
SWIGINTERN void SWIG_Lua_init_base_class(lua_State* L,swig_lua_class* clss)
{
  int i=0;
  swig_module_info* module=SWIG_GetModule(L);
  for(i=0;clss->base_names[i];i++)
  {
    if (clss->bases[i]==0) /* not found yet */
    {
      /* lookup and cache the base class */
      swig_type_info *info = SWIG_TypeQueryModule(module,module,clss->base_names[i]);
      if (info) clss->bases[i] = (swig_lua_class *) info->clientdata;
    }
  }	
}

/* performs the entire class registration process */
SWIGINTERN void  SWIG_Lua_class_register(lua_State* L,swig_lua_class* clss)
{
  /*  add its constructor to module with the name of the class
  so you can do MyClass(...) as well as new_MyClass(...)
  BUT only if a constructor is defined
  (this overcomes the problem of pure virtual classes without constructors)*/
  if (clss->constructor)
    SWIG_Lua_add_function(L,clss->name,clss->constructor);

  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->name);  /* get the name */
  lua_newtable(L);    /* create the metatable */
  /* add string of class name called ".type" */
  lua_pushstring(L,".type");
  lua_pushstring(L,clss->name);
  lua_rawset(L,-3);
  /* add a table called ".get" */
  lua_pushstring(L,".get");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".set" */
  lua_pushstring(L,".set");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".fn" */
  lua_pushstring(L,".fn");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add accessor fns for using the .get,.set&.fn */
  SWIG_Lua_add_function(L,"__index",SWIG_Lua_class_get);
  SWIG_Lua_add_function(L,"__newindex",SWIG_Lua_class_set);
  SWIG_Lua_add_function(L,"__gc",SWIG_Lua_class_destruct);
  /* add it */
  lua_rawset(L,-3);  /* metatable into registry */
  lua_pop(L,1);      /* tidy stack (remove registry) */

  SWIG_Lua_get_class_metatable(L,clss->name);
  SWIG_Lua_add_class_details(L,clss);  /* recursive adding of details (atts & ops) */
  lua_pop(L,1);      /* tidy stack (remove class metatable) */
}

/* -----------------------------------------------------------------------------
 * Class/structure conversion fns
 * ----------------------------------------------------------------------------- */

/* helper to add metatable to new lua object */
SWIGINTERN void _SWIG_Lua_AddMetatable(lua_State* L,swig_type_info *type)
{
  if (type->clientdata)  /* there is clientdata: so add the metatable */
  {
    SWIG_Lua_get_class_metatable(L,((swig_lua_class*)(type->clientdata))->name);
    if (lua_istable(L,-1))
    {
      lua_setmetatable(L,-2);
    }
    else
    {
      lua_pop(L,1);
    }
  }
}

/* pushes a new object into the lua stack */
SWIGRUNTIME void SWIG_Lua_NewPointerObj(lua_State* L,void* ptr,swig_type_info *type, int own)
{
  swig_lua_userdata* usr;
  if (!ptr){
    lua_pushnil(L);
    return;
  }
  usr=(swig_lua_userdata*)lua_newuserdata(L,sizeof(swig_lua_userdata));  /* get data */
  usr->ptr=ptr;  /* set the ptr */
  usr->type=type;
  usr->own=own;
  _SWIG_Lua_AddMetatable(L,type); /* add metatable */
}

/* takes a object from the lua stack & converts it into an object of the correct type
 (if possible) */
SWIGRUNTIME int  SWIG_Lua_ConvertPtr(lua_State* L,int index,void** ptr,swig_type_info *type,int flags)
{
  swig_lua_userdata* usr;
  swig_cast_info *cast;
  if (lua_isnil(L,index)){*ptr=0; return SWIG_OK;}    /* special case: lua nil => NULL pointer */
  usr=(swig_lua_userdata*)lua_touserdata(L,index);  /* get data */
  if (usr)
  {
    if (flags & SWIG_POINTER_DISOWN) /* must disown the object */
    {
        usr->own=0;
    }
    if (!type)            /* special cast void*, no casting fn */
    {
      *ptr=usr->ptr;
      return SWIG_OK; /* ok */
    }
    cast=SWIG_TypeCheckStruct(usr->type,type); /* performs normal type checking */
    if (cast)
    {
      int newmemory = 0;
      *ptr=SWIG_TypeCast(cast,usr->ptr,&newmemory);
      assert(!newmemory); /* newmemory handling not yet implemented */
      return SWIG_OK;  /* ok */
    }
  }
  return SWIG_ERROR;  /* error */
}

SWIGRUNTIME void* SWIG_Lua_MustGetPtr(lua_State* L,int index,swig_type_info *type,int flags,
       int argnum,const char* func_name){
  void* result;
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,index,&result,type,flags))){
    lua_pushfstring(L,"Error in %s, expected a %s at argument number %d\n",
      func_name,(type && type->str)?type->str:"void*",argnum);
    lua_error(L);
  }
  return result;
}

/* pushes a packed userdata. user for member fn pointers only */
SWIGRUNTIME void SWIG_Lua_NewPackedObj(lua_State* L,void* ptr,size_t size,swig_type_info *type)
{
  swig_lua_rawdata* raw;
  assert(ptr); /* not acceptable to pass in a NULL value */
  raw=(swig_lua_rawdata*)lua_newuserdata(L,sizeof(swig_lua_rawdata)-1+size);  /* alloc data */
  raw->type=type;
  raw->own=0;
  memcpy(raw->data,ptr,size); /* copy the data */
  _SWIG_Lua_AddMetatable(L,type); /* add metatable */
}
    
/* converts a packed userdata. user for member fn pointers only */
SWIGRUNTIME int  SWIG_Lua_ConvertPacked(lua_State* L,int index,void* ptr,size_t size,swig_type_info *type)
{
  swig_lua_rawdata* raw;
  raw=(swig_lua_rawdata*)lua_touserdata(L,index);  /* get data */
  if (!raw) return SWIG_ERROR;  /* error */
  if (type==0 || type==raw->type) /* void* or identical type */
  {
    memcpy(ptr,raw->data,size); /* copy it */
    return SWIG_OK; /* ok */
  }
  return SWIG_ERROR;  /* error */
}

/* a function to get the typestring of a piece of data */
SWIGRUNTIME const char *SWIG_Lua_typename(lua_State *L, int tp)
{
  swig_lua_userdata* usr;
  if (lua_isuserdata(L,tp))
  {
    usr=(swig_lua_userdata*)lua_touserdata(L,1);  /* get data */
    if (usr && usr->type && usr->type->str)
      return usr->type->str;
    return "userdata (unknown type)";
  }
  return lua_typename(L,lua_type(L,tp));
}

/* lua callable function to get the userdata's type */
SWIGRUNTIME int SWIG_Lua_type(lua_State* L)
{
  lua_pushstring(L,SWIG_Lua_typename(L,1));
  return 1;
}

/* lua callable function to compare userdata's value
the issue is that two userdata may point to the same thing
but to lua, they are different objects */
SWIGRUNTIME int SWIG_Lua_equal(lua_State* L)
{
  int result;
  swig_lua_userdata *usr1,*usr2;
  if (!lua_isuserdata(L,1) || !lua_isuserdata(L,2))  /* just in case */
    return 0;  /* nil reply */
  usr1=(swig_lua_userdata*)lua_touserdata(L,1);  /* get data */
  usr2=(swig_lua_userdata*)lua_touserdata(L,2);  /* get data */
  /*result=(usr1->ptr==usr2->ptr && usr1->type==usr2->type); only works if type is the same*/
  result=(usr1->ptr==usr2->ptr);
   lua_pushboolean(L,result);
  return 1;
}

/* -----------------------------------------------------------------------------
 * global variable support code: class/struct typemap functions
 * ----------------------------------------------------------------------------- */

/* Install Constants */
SWIGINTERN void
SWIG_Lua_InstallConstants(lua_State* L, swig_lua_const_info constants[]) {
  int i;
  for (i = 0; constants[i].type; i++) {
    switch(constants[i].type) {
    case SWIG_LUA_INT:
      lua_pushstring(L,constants[i].name);
      lua_pushnumber(L,(lua_Number)constants[i].lvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_FLOAT:
      lua_pushstring(L,constants[i].name);
      lua_pushnumber(L,(lua_Number)constants[i].dvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_CHAR:
      lua_pushstring(L,constants[i].name);
      lua_pushfstring(L,"%c",(char)constants[i].lvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_STRING:
      lua_pushstring(L,constants[i].name);
      lua_pushstring(L,(char *) constants[i].pvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_POINTER:
      lua_pushstring(L,constants[i].name);
      SWIG_NewPointerObj(L,constants[i].pvalue, *(constants[i]).ptype,0);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_BINARY:
      lua_pushstring(L,constants[i].name);
      SWIG_NewMemberObj(L,constants[i].pvalue,constants[i].lvalue,*(constants[i]).ptype);
      lua_rawset(L,-3);
      break;
    default:
      break;
    }
  }
}

/* -----------------------------------------------------------------------------
 * executing lua code from within the wrapper
 * ----------------------------------------------------------------------------- */

#ifndef SWIG_DOSTRING_FAIL /* Allows redefining of error function */
#define SWIG_DOSTRING_FAIL(S) fprintf(stderr,"%s\n",S)
#endif
/* Executes a C string in Lua a really simple way of calling lua from C
Unfortunately lua keeps changing its API's, so we need a conditional compile
In lua 5.0.X its lua_dostring()
In lua 5.1.X its luaL_dostring()
*/
SWIGINTERN int 
SWIG_Lua_dostring(lua_State *L, const char* str) {
  int ok,top;
  if (str==0 || str[0]==0) return 0; /* nothing to do */
  top=lua_gettop(L); /* save stack */
#if (defined(LUA_VERSION_NUM) && (LUA_VERSION_NUM>=501))
  ok=luaL_dostring(L,str);	/* looks like this is lua 5.1.X or later, good */
#else
  ok=lua_dostring(L,str);	/* might be lua 5.0.x, using lua_dostring */
#endif
  if (ok!=0) {
    SWIG_DOSTRING_FAIL(lua_tostring(L,-1));
  }
  lua_settop(L,top); /* restore the stack */
  return ok;
}    

#ifdef __cplusplus
}
#endif

/* ------------------------------ end luarun.swg  ------------------------------ */


/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_Inherited swig_types[0]
#define SWIGTYPE_p_MatrixType swig_types[1]
#define SWIGTYPE_p_ObjectType swig_types[2]
#define SWIGTYPE_p_PointType swig_types[3]
#define SWIGTYPE_p_PointType3f swig_types[4]
#define SWIGTYPE_p_QuaternionBaseT_float_t swig_types[5]
#define SWIGTYPE_p_QuaternionType swig_types[6]
#define SWIGTYPE_p_RealReturnType swig_types[7]
#define SWIGTYPE_p_StoredObjectType swig_types[8]
#define SWIGTYPE_p_ValueType swig_types[9]
#define SWIGTYPE_p_VectorType swig_types[10]
#define SWIGTYPE_p_VectorType3f swig_types[11]
#define SWIGTYPE_p_char swig_types[12]
#define SWIGTYPE_p_double swig_types[13]
#define SWIGTYPE_p_float swig_types[14]
#define SWIGTYPE_p_int swig_types[15]
#define SWIGTYPE_p_int16_t swig_types[16]
#define SWIGTYPE_p_int8_t swig_types[17]
#define SWIGTYPE_p_long swig_types[18]
#define SWIGTYPE_p_long_double swig_types[19]
#define SWIGTYPE_p_osg__Attachment swig_types[20]
#define SWIGTYPE_p_osg__Color3T_float_t swig_types[21]
#define SWIGTYPE_p_osg__Color4T_float_t swig_types[22]
#define SWIGTYPE_p_osg__DataType swig_types[23]
#define SWIGTYPE_p_osg__Field swig_types[24]
#define SWIGTYPE_p_osg__FieldContainer swig_types[25]
#define SWIGTYPE_p_osg__FieldContainerFactory swig_types[26]
#define SWIGTYPE_p_osg__FieldContainerPtr swig_types[27]
#define SWIGTYPE_p_osg__FieldContainerType swig_types[28]
#define SWIGTYPE_p_osg__FieldDescription swig_types[29]
#define SWIGTYPE_p_osg__FieldFactory swig_types[30]
#define SWIGTYPE_p_osg__FieldType swig_types[31]
#define SWIGTYPE_p_osg__PointT_float_2_t swig_types[32]
#define SWIGTYPE_p_osg__PointT_float_3_t swig_types[33]
#define SWIGTYPE_p_osg__PointT_float_4_t swig_types[34]
#define SWIGTYPE_p_osg__QuaternionBaseT_float_t swig_types[35]
#define SWIGTYPE_p_osg__TransformationMatrixT_float_t swig_types[36]
#define SWIGTYPE_p_osg__TypeBase swig_types[37]
#define SWIGTYPE_p_osg__TypeFactory swig_types[38]
#define SWIGTYPE_p_osg__VectorT_float_2_t swig_types[39]
#define SWIGTYPE_p_osg__VectorT_float_3_t swig_types[40]
#define SWIGTYPE_p_osg__VectorT_float_4_t swig_types[41]
#define SWIGTYPE_p_signed_char swig_types[42]
#define SWIGTYPE_p_std__string swig_types[43]
#define SWIGTYPE_p_uint16_t swig_types[44]
#define SWIGTYPE_p_uint8_t swig_types[45]
#define SWIGTYPE_p_unsigned_char swig_types[46]
#define SWIGTYPE_p_unsigned_int swig_types[47]
#define SWIGTYPE_p_unsigned_long swig_types[48]
static swig_type_info *swig_types[50];
static swig_module_info swig_module = {swig_types, 49, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#define SWIG_name      "OSG"
#define SWIG_init      luaopen_OSG
#define SWIG_init_user luaopen_OSG_user

#define SWIG_LUACODE   luaopen_OSG_luacode


namespace swig {
typedef struct{} LANGUAGE_OBJ;
}


#include <OpenSG/OSGConfig.h>
#include <OpenSG/OSGBaseFunctions.h>
#include <OpenSG/OSGColor.h>
#include <OpenSG/OSGVector.h>
#include <OpenSG/OSGMatrix.h>
#include <OpenSG/OSGQuaternion.h>
#include <OpenSG/OSGTypeBase.h>
#include <OpenSG/OSGDataType.h>
#include <OpenSG/OSGTypeFactory.h>
#include <OpenSG/OSGFieldType.h>
#include <OpenSG/OSGField.h>
#include <OpenSG/OSGFieldFactory.h>
    int OSGVersion(lua_State*L) // my native code
    {
      int SWIG_arg = 0;
      std::string result(OSG_VERSION_STRING);
      SWIG_check_num_args("version",0,0);
      
      lua_pushstring(L,result.c_str()); SWIG_arg++;
      return SWIG_arg;
      
      if(0) SWIG_fail;
      
    fail:
      lua_error(L);
      return SWIG_arg;
    }


#include <OpenSG/OSGFieldContainerType.h>
#include <OpenSG/OSGFieldContainerPtr.h>
#include <OpenSG/OSGFieldContainer.h>
#include <OpenSG/OSGFieldDescription.h>
#include <OpenSG/OSGBaseTypes.h>
#include <OpenSG/OSGAttachment.h>
#include <OpenSG/OSGAttachmentPtr.h>
#include <OpenSG/OSGAttachmentContainer.h>
#include <OpenSG/OSGNode.h>
#include <OpenSG/OSGNodePtr.h>
#include <OpenSG/OSGMatrix.h>

#ifdef __cplusplus
extern "C" {
#endif
static int _wrap_Color3f_convertFromHSV(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = (float *) 0 ;
  osg::Real32 arg2 ;
  osg::Real32 arg3 ;
  osg::Real32 arg4 ;
  
  SWIG_check_num_args("osg::Color3<(osg::Real32)>::convertFromHSV",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("osg::Color3<(osg::Real32)>::convertFromHSV",1,"float *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("osg::Color3<(osg::Real32)>::convertFromHSV",2,"osg::Real32 const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("osg::Color3<(osg::Real32)>::convertFromHSV",3,"osg::Real32 const");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("osg::Color3<(osg::Real32)>::convertFromHSV",4,"osg::Real32 const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("Color3f_convertFromHSV",1,SWIGTYPE_p_float);
  }
  
  arg2 = (osg::Real32 const)lua_tonumber(L, 2);
  arg3 = (osg::Real32 const)lua_tonumber(L, 3);
  arg4 = (osg::Real32 const)lua_tonumber(L, 4);
  osg::Color3< osg::Real32 >::SWIGTEMPLATEDISAMBIGUATOR convertFromHSV(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Color3f_convertToHSV(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = (float *) 0 ;
  osg::Real32 *arg2 = 0 ;
  osg::Real32 *arg3 = 0 ;
  osg::Real32 *arg4 = 0 ;
  
  SWIG_check_num_args("osg::Color3<(osg::Real32)>::convertToHSV",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("osg::Color3<(osg::Real32)>::convertToHSV",1,"float const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("osg::Color3<(osg::Real32)>::convertToHSV",2,"osg::Real32 &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("osg::Color3<(osg::Real32)>::convertToHSV",3,"osg::Real32 &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("osg::Color3<(osg::Real32)>::convertToHSV",4,"osg::Real32 &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("Color3f_convertToHSV",1,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("Color3f_convertToHSV",2,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("Color3f_convertToHSV",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("Color3f_convertToHSV",4,SWIGTYPE_p_float);
  }
  
  osg::Color3< osg::Real32 >::SWIGTEMPLATEDISAMBIGUATOR convertToHSV((float const *)arg1,*arg2,*arg3,*arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Color3f_minPart(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = (float *) 0 ;
  osg::UInt32 result;
  
  SWIG_check_num_args("osg::Color3<(osg::Real32)>::minPart",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("osg::Color3<(osg::Real32)>::minPart",1,"float const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("Color3f_minPart",1,SWIGTYPE_p_float);
  }
  
  result = (osg::UInt32)osg::Color3< osg::Real32 >::SWIGTEMPLATEDISAMBIGUATOR minPart((float const *)arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Color3f_maxPart(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = (float *) 0 ;
  osg::UInt32 result;
  
  SWIG_check_num_args("osg::Color3<(osg::Real32)>::maxPart",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("osg::Color3<(osg::Real32)>::maxPart",1,"float const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("Color3f_maxPart",1,SWIGTYPE_p_float);
  }
  
  result = (osg::UInt32)osg::Color3< osg::Real32 >::SWIGTEMPLATEDISAMBIGUATOR maxPart((float const *)arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Color3f__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  osg::Color3< osg::Real32 > *result = 0 ;
  
  SWIG_check_num_args("osg::Color3<(osg::Real32)>",0,0)
  result = (osg::Color3< osg::Real32 > *)new osg::Color3< osg::Real32 >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_osg__Color3T_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Color3f__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  osg::Color3< osg::Real32 > *arg1 = 0 ;
  osg::Color3< osg::Real32 > *result = 0 ;
  
  SWIG_check_num_args("osg::Color3<(osg::Real32)>",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("osg::Color3<(osg::Real32)>",1,"osg::Color3< osg::Real32 > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__Color3T_float_t,0))){
    SWIG_fail_ptr("new_Color3f",1,SWIGTYPE_p_osg__Color3T_float_t);
  }
  
  result = (osg::Color3< osg::Real32 > *)new osg::Color3< osg::Real32 >((osg::Color3< osg::Real32 > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_osg__Color3T_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Color3f__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  osg::Color3< osg::Real32 > *result = 0 ;
  
  SWIG_check_num_args("osg::Color3<(osg::Real32)>",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("osg::Color3<(osg::Real32)>",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("osg::Color3<(osg::Real32)>",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("osg::Color3<(osg::Real32)>",3,"float");
  arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  result = (osg::Color3< osg::Real32 > *)new osg::Color3< osg::Real32 >(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_osg__Color3T_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Color3f(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Color3f__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_osg__Color3T_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Color3f__SWIG_1(L);
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_Color3f__SWIG_2(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_Color3f'\n"
    "  Possible C/C++ prototypes are:\n"
    "    osg::Color3< osg::Real32 >()\n"
    "    osg::Color3< osg::Real32 >(osg::Color3< osg::Real32 > const &)\n"
    "    osg::Color3< osg::Real32 >(float,float,float)\n");
  lua_error(L);return 0;
}


static int _wrap_Color3f_clear(lua_State* L) {
  int SWIG_arg = 0;
  osg::Color3< osg::Real32 > *arg1 = (osg::Color3< osg::Real32 > *) 0 ;
  
  SWIG_check_num_args("clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("clear",1,"osg::Color3< osg::Real32 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__Color3T_float_t,0))){
    SWIG_fail_ptr("Color3f_clear",1,SWIGTYPE_p_osg__Color3T_float_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Color3f_setValuesRGB(lua_State* L) {
  int SWIG_arg = 0;
  osg::Color3< osg::Real32 > *arg1 = (osg::Color3< osg::Real32 > *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  SWIG_check_num_args("setValuesRGB",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setValuesRGB",1,"osg::Color3< osg::Real32 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("setValuesRGB",2,"float const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("setValuesRGB",3,"float const");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("setValuesRGB",4,"float const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__Color3T_float_t,0))){
    SWIG_fail_ptr("Color3f_setValuesRGB",1,SWIGTYPE_p_osg__Color3T_float_t);
  }
  
  arg2 = (float const)lua_tonumber(L, 2);
  arg3 = (float const)lua_tonumber(L, 3);
  arg4 = (float const)lua_tonumber(L, 4);
  (arg1)->setValuesRGB(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Color3f_setValuesHSV(lua_State* L) {
  int SWIG_arg = 0;
  osg::Color3< osg::Real32 > *arg1 = (osg::Color3< osg::Real32 > *) 0 ;
  osg::Real32 arg2 ;
  osg::Real32 arg3 ;
  osg::Real32 arg4 ;
  
  SWIG_check_num_args("setValuesHSV",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setValuesHSV",1,"osg::Color3< osg::Real32 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("setValuesHSV",2,"osg::Real32 const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("setValuesHSV",3,"osg::Real32 const");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("setValuesHSV",4,"osg::Real32 const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__Color3T_float_t,0))){
    SWIG_fail_ptr("Color3f_setValuesHSV",1,SWIGTYPE_p_osg__Color3T_float_t);
  }
  
  arg2 = (osg::Real32 const)lua_tonumber(L, 2);
  arg3 = (osg::Real32 const)lua_tonumber(L, 3);
  arg4 = (osg::Real32 const)lua_tonumber(L, 4);
  (arg1)->setValuesHSV(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Color3f_setRandom(lua_State* L) {
  int SWIG_arg = 0;
  osg::Color3< osg::Real32 > *arg1 = (osg::Color3< osg::Real32 > *) 0 ;
  
  SWIG_check_num_args("setRandom",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setRandom",1,"osg::Color3< osg::Real32 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__Color3T_float_t,0))){
    SWIG_fail_ptr("Color3f_setRandom",1,SWIGTYPE_p_osg__Color3T_float_t);
  }
  
  (arg1)->setRandom();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Color3f_setRGB(lua_State* L) {
  int SWIG_arg = 0;
  osg::Color3< osg::Real32 > *arg1 = (osg::Color3< osg::Real32 > *) 0 ;
  osg::UInt32 arg2 ;
  
  SWIG_check_num_args("setRGB",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setRGB",1,"osg::Color3< osg::Real32 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("setRGB",2,"osg::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__Color3T_float_t,0))){
    SWIG_fail_ptr("Color3f_setRGB",1,SWIGTYPE_p_osg__Color3T_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (osg::UInt32)lua_tonumber(L, 2);
  (arg1)->setRGB(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Color3f_setValue(lua_State* L) {
  int SWIG_arg = 0;
  osg::Color3< osg::Real32 > *arg1 = (osg::Color3< osg::Real32 > *) 0 ;
  osg::Char8 *arg2 = (osg::Char8 *) 0 ;
  
  SWIG_check_num_args("setValue",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setValue",1,"osg::Color3< osg::Real32 > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("setValue",2,"osg::Char8 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__Color3T_float_t,0))){
    SWIG_fail_ptr("Color3f_setValue",1,SWIGTYPE_p_osg__Color3T_float_t);
  }
  
  arg2 = (osg::Char8 *)lua_tostring(L, 2);
  (arg1)->setValue(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Color3f_getRGB(lua_State* L) {
  int SWIG_arg = 0;
  osg::Color3< osg::Real32 > *arg1 = (osg::Color3< osg::Real32 > *) 0 ;
  osg::UInt32 result;
  
  SWIG_check_num_args("getRGB",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getRGB",1,"osg::Color3< osg::Real32 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__Color3T_float_t,0))){
    SWIG_fail_ptr("Color3f_getRGB",1,SWIGTYPE_p_osg__Color3T_float_t);
  }
  
  result = (osg::UInt32)((osg::Color3< osg::Real32 > const *)arg1)->getRGB();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Color3f_getValuesRGB__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  osg::Color3< osg::Real32 > *arg1 = (osg::Color3< osg::Real32 > *) 0 ;
  float *arg2 = 0 ;
  float *arg3 = 0 ;
  float *arg4 = 0 ;
  
  SWIG_check_num_args("getValuesRGB",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getValuesRGB",1,"osg::Color3< osg::Real32 > const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("getValuesRGB",2,"float &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("getValuesRGB",3,"float &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("getValuesRGB",4,"float &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__Color3T_float_t,0))){
    SWIG_fail_ptr("Color3f_getValuesRGB",1,SWIGTYPE_p_osg__Color3T_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("Color3f_getValuesRGB",2,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("Color3f_getValuesRGB",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("Color3f_getValuesRGB",4,SWIGTYPE_p_float);
  }
  
  ((osg::Color3< osg::Real32 > const *)arg1)->getValuesRGB(*arg2,*arg3,*arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Color3f_getValuesHSV(lua_State* L) {
  int SWIG_arg = 0;
  osg::Color3< osg::Real32 > *arg1 = (osg::Color3< osg::Real32 > *) 0 ;
  osg::Real32 *arg2 = 0 ;
  osg::Real32 *arg3 = 0 ;
  osg::Real32 *arg4 = 0 ;
  
  SWIG_check_num_args("getValuesHSV",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getValuesHSV",1,"osg::Color3< osg::Real32 > const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("getValuesHSV",2,"osg::Real32 &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("getValuesHSV",3,"osg::Real32 &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("getValuesHSV",4,"osg::Real32 &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__Color3T_float_t,0))){
    SWIG_fail_ptr("Color3f_getValuesHSV",1,SWIGTYPE_p_osg__Color3T_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("Color3f_getValuesHSV",2,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("Color3f_getValuesHSV",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("Color3f_getValuesHSV",4,SWIGTYPE_p_float);
  }
  
  ((osg::Color3< osg::Real32 > const *)arg1)->getValuesHSV(*arg2,*arg3,*arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Color3f_red(lua_State* L) {
  int SWIG_arg = 0;
  osg::Color3< osg::Real32 > *arg1 = (osg::Color3< osg::Real32 > *) 0 ;
  float result;
  
  SWIG_check_num_args("red",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("red",1,"osg::Color3< osg::Real32 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__Color3T_float_t,0))){
    SWIG_fail_ptr("Color3f_red",1,SWIGTYPE_p_osg__Color3T_float_t);
  }
  
  result = (float)((osg::Color3< osg::Real32 > const *)arg1)->red();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Color3f_green(lua_State* L) {
  int SWIG_arg = 0;
  osg::Color3< osg::Real32 > *arg1 = (osg::Color3< osg::Real32 > *) 0 ;
  float result;
  
  SWIG_check_num_args("green",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("green",1,"osg::Color3< osg::Real32 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__Color3T_float_t,0))){
    SWIG_fail_ptr("Color3f_green",1,SWIGTYPE_p_osg__Color3T_float_t);
  }
  
  result = (float)((osg::Color3< osg::Real32 > const *)arg1)->green();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Color3f_blue(lua_State* L) {
  int SWIG_arg = 0;
  osg::Color3< osg::Real32 > *arg1 = (osg::Color3< osg::Real32 > *) 0 ;
  float result;
  
  SWIG_check_num_args("blue",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("blue",1,"osg::Color3< osg::Real32 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__Color3T_float_t,0))){
    SWIG_fail_ptr("Color3f_blue",1,SWIGTYPE_p_osg__Color3T_float_t);
  }
  
  result = (float)((osg::Color3< osg::Real32 > const *)arg1)->blue();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Color3f_getValuesRGB__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  osg::Color3< osg::Real32 > *arg1 = (osg::Color3< osg::Real32 > *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("getValuesRGB",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getValuesRGB",1,"osg::Color3< osg::Real32 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__Color3T_float_t,0))){
    SWIG_fail_ptr("Color3f_getValuesRGB",1,SWIGTYPE_p_osg__Color3T_float_t);
  }
  
  result = (float *)(arg1)->getValuesRGB();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Color3f_getValuesRGB__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  osg::Color3< osg::Real32 > *arg1 = (osg::Color3< osg::Real32 > *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("getValuesRGB",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getValuesRGB",1,"osg::Color3< osg::Real32 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__Color3T_float_t,0))){
    SWIG_fail_ptr("Color3f_getValuesRGB",1,SWIGTYPE_p_osg__Color3T_float_t);
  }
  
  result = (float *)((osg::Color3< osg::Real32 > const *)arg1)->getValuesRGB();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Color3f_getValuesRGB(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_osg__Color3T_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Color3f_getValuesRGB__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_osg__Color3T_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Color3f_getValuesRGB__SWIG_2(L);
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_osg__Color3T_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_Color3f_getValuesRGB__SWIG_0(L);
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'Color3f_getValuesRGB'\n"
    "  Possible C/C++ prototypes are:\n"
    "    getValuesRGB(osg::Color3< osg::Real32 > const *,float &,float &,float &)\n"
    "    getValuesRGB(osg::Color3< osg::Real32 > *)\n"
    "    getValuesRGB(osg::Color3< osg::Real32 > const *)\n");
  lua_error(L);return 0;
}


static int _wrap_Color3f___mul__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  osg::Color3< osg::Real32 > *arg1 = (osg::Color3< osg::Real32 > *) 0 ;
  float arg2 ;
  osg::Color3< osg::Real32 > result;
  
  SWIG_check_num_args("operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("operator *",1,"osg::Color3< osg::Real32 > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("operator *",2,"float const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__Color3T_float_t,0))){
    SWIG_fail_ptr("Color3f___mul",1,SWIGTYPE_p_osg__Color3T_float_t);
  }
  
  arg2 = (float const)lua_tonumber(L, 2);
  result = ((osg::Color3< osg::Real32 > const *)arg1)->operator *(arg2);
  {
    osg::Color3< osg::Real32 > * resultptr = new osg::Color3< osg::Real32 >((const osg::Color3< osg::Real32 > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_osg__Color3T_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Color3f___div__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  osg::Color3< osg::Real32 > *arg1 = (osg::Color3< osg::Real32 > *) 0 ;
  float arg2 ;
  osg::Color3< osg::Real32 > result;
  
  SWIG_check_num_args("operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("operator /",1,"osg::Color3< osg::Real32 > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("operator /",2,"float const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__Color3T_float_t,0))){
    SWIG_fail_ptr("Color3f___div",1,SWIGTYPE_p_osg__Color3T_float_t);
  }
  
  arg2 = (float const)lua_tonumber(L, 2);
  result = ((osg::Color3< osg::Real32 > const *)arg1)->operator /(arg2);
  {
    osg::Color3< osg::Real32 > * resultptr = new osg::Color3< osg::Real32 >((const osg::Color3< osg::Real32 > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_osg__Color3T_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Color3f___add__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  osg::Color3< osg::Real32 > *arg1 = (osg::Color3< osg::Real32 > *) 0 ;
  float arg2 ;
  osg::Color3< osg::Real32 > result;
  
  SWIG_check_num_args("operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("operator +",1,"osg::Color3< osg::Real32 > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("operator +",2,"float const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__Color3T_float_t,0))){
    SWIG_fail_ptr("Color3f___add",1,SWIGTYPE_p_osg__Color3T_float_t);
  }
  
  arg2 = (float const)lua_tonumber(L, 2);
  result = ((osg::Color3< osg::Real32 > const *)arg1)->operator +(arg2);
  {
    osg::Color3< osg::Real32 > * resultptr = new osg::Color3< osg::Real32 >((const osg::Color3< osg::Real32 > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_osg__Color3T_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Color3f___sub__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  osg::Color3< osg::Real32 > *arg1 = (osg::Color3< osg::Real32 > *) 0 ;
  float arg2 ;
  osg::Color3< osg::Real32 > result;
  
  SWIG_check_num_args("operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("operator -",1,"osg::Color3< osg::Real32 > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("operator -",2,"float const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__Color3T_float_t,0))){
    SWIG_fail_ptr("Color3f___sub",1,SWIGTYPE_p_osg__Color3T_float_t);
  }
  
  arg2 = (float const)lua_tonumber(L, 2);
  result = ((osg::Color3< osg::Real32 > const *)arg1)->operator -(arg2);
  {
    osg::Color3< osg::Real32 > * resultptr = new osg::Color3< osg::Real32 >((const osg::Color3< osg::Real32 > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_osg__Color3T_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Color3f___mul__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  osg::Color3< osg::Real32 > *arg1 = (osg::Color3< osg::Real32 > *) 0 ;
  osg::Color3< osg::Real32 > *arg2 = 0 ;
  osg::Color3< osg::Real32 > result;
  
  SWIG_check_num_args("operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("operator *",1,"osg::Color3< osg::Real32 > const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("operator *",2,"osg::Color3< osg::Real32 > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__Color3T_float_t,0))){
    SWIG_fail_ptr("Color3f___mul",1,SWIGTYPE_p_osg__Color3T_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__Color3T_float_t,0))){
    SWIG_fail_ptr("Color3f___mul",2,SWIGTYPE_p_osg__Color3T_float_t);
  }
  
  result = ((osg::Color3< osg::Real32 > const *)arg1)->operator *((osg::Color3< osg::Real32 > const &)*arg2);
  {
    osg::Color3< osg::Real32 > * resultptr = new osg::Color3< osg::Real32 >((const osg::Color3< osg::Real32 > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_osg__Color3T_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Color3f___mul(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_osg__Color3T_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_osg__Color3T_float_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Color3f___mul__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_osg__Color3T_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Color3f___mul__SWIG_0(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'Color3f___mul'\n"
    "  Possible C/C++ prototypes are:\n"
    "    operator *(osg::Color3< osg::Real32 > const *,float const)\n"
    "    operator *(osg::Color3< osg::Real32 > const *,osg::Color3< osg::Real32 > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Color3f___div__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  osg::Color3< osg::Real32 > *arg1 = (osg::Color3< osg::Real32 > *) 0 ;
  osg::Color3< osg::Real32 > *arg2 = 0 ;
  osg::Color3< osg::Real32 > result;
  
  SWIG_check_num_args("operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("operator /",1,"osg::Color3< osg::Real32 > const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("operator /",2,"osg::Color3< osg::Real32 > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__Color3T_float_t,0))){
    SWIG_fail_ptr("Color3f___div",1,SWIGTYPE_p_osg__Color3T_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__Color3T_float_t,0))){
    SWIG_fail_ptr("Color3f___div",2,SWIGTYPE_p_osg__Color3T_float_t);
  }
  
  result = ((osg::Color3< osg::Real32 > const *)arg1)->operator /((osg::Color3< osg::Real32 > const &)*arg2);
  {
    osg::Color3< osg::Real32 > * resultptr = new osg::Color3< osg::Real32 >((const osg::Color3< osg::Real32 > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_osg__Color3T_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Color3f___div(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_osg__Color3T_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_osg__Color3T_float_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Color3f___div__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_osg__Color3T_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Color3f___div__SWIG_0(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'Color3f___div'\n"
    "  Possible C/C++ prototypes are:\n"
    "    operator /(osg::Color3< osg::Real32 > const *,float const)\n"
    "    operator /(osg::Color3< osg::Real32 > const *,osg::Color3< osg::Real32 > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Color3f___add__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  osg::Color3< osg::Real32 > *arg1 = (osg::Color3< osg::Real32 > *) 0 ;
  osg::Color3< osg::Real32 > *arg2 = 0 ;
  osg::Color3< osg::Real32 > result;
  
  SWIG_check_num_args("operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("operator +",1,"osg::Color3< osg::Real32 > const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("operator +",2,"osg::Color3< osg::Real32 > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__Color3T_float_t,0))){
    SWIG_fail_ptr("Color3f___add",1,SWIGTYPE_p_osg__Color3T_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__Color3T_float_t,0))){
    SWIG_fail_ptr("Color3f___add",2,SWIGTYPE_p_osg__Color3T_float_t);
  }
  
  result = ((osg::Color3< osg::Real32 > const *)arg1)->operator +((osg::Color3< osg::Real32 > const &)*arg2);
  {
    osg::Color3< osg::Real32 > * resultptr = new osg::Color3< osg::Real32 >((const osg::Color3< osg::Real32 > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_osg__Color3T_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Color3f___add(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_osg__Color3T_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_osg__Color3T_float_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Color3f___add__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_osg__Color3T_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Color3f___add__SWIG_0(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'Color3f___add'\n"
    "  Possible C/C++ prototypes are:\n"
    "    operator +(osg::Color3< osg::Real32 > const *,float const)\n"
    "    operator +(osg::Color3< osg::Real32 > const *,osg::Color3< osg::Real32 > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Color3f___sub__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  osg::Color3< osg::Real32 > *arg1 = (osg::Color3< osg::Real32 > *) 0 ;
  osg::Color3< osg::Real32 > *arg2 = 0 ;
  osg::Color3< osg::Real32 > result;
  
  SWIG_check_num_args("operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("operator -",1,"osg::Color3< osg::Real32 > const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("operator -",2,"osg::Color3< osg::Real32 > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__Color3T_float_t,0))){
    SWIG_fail_ptr("Color3f___sub",1,SWIGTYPE_p_osg__Color3T_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__Color3T_float_t,0))){
    SWIG_fail_ptr("Color3f___sub",2,SWIGTYPE_p_osg__Color3T_float_t);
  }
  
  result = ((osg::Color3< osg::Real32 > const *)arg1)->operator -((osg::Color3< osg::Real32 > const &)*arg2);
  {
    osg::Color3< osg::Real32 > * resultptr = new osg::Color3< osg::Real32 >((const osg::Color3< osg::Real32 > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_osg__Color3T_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Color3f___sub(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_osg__Color3T_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_osg__Color3T_float_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Color3f___sub__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_osg__Color3T_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Color3f___sub__SWIG_0(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'Color3f___sub'\n"
    "  Possible C/C++ prototypes are:\n"
    "    operator -(osg::Color3< osg::Real32 > const *,float const)\n"
    "    operator -(osg::Color3< osg::Real32 > const *,osg::Color3< osg::Real32 > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Color3f_equals(lua_State* L) {
  int SWIG_arg = 0;
  osg::Color3< osg::Real32 > *arg1 = (osg::Color3< osg::Real32 > *) 0 ;
  osg::Color3< osg::Real32 > *arg2 = 0 ;
  float arg3 ;
  bool result;
  
  SWIG_check_num_args("equals",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("equals",1,"osg::Color3< osg::Real32 > const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("equals",2,"osg::Color3< osg::Real32 > const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("equals",3,"float const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__Color3T_float_t,0))){
    SWIG_fail_ptr("Color3f_equals",1,SWIGTYPE_p_osg__Color3T_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__Color3T_float_t,0))){
    SWIG_fail_ptr("Color3f_equals",2,SWIGTYPE_p_osg__Color3T_float_t);
  }
  
  arg3 = (float const)lua_tonumber(L, 3);
  result = (bool)((osg::Color3< osg::Real32 > const *)arg1)->equals((osg::Color3< osg::Real32 > const &)*arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Color3f___lt(lua_State* L) {
  int SWIG_arg = 0;
  osg::Color3< osg::Real32 > *arg1 = (osg::Color3< osg::Real32 > *) 0 ;
  osg::Color3< osg::Real32 > *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("operator <",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("operator <",1,"osg::Color3< osg::Real32 > const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("operator <",2,"osg::Color3< osg::Real32 > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__Color3T_float_t,0))){
    SWIG_fail_ptr("Color3f___lt",1,SWIGTYPE_p_osg__Color3T_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__Color3T_float_t,0))){
    SWIG_fail_ptr("Color3f___lt",2,SWIGTYPE_p_osg__Color3T_float_t);
  }
  
  result = (bool)((osg::Color3< osg::Real32 > const *)arg1)->operator <((osg::Color3< osg::Real32 > const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Color3f___eq(lua_State* L) {
  int SWIG_arg = 0;
  osg::Color3< osg::Real32 > *arg1 = (osg::Color3< osg::Real32 > *) 0 ;
  osg::Color3< osg::Real32 > *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("operator ==",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("operator ==",1,"osg::Color3< osg::Real32 > const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("operator ==",2,"osg::Color3< osg::Real32 > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__Color3T_float_t,0))){
    SWIG_fail_ptr("Color3f___eq",1,SWIGTYPE_p_osg__Color3T_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__Color3T_float_t,0))){
    SWIG_fail_ptr("Color3f___eq",2,SWIGTYPE_p_osg__Color3T_float_t);
  }
  
  result = (bool)((osg::Color3< osg::Real32 > const *)arg1)->operator ==((osg::Color3< osg::Real32 > const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Color3f(void *obj) {
osg::Color3< osg::Real32 > *arg1 = (osg::Color3< osg::Real32 > *) obj;
delete arg1;
}
static swig_lua_method swig_osg_Color3_Sl_osg_Real32_Sg__methods[] = {
    {"clear", _wrap_Color3f_clear}, 
    {"setValuesRGB", _wrap_Color3f_setValuesRGB}, 
    {"setValuesHSV", _wrap_Color3f_setValuesHSV}, 
    {"setRandom", _wrap_Color3f_setRandom}, 
    {"setRGB", _wrap_Color3f_setRGB}, 
    {"setValue", _wrap_Color3f_setValue}, 
    {"getRGB", _wrap_Color3f_getRGB}, 
    {"getValuesHSV", _wrap_Color3f_getValuesHSV}, 
    {"red", _wrap_Color3f_red}, 
    {"green", _wrap_Color3f_green}, 
    {"blue", _wrap_Color3f_blue}, 
    {"getValuesRGB", _wrap_Color3f_getValuesRGB}, 
    {"__mul", _wrap_Color3f___mul}, 
    {"__div", _wrap_Color3f___div}, 
    {"__add", _wrap_Color3f___add}, 
    {"__sub", _wrap_Color3f___sub}, 
    {"equals", _wrap_Color3f_equals}, 
    {"__lt", _wrap_Color3f___lt}, 
    {"__eq", _wrap_Color3f___eq}, 
    {0,0}
};
static swig_lua_attribute swig_osg_Color3_Sl_osg_Real32_Sg__attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_osg_Color3_Sl_osg_Real32_Sg__bases[] = {0};
static const char *swig_osg_Color3_Sl_osg_Real32_Sg__base_names[] = {0};
static swig_lua_class _wrap_class_osg_Color3_Sl_osg_Real32_Sg_ = { "Color3f", &SWIGTYPE_p_osg__Color3T_float_t,_wrap_new_Color3f, swig_delete_Color3f, swig_osg_Color3_Sl_osg_Real32_Sg__methods, swig_osg_Color3_Sl_osg_Real32_Sg__attributes, swig_osg_Color3_Sl_osg_Real32_Sg__bases, swig_osg_Color3_Sl_osg_Real32_Sg__base_names };

static int _wrap_new_Color4f__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  osg::Color4< osg::Real32 > *result = 0 ;
  
  SWIG_check_num_args("osg::Color4<(osg::Real32)>",0,0)
  result = (osg::Color4< osg::Real32 > *)new osg::Color4< osg::Real32 >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_osg__Color4T_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Color4f__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  osg::Color4< osg::Real32 > *arg1 = 0 ;
  osg::Color4< osg::Real32 > *result = 0 ;
  
  SWIG_check_num_args("osg::Color4<(osg::Real32)>",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("osg::Color4<(osg::Real32)>",1,"osg::Color4< osg::Real32 > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__Color4T_float_t,0))){
    SWIG_fail_ptr("new_Color4f",1,SWIGTYPE_p_osg__Color4T_float_t);
  }
  
  result = (osg::Color4< osg::Real32 > *)new osg::Color4< osg::Real32 >((osg::Color4< osg::Real32 > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_osg__Color4T_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Color4f__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  osg::Color4< float >::ValueType arg1 ;
  osg::Color4< float >::ValueType arg2 ;
  osg::Color4< float >::ValueType arg3 ;
  osg::Color4< float >::ValueType arg4 ;
  osg::Color4< osg::Real32 > *result = 0 ;
  
  SWIG_check_num_args("osg::Color4<(osg::Real32)>",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("osg::Color4<(osg::Real32)>",1,"osg::Color4< float >::ValueType const");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("osg::Color4<(osg::Real32)>",2,"osg::Color4< float >::ValueType const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("osg::Color4<(osg::Real32)>",3,"osg::Color4< float >::ValueType const");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("osg::Color4<(osg::Real32)>",4,"osg::Color4< float >::ValueType const");
  arg1 = (osg::Color4< float >::ValueType const)lua_tonumber(L, 1);
  arg2 = (osg::Color4< float >::ValueType const)lua_tonumber(L, 2);
  arg3 = (osg::Color4< float >::ValueType const)lua_tonumber(L, 3);
  arg4 = (osg::Color4< float >::ValueType const)lua_tonumber(L, 4);
  result = (osg::Color4< osg::Real32 > *)new osg::Color4< osg::Real32 >(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_osg__Color4T_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Color4f(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Color4f__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_osg__Color4T_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Color4f__SWIG_1(L);
    }
  }
  if (argc == 4) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_Color4f__SWIG_2(L);
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_Color4f'\n"
    "  Possible C/C++ prototypes are:\n"
    "    osg::Color4< osg::Real32 >()\n"
    "    osg::Color4< osg::Real32 >(osg::Color4< osg::Real32 > const &)\n"
    "    osg::Color4< osg::Real32 >(osg::Color4< float >::ValueType const,osg::Color4< float >::ValueType const,osg::Color4< float >::ValueType const,osg::Color4< float >::ValueType const)\n");
  lua_error(L);return 0;
}


static int _wrap_Color4f_clear(lua_State* L) {
  int SWIG_arg = 0;
  osg::Color4< osg::Real32 > *arg1 = (osg::Color4< osg::Real32 > *) 0 ;
  
  SWIG_check_num_args("clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("clear",1,"osg::Color4< osg::Real32 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__Color4T_float_t,0))){
    SWIG_fail_ptr("Color4f_clear",1,SWIGTYPE_p_osg__Color4T_float_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Color4f_setValuesRGBA(lua_State* L) {
  int SWIG_arg = 0;
  osg::Color4< osg::Real32 > *arg1 = (osg::Color4< osg::Real32 > *) 0 ;
  osg::Color4< float >::ValueType arg2 ;
  osg::Color4< float >::ValueType arg3 ;
  osg::Color4< float >::ValueType arg4 ;
  osg::Color4< float >::ValueType arg5 ;
  
  SWIG_check_num_args("setValuesRGBA",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setValuesRGBA",1,"osg::Color4< osg::Real32 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("setValuesRGBA",2,"osg::Color4< float >::ValueType const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("setValuesRGBA",3,"osg::Color4< float >::ValueType const");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("setValuesRGBA",4,"osg::Color4< float >::ValueType const");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("setValuesRGBA",5,"osg::Color4< float >::ValueType const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__Color4T_float_t,0))){
    SWIG_fail_ptr("Color4f_setValuesRGBA",1,SWIGTYPE_p_osg__Color4T_float_t);
  }
  
  arg2 = (osg::Color4< float >::ValueType const)lua_tonumber(L, 2);
  arg3 = (osg::Color4< float >::ValueType const)lua_tonumber(L, 3);
  arg4 = (osg::Color4< float >::ValueType const)lua_tonumber(L, 4);
  arg5 = (osg::Color4< float >::ValueType const)lua_tonumber(L, 5);
  (arg1)->setValuesRGBA(arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Color4f_setValuesHSV(lua_State* L) {
  int SWIG_arg = 0;
  osg::Color4< osg::Real32 > *arg1 = (osg::Color4< osg::Real32 > *) 0 ;
  osg::Real32 arg2 ;
  osg::Real32 arg3 ;
  osg::Real32 arg4 ;
  
  SWIG_check_num_args("setValuesHSV",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setValuesHSV",1,"osg::Color4< osg::Real32 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("setValuesHSV",2,"osg::Real32 const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("setValuesHSV",3,"osg::Real32 const");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("setValuesHSV",4,"osg::Real32 const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__Color4T_float_t,0))){
    SWIG_fail_ptr("Color4f_setValuesHSV",1,SWIGTYPE_p_osg__Color4T_float_t);
  }
  
  arg2 = (osg::Real32 const)lua_tonumber(L, 2);
  arg3 = (osg::Real32 const)lua_tonumber(L, 3);
  arg4 = (osg::Real32 const)lua_tonumber(L, 4);
  (arg1)->setValuesHSV(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Color4f_setRandom(lua_State* L) {
  int SWIG_arg = 0;
  osg::Color4< osg::Real32 > *arg1 = (osg::Color4< osg::Real32 > *) 0 ;
  
  SWIG_check_num_args("setRandom",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setRandom",1,"osg::Color4< osg::Real32 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__Color4T_float_t,0))){
    SWIG_fail_ptr("Color4f_setRandom",1,SWIGTYPE_p_osg__Color4T_float_t);
  }
  
  (arg1)->setRandom();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Color4f_setRGBA(lua_State* L) {
  int SWIG_arg = 0;
  osg::Color4< osg::Real32 > *arg1 = (osg::Color4< osg::Real32 > *) 0 ;
  osg::UInt32 arg2 ;
  
  SWIG_check_num_args("setRGBA",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setRGBA",1,"osg::Color4< osg::Real32 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("setRGBA",2,"osg::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__Color4T_float_t,0))){
    SWIG_fail_ptr("Color4f_setRGBA",1,SWIGTYPE_p_osg__Color4T_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (osg::UInt32)lua_tonumber(L, 2);
  (arg1)->setRGBA(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Color4f_setValue(lua_State* L) {
  int SWIG_arg = 0;
  osg::Color4< osg::Real32 > *arg1 = (osg::Color4< osg::Real32 > *) 0 ;
  osg::Char8 *arg2 = (osg::Char8 *) 0 ;
  
  SWIG_check_num_args("setValue",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setValue",1,"osg::Color4< osg::Real32 > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("setValue",2,"osg::Char8 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__Color4T_float_t,0))){
    SWIG_fail_ptr("Color4f_setValue",1,SWIGTYPE_p_osg__Color4T_float_t);
  }
  
  arg2 = (osg::Char8 *)lua_tostring(L, 2);
  (arg1)->setValue(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Color4f_getRGBA(lua_State* L) {
  int SWIG_arg = 0;
  osg::Color4< osg::Real32 > *arg1 = (osg::Color4< osg::Real32 > *) 0 ;
  osg::UInt32 result;
  
  SWIG_check_num_args("getRGBA",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getRGBA",1,"osg::Color4< osg::Real32 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__Color4T_float_t,0))){
    SWIG_fail_ptr("Color4f_getRGBA",1,SWIGTYPE_p_osg__Color4T_float_t);
  }
  
  result = (osg::UInt32)((osg::Color4< osg::Real32 > const *)arg1)->getRGBA();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Color4f_getValuesRGBA__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  osg::Color4< osg::Real32 > *arg1 = (osg::Color4< osg::Real32 > *) 0 ;
  osg::Color4< float >::ValueType *arg2 = 0 ;
  osg::Color4< float >::ValueType *arg3 = 0 ;
  osg::Color4< float >::ValueType *arg4 = 0 ;
  osg::Color4< float >::ValueType *arg5 = 0 ;
  
  SWIG_check_num_args("getValuesRGBA",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getValuesRGBA",1,"osg::Color4< osg::Real32 > const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("getValuesRGBA",2,"osg::Color4< float >::ValueType &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("getValuesRGBA",3,"osg::Color4< float >::ValueType &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("getValuesRGBA",4,"osg::Color4< float >::ValueType &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("getValuesRGBA",5,"osg::Color4< float >::ValueType &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__Color4T_float_t,0))){
    SWIG_fail_ptr("Color4f_getValuesRGBA",1,SWIGTYPE_p_osg__Color4T_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("Color4f_getValuesRGBA",2,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("Color4f_getValuesRGBA",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("Color4f_getValuesRGBA",4,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("Color4f_getValuesRGBA",5,SWIGTYPE_p_float);
  }
  
  ((osg::Color4< osg::Real32 > const *)arg1)->getValuesRGBA(*arg2,*arg3,*arg4,*arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Color4f_getValuesHSV(lua_State* L) {
  int SWIG_arg = 0;
  osg::Color4< osg::Real32 > *arg1 = (osg::Color4< osg::Real32 > *) 0 ;
  osg::Real32 *arg2 = 0 ;
  osg::Real32 *arg3 = 0 ;
  osg::Real32 *arg4 = 0 ;
  
  SWIG_check_num_args("getValuesHSV",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getValuesHSV",1,"osg::Color4< osg::Real32 > const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("getValuesHSV",2,"osg::Real32 &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("getValuesHSV",3,"osg::Real32 &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("getValuesHSV",4,"osg::Real32 &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__Color4T_float_t,0))){
    SWIG_fail_ptr("Color4f_getValuesHSV",1,SWIGTYPE_p_osg__Color4T_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("Color4f_getValuesHSV",2,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("Color4f_getValuesHSV",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("Color4f_getValuesHSV",4,SWIGTYPE_p_float);
  }
  
  ((osg::Color4< osg::Real32 > const *)arg1)->getValuesHSV(*arg2,*arg3,*arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Color4f_red(lua_State* L) {
  int SWIG_arg = 0;
  osg::Color4< osg::Real32 > *arg1 = (osg::Color4< osg::Real32 > *) 0 ;
  osg::Color4< float >::ValueType result;
  
  SWIG_check_num_args("red",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("red",1,"osg::Color4< osg::Real32 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__Color4T_float_t,0))){
    SWIG_fail_ptr("Color4f_red",1,SWIGTYPE_p_osg__Color4T_float_t);
  }
  
  result = (osg::Color4< float >::ValueType)((osg::Color4< osg::Real32 > const *)arg1)->red();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Color4f_green(lua_State* L) {
  int SWIG_arg = 0;
  osg::Color4< osg::Real32 > *arg1 = (osg::Color4< osg::Real32 > *) 0 ;
  osg::Color4< float >::ValueType result;
  
  SWIG_check_num_args("green",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("green",1,"osg::Color4< osg::Real32 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__Color4T_float_t,0))){
    SWIG_fail_ptr("Color4f_green",1,SWIGTYPE_p_osg__Color4T_float_t);
  }
  
  result = (osg::Color4< float >::ValueType)((osg::Color4< osg::Real32 > const *)arg1)->green();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Color4f_blue(lua_State* L) {
  int SWIG_arg = 0;
  osg::Color4< osg::Real32 > *arg1 = (osg::Color4< osg::Real32 > *) 0 ;
  osg::Color4< float >::ValueType result;
  
  SWIG_check_num_args("blue",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("blue",1,"osg::Color4< osg::Real32 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__Color4T_float_t,0))){
    SWIG_fail_ptr("Color4f_blue",1,SWIGTYPE_p_osg__Color4T_float_t);
  }
  
  result = (osg::Color4< float >::ValueType)((osg::Color4< osg::Real32 > const *)arg1)->blue();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Color4f_alpha(lua_State* L) {
  int SWIG_arg = 0;
  osg::Color4< osg::Real32 > *arg1 = (osg::Color4< osg::Real32 > *) 0 ;
  osg::Color4< float >::ValueType result;
  
  SWIG_check_num_args("alpha",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("alpha",1,"osg::Color4< osg::Real32 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__Color4T_float_t,0))){
    SWIG_fail_ptr("Color4f_alpha",1,SWIGTYPE_p_osg__Color4T_float_t);
  }
  
  result = (osg::Color4< float >::ValueType)((osg::Color4< osg::Real32 > const *)arg1)->alpha();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Color4f_getValuesRGBA__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  osg::Color4< osg::Real32 > *arg1 = (osg::Color4< osg::Real32 > *) 0 ;
  osg::Color4< float >::ValueType *result = 0 ;
  
  SWIG_check_num_args("getValuesRGBA",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getValuesRGBA",1,"osg::Color4< osg::Real32 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__Color4T_float_t,0))){
    SWIG_fail_ptr("Color4f_getValuesRGBA",1,SWIGTYPE_p_osg__Color4T_float_t);
  }
  
  result = (osg::Color4< float >::ValueType *)(arg1)->getValuesRGBA();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Color4f_getValuesRGBA(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_osg__Color4T_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Color4f_getValuesRGBA__SWIG_1(L);
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_osg__Color4T_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_float, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_Color4f_getValuesRGBA__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'Color4f_getValuesRGBA'\n"
    "  Possible C/C++ prototypes are:\n"
    "    getValuesRGBA(osg::Color4< osg::Real32 > const *,osg::Color4< float >::ValueType &,osg::Color4< float >::ValueType &,osg::Color4< float >::ValueType &,osg::Color4< float >::ValueType &)\n"
    "    getValuesRGBA(osg::Color4< osg::Real32 > *)\n");
  lua_error(L);return 0;
}


static int _wrap_Color4f___mul__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  osg::Color4< osg::Real32 > *arg1 = (osg::Color4< osg::Real32 > *) 0 ;
  osg::Color4< float >::ValueType arg2 ;
  osg::Color4< osg::Real32 > result;
  
  SWIG_check_num_args("operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("operator *",1,"osg::Color4< osg::Real32 > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("operator *",2,"osg::Color4< float >::ValueType const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__Color4T_float_t,0))){
    SWIG_fail_ptr("Color4f___mul",1,SWIGTYPE_p_osg__Color4T_float_t);
  }
  
  arg2 = (osg::Color4< float >::ValueType const)lua_tonumber(L, 2);
  result = ((osg::Color4< osg::Real32 > const *)arg1)->operator *(arg2);
  {
    osg::Color4< osg::Real32 > * resultptr = new osg::Color4< osg::Real32 >((const osg::Color4< osg::Real32 > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_osg__Color4T_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Color4f___div__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  osg::Color4< osg::Real32 > *arg1 = (osg::Color4< osg::Real32 > *) 0 ;
  osg::Color4< float >::ValueType arg2 ;
  osg::Color4< osg::Real32 > result;
  
  SWIG_check_num_args("operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("operator /",1,"osg::Color4< osg::Real32 > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("operator /",2,"osg::Color4< float >::ValueType const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__Color4T_float_t,0))){
    SWIG_fail_ptr("Color4f___div",1,SWIGTYPE_p_osg__Color4T_float_t);
  }
  
  arg2 = (osg::Color4< float >::ValueType const)lua_tonumber(L, 2);
  result = ((osg::Color4< osg::Real32 > const *)arg1)->operator /(arg2);
  {
    osg::Color4< osg::Real32 > * resultptr = new osg::Color4< osg::Real32 >((const osg::Color4< osg::Real32 > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_osg__Color4T_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Color4f___add__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  osg::Color4< osg::Real32 > *arg1 = (osg::Color4< osg::Real32 > *) 0 ;
  osg::Color4< float >::ValueType arg2 ;
  osg::Color4< osg::Real32 > result;
  
  SWIG_check_num_args("operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("operator +",1,"osg::Color4< osg::Real32 > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("operator +",2,"osg::Color4< float >::ValueType const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__Color4T_float_t,0))){
    SWIG_fail_ptr("Color4f___add",1,SWIGTYPE_p_osg__Color4T_float_t);
  }
  
  arg2 = (osg::Color4< float >::ValueType const)lua_tonumber(L, 2);
  result = ((osg::Color4< osg::Real32 > const *)arg1)->operator +(arg2);
  {
    osg::Color4< osg::Real32 > * resultptr = new osg::Color4< osg::Real32 >((const osg::Color4< osg::Real32 > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_osg__Color4T_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Color4f___sub__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  osg::Color4< osg::Real32 > *arg1 = (osg::Color4< osg::Real32 > *) 0 ;
  osg::Color4< float >::ValueType arg2 ;
  osg::Color4< osg::Real32 > result;
  
  SWIG_check_num_args("operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("operator -",1,"osg::Color4< osg::Real32 > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("operator -",2,"osg::Color4< float >::ValueType const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__Color4T_float_t,0))){
    SWIG_fail_ptr("Color4f___sub",1,SWIGTYPE_p_osg__Color4T_float_t);
  }
  
  arg2 = (osg::Color4< float >::ValueType const)lua_tonumber(L, 2);
  result = ((osg::Color4< osg::Real32 > const *)arg1)->operator -(arg2);
  {
    osg::Color4< osg::Real32 > * resultptr = new osg::Color4< osg::Real32 >((const osg::Color4< osg::Real32 > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_osg__Color4T_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Color4f___mul__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  osg::Color4< osg::Real32 > *arg1 = (osg::Color4< osg::Real32 > *) 0 ;
  osg::Color4< osg::Real32 > *arg2 = 0 ;
  osg::Color4< osg::Real32 > result;
  
  SWIG_check_num_args("operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("operator *",1,"osg::Color4< osg::Real32 > const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("operator *",2,"osg::Color4< osg::Real32 > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__Color4T_float_t,0))){
    SWIG_fail_ptr("Color4f___mul",1,SWIGTYPE_p_osg__Color4T_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__Color4T_float_t,0))){
    SWIG_fail_ptr("Color4f___mul",2,SWIGTYPE_p_osg__Color4T_float_t);
  }
  
  result = ((osg::Color4< osg::Real32 > const *)arg1)->operator *((osg::Color4< osg::Real32 > const &)*arg2);
  {
    osg::Color4< osg::Real32 > * resultptr = new osg::Color4< osg::Real32 >((const osg::Color4< osg::Real32 > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_osg__Color4T_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Color4f___mul(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_osg__Color4T_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_osg__Color4T_float_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Color4f___mul__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_osg__Color4T_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Color4f___mul__SWIG_0(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'Color4f___mul'\n"
    "  Possible C/C++ prototypes are:\n"
    "    operator *(osg::Color4< osg::Real32 > const *,osg::Color4< float >::ValueType const)\n"
    "    operator *(osg::Color4< osg::Real32 > const *,osg::Color4< osg::Real32 > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Color4f___div__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  osg::Color4< osg::Real32 > *arg1 = (osg::Color4< osg::Real32 > *) 0 ;
  osg::Color4< osg::Real32 > *arg2 = 0 ;
  osg::Color4< osg::Real32 > result;
  
  SWIG_check_num_args("operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("operator /",1,"osg::Color4< osg::Real32 > const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("operator /",2,"osg::Color4< osg::Real32 > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__Color4T_float_t,0))){
    SWIG_fail_ptr("Color4f___div",1,SWIGTYPE_p_osg__Color4T_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__Color4T_float_t,0))){
    SWIG_fail_ptr("Color4f___div",2,SWIGTYPE_p_osg__Color4T_float_t);
  }
  
  result = ((osg::Color4< osg::Real32 > const *)arg1)->operator /((osg::Color4< osg::Real32 > const &)*arg2);
  {
    osg::Color4< osg::Real32 > * resultptr = new osg::Color4< osg::Real32 >((const osg::Color4< osg::Real32 > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_osg__Color4T_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Color4f___div(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_osg__Color4T_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_osg__Color4T_float_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Color4f___div__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_osg__Color4T_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Color4f___div__SWIG_0(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'Color4f___div'\n"
    "  Possible C/C++ prototypes are:\n"
    "    operator /(osg::Color4< osg::Real32 > const *,osg::Color4< float >::ValueType const)\n"
    "    operator /(osg::Color4< osg::Real32 > const *,osg::Color4< osg::Real32 > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Color4f___add__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  osg::Color4< osg::Real32 > *arg1 = (osg::Color4< osg::Real32 > *) 0 ;
  osg::Color4< osg::Real32 > *arg2 = 0 ;
  osg::Color4< osg::Real32 > result;
  
  SWIG_check_num_args("operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("operator +",1,"osg::Color4< osg::Real32 > const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("operator +",2,"osg::Color4< osg::Real32 > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__Color4T_float_t,0))){
    SWIG_fail_ptr("Color4f___add",1,SWIGTYPE_p_osg__Color4T_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__Color4T_float_t,0))){
    SWIG_fail_ptr("Color4f___add",2,SWIGTYPE_p_osg__Color4T_float_t);
  }
  
  result = ((osg::Color4< osg::Real32 > const *)arg1)->operator +((osg::Color4< osg::Real32 > const &)*arg2);
  {
    osg::Color4< osg::Real32 > * resultptr = new osg::Color4< osg::Real32 >((const osg::Color4< osg::Real32 > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_osg__Color4T_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Color4f___add(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_osg__Color4T_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_osg__Color4T_float_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Color4f___add__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_osg__Color4T_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Color4f___add__SWIG_0(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'Color4f___add'\n"
    "  Possible C/C++ prototypes are:\n"
    "    operator +(osg::Color4< osg::Real32 > const *,osg::Color4< float >::ValueType const)\n"
    "    operator +(osg::Color4< osg::Real32 > const *,osg::Color4< osg::Real32 > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Color4f___sub__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  osg::Color4< osg::Real32 > *arg1 = (osg::Color4< osg::Real32 > *) 0 ;
  osg::Color4< osg::Real32 > *arg2 = 0 ;
  osg::Color4< osg::Real32 > result;
  
  SWIG_check_num_args("operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("operator -",1,"osg::Color4< osg::Real32 > const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("operator -",2,"osg::Color4< osg::Real32 > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__Color4T_float_t,0))){
    SWIG_fail_ptr("Color4f___sub",1,SWIGTYPE_p_osg__Color4T_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__Color4T_float_t,0))){
    SWIG_fail_ptr("Color4f___sub",2,SWIGTYPE_p_osg__Color4T_float_t);
  }
  
  result = ((osg::Color4< osg::Real32 > const *)arg1)->operator -((osg::Color4< osg::Real32 > const &)*arg2);
  {
    osg::Color4< osg::Real32 > * resultptr = new osg::Color4< osg::Real32 >((const osg::Color4< osg::Real32 > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_osg__Color4T_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Color4f___sub(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_osg__Color4T_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_osg__Color4T_float_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Color4f___sub__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_osg__Color4T_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Color4f___sub__SWIG_0(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'Color4f___sub'\n"
    "  Possible C/C++ prototypes are:\n"
    "    operator -(osg::Color4< osg::Real32 > const *,osg::Color4< float >::ValueType const)\n"
    "    operator -(osg::Color4< osg::Real32 > const *,osg::Color4< osg::Real32 > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Color4f_equals(lua_State* L) {
  int SWIG_arg = 0;
  osg::Color4< osg::Real32 > *arg1 = (osg::Color4< osg::Real32 > *) 0 ;
  osg::Color4< osg::Real32 > *arg2 = 0 ;
  osg::Color4< float >::ValueType arg3 ;
  bool result;
  
  SWIG_check_num_args("equals",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("equals",1,"osg::Color4< osg::Real32 > const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("equals",2,"osg::Color4< osg::Real32 > const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("equals",3,"osg::Color4< float >::ValueType const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__Color4T_float_t,0))){
    SWIG_fail_ptr("Color4f_equals",1,SWIGTYPE_p_osg__Color4T_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__Color4T_float_t,0))){
    SWIG_fail_ptr("Color4f_equals",2,SWIGTYPE_p_osg__Color4T_float_t);
  }
  
  arg3 = (osg::Color4< float >::ValueType const)lua_tonumber(L, 3);
  result = (bool)((osg::Color4< osg::Real32 > const *)arg1)->equals((osg::Color4< osg::Real32 > const &)*arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Color4f___lt(lua_State* L) {
  int SWIG_arg = 0;
  osg::Color4< osg::Real32 > *arg1 = (osg::Color4< osg::Real32 > *) 0 ;
  osg::Color4< osg::Real32 > *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("operator <",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("operator <",1,"osg::Color4< osg::Real32 > const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("operator <",2,"osg::Color4< osg::Real32 > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__Color4T_float_t,0))){
    SWIG_fail_ptr("Color4f___lt",1,SWIGTYPE_p_osg__Color4T_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__Color4T_float_t,0))){
    SWIG_fail_ptr("Color4f___lt",2,SWIGTYPE_p_osg__Color4T_float_t);
  }
  
  result = (bool)((osg::Color4< osg::Real32 > const *)arg1)->operator <((osg::Color4< osg::Real32 > const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Color4f___eq(lua_State* L) {
  int SWIG_arg = 0;
  osg::Color4< osg::Real32 > *arg1 = (osg::Color4< osg::Real32 > *) 0 ;
  osg::Color4< osg::Real32 > *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("operator ==",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("operator ==",1,"osg::Color4< osg::Real32 > const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("operator ==",2,"osg::Color4< osg::Real32 > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__Color4T_float_t,0))){
    SWIG_fail_ptr("Color4f___eq",1,SWIGTYPE_p_osg__Color4T_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__Color4T_float_t,0))){
    SWIG_fail_ptr("Color4f___eq",2,SWIGTYPE_p_osg__Color4T_float_t);
  }
  
  result = (bool)((osg::Color4< osg::Real32 > const *)arg1)->operator ==((osg::Color4< osg::Real32 > const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Color4f(void *obj) {
osg::Color4< osg::Real32 > *arg1 = (osg::Color4< osg::Real32 > *) obj;
delete arg1;
}
static swig_lua_method swig_osg_Color4_Sl_osg_Real32_Sg__methods[] = {
    {"clear", _wrap_Color4f_clear}, 
    {"setValuesRGBA", _wrap_Color4f_setValuesRGBA}, 
    {"setValuesHSV", _wrap_Color4f_setValuesHSV}, 
    {"setRandom", _wrap_Color4f_setRandom}, 
    {"setRGBA", _wrap_Color4f_setRGBA}, 
    {"setValue", _wrap_Color4f_setValue}, 
    {"getRGBA", _wrap_Color4f_getRGBA}, 
    {"getValuesHSV", _wrap_Color4f_getValuesHSV}, 
    {"red", _wrap_Color4f_red}, 
    {"green", _wrap_Color4f_green}, 
    {"blue", _wrap_Color4f_blue}, 
    {"alpha", _wrap_Color4f_alpha}, 
    {"getValuesRGBA", _wrap_Color4f_getValuesRGBA}, 
    {"__mul", _wrap_Color4f___mul}, 
    {"__div", _wrap_Color4f___div}, 
    {"__add", _wrap_Color4f___add}, 
    {"__sub", _wrap_Color4f___sub}, 
    {"equals", _wrap_Color4f_equals}, 
    {"__lt", _wrap_Color4f___lt}, 
    {"__eq", _wrap_Color4f___eq}, 
    {0,0}
};
static swig_lua_attribute swig_osg_Color4_Sl_osg_Real32_Sg__attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_osg_Color4_Sl_osg_Real32_Sg__bases[] = {0};
static const char *swig_osg_Color4_Sl_osg_Real32_Sg__base_names[] = {0};
static swig_lua_class _wrap_class_osg_Color4_Sl_osg_Real32_Sg_ = { "Color4f", &SWIGTYPE_p_osg__Color4T_float_t,_wrap_new_Color4f, swig_delete_Color4f, swig_osg_Color4_Sl_osg_Real32_Sg__methods, swig_osg_Color4_Sl_osg_Real32_Sg__attributes, swig_osg_Color4_Sl_osg_Real32_Sg__bases, swig_osg_Color4_Sl_osg_Real32_Sg__base_names };

static int _wrap_new_Pnt4f__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  osg::Point< osg::Real32,4 > *result = 0 ;
  
  SWIG_check_num_args("osg::Point<(osg::Real32,4)>",0,0)
  result = (osg::Point< osg::Real32,4 > *)new osg::Point< osg::Real32,4 >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_osg__PointT_float_4_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Pnt4f__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = (float *) 0 ;
  osg::Point< osg::Real32,4 > *result = 0 ;
  
  SWIG_check_num_args("osg::Point<(osg::Real32,4)>",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("osg::Point<(osg::Real32,4)>",1,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("new_Pnt4f",1,SWIGTYPE_p_float);
  }
  
  result = (osg::Point< osg::Real32,4 > *)new osg::Point< osg::Real32,4 >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_osg__PointT_float_4_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Pnt4f__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  osg::Point< osg::Real32,4 > *arg1 = 0 ;
  osg::Point< osg::Real32,4 > *result = 0 ;
  
  SWIG_check_num_args("osg::Point<(osg::Real32,4)>",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("osg::Point<(osg::Real32,4)>",1,"osg::Point< osg::Real32,4 > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__PointT_float_4_t,0))){
    SWIG_fail_ptr("new_Pnt4f",1,SWIGTYPE_p_osg__PointT_float_4_t);
  }
  
  result = (osg::Point< osg::Real32,4 > *)new osg::Point< osg::Real32,4 >((osg::Point< osg::Real32,4 > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_osg__PointT_float_4_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Pnt4f__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float arg2 ;
  osg::Point< osg::Real32,4 > *result = 0 ;
  
  SWIG_check_num_args("osg::Point<(osg::Real32,4)>",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("osg::Point<(osg::Real32,4)>",1,"float const");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("osg::Point<(osg::Real32,4)>",2,"float const");
  arg1 = (float const)lua_tonumber(L, 1);
  arg2 = (float const)lua_tonumber(L, 2);
  result = (osg::Point< osg::Real32,4 > *)new osg::Point< osg::Real32,4 >(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_osg__PointT_float_4_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Pnt4f__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  osg::Point< osg::Real32,4 > *result = 0 ;
  
  SWIG_check_num_args("osg::Point<(osg::Real32,4)>",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("osg::Point<(osg::Real32,4)>",1,"float const");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("osg::Point<(osg::Real32,4)>",2,"float const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("osg::Point<(osg::Real32,4)>",3,"float const");
  arg1 = (float const)lua_tonumber(L, 1);
  arg2 = (float const)lua_tonumber(L, 2);
  arg3 = (float const)lua_tonumber(L, 3);
  result = (osg::Point< osg::Real32,4 > *)new osg::Point< osg::Real32,4 >(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_osg__PointT_float_4_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Pnt4f__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  osg::Point< osg::Real32,4 > *result = 0 ;
  
  SWIG_check_num_args("osg::Point<(osg::Real32,4)>",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("osg::Point<(osg::Real32,4)>",1,"float const");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("osg::Point<(osg::Real32,4)>",2,"float const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("osg::Point<(osg::Real32,4)>",3,"float const");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("osg::Point<(osg::Real32,4)>",4,"float const");
  arg1 = (float const)lua_tonumber(L, 1);
  arg2 = (float const)lua_tonumber(L, 2);
  arg3 = (float const)lua_tonumber(L, 3);
  arg4 = (float const)lua_tonumber(L, 4);
  result = (osg::Point< osg::Real32,4 > *)new osg::Point< osg::Real32,4 >(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_osg__PointT_float_4_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Pnt4f__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  osg::Point< osg::Real32,4 > *result = 0 ;
  
  SWIG_check_num_args("osg::Point<(osg::Real32,4)>",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("osg::Point<(osg::Real32,4)>",1,"float const");
  arg1 = (float const)lua_tonumber(L, 1);
  result = (osg::Point< osg::Real32,4 > *)new osg::Point< osg::Real32,4 >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_osg__PointT_float_4_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Pnt4f(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Pnt4f__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_float, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Pnt4f__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_osg__PointT_float_4_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Pnt4f__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_Pnt4f__SWIG_6(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_Pnt4f__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_Pnt4f__SWIG_4(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_Pnt4f__SWIG_5(L);
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_Pnt4f'\n"
    "  Possible C/C++ prototypes are:\n"
    "    osg::Point< osg::Real32,4 >()\n"
    "    osg::Point< osg::Real32,4 >(float *)\n"
    "    osg::Point< osg::Real32,4 >(osg::Point< osg::Real32,4 > const &)\n"
    "    osg::Point< osg::Real32,4 >(float const,float const)\n"
    "    osg::Point< osg::Real32,4 >(float const,float const,float const)\n"
    "    osg::Point< osg::Real32,4 >(float const,float const,float const,float const)\n"
    "    osg::Point< osg::Real32,4 >(float const)\n");
  lua_error(L);return 0;
}


static int _wrap_Pnt4f_setNull(lua_State* L) {
  int SWIG_arg = 0;
  osg::Point< osg::Real32,4 > *arg1 = (osg::Point< osg::Real32,4 > *) 0 ;
  
  SWIG_check_num_args("setNull",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setNull",1,"osg::Point< osg::Real32,4 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__PointT_float_4_t,0))){
    SWIG_fail_ptr("Pnt4f_setNull",1,SWIGTYPE_p_osg__PointT_float_4_t);
  }
  
  (arg1)->setNull();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Pnt4f_setValue__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  osg::Point< osg::Real32,4 > *arg1 = (osg::Point< osg::Real32,4 > *) 0 ;
  osg::Point< osg::Real32,4 > *arg2 = 0 ;
  
  SWIG_check_num_args("setValue",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setValue",1,"osg::Point< osg::Real32,4 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setValue",2,"osg::Point< osg::Real32,4 > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__PointT_float_4_t,0))){
    SWIG_fail_ptr("Pnt4f_setValue",1,SWIGTYPE_p_osg__PointT_float_4_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__PointT_float_4_t,0))){
    SWIG_fail_ptr("Pnt4f_setValue",2,SWIGTYPE_p_osg__PointT_float_4_t);
  }
  
  (arg1)->setValue((osg::Point< osg::Real32,4 > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Pnt4f_setValue__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  osg::Point< osg::Real32,4 > *arg1 = (osg::Point< osg::Real32,4 > *) 0 ;
  float *arg2 = (float *) 0 ;
  
  SWIG_check_num_args("setValue",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setValue",1,"osg::Point< osg::Real32,4 > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("setValue",2,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__PointT_float_4_t,0))){
    SWIG_fail_ptr("Pnt4f_setValue",1,SWIGTYPE_p_osg__PointT_float_4_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("Pnt4f_setValue",2,SWIGTYPE_p_float);
  }
  
  (arg1)->setValue(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Pnt4f_setValue(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_osg__PointT_float_4_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_osg__PointT_float_4_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Pnt4f_setValue__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_osg__PointT_float_4_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Pnt4f_setValue__SWIG_1(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'Pnt4f_setValue'\n"
    "  Possible C/C++ prototypes are:\n"
    "    setValue(osg::Point< osg::Real32,4 > *,osg::Point< osg::Real32,4 > const &)\n"
    "    setValue(osg::Point< osg::Real32,4 > *,float *)\n");
  lua_error(L);return 0;
}


static int _wrap_Pnt4f_setValueFromCString(lua_State* L) {
  int SWIG_arg = 0;
  osg::Point< osg::Real32,4 > *arg1 = (osg::Point< osg::Real32,4 > *) 0 ;
  osg::Char8 *arg2 = (osg::Char8 *) 0 ;
  
  SWIG_check_num_args("setValueFromCString",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setValueFromCString",1,"osg::Point< osg::Real32,4 > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("setValueFromCString",2,"osg::Char8 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__PointT_float_4_t,0))){
    SWIG_fail_ptr("Pnt4f_setValueFromCString",1,SWIGTYPE_p_osg__PointT_float_4_t);
  }
  
  arg2 = (osg::Char8 *)lua_tostring(L, 2);
  (arg1)->setValueFromCString(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Pnt4f_getValues(lua_State* L) {
  int SWIG_arg = 0;
  osg::Point< osg::Real32,4 > *arg1 = (osg::Point< osg::Real32,4 > *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("getValues",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getValues",1,"osg::Point< osg::Real32,4 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__PointT_float_4_t,0))){
    SWIG_fail_ptr("Pnt4f_getValues",1,SWIGTYPE_p_osg__PointT_float_4_t);
  }
  
  result = (float *)(arg1)->getValues();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Pnt4f_isZero(lua_State* L) {
  int SWIG_arg = 0;
  osg::Point< osg::Real32,4 > *arg1 = (osg::Point< osg::Real32,4 > *) 0 ;
  bool result;
  
  SWIG_check_num_args("isZero",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isZero",1,"osg::Point< osg::Real32,4 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__PointT_float_4_t,0))){
    SWIG_fail_ptr("Pnt4f_isZero",1,SWIGTYPE_p_osg__PointT_float_4_t);
  }
  
  result = (bool)((osg::Point< osg::Real32,4 > const *)arg1)->isZero();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Pnt4f_negate(lua_State* L) {
  int SWIG_arg = 0;
  osg::Point< osg::Real32,4 > *arg1 = (osg::Point< osg::Real32,4 > *) 0 ;
  
  SWIG_check_num_args("negate",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("negate",1,"osg::Point< osg::Real32,4 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__PointT_float_4_t,0))){
    SWIG_fail_ptr("Pnt4f_negate",1,SWIGTYPE_p_osg__PointT_float_4_t);
  }
  
  (arg1)->negate();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Pnt4f_equals(lua_State* L) {
  int SWIG_arg = 0;
  osg::Point< osg::Real32,4 > *arg1 = (osg::Point< osg::Real32,4 > *) 0 ;
  osg::Point< osg::Real32,4 > *arg2 = 0 ;
  float arg3 ;
  bool result;
  
  SWIG_check_num_args("equals",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("equals",1,"osg::Point< osg::Real32,4 > const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("equals",2,"osg::Point< osg::Real32,4 > const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("equals",3,"float const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__PointT_float_4_t,0))){
    SWIG_fail_ptr("Pnt4f_equals",1,SWIGTYPE_p_osg__PointT_float_4_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__PointT_float_4_t,0))){
    SWIG_fail_ptr("Pnt4f_equals",2,SWIGTYPE_p_osg__PointT_float_4_t);
  }
  
  arg3 = (float const)lua_tonumber(L, 3);
  result = (bool)((osg::Point< osg::Real32,4 > const *)arg1)->equals((osg::Point< osg::Real32,4 > const &)*arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Pnt4f_subZero(lua_State* L) {
  int SWIG_arg = 0;
  osg::Point< osg::Real32,4 > *arg1 = (osg::Point< osg::Real32,4 > *) 0 ;
  osg::Point< float,4 >::VectorType *result = 0 ;
  
  SWIG_check_num_args("subZero",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("subZero",1,"osg::Point< osg::Real32,4 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__PointT_float_4_t,0))){
    SWIG_fail_ptr("Pnt4f_subZero",1,SWIGTYPE_p_osg__PointT_float_4_t);
  }
  
  result = (osg::Point< float,4 >::VectorType *) &(arg1)->subZero();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_osg__VectorT_float_4_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Pnt4f_dist(lua_State* L) {
  int SWIG_arg = 0;
  osg::Point< osg::Real32,4 > *arg1 = (osg::Point< osg::Real32,4 > *) 0 ;
  osg::Point< osg::Real32,4 > *arg2 = 0 ;
  osg::Point< float,4 >::ValueType result;
  
  SWIG_check_num_args("dist",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dist",1,"osg::Point< osg::Real32,4 > const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("dist",2,"osg::Point< osg::Real32,4 > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__PointT_float_4_t,0))){
    SWIG_fail_ptr("Pnt4f_dist",1,SWIGTYPE_p_osg__PointT_float_4_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__PointT_float_4_t,0))){
    SWIG_fail_ptr("Pnt4f_dist",2,SWIGTYPE_p_osg__PointT_float_4_t);
  }
  
  result = (osg::Point< float,4 >::ValueType)((osg::Point< osg::Real32,4 > const *)arg1)->dist((osg::Point< osg::Real32,4 > const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Pnt4f_dist2(lua_State* L) {
  int SWIG_arg = 0;
  osg::Point< osg::Real32,4 > *arg1 = (osg::Point< osg::Real32,4 > *) 0 ;
  osg::Point< osg::Real32,4 > *arg2 = 0 ;
  osg::Point< float,4 >::ValueType result;
  
  SWIG_check_num_args("dist2",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dist2",1,"osg::Point< osg::Real32,4 > const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("dist2",2,"osg::Point< osg::Real32,4 > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__PointT_float_4_t,0))){
    SWIG_fail_ptr("Pnt4f_dist2",1,SWIGTYPE_p_osg__PointT_float_4_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__PointT_float_4_t,0))){
    SWIG_fail_ptr("Pnt4f_dist2",2,SWIGTYPE_p_osg__PointT_float_4_t);
  }
  
  result = (osg::Point< float,4 >::ValueType)((osg::Point< osg::Real32,4 > const *)arg1)->dist2((osg::Point< osg::Real32,4 > const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Pnt4f_maxValue(lua_State* L) {
  int SWIG_arg = 0;
  osg::Point< osg::Real32,4 > *arg1 = (osg::Point< osg::Real32,4 > *) 0 ;
  osg::Point< float,4 >::ValueType result;
  
  SWIG_check_num_args("maxValue",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("maxValue",1,"osg::Point< osg::Real32,4 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__PointT_float_4_t,0))){
    SWIG_fail_ptr("Pnt4f_maxValue",1,SWIGTYPE_p_osg__PointT_float_4_t);
  }
  
  result = (osg::Point< float,4 >::ValueType)((osg::Point< osg::Real32,4 > const *)arg1)->maxValue();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Pnt4f(void *obj) {
osg::Point< osg::Real32,4 > *arg1 = (osg::Point< osg::Real32,4 > *) obj;
delete arg1;
}
static swig_lua_method swig_osg_Point_Sl_osg_Real32_Sc_4_Sg__methods[] = {
    {"setNull", _wrap_Pnt4f_setNull}, 
    {"setValue", _wrap_Pnt4f_setValue}, 
    {"setValueFromCString", _wrap_Pnt4f_setValueFromCString}, 
    {"getValues", _wrap_Pnt4f_getValues}, 
    {"isZero", _wrap_Pnt4f_isZero}, 
    {"negate", _wrap_Pnt4f_negate}, 
    {"equals", _wrap_Pnt4f_equals}, 
    {"subZero", _wrap_Pnt4f_subZero}, 
    {"dist", _wrap_Pnt4f_dist}, 
    {"dist2", _wrap_Pnt4f_dist2}, 
    {"maxValue", _wrap_Pnt4f_maxValue}, 
    {0,0}
};
static swig_lua_attribute swig_osg_Point_Sl_osg_Real32_Sc_4_Sg__attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_osg_Point_Sl_osg_Real32_Sc_4_Sg__bases[] = {0};
static const char *swig_osg_Point_Sl_osg_Real32_Sc_4_Sg__base_names[] = {0};
static swig_lua_class _wrap_class_osg_Point_Sl_osg_Real32_Sc_4_Sg_ = { "Pnt4f", &SWIGTYPE_p_osg__PointT_float_4_t,_wrap_new_Pnt4f, swig_delete_Pnt4f, swig_osg_Point_Sl_osg_Real32_Sc_4_Sg__methods, swig_osg_Point_Sl_osg_Real32_Sc_4_Sg__attributes, swig_osg_Point_Sl_osg_Real32_Sc_4_Sg__bases, swig_osg_Point_Sl_osg_Real32_Sc_4_Sg__base_names };

static int _wrap_new_Pnt3f__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  osg::Point< osg::Real32,3 > *result = 0 ;
  
  SWIG_check_num_args("osg::Point<(osg::Real32,3)>",0,0)
  result = (osg::Point< osg::Real32,3 > *)new osg::Point< osg::Real32,3 >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_osg__PointT_float_3_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Pnt3f__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = (float *) 0 ;
  osg::Point< osg::Real32,3 > *result = 0 ;
  
  SWIG_check_num_args("osg::Point<(osg::Real32,3)>",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("osg::Point<(osg::Real32,3)>",1,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("new_Pnt3f",1,SWIGTYPE_p_float);
  }
  
  result = (osg::Point< osg::Real32,3 > *)new osg::Point< osg::Real32,3 >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_osg__PointT_float_3_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Pnt3f__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  osg::Point< osg::Real32,3 > *arg1 = 0 ;
  osg::Point< osg::Real32,3 > *result = 0 ;
  
  SWIG_check_num_args("osg::Point<(osg::Real32,3)>",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("osg::Point<(osg::Real32,3)>",1,"osg::Point< osg::Real32,3 > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__PointT_float_3_t,0))){
    SWIG_fail_ptr("new_Pnt3f",1,SWIGTYPE_p_osg__PointT_float_3_t);
  }
  
  result = (osg::Point< osg::Real32,3 > *)new osg::Point< osg::Real32,3 >((osg::Point< osg::Real32,3 > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_osg__PointT_float_3_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Pnt3f__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float arg2 ;
  osg::Point< osg::Real32,3 > *result = 0 ;
  
  SWIG_check_num_args("osg::Point<(osg::Real32,3)>",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("osg::Point<(osg::Real32,3)>",1,"float const");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("osg::Point<(osg::Real32,3)>",2,"float const");
  arg1 = (float const)lua_tonumber(L, 1);
  arg2 = (float const)lua_tonumber(L, 2);
  result = (osg::Point< osg::Real32,3 > *)new osg::Point< osg::Real32,3 >(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_osg__PointT_float_3_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Pnt3f__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  osg::Point< osg::Real32,3 > *result = 0 ;
  
  SWIG_check_num_args("osg::Point<(osg::Real32,3)>",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("osg::Point<(osg::Real32,3)>",1,"float const");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("osg::Point<(osg::Real32,3)>",2,"float const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("osg::Point<(osg::Real32,3)>",3,"float const");
  arg1 = (float const)lua_tonumber(L, 1);
  arg2 = (float const)lua_tonumber(L, 2);
  arg3 = (float const)lua_tonumber(L, 3);
  result = (osg::Point< osg::Real32,3 > *)new osg::Point< osg::Real32,3 >(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_osg__PointT_float_3_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Pnt3f__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  osg::Point< osg::Real32,3 > *result = 0 ;
  
  SWIG_check_num_args("osg::Point<(osg::Real32,3)>",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("osg::Point<(osg::Real32,3)>",1,"float const");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("osg::Point<(osg::Real32,3)>",2,"float const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("osg::Point<(osg::Real32,3)>",3,"float const");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("osg::Point<(osg::Real32,3)>",4,"float const");
  arg1 = (float const)lua_tonumber(L, 1);
  arg2 = (float const)lua_tonumber(L, 2);
  arg3 = (float const)lua_tonumber(L, 3);
  arg4 = (float const)lua_tonumber(L, 4);
  result = (osg::Point< osg::Real32,3 > *)new osg::Point< osg::Real32,3 >(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_osg__PointT_float_3_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Pnt3f__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  osg::Point< osg::Real32,3 > *result = 0 ;
  
  SWIG_check_num_args("osg::Point<(osg::Real32,3)>",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("osg::Point<(osg::Real32,3)>",1,"float const");
  arg1 = (float const)lua_tonumber(L, 1);
  result = (osg::Point< osg::Real32,3 > *)new osg::Point< osg::Real32,3 >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_osg__PointT_float_3_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Pnt3f(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Pnt3f__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_float, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Pnt3f__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_osg__PointT_float_3_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Pnt3f__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_Pnt3f__SWIG_6(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_Pnt3f__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_Pnt3f__SWIG_4(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_Pnt3f__SWIG_5(L);
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_Pnt3f'\n"
    "  Possible C/C++ prototypes are:\n"
    "    osg::Point< osg::Real32,3 >()\n"
    "    osg::Point< osg::Real32,3 >(float *)\n"
    "    osg::Point< osg::Real32,3 >(osg::Point< osg::Real32,3 > const &)\n"
    "    osg::Point< osg::Real32,3 >(float const,float const)\n"
    "    osg::Point< osg::Real32,3 >(float const,float const,float const)\n"
    "    osg::Point< osg::Real32,3 >(float const,float const,float const,float const)\n"
    "    osg::Point< osg::Real32,3 >(float const)\n");
  lua_error(L);return 0;
}


static int _wrap_Pnt3f_setNull(lua_State* L) {
  int SWIG_arg = 0;
  osg::Point< osg::Real32,3 > *arg1 = (osg::Point< osg::Real32,3 > *) 0 ;
  
  SWIG_check_num_args("setNull",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setNull",1,"osg::Point< osg::Real32,3 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__PointT_float_3_t,0))){
    SWIG_fail_ptr("Pnt3f_setNull",1,SWIGTYPE_p_osg__PointT_float_3_t);
  }
  
  (arg1)->setNull();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Pnt3f_setValue__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  osg::Point< osg::Real32,3 > *arg1 = (osg::Point< osg::Real32,3 > *) 0 ;
  osg::Point< osg::Real32,3 > *arg2 = 0 ;
  
  SWIG_check_num_args("setValue",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setValue",1,"osg::Point< osg::Real32,3 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setValue",2,"osg::Point< osg::Real32,3 > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__PointT_float_3_t,0))){
    SWIG_fail_ptr("Pnt3f_setValue",1,SWIGTYPE_p_osg__PointT_float_3_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__PointT_float_3_t,0))){
    SWIG_fail_ptr("Pnt3f_setValue",2,SWIGTYPE_p_osg__PointT_float_3_t);
  }
  
  (arg1)->setValue((osg::Point< osg::Real32,3 > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Pnt3f_setValue__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  osg::Point< osg::Real32,3 > *arg1 = (osg::Point< osg::Real32,3 > *) 0 ;
  float *arg2 = (float *) 0 ;
  
  SWIG_check_num_args("setValue",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setValue",1,"osg::Point< osg::Real32,3 > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("setValue",2,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__PointT_float_3_t,0))){
    SWIG_fail_ptr("Pnt3f_setValue",1,SWIGTYPE_p_osg__PointT_float_3_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("Pnt3f_setValue",2,SWIGTYPE_p_float);
  }
  
  (arg1)->setValue(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Pnt3f_setValue(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_osg__PointT_float_3_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_osg__PointT_float_3_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Pnt3f_setValue__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_osg__PointT_float_3_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Pnt3f_setValue__SWIG_1(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'Pnt3f_setValue'\n"
    "  Possible C/C++ prototypes are:\n"
    "    setValue(osg::Point< osg::Real32,3 > *,osg::Point< osg::Real32,3 > const &)\n"
    "    setValue(osg::Point< osg::Real32,3 > *,float *)\n");
  lua_error(L);return 0;
}


static int _wrap_Pnt3f_setValueFromCString(lua_State* L) {
  int SWIG_arg = 0;
  osg::Point< osg::Real32,3 > *arg1 = (osg::Point< osg::Real32,3 > *) 0 ;
  osg::Char8 *arg2 = (osg::Char8 *) 0 ;
  
  SWIG_check_num_args("setValueFromCString",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setValueFromCString",1,"osg::Point< osg::Real32,3 > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("setValueFromCString",2,"osg::Char8 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__PointT_float_3_t,0))){
    SWIG_fail_ptr("Pnt3f_setValueFromCString",1,SWIGTYPE_p_osg__PointT_float_3_t);
  }
  
  arg2 = (osg::Char8 *)lua_tostring(L, 2);
  (arg1)->setValueFromCString(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Pnt3f_getValues(lua_State* L) {
  int SWIG_arg = 0;
  osg::Point< osg::Real32,3 > *arg1 = (osg::Point< osg::Real32,3 > *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("getValues",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getValues",1,"osg::Point< osg::Real32,3 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__PointT_float_3_t,0))){
    SWIG_fail_ptr("Pnt3f_getValues",1,SWIGTYPE_p_osg__PointT_float_3_t);
  }
  
  result = (float *)(arg1)->getValues();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Pnt3f_isZero(lua_State* L) {
  int SWIG_arg = 0;
  osg::Point< osg::Real32,3 > *arg1 = (osg::Point< osg::Real32,3 > *) 0 ;
  bool result;
  
  SWIG_check_num_args("isZero",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isZero",1,"osg::Point< osg::Real32,3 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__PointT_float_3_t,0))){
    SWIG_fail_ptr("Pnt3f_isZero",1,SWIGTYPE_p_osg__PointT_float_3_t);
  }
  
  result = (bool)((osg::Point< osg::Real32,3 > const *)arg1)->isZero();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Pnt3f_negate(lua_State* L) {
  int SWIG_arg = 0;
  osg::Point< osg::Real32,3 > *arg1 = (osg::Point< osg::Real32,3 > *) 0 ;
  
  SWIG_check_num_args("negate",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("negate",1,"osg::Point< osg::Real32,3 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__PointT_float_3_t,0))){
    SWIG_fail_ptr("Pnt3f_negate",1,SWIGTYPE_p_osg__PointT_float_3_t);
  }
  
  (arg1)->negate();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Pnt3f_equals(lua_State* L) {
  int SWIG_arg = 0;
  osg::Point< osg::Real32,3 > *arg1 = (osg::Point< osg::Real32,3 > *) 0 ;
  osg::Point< osg::Real32,3 > *arg2 = 0 ;
  float arg3 ;
  bool result;
  
  SWIG_check_num_args("equals",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("equals",1,"osg::Point< osg::Real32,3 > const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("equals",2,"osg::Point< osg::Real32,3 > const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("equals",3,"float const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__PointT_float_3_t,0))){
    SWIG_fail_ptr("Pnt3f_equals",1,SWIGTYPE_p_osg__PointT_float_3_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__PointT_float_3_t,0))){
    SWIG_fail_ptr("Pnt3f_equals",2,SWIGTYPE_p_osg__PointT_float_3_t);
  }
  
  arg3 = (float const)lua_tonumber(L, 3);
  result = (bool)((osg::Point< osg::Real32,3 > const *)arg1)->equals((osg::Point< osg::Real32,3 > const &)*arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Pnt3f_subZero(lua_State* L) {
  int SWIG_arg = 0;
  osg::Point< osg::Real32,3 > *arg1 = (osg::Point< osg::Real32,3 > *) 0 ;
  osg::Point< float,3 >::VectorType *result = 0 ;
  
  SWIG_check_num_args("subZero",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("subZero",1,"osg::Point< osg::Real32,3 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__PointT_float_3_t,0))){
    SWIG_fail_ptr("Pnt3f_subZero",1,SWIGTYPE_p_osg__PointT_float_3_t);
  }
  
  result = (osg::Point< float,3 >::VectorType *) &(arg1)->subZero();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_osg__VectorT_float_3_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Pnt3f_dist(lua_State* L) {
  int SWIG_arg = 0;
  osg::Point< osg::Real32,3 > *arg1 = (osg::Point< osg::Real32,3 > *) 0 ;
  osg::Point< osg::Real32,3 > *arg2 = 0 ;
  osg::Point< float,3 >::ValueType result;
  
  SWIG_check_num_args("dist",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dist",1,"osg::Point< osg::Real32,3 > const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("dist",2,"osg::Point< osg::Real32,3 > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__PointT_float_3_t,0))){
    SWIG_fail_ptr("Pnt3f_dist",1,SWIGTYPE_p_osg__PointT_float_3_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__PointT_float_3_t,0))){
    SWIG_fail_ptr("Pnt3f_dist",2,SWIGTYPE_p_osg__PointT_float_3_t);
  }
  
  result = (osg::Point< float,3 >::ValueType)((osg::Point< osg::Real32,3 > const *)arg1)->dist((osg::Point< osg::Real32,3 > const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Pnt3f_dist2(lua_State* L) {
  int SWIG_arg = 0;
  osg::Point< osg::Real32,3 > *arg1 = (osg::Point< osg::Real32,3 > *) 0 ;
  osg::Point< osg::Real32,3 > *arg2 = 0 ;
  osg::Point< float,3 >::ValueType result;
  
  SWIG_check_num_args("dist2",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dist2",1,"osg::Point< osg::Real32,3 > const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("dist2",2,"osg::Point< osg::Real32,3 > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__PointT_float_3_t,0))){
    SWIG_fail_ptr("Pnt3f_dist2",1,SWIGTYPE_p_osg__PointT_float_3_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__PointT_float_3_t,0))){
    SWIG_fail_ptr("Pnt3f_dist2",2,SWIGTYPE_p_osg__PointT_float_3_t);
  }
  
  result = (osg::Point< float,3 >::ValueType)((osg::Point< osg::Real32,3 > const *)arg1)->dist2((osg::Point< osg::Real32,3 > const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Pnt3f_maxValue(lua_State* L) {
  int SWIG_arg = 0;
  osg::Point< osg::Real32,3 > *arg1 = (osg::Point< osg::Real32,3 > *) 0 ;
  osg::Point< float,3 >::ValueType result;
  
  SWIG_check_num_args("maxValue",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("maxValue",1,"osg::Point< osg::Real32,3 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__PointT_float_3_t,0))){
    SWIG_fail_ptr("Pnt3f_maxValue",1,SWIGTYPE_p_osg__PointT_float_3_t);
  }
  
  result = (osg::Point< float,3 >::ValueType)((osg::Point< osg::Real32,3 > const *)arg1)->maxValue();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Pnt3f(void *obj) {
osg::Point< osg::Real32,3 > *arg1 = (osg::Point< osg::Real32,3 > *) obj;
delete arg1;
}
static swig_lua_method swig_osg_Point_Sl_osg_Real32_Sc_3_Sg__methods[] = {
    {"setNull", _wrap_Pnt3f_setNull}, 
    {"setValue", _wrap_Pnt3f_setValue}, 
    {"setValueFromCString", _wrap_Pnt3f_setValueFromCString}, 
    {"getValues", _wrap_Pnt3f_getValues}, 
    {"isZero", _wrap_Pnt3f_isZero}, 
    {"negate", _wrap_Pnt3f_negate}, 
    {"equals", _wrap_Pnt3f_equals}, 
    {"subZero", _wrap_Pnt3f_subZero}, 
    {"dist", _wrap_Pnt3f_dist}, 
    {"dist2", _wrap_Pnt3f_dist2}, 
    {"maxValue", _wrap_Pnt3f_maxValue}, 
    {0,0}
};
static swig_lua_attribute swig_osg_Point_Sl_osg_Real32_Sc_3_Sg__attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_osg_Point_Sl_osg_Real32_Sc_3_Sg__bases[] = {0};
static const char *swig_osg_Point_Sl_osg_Real32_Sc_3_Sg__base_names[] = {0};
static swig_lua_class _wrap_class_osg_Point_Sl_osg_Real32_Sc_3_Sg_ = { "Pnt3f", &SWIGTYPE_p_osg__PointT_float_3_t,_wrap_new_Pnt3f, swig_delete_Pnt3f, swig_osg_Point_Sl_osg_Real32_Sc_3_Sg__methods, swig_osg_Point_Sl_osg_Real32_Sc_3_Sg__attributes, swig_osg_Point_Sl_osg_Real32_Sc_3_Sg__bases, swig_osg_Point_Sl_osg_Real32_Sc_3_Sg__base_names };

static int _wrap_new_Pnt2f__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  osg::Point< osg::Real32,2 > *result = 0 ;
  
  SWIG_check_num_args("osg::Point<(osg::Real32,2)>",0,0)
  result = (osg::Point< osg::Real32,2 > *)new osg::Point< osg::Real32,2 >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_osg__PointT_float_2_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Pnt2f__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = (float *) 0 ;
  osg::Point< osg::Real32,2 > *result = 0 ;
  
  SWIG_check_num_args("osg::Point<(osg::Real32,2)>",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("osg::Point<(osg::Real32,2)>",1,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("new_Pnt2f",1,SWIGTYPE_p_float);
  }
  
  result = (osg::Point< osg::Real32,2 > *)new osg::Point< osg::Real32,2 >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_osg__PointT_float_2_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Pnt2f__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  osg::Point< osg::Real32,2 > *arg1 = 0 ;
  osg::Point< osg::Real32,2 > *result = 0 ;
  
  SWIG_check_num_args("osg::Point<(osg::Real32,2)>",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("osg::Point<(osg::Real32,2)>",1,"osg::Point< osg::Real32,2 > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__PointT_float_2_t,0))){
    SWIG_fail_ptr("new_Pnt2f",1,SWIGTYPE_p_osg__PointT_float_2_t);
  }
  
  result = (osg::Point< osg::Real32,2 > *)new osg::Point< osg::Real32,2 >((osg::Point< osg::Real32,2 > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_osg__PointT_float_2_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Pnt2f__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float arg2 ;
  osg::Point< osg::Real32,2 > *result = 0 ;
  
  SWIG_check_num_args("osg::Point<(osg::Real32,2)>",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("osg::Point<(osg::Real32,2)>",1,"float const");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("osg::Point<(osg::Real32,2)>",2,"float const");
  arg1 = (float const)lua_tonumber(L, 1);
  arg2 = (float const)lua_tonumber(L, 2);
  result = (osg::Point< osg::Real32,2 > *)new osg::Point< osg::Real32,2 >(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_osg__PointT_float_2_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Pnt2f__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  osg::Point< osg::Real32,2 > *result = 0 ;
  
  SWIG_check_num_args("osg::Point<(osg::Real32,2)>",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("osg::Point<(osg::Real32,2)>",1,"float const");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("osg::Point<(osg::Real32,2)>",2,"float const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("osg::Point<(osg::Real32,2)>",3,"float const");
  arg1 = (float const)lua_tonumber(L, 1);
  arg2 = (float const)lua_tonumber(L, 2);
  arg3 = (float const)lua_tonumber(L, 3);
  result = (osg::Point< osg::Real32,2 > *)new osg::Point< osg::Real32,2 >(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_osg__PointT_float_2_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Pnt2f__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  osg::Point< osg::Real32,2 > *result = 0 ;
  
  SWIG_check_num_args("osg::Point<(osg::Real32,2)>",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("osg::Point<(osg::Real32,2)>",1,"float const");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("osg::Point<(osg::Real32,2)>",2,"float const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("osg::Point<(osg::Real32,2)>",3,"float const");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("osg::Point<(osg::Real32,2)>",4,"float const");
  arg1 = (float const)lua_tonumber(L, 1);
  arg2 = (float const)lua_tonumber(L, 2);
  arg3 = (float const)lua_tonumber(L, 3);
  arg4 = (float const)lua_tonumber(L, 4);
  result = (osg::Point< osg::Real32,2 > *)new osg::Point< osg::Real32,2 >(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_osg__PointT_float_2_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Pnt2f__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  osg::Point< osg::Real32,2 > *result = 0 ;
  
  SWIG_check_num_args("osg::Point<(osg::Real32,2)>",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("osg::Point<(osg::Real32,2)>",1,"float const");
  arg1 = (float const)lua_tonumber(L, 1);
  result = (osg::Point< osg::Real32,2 > *)new osg::Point< osg::Real32,2 >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_osg__PointT_float_2_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Pnt2f(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Pnt2f__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_float, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Pnt2f__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_osg__PointT_float_2_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Pnt2f__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_Pnt2f__SWIG_6(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_Pnt2f__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_Pnt2f__SWIG_4(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_Pnt2f__SWIG_5(L);
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_Pnt2f'\n"
    "  Possible C/C++ prototypes are:\n"
    "    osg::Point< osg::Real32,2 >()\n"
    "    osg::Point< osg::Real32,2 >(float *)\n"
    "    osg::Point< osg::Real32,2 >(osg::Point< osg::Real32,2 > const &)\n"
    "    osg::Point< osg::Real32,2 >(float const,float const)\n"
    "    osg::Point< osg::Real32,2 >(float const,float const,float const)\n"
    "    osg::Point< osg::Real32,2 >(float const,float const,float const,float const)\n"
    "    osg::Point< osg::Real32,2 >(float const)\n");
  lua_error(L);return 0;
}


static int _wrap_Pnt2f_setNull(lua_State* L) {
  int SWIG_arg = 0;
  osg::Point< osg::Real32,2 > *arg1 = (osg::Point< osg::Real32,2 > *) 0 ;
  
  SWIG_check_num_args("setNull",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setNull",1,"osg::Point< osg::Real32,2 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__PointT_float_2_t,0))){
    SWIG_fail_ptr("Pnt2f_setNull",1,SWIGTYPE_p_osg__PointT_float_2_t);
  }
  
  (arg1)->setNull();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Pnt2f_setValue__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  osg::Point< osg::Real32,2 > *arg1 = (osg::Point< osg::Real32,2 > *) 0 ;
  osg::Point< osg::Real32,2 > *arg2 = 0 ;
  
  SWIG_check_num_args("setValue",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setValue",1,"osg::Point< osg::Real32,2 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setValue",2,"osg::Point< osg::Real32,2 > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__PointT_float_2_t,0))){
    SWIG_fail_ptr("Pnt2f_setValue",1,SWIGTYPE_p_osg__PointT_float_2_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__PointT_float_2_t,0))){
    SWIG_fail_ptr("Pnt2f_setValue",2,SWIGTYPE_p_osg__PointT_float_2_t);
  }
  
  (arg1)->setValue((osg::Point< osg::Real32,2 > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Pnt2f_setValue__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  osg::Point< osg::Real32,2 > *arg1 = (osg::Point< osg::Real32,2 > *) 0 ;
  float *arg2 = (float *) 0 ;
  
  SWIG_check_num_args("setValue",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setValue",1,"osg::Point< osg::Real32,2 > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("setValue",2,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__PointT_float_2_t,0))){
    SWIG_fail_ptr("Pnt2f_setValue",1,SWIGTYPE_p_osg__PointT_float_2_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("Pnt2f_setValue",2,SWIGTYPE_p_float);
  }
  
  (arg1)->setValue(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Pnt2f_setValue(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_osg__PointT_float_2_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_osg__PointT_float_2_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Pnt2f_setValue__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_osg__PointT_float_2_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Pnt2f_setValue__SWIG_1(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'Pnt2f_setValue'\n"
    "  Possible C/C++ prototypes are:\n"
    "    setValue(osg::Point< osg::Real32,2 > *,osg::Point< osg::Real32,2 > const &)\n"
    "    setValue(osg::Point< osg::Real32,2 > *,float *)\n");
  lua_error(L);return 0;
}


static int _wrap_Pnt2f_setValueFromCString(lua_State* L) {
  int SWIG_arg = 0;
  osg::Point< osg::Real32,2 > *arg1 = (osg::Point< osg::Real32,2 > *) 0 ;
  osg::Char8 *arg2 = (osg::Char8 *) 0 ;
  
  SWIG_check_num_args("setValueFromCString",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setValueFromCString",1,"osg::Point< osg::Real32,2 > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("setValueFromCString",2,"osg::Char8 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__PointT_float_2_t,0))){
    SWIG_fail_ptr("Pnt2f_setValueFromCString",1,SWIGTYPE_p_osg__PointT_float_2_t);
  }
  
  arg2 = (osg::Char8 *)lua_tostring(L, 2);
  (arg1)->setValueFromCString(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Pnt2f_getValues(lua_State* L) {
  int SWIG_arg = 0;
  osg::Point< osg::Real32,2 > *arg1 = (osg::Point< osg::Real32,2 > *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("getValues",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getValues",1,"osg::Point< osg::Real32,2 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__PointT_float_2_t,0))){
    SWIG_fail_ptr("Pnt2f_getValues",1,SWIGTYPE_p_osg__PointT_float_2_t);
  }
  
  result = (float *)(arg1)->getValues();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Pnt2f_isZero(lua_State* L) {
  int SWIG_arg = 0;
  osg::Point< osg::Real32,2 > *arg1 = (osg::Point< osg::Real32,2 > *) 0 ;
  bool result;
  
  SWIG_check_num_args("isZero",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isZero",1,"osg::Point< osg::Real32,2 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__PointT_float_2_t,0))){
    SWIG_fail_ptr("Pnt2f_isZero",1,SWIGTYPE_p_osg__PointT_float_2_t);
  }
  
  result = (bool)((osg::Point< osg::Real32,2 > const *)arg1)->isZero();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Pnt2f_negate(lua_State* L) {
  int SWIG_arg = 0;
  osg::Point< osg::Real32,2 > *arg1 = (osg::Point< osg::Real32,2 > *) 0 ;
  
  SWIG_check_num_args("negate",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("negate",1,"osg::Point< osg::Real32,2 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__PointT_float_2_t,0))){
    SWIG_fail_ptr("Pnt2f_negate",1,SWIGTYPE_p_osg__PointT_float_2_t);
  }
  
  (arg1)->negate();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Pnt2f_equals(lua_State* L) {
  int SWIG_arg = 0;
  osg::Point< osg::Real32,2 > *arg1 = (osg::Point< osg::Real32,2 > *) 0 ;
  osg::Point< osg::Real32,2 > *arg2 = 0 ;
  float arg3 ;
  bool result;
  
  SWIG_check_num_args("equals",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("equals",1,"osg::Point< osg::Real32,2 > const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("equals",2,"osg::Point< osg::Real32,2 > const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("equals",3,"float const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__PointT_float_2_t,0))){
    SWIG_fail_ptr("Pnt2f_equals",1,SWIGTYPE_p_osg__PointT_float_2_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__PointT_float_2_t,0))){
    SWIG_fail_ptr("Pnt2f_equals",2,SWIGTYPE_p_osg__PointT_float_2_t);
  }
  
  arg3 = (float const)lua_tonumber(L, 3);
  result = (bool)((osg::Point< osg::Real32,2 > const *)arg1)->equals((osg::Point< osg::Real32,2 > const &)*arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Pnt2f_subZero(lua_State* L) {
  int SWIG_arg = 0;
  osg::Point< osg::Real32,2 > *arg1 = (osg::Point< osg::Real32,2 > *) 0 ;
  osg::Point< float,2 >::VectorType *result = 0 ;
  
  SWIG_check_num_args("subZero",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("subZero",1,"osg::Point< osg::Real32,2 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__PointT_float_2_t,0))){
    SWIG_fail_ptr("Pnt2f_subZero",1,SWIGTYPE_p_osg__PointT_float_2_t);
  }
  
  result = (osg::Point< float,2 >::VectorType *) &(arg1)->subZero();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_osg__VectorT_float_2_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Pnt2f_dist(lua_State* L) {
  int SWIG_arg = 0;
  osg::Point< osg::Real32,2 > *arg1 = (osg::Point< osg::Real32,2 > *) 0 ;
  osg::Point< osg::Real32,2 > *arg2 = 0 ;
  osg::Point< float,2 >::ValueType result;
  
  SWIG_check_num_args("dist",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dist",1,"osg::Point< osg::Real32,2 > const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("dist",2,"osg::Point< osg::Real32,2 > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__PointT_float_2_t,0))){
    SWIG_fail_ptr("Pnt2f_dist",1,SWIGTYPE_p_osg__PointT_float_2_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__PointT_float_2_t,0))){
    SWIG_fail_ptr("Pnt2f_dist",2,SWIGTYPE_p_osg__PointT_float_2_t);
  }
  
  result = (osg::Point< float,2 >::ValueType)((osg::Point< osg::Real32,2 > const *)arg1)->dist((osg::Point< osg::Real32,2 > const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Pnt2f_dist2(lua_State* L) {
  int SWIG_arg = 0;
  osg::Point< osg::Real32,2 > *arg1 = (osg::Point< osg::Real32,2 > *) 0 ;
  osg::Point< osg::Real32,2 > *arg2 = 0 ;
  osg::Point< float,2 >::ValueType result;
  
  SWIG_check_num_args("dist2",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dist2",1,"osg::Point< osg::Real32,2 > const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("dist2",2,"osg::Point< osg::Real32,2 > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__PointT_float_2_t,0))){
    SWIG_fail_ptr("Pnt2f_dist2",1,SWIGTYPE_p_osg__PointT_float_2_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__PointT_float_2_t,0))){
    SWIG_fail_ptr("Pnt2f_dist2",2,SWIGTYPE_p_osg__PointT_float_2_t);
  }
  
  result = (osg::Point< float,2 >::ValueType)((osg::Point< osg::Real32,2 > const *)arg1)->dist2((osg::Point< osg::Real32,2 > const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Pnt2f_maxValue(lua_State* L) {
  int SWIG_arg = 0;
  osg::Point< osg::Real32,2 > *arg1 = (osg::Point< osg::Real32,2 > *) 0 ;
  osg::Point< float,2 >::ValueType result;
  
  SWIG_check_num_args("maxValue",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("maxValue",1,"osg::Point< osg::Real32,2 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__PointT_float_2_t,0))){
    SWIG_fail_ptr("Pnt2f_maxValue",1,SWIGTYPE_p_osg__PointT_float_2_t);
  }
  
  result = (osg::Point< float,2 >::ValueType)((osg::Point< osg::Real32,2 > const *)arg1)->maxValue();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Pnt2f(void *obj) {
osg::Point< osg::Real32,2 > *arg1 = (osg::Point< osg::Real32,2 > *) obj;
delete arg1;
}
static swig_lua_method swig_osg_Point_Sl_osg_Real32_Sc_2_Sg__methods[] = {
    {"setNull", _wrap_Pnt2f_setNull}, 
    {"setValue", _wrap_Pnt2f_setValue}, 
    {"setValueFromCString", _wrap_Pnt2f_setValueFromCString}, 
    {"getValues", _wrap_Pnt2f_getValues}, 
    {"isZero", _wrap_Pnt2f_isZero}, 
    {"negate", _wrap_Pnt2f_negate}, 
    {"equals", _wrap_Pnt2f_equals}, 
    {"subZero", _wrap_Pnt2f_subZero}, 
    {"dist", _wrap_Pnt2f_dist}, 
    {"dist2", _wrap_Pnt2f_dist2}, 
    {"maxValue", _wrap_Pnt2f_maxValue}, 
    {0,0}
};
static swig_lua_attribute swig_osg_Point_Sl_osg_Real32_Sc_2_Sg__attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_osg_Point_Sl_osg_Real32_Sc_2_Sg__bases[] = {0};
static const char *swig_osg_Point_Sl_osg_Real32_Sc_2_Sg__base_names[] = {0};
static swig_lua_class _wrap_class_osg_Point_Sl_osg_Real32_Sc_2_Sg_ = { "Pnt2f", &SWIGTYPE_p_osg__PointT_float_2_t,_wrap_new_Pnt2f, swig_delete_Pnt2f, swig_osg_Point_Sl_osg_Real32_Sc_2_Sg__methods, swig_osg_Point_Sl_osg_Real32_Sc_2_Sg__attributes, swig_osg_Point_Sl_osg_Real32_Sc_2_Sg__bases, swig_osg_Point_Sl_osg_Real32_Sc_2_Sg__base_names };

static int _wrap_new_Vec4f__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  osg::Vector< osg::Real32,4 > *result = 0 ;
  
  SWIG_check_num_args("osg::Vector<(osg::Real32,4)>",0,0)
  result = (osg::Vector< osg::Real32,4 > *)new osg::Vector< osg::Real32,4 >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_osg__VectorT_float_4_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vec4f__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = (float *) 0 ;
  osg::Vector< osg::Real32,4 > *result = 0 ;
  
  SWIG_check_num_args("osg::Vector<(osg::Real32,4)>",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("osg::Vector<(osg::Real32,4)>",1,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("new_Vec4f",1,SWIGTYPE_p_float);
  }
  
  result = (osg::Vector< osg::Real32,4 > *)new osg::Vector< osg::Real32,4 >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_osg__VectorT_float_4_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vec4f__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  osg::Vector< osg::Real32,4 > *arg1 = 0 ;
  osg::Vector< osg::Real32,4 > *result = 0 ;
  
  SWIG_check_num_args("osg::Vector<(osg::Real32,4)>",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("osg::Vector<(osg::Real32,4)>",1,"osg::Vector< osg::Real32,4 > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__VectorT_float_4_t,0))){
    SWIG_fail_ptr("new_Vec4f",1,SWIGTYPE_p_osg__VectorT_float_4_t);
  }
  
  result = (osg::Vector< osg::Real32,4 > *)new osg::Vector< osg::Real32,4 >((osg::Vector< osg::Real32,4 > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_osg__VectorT_float_4_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vec4f__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  osg::Vector< osg::Real32,4 > *result = 0 ;
  
  SWIG_check_num_args("osg::Vector<(osg::Real32,4)>",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("osg::Vector<(osg::Real32,4)>",1,"float const");
  arg1 = (float const)lua_tonumber(L, 1);
  result = (osg::Vector< osg::Real32,4 > *)new osg::Vector< osg::Real32,4 >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_osg__VectorT_float_4_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vec4f__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float arg2 ;
  osg::Vector< osg::Real32,4 > *result = 0 ;
  
  SWIG_check_num_args("osg::Vector<(osg::Real32,4)>",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("osg::Vector<(osg::Real32,4)>",1,"float const");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("osg::Vector<(osg::Real32,4)>",2,"float const");
  arg1 = (float const)lua_tonumber(L, 1);
  arg2 = (float const)lua_tonumber(L, 2);
  result = (osg::Vector< osg::Real32,4 > *)new osg::Vector< osg::Real32,4 >(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_osg__VectorT_float_4_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vec4f__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  osg::Vector< osg::Real32,4 > *result = 0 ;
  
  SWIG_check_num_args("osg::Vector<(osg::Real32,4)>",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("osg::Vector<(osg::Real32,4)>",1,"float const");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("osg::Vector<(osg::Real32,4)>",2,"float const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("osg::Vector<(osg::Real32,4)>",3,"float const");
  arg1 = (float const)lua_tonumber(L, 1);
  arg2 = (float const)lua_tonumber(L, 2);
  arg3 = (float const)lua_tonumber(L, 3);
  result = (osg::Vector< osg::Real32,4 > *)new osg::Vector< osg::Real32,4 >(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_osg__VectorT_float_4_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vec4f__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  osg::Vector< osg::Real32,4 > *result = 0 ;
  
  SWIG_check_num_args("osg::Vector<(osg::Real32,4)>",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("osg::Vector<(osg::Real32,4)>",1,"float const");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("osg::Vector<(osg::Real32,4)>",2,"float const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("osg::Vector<(osg::Real32,4)>",3,"float const");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("osg::Vector<(osg::Real32,4)>",4,"float const");
  arg1 = (float const)lua_tonumber(L, 1);
  arg2 = (float const)lua_tonumber(L, 2);
  arg3 = (float const)lua_tonumber(L, 3);
  arg4 = (float const)lua_tonumber(L, 4);
  result = (osg::Vector< osg::Real32,4 > *)new osg::Vector< osg::Real32,4 >(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_osg__VectorT_float_4_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vec4f(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Vec4f__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_float, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Vec4f__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_osg__VectorT_float_4_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Vec4f__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_Vec4f__SWIG_3(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_Vec4f__SWIG_4(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_Vec4f__SWIG_5(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_Vec4f__SWIG_6(L);
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_Vec4f'\n"
    "  Possible C/C++ prototypes are:\n"
    "    osg::Vector< osg::Real32,4 >()\n"
    "    osg::Vector< osg::Real32,4 >(float *)\n"
    "    osg::Vector< osg::Real32,4 >(osg::Vector< osg::Real32,4 > const &)\n"
    "    osg::Vector< osg::Real32,4 >(float const)\n"
    "    osg::Vector< osg::Real32,4 >(float const,float const)\n"
    "    osg::Vector< osg::Real32,4 >(float const,float const,float const)\n"
    "    osg::Vector< osg::Real32,4 >(float const,float const,float const,float const)\n");
  lua_error(L);return 0;
}


static int _wrap_Vec4f_length(lua_State* L) {
  int SWIG_arg = 0;
  osg::Vector< osg::Real32,4 > *arg1 = (osg::Vector< osg::Real32,4 > *) 0 ;
  osg::Vector< float,4 >::ValueType result;
  
  SWIG_check_num_args("length",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("length",1,"osg::Vector< osg::Real32,4 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__VectorT_float_4_t,0))){
    SWIG_fail_ptr("Vec4f_length",1,SWIGTYPE_p_osg__VectorT_float_4_t);
  }
  
  result = (osg::Vector< float,4 >::ValueType)((osg::Vector< osg::Real32,4 > const *)arg1)->length();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vec4f_squareLength(lua_State* L) {
  int SWIG_arg = 0;
  osg::Vector< osg::Real32,4 > *arg1 = (osg::Vector< osg::Real32,4 > *) 0 ;
  osg::Vector< float,4 >::ValueType result;
  
  SWIG_check_num_args("squareLength",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("squareLength",1,"osg::Vector< osg::Real32,4 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__VectorT_float_4_t,0))){
    SWIG_fail_ptr("Vec4f_squareLength",1,SWIGTYPE_p_osg__VectorT_float_4_t);
  }
  
  result = (osg::Vector< float,4 >::ValueType)((osg::Vector< osg::Real32,4 > const *)arg1)->squareLength();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vec4f_normalize(lua_State* L) {
  int SWIG_arg = 0;
  osg::Vector< osg::Real32,4 > *arg1 = (osg::Vector< osg::Real32,4 > *) 0 ;
  
  SWIG_check_num_args("normalize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("normalize",1,"osg::Vector< osg::Real32,4 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__VectorT_float_4_t,0))){
    SWIG_fail_ptr("Vec4f_normalize",1,SWIGTYPE_p_osg__VectorT_float_4_t);
  }
  
  (arg1)->normalize();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vec4f_cross(lua_State* L) {
  int SWIG_arg = 0;
  osg::Vector< osg::Real32,4 > *arg1 = (osg::Vector< osg::Real32,4 > *) 0 ;
  osg::Vector< osg::Real32,4 > *arg2 = 0 ;
  osg::Vector< osg::Real32,4 > result;
  
  SWIG_check_num_args("cross",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cross",1,"osg::Vector< osg::Real32,4 > const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("cross",2,"osg::Vector< osg::Real32,4 > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__VectorT_float_4_t,0))){
    SWIG_fail_ptr("Vec4f_cross",1,SWIGTYPE_p_osg__VectorT_float_4_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__VectorT_float_4_t,0))){
    SWIG_fail_ptr("Vec4f_cross",2,SWIGTYPE_p_osg__VectorT_float_4_t);
  }
  
  result = ((osg::Vector< osg::Real32,4 > const *)arg1)->cross((osg::Vector< osg::Real32,4 > const &)*arg2);
  {
    osg::Vector< osg::Real32,4 > * resultptr = new osg::Vector< osg::Real32,4 >((const osg::Vector< osg::Real32,4 > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_osg__VectorT_float_4_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vec4f_crossThis(lua_State* L) {
  int SWIG_arg = 0;
  osg::Vector< osg::Real32,4 > *arg1 = (osg::Vector< osg::Real32,4 > *) 0 ;
  osg::Vector< osg::Real32,4 > *arg2 = 0 ;
  
  SWIG_check_num_args("crossThis",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("crossThis",1,"osg::Vector< osg::Real32,4 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("crossThis",2,"osg::Vector< osg::Real32,4 > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__VectorT_float_4_t,0))){
    SWIG_fail_ptr("Vec4f_crossThis",1,SWIGTYPE_p_osg__VectorT_float_4_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__VectorT_float_4_t,0))){
    SWIG_fail_ptr("Vec4f_crossThis",2,SWIGTYPE_p_osg__VectorT_float_4_t);
  }
  
  (arg1)->crossThis((osg::Vector< osg::Real32,4 > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vec4f_dot__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  osg::Vector< osg::Real32,4 > *arg1 = (osg::Vector< osg::Real32,4 > *) 0 ;
  osg::Vector< osg::Real32,4 > *arg2 = 0 ;
  float result;
  
  SWIG_check_num_args("dot",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dot",1,"osg::Vector< osg::Real32,4 > const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("dot",2,"osg::Vector< osg::Real32,4 > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__VectorT_float_4_t,0))){
    SWIG_fail_ptr("Vec4f_dot",1,SWIGTYPE_p_osg__VectorT_float_4_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__VectorT_float_4_t,0))){
    SWIG_fail_ptr("Vec4f_dot",2,SWIGTYPE_p_osg__VectorT_float_4_t);
  }
  
  result = (float)((osg::Vector< osg::Real32,4 > const *)arg1)->dot((osg::Vector< osg::Real32,4 > const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vec4f___mul__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  osg::Vector< osg::Real32,4 > *arg1 = (osg::Vector< osg::Real32,4 > *) 0 ;
  osg::Vector< osg::Real32,4 > *arg2 = 0 ;
  float result;
  
  SWIG_check_num_args("operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("operator *",1,"osg::Vector< osg::Real32,4 > const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("operator *",2,"osg::Vector< osg::Real32,4 > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__VectorT_float_4_t,0))){
    SWIG_fail_ptr("Vec4f___mul",1,SWIGTYPE_p_osg__VectorT_float_4_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__VectorT_float_4_t,0))){
    SWIG_fail_ptr("Vec4f___mul",2,SWIGTYPE_p_osg__VectorT_float_4_t);
  }
  
  result = (float)((osg::Vector< osg::Real32,4 > const *)arg1)->operator *((osg::Vector< osg::Real32,4 > const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vec4f_dot__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  osg::Vector< osg::Real32,4 > *arg1 = (osg::Vector< osg::Real32,4 > *) 0 ;
  osg::Point< float,4 >::PointType *arg2 = 0 ;
  float result;
  
  SWIG_check_num_args("dot",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dot",1,"osg::Vector< osg::Real32,4 > const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("dot",2,"osg::Point< float,4 >::PointType const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__VectorT_float_4_t,0))){
    SWIG_fail_ptr("Vec4f_dot",1,SWIGTYPE_p_osg__VectorT_float_4_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__PointT_float_4_t,0))){
    SWIG_fail_ptr("Vec4f_dot",2,SWIGTYPE_p_osg__PointT_float_4_t);
  }
  
  result = (float)((osg::Vector< osg::Real32,4 > const *)arg1)->dot((osg::Point< float,4 >::PointType const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vec4f_dot(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_osg__VectorT_float_4_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_osg__VectorT_float_4_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Vec4f_dot__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_osg__VectorT_float_4_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_osg__PointT_float_4_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Vec4f_dot__SWIG_1(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'Vec4f_dot'\n"
    "  Possible C/C++ prototypes are:\n"
    "    dot(osg::Vector< osg::Real32,4 > const *,osg::Vector< osg::Real32,4 > const &)\n"
    "    dot(osg::Vector< osg::Real32,4 > const *,osg::Point< float,4 >::PointType const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Vec4f___mul__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  osg::Vector< osg::Real32,4 > *arg1 = (osg::Vector< osg::Real32,4 > *) 0 ;
  osg::Point< float,4 >::PointType *arg2 = 0 ;
  float result;
  
  SWIG_check_num_args("operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("operator *",1,"osg::Vector< osg::Real32,4 > const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("operator *",2,"osg::Point< float,4 >::PointType const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__VectorT_float_4_t,0))){
    SWIG_fail_ptr("Vec4f___mul",1,SWIGTYPE_p_osg__VectorT_float_4_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__PointT_float_4_t,0))){
    SWIG_fail_ptr("Vec4f___mul",2,SWIGTYPE_p_osg__PointT_float_4_t);
  }
  
  result = (float)((osg::Vector< osg::Real32,4 > const *)arg1)->operator *((osg::Point< float,4 >::PointType const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vec4f_enclosedAngle(lua_State* L) {
  int SWIG_arg = 0;
  osg::Vector< osg::Real32,4 > *arg1 = (osg::Vector< osg::Real32,4 > *) 0 ;
  osg::Vector< osg::Real32,4 > *arg2 = 0 ;
  float result;
  
  SWIG_check_num_args("enclosedAngle",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("enclosedAngle",1,"osg::Vector< osg::Real32,4 > const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("enclosedAngle",2,"osg::Vector< osg::Real32,4 > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__VectorT_float_4_t,0))){
    SWIG_fail_ptr("Vec4f_enclosedAngle",1,SWIGTYPE_p_osg__VectorT_float_4_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__VectorT_float_4_t,0))){
    SWIG_fail_ptr("Vec4f_enclosedAngle",2,SWIGTYPE_p_osg__VectorT_float_4_t);
  }
  
  result = (float)((osg::Vector< osg::Real32,4 > const *)arg1)->enclosedAngle((osg::Vector< osg::Real32,4 > const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vec4f_projectTo(lua_State* L) {
  int SWIG_arg = 0;
  osg::Vector< osg::Real32,4 > *arg1 = (osg::Vector< osg::Real32,4 > *) 0 ;
  osg::Vector< osg::Real32,4 > *arg2 = 0 ;
  float result;
  
  SWIG_check_num_args("projectTo",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("projectTo",1,"osg::Vector< osg::Real32,4 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("projectTo",2,"osg::Vector< osg::Real32,4 > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__VectorT_float_4_t,0))){
    SWIG_fail_ptr("Vec4f_projectTo",1,SWIGTYPE_p_osg__VectorT_float_4_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__VectorT_float_4_t,0))){
    SWIG_fail_ptr("Vec4f_projectTo",2,SWIGTYPE_p_osg__VectorT_float_4_t);
  }
  
  result = (float)(arg1)->projectTo((osg::Vector< osg::Real32,4 > const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vec4f_addToZero(lua_State* L) {
  int SWIG_arg = 0;
  osg::Vector< osg::Real32,4 > *arg1 = (osg::Vector< osg::Real32,4 > *) 0 ;
  osg::Point< float,4 >::PointType *result = 0 ;
  
  SWIG_check_num_args("addToZero",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("addToZero",1,"osg::Vector< osg::Real32,4 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__VectorT_float_4_t,0))){
    SWIG_fail_ptr("Vec4f_addToZero",1,SWIGTYPE_p_osg__VectorT_float_4_t);
  }
  
  result = (osg::Point< float,4 >::PointType *) &(arg1)->addToZero();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_osg__PointT_float_4_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vec4f_subZero(lua_State* L) {
  int SWIG_arg = 0;
  osg::Vector< osg::Real32,4 > *arg1 = (osg::Vector< osg::Real32,4 > *) 0 ;
  osg::Vector< osg::Real32,4 > *result = 0 ;
  
  SWIG_check_num_args("subZero",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("subZero",1,"osg::Vector< osg::Real32,4 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__VectorT_float_4_t,0))){
    SWIG_fail_ptr("Vec4f_subZero",1,SWIGTYPE_p_osg__VectorT_float_4_t);
  }
  
  result = (osg::Vector< osg::Real32,4 > *) &(arg1)->subZero();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_osg__VectorT_float_4_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vec4f___sub(lua_State* L) {
  int SWIG_arg = 0;
  osg::Vector< osg::Real32,4 > *arg1 = (osg::Vector< osg::Real32,4 > *) 0 ;
  osg::Vector< osg::Real32,4 > *arg2 = 0 ;
  osg::Vector< osg::Real32,4 > result;
  
  SWIG_check_num_args("operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("operator -",1,"osg::Vector< osg::Real32,4 > const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("operator -",2,"osg::Vector< osg::Real32,4 > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__VectorT_float_4_t,0))){
    SWIG_fail_ptr("Vec4f___sub",1,SWIGTYPE_p_osg__VectorT_float_4_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__VectorT_float_4_t,0))){
    SWIG_fail_ptr("Vec4f___sub",2,SWIGTYPE_p_osg__VectorT_float_4_t);
  }
  
  result = ((osg::Vector< osg::Real32,4 > const *)arg1)->operator -((osg::Vector< osg::Real32,4 > const &)*arg2);
  {
    osg::Vector< osg::Real32,4 > * resultptr = new osg::Vector< osg::Real32,4 >((const osg::Vector< osg::Real32,4 > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_osg__VectorT_float_4_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vec4f___add(lua_State* L) {
  int SWIG_arg = 0;
  osg::Vector< osg::Real32,4 > *arg1 = (osg::Vector< osg::Real32,4 > *) 0 ;
  osg::Vector< osg::Real32,4 > *arg2 = 0 ;
  osg::Vector< osg::Real32,4 > result;
  
  SWIG_check_num_args("operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("operator +",1,"osg::Vector< osg::Real32,4 > const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("operator +",2,"osg::Vector< osg::Real32,4 > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__VectorT_float_4_t,0))){
    SWIG_fail_ptr("Vec4f___add",1,SWIGTYPE_p_osg__VectorT_float_4_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__VectorT_float_4_t,0))){
    SWIG_fail_ptr("Vec4f___add",2,SWIGTYPE_p_osg__VectorT_float_4_t);
  }
  
  result = ((osg::Vector< osg::Real32,4 > const *)arg1)->operator +((osg::Vector< osg::Real32,4 > const &)*arg2);
  {
    osg::Vector< osg::Real32,4 > * resultptr = new osg::Vector< osg::Real32,4 >((const osg::Vector< osg::Real32,4 > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_osg__VectorT_float_4_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vec4f___mul__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  osg::Vector< osg::Real32,4 > *arg1 = (osg::Vector< osg::Real32,4 > *) 0 ;
  float arg2 ;
  osg::Vector< osg::Real32,4 > result;
  
  SWIG_check_num_args("operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("operator *",1,"osg::Vector< osg::Real32,4 > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("operator *",2,"float const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__VectorT_float_4_t,0))){
    SWIG_fail_ptr("Vec4f___mul",1,SWIGTYPE_p_osg__VectorT_float_4_t);
  }
  
  arg2 = (float const)lua_tonumber(L, 2);
  result = ((osg::Vector< osg::Real32,4 > const *)arg1)->operator *(arg2);
  {
    osg::Vector< osg::Real32,4 > * resultptr = new osg::Vector< osg::Real32,4 >((const osg::Vector< osg::Real32,4 > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_osg__VectorT_float_4_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vec4f___mul(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_osg__VectorT_float_4_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_osg__VectorT_float_4_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Vec4f___mul__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_osg__VectorT_float_4_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_osg__PointT_float_4_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Vec4f___mul__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_osg__VectorT_float_4_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Vec4f___mul__SWIG_2(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'Vec4f___mul'\n"
    "  Possible C/C++ prototypes are:\n"
    "    operator *(osg::Vector< osg::Real32,4 > const *,osg::Vector< osg::Real32,4 > const &)\n"
    "    operator *(osg::Vector< osg::Real32,4 > const *,osg::Point< float,4 >::PointType const &)\n"
    "    operator *(osg::Vector< osg::Real32,4 > const *,float const)\n");
  lua_error(L);return 0;
}


static int _wrap_Vec4f___unm(lua_State* L) {
  int SWIG_arg = 0;
  osg::Vector< osg::Real32,4 > *arg1 = (osg::Vector< osg::Real32,4 > *) 0 ;
  osg::Vector< osg::Real32,4 > result;
  
  SWIG_check_num_args("operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("operator -",1,"osg::Vector< osg::Real32,4 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__VectorT_float_4_t,0))){
    SWIG_fail_ptr("Vec4f___unm",1,SWIGTYPE_p_osg__VectorT_float_4_t);
  }
  
  result = ((osg::Vector< osg::Real32,4 > const *)arg1)->operator -();
  {
    osg::Vector< osg::Real32,4 > * resultptr = new osg::Vector< osg::Real32,4 >((const osg::Vector< osg::Real32,4 > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_osg__VectorT_float_4_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vec4f___lt(lua_State* L) {
  int SWIG_arg = 0;
  osg::Vector< osg::Real32,4 > *arg1 = (osg::Vector< osg::Real32,4 > *) 0 ;
  osg::Vector< osg::Real32,4 > *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("operator <",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("operator <",1,"osg::Vector< osg::Real32,4 > const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("operator <",2,"osg::Vector< osg::Real32,4 > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__VectorT_float_4_t,0))){
    SWIG_fail_ptr("Vec4f___lt",1,SWIGTYPE_p_osg__VectorT_float_4_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__VectorT_float_4_t,0))){
    SWIG_fail_ptr("Vec4f___lt",2,SWIGTYPE_p_osg__VectorT_float_4_t);
  }
  
  result = (bool)((osg::Vector< osg::Real32,4 > const *)arg1)->operator <((osg::Vector< osg::Real32,4 > const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vec4f___eq(lua_State* L) {
  int SWIG_arg = 0;
  osg::Vector< osg::Real32,4 > *arg1 = (osg::Vector< osg::Real32,4 > *) 0 ;
  osg::Vector< osg::Real32,4 > *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("operator ==",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("operator ==",1,"osg::Vector< osg::Real32,4 > const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("operator ==",2,"osg::Vector< osg::Real32,4 > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__VectorT_float_4_t,0))){
    SWIG_fail_ptr("Vec4f___eq",1,SWIGTYPE_p_osg__VectorT_float_4_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__VectorT_float_4_t,0))){
    SWIG_fail_ptr("Vec4f___eq",2,SWIGTYPE_p_osg__VectorT_float_4_t);
  }
  
  result = (bool)((osg::Vector< osg::Real32,4 > const *)arg1)->operator ==((osg::Vector< osg::Real32,4 > const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Vec4f(void *obj) {
osg::Vector< osg::Real32,4 > *arg1 = (osg::Vector< osg::Real32,4 > *) obj;
delete arg1;
}
static swig_lua_method swig_osg_Vector_Sl_osg_Real32_Sc_4_Sg__methods[] = {
    {"length", _wrap_Vec4f_length}, 
    {"squareLength", _wrap_Vec4f_squareLength}, 
    {"normalize", _wrap_Vec4f_normalize}, 
    {"cross", _wrap_Vec4f_cross}, 
    {"crossThis", _wrap_Vec4f_crossThis}, 
    {"dot", _wrap_Vec4f_dot}, 
    {"enclosedAngle", _wrap_Vec4f_enclosedAngle}, 
    {"projectTo", _wrap_Vec4f_projectTo}, 
    {"addToZero", _wrap_Vec4f_addToZero}, 
    {"subZero", _wrap_Vec4f_subZero}, 
    {"__sub", _wrap_Vec4f___sub}, 
    {"__add", _wrap_Vec4f___add}, 
    {"__mul", _wrap_Vec4f___mul}, 
    {"__unm", _wrap_Vec4f___unm}, 
    {"__lt", _wrap_Vec4f___lt}, 
    {"__eq", _wrap_Vec4f___eq}, 
    {0,0}
};
static swig_lua_attribute swig_osg_Vector_Sl_osg_Real32_Sc_4_Sg__attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_osg_Vector_Sl_osg_Real32_Sc_4_Sg__bases[] = {0,0};
static const char *swig_osg_Vector_Sl_osg_Real32_Sc_4_Sg__base_names[] = {"osg::Point< osg::Real32,4 > *",0};
static swig_lua_class _wrap_class_osg_Vector_Sl_osg_Real32_Sc_4_Sg_ = { "Vec4f", &SWIGTYPE_p_osg__VectorT_float_4_t,_wrap_new_Vec4f, swig_delete_Vec4f, swig_osg_Vector_Sl_osg_Real32_Sc_4_Sg__methods, swig_osg_Vector_Sl_osg_Real32_Sc_4_Sg__attributes, swig_osg_Vector_Sl_osg_Real32_Sc_4_Sg__bases, swig_osg_Vector_Sl_osg_Real32_Sc_4_Sg__base_names };

static int _wrap_new_Vec3f__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  osg::Vector< osg::Real32,3 > *result = 0 ;
  
  SWIG_check_num_args("osg::Vector<(osg::Real32,3)>",0,0)
  result = (osg::Vector< osg::Real32,3 > *)new osg::Vector< osg::Real32,3 >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_osg__VectorT_float_3_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vec3f__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = (float *) 0 ;
  osg::Vector< osg::Real32,3 > *result = 0 ;
  
  SWIG_check_num_args("osg::Vector<(osg::Real32,3)>",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("osg::Vector<(osg::Real32,3)>",1,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("new_Vec3f",1,SWIGTYPE_p_float);
  }
  
  result = (osg::Vector< osg::Real32,3 > *)new osg::Vector< osg::Real32,3 >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_osg__VectorT_float_3_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vec3f__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  osg::Vector< osg::Real32,3 > *arg1 = 0 ;
  osg::Vector< osg::Real32,3 > *result = 0 ;
  
  SWIG_check_num_args("osg::Vector<(osg::Real32,3)>",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("osg::Vector<(osg::Real32,3)>",1,"osg::Vector< osg::Real32,3 > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__VectorT_float_3_t,0))){
    SWIG_fail_ptr("new_Vec3f",1,SWIGTYPE_p_osg__VectorT_float_3_t);
  }
  
  result = (osg::Vector< osg::Real32,3 > *)new osg::Vector< osg::Real32,3 >((osg::Vector< osg::Real32,3 > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_osg__VectorT_float_3_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vec3f__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  osg::Vector< osg::Real32,3 > *result = 0 ;
  
  SWIG_check_num_args("osg::Vector<(osg::Real32,3)>",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("osg::Vector<(osg::Real32,3)>",1,"float const");
  arg1 = (float const)lua_tonumber(L, 1);
  result = (osg::Vector< osg::Real32,3 > *)new osg::Vector< osg::Real32,3 >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_osg__VectorT_float_3_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vec3f__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float arg2 ;
  osg::Vector< osg::Real32,3 > *result = 0 ;
  
  SWIG_check_num_args("osg::Vector<(osg::Real32,3)>",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("osg::Vector<(osg::Real32,3)>",1,"float const");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("osg::Vector<(osg::Real32,3)>",2,"float const");
  arg1 = (float const)lua_tonumber(L, 1);
  arg2 = (float const)lua_tonumber(L, 2);
  result = (osg::Vector< osg::Real32,3 > *)new osg::Vector< osg::Real32,3 >(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_osg__VectorT_float_3_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vec3f__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  osg::Vector< osg::Real32,3 > *result = 0 ;
  
  SWIG_check_num_args("osg::Vector<(osg::Real32,3)>",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("osg::Vector<(osg::Real32,3)>",1,"float const");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("osg::Vector<(osg::Real32,3)>",2,"float const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("osg::Vector<(osg::Real32,3)>",3,"float const");
  arg1 = (float const)lua_tonumber(L, 1);
  arg2 = (float const)lua_tonumber(L, 2);
  arg3 = (float const)lua_tonumber(L, 3);
  result = (osg::Vector< osg::Real32,3 > *)new osg::Vector< osg::Real32,3 >(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_osg__VectorT_float_3_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vec3f__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  osg::Vector< osg::Real32,3 > *result = 0 ;
  
  SWIG_check_num_args("osg::Vector<(osg::Real32,3)>",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("osg::Vector<(osg::Real32,3)>",1,"float const");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("osg::Vector<(osg::Real32,3)>",2,"float const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("osg::Vector<(osg::Real32,3)>",3,"float const");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("osg::Vector<(osg::Real32,3)>",4,"float const");
  arg1 = (float const)lua_tonumber(L, 1);
  arg2 = (float const)lua_tonumber(L, 2);
  arg3 = (float const)lua_tonumber(L, 3);
  arg4 = (float const)lua_tonumber(L, 4);
  result = (osg::Vector< osg::Real32,3 > *)new osg::Vector< osg::Real32,3 >(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_osg__VectorT_float_3_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vec3f(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Vec3f__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_float, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Vec3f__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_osg__VectorT_float_3_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Vec3f__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_Vec3f__SWIG_3(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_Vec3f__SWIG_4(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_Vec3f__SWIG_5(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_Vec3f__SWIG_6(L);
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_Vec3f'\n"
    "  Possible C/C++ prototypes are:\n"
    "    osg::Vector< osg::Real32,3 >()\n"
    "    osg::Vector< osg::Real32,3 >(float *)\n"
    "    osg::Vector< osg::Real32,3 >(osg::Vector< osg::Real32,3 > const &)\n"
    "    osg::Vector< osg::Real32,3 >(float const)\n"
    "    osg::Vector< osg::Real32,3 >(float const,float const)\n"
    "    osg::Vector< osg::Real32,3 >(float const,float const,float const)\n"
    "    osg::Vector< osg::Real32,3 >(float const,float const,float const,float const)\n");
  lua_error(L);return 0;
}


static int _wrap_Vec3f_length(lua_State* L) {
  int SWIG_arg = 0;
  osg::Vector< osg::Real32,3 > *arg1 = (osg::Vector< osg::Real32,3 > *) 0 ;
  osg::Vector< float,3 >::ValueType result;
  
  SWIG_check_num_args("length",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("length",1,"osg::Vector< osg::Real32,3 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__VectorT_float_3_t,0))){
    SWIG_fail_ptr("Vec3f_length",1,SWIGTYPE_p_osg__VectorT_float_3_t);
  }
  
  result = (osg::Vector< float,3 >::ValueType)((osg::Vector< osg::Real32,3 > const *)arg1)->length();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vec3f_squareLength(lua_State* L) {
  int SWIG_arg = 0;
  osg::Vector< osg::Real32,3 > *arg1 = (osg::Vector< osg::Real32,3 > *) 0 ;
  osg::Vector< float,3 >::ValueType result;
  
  SWIG_check_num_args("squareLength",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("squareLength",1,"osg::Vector< osg::Real32,3 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__VectorT_float_3_t,0))){
    SWIG_fail_ptr("Vec3f_squareLength",1,SWIGTYPE_p_osg__VectorT_float_3_t);
  }
  
  result = (osg::Vector< float,3 >::ValueType)((osg::Vector< osg::Real32,3 > const *)arg1)->squareLength();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vec3f_normalize(lua_State* L) {
  int SWIG_arg = 0;
  osg::Vector< osg::Real32,3 > *arg1 = (osg::Vector< osg::Real32,3 > *) 0 ;
  
  SWIG_check_num_args("normalize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("normalize",1,"osg::Vector< osg::Real32,3 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__VectorT_float_3_t,0))){
    SWIG_fail_ptr("Vec3f_normalize",1,SWIGTYPE_p_osg__VectorT_float_3_t);
  }
  
  (arg1)->normalize();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vec3f_cross(lua_State* L) {
  int SWIG_arg = 0;
  osg::Vector< osg::Real32,3 > *arg1 = (osg::Vector< osg::Real32,3 > *) 0 ;
  osg::Vector< osg::Real32,3 > *arg2 = 0 ;
  osg::Vector< osg::Real32,3 > result;
  
  SWIG_check_num_args("cross",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cross",1,"osg::Vector< osg::Real32,3 > const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("cross",2,"osg::Vector< osg::Real32,3 > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__VectorT_float_3_t,0))){
    SWIG_fail_ptr("Vec3f_cross",1,SWIGTYPE_p_osg__VectorT_float_3_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__VectorT_float_3_t,0))){
    SWIG_fail_ptr("Vec3f_cross",2,SWIGTYPE_p_osg__VectorT_float_3_t);
  }
  
  result = ((osg::Vector< osg::Real32,3 > const *)arg1)->cross((osg::Vector< osg::Real32,3 > const &)*arg2);
  {
    osg::Vector< osg::Real32,3 > * resultptr = new osg::Vector< osg::Real32,3 >((const osg::Vector< osg::Real32,3 > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_osg__VectorT_float_3_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vec3f_crossThis(lua_State* L) {
  int SWIG_arg = 0;
  osg::Vector< osg::Real32,3 > *arg1 = (osg::Vector< osg::Real32,3 > *) 0 ;
  osg::Vector< osg::Real32,3 > *arg2 = 0 ;
  
  SWIG_check_num_args("crossThis",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("crossThis",1,"osg::Vector< osg::Real32,3 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("crossThis",2,"osg::Vector< osg::Real32,3 > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__VectorT_float_3_t,0))){
    SWIG_fail_ptr("Vec3f_crossThis",1,SWIGTYPE_p_osg__VectorT_float_3_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__VectorT_float_3_t,0))){
    SWIG_fail_ptr("Vec3f_crossThis",2,SWIGTYPE_p_osg__VectorT_float_3_t);
  }
  
  (arg1)->crossThis((osg::Vector< osg::Real32,3 > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vec3f_dot__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  osg::Vector< osg::Real32,3 > *arg1 = (osg::Vector< osg::Real32,3 > *) 0 ;
  osg::Vector< osg::Real32,3 > *arg2 = 0 ;
  float result;
  
  SWIG_check_num_args("dot",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dot",1,"osg::Vector< osg::Real32,3 > const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("dot",2,"osg::Vector< osg::Real32,3 > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__VectorT_float_3_t,0))){
    SWIG_fail_ptr("Vec3f_dot",1,SWIGTYPE_p_osg__VectorT_float_3_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__VectorT_float_3_t,0))){
    SWIG_fail_ptr("Vec3f_dot",2,SWIGTYPE_p_osg__VectorT_float_3_t);
  }
  
  result = (float)((osg::Vector< osg::Real32,3 > const *)arg1)->dot((osg::Vector< osg::Real32,3 > const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vec3f___mul__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  osg::Vector< osg::Real32,3 > *arg1 = (osg::Vector< osg::Real32,3 > *) 0 ;
  osg::Vector< osg::Real32,3 > *arg2 = 0 ;
  float result;
  
  SWIG_check_num_args("operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("operator *",1,"osg::Vector< osg::Real32,3 > const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("operator *",2,"osg::Vector< osg::Real32,3 > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__VectorT_float_3_t,0))){
    SWIG_fail_ptr("Vec3f___mul",1,SWIGTYPE_p_osg__VectorT_float_3_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__VectorT_float_3_t,0))){
    SWIG_fail_ptr("Vec3f___mul",2,SWIGTYPE_p_osg__VectorT_float_3_t);
  }
  
  result = (float)((osg::Vector< osg::Real32,3 > const *)arg1)->operator *((osg::Vector< osg::Real32,3 > const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vec3f_dot__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  osg::Vector< osg::Real32,3 > *arg1 = (osg::Vector< osg::Real32,3 > *) 0 ;
  osg::Point< float,3 >::PointType *arg2 = 0 ;
  float result;
  
  SWIG_check_num_args("dot",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dot",1,"osg::Vector< osg::Real32,3 > const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("dot",2,"osg::Point< float,3 >::PointType const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__VectorT_float_3_t,0))){
    SWIG_fail_ptr("Vec3f_dot",1,SWIGTYPE_p_osg__VectorT_float_3_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__PointT_float_3_t,0))){
    SWIG_fail_ptr("Vec3f_dot",2,SWIGTYPE_p_osg__PointT_float_3_t);
  }
  
  result = (float)((osg::Vector< osg::Real32,3 > const *)arg1)->dot((osg::Point< float,3 >::PointType const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vec3f_dot(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_osg__VectorT_float_3_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_osg__VectorT_float_3_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Vec3f_dot__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_osg__VectorT_float_3_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_osg__PointT_float_3_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Vec3f_dot__SWIG_1(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'Vec3f_dot'\n"
    "  Possible C/C++ prototypes are:\n"
    "    dot(osg::Vector< osg::Real32,3 > const *,osg::Vector< osg::Real32,3 > const &)\n"
    "    dot(osg::Vector< osg::Real32,3 > const *,osg::Point< float,3 >::PointType const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Vec3f___mul__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  osg::Vector< osg::Real32,3 > *arg1 = (osg::Vector< osg::Real32,3 > *) 0 ;
  osg::Point< float,3 >::PointType *arg2 = 0 ;
  float result;
  
  SWIG_check_num_args("operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("operator *",1,"osg::Vector< osg::Real32,3 > const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("operator *",2,"osg::Point< float,3 >::PointType const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__VectorT_float_3_t,0))){
    SWIG_fail_ptr("Vec3f___mul",1,SWIGTYPE_p_osg__VectorT_float_3_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__PointT_float_3_t,0))){
    SWIG_fail_ptr("Vec3f___mul",2,SWIGTYPE_p_osg__PointT_float_3_t);
  }
  
  result = (float)((osg::Vector< osg::Real32,3 > const *)arg1)->operator *((osg::Point< float,3 >::PointType const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vec3f_enclosedAngle(lua_State* L) {
  int SWIG_arg = 0;
  osg::Vector< osg::Real32,3 > *arg1 = (osg::Vector< osg::Real32,3 > *) 0 ;
  osg::Vector< osg::Real32,3 > *arg2 = 0 ;
  float result;
  
  SWIG_check_num_args("enclosedAngle",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("enclosedAngle",1,"osg::Vector< osg::Real32,3 > const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("enclosedAngle",2,"osg::Vector< osg::Real32,3 > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__VectorT_float_3_t,0))){
    SWIG_fail_ptr("Vec3f_enclosedAngle",1,SWIGTYPE_p_osg__VectorT_float_3_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__VectorT_float_3_t,0))){
    SWIG_fail_ptr("Vec3f_enclosedAngle",2,SWIGTYPE_p_osg__VectorT_float_3_t);
  }
  
  result = (float)((osg::Vector< osg::Real32,3 > const *)arg1)->enclosedAngle((osg::Vector< osg::Real32,3 > const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vec3f_projectTo(lua_State* L) {
  int SWIG_arg = 0;
  osg::Vector< osg::Real32,3 > *arg1 = (osg::Vector< osg::Real32,3 > *) 0 ;
  osg::Vector< osg::Real32,3 > *arg2 = 0 ;
  float result;
  
  SWIG_check_num_args("projectTo",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("projectTo",1,"osg::Vector< osg::Real32,3 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("projectTo",2,"osg::Vector< osg::Real32,3 > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__VectorT_float_3_t,0))){
    SWIG_fail_ptr("Vec3f_projectTo",1,SWIGTYPE_p_osg__VectorT_float_3_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__VectorT_float_3_t,0))){
    SWIG_fail_ptr("Vec3f_projectTo",2,SWIGTYPE_p_osg__VectorT_float_3_t);
  }
  
  result = (float)(arg1)->projectTo((osg::Vector< osg::Real32,3 > const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vec3f_addToZero(lua_State* L) {
  int SWIG_arg = 0;
  osg::Vector< osg::Real32,3 > *arg1 = (osg::Vector< osg::Real32,3 > *) 0 ;
  osg::Point< float,3 >::PointType *result = 0 ;
  
  SWIG_check_num_args("addToZero",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("addToZero",1,"osg::Vector< osg::Real32,3 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__VectorT_float_3_t,0))){
    SWIG_fail_ptr("Vec3f_addToZero",1,SWIGTYPE_p_osg__VectorT_float_3_t);
  }
  
  result = (osg::Point< float,3 >::PointType *) &(arg1)->addToZero();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_osg__PointT_float_3_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vec3f_subZero(lua_State* L) {
  int SWIG_arg = 0;
  osg::Vector< osg::Real32,3 > *arg1 = (osg::Vector< osg::Real32,3 > *) 0 ;
  osg::Vector< osg::Real32,3 > *result = 0 ;
  
  SWIG_check_num_args("subZero",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("subZero",1,"osg::Vector< osg::Real32,3 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__VectorT_float_3_t,0))){
    SWIG_fail_ptr("Vec3f_subZero",1,SWIGTYPE_p_osg__VectorT_float_3_t);
  }
  
  result = (osg::Vector< osg::Real32,3 > *) &(arg1)->subZero();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_osg__VectorT_float_3_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vec3f___sub(lua_State* L) {
  int SWIG_arg = 0;
  osg::Vector< osg::Real32,3 > *arg1 = (osg::Vector< osg::Real32,3 > *) 0 ;
  osg::Vector< osg::Real32,3 > *arg2 = 0 ;
  osg::Vector< osg::Real32,3 > result;
  
  SWIG_check_num_args("operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("operator -",1,"osg::Vector< osg::Real32,3 > const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("operator -",2,"osg::Vector< osg::Real32,3 > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__VectorT_float_3_t,0))){
    SWIG_fail_ptr("Vec3f___sub",1,SWIGTYPE_p_osg__VectorT_float_3_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__VectorT_float_3_t,0))){
    SWIG_fail_ptr("Vec3f___sub",2,SWIGTYPE_p_osg__VectorT_float_3_t);
  }
  
  result = ((osg::Vector< osg::Real32,3 > const *)arg1)->operator -((osg::Vector< osg::Real32,3 > const &)*arg2);
  {
    osg::Vector< osg::Real32,3 > * resultptr = new osg::Vector< osg::Real32,3 >((const osg::Vector< osg::Real32,3 > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_osg__VectorT_float_3_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vec3f___add(lua_State* L) {
  int SWIG_arg = 0;
  osg::Vector< osg::Real32,3 > *arg1 = (osg::Vector< osg::Real32,3 > *) 0 ;
  osg::Vector< osg::Real32,3 > *arg2 = 0 ;
  osg::Vector< osg::Real32,3 > result;
  
  SWIG_check_num_args("operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("operator +",1,"osg::Vector< osg::Real32,3 > const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("operator +",2,"osg::Vector< osg::Real32,3 > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__VectorT_float_3_t,0))){
    SWIG_fail_ptr("Vec3f___add",1,SWIGTYPE_p_osg__VectorT_float_3_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__VectorT_float_3_t,0))){
    SWIG_fail_ptr("Vec3f___add",2,SWIGTYPE_p_osg__VectorT_float_3_t);
  }
  
  result = ((osg::Vector< osg::Real32,3 > const *)arg1)->operator +((osg::Vector< osg::Real32,3 > const &)*arg2);
  {
    osg::Vector< osg::Real32,3 > * resultptr = new osg::Vector< osg::Real32,3 >((const osg::Vector< osg::Real32,3 > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_osg__VectorT_float_3_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vec3f___mul__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  osg::Vector< osg::Real32,3 > *arg1 = (osg::Vector< osg::Real32,3 > *) 0 ;
  float arg2 ;
  osg::Vector< osg::Real32,3 > result;
  
  SWIG_check_num_args("operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("operator *",1,"osg::Vector< osg::Real32,3 > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("operator *",2,"float const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__VectorT_float_3_t,0))){
    SWIG_fail_ptr("Vec3f___mul",1,SWIGTYPE_p_osg__VectorT_float_3_t);
  }
  
  arg2 = (float const)lua_tonumber(L, 2);
  result = ((osg::Vector< osg::Real32,3 > const *)arg1)->operator *(arg2);
  {
    osg::Vector< osg::Real32,3 > * resultptr = new osg::Vector< osg::Real32,3 >((const osg::Vector< osg::Real32,3 > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_osg__VectorT_float_3_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vec3f___mul(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_osg__VectorT_float_3_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_osg__VectorT_float_3_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Vec3f___mul__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_osg__VectorT_float_3_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_osg__PointT_float_3_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Vec3f___mul__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_osg__VectorT_float_3_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Vec3f___mul__SWIG_2(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'Vec3f___mul'\n"
    "  Possible C/C++ prototypes are:\n"
    "    operator *(osg::Vector< osg::Real32,3 > const *,osg::Vector< osg::Real32,3 > const &)\n"
    "    operator *(osg::Vector< osg::Real32,3 > const *,osg::Point< float,3 >::PointType const &)\n"
    "    operator *(osg::Vector< osg::Real32,3 > const *,float const)\n");
  lua_error(L);return 0;
}


static int _wrap_Vec3f___unm(lua_State* L) {
  int SWIG_arg = 0;
  osg::Vector< osg::Real32,3 > *arg1 = (osg::Vector< osg::Real32,3 > *) 0 ;
  osg::Vector< osg::Real32,3 > result;
  
  SWIG_check_num_args("operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("operator -",1,"osg::Vector< osg::Real32,3 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__VectorT_float_3_t,0))){
    SWIG_fail_ptr("Vec3f___unm",1,SWIGTYPE_p_osg__VectorT_float_3_t);
  }
  
  result = ((osg::Vector< osg::Real32,3 > const *)arg1)->operator -();
  {
    osg::Vector< osg::Real32,3 > * resultptr = new osg::Vector< osg::Real32,3 >((const osg::Vector< osg::Real32,3 > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_osg__VectorT_float_3_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vec3f___lt(lua_State* L) {
  int SWIG_arg = 0;
  osg::Vector< osg::Real32,3 > *arg1 = (osg::Vector< osg::Real32,3 > *) 0 ;
  osg::Vector< osg::Real32,3 > *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("operator <",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("operator <",1,"osg::Vector< osg::Real32,3 > const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("operator <",2,"osg::Vector< osg::Real32,3 > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__VectorT_float_3_t,0))){
    SWIG_fail_ptr("Vec3f___lt",1,SWIGTYPE_p_osg__VectorT_float_3_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__VectorT_float_3_t,0))){
    SWIG_fail_ptr("Vec3f___lt",2,SWIGTYPE_p_osg__VectorT_float_3_t);
  }
  
  result = (bool)((osg::Vector< osg::Real32,3 > const *)arg1)->operator <((osg::Vector< osg::Real32,3 > const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vec3f___eq(lua_State* L) {
  int SWIG_arg = 0;
  osg::Vector< osg::Real32,3 > *arg1 = (osg::Vector< osg::Real32,3 > *) 0 ;
  osg::Vector< osg::Real32,3 > *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("operator ==",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("operator ==",1,"osg::Vector< osg::Real32,3 > const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("operator ==",2,"osg::Vector< osg::Real32,3 > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__VectorT_float_3_t,0))){
    SWIG_fail_ptr("Vec3f___eq",1,SWIGTYPE_p_osg__VectorT_float_3_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__VectorT_float_3_t,0))){
    SWIG_fail_ptr("Vec3f___eq",2,SWIGTYPE_p_osg__VectorT_float_3_t);
  }
  
  result = (bool)((osg::Vector< osg::Real32,3 > const *)arg1)->operator ==((osg::Vector< osg::Real32,3 > const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Vec3f(void *obj) {
osg::Vector< osg::Real32,3 > *arg1 = (osg::Vector< osg::Real32,3 > *) obj;
delete arg1;
}
static swig_lua_method swig_osg_Vector_Sl_osg_Real32_Sc_3_Sg__methods[] = {
    {"length", _wrap_Vec3f_length}, 
    {"squareLength", _wrap_Vec3f_squareLength}, 
    {"normalize", _wrap_Vec3f_normalize}, 
    {"cross", _wrap_Vec3f_cross}, 
    {"crossThis", _wrap_Vec3f_crossThis}, 
    {"dot", _wrap_Vec3f_dot}, 
    {"enclosedAngle", _wrap_Vec3f_enclosedAngle}, 
    {"projectTo", _wrap_Vec3f_projectTo}, 
    {"addToZero", _wrap_Vec3f_addToZero}, 
    {"subZero", _wrap_Vec3f_subZero}, 
    {"__sub", _wrap_Vec3f___sub}, 
    {"__add", _wrap_Vec3f___add}, 
    {"__mul", _wrap_Vec3f___mul}, 
    {"__unm", _wrap_Vec3f___unm}, 
    {"__lt", _wrap_Vec3f___lt}, 
    {"__eq", _wrap_Vec3f___eq}, 
    {0,0}
};
static swig_lua_attribute swig_osg_Vector_Sl_osg_Real32_Sc_3_Sg__attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_osg_Vector_Sl_osg_Real32_Sc_3_Sg__bases[] = {0,0};
static const char *swig_osg_Vector_Sl_osg_Real32_Sc_3_Sg__base_names[] = {"osg::Point< osg::Real32,3 > *",0};
static swig_lua_class _wrap_class_osg_Vector_Sl_osg_Real32_Sc_3_Sg_ = { "Vec3f", &SWIGTYPE_p_osg__VectorT_float_3_t,_wrap_new_Vec3f, swig_delete_Vec3f, swig_osg_Vector_Sl_osg_Real32_Sc_3_Sg__methods, swig_osg_Vector_Sl_osg_Real32_Sc_3_Sg__attributes, swig_osg_Vector_Sl_osg_Real32_Sc_3_Sg__bases, swig_osg_Vector_Sl_osg_Real32_Sc_3_Sg__base_names };

static int _wrap_new_Vec2f__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  osg::Vector< osg::Real32,2 > *result = 0 ;
  
  SWIG_check_num_args("osg::Vector<(osg::Real32,2)>",0,0)
  result = (osg::Vector< osg::Real32,2 > *)new osg::Vector< osg::Real32,2 >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_osg__VectorT_float_2_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vec2f__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = (float *) 0 ;
  osg::Vector< osg::Real32,2 > *result = 0 ;
  
  SWIG_check_num_args("osg::Vector<(osg::Real32,2)>",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("osg::Vector<(osg::Real32,2)>",1,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("new_Vec2f",1,SWIGTYPE_p_float);
  }
  
  result = (osg::Vector< osg::Real32,2 > *)new osg::Vector< osg::Real32,2 >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_osg__VectorT_float_2_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vec2f__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  osg::Vector< osg::Real32,2 > *arg1 = 0 ;
  osg::Vector< osg::Real32,2 > *result = 0 ;
  
  SWIG_check_num_args("osg::Vector<(osg::Real32,2)>",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("osg::Vector<(osg::Real32,2)>",1,"osg::Vector< osg::Real32,2 > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__VectorT_float_2_t,0))){
    SWIG_fail_ptr("new_Vec2f",1,SWIGTYPE_p_osg__VectorT_float_2_t);
  }
  
  result = (osg::Vector< osg::Real32,2 > *)new osg::Vector< osg::Real32,2 >((osg::Vector< osg::Real32,2 > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_osg__VectorT_float_2_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vec2f__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  osg::Vector< osg::Real32,2 > *result = 0 ;
  
  SWIG_check_num_args("osg::Vector<(osg::Real32,2)>",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("osg::Vector<(osg::Real32,2)>",1,"float const");
  arg1 = (float const)lua_tonumber(L, 1);
  result = (osg::Vector< osg::Real32,2 > *)new osg::Vector< osg::Real32,2 >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_osg__VectorT_float_2_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vec2f__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float arg2 ;
  osg::Vector< osg::Real32,2 > *result = 0 ;
  
  SWIG_check_num_args("osg::Vector<(osg::Real32,2)>",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("osg::Vector<(osg::Real32,2)>",1,"float const");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("osg::Vector<(osg::Real32,2)>",2,"float const");
  arg1 = (float const)lua_tonumber(L, 1);
  arg2 = (float const)lua_tonumber(L, 2);
  result = (osg::Vector< osg::Real32,2 > *)new osg::Vector< osg::Real32,2 >(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_osg__VectorT_float_2_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vec2f__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  osg::Vector< osg::Real32,2 > *result = 0 ;
  
  SWIG_check_num_args("osg::Vector<(osg::Real32,2)>",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("osg::Vector<(osg::Real32,2)>",1,"float const");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("osg::Vector<(osg::Real32,2)>",2,"float const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("osg::Vector<(osg::Real32,2)>",3,"float const");
  arg1 = (float const)lua_tonumber(L, 1);
  arg2 = (float const)lua_tonumber(L, 2);
  arg3 = (float const)lua_tonumber(L, 3);
  result = (osg::Vector< osg::Real32,2 > *)new osg::Vector< osg::Real32,2 >(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_osg__VectorT_float_2_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vec2f__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  osg::Vector< osg::Real32,2 > *result = 0 ;
  
  SWIG_check_num_args("osg::Vector<(osg::Real32,2)>",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("osg::Vector<(osg::Real32,2)>",1,"float const");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("osg::Vector<(osg::Real32,2)>",2,"float const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("osg::Vector<(osg::Real32,2)>",3,"float const");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("osg::Vector<(osg::Real32,2)>",4,"float const");
  arg1 = (float const)lua_tonumber(L, 1);
  arg2 = (float const)lua_tonumber(L, 2);
  arg3 = (float const)lua_tonumber(L, 3);
  arg4 = (float const)lua_tonumber(L, 4);
  result = (osg::Vector< osg::Real32,2 > *)new osg::Vector< osg::Real32,2 >(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_osg__VectorT_float_2_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vec2f(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Vec2f__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_float, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Vec2f__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_osg__VectorT_float_2_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Vec2f__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_Vec2f__SWIG_3(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_Vec2f__SWIG_4(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_Vec2f__SWIG_5(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_Vec2f__SWIG_6(L);
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_Vec2f'\n"
    "  Possible C/C++ prototypes are:\n"
    "    osg::Vector< osg::Real32,2 >()\n"
    "    osg::Vector< osg::Real32,2 >(float *)\n"
    "    osg::Vector< osg::Real32,2 >(osg::Vector< osg::Real32,2 > const &)\n"
    "    osg::Vector< osg::Real32,2 >(float const)\n"
    "    osg::Vector< osg::Real32,2 >(float const,float const)\n"
    "    osg::Vector< osg::Real32,2 >(float const,float const,float const)\n"
    "    osg::Vector< osg::Real32,2 >(float const,float const,float const,float const)\n");
  lua_error(L);return 0;
}


static int _wrap_Vec2f_length(lua_State* L) {
  int SWIG_arg = 0;
  osg::Vector< osg::Real32,2 > *arg1 = (osg::Vector< osg::Real32,2 > *) 0 ;
  osg::Vector< float,2 >::ValueType result;
  
  SWIG_check_num_args("length",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("length",1,"osg::Vector< osg::Real32,2 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__VectorT_float_2_t,0))){
    SWIG_fail_ptr("Vec2f_length",1,SWIGTYPE_p_osg__VectorT_float_2_t);
  }
  
  result = (osg::Vector< float,2 >::ValueType)((osg::Vector< osg::Real32,2 > const *)arg1)->length();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vec2f_squareLength(lua_State* L) {
  int SWIG_arg = 0;
  osg::Vector< osg::Real32,2 > *arg1 = (osg::Vector< osg::Real32,2 > *) 0 ;
  osg::Vector< float,2 >::ValueType result;
  
  SWIG_check_num_args("squareLength",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("squareLength",1,"osg::Vector< osg::Real32,2 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__VectorT_float_2_t,0))){
    SWIG_fail_ptr("Vec2f_squareLength",1,SWIGTYPE_p_osg__VectorT_float_2_t);
  }
  
  result = (osg::Vector< float,2 >::ValueType)((osg::Vector< osg::Real32,2 > const *)arg1)->squareLength();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vec2f_normalize(lua_State* L) {
  int SWIG_arg = 0;
  osg::Vector< osg::Real32,2 > *arg1 = (osg::Vector< osg::Real32,2 > *) 0 ;
  
  SWIG_check_num_args("normalize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("normalize",1,"osg::Vector< osg::Real32,2 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__VectorT_float_2_t,0))){
    SWIG_fail_ptr("Vec2f_normalize",1,SWIGTYPE_p_osg__VectorT_float_2_t);
  }
  
  (arg1)->normalize();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vec2f_cross(lua_State* L) {
  int SWIG_arg = 0;
  osg::Vector< osg::Real32,2 > *arg1 = (osg::Vector< osg::Real32,2 > *) 0 ;
  osg::Vector< osg::Real32,2 > *arg2 = 0 ;
  osg::Vector< osg::Real32,2 > result;
  
  SWIG_check_num_args("cross",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cross",1,"osg::Vector< osg::Real32,2 > const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("cross",2,"osg::Vector< osg::Real32,2 > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__VectorT_float_2_t,0))){
    SWIG_fail_ptr("Vec2f_cross",1,SWIGTYPE_p_osg__VectorT_float_2_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__VectorT_float_2_t,0))){
    SWIG_fail_ptr("Vec2f_cross",2,SWIGTYPE_p_osg__VectorT_float_2_t);
  }
  
  result = ((osg::Vector< osg::Real32,2 > const *)arg1)->cross((osg::Vector< osg::Real32,2 > const &)*arg2);
  {
    osg::Vector< osg::Real32,2 > * resultptr = new osg::Vector< osg::Real32,2 >((const osg::Vector< osg::Real32,2 > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_osg__VectorT_float_2_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vec2f_crossThis(lua_State* L) {
  int SWIG_arg = 0;
  osg::Vector< osg::Real32,2 > *arg1 = (osg::Vector< osg::Real32,2 > *) 0 ;
  osg::Vector< osg::Real32,2 > *arg2 = 0 ;
  
  SWIG_check_num_args("crossThis",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("crossThis",1,"osg::Vector< osg::Real32,2 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("crossThis",2,"osg::Vector< osg::Real32,2 > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__VectorT_float_2_t,0))){
    SWIG_fail_ptr("Vec2f_crossThis",1,SWIGTYPE_p_osg__VectorT_float_2_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__VectorT_float_2_t,0))){
    SWIG_fail_ptr("Vec2f_crossThis",2,SWIGTYPE_p_osg__VectorT_float_2_t);
  }
  
  (arg1)->crossThis((osg::Vector< osg::Real32,2 > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vec2f_dot__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  osg::Vector< osg::Real32,2 > *arg1 = (osg::Vector< osg::Real32,2 > *) 0 ;
  osg::Vector< osg::Real32,2 > *arg2 = 0 ;
  float result;
  
  SWIG_check_num_args("dot",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dot",1,"osg::Vector< osg::Real32,2 > const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("dot",2,"osg::Vector< osg::Real32,2 > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__VectorT_float_2_t,0))){
    SWIG_fail_ptr("Vec2f_dot",1,SWIGTYPE_p_osg__VectorT_float_2_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__VectorT_float_2_t,0))){
    SWIG_fail_ptr("Vec2f_dot",2,SWIGTYPE_p_osg__VectorT_float_2_t);
  }
  
  result = (float)((osg::Vector< osg::Real32,2 > const *)arg1)->dot((osg::Vector< osg::Real32,2 > const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vec2f___mul__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  osg::Vector< osg::Real32,2 > *arg1 = (osg::Vector< osg::Real32,2 > *) 0 ;
  osg::Vector< osg::Real32,2 > *arg2 = 0 ;
  float result;
  
  SWIG_check_num_args("operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("operator *",1,"osg::Vector< osg::Real32,2 > const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("operator *",2,"osg::Vector< osg::Real32,2 > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__VectorT_float_2_t,0))){
    SWIG_fail_ptr("Vec2f___mul",1,SWIGTYPE_p_osg__VectorT_float_2_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__VectorT_float_2_t,0))){
    SWIG_fail_ptr("Vec2f___mul",2,SWIGTYPE_p_osg__VectorT_float_2_t);
  }
  
  result = (float)((osg::Vector< osg::Real32,2 > const *)arg1)->operator *((osg::Vector< osg::Real32,2 > const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vec2f_dot__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  osg::Vector< osg::Real32,2 > *arg1 = (osg::Vector< osg::Real32,2 > *) 0 ;
  osg::Point< float,2 >::PointType *arg2 = 0 ;
  float result;
  
  SWIG_check_num_args("dot",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dot",1,"osg::Vector< osg::Real32,2 > const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("dot",2,"osg::Point< float,2 >::PointType const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__VectorT_float_2_t,0))){
    SWIG_fail_ptr("Vec2f_dot",1,SWIGTYPE_p_osg__VectorT_float_2_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__PointT_float_2_t,0))){
    SWIG_fail_ptr("Vec2f_dot",2,SWIGTYPE_p_osg__PointT_float_2_t);
  }
  
  result = (float)((osg::Vector< osg::Real32,2 > const *)arg1)->dot((osg::Point< float,2 >::PointType const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vec2f_dot(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_osg__VectorT_float_2_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_osg__VectorT_float_2_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Vec2f_dot__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_osg__VectorT_float_2_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_osg__PointT_float_2_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Vec2f_dot__SWIG_1(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'Vec2f_dot'\n"
    "  Possible C/C++ prototypes are:\n"
    "    dot(osg::Vector< osg::Real32,2 > const *,osg::Vector< osg::Real32,2 > const &)\n"
    "    dot(osg::Vector< osg::Real32,2 > const *,osg::Point< float,2 >::PointType const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Vec2f___mul__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  osg::Vector< osg::Real32,2 > *arg1 = (osg::Vector< osg::Real32,2 > *) 0 ;
  osg::Point< float,2 >::PointType *arg2 = 0 ;
  float result;
  
  SWIG_check_num_args("operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("operator *",1,"osg::Vector< osg::Real32,2 > const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("operator *",2,"osg::Point< float,2 >::PointType const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__VectorT_float_2_t,0))){
    SWIG_fail_ptr("Vec2f___mul",1,SWIGTYPE_p_osg__VectorT_float_2_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__PointT_float_2_t,0))){
    SWIG_fail_ptr("Vec2f___mul",2,SWIGTYPE_p_osg__PointT_float_2_t);
  }
  
  result = (float)((osg::Vector< osg::Real32,2 > const *)arg1)->operator *((osg::Point< float,2 >::PointType const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vec2f_enclosedAngle(lua_State* L) {
  int SWIG_arg = 0;
  osg::Vector< osg::Real32,2 > *arg1 = (osg::Vector< osg::Real32,2 > *) 0 ;
  osg::Vector< osg::Real32,2 > *arg2 = 0 ;
  float result;
  
  SWIG_check_num_args("enclosedAngle",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("enclosedAngle",1,"osg::Vector< osg::Real32,2 > const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("enclosedAngle",2,"osg::Vector< osg::Real32,2 > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__VectorT_float_2_t,0))){
    SWIG_fail_ptr("Vec2f_enclosedAngle",1,SWIGTYPE_p_osg__VectorT_float_2_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__VectorT_float_2_t,0))){
    SWIG_fail_ptr("Vec2f_enclosedAngle",2,SWIGTYPE_p_osg__VectorT_float_2_t);
  }
  
  result = (float)((osg::Vector< osg::Real32,2 > const *)arg1)->enclosedAngle((osg::Vector< osg::Real32,2 > const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vec2f_projectTo(lua_State* L) {
  int SWIG_arg = 0;
  osg::Vector< osg::Real32,2 > *arg1 = (osg::Vector< osg::Real32,2 > *) 0 ;
  osg::Vector< osg::Real32,2 > *arg2 = 0 ;
  float result;
  
  SWIG_check_num_args("projectTo",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("projectTo",1,"osg::Vector< osg::Real32,2 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("projectTo",2,"osg::Vector< osg::Real32,2 > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__VectorT_float_2_t,0))){
    SWIG_fail_ptr("Vec2f_projectTo",1,SWIGTYPE_p_osg__VectorT_float_2_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__VectorT_float_2_t,0))){
    SWIG_fail_ptr("Vec2f_projectTo",2,SWIGTYPE_p_osg__VectorT_float_2_t);
  }
  
  result = (float)(arg1)->projectTo((osg::Vector< osg::Real32,2 > const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vec2f_addToZero(lua_State* L) {
  int SWIG_arg = 0;
  osg::Vector< osg::Real32,2 > *arg1 = (osg::Vector< osg::Real32,2 > *) 0 ;
  osg::Point< float,2 >::PointType *result = 0 ;
  
  SWIG_check_num_args("addToZero",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("addToZero",1,"osg::Vector< osg::Real32,2 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__VectorT_float_2_t,0))){
    SWIG_fail_ptr("Vec2f_addToZero",1,SWIGTYPE_p_osg__VectorT_float_2_t);
  }
  
  result = (osg::Point< float,2 >::PointType *) &(arg1)->addToZero();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_osg__PointT_float_2_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vec2f_subZero(lua_State* L) {
  int SWIG_arg = 0;
  osg::Vector< osg::Real32,2 > *arg1 = (osg::Vector< osg::Real32,2 > *) 0 ;
  osg::Vector< osg::Real32,2 > *result = 0 ;
  
  SWIG_check_num_args("subZero",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("subZero",1,"osg::Vector< osg::Real32,2 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__VectorT_float_2_t,0))){
    SWIG_fail_ptr("Vec2f_subZero",1,SWIGTYPE_p_osg__VectorT_float_2_t);
  }
  
  result = (osg::Vector< osg::Real32,2 > *) &(arg1)->subZero();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_osg__VectorT_float_2_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vec2f___sub(lua_State* L) {
  int SWIG_arg = 0;
  osg::Vector< osg::Real32,2 > *arg1 = (osg::Vector< osg::Real32,2 > *) 0 ;
  osg::Vector< osg::Real32,2 > *arg2 = 0 ;
  osg::Vector< osg::Real32,2 > result;
  
  SWIG_check_num_args("operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("operator -",1,"osg::Vector< osg::Real32,2 > const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("operator -",2,"osg::Vector< osg::Real32,2 > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__VectorT_float_2_t,0))){
    SWIG_fail_ptr("Vec2f___sub",1,SWIGTYPE_p_osg__VectorT_float_2_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__VectorT_float_2_t,0))){
    SWIG_fail_ptr("Vec2f___sub",2,SWIGTYPE_p_osg__VectorT_float_2_t);
  }
  
  result = ((osg::Vector< osg::Real32,2 > const *)arg1)->operator -((osg::Vector< osg::Real32,2 > const &)*arg2);
  {
    osg::Vector< osg::Real32,2 > * resultptr = new osg::Vector< osg::Real32,2 >((const osg::Vector< osg::Real32,2 > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_osg__VectorT_float_2_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vec2f___add(lua_State* L) {
  int SWIG_arg = 0;
  osg::Vector< osg::Real32,2 > *arg1 = (osg::Vector< osg::Real32,2 > *) 0 ;
  osg::Vector< osg::Real32,2 > *arg2 = 0 ;
  osg::Vector< osg::Real32,2 > result;
  
  SWIG_check_num_args("operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("operator +",1,"osg::Vector< osg::Real32,2 > const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("operator +",2,"osg::Vector< osg::Real32,2 > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__VectorT_float_2_t,0))){
    SWIG_fail_ptr("Vec2f___add",1,SWIGTYPE_p_osg__VectorT_float_2_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__VectorT_float_2_t,0))){
    SWIG_fail_ptr("Vec2f___add",2,SWIGTYPE_p_osg__VectorT_float_2_t);
  }
  
  result = ((osg::Vector< osg::Real32,2 > const *)arg1)->operator +((osg::Vector< osg::Real32,2 > const &)*arg2);
  {
    osg::Vector< osg::Real32,2 > * resultptr = new osg::Vector< osg::Real32,2 >((const osg::Vector< osg::Real32,2 > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_osg__VectorT_float_2_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vec2f___mul__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  osg::Vector< osg::Real32,2 > *arg1 = (osg::Vector< osg::Real32,2 > *) 0 ;
  float arg2 ;
  osg::Vector< osg::Real32,2 > result;
  
  SWIG_check_num_args("operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("operator *",1,"osg::Vector< osg::Real32,2 > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("operator *",2,"float const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__VectorT_float_2_t,0))){
    SWIG_fail_ptr("Vec2f___mul",1,SWIGTYPE_p_osg__VectorT_float_2_t);
  }
  
  arg2 = (float const)lua_tonumber(L, 2);
  result = ((osg::Vector< osg::Real32,2 > const *)arg1)->operator *(arg2);
  {
    osg::Vector< osg::Real32,2 > * resultptr = new osg::Vector< osg::Real32,2 >((const osg::Vector< osg::Real32,2 > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_osg__VectorT_float_2_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vec2f___mul(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_osg__VectorT_float_2_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_osg__VectorT_float_2_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Vec2f___mul__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_osg__VectorT_float_2_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_osg__PointT_float_2_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Vec2f___mul__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_osg__VectorT_float_2_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Vec2f___mul__SWIG_2(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'Vec2f___mul'\n"
    "  Possible C/C++ prototypes are:\n"
    "    operator *(osg::Vector< osg::Real32,2 > const *,osg::Vector< osg::Real32,2 > const &)\n"
    "    operator *(osg::Vector< osg::Real32,2 > const *,osg::Point< float,2 >::PointType const &)\n"
    "    operator *(osg::Vector< osg::Real32,2 > const *,float const)\n");
  lua_error(L);return 0;
}


static int _wrap_Vec2f___unm(lua_State* L) {
  int SWIG_arg = 0;
  osg::Vector< osg::Real32,2 > *arg1 = (osg::Vector< osg::Real32,2 > *) 0 ;
  osg::Vector< osg::Real32,2 > result;
  
  SWIG_check_num_args("operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("operator -",1,"osg::Vector< osg::Real32,2 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__VectorT_float_2_t,0))){
    SWIG_fail_ptr("Vec2f___unm",1,SWIGTYPE_p_osg__VectorT_float_2_t);
  }
  
  result = ((osg::Vector< osg::Real32,2 > const *)arg1)->operator -();
  {
    osg::Vector< osg::Real32,2 > * resultptr = new osg::Vector< osg::Real32,2 >((const osg::Vector< osg::Real32,2 > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_osg__VectorT_float_2_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vec2f___lt(lua_State* L) {
  int SWIG_arg = 0;
  osg::Vector< osg::Real32,2 > *arg1 = (osg::Vector< osg::Real32,2 > *) 0 ;
  osg::Vector< osg::Real32,2 > *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("operator <",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("operator <",1,"osg::Vector< osg::Real32,2 > const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("operator <",2,"osg::Vector< osg::Real32,2 > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__VectorT_float_2_t,0))){
    SWIG_fail_ptr("Vec2f___lt",1,SWIGTYPE_p_osg__VectorT_float_2_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__VectorT_float_2_t,0))){
    SWIG_fail_ptr("Vec2f___lt",2,SWIGTYPE_p_osg__VectorT_float_2_t);
  }
  
  result = (bool)((osg::Vector< osg::Real32,2 > const *)arg1)->operator <((osg::Vector< osg::Real32,2 > const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vec2f___eq(lua_State* L) {
  int SWIG_arg = 0;
  osg::Vector< osg::Real32,2 > *arg1 = (osg::Vector< osg::Real32,2 > *) 0 ;
  osg::Vector< osg::Real32,2 > *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("operator ==",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("operator ==",1,"osg::Vector< osg::Real32,2 > const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("operator ==",2,"osg::Vector< osg::Real32,2 > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__VectorT_float_2_t,0))){
    SWIG_fail_ptr("Vec2f___eq",1,SWIGTYPE_p_osg__VectorT_float_2_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__VectorT_float_2_t,0))){
    SWIG_fail_ptr("Vec2f___eq",2,SWIGTYPE_p_osg__VectorT_float_2_t);
  }
  
  result = (bool)((osg::Vector< osg::Real32,2 > const *)arg1)->operator ==((osg::Vector< osg::Real32,2 > const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Vec2f(void *obj) {
osg::Vector< osg::Real32,2 > *arg1 = (osg::Vector< osg::Real32,2 > *) obj;
delete arg1;
}
static swig_lua_method swig_osg_Vector_Sl_osg_Real32_Sc_2_Sg__methods[] = {
    {"length", _wrap_Vec2f_length}, 
    {"squareLength", _wrap_Vec2f_squareLength}, 
    {"normalize", _wrap_Vec2f_normalize}, 
    {"cross", _wrap_Vec2f_cross}, 
    {"crossThis", _wrap_Vec2f_crossThis}, 
    {"dot", _wrap_Vec2f_dot}, 
    {"enclosedAngle", _wrap_Vec2f_enclosedAngle}, 
    {"projectTo", _wrap_Vec2f_projectTo}, 
    {"addToZero", _wrap_Vec2f_addToZero}, 
    {"subZero", _wrap_Vec2f_subZero}, 
    {"__sub", _wrap_Vec2f___sub}, 
    {"__add", _wrap_Vec2f___add}, 
    {"__mul", _wrap_Vec2f___mul}, 
    {"__unm", _wrap_Vec2f___unm}, 
    {"__lt", _wrap_Vec2f___lt}, 
    {"__eq", _wrap_Vec2f___eq}, 
    {0,0}
};
static swig_lua_attribute swig_osg_Vector_Sl_osg_Real32_Sc_2_Sg__attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_osg_Vector_Sl_osg_Real32_Sc_2_Sg__bases[] = {0,0};
static const char *swig_osg_Vector_Sl_osg_Real32_Sc_2_Sg__base_names[] = {"osg::Point< osg::Real32,2 > *",0};
static swig_lua_class _wrap_class_osg_Vector_Sl_osg_Real32_Sc_2_Sg_ = { "Vec2f", &SWIGTYPE_p_osg__VectorT_float_2_t,_wrap_new_Vec2f, swig_delete_Vec2f, swig_osg_Vector_Sl_osg_Real32_Sc_2_Sg__methods, swig_osg_Vector_Sl_osg_Real32_Sc_2_Sg__attributes, swig_osg_Vector_Sl_osg_Real32_Sc_2_Sg__bases, swig_osg_Vector_Sl_osg_Real32_Sc_2_Sg__base_names };

static int _wrap_Matrix_identity(lua_State* L) {
  int SWIG_arg = 0;
  osg::TransformationMatrix< osg::Real32 > *result = 0 ;
  
  SWIG_check_num_args("osg::TransformationMatrix<(osg::Real32)>::identity",0,0)
  result = (osg::TransformationMatrix< osg::Real32 > *) &osg::TransformationMatrix< osg::Real32 >::SWIGTEMPLATEDISAMBIGUATOR identity();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_osg__TransformationMatrixT_float_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Matrix__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  osg::TransformationMatrix< osg::Real32 > *result = 0 ;
  
  SWIG_check_num_args("osg::TransformationMatrix<(osg::Real32)>",0,0)
  result = (osg::TransformationMatrix< osg::Real32 > *)new osg::TransformationMatrix< osg::Real32 >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_osg__TransformationMatrixT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Matrix__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  osg::TransformationMatrix< osg::Real32 > *arg1 = 0 ;
  osg::TransformationMatrix< osg::Real32 > *result = 0 ;
  
  SWIG_check_num_args("osg::TransformationMatrix<(osg::Real32)>",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("osg::TransformationMatrix<(osg::Real32)>",1,"osg::TransformationMatrix< osg::Real32 > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__TransformationMatrixT_float_t,0))){
    SWIG_fail_ptr("new_Matrix",1,SWIGTYPE_p_osg__TransformationMatrixT_float_t);
  }
  
  result = (osg::TransformationMatrix< osg::Real32 > *)new osg::TransformationMatrix< osg::Real32 >((osg::TransformationMatrix< osg::Real32 > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_osg__TransformationMatrixT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Matrix__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  osg::TransformationMatrix< float >::VectorType3f *arg1 = 0 ;
  osg::TransformationMatrix< float >::VectorType3f *arg2 = 0 ;
  osg::TransformationMatrix< float >::VectorType3f *arg3 = 0 ;
  osg::TransformationMatrix< osg::Real32 > *result = 0 ;
  
  SWIG_check_num_args("osg::TransformationMatrix<(osg::Real32)>",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("osg::TransformationMatrix<(osg::Real32)>",1,"osg::TransformationMatrix< float >::VectorType3f const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("osg::TransformationMatrix<(osg::Real32)>",2,"osg::TransformationMatrix< float >::VectorType3f const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("osg::TransformationMatrix<(osg::Real32)>",3,"osg::TransformationMatrix< float >::VectorType3f const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__VectorT_float_3_t,0))){
    SWIG_fail_ptr("new_Matrix",1,SWIGTYPE_p_osg__VectorT_float_3_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__VectorT_float_3_t,0))){
    SWIG_fail_ptr("new_Matrix",2,SWIGTYPE_p_osg__VectorT_float_3_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_osg__VectorT_float_3_t,0))){
    SWIG_fail_ptr("new_Matrix",3,SWIGTYPE_p_osg__VectorT_float_3_t);
  }
  
  result = (osg::TransformationMatrix< osg::Real32 > *)new osg::TransformationMatrix< osg::Real32 >((osg::TransformationMatrix< float >::VectorType3f const &)*arg1,(osg::TransformationMatrix< float >::VectorType3f const &)*arg2,(osg::TransformationMatrix< float >::VectorType3f const &)*arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_osg__TransformationMatrixT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Matrix__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  osg::TransformationMatrix< float >::VectorType3f *arg1 = 0 ;
  osg::TransformationMatrix< float >::VectorType3f *arg2 = 0 ;
  osg::TransformationMatrix< float >::VectorType3f *arg3 = 0 ;
  osg::TransformationMatrix< float >::VectorType3f *arg4 = 0 ;
  osg::TransformationMatrix< osg::Real32 > *result = 0 ;
  
  SWIG_check_num_args("osg::TransformationMatrix<(osg::Real32)>",4,4)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("osg::TransformationMatrix<(osg::Real32)>",1,"osg::TransformationMatrix< float >::VectorType3f const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("osg::TransformationMatrix<(osg::Real32)>",2,"osg::TransformationMatrix< float >::VectorType3f const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("osg::TransformationMatrix<(osg::Real32)>",3,"osg::TransformationMatrix< float >::VectorType3f const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("osg::TransformationMatrix<(osg::Real32)>",4,"osg::TransformationMatrix< float >::VectorType3f const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__VectorT_float_3_t,0))){
    SWIG_fail_ptr("new_Matrix",1,SWIGTYPE_p_osg__VectorT_float_3_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__VectorT_float_3_t,0))){
    SWIG_fail_ptr("new_Matrix",2,SWIGTYPE_p_osg__VectorT_float_3_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_osg__VectorT_float_3_t,0))){
    SWIG_fail_ptr("new_Matrix",3,SWIGTYPE_p_osg__VectorT_float_3_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_osg__VectorT_float_3_t,0))){
    SWIG_fail_ptr("new_Matrix",4,SWIGTYPE_p_osg__VectorT_float_3_t);
  }
  
  result = (osg::TransformationMatrix< osg::Real32 > *)new osg::TransformationMatrix< osg::Real32 >((osg::TransformationMatrix< float >::VectorType3f const &)*arg1,(osg::TransformationMatrix< float >::VectorType3f const &)*arg2,(osg::TransformationMatrix< float >::VectorType3f const &)*arg3,(osg::TransformationMatrix< float >::VectorType3f const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_osg__TransformationMatrixT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Matrix__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  float arg8 ;
  float arg9 ;
  float arg10 ;
  float arg11 ;
  float arg12 ;
  float arg13 ;
  float arg14 ;
  float arg15 ;
  float arg16 ;
  osg::TransformationMatrix< osg::Real32 > *result = 0 ;
  
  SWIG_check_num_args("osg::TransformationMatrix<(osg::Real32)>",16,16)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("osg::TransformationMatrix<(osg::Real32)>",1,"float const");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("osg::TransformationMatrix<(osg::Real32)>",2,"float const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("osg::TransformationMatrix<(osg::Real32)>",3,"float const");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("osg::TransformationMatrix<(osg::Real32)>",4,"float const");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("osg::TransformationMatrix<(osg::Real32)>",5,"float const");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("osg::TransformationMatrix<(osg::Real32)>",6,"float const");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("osg::TransformationMatrix<(osg::Real32)>",7,"float const");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("osg::TransformationMatrix<(osg::Real32)>",8,"float const");
  if(!lua_isnumber(L,9)) SWIG_fail_arg("osg::TransformationMatrix<(osg::Real32)>",9,"float const");
  if(!lua_isnumber(L,10)) SWIG_fail_arg("osg::TransformationMatrix<(osg::Real32)>",10,"float const");
  if(!lua_isnumber(L,11)) SWIG_fail_arg("osg::TransformationMatrix<(osg::Real32)>",11,"float const");
  if(!lua_isnumber(L,12)) SWIG_fail_arg("osg::TransformationMatrix<(osg::Real32)>",12,"float const");
  if(!lua_isnumber(L,13)) SWIG_fail_arg("osg::TransformationMatrix<(osg::Real32)>",13,"float const");
  if(!lua_isnumber(L,14)) SWIG_fail_arg("osg::TransformationMatrix<(osg::Real32)>",14,"float const");
  if(!lua_isnumber(L,15)) SWIG_fail_arg("osg::TransformationMatrix<(osg::Real32)>",15,"float const");
  if(!lua_isnumber(L,16)) SWIG_fail_arg("osg::TransformationMatrix<(osg::Real32)>",16,"float const");
  arg1 = (float const)lua_tonumber(L, 1);
  arg2 = (float const)lua_tonumber(L, 2);
  arg3 = (float const)lua_tonumber(L, 3);
  arg4 = (float const)lua_tonumber(L, 4);
  arg5 = (float const)lua_tonumber(L, 5);
  arg6 = (float const)lua_tonumber(L, 6);
  arg7 = (float const)lua_tonumber(L, 7);
  arg8 = (float const)lua_tonumber(L, 8);
  arg9 = (float const)lua_tonumber(L, 9);
  arg10 = (float const)lua_tonumber(L, 10);
  arg11 = (float const)lua_tonumber(L, 11);
  arg12 = (float const)lua_tonumber(L, 12);
  arg13 = (float const)lua_tonumber(L, 13);
  arg14 = (float const)lua_tonumber(L, 14);
  arg15 = (float const)lua_tonumber(L, 15);
  arg16 = (float const)lua_tonumber(L, 16);
  result = (osg::TransformationMatrix< osg::Real32 > *)new osg::TransformationMatrix< osg::Real32 >(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_osg__TransformationMatrixT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Matrix(lua_State* L) {
  int argc;
  int argv[17]={
    1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Matrix__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_osg__TransformationMatrixT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Matrix__SWIG_1(L);
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_osg__VectorT_float_3_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_osg__VectorT_float_3_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_osg__VectorT_float_3_t, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_new_Matrix__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_osg__VectorT_float_3_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_osg__VectorT_float_3_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_osg__VectorT_float_3_t, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_osg__VectorT_float_3_t, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_new_Matrix__SWIG_3(L);
          }
        }
      }
    }
  }
  if (argc == 16) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isnumber(L,argv[6]);
                }
                if (_v) {
                  {
                    _v = lua_isnumber(L,argv[7]);
                  }
                  if (_v) {
                    {
                      _v = lua_isnumber(L,argv[8]);
                    }
                    if (_v) {
                      {
                        _v = lua_isnumber(L,argv[9]);
                      }
                      if (_v) {
                        {
                          _v = lua_isnumber(L,argv[10]);
                        }
                        if (_v) {
                          {
                            _v = lua_isnumber(L,argv[11]);
                          }
                          if (_v) {
                            {
                              _v = lua_isnumber(L,argv[12]);
                            }
                            if (_v) {
                              {
                                _v = lua_isnumber(L,argv[13]);
                              }
                              if (_v) {
                                {
                                  _v = lua_isnumber(L,argv[14]);
                                }
                                if (_v) {
                                  {
                                    _v = lua_isnumber(L,argv[15]);
                                  }
                                  if (_v) {
                                    return _wrap_new_Matrix__SWIG_4(L);
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_Matrix'\n"
    "  Possible C/C++ prototypes are:\n"
    "    osg::TransformationMatrix< osg::Real32 >()\n"
    "    osg::TransformationMatrix< osg::Real32 >(osg::TransformationMatrix< osg::Real32 > const &)\n"
    "    osg::TransformationMatrix< osg::Real32 >(osg::TransformationMatrix< float >::VectorType3f const &,osg::TransformationMatrix< float >::VectorType3f const &,osg::TransformationMatrix< float >::VectorType3f const &)\n"
    "    osg::TransformationMatrix< osg::Real32 >(osg::TransformationMatrix< float >::VectorType3f const &,osg::TransformationMatrix< float >::VectorType3f const &,osg::TransformationMatrix< float >::VectorType3f const &,osg::TransformationMatrix< float >::VectorType3f const &)\n"
    "    osg::TransformationMatrix< osg::Real32 >(float const,float const,float const,float const,float const,float const,float const,float const,float const,float const,float const,float const,float const,float const,float const,float const)\n");
  lua_error(L);return 0;
}


static int _wrap_Matrix_setIdentity(lua_State* L) {
  int SWIG_arg = 0;
  osg::TransformationMatrix< osg::Real32 > *arg1 = (osg::TransformationMatrix< osg::Real32 > *) 0 ;
  
  SWIG_check_num_args("setIdentity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setIdentity",1,"osg::TransformationMatrix< osg::Real32 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__TransformationMatrixT_float_t,0))){
    SWIG_fail_ptr("Matrix_setIdentity",1,SWIGTYPE_p_osg__TransformationMatrixT_float_t);
  }
  
  (arg1)->setIdentity();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_setValue__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  osg::TransformationMatrix< osg::Real32 > *arg1 = (osg::TransformationMatrix< osg::Real32 > *) 0 ;
  osg::TransformationMatrix< osg::Real32 > *arg2 = 0 ;
  
  SWIG_check_num_args("setValue",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setValue",1,"osg::TransformationMatrix< osg::Real32 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setValue",2,"osg::TransformationMatrix< osg::Real32 > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__TransformationMatrixT_float_t,0))){
    SWIG_fail_ptr("Matrix_setValue",1,SWIGTYPE_p_osg__TransformationMatrixT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__TransformationMatrixT_float_t,0))){
    SWIG_fail_ptr("Matrix_setValue",2,SWIGTYPE_p_osg__TransformationMatrixT_float_t);
  }
  
  (arg1)->setValue((osg::TransformationMatrix< osg::Real32 > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_setValue__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  osg::TransformationMatrix< osg::Real32 > *arg1 = (osg::TransformationMatrix< osg::Real32 > *) 0 ;
  osg::TransformationMatrix< float >::VectorType3f *arg2 = 0 ;
  osg::TransformationMatrix< float >::VectorType3f *arg3 = 0 ;
  osg::TransformationMatrix< float >::VectorType3f *arg4 = 0 ;
  
  SWIG_check_num_args("setValue",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setValue",1,"osg::TransformationMatrix< osg::Real32 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setValue",2,"osg::TransformationMatrix< float >::VectorType3f const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("setValue",3,"osg::TransformationMatrix< float >::VectorType3f const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("setValue",4,"osg::TransformationMatrix< float >::VectorType3f const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__TransformationMatrixT_float_t,0))){
    SWIG_fail_ptr("Matrix_setValue",1,SWIGTYPE_p_osg__TransformationMatrixT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__VectorT_float_3_t,0))){
    SWIG_fail_ptr("Matrix_setValue",2,SWIGTYPE_p_osg__VectorT_float_3_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_osg__VectorT_float_3_t,0))){
    SWIG_fail_ptr("Matrix_setValue",3,SWIGTYPE_p_osg__VectorT_float_3_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_osg__VectorT_float_3_t,0))){
    SWIG_fail_ptr("Matrix_setValue",4,SWIGTYPE_p_osg__VectorT_float_3_t);
  }
  
  (arg1)->setValue((osg::TransformationMatrix< float >::VectorType3f const &)*arg2,(osg::TransformationMatrix< float >::VectorType3f const &)*arg3,(osg::TransformationMatrix< float >::VectorType3f const &)*arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_setValue__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  osg::TransformationMatrix< osg::Real32 > *arg1 = (osg::TransformationMatrix< osg::Real32 > *) 0 ;
  osg::TransformationMatrix< float >::VectorType3f *arg2 = 0 ;
  osg::TransformationMatrix< float >::VectorType3f *arg3 = 0 ;
  osg::TransformationMatrix< float >::VectorType3f *arg4 = 0 ;
  osg::TransformationMatrix< float >::VectorType3f *arg5 = 0 ;
  
  SWIG_check_num_args("setValue",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setValue",1,"osg::TransformationMatrix< osg::Real32 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setValue",2,"osg::TransformationMatrix< float >::VectorType3f const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("setValue",3,"osg::TransformationMatrix< float >::VectorType3f const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("setValue",4,"osg::TransformationMatrix< float >::VectorType3f const &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("setValue",5,"osg::TransformationMatrix< float >::VectorType3f const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__TransformationMatrixT_float_t,0))){
    SWIG_fail_ptr("Matrix_setValue",1,SWIGTYPE_p_osg__TransformationMatrixT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__VectorT_float_3_t,0))){
    SWIG_fail_ptr("Matrix_setValue",2,SWIGTYPE_p_osg__VectorT_float_3_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_osg__VectorT_float_3_t,0))){
    SWIG_fail_ptr("Matrix_setValue",3,SWIGTYPE_p_osg__VectorT_float_3_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_osg__VectorT_float_3_t,0))){
    SWIG_fail_ptr("Matrix_setValue",4,SWIGTYPE_p_osg__VectorT_float_3_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_osg__VectorT_float_3_t,0))){
    SWIG_fail_ptr("Matrix_setValue",5,SWIGTYPE_p_osg__VectorT_float_3_t);
  }
  
  (arg1)->setValue((osg::TransformationMatrix< float >::VectorType3f const &)*arg2,(osg::TransformationMatrix< float >::VectorType3f const &)*arg3,(osg::TransformationMatrix< float >::VectorType3f const &)*arg4,(osg::TransformationMatrix< float >::VectorType3f const &)*arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_setValue__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  osg::TransformationMatrix< osg::Real32 > *arg1 = (osg::TransformationMatrix< osg::Real32 > *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  float arg8 ;
  float arg9 ;
  float arg10 ;
  float arg11 ;
  float arg12 ;
  float arg13 ;
  float arg14 ;
  float arg15 ;
  float arg16 ;
  float arg17 ;
  
  SWIG_check_num_args("setValue",17,17)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setValue",1,"osg::TransformationMatrix< osg::Real32 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("setValue",2,"float const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("setValue",3,"float const");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("setValue",4,"float const");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("setValue",5,"float const");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("setValue",6,"float const");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("setValue",7,"float const");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("setValue",8,"float const");
  if(!lua_isnumber(L,9)) SWIG_fail_arg("setValue",9,"float const");
  if(!lua_isnumber(L,10)) SWIG_fail_arg("setValue",10,"float const");
  if(!lua_isnumber(L,11)) SWIG_fail_arg("setValue",11,"float const");
  if(!lua_isnumber(L,12)) SWIG_fail_arg("setValue",12,"float const");
  if(!lua_isnumber(L,13)) SWIG_fail_arg("setValue",13,"float const");
  if(!lua_isnumber(L,14)) SWIG_fail_arg("setValue",14,"float const");
  if(!lua_isnumber(L,15)) SWIG_fail_arg("setValue",15,"float const");
  if(!lua_isnumber(L,16)) SWIG_fail_arg("setValue",16,"float const");
  if(!lua_isnumber(L,17)) SWIG_fail_arg("setValue",17,"float const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__TransformationMatrixT_float_t,0))){
    SWIG_fail_ptr("Matrix_setValue",1,SWIGTYPE_p_osg__TransformationMatrixT_float_t);
  }
  
  arg2 = (float const)lua_tonumber(L, 2);
  arg3 = (float const)lua_tonumber(L, 3);
  arg4 = (float const)lua_tonumber(L, 4);
  arg5 = (float const)lua_tonumber(L, 5);
  arg6 = (float const)lua_tonumber(L, 6);
  arg7 = (float const)lua_tonumber(L, 7);
  arg8 = (float const)lua_tonumber(L, 8);
  arg9 = (float const)lua_tonumber(L, 9);
  arg10 = (float const)lua_tonumber(L, 10);
  arg11 = (float const)lua_tonumber(L, 11);
  arg12 = (float const)lua_tonumber(L, 12);
  arg13 = (float const)lua_tonumber(L, 13);
  arg14 = (float const)lua_tonumber(L, 14);
  arg15 = (float const)lua_tonumber(L, 15);
  arg16 = (float const)lua_tonumber(L, 16);
  arg17 = (float const)lua_tonumber(L, 17);
  (arg1)->setValue(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_setValueTransposed(lua_State* L) {
  int SWIG_arg = 0;
  osg::TransformationMatrix< osg::Real32 > *arg1 = (osg::TransformationMatrix< osg::Real32 > *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  float arg8 ;
  float arg9 ;
  float arg10 ;
  float arg11 ;
  float arg12 ;
  float arg13 ;
  float arg14 ;
  float arg15 ;
  float arg16 ;
  float arg17 ;
  
  SWIG_check_num_args("setValueTransposed",17,17)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setValueTransposed",1,"osg::TransformationMatrix< osg::Real32 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("setValueTransposed",2,"float const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("setValueTransposed",3,"float const");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("setValueTransposed",4,"float const");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("setValueTransposed",5,"float const");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("setValueTransposed",6,"float const");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("setValueTransposed",7,"float const");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("setValueTransposed",8,"float const");
  if(!lua_isnumber(L,9)) SWIG_fail_arg("setValueTransposed",9,"float const");
  if(!lua_isnumber(L,10)) SWIG_fail_arg("setValueTransposed",10,"float const");
  if(!lua_isnumber(L,11)) SWIG_fail_arg("setValueTransposed",11,"float const");
  if(!lua_isnumber(L,12)) SWIG_fail_arg("setValueTransposed",12,"float const");
  if(!lua_isnumber(L,13)) SWIG_fail_arg("setValueTransposed",13,"float const");
  if(!lua_isnumber(L,14)) SWIG_fail_arg("setValueTransposed",14,"float const");
  if(!lua_isnumber(L,15)) SWIG_fail_arg("setValueTransposed",15,"float const");
  if(!lua_isnumber(L,16)) SWIG_fail_arg("setValueTransposed",16,"float const");
  if(!lua_isnumber(L,17)) SWIG_fail_arg("setValueTransposed",17,"float const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__TransformationMatrixT_float_t,0))){
    SWIG_fail_ptr("Matrix_setValueTransposed",1,SWIGTYPE_p_osg__TransformationMatrixT_float_t);
  }
  
  arg2 = (float const)lua_tonumber(L, 2);
  arg3 = (float const)lua_tonumber(L, 3);
  arg4 = (float const)lua_tonumber(L, 4);
  arg5 = (float const)lua_tonumber(L, 5);
  arg6 = (float const)lua_tonumber(L, 6);
  arg7 = (float const)lua_tonumber(L, 7);
  arg8 = (float const)lua_tonumber(L, 8);
  arg9 = (float const)lua_tonumber(L, 9);
  arg10 = (float const)lua_tonumber(L, 10);
  arg11 = (float const)lua_tonumber(L, 11);
  arg12 = (float const)lua_tonumber(L, 12);
  arg13 = (float const)lua_tonumber(L, 13);
  arg14 = (float const)lua_tonumber(L, 14);
  arg15 = (float const)lua_tonumber(L, 15);
  arg16 = (float const)lua_tonumber(L, 16);
  arg17 = (float const)lua_tonumber(L, 17);
  (arg1)->setValueTransposed(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_setValue__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  osg::TransformationMatrix< osg::Real32 > *arg1 = (osg::TransformationMatrix< osg::Real32 > *) 0 ;
  float *arg2 = (float *) 0 ;
  bool arg3 ;
  
  SWIG_check_num_args("setValue",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setValue",1,"osg::TransformationMatrix< osg::Real32 > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("setValue",2,"float const *");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("setValue",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__TransformationMatrixT_float_t,0))){
    SWIG_fail_ptr("Matrix_setValue",1,SWIGTYPE_p_osg__TransformationMatrixT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("Matrix_setValue",2,SWIGTYPE_p_float);
  }
  
  arg3 = (lua_toboolean(L, 3)!=0);
  (arg1)->setValue((float const *)arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_setValue__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  osg::TransformationMatrix< osg::Real32 > *arg1 = (osg::TransformationMatrix< osg::Real32 > *) 0 ;
  float *arg2 = (float *) 0 ;
  
  SWIG_check_num_args("setValue",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setValue",1,"osg::TransformationMatrix< osg::Real32 > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("setValue",2,"float const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__TransformationMatrixT_float_t,0))){
    SWIG_fail_ptr("Matrix_setValue",1,SWIGTYPE_p_osg__TransformationMatrixT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("Matrix_setValue",2,SWIGTYPE_p_float);
  }
  
  (arg1)->setValue((float const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_setValue__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  osg::TransformationMatrix< osg::Real32 > *arg1 = (osg::TransformationMatrix< osg::Real32 > *) 0 ;
  osg::TransformationMatrix< float >::VectorType *arg2 = (osg::TransformationMatrix< float >::VectorType *) 0 ;
  
  SWIG_check_num_args("setValue",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setValue",1,"osg::TransformationMatrix< osg::Real32 > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("setValue",2,"osg::TransformationMatrix< float >::VectorType const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__TransformationMatrixT_float_t,0))){
    SWIG_fail_ptr("Matrix_setValue",1,SWIGTYPE_p_osg__TransformationMatrixT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__VectorT_float_4_t,0))){
    SWIG_fail_ptr("Matrix_setValue",2,SWIGTYPE_p_osg__VectorT_float_4_t);
  }
  
  (arg1)->setValue((osg::TransformationMatrix< float >::VectorType const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_setValue__SWIG_7(lua_State* L) {
  int SWIG_arg = 0;
  osg::TransformationMatrix< osg::Real32 > *arg1 = (osg::TransformationMatrix< osg::Real32 > *) 0 ;
  osg::Char8 *arg2 = (osg::Char8 *) 0 ;
  bool arg3 ;
  
  SWIG_check_num_args("setValue",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setValue",1,"osg::TransformationMatrix< osg::Real32 > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("setValue",2,"osg::Char8 const *");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("setValue",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__TransformationMatrixT_float_t,0))){
    SWIG_fail_ptr("Matrix_setValue",1,SWIGTYPE_p_osg__TransformationMatrixT_float_t);
  }
  
  arg2 = (osg::Char8 *)lua_tostring(L, 2);
  arg3 = (lua_toboolean(L, 3)!=0);
  (arg1)->setValue((osg::Char8 const *)arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_setValue__SWIG_8(lua_State* L) {
  int SWIG_arg = 0;
  osg::TransformationMatrix< osg::Real32 > *arg1 = (osg::TransformationMatrix< osg::Real32 > *) 0 ;
  osg::Char8 *arg2 = (osg::Char8 *) 0 ;
  
  SWIG_check_num_args("setValue",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setValue",1,"osg::TransformationMatrix< osg::Real32 > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("setValue",2,"osg::Char8 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__TransformationMatrixT_float_t,0))){
    SWIG_fail_ptr("Matrix_setValue",1,SWIGTYPE_p_osg__TransformationMatrixT_float_t);
  }
  
  arg2 = (osg::Char8 *)lua_tostring(L, 2);
  (arg1)->setValue((osg::Char8 const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_setValue(lua_State* L) {
  int argc;
  int argv[18]={
    1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_osg__TransformationMatrixT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_osg__TransformationMatrixT_float_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Matrix_setValue__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_osg__TransformationMatrixT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Matrix_setValue__SWIG_5(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_osg__TransformationMatrixT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_osg__VectorT_float_4_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Matrix_setValue__SWIG_6(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_osg__TransformationMatrixT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_Matrix_setValue__SWIG_8(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_osg__TransformationMatrixT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_Matrix_setValue__SWIG_4(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_osg__TransformationMatrixT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_Matrix_setValue__SWIG_7(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_osg__TransformationMatrixT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_osg__VectorT_float_3_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_osg__VectorT_float_3_t, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_osg__VectorT_float_3_t, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_Matrix_setValue__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_osg__TransformationMatrixT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_osg__VectorT_float_3_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_osg__VectorT_float_3_t, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_osg__VectorT_float_3_t, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_osg__VectorT_float_3_t, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_Matrix_setValue__SWIG_2(L);
            }
          }
        }
      }
    }
  }
  if (argc == 17) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_osg__TransformationMatrixT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isnumber(L,argv[6]);
                }
                if (_v) {
                  {
                    _v = lua_isnumber(L,argv[7]);
                  }
                  if (_v) {
                    {
                      _v = lua_isnumber(L,argv[8]);
                    }
                    if (_v) {
                      {
                        _v = lua_isnumber(L,argv[9]);
                      }
                      if (_v) {
                        {
                          _v = lua_isnumber(L,argv[10]);
                        }
                        if (_v) {
                          {
                            _v = lua_isnumber(L,argv[11]);
                          }
                          if (_v) {
                            {
                              _v = lua_isnumber(L,argv[12]);
                            }
                            if (_v) {
                              {
                                _v = lua_isnumber(L,argv[13]);
                              }
                              if (_v) {
                                {
                                  _v = lua_isnumber(L,argv[14]);
                                }
                                if (_v) {
                                  {
                                    _v = lua_isnumber(L,argv[15]);
                                  }
                                  if (_v) {
                                    {
                                      _v = lua_isnumber(L,argv[16]);
                                    }
                                    if (_v) {
                                      return _wrap_Matrix_setValue__SWIG_3(L);
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'Matrix_setValue'\n"
    "  Possible C/C++ prototypes are:\n"
    "    setValue(osg::TransformationMatrix< osg::Real32 > *,osg::TransformationMatrix< osg::Real32 > const &)\n"
    "    setValue(osg::TransformationMatrix< osg::Real32 > *,osg::TransformationMatrix< float >::VectorType3f const &,osg::TransformationMatrix< float >::VectorType3f const &,osg::TransformationMatrix< float >::VectorType3f const &)\n"
    "    setValue(osg::TransformationMatrix< osg::Real32 > *,osg::TransformationMatrix< float >::VectorType3f const &,osg::TransformationMatrix< float >::VectorType3f const &,osg::TransformationMatrix< float >::VectorType3f const &,osg::TransformationMatrix< float >::VectorType3f const &)\n"
    "    setValue(osg::TransformationMatrix< osg::Real32 > *,float const,float const,float const,float const,float const,float const,float const,float const,float const,float const,float const,float const,float const,float const,float const,float const)\n"
    "    setValue(osg::TransformationMatrix< osg::Real32 > *,float const *,bool)\n"
    "    setValue(osg::TransformationMatrix< osg::Real32 > *,float const *)\n"
    "    setValue(osg::TransformationMatrix< osg::Real32 > *,osg::TransformationMatrix< float >::VectorType const *)\n"
    "    setValue(osg::TransformationMatrix< osg::Real32 > *,osg::Char8 const *,bool)\n"
    "    setValue(osg::TransformationMatrix< osg::Real32 > *,osg::Char8 const *)\n");
  lua_error(L);return 0;
}


static int _wrap_Matrix_getValues(lua_State* L) {
  int SWIG_arg = 0;
  osg::TransformationMatrix< osg::Real32 > *arg1 = (osg::TransformationMatrix< osg::Real32 > *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("getValues",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getValues",1,"osg::TransformationMatrix< osg::Real32 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__TransformationMatrixT_float_t,0))){
    SWIG_fail_ptr("Matrix_getValues",1,SWIGTYPE_p_osg__TransformationMatrixT_float_t);
  }
  
  result = (float *)(arg1)->getValues();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_setScale__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  osg::TransformationMatrix< osg::Real32 > *arg1 = (osg::TransformationMatrix< osg::Real32 > *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("setScale",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setScale",1,"osg::TransformationMatrix< osg::Real32 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("setScale",2,"float const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__TransformationMatrixT_float_t,0))){
    SWIG_fail_ptr("Matrix_setScale",1,SWIGTYPE_p_osg__TransformationMatrixT_float_t);
  }
  
  arg2 = (float const)lua_tonumber(L, 2);
  (arg1)->setScale(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_setScale__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  osg::TransformationMatrix< osg::Real32 > *arg1 = (osg::TransformationMatrix< osg::Real32 > *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  SWIG_check_num_args("setScale",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setScale",1,"osg::TransformationMatrix< osg::Real32 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("setScale",2,"float const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("setScale",3,"float const");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("setScale",4,"float const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__TransformationMatrixT_float_t,0))){
    SWIG_fail_ptr("Matrix_setScale",1,SWIGTYPE_p_osg__TransformationMatrixT_float_t);
  }
  
  arg2 = (float const)lua_tonumber(L, 2);
  arg3 = (float const)lua_tonumber(L, 3);
  arg4 = (float const)lua_tonumber(L, 4);
  (arg1)->setScale(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_setScale__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  osg::TransformationMatrix< osg::Real32 > *arg1 = (osg::TransformationMatrix< osg::Real32 > *) 0 ;
  osg::TransformationMatrix< float >::VectorType3f *arg2 = 0 ;
  
  SWIG_check_num_args("setScale",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setScale",1,"osg::TransformationMatrix< osg::Real32 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setScale",2,"osg::TransformationMatrix< float >::VectorType3f const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__TransformationMatrixT_float_t,0))){
    SWIG_fail_ptr("Matrix_setScale",1,SWIGTYPE_p_osg__TransformationMatrixT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__VectorT_float_3_t,0))){
    SWIG_fail_ptr("Matrix_setScale",2,SWIGTYPE_p_osg__VectorT_float_3_t);
  }
  
  (arg1)->setScale((osg::TransformationMatrix< float >::VectorType3f const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_setScale(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_osg__TransformationMatrixT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_osg__VectorT_float_3_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Matrix_setScale__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_osg__TransformationMatrixT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Matrix_setScale__SWIG_0(L);
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_osg__TransformationMatrixT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_Matrix_setScale__SWIG_1(L);
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'Matrix_setScale'\n"
    "  Possible C/C++ prototypes are:\n"
    "    setScale(osg::TransformationMatrix< osg::Real32 > *,float const)\n"
    "    setScale(osg::TransformationMatrix< osg::Real32 > *,float const,float const,float const)\n"
    "    setScale(osg::TransformationMatrix< osg::Real32 > *,osg::TransformationMatrix< float >::VectorType3f const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Matrix_setTranslate__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  osg::TransformationMatrix< osg::Real32 > *arg1 = (osg::TransformationMatrix< osg::Real32 > *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  SWIG_check_num_args("setTranslate",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setTranslate",1,"osg::TransformationMatrix< osg::Real32 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("setTranslate",2,"float const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("setTranslate",3,"float const");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("setTranslate",4,"float const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__TransformationMatrixT_float_t,0))){
    SWIG_fail_ptr("Matrix_setTranslate",1,SWIGTYPE_p_osg__TransformationMatrixT_float_t);
  }
  
  arg2 = (float const)lua_tonumber(L, 2);
  arg3 = (float const)lua_tonumber(L, 3);
  arg4 = (float const)lua_tonumber(L, 4);
  (arg1)->setTranslate(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_setTranslate__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  osg::TransformationMatrix< osg::Real32 > *arg1 = (osg::TransformationMatrix< osg::Real32 > *) 0 ;
  osg::TransformationMatrix< float >::VectorType3f *arg2 = 0 ;
  
  SWIG_check_num_args("setTranslate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setTranslate",1,"osg::TransformationMatrix< osg::Real32 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setTranslate",2,"osg::TransformationMatrix< float >::VectorType3f const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__TransformationMatrixT_float_t,0))){
    SWIG_fail_ptr("Matrix_setTranslate",1,SWIGTYPE_p_osg__TransformationMatrixT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__VectorT_float_3_t,0))){
    SWIG_fail_ptr("Matrix_setTranslate",2,SWIGTYPE_p_osg__VectorT_float_3_t);
  }
  
  (arg1)->setTranslate((osg::TransformationMatrix< float >::VectorType3f const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_setTranslate__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  osg::TransformationMatrix< osg::Real32 > *arg1 = (osg::TransformationMatrix< osg::Real32 > *) 0 ;
  osg::TransformationMatrix< float >::PointType3f *arg2 = 0 ;
  
  SWIG_check_num_args("setTranslate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setTranslate",1,"osg::TransformationMatrix< osg::Real32 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setTranslate",2,"osg::TransformationMatrix< float >::PointType3f const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__TransformationMatrixT_float_t,0))){
    SWIG_fail_ptr("Matrix_setTranslate",1,SWIGTYPE_p_osg__TransformationMatrixT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__PointT_float_3_t,0))){
    SWIG_fail_ptr("Matrix_setTranslate",2,SWIGTYPE_p_osg__PointT_float_3_t);
  }
  
  (arg1)->setTranslate((osg::TransformationMatrix< float >::PointType3f const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_setTranslate(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_osg__TransformationMatrixT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_osg__VectorT_float_3_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Matrix_setTranslate__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_osg__TransformationMatrixT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_osg__PointT_float_3_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Matrix_setTranslate__SWIG_2(L);
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_osg__TransformationMatrixT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_Matrix_setTranslate__SWIG_0(L);
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'Matrix_setTranslate'\n"
    "  Possible C/C++ prototypes are:\n"
    "    setTranslate(osg::TransformationMatrix< osg::Real32 > *,float const,float const,float const)\n"
    "    setTranslate(osg::TransformationMatrix< osg::Real32 > *,osg::TransformationMatrix< float >::VectorType3f const &)\n"
    "    setTranslate(osg::TransformationMatrix< osg::Real32 > *,osg::TransformationMatrix< float >::PointType3f const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Matrix_setRotate(lua_State* L) {
  int SWIG_arg = 0;
  osg::TransformationMatrix< osg::Real32 > *arg1 = (osg::TransformationMatrix< osg::Real32 > *) 0 ;
  osg::TransformationMatrix< float >::QuaternionType *arg2 = 0 ;
  
  SWIG_check_num_args("setRotate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setRotate",1,"osg::TransformationMatrix< osg::Real32 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setRotate",2,"osg::TransformationMatrix< float >::QuaternionType const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__TransformationMatrixT_float_t,0))){
    SWIG_fail_ptr("Matrix_setRotate",1,SWIGTYPE_p_osg__TransformationMatrixT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_QuaternionBaseT_float_t,0))){
    SWIG_fail_ptr("Matrix_setRotate",2,SWIGTYPE_p_QuaternionBaseT_float_t);
  }
  
  (arg1)->setRotate((osg::TransformationMatrix< float >::QuaternionType const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_setTransform__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  osg::TransformationMatrix< osg::Real32 > *arg1 = (osg::TransformationMatrix< osg::Real32 > *) 0 ;
  osg::TransformationMatrix< float >::VectorType3f *arg2 = 0 ;
  
  SWIG_check_num_args("setTransform",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setTransform",1,"osg::TransformationMatrix< osg::Real32 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setTransform",2,"osg::TransformationMatrix< float >::VectorType3f const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__TransformationMatrixT_float_t,0))){
    SWIG_fail_ptr("Matrix_setTransform",1,SWIGTYPE_p_osg__TransformationMatrixT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__VectorT_float_3_t,0))){
    SWIG_fail_ptr("Matrix_setTransform",2,SWIGTYPE_p_osg__VectorT_float_3_t);
  }
  
  (arg1)->setTransform((osg::TransformationMatrix< float >::VectorType3f const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_setTransform__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  osg::TransformationMatrix< osg::Real32 > *arg1 = (osg::TransformationMatrix< osg::Real32 > *) 0 ;
  osg::TransformationMatrix< float >::QuaternionType *arg2 = 0 ;
  
  SWIG_check_num_args("setTransform",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setTransform",1,"osg::TransformationMatrix< osg::Real32 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setTransform",2,"osg::TransformationMatrix< float >::QuaternionType const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__TransformationMatrixT_float_t,0))){
    SWIG_fail_ptr("Matrix_setTransform",1,SWIGTYPE_p_osg__TransformationMatrixT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_QuaternionBaseT_float_t,0))){
    SWIG_fail_ptr("Matrix_setTransform",2,SWIGTYPE_p_QuaternionBaseT_float_t);
  }
  
  (arg1)->setTransform((osg::TransformationMatrix< float >::QuaternionType const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_setTransform__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  osg::TransformationMatrix< osg::Real32 > *arg1 = (osg::TransformationMatrix< osg::Real32 > *) 0 ;
  osg::TransformationMatrix< float >::VectorType3f *arg2 = 0 ;
  osg::TransformationMatrix< float >::QuaternionType *arg3 = 0 ;
  
  SWIG_check_num_args("setTransform",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setTransform",1,"osg::TransformationMatrix< osg::Real32 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setTransform",2,"osg::TransformationMatrix< float >::VectorType3f const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("setTransform",3,"osg::TransformationMatrix< float >::QuaternionType const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__TransformationMatrixT_float_t,0))){
    SWIG_fail_ptr("Matrix_setTransform",1,SWIGTYPE_p_osg__TransformationMatrixT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__VectorT_float_3_t,0))){
    SWIG_fail_ptr("Matrix_setTransform",2,SWIGTYPE_p_osg__VectorT_float_3_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_QuaternionBaseT_float_t,0))){
    SWIG_fail_ptr("Matrix_setTransform",3,SWIGTYPE_p_QuaternionBaseT_float_t);
  }
  
  (arg1)->setTransform((osg::TransformationMatrix< float >::VectorType3f const &)*arg2,(osg::TransformationMatrix< float >::QuaternionType const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_setTransform__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  osg::TransformationMatrix< osg::Real32 > *arg1 = (osg::TransformationMatrix< osg::Real32 > *) 0 ;
  osg::TransformationMatrix< float >::VectorType3f *arg2 = 0 ;
  osg::TransformationMatrix< float >::QuaternionType *arg3 = 0 ;
  osg::TransformationMatrix< float >::VectorType3f *arg4 = 0 ;
  
  SWIG_check_num_args("setTransform",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setTransform",1,"osg::TransformationMatrix< osg::Real32 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setTransform",2,"osg::TransformationMatrix< float >::VectorType3f const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("setTransform",3,"osg::TransformationMatrix< float >::QuaternionType const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("setTransform",4,"osg::TransformationMatrix< float >::VectorType3f const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__TransformationMatrixT_float_t,0))){
    SWIG_fail_ptr("Matrix_setTransform",1,SWIGTYPE_p_osg__TransformationMatrixT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__VectorT_float_3_t,0))){
    SWIG_fail_ptr("Matrix_setTransform",2,SWIGTYPE_p_osg__VectorT_float_3_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_QuaternionBaseT_float_t,0))){
    SWIG_fail_ptr("Matrix_setTransform",3,SWIGTYPE_p_QuaternionBaseT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_osg__VectorT_float_3_t,0))){
    SWIG_fail_ptr("Matrix_setTransform",4,SWIGTYPE_p_osg__VectorT_float_3_t);
  }
  
  (arg1)->setTransform((osg::TransformationMatrix< float >::VectorType3f const &)*arg2,(osg::TransformationMatrix< float >::QuaternionType const &)*arg3,(osg::TransformationMatrix< float >::VectorType3f const &)*arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_setTransform__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  osg::TransformationMatrix< osg::Real32 > *arg1 = (osg::TransformationMatrix< osg::Real32 > *) 0 ;
  osg::TransformationMatrix< float >::VectorType3f *arg2 = 0 ;
  osg::TransformationMatrix< float >::QuaternionType *arg3 = 0 ;
  osg::TransformationMatrix< float >::VectorType3f *arg4 = 0 ;
  osg::TransformationMatrix< float >::QuaternionType *arg5 = 0 ;
  
  SWIG_check_num_args("setTransform",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setTransform",1,"osg::TransformationMatrix< osg::Real32 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setTransform",2,"osg::TransformationMatrix< float >::VectorType3f const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("setTransform",3,"osg::TransformationMatrix< float >::QuaternionType const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("setTransform",4,"osg::TransformationMatrix< float >::VectorType3f const &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("setTransform",5,"osg::TransformationMatrix< float >::QuaternionType const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__TransformationMatrixT_float_t,0))){
    SWIG_fail_ptr("Matrix_setTransform",1,SWIGTYPE_p_osg__TransformationMatrixT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__VectorT_float_3_t,0))){
    SWIG_fail_ptr("Matrix_setTransform",2,SWIGTYPE_p_osg__VectorT_float_3_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_QuaternionBaseT_float_t,0))){
    SWIG_fail_ptr("Matrix_setTransform",3,SWIGTYPE_p_QuaternionBaseT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_osg__VectorT_float_3_t,0))){
    SWIG_fail_ptr("Matrix_setTransform",4,SWIGTYPE_p_osg__VectorT_float_3_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_QuaternionBaseT_float_t,0))){
    SWIG_fail_ptr("Matrix_setTransform",5,SWIGTYPE_p_QuaternionBaseT_float_t);
  }
  
  (arg1)->setTransform((osg::TransformationMatrix< float >::VectorType3f const &)*arg2,(osg::TransformationMatrix< float >::QuaternionType const &)*arg3,(osg::TransformationMatrix< float >::VectorType3f const &)*arg4,(osg::TransformationMatrix< float >::QuaternionType const &)*arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_setTransform__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  osg::TransformationMatrix< osg::Real32 > *arg1 = (osg::TransformationMatrix< osg::Real32 > *) 0 ;
  osg::TransformationMatrix< float >::VectorType3f *arg2 = 0 ;
  osg::TransformationMatrix< float >::QuaternionType *arg3 = 0 ;
  osg::TransformationMatrix< float >::VectorType3f *arg4 = 0 ;
  osg::TransformationMatrix< float >::QuaternionType *arg5 = 0 ;
  osg::TransformationMatrix< float >::VectorType3f *arg6 = 0 ;
  
  SWIG_check_num_args("setTransform",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setTransform",1,"osg::TransformationMatrix< osg::Real32 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setTransform",2,"osg::TransformationMatrix< float >::VectorType3f const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("setTransform",3,"osg::TransformationMatrix< float >::QuaternionType const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("setTransform",4,"osg::TransformationMatrix< float >::VectorType3f const &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("setTransform",5,"osg::TransformationMatrix< float >::QuaternionType const &");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("setTransform",6,"osg::TransformationMatrix< float >::VectorType3f const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__TransformationMatrixT_float_t,0))){
    SWIG_fail_ptr("Matrix_setTransform",1,SWIGTYPE_p_osg__TransformationMatrixT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__VectorT_float_3_t,0))){
    SWIG_fail_ptr("Matrix_setTransform",2,SWIGTYPE_p_osg__VectorT_float_3_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_QuaternionBaseT_float_t,0))){
    SWIG_fail_ptr("Matrix_setTransform",3,SWIGTYPE_p_QuaternionBaseT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_osg__VectorT_float_3_t,0))){
    SWIG_fail_ptr("Matrix_setTransform",4,SWIGTYPE_p_osg__VectorT_float_3_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_QuaternionBaseT_float_t,0))){
    SWIG_fail_ptr("Matrix_setTransform",5,SWIGTYPE_p_QuaternionBaseT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_osg__VectorT_float_3_t,0))){
    SWIG_fail_ptr("Matrix_setTransform",6,SWIGTYPE_p_osg__VectorT_float_3_t);
  }
  
  (arg1)->setTransform((osg::TransformationMatrix< float >::VectorType3f const &)*arg2,(osg::TransformationMatrix< float >::QuaternionType const &)*arg3,(osg::TransformationMatrix< float >::VectorType3f const &)*arg4,(osg::TransformationMatrix< float >::QuaternionType const &)*arg5,(osg::TransformationMatrix< float >::VectorType3f const &)*arg6);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_setTransform(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_osg__TransformationMatrixT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_osg__VectorT_float_3_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Matrix_setTransform__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_osg__TransformationMatrixT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_QuaternionBaseT_float_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Matrix_setTransform__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_osg__TransformationMatrixT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_osg__VectorT_float_3_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_QuaternionBaseT_float_t, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_Matrix_setTransform__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_osg__TransformationMatrixT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_osg__VectorT_float_3_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_QuaternionBaseT_float_t, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_osg__VectorT_float_3_t, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_Matrix_setTransform__SWIG_3(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_osg__TransformationMatrixT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_osg__VectorT_float_3_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_QuaternionBaseT_float_t, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_osg__VectorT_float_3_t, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_QuaternionBaseT_float_t, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_Matrix_setTransform__SWIG_4(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_osg__TransformationMatrixT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_osg__VectorT_float_3_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_QuaternionBaseT_float_t, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_osg__VectorT_float_3_t, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_QuaternionBaseT_float_t, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                void *ptr;
                if (lua_isuserdata(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_osg__VectorT_float_3_t, 0)) {
                  _v = 0;
                } else {
                  _v = 1;
                }
              }
              if (_v) {
                return _wrap_Matrix_setTransform__SWIG_5(L);
              }
            }
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'Matrix_setTransform'\n"
    "  Possible C/C++ prototypes are:\n"
    "    setTransform(osg::TransformationMatrix< osg::Real32 > *,osg::TransformationMatrix< float >::VectorType3f const &)\n"
    "    setTransform(osg::TransformationMatrix< osg::Real32 > *,osg::TransformationMatrix< float >::QuaternionType const &)\n"
    "    setTransform(osg::TransformationMatrix< osg::Real32 > *,osg::TransformationMatrix< float >::VectorType3f const &,osg::TransformationMatrix< float >::QuaternionType const &)\n"
    "    setTransform(osg::TransformationMatrix< osg::Real32 > *,osg::TransformationMatrix< float >::VectorType3f const &,osg::TransformationMatrix< float >::QuaternionType const &,osg::TransformationMatrix< float >::VectorType3f const &)\n"
    "    setTransform(osg::TransformationMatrix< osg::Real32 > *,osg::TransformationMatrix< float >::VectorType3f const &,osg::TransformationMatrix< float >::QuaternionType const &,osg::TransformationMatrix< float >::VectorType3f const &,osg::TransformationMatrix< float >::QuaternionType const &)\n"
    "    setTransform(osg::TransformationMatrix< osg::Real32 > *,osg::TransformationMatrix< float >::VectorType3f const &,osg::TransformationMatrix< float >::QuaternionType const &,osg::TransformationMatrix< float >::VectorType3f const &,osg::TransformationMatrix< float >::QuaternionType const &,osg::TransformationMatrix< float >::VectorType3f const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Matrix_getTransform__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  osg::TransformationMatrix< osg::Real32 > *arg1 = (osg::TransformationMatrix< osg::Real32 > *) 0 ;
  osg::TransformationMatrix< float >::VectorType3f *arg2 = 0 ;
  osg::TransformationMatrix< float >::QuaternionType *arg3 = 0 ;
  osg::TransformationMatrix< float >::VectorType3f *arg4 = 0 ;
  osg::TransformationMatrix< float >::QuaternionType *arg5 = 0 ;
  osg::TransformationMatrix< float >::VectorType3f *arg6 = 0 ;
  
  SWIG_check_num_args("getTransform",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getTransform",1,"osg::TransformationMatrix< osg::Real32 > const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("getTransform",2,"osg::TransformationMatrix< float >::VectorType3f &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("getTransform",3,"osg::TransformationMatrix< float >::QuaternionType &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("getTransform",4,"osg::TransformationMatrix< float >::VectorType3f &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("getTransform",5,"osg::TransformationMatrix< float >::QuaternionType &");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("getTransform",6,"osg::TransformationMatrix< float >::VectorType3f const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__TransformationMatrixT_float_t,0))){
    SWIG_fail_ptr("Matrix_getTransform",1,SWIGTYPE_p_osg__TransformationMatrixT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__VectorT_float_3_t,0))){
    SWIG_fail_ptr("Matrix_getTransform",2,SWIGTYPE_p_osg__VectorT_float_3_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_QuaternionBaseT_float_t,0))){
    SWIG_fail_ptr("Matrix_getTransform",3,SWIGTYPE_p_QuaternionBaseT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_osg__VectorT_float_3_t,0))){
    SWIG_fail_ptr("Matrix_getTransform",4,SWIGTYPE_p_osg__VectorT_float_3_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_QuaternionBaseT_float_t,0))){
    SWIG_fail_ptr("Matrix_getTransform",5,SWIGTYPE_p_QuaternionBaseT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_osg__VectorT_float_3_t,0))){
    SWIG_fail_ptr("Matrix_getTransform",6,SWIGTYPE_p_osg__VectorT_float_3_t);
  }
  
  ((osg::TransformationMatrix< osg::Real32 > const *)arg1)->getTransform(*arg2,*arg3,*arg4,*arg5,(osg::TransformationMatrix< float >::VectorType3f const &)*arg6);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_getTransform__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  osg::TransformationMatrix< osg::Real32 > *arg1 = (osg::TransformationMatrix< osg::Real32 > *) 0 ;
  osg::TransformationMatrix< float >::VectorType3f *arg2 = 0 ;
  osg::TransformationMatrix< float >::QuaternionType *arg3 = 0 ;
  osg::TransformationMatrix< float >::VectorType3f *arg4 = 0 ;
  osg::TransformationMatrix< float >::QuaternionType *arg5 = 0 ;
  
  SWIG_check_num_args("getTransform",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getTransform",1,"osg::TransformationMatrix< osg::Real32 > const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("getTransform",2,"osg::TransformationMatrix< float >::VectorType3f &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("getTransform",3,"osg::TransformationMatrix< float >::QuaternionType &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("getTransform",4,"osg::TransformationMatrix< float >::VectorType3f &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("getTransform",5,"osg::TransformationMatrix< float >::QuaternionType &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__TransformationMatrixT_float_t,0))){
    SWIG_fail_ptr("Matrix_getTransform",1,SWIGTYPE_p_osg__TransformationMatrixT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__VectorT_float_3_t,0))){
    SWIG_fail_ptr("Matrix_getTransform",2,SWIGTYPE_p_osg__VectorT_float_3_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_QuaternionBaseT_float_t,0))){
    SWIG_fail_ptr("Matrix_getTransform",3,SWIGTYPE_p_QuaternionBaseT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_osg__VectorT_float_3_t,0))){
    SWIG_fail_ptr("Matrix_getTransform",4,SWIGTYPE_p_osg__VectorT_float_3_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_QuaternionBaseT_float_t,0))){
    SWIG_fail_ptr("Matrix_getTransform",5,SWIGTYPE_p_QuaternionBaseT_float_t);
  }
  
  ((osg::TransformationMatrix< osg::Real32 > const *)arg1)->getTransform(*arg2,*arg3,*arg4,*arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_getTransform(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_osg__TransformationMatrixT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_osg__VectorT_float_3_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_QuaternionBaseT_float_t, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_osg__VectorT_float_3_t, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_QuaternionBaseT_float_t, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_Matrix_getTransform__SWIG_1(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_osg__TransformationMatrixT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_osg__VectorT_float_3_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_QuaternionBaseT_float_t, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_osg__VectorT_float_3_t, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_QuaternionBaseT_float_t, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                void *ptr;
                if (lua_isuserdata(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_osg__VectorT_float_3_t, 0)) {
                  _v = 0;
                } else {
                  _v = 1;
                }
              }
              if (_v) {
                return _wrap_Matrix_getTransform__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'Matrix_getTransform'\n"
    "  Possible C/C++ prototypes are:\n"
    "    getTransform(osg::TransformationMatrix< osg::Real32 > const *,osg::TransformationMatrix< float >::VectorType3f &,osg::TransformationMatrix< float >::QuaternionType &,osg::TransformationMatrix< float >::VectorType3f &,osg::TransformationMatrix< float >::QuaternionType &,osg::TransformationMatrix< float >::VectorType3f const &)\n"
    "    getTransform(osg::TransformationMatrix< osg::Real32 > const *,osg::TransformationMatrix< float >::VectorType3f &,osg::TransformationMatrix< float >::QuaternionType &,osg::TransformationMatrix< float >::VectorType3f &,osg::TransformationMatrix< float >::QuaternionType &)\n");
  lua_error(L);return 0;
}


static int _wrap_Matrix_factor(lua_State* L) {
  int SWIG_arg = 0;
  osg::TransformationMatrix< osg::Real32 > *arg1 = (osg::TransformationMatrix< osg::Real32 > *) 0 ;
  osg::TransformationMatrix< osg::Real32 > *arg2 = 0 ;
  osg::TransformationMatrix< float >::VectorType3f *arg3 = 0 ;
  osg::TransformationMatrix< osg::Real32 > *arg4 = 0 ;
  osg::TransformationMatrix< float >::VectorType3f *arg5 = 0 ;
  osg::TransformationMatrix< osg::Real32 > *arg6 = 0 ;
  bool result;
  
  SWIG_check_num_args("factor",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("factor",1,"osg::TransformationMatrix< osg::Real32 > const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("factor",2,"osg::TransformationMatrix< osg::Real32 > &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("factor",3,"osg::TransformationMatrix< float >::VectorType3f &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("factor",4,"osg::TransformationMatrix< osg::Real32 > &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("factor",5,"osg::TransformationMatrix< float >::VectorType3f &");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("factor",6,"osg::TransformationMatrix< osg::Real32 > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__TransformationMatrixT_float_t,0))){
    SWIG_fail_ptr("Matrix_factor",1,SWIGTYPE_p_osg__TransformationMatrixT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__TransformationMatrixT_float_t,0))){
    SWIG_fail_ptr("Matrix_factor",2,SWIGTYPE_p_osg__TransformationMatrixT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_osg__VectorT_float_3_t,0))){
    SWIG_fail_ptr("Matrix_factor",3,SWIGTYPE_p_osg__VectorT_float_3_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_osg__TransformationMatrixT_float_t,0))){
    SWIG_fail_ptr("Matrix_factor",4,SWIGTYPE_p_osg__TransformationMatrixT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_osg__VectorT_float_3_t,0))){
    SWIG_fail_ptr("Matrix_factor",5,SWIGTYPE_p_osg__VectorT_float_3_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_osg__TransformationMatrixT_float_t,0))){
    SWIG_fail_ptr("Matrix_factor",6,SWIGTYPE_p_osg__TransformationMatrixT_float_t);
  }
  
  result = (bool)((osg::TransformationMatrix< osg::Real32 > const *)arg1)->factor(*arg2,*arg3,*arg4,*arg5,*arg6);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_mult__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  osg::TransformationMatrix< osg::Real32 > *arg1 = (osg::TransformationMatrix< osg::Real32 > *) 0 ;
  osg::TransformationMatrix< float >::PointType *arg2 = 0 ;
  osg::TransformationMatrix< float >::PointType *arg3 = 0 ;
  
  SWIG_check_num_args("mult",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mult",1,"osg::TransformationMatrix< osg::Real32 > const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("mult",2,"osg::TransformationMatrix< float >::PointType const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("mult",3,"osg::TransformationMatrix< float >::PointType &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__TransformationMatrixT_float_t,0))){
    SWIG_fail_ptr("Matrix_mult",1,SWIGTYPE_p_osg__TransformationMatrixT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__PointT_float_4_t,0))){
    SWIG_fail_ptr("Matrix_mult",2,SWIGTYPE_p_osg__PointT_float_4_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_osg__PointT_float_4_t,0))){
    SWIG_fail_ptr("Matrix_mult",3,SWIGTYPE_p_osg__PointT_float_4_t);
  }
  
  ((osg::TransformationMatrix< osg::Real32 > const *)arg1)->mult((osg::TransformationMatrix< float >::PointType const &)*arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_multFull__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  osg::TransformationMatrix< osg::Real32 > *arg1 = (osg::TransformationMatrix< osg::Real32 > *) 0 ;
  osg::TransformationMatrix< float >::PointType3f *arg2 = 0 ;
  osg::TransformationMatrix< float >::PointType3f *arg3 = 0 ;
  
  SWIG_check_num_args("multFull",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("multFull",1,"osg::TransformationMatrix< osg::Real32 > const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("multFull",2,"osg::TransformationMatrix< float >::PointType3f const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("multFull",3,"osg::TransformationMatrix< float >::PointType3f &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__TransformationMatrixT_float_t,0))){
    SWIG_fail_ptr("Matrix_multFull",1,SWIGTYPE_p_osg__TransformationMatrixT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__PointT_float_3_t,0))){
    SWIG_fail_ptr("Matrix_multFull",2,SWIGTYPE_p_osg__PointT_float_3_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_osg__PointT_float_3_t,0))){
    SWIG_fail_ptr("Matrix_multFull",3,SWIGTYPE_p_osg__PointT_float_3_t);
  }
  
  ((osg::TransformationMatrix< osg::Real32 > const *)arg1)->multFull((osg::TransformationMatrix< float >::PointType3f const &)*arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_mult__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  osg::TransformationMatrix< osg::Real32 > *arg1 = (osg::TransformationMatrix< osg::Real32 > *) 0 ;
  osg::TransformationMatrix< float >::PointType3f *arg2 = 0 ;
  osg::TransformationMatrix< float >::PointType3f *arg3 = 0 ;
  
  SWIG_check_num_args("mult",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mult",1,"osg::TransformationMatrix< osg::Real32 > const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("mult",2,"osg::TransformationMatrix< float >::PointType3f const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("mult",3,"osg::TransformationMatrix< float >::PointType3f &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__TransformationMatrixT_float_t,0))){
    SWIG_fail_ptr("Matrix_mult",1,SWIGTYPE_p_osg__TransformationMatrixT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__PointT_float_3_t,0))){
    SWIG_fail_ptr("Matrix_mult",2,SWIGTYPE_p_osg__PointT_float_3_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_osg__PointT_float_3_t,0))){
    SWIG_fail_ptr("Matrix_mult",3,SWIGTYPE_p_osg__PointT_float_3_t);
  }
  
  ((osg::TransformationMatrix< osg::Real32 > const *)arg1)->mult((osg::TransformationMatrix< float >::PointType3f const &)*arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_mult__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  osg::TransformationMatrix< osg::Real32 > *arg1 = (osg::TransformationMatrix< osg::Real32 > *) 0 ;
  osg::TransformationMatrix< float >::VectorType *arg2 = 0 ;
  osg::TransformationMatrix< float >::VectorType *arg3 = 0 ;
  
  SWIG_check_num_args("mult",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mult",1,"osg::TransformationMatrix< osg::Real32 > const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("mult",2,"osg::TransformationMatrix< float >::VectorType const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("mult",3,"osg::TransformationMatrix< float >::VectorType &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__TransformationMatrixT_float_t,0))){
    SWIG_fail_ptr("Matrix_mult",1,SWIGTYPE_p_osg__TransformationMatrixT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__VectorT_float_4_t,0))){
    SWIG_fail_ptr("Matrix_mult",2,SWIGTYPE_p_osg__VectorT_float_4_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_osg__VectorT_float_4_t,0))){
    SWIG_fail_ptr("Matrix_mult",3,SWIGTYPE_p_osg__VectorT_float_4_t);
  }
  
  ((osg::TransformationMatrix< osg::Real32 > const *)arg1)->mult((osg::TransformationMatrix< float >::VectorType const &)*arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_multFull__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  osg::TransformationMatrix< osg::Real32 > *arg1 = (osg::TransformationMatrix< osg::Real32 > *) 0 ;
  osg::TransformationMatrix< float >::VectorType3f *arg2 = 0 ;
  osg::TransformationMatrix< float >::VectorType3f *arg3 = 0 ;
  
  SWIG_check_num_args("multFull",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("multFull",1,"osg::TransformationMatrix< osg::Real32 > const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("multFull",2,"osg::TransformationMatrix< float >::VectorType3f const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("multFull",3,"osg::TransformationMatrix< float >::VectorType3f &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__TransformationMatrixT_float_t,0))){
    SWIG_fail_ptr("Matrix_multFull",1,SWIGTYPE_p_osg__TransformationMatrixT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__VectorT_float_3_t,0))){
    SWIG_fail_ptr("Matrix_multFull",2,SWIGTYPE_p_osg__VectorT_float_3_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_osg__VectorT_float_3_t,0))){
    SWIG_fail_ptr("Matrix_multFull",3,SWIGTYPE_p_osg__VectorT_float_3_t);
  }
  
  ((osg::TransformationMatrix< osg::Real32 > const *)arg1)->multFull((osg::TransformationMatrix< float >::VectorType3f const &)*arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_multFull(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_osg__TransformationMatrixT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_osg__VectorT_float_3_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_osg__VectorT_float_3_t, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_Matrix_multFull__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_osg__TransformationMatrixT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_osg__PointT_float_3_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_osg__PointT_float_3_t, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_Matrix_multFull__SWIG_0(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'Matrix_multFull'\n"
    "  Possible C/C++ prototypes are:\n"
    "    multFull(osg::TransformationMatrix< osg::Real32 > const *,osg::TransformationMatrix< float >::PointType3f const &,osg::TransformationMatrix< float >::PointType3f &)\n"
    "    multFull(osg::TransformationMatrix< osg::Real32 > const *,osg::TransformationMatrix< float >::VectorType3f const &,osg::TransformationMatrix< float >::VectorType3f &)\n");
  lua_error(L);return 0;
}


static int _wrap_Matrix_mult__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  osg::TransformationMatrix< osg::Real32 > *arg1 = (osg::TransformationMatrix< osg::Real32 > *) 0 ;
  osg::TransformationMatrix< float >::VectorType3f *arg2 = 0 ;
  osg::TransformationMatrix< float >::VectorType3f *arg3 = 0 ;
  
  SWIG_check_num_args("mult",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mult",1,"osg::TransformationMatrix< osg::Real32 > const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("mult",2,"osg::TransformationMatrix< float >::VectorType3f const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("mult",3,"osg::TransformationMatrix< float >::VectorType3f &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__TransformationMatrixT_float_t,0))){
    SWIG_fail_ptr("Matrix_mult",1,SWIGTYPE_p_osg__TransformationMatrixT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__VectorT_float_3_t,0))){
    SWIG_fail_ptr("Matrix_mult",2,SWIGTYPE_p_osg__VectorT_float_3_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_osg__VectorT_float_3_t,0))){
    SWIG_fail_ptr("Matrix_mult",3,SWIGTYPE_p_osg__VectorT_float_3_t);
  }
  
  ((osg::TransformationMatrix< osg::Real32 > const *)arg1)->mult((osg::TransformationMatrix< float >::VectorType3f const &)*arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_mult3x3__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  osg::TransformationMatrix< osg::Real32 > *arg1 = (osg::TransformationMatrix< osg::Real32 > *) 0 ;
  osg::TransformationMatrix< float >::PointType3f *arg2 = 0 ;
  osg::TransformationMatrix< float >::PointType3f *arg3 = 0 ;
  
  SWIG_check_num_args("mult3x3",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mult3x3",1,"osg::TransformationMatrix< osg::Real32 > const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("mult3x3",2,"osg::TransformationMatrix< float >::PointType3f const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("mult3x3",3,"osg::TransformationMatrix< float >::PointType3f &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__TransformationMatrixT_float_t,0))){
    SWIG_fail_ptr("Matrix_mult3x3",1,SWIGTYPE_p_osg__TransformationMatrixT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__PointT_float_3_t,0))){
    SWIG_fail_ptr("Matrix_mult3x3",2,SWIGTYPE_p_osg__PointT_float_3_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_osg__PointT_float_3_t,0))){
    SWIG_fail_ptr("Matrix_mult3x3",3,SWIGTYPE_p_osg__PointT_float_3_t);
  }
  
  ((osg::TransformationMatrix< osg::Real32 > const *)arg1)->mult3x3((osg::TransformationMatrix< float >::PointType3f const &)*arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_mult3x3__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  osg::TransformationMatrix< osg::Real32 > *arg1 = (osg::TransformationMatrix< osg::Real32 > *) 0 ;
  osg::TransformationMatrix< float >::VectorType3f *arg2 = 0 ;
  osg::TransformationMatrix< float >::VectorType3f *arg3 = 0 ;
  
  SWIG_check_num_args("mult3x3",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mult3x3",1,"osg::TransformationMatrix< osg::Real32 > const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("mult3x3",2,"osg::TransformationMatrix< float >::VectorType3f const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("mult3x3",3,"osg::TransformationMatrix< float >::VectorType3f &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__TransformationMatrixT_float_t,0))){
    SWIG_fail_ptr("Matrix_mult3x3",1,SWIGTYPE_p_osg__TransformationMatrixT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__VectorT_float_3_t,0))){
    SWIG_fail_ptr("Matrix_mult3x3",2,SWIGTYPE_p_osg__VectorT_float_3_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_osg__VectorT_float_3_t,0))){
    SWIG_fail_ptr("Matrix_mult3x3",3,SWIGTYPE_p_osg__VectorT_float_3_t);
  }
  
  ((osg::TransformationMatrix< osg::Real32 > const *)arg1)->mult3x3((osg::TransformationMatrix< float >::VectorType3f const &)*arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_mult3x3(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_osg__TransformationMatrixT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_osg__VectorT_float_3_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_osg__VectorT_float_3_t, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_Matrix_mult3x3__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_osg__TransformationMatrixT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_osg__PointT_float_3_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_osg__PointT_float_3_t, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_Matrix_mult3x3__SWIG_0(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'Matrix_mult3x3'\n"
    "  Possible C/C++ prototypes are:\n"
    "    mult3x3(osg::TransformationMatrix< osg::Real32 > const *,osg::TransformationMatrix< float >::PointType3f const &,osg::TransformationMatrix< float >::PointType3f &)\n"
    "    mult3x3(osg::TransformationMatrix< osg::Real32 > const *,osg::TransformationMatrix< float >::VectorType3f const &,osg::TransformationMatrix< float >::VectorType3f &)\n");
  lua_error(L);return 0;
}


static int _wrap_Matrix___mul__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  osg::TransformationMatrix< osg::Real32 > *arg1 = (osg::TransformationMatrix< osg::Real32 > *) 0 ;
  osg::TransformationMatrix< float >::PointType *arg2 = 0 ;
  osg::TransformationMatrix< float >::PointType result;
  
  SWIG_check_num_args("operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("operator *",1,"osg::TransformationMatrix< osg::Real32 > const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("operator *",2,"osg::TransformationMatrix< float >::PointType const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__TransformationMatrixT_float_t,0))){
    SWIG_fail_ptr("Matrix___mul",1,SWIGTYPE_p_osg__TransformationMatrixT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__PointT_float_4_t,0))){
    SWIG_fail_ptr("Matrix___mul",2,SWIGTYPE_p_osg__PointT_float_4_t);
  }
  
  result = ((osg::TransformationMatrix< osg::Real32 > const *)arg1)->operator *((osg::TransformationMatrix< float >::PointType const &)*arg2);
  {
    osg::TransformationMatrix< float >::PointType * resultptr = new osg::TransformationMatrix< float >::PointType((const osg::TransformationMatrix< float >::PointType &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_osg__PointT_float_4_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix___mul__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  osg::TransformationMatrix< osg::Real32 > *arg1 = (osg::TransformationMatrix< osg::Real32 > *) 0 ;
  osg::TransformationMatrix< float >::PointType3f *arg2 = 0 ;
  osg::TransformationMatrix< float >::PointType3f result;
  
  SWIG_check_num_args("operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("operator *",1,"osg::TransformationMatrix< osg::Real32 > const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("operator *",2,"osg::TransformationMatrix< float >::PointType3f const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__TransformationMatrixT_float_t,0))){
    SWIG_fail_ptr("Matrix___mul",1,SWIGTYPE_p_osg__TransformationMatrixT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__PointT_float_3_t,0))){
    SWIG_fail_ptr("Matrix___mul",2,SWIGTYPE_p_osg__PointT_float_3_t);
  }
  
  result = ((osg::TransformationMatrix< osg::Real32 > const *)arg1)->operator *((osg::TransformationMatrix< float >::PointType3f const &)*arg2);
  {
    osg::TransformationMatrix< float >::PointType3f * resultptr = new osg::TransformationMatrix< float >::PointType3f((const osg::TransformationMatrix< float >::PointType3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_osg__PointT_float_3_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix___mul__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  osg::TransformationMatrix< osg::Real32 > *arg1 = (osg::TransformationMatrix< osg::Real32 > *) 0 ;
  osg::TransformationMatrix< float >::VectorType *arg2 = 0 ;
  osg::TransformationMatrix< float >::VectorType result;
  
  SWIG_check_num_args("operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("operator *",1,"osg::TransformationMatrix< osg::Real32 > const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("operator *",2,"osg::TransformationMatrix< float >::VectorType const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__TransformationMatrixT_float_t,0))){
    SWIG_fail_ptr("Matrix___mul",1,SWIGTYPE_p_osg__TransformationMatrixT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__VectorT_float_4_t,0))){
    SWIG_fail_ptr("Matrix___mul",2,SWIGTYPE_p_osg__VectorT_float_4_t);
  }
  
  result = ((osg::TransformationMatrix< osg::Real32 > const *)arg1)->operator *((osg::TransformationMatrix< float >::VectorType const &)*arg2);
  {
    osg::TransformationMatrix< float >::VectorType * resultptr = new osg::TransformationMatrix< float >::VectorType((const osg::TransformationMatrix< float >::VectorType &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_osg__VectorT_float_4_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix___mul__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  osg::TransformationMatrix< osg::Real32 > *arg1 = (osg::TransformationMatrix< osg::Real32 > *) 0 ;
  osg::TransformationMatrix< float >::VectorType3f *arg2 = 0 ;
  osg::TransformationMatrix< float >::VectorType3f result;
  
  SWIG_check_num_args("operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("operator *",1,"osg::TransformationMatrix< osg::Real32 > const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("operator *",2,"osg::TransformationMatrix< float >::VectorType3f const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__TransformationMatrixT_float_t,0))){
    SWIG_fail_ptr("Matrix___mul",1,SWIGTYPE_p_osg__TransformationMatrixT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__VectorT_float_3_t,0))){
    SWIG_fail_ptr("Matrix___mul",2,SWIGTYPE_p_osg__VectorT_float_3_t);
  }
  
  result = ((osg::TransformationMatrix< osg::Real32 > const *)arg1)->operator *((osg::TransformationMatrix< float >::VectorType3f const &)*arg2);
  {
    osg::TransformationMatrix< float >::VectorType3f * resultptr = new osg::TransformationMatrix< float >::VectorType3f((const osg::TransformationMatrix< float >::VectorType3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_osg__VectorT_float_3_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix___mul(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_osg__TransformationMatrixT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_osg__VectorT_float_4_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Matrix___mul__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_osg__TransformationMatrixT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_osg__VectorT_float_3_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Matrix___mul__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_osg__TransformationMatrixT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_osg__PointT_float_4_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Matrix___mul__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_osg__TransformationMatrixT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_osg__PointT_float_3_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Matrix___mul__SWIG_1(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'Matrix___mul'\n"
    "  Possible C/C++ prototypes are:\n"
    "    operator *(osg::TransformationMatrix< osg::Real32 > const *,osg::TransformationMatrix< float >::PointType const &)\n"
    "    operator *(osg::TransformationMatrix< osg::Real32 > const *,osg::TransformationMatrix< float >::PointType3f const &)\n"
    "    operator *(osg::TransformationMatrix< osg::Real32 > const *,osg::TransformationMatrix< float >::VectorType const &)\n"
    "    operator *(osg::TransformationMatrix< osg::Real32 > const *,osg::TransformationMatrix< float >::VectorType3f const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Matrix_equals(lua_State* L) {
  int SWIG_arg = 0;
  osg::TransformationMatrix< osg::Real32 > *arg1 = (osg::TransformationMatrix< osg::Real32 > *) 0 ;
  osg::TransformationMatrix< osg::Real32 > *arg2 = 0 ;
  osg::TransformationMatrix< float >::ValueType arg3 ;
  bool result;
  
  SWIG_check_num_args("equals",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("equals",1,"osg::TransformationMatrix< osg::Real32 > const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("equals",2,"osg::TransformationMatrix< osg::Real32 > const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("equals",3,"osg::TransformationMatrix< float >::ValueType const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__TransformationMatrixT_float_t,0))){
    SWIG_fail_ptr("Matrix_equals",1,SWIGTYPE_p_osg__TransformationMatrixT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__TransformationMatrixT_float_t,0))){
    SWIG_fail_ptr("Matrix_equals",2,SWIGTYPE_p_osg__TransformationMatrixT_float_t);
  }
  
  arg3 = (osg::TransformationMatrix< float >::ValueType const)lua_tonumber(L, 3);
  result = (bool)((osg::TransformationMatrix< osg::Real32 > const *)arg1)->equals((osg::TransformationMatrix< osg::Real32 > const &)*arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_det3(lua_State* L) {
  int SWIG_arg = 0;
  osg::TransformationMatrix< osg::Real32 > *arg1 = (osg::TransformationMatrix< osg::Real32 > *) 0 ;
  float result;
  
  SWIG_check_num_args("det3",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("det3",1,"osg::TransformationMatrix< osg::Real32 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__TransformationMatrixT_float_t,0))){
    SWIG_fail_ptr("Matrix_det3",1,SWIGTYPE_p_osg__TransformationMatrixT_float_t);
  }
  
  result = (float)((osg::TransformationMatrix< osg::Real32 > const *)arg1)->det3();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_det(lua_State* L) {
  int SWIG_arg = 0;
  osg::TransformationMatrix< osg::Real32 > *arg1 = (osg::TransformationMatrix< osg::Real32 > *) 0 ;
  float result;
  
  SWIG_check_num_args("det",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("det",1,"osg::TransformationMatrix< osg::Real32 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__TransformationMatrixT_float_t,0))){
    SWIG_fail_ptr("Matrix_det",1,SWIGTYPE_p_osg__TransformationMatrixT_float_t);
  }
  
  result = (float)((osg::TransformationMatrix< osg::Real32 > const *)arg1)->det();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_inverse(lua_State* L) {
  int SWIG_arg = 0;
  osg::TransformationMatrix< osg::Real32 > *arg1 = (osg::TransformationMatrix< osg::Real32 > *) 0 ;
  osg::TransformationMatrix< osg::Real32 > *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("inverse",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inverse",1,"osg::TransformationMatrix< osg::Real32 > const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("inverse",2,"osg::TransformationMatrix< osg::Real32 > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__TransformationMatrixT_float_t,0))){
    SWIG_fail_ptr("Matrix_inverse",1,SWIGTYPE_p_osg__TransformationMatrixT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__TransformationMatrixT_float_t,0))){
    SWIG_fail_ptr("Matrix_inverse",2,SWIGTYPE_p_osg__TransformationMatrixT_float_t);
  }
  
  result = (bool)((osg::TransformationMatrix< osg::Real32 > const *)arg1)->inverse(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_invert(lua_State* L) {
  int SWIG_arg = 0;
  osg::TransformationMatrix< osg::Real32 > *arg1 = (osg::TransformationMatrix< osg::Real32 > *) 0 ;
  bool result;
  
  SWIG_check_num_args("invert",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("invert",1,"osg::TransformationMatrix< osg::Real32 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__TransformationMatrixT_float_t,0))){
    SWIG_fail_ptr("Matrix_invert",1,SWIGTYPE_p_osg__TransformationMatrixT_float_t);
  }
  
  result = (bool)(arg1)->invert();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_invertFrom(lua_State* L) {
  int SWIG_arg = 0;
  osg::TransformationMatrix< osg::Real32 > *arg1 = (osg::TransformationMatrix< osg::Real32 > *) 0 ;
  osg::TransformationMatrix< osg::Real32 > *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("invertFrom",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("invertFrom",1,"osg::TransformationMatrix< osg::Real32 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("invertFrom",2,"osg::TransformationMatrix< osg::Real32 > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__TransformationMatrixT_float_t,0))){
    SWIG_fail_ptr("Matrix_invertFrom",1,SWIGTYPE_p_osg__TransformationMatrixT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__TransformationMatrixT_float_t,0))){
    SWIG_fail_ptr("Matrix_invertFrom",2,SWIGTYPE_p_osg__TransformationMatrixT_float_t);
  }
  
  result = (bool)(arg1)->invertFrom((osg::TransformationMatrix< osg::Real32 > const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_inverse3(lua_State* L) {
  int SWIG_arg = 0;
  osg::TransformationMatrix< osg::Real32 > *arg1 = (osg::TransformationMatrix< osg::Real32 > *) 0 ;
  osg::TransformationMatrix< osg::Real32 > *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("inverse3",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inverse3",1,"osg::TransformationMatrix< osg::Real32 > const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("inverse3",2,"osg::TransformationMatrix< osg::Real32 > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__TransformationMatrixT_float_t,0))){
    SWIG_fail_ptr("Matrix_inverse3",1,SWIGTYPE_p_osg__TransformationMatrixT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__TransformationMatrixT_float_t,0))){
    SWIG_fail_ptr("Matrix_inverse3",2,SWIGTYPE_p_osg__TransformationMatrixT_float_t);
  }
  
  result = (bool)((osg::TransformationMatrix< osg::Real32 > const *)arg1)->inverse3(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_invert3(lua_State* L) {
  int SWIG_arg = 0;
  osg::TransformationMatrix< osg::Real32 > *arg1 = (osg::TransformationMatrix< osg::Real32 > *) 0 ;
  bool result;
  
  SWIG_check_num_args("invert3",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("invert3",1,"osg::TransformationMatrix< osg::Real32 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__TransformationMatrixT_float_t,0))){
    SWIG_fail_ptr("Matrix_invert3",1,SWIGTYPE_p_osg__TransformationMatrixT_float_t);
  }
  
  result = (bool)(arg1)->invert3();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_invertFrom3(lua_State* L) {
  int SWIG_arg = 0;
  osg::TransformationMatrix< osg::Real32 > *arg1 = (osg::TransformationMatrix< osg::Real32 > *) 0 ;
  osg::TransformationMatrix< osg::Real32 > *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("invertFrom3",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("invertFrom3",1,"osg::TransformationMatrix< osg::Real32 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("invertFrom3",2,"osg::TransformationMatrix< osg::Real32 > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__TransformationMatrixT_float_t,0))){
    SWIG_fail_ptr("Matrix_invertFrom3",1,SWIGTYPE_p_osg__TransformationMatrixT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__TransformationMatrixT_float_t,0))){
    SWIG_fail_ptr("Matrix_invertFrom3",2,SWIGTYPE_p_osg__TransformationMatrixT_float_t);
  }
  
  result = (bool)(arg1)->invertFrom3((osg::TransformationMatrix< osg::Real32 > const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_transposed(lua_State* L) {
  int SWIG_arg = 0;
  osg::TransformationMatrix< osg::Real32 > *arg1 = (osg::TransformationMatrix< osg::Real32 > *) 0 ;
  osg::TransformationMatrix< osg::Real32 > *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("transposed",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("transposed",1,"osg::TransformationMatrix< osg::Real32 > const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("transposed",2,"osg::TransformationMatrix< osg::Real32 > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__TransformationMatrixT_float_t,0))){
    SWIG_fail_ptr("Matrix_transposed",1,SWIGTYPE_p_osg__TransformationMatrixT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__TransformationMatrixT_float_t,0))){
    SWIG_fail_ptr("Matrix_transposed",2,SWIGTYPE_p_osg__TransformationMatrixT_float_t);
  }
  
  result = (bool)((osg::TransformationMatrix< osg::Real32 > const *)arg1)->transposed(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_transpose(lua_State* L) {
  int SWIG_arg = 0;
  osg::TransformationMatrix< osg::Real32 > *arg1 = (osg::TransformationMatrix< osg::Real32 > *) 0 ;
  bool result;
  
  SWIG_check_num_args("transpose",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("transpose",1,"osg::TransformationMatrix< osg::Real32 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__TransformationMatrixT_float_t,0))){
    SWIG_fail_ptr("Matrix_transpose",1,SWIGTYPE_p_osg__TransformationMatrixT_float_t);
  }
  
  result = (bool)(arg1)->transpose();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_transposeFrom(lua_State* L) {
  int SWIG_arg = 0;
  osg::TransformationMatrix< osg::Real32 > *arg1 = (osg::TransformationMatrix< osg::Real32 > *) 0 ;
  osg::TransformationMatrix< osg::Real32 > *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("transposeFrom",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("transposeFrom",1,"osg::TransformationMatrix< osg::Real32 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("transposeFrom",2,"osg::TransformationMatrix< osg::Real32 > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__TransformationMatrixT_float_t,0))){
    SWIG_fail_ptr("Matrix_transposeFrom",1,SWIGTYPE_p_osg__TransformationMatrixT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__TransformationMatrixT_float_t,0))){
    SWIG_fail_ptr("Matrix_transposeFrom",2,SWIGTYPE_p_osg__TransformationMatrixT_float_t);
  }
  
  result = (bool)(arg1)->transposeFrom((osg::TransformationMatrix< osg::Real32 > const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_mult__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  osg::TransformationMatrix< osg::Real32 > *arg1 = (osg::TransformationMatrix< osg::Real32 > *) 0 ;
  osg::TransformationMatrix< osg::Real32 > *arg2 = 0 ;
  
  SWIG_check_num_args("mult",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mult",1,"osg::TransformationMatrix< osg::Real32 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("mult",2,"osg::TransformationMatrix< osg::Real32 > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__TransformationMatrixT_float_t,0))){
    SWIG_fail_ptr("Matrix_mult",1,SWIGTYPE_p_osg__TransformationMatrixT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__TransformationMatrixT_float_t,0))){
    SWIG_fail_ptr("Matrix_mult",2,SWIGTYPE_p_osg__TransformationMatrixT_float_t);
  }
  
  (arg1)->mult((osg::TransformationMatrix< osg::Real32 > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_mult(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_osg__TransformationMatrixT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_osg__TransformationMatrixT_float_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Matrix_mult__SWIG_4(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_osg__TransformationMatrixT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_osg__VectorT_float_3_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_osg__VectorT_float_3_t, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_Matrix_mult__SWIG_3(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_osg__TransformationMatrixT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_osg__VectorT_float_4_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_osg__VectorT_float_4_t, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_Matrix_mult__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_osg__TransformationMatrixT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_osg__PointT_float_3_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_osg__PointT_float_3_t, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_Matrix_mult__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_osg__TransformationMatrixT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_osg__PointT_float_4_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_osg__PointT_float_4_t, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_Matrix_mult__SWIG_0(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'Matrix_mult'\n"
    "  Possible C/C++ prototypes are:\n"
    "    mult(osg::TransformationMatrix< osg::Real32 > const *,osg::TransformationMatrix< float >::PointType const &,osg::TransformationMatrix< float >::PointType &)\n"
    "    mult(osg::TransformationMatrix< osg::Real32 > const *,osg::TransformationMatrix< float >::PointType3f const &,osg::TransformationMatrix< float >::PointType3f &)\n"
    "    mult(osg::TransformationMatrix< osg::Real32 > const *,osg::TransformationMatrix< float >::VectorType const &,osg::TransformationMatrix< float >::VectorType &)\n"
    "    mult(osg::TransformationMatrix< osg::Real32 > const *,osg::TransformationMatrix< float >::VectorType3f const &,osg::TransformationMatrix< float >::VectorType3f &)\n"
    "    mult(osg::TransformationMatrix< osg::Real32 > *,osg::TransformationMatrix< osg::Real32 > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Matrix_multLeft(lua_State* L) {
  int SWIG_arg = 0;
  osg::TransformationMatrix< osg::Real32 > *arg1 = (osg::TransformationMatrix< osg::Real32 > *) 0 ;
  osg::TransformationMatrix< osg::Real32 > *arg2 = 0 ;
  
  SWIG_check_num_args("multLeft",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("multLeft",1,"osg::TransformationMatrix< osg::Real32 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("multLeft",2,"osg::TransformationMatrix< osg::Real32 > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__TransformationMatrixT_float_t,0))){
    SWIG_fail_ptr("Matrix_multLeft",1,SWIGTYPE_p_osg__TransformationMatrixT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__TransformationMatrixT_float_t,0))){
    SWIG_fail_ptr("Matrix_multLeft",2,SWIGTYPE_p_osg__TransformationMatrixT_float_t);
  }
  
  (arg1)->multLeft((osg::TransformationMatrix< osg::Real32 > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_add(lua_State* L) {
  int SWIG_arg = 0;
  osg::TransformationMatrix< osg::Real32 > *arg1 = (osg::TransformationMatrix< osg::Real32 > *) 0 ;
  osg::TransformationMatrix< osg::Real32 > *arg2 = 0 ;
  
  SWIG_check_num_args("add",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("add",1,"osg::TransformationMatrix< osg::Real32 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("add",2,"osg::TransformationMatrix< osg::Real32 > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__TransformationMatrixT_float_t,0))){
    SWIG_fail_ptr("Matrix_add",1,SWIGTYPE_p_osg__TransformationMatrixT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__TransformationMatrixT_float_t,0))){
    SWIG_fail_ptr("Matrix_add",2,SWIGTYPE_p_osg__TransformationMatrixT_float_t);
  }
  
  (arg1)->add((osg::TransformationMatrix< osg::Real32 > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_scale(lua_State* L) {
  int SWIG_arg = 0;
  osg::TransformationMatrix< osg::Real32 > *arg1 = (osg::TransformationMatrix< osg::Real32 > *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("scale",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("scale",1,"osg::TransformationMatrix< osg::Real32 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("scale",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__TransformationMatrixT_float_t,0))){
    SWIG_fail_ptr("Matrix_scale",1,SWIGTYPE_p_osg__TransformationMatrixT_float_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->scale(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_addScaled(lua_State* L) {
  int SWIG_arg = 0;
  osg::TransformationMatrix< osg::Real32 > *arg1 = (osg::TransformationMatrix< osg::Real32 > *) 0 ;
  osg::TransformationMatrix< osg::Real32 > *arg2 = 0 ;
  float arg3 ;
  
  SWIG_check_num_args("addScaled",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("addScaled",1,"osg::TransformationMatrix< osg::Real32 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("addScaled",2,"osg::TransformationMatrix< osg::Real32 > const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("addScaled",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__TransformationMatrixT_float_t,0))){
    SWIG_fail_ptr("Matrix_addScaled",1,SWIGTYPE_p_osg__TransformationMatrixT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__TransformationMatrixT_float_t,0))){
    SWIG_fail_ptr("Matrix_addScaled",2,SWIGTYPE_p_osg__TransformationMatrixT_float_t);
  }
  
  arg3 = (float)lua_tonumber(L, 3);
  (arg1)->addScaled((osg::TransformationMatrix< osg::Real32 > const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_negate(lua_State* L) {
  int SWIG_arg = 0;
  osg::TransformationMatrix< osg::Real32 > *arg1 = (osg::TransformationMatrix< osg::Real32 > *) 0 ;
  
  SWIG_check_num_args("negate",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("negate",1,"osg::TransformationMatrix< osg::Real32 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__TransformationMatrixT_float_t,0))){
    SWIG_fail_ptr("Matrix_negate",1,SWIGTYPE_p_osg__TransformationMatrixT_float_t);
  }
  
  (arg1)->negate();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_norm1(lua_State* L) {
  int SWIG_arg = 0;
  osg::TransformationMatrix< osg::Real32 > *arg1 = (osg::TransformationMatrix< osg::Real32 > *) 0 ;
  float result;
  
  SWIG_check_num_args("norm1",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("norm1",1,"osg::TransformationMatrix< osg::Real32 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__TransformationMatrixT_float_t,0))){
    SWIG_fail_ptr("Matrix_norm1",1,SWIGTYPE_p_osg__TransformationMatrixT_float_t);
  }
  
  result = (float)((osg::TransformationMatrix< osg::Real32 > const *)arg1)->norm1();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_norm2(lua_State* L) {
  int SWIG_arg = 0;
  osg::TransformationMatrix< osg::Real32 > *arg1 = (osg::TransformationMatrix< osg::Real32 > *) 0 ;
  float result;
  
  SWIG_check_num_args("norm2",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("norm2",1,"osg::TransformationMatrix< osg::Real32 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__TransformationMatrixT_float_t,0))){
    SWIG_fail_ptr("Matrix_norm2",1,SWIGTYPE_p_osg__TransformationMatrixT_float_t);
  }
  
  result = (float)((osg::TransformationMatrix< osg::Real32 > const *)arg1)->norm2();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_normInfinity(lua_State* L) {
  int SWIG_arg = 0;
  osg::TransformationMatrix< osg::Real32 > *arg1 = (osg::TransformationMatrix< osg::Real32 > *) 0 ;
  float result;
  
  SWIG_check_num_args("normInfinity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("normInfinity",1,"osg::TransformationMatrix< osg::Real32 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__TransformationMatrixT_float_t,0))){
    SWIG_fail_ptr("Matrix_normInfinity",1,SWIGTYPE_p_osg__TransformationMatrixT_float_t);
  }
  
  result = (float)((osg::TransformationMatrix< osg::Real32 > const *)arg1)->normInfinity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_sqrt__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  osg::TransformationMatrix< osg::Real32 > *arg1 = (osg::TransformationMatrix< osg::Real32 > *) 0 ;
  osg::TransformationMatrix< osg::Real32 > *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("sqrt",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sqrt",1,"osg::TransformationMatrix< osg::Real32 > const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("sqrt",2,"osg::TransformationMatrix< osg::Real32 > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__TransformationMatrixT_float_t,0))){
    SWIG_fail_ptr("Matrix_sqrt",1,SWIGTYPE_p_osg__TransformationMatrixT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__TransformationMatrixT_float_t,0))){
    SWIG_fail_ptr("Matrix_sqrt",2,SWIGTYPE_p_osg__TransformationMatrixT_float_t);
  }
  
  result = (bool)((osg::TransformationMatrix< osg::Real32 > const *)arg1)->sqrt(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_sqrtOf(lua_State* L) {
  int SWIG_arg = 0;
  osg::TransformationMatrix< osg::Real32 > *arg1 = (osg::TransformationMatrix< osg::Real32 > *) 0 ;
  osg::TransformationMatrix< osg::Real32 > *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("sqrtOf",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sqrtOf",1,"osg::TransformationMatrix< osg::Real32 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("sqrtOf",2,"osg::TransformationMatrix< osg::Real32 > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__TransformationMatrixT_float_t,0))){
    SWIG_fail_ptr("Matrix_sqrtOf",1,SWIGTYPE_p_osg__TransformationMatrixT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__TransformationMatrixT_float_t,0))){
    SWIG_fail_ptr("Matrix_sqrtOf",2,SWIGTYPE_p_osg__TransformationMatrixT_float_t);
  }
  
  result = (bool)(arg1)->sqrtOf((osg::TransformationMatrix< osg::Real32 > const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_sqrt__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  osg::TransformationMatrix< osg::Real32 > *arg1 = (osg::TransformationMatrix< osg::Real32 > *) 0 ;
  bool result;
  
  SWIG_check_num_args("sqrt",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sqrt",1,"osg::TransformationMatrix< osg::Real32 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__TransformationMatrixT_float_t,0))){
    SWIG_fail_ptr("Matrix_sqrt",1,SWIGTYPE_p_osg__TransformationMatrixT_float_t);
  }
  
  result = (bool)(arg1)->sqrt();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_sqrt(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_osg__TransformationMatrixT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Matrix_sqrt__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_osg__TransformationMatrixT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_osg__TransformationMatrixT_float_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Matrix_sqrt__SWIG_0(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'Matrix_sqrt'\n"
    "  Possible C/C++ prototypes are:\n"
    "    sqrt(osg::TransformationMatrix< osg::Real32 > const *,osg::TransformationMatrix< osg::Real32 > &)\n"
    "    sqrt(osg::TransformationMatrix< osg::Real32 > *)\n");
  lua_error(L);return 0;
}


static int _wrap_Matrix_log(lua_State* L) {
  int SWIG_arg = 0;
  osg::TransformationMatrix< osg::Real32 > *arg1 = (osg::TransformationMatrix< osg::Real32 > *) 0 ;
  osg::TransformationMatrix< osg::Real32 > *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("log",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("log",1,"osg::TransformationMatrix< osg::Real32 > const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("log",2,"osg::TransformationMatrix< osg::Real32 > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__TransformationMatrixT_float_t,0))){
    SWIG_fail_ptr("Matrix_log",1,SWIGTYPE_p_osg__TransformationMatrixT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__TransformationMatrixT_float_t,0))){
    SWIG_fail_ptr("Matrix_log",2,SWIGTYPE_p_osg__TransformationMatrixT_float_t);
  }
  
  result = (bool)((osg::TransformationMatrix< osg::Real32 > const *)arg1)->log(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_logOf(lua_State* L) {
  int SWIG_arg = 0;
  osg::TransformationMatrix< osg::Real32 > *arg1 = (osg::TransformationMatrix< osg::Real32 > *) 0 ;
  osg::TransformationMatrix< osg::Real32 > *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("logOf",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("logOf",1,"osg::TransformationMatrix< osg::Real32 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("logOf",2,"osg::TransformationMatrix< osg::Real32 > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__TransformationMatrixT_float_t,0))){
    SWIG_fail_ptr("Matrix_logOf",1,SWIGTYPE_p_osg__TransformationMatrixT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__TransformationMatrixT_float_t,0))){
    SWIG_fail_ptr("Matrix_logOf",2,SWIGTYPE_p_osg__TransformationMatrixT_float_t);
  }
  
  result = (bool)(arg1)->logOf((osg::TransformationMatrix< osg::Real32 > const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_exp(lua_State* L) {
  int SWIG_arg = 0;
  osg::TransformationMatrix< osg::Real32 > *arg1 = (osg::TransformationMatrix< osg::Real32 > *) 0 ;
  osg::TransformationMatrix< osg::Real32 > *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("exp",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("exp",1,"osg::TransformationMatrix< osg::Real32 > const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("exp",2,"osg::TransformationMatrix< osg::Real32 > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__TransformationMatrixT_float_t,0))){
    SWIG_fail_ptr("Matrix_exp",1,SWIGTYPE_p_osg__TransformationMatrixT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__TransformationMatrixT_float_t,0))){
    SWIG_fail_ptr("Matrix_exp",2,SWIGTYPE_p_osg__TransformationMatrixT_float_t);
  }
  
  result = (bool)((osg::TransformationMatrix< osg::Real32 > const *)arg1)->exp(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_expOf(lua_State* L) {
  int SWIG_arg = 0;
  osg::TransformationMatrix< osg::Real32 > *arg1 = (osg::TransformationMatrix< osg::Real32 > *) 0 ;
  osg::TransformationMatrix< osg::Real32 > *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("expOf",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("expOf",1,"osg::TransformationMatrix< osg::Real32 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("expOf",2,"osg::TransformationMatrix< osg::Real32 > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__TransformationMatrixT_float_t,0))){
    SWIG_fail_ptr("Matrix_expOf",1,SWIGTYPE_p_osg__TransformationMatrixT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__TransformationMatrixT_float_t,0))){
    SWIG_fail_ptr("Matrix_expOf",2,SWIGTYPE_p_osg__TransformationMatrixT_float_t);
  }
  
  result = (bool)(arg1)->expOf((osg::TransformationMatrix< osg::Real32 > const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix___eq(lua_State* L) {
  int SWIG_arg = 0;
  osg::TransformationMatrix< osg::Real32 > *arg1 = (osg::TransformationMatrix< osg::Real32 > *) 0 ;
  osg::TransformationMatrix< osg::Real32 > *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("operator ==",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("operator ==",1,"osg::TransformationMatrix< osg::Real32 > const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("operator ==",2,"osg::TransformationMatrix< osg::Real32 > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__TransformationMatrixT_float_t,0))){
    SWIG_fail_ptr("Matrix___eq",1,SWIGTYPE_p_osg__TransformationMatrixT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__TransformationMatrixT_float_t,0))){
    SWIG_fail_ptr("Matrix___eq",2,SWIGTYPE_p_osg__TransformationMatrixT_float_t);
  }
  
  result = (bool)((osg::TransformationMatrix< osg::Real32 > const *)arg1)->operator ==((osg::TransformationMatrix< osg::Real32 > const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Matrix(void *obj) {
osg::TransformationMatrix< osg::Real32 > *arg1 = (osg::TransformationMatrix< osg::Real32 > *) obj;
delete arg1;
}
static swig_lua_method swig_osg_TransformationMatrix_Sl_osg_Real32_Sg__methods[] = {
    {"setIdentity", _wrap_Matrix_setIdentity}, 
    {"setValueTransposed", _wrap_Matrix_setValueTransposed}, 
    {"setValue", _wrap_Matrix_setValue}, 
    {"getValues", _wrap_Matrix_getValues}, 
    {"setScale", _wrap_Matrix_setScale}, 
    {"setTranslate", _wrap_Matrix_setTranslate}, 
    {"setRotate", _wrap_Matrix_setRotate}, 
    {"setTransform", _wrap_Matrix_setTransform}, 
    {"getTransform", _wrap_Matrix_getTransform}, 
    {"factor", _wrap_Matrix_factor}, 
    {"multFull", _wrap_Matrix_multFull}, 
    {"mult3x3", _wrap_Matrix_mult3x3}, 
    {"__mul", _wrap_Matrix___mul}, 
    {"equals", _wrap_Matrix_equals}, 
    {"det3", _wrap_Matrix_det3}, 
    {"det", _wrap_Matrix_det}, 
    {"inverse", _wrap_Matrix_inverse}, 
    {"invert", _wrap_Matrix_invert}, 
    {"invertFrom", _wrap_Matrix_invertFrom}, 
    {"inverse3", _wrap_Matrix_inverse3}, 
    {"invert3", _wrap_Matrix_invert3}, 
    {"invertFrom3", _wrap_Matrix_invertFrom3}, 
    {"transposed", _wrap_Matrix_transposed}, 
    {"transpose", _wrap_Matrix_transpose}, 
    {"transposeFrom", _wrap_Matrix_transposeFrom}, 
    {"mult", _wrap_Matrix_mult}, 
    {"multLeft", _wrap_Matrix_multLeft}, 
    {"add", _wrap_Matrix_add}, 
    {"scale", _wrap_Matrix_scale}, 
    {"addScaled", _wrap_Matrix_addScaled}, 
    {"negate", _wrap_Matrix_negate}, 
    {"norm1", _wrap_Matrix_norm1}, 
    {"norm2", _wrap_Matrix_norm2}, 
    {"normInfinity", _wrap_Matrix_normInfinity}, 
    {"sqrtOf", _wrap_Matrix_sqrtOf}, 
    {"sqrt", _wrap_Matrix_sqrt}, 
    {"log", _wrap_Matrix_log}, 
    {"logOf", _wrap_Matrix_logOf}, 
    {"exp", _wrap_Matrix_exp}, 
    {"expOf", _wrap_Matrix_expOf}, 
    {"__eq", _wrap_Matrix___eq}, 
    {0,0}
};
static swig_lua_attribute swig_osg_TransformationMatrix_Sl_osg_Real32_Sg__attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_osg_TransformationMatrix_Sl_osg_Real32_Sg__bases[] = {0};
static const char *swig_osg_TransformationMatrix_Sl_osg_Real32_Sg__base_names[] = {0};
static swig_lua_class _wrap_class_osg_TransformationMatrix_Sl_osg_Real32_Sg_ = { "Matrix", &SWIGTYPE_p_osg__TransformationMatrixT_float_t,_wrap_new_Matrix, swig_delete_Matrix, swig_osg_TransformationMatrix_Sl_osg_Real32_Sg__methods, swig_osg_TransformationMatrix_Sl_osg_Real32_Sg__attributes, swig_osg_TransformationMatrix_Sl_osg_Real32_Sg__bases, swig_osg_TransformationMatrix_Sl_osg_Real32_Sg__base_names };

static int _wrap_Quaternion_identity(lua_State* L) {
  int SWIG_arg = 0;
  osg::QuaternionBase< osg::Real32 > *result = 0 ;
  
  SWIG_check_num_args("osg::QuaternionBase<(osg::Real32)>::identity",0,0)
  result = (osg::QuaternionBase< osg::Real32 > *) &osg::QuaternionBase< osg::Real32 >::SWIGTEMPLATEDISAMBIGUATOR identity();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_osg__QuaternionBaseT_float_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_slerp(lua_State* L) {
  int SWIG_arg = 0;
  osg::QuaternionBase< osg::Real32 > *arg1 = 0 ;
  osg::QuaternionBase< osg::Real32 > *arg2 = 0 ;
  float arg3 ;
  osg::QuaternionBase< osg::Real32 > result;
  
  SWIG_check_num_args("osg::QuaternionBase<(osg::Real32)>::slerp",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("osg::QuaternionBase<(osg::Real32)>::slerp",1,"osg::QuaternionBase< osg::Real32 > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("osg::QuaternionBase<(osg::Real32)>::slerp",2,"osg::QuaternionBase< osg::Real32 > const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("osg::QuaternionBase<(osg::Real32)>::slerp",3,"float const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__QuaternionBaseT_float_t,0))){
    SWIG_fail_ptr("Quaternion_slerp",1,SWIGTYPE_p_osg__QuaternionBaseT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__QuaternionBaseT_float_t,0))){
    SWIG_fail_ptr("Quaternion_slerp",2,SWIGTYPE_p_osg__QuaternionBaseT_float_t);
  }
  
  arg3 = (float const)lua_tonumber(L, 3);
  result = osg::QuaternionBase< osg::Real32 >::SWIGTEMPLATEDISAMBIGUATOR slerp((osg::QuaternionBase< float > const &)*arg1,(osg::QuaternionBase< float > const &)*arg2,arg3);
  {
    osg::QuaternionBase< osg::Real32 > * resultptr = new osg::QuaternionBase< osg::Real32 >((const osg::QuaternionBase< osg::Real32 > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_osg__QuaternionBaseT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Quaternion__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  osg::QuaternionBase< osg::Real32 > *result = 0 ;
  
  SWIG_check_num_args("osg::QuaternionBase<(osg::Real32)>",0,0)
  result = (osg::QuaternionBase< osg::Real32 > *)new osg::QuaternionBase< osg::Real32 >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_osg__QuaternionBaseT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Quaternion__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  osg::QuaternionBase< osg::Real32 > *arg1 = 0 ;
  osg::QuaternionBase< osg::Real32 > *result = 0 ;
  
  SWIG_check_num_args("osg::QuaternionBase<(osg::Real32)>",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("osg::QuaternionBase<(osg::Real32)>",1,"osg::QuaternionBase< osg::Real32 > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__QuaternionBaseT_float_t,0))){
    SWIG_fail_ptr("new_Quaternion",1,SWIGTYPE_p_osg__QuaternionBaseT_float_t);
  }
  
  result = (osg::QuaternionBase< osg::Real32 > *)new osg::QuaternionBase< osg::Real32 >((osg::QuaternionBase< osg::Real32 > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_osg__QuaternionBaseT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Quaternion__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  osg::QuaternionBase< float >::MatrixType *arg1 = 0 ;
  osg::QuaternionBase< osg::Real32 > *result = 0 ;
  
  SWIG_check_num_args("osg::QuaternionBase<(osg::Real32)>",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("osg::QuaternionBase<(osg::Real32)>",1,"osg::QuaternionBase< float >::MatrixType const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__TransformationMatrixT_float_t,0))){
    SWIG_fail_ptr("new_Quaternion",1,SWIGTYPE_p_osg__TransformationMatrixT_float_t);
  }
  
  result = (osg::QuaternionBase< osg::Real32 > *)new osg::QuaternionBase< osg::Real32 >((osg::QuaternionBase< float >::MatrixType const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_osg__QuaternionBaseT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Quaternion__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  osg::QuaternionBase< float >::VectorType *arg1 = 0 ;
  float arg2 ;
  osg::QuaternionBase< osg::Real32 > *result = 0 ;
  
  SWIG_check_num_args("osg::QuaternionBase<(osg::Real32)>",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("osg::QuaternionBase<(osg::Real32)>",1,"osg::QuaternionBase< float >::VectorType const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("osg::QuaternionBase<(osg::Real32)>",2,"float const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__VectorT_float_3_t,0))){
    SWIG_fail_ptr("new_Quaternion",1,SWIGTYPE_p_osg__VectorT_float_3_t);
  }
  
  arg2 = (float const)lua_tonumber(L, 2);
  result = (osg::QuaternionBase< osg::Real32 > *)new osg::QuaternionBase< osg::Real32 >((osg::QuaternionBase< float >::VectorType const &)*arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_osg__QuaternionBaseT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Quaternion__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  osg::QuaternionBase< float >::VectorType *arg1 = 0 ;
  osg::QuaternionBase< float >::VectorType *arg2 = 0 ;
  osg::QuaternionBase< osg::Real32 > *result = 0 ;
  
  SWIG_check_num_args("osg::QuaternionBase<(osg::Real32)>",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("osg::QuaternionBase<(osg::Real32)>",1,"osg::QuaternionBase< float >::VectorType const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("osg::QuaternionBase<(osg::Real32)>",2,"osg::QuaternionBase< float >::VectorType const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__VectorT_float_3_t,0))){
    SWIG_fail_ptr("new_Quaternion",1,SWIGTYPE_p_osg__VectorT_float_3_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__VectorT_float_3_t,0))){
    SWIG_fail_ptr("new_Quaternion",2,SWIGTYPE_p_osg__VectorT_float_3_t);
  }
  
  result = (osg::QuaternionBase< osg::Real32 > *)new osg::QuaternionBase< osg::Real32 >((osg::QuaternionBase< float >::VectorType const &)*arg1,(osg::QuaternionBase< float >::VectorType const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_osg__QuaternionBaseT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Quaternion(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Quaternion__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_osg__QuaternionBaseT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Quaternion__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_osg__TransformationMatrixT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Quaternion__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_osg__VectorT_float_3_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_osg__VectorT_float_3_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_new_Quaternion__SWIG_4(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_osg__VectorT_float_3_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_Quaternion__SWIG_3(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_Quaternion'\n"
    "  Possible C/C++ prototypes are:\n"
    "    osg::QuaternionBase< osg::Real32 >()\n"
    "    osg::QuaternionBase< osg::Real32 >(osg::QuaternionBase< osg::Real32 > const &)\n"
    "    osg::QuaternionBase< osg::Real32 >(osg::QuaternionBase< float >::MatrixType const &)\n"
    "    osg::QuaternionBase< osg::Real32 >(osg::QuaternionBase< float >::VectorType const &,float const)\n"
    "    osg::QuaternionBase< osg::Real32 >(osg::QuaternionBase< float >::VectorType const &,osg::QuaternionBase< float >::VectorType const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Quaternion_setIdentity(lua_State* L) {
  int SWIG_arg = 0;
  osg::QuaternionBase< osg::Real32 > *arg1 = (osg::QuaternionBase< osg::Real32 > *) 0 ;
  
  SWIG_check_num_args("setIdentity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setIdentity",1,"osg::QuaternionBase< osg::Real32 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__QuaternionBaseT_float_t,0))){
    SWIG_fail_ptr("Quaternion_setIdentity",1,SWIGTYPE_p_osg__QuaternionBaseT_float_t);
  }
  
  (arg1)->setIdentity();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_setValueAsAxisRad__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  osg::QuaternionBase< osg::Real32 > *arg1 = (osg::QuaternionBase< osg::Real32 > *) 0 ;
  float *arg2 = (float *) 0 ;
  
  SWIG_check_num_args("setValueAsAxisRad",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setValueAsAxisRad",1,"osg::QuaternionBase< osg::Real32 > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("setValueAsAxisRad",2,"float const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__QuaternionBaseT_float_t,0))){
    SWIG_fail_ptr("Quaternion_setValueAsAxisRad",1,SWIGTYPE_p_osg__QuaternionBaseT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("Quaternion_setValueAsAxisRad",2,SWIGTYPE_p_float);
  }
  
  (arg1)->setValueAsAxisRad((float const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_setValueAsAxisDeg__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  osg::QuaternionBase< osg::Real32 > *arg1 = (osg::QuaternionBase< osg::Real32 > *) 0 ;
  float *arg2 = (float *) 0 ;
  
  SWIG_check_num_args("setValueAsAxisDeg",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setValueAsAxisDeg",1,"osg::QuaternionBase< osg::Real32 > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("setValueAsAxisDeg",2,"float const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__QuaternionBaseT_float_t,0))){
    SWIG_fail_ptr("Quaternion_setValueAsAxisDeg",1,SWIGTYPE_p_osg__QuaternionBaseT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("Quaternion_setValueAsAxisDeg",2,SWIGTYPE_p_float);
  }
  
  (arg1)->setValueAsAxisDeg((float const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_setValueAsQuat__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  osg::QuaternionBase< osg::Real32 > *arg1 = (osg::QuaternionBase< osg::Real32 > *) 0 ;
  float *arg2 = (float *) 0 ;
  
  SWIG_check_num_args("setValueAsQuat",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setValueAsQuat",1,"osg::QuaternionBase< osg::Real32 > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("setValueAsQuat",2,"float const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__QuaternionBaseT_float_t,0))){
    SWIG_fail_ptr("Quaternion_setValueAsQuat",1,SWIGTYPE_p_osg__QuaternionBaseT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("Quaternion_setValueAsQuat",2,SWIGTYPE_p_float);
  }
  
  (arg1)->setValueAsQuat((float const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_setValueAsAxisRad__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  osg::QuaternionBase< osg::Real32 > *arg1 = (osg::QuaternionBase< osg::Real32 > *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  
  SWIG_check_num_args("setValueAsAxisRad",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setValueAsAxisRad",1,"osg::QuaternionBase< osg::Real32 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("setValueAsAxisRad",2,"float const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("setValueAsAxisRad",3,"float const");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("setValueAsAxisRad",4,"float const");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("setValueAsAxisRad",5,"float const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__QuaternionBaseT_float_t,0))){
    SWIG_fail_ptr("Quaternion_setValueAsAxisRad",1,SWIGTYPE_p_osg__QuaternionBaseT_float_t);
  }
  
  arg2 = (float const)lua_tonumber(L, 2);
  arg3 = (float const)lua_tonumber(L, 3);
  arg4 = (float const)lua_tonumber(L, 4);
  arg5 = (float const)lua_tonumber(L, 5);
  (arg1)->setValueAsAxisRad(arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_setValueAsAxisDeg__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  osg::QuaternionBase< osg::Real32 > *arg1 = (osg::QuaternionBase< osg::Real32 > *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  
  SWIG_check_num_args("setValueAsAxisDeg",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setValueAsAxisDeg",1,"osg::QuaternionBase< osg::Real32 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("setValueAsAxisDeg",2,"float const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("setValueAsAxisDeg",3,"float const");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("setValueAsAxisDeg",4,"float const");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("setValueAsAxisDeg",5,"float const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__QuaternionBaseT_float_t,0))){
    SWIG_fail_ptr("Quaternion_setValueAsAxisDeg",1,SWIGTYPE_p_osg__QuaternionBaseT_float_t);
  }
  
  arg2 = (float const)lua_tonumber(L, 2);
  arg3 = (float const)lua_tonumber(L, 3);
  arg4 = (float const)lua_tonumber(L, 4);
  arg5 = (float const)lua_tonumber(L, 5);
  (arg1)->setValueAsAxisDeg(arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_setValueAsQuat__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  osg::QuaternionBase< osg::Real32 > *arg1 = (osg::QuaternionBase< osg::Real32 > *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  
  SWIG_check_num_args("setValueAsQuat",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setValueAsQuat",1,"osg::QuaternionBase< osg::Real32 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("setValueAsQuat",2,"float const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("setValueAsQuat",3,"float const");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("setValueAsQuat",4,"float const");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("setValueAsQuat",5,"float const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__QuaternionBaseT_float_t,0))){
    SWIG_fail_ptr("Quaternion_setValueAsQuat",1,SWIGTYPE_p_osg__QuaternionBaseT_float_t);
  }
  
  arg2 = (float const)lua_tonumber(L, 2);
  arg3 = (float const)lua_tonumber(L, 3);
  arg4 = (float const)lua_tonumber(L, 4);
  arg5 = (float const)lua_tonumber(L, 5);
  (arg1)->setValueAsQuat(arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_setValue__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  osg::QuaternionBase< osg::Real32 > *arg1 = (osg::QuaternionBase< osg::Real32 > *) 0 ;
  osg::QuaternionBase< float >::MatrixType *arg2 = 0 ;
  
  SWIG_check_num_args("setValue",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setValue",1,"osg::QuaternionBase< osg::Real32 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setValue",2,"osg::QuaternionBase< float >::MatrixType const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__QuaternionBaseT_float_t,0))){
    SWIG_fail_ptr("Quaternion_setValue",1,SWIGTYPE_p_osg__QuaternionBaseT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__TransformationMatrixT_float_t,0))){
    SWIG_fail_ptr("Quaternion_setValue",2,SWIGTYPE_p_osg__TransformationMatrixT_float_t);
  }
  
  (arg1)->setValue((osg::QuaternionBase< float >::MatrixType const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_setValueAsAxisRad__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  osg::QuaternionBase< osg::Real32 > *arg1 = (osg::QuaternionBase< osg::Real32 > *) 0 ;
  osg::QuaternionBase< float >::VectorType *arg2 = 0 ;
  float arg3 ;
  
  SWIG_check_num_args("setValueAsAxisRad",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setValueAsAxisRad",1,"osg::QuaternionBase< osg::Real32 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setValueAsAxisRad",2,"osg::QuaternionBase< float >::VectorType const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("setValueAsAxisRad",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__QuaternionBaseT_float_t,0))){
    SWIG_fail_ptr("Quaternion_setValueAsAxisRad",1,SWIGTYPE_p_osg__QuaternionBaseT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__VectorT_float_3_t,0))){
    SWIG_fail_ptr("Quaternion_setValueAsAxisRad",2,SWIGTYPE_p_osg__VectorT_float_3_t);
  }
  
  arg3 = (float)lua_tonumber(L, 3);
  (arg1)->setValueAsAxisRad((osg::QuaternionBase< float >::VectorType const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_setValueAsAxisDeg__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  osg::QuaternionBase< osg::Real32 > *arg1 = (osg::QuaternionBase< osg::Real32 > *) 0 ;
  osg::QuaternionBase< float >::VectorType *arg2 = 0 ;
  float arg3 ;
  
  SWIG_check_num_args("setValueAsAxisDeg",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setValueAsAxisDeg",1,"osg::QuaternionBase< osg::Real32 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setValueAsAxisDeg",2,"osg::QuaternionBase< float >::VectorType const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("setValueAsAxisDeg",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__QuaternionBaseT_float_t,0))){
    SWIG_fail_ptr("Quaternion_setValueAsAxisDeg",1,SWIGTYPE_p_osg__QuaternionBaseT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__VectorT_float_3_t,0))){
    SWIG_fail_ptr("Quaternion_setValueAsAxisDeg",2,SWIGTYPE_p_osg__VectorT_float_3_t);
  }
  
  arg3 = (float)lua_tonumber(L, 3);
  (arg1)->setValueAsAxisDeg((osg::QuaternionBase< float >::VectorType const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_setValue__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  osg::QuaternionBase< osg::Real32 > *arg1 = (osg::QuaternionBase< osg::Real32 > *) 0 ;
  osg::QuaternionBase< float >::VectorType *arg2 = 0 ;
  osg::QuaternionBase< float >::VectorType *arg3 = 0 ;
  
  SWIG_check_num_args("setValue",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setValue",1,"osg::QuaternionBase< osg::Real32 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setValue",2,"osg::QuaternionBase< float >::VectorType const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("setValue",3,"osg::QuaternionBase< float >::VectorType const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__QuaternionBaseT_float_t,0))){
    SWIG_fail_ptr("Quaternion_setValue",1,SWIGTYPE_p_osg__QuaternionBaseT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__VectorT_float_3_t,0))){
    SWIG_fail_ptr("Quaternion_setValue",2,SWIGTYPE_p_osg__VectorT_float_3_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_osg__VectorT_float_3_t,0))){
    SWIG_fail_ptr("Quaternion_setValue",3,SWIGTYPE_p_osg__VectorT_float_3_t);
  }
  
  (arg1)->setValue((osg::QuaternionBase< float >::VectorType const &)*arg2,(osg::QuaternionBase< float >::VectorType const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_setValueAsAxisRad__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  osg::QuaternionBase< osg::Real32 > *arg1 = (osg::QuaternionBase< osg::Real32 > *) 0 ;
  osg::Char8 *arg2 = (osg::Char8 *) 0 ;
  
  SWIG_check_num_args("setValueAsAxisRad",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setValueAsAxisRad",1,"osg::QuaternionBase< osg::Real32 > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("setValueAsAxisRad",2,"osg::Char8 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__QuaternionBaseT_float_t,0))){
    SWIG_fail_ptr("Quaternion_setValueAsAxisRad",1,SWIGTYPE_p_osg__QuaternionBaseT_float_t);
  }
  
  arg2 = (osg::Char8 *)lua_tostring(L, 2);
  (arg1)->setValueAsAxisRad((osg::Char8 const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_setValueAsAxisRad(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_osg__QuaternionBaseT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Quaternion_setValueAsAxisRad__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_osg__QuaternionBaseT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_Quaternion_setValueAsAxisRad__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_osg__QuaternionBaseT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_osg__VectorT_float_3_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Quaternion_setValueAsAxisRad__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_osg__QuaternionBaseT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_Quaternion_setValueAsAxisRad__SWIG_1(L);
            }
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'Quaternion_setValueAsAxisRad'\n"
    "  Possible C/C++ prototypes are:\n"
    "    setValueAsAxisRad(osg::QuaternionBase< osg::Real32 > *,float const *)\n"
    "    setValueAsAxisRad(osg::QuaternionBase< osg::Real32 > *,float const,float const,float const,float const)\n"
    "    setValueAsAxisRad(osg::QuaternionBase< osg::Real32 > *,osg::QuaternionBase< float >::VectorType const &,float)\n"
    "    setValueAsAxisRad(osg::QuaternionBase< osg::Real32 > *,osg::Char8 const *)\n");
  lua_error(L);return 0;
}


static int _wrap_Quaternion_setValueAsAxisDeg__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  osg::QuaternionBase< osg::Real32 > *arg1 = (osg::QuaternionBase< osg::Real32 > *) 0 ;
  osg::Char8 *arg2 = (osg::Char8 *) 0 ;
  
  SWIG_check_num_args("setValueAsAxisDeg",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setValueAsAxisDeg",1,"osg::QuaternionBase< osg::Real32 > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("setValueAsAxisDeg",2,"osg::Char8 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__QuaternionBaseT_float_t,0))){
    SWIG_fail_ptr("Quaternion_setValueAsAxisDeg",1,SWIGTYPE_p_osg__QuaternionBaseT_float_t);
  }
  
  arg2 = (osg::Char8 *)lua_tostring(L, 2);
  (arg1)->setValueAsAxisDeg((osg::Char8 const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_setValueAsAxisDeg(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_osg__QuaternionBaseT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Quaternion_setValueAsAxisDeg__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_osg__QuaternionBaseT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_Quaternion_setValueAsAxisDeg__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_osg__QuaternionBaseT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_osg__VectorT_float_3_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Quaternion_setValueAsAxisDeg__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_osg__QuaternionBaseT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_Quaternion_setValueAsAxisDeg__SWIG_1(L);
            }
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'Quaternion_setValueAsAxisDeg'\n"
    "  Possible C/C++ prototypes are:\n"
    "    setValueAsAxisDeg(osg::QuaternionBase< osg::Real32 > *,float const *)\n"
    "    setValueAsAxisDeg(osg::QuaternionBase< osg::Real32 > *,float const,float const,float const,float const)\n"
    "    setValueAsAxisDeg(osg::QuaternionBase< osg::Real32 > *,osg::QuaternionBase< float >::VectorType const &,float)\n"
    "    setValueAsAxisDeg(osg::QuaternionBase< osg::Real32 > *,osg::Char8 const *)\n");
  lua_error(L);return 0;
}


static int _wrap_Quaternion_setValueAsQuat__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  osg::QuaternionBase< osg::Real32 > *arg1 = (osg::QuaternionBase< osg::Real32 > *) 0 ;
  osg::Char8 *arg2 = (osg::Char8 *) 0 ;
  
  SWIG_check_num_args("setValueAsQuat",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setValueAsQuat",1,"osg::QuaternionBase< osg::Real32 > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("setValueAsQuat",2,"osg::Char8 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__QuaternionBaseT_float_t,0))){
    SWIG_fail_ptr("Quaternion_setValueAsQuat",1,SWIGTYPE_p_osg__QuaternionBaseT_float_t);
  }
  
  arg2 = (osg::Char8 *)lua_tostring(L, 2);
  (arg1)->setValueAsQuat((osg::Char8 const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_setValueAsQuat(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_osg__QuaternionBaseT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Quaternion_setValueAsQuat__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_osg__QuaternionBaseT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_Quaternion_setValueAsQuat__SWIG_2(L);
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_osg__QuaternionBaseT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_Quaternion_setValueAsQuat__SWIG_1(L);
            }
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'Quaternion_setValueAsQuat'\n"
    "  Possible C/C++ prototypes are:\n"
    "    setValueAsQuat(osg::QuaternionBase< osg::Real32 > *,float const *)\n"
    "    setValueAsQuat(osg::QuaternionBase< osg::Real32 > *,float const,float const,float const,float const)\n"
    "    setValueAsQuat(osg::QuaternionBase< osg::Real32 > *,osg::Char8 const *)\n");
  lua_error(L);return 0;
}


static int _wrap_Quaternion_setValue__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  osg::QuaternionBase< osg::Real32 > *arg1 = (osg::QuaternionBase< osg::Real32 > *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  SWIG_check_num_args("setValue",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setValue",1,"osg::QuaternionBase< osg::Real32 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("setValue",2,"float const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("setValue",3,"float const");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("setValue",4,"float const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__QuaternionBaseT_float_t,0))){
    SWIG_fail_ptr("Quaternion_setValue",1,SWIGTYPE_p_osg__QuaternionBaseT_float_t);
  }
  
  arg2 = (float const)lua_tonumber(L, 2);
  arg3 = (float const)lua_tonumber(L, 3);
  arg4 = (float const)lua_tonumber(L, 4);
  (arg1)->setValue(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_setValue(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_osg__QuaternionBaseT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_osg__TransformationMatrixT_float_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Quaternion_setValue__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_osg__QuaternionBaseT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_osg__VectorT_float_3_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_osg__VectorT_float_3_t, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_Quaternion_setValue__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_osg__QuaternionBaseT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_Quaternion_setValue__SWIG_2(L);
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'Quaternion_setValue'\n"
    "  Possible C/C++ prototypes are:\n"
    "    setValue(osg::QuaternionBase< osg::Real32 > *,osg::QuaternionBase< float >::MatrixType const &)\n"
    "    setValue(osg::QuaternionBase< osg::Real32 > *,osg::QuaternionBase< float >::VectorType const &,osg::QuaternionBase< float >::VectorType const &)\n"
    "    setValue(osg::QuaternionBase< osg::Real32 > *,float const,float const,float const)\n");
  lua_error(L);return 0;
}


static int _wrap_Quaternion_getValues(lua_State* L) {
  int SWIG_arg = 0;
  osg::QuaternionBase< osg::Real32 > *arg1 = (osg::QuaternionBase< osg::Real32 > *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("getValues",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getValues",1,"osg::QuaternionBase< osg::Real32 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__QuaternionBaseT_float_t,0))){
    SWIG_fail_ptr("Quaternion_getValues",1,SWIGTYPE_p_osg__QuaternionBaseT_float_t);
  }
  
  result = (float *)((osg::QuaternionBase< osg::Real32 > const *)arg1)->getValues();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_getValueAsAxisDeg__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  osg::QuaternionBase< osg::Real32 > *arg1 = (osg::QuaternionBase< osg::Real32 > *) 0 ;
  float *arg2 = 0 ;
  float *arg3 = 0 ;
  float *arg4 = 0 ;
  float *arg5 = 0 ;
  
  SWIG_check_num_args("getValueAsAxisDeg",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getValueAsAxisDeg",1,"osg::QuaternionBase< osg::Real32 > const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("getValueAsAxisDeg",2,"float &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("getValueAsAxisDeg",3,"float &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("getValueAsAxisDeg",4,"float &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("getValueAsAxisDeg",5,"float &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__QuaternionBaseT_float_t,0))){
    SWIG_fail_ptr("Quaternion_getValueAsAxisDeg",1,SWIGTYPE_p_osg__QuaternionBaseT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("Quaternion_getValueAsAxisDeg",2,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("Quaternion_getValueAsAxisDeg",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("Quaternion_getValueAsAxisDeg",4,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("Quaternion_getValueAsAxisDeg",5,SWIGTYPE_p_float);
  }
  
  ((osg::QuaternionBase< osg::Real32 > const *)arg1)->getValueAsAxisDeg(*arg2,*arg3,*arg4,*arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_getValueAsAxisRad__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  osg::QuaternionBase< osg::Real32 > *arg1 = (osg::QuaternionBase< osg::Real32 > *) 0 ;
  float *arg2 = 0 ;
  float *arg3 = 0 ;
  float *arg4 = 0 ;
  float *arg5 = 0 ;
  
  SWIG_check_num_args("getValueAsAxisRad",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getValueAsAxisRad",1,"osg::QuaternionBase< osg::Real32 > const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("getValueAsAxisRad",2,"float &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("getValueAsAxisRad",3,"float &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("getValueAsAxisRad",4,"float &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("getValueAsAxisRad",5,"float &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__QuaternionBaseT_float_t,0))){
    SWIG_fail_ptr("Quaternion_getValueAsAxisRad",1,SWIGTYPE_p_osg__QuaternionBaseT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("Quaternion_getValueAsAxisRad",2,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("Quaternion_getValueAsAxisRad",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("Quaternion_getValueAsAxisRad",4,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("Quaternion_getValueAsAxisRad",5,SWIGTYPE_p_float);
  }
  
  ((osg::QuaternionBase< osg::Real32 > const *)arg1)->getValueAsAxisRad(*arg2,*arg3,*arg4,*arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_getValueAsQuat(lua_State* L) {
  int SWIG_arg = 0;
  osg::QuaternionBase< osg::Real32 > *arg1 = (osg::QuaternionBase< osg::Real32 > *) 0 ;
  float *arg2 = 0 ;
  float *arg3 = 0 ;
  float *arg4 = 0 ;
  float *arg5 = 0 ;
  
  SWIG_check_num_args("getValueAsQuat",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getValueAsQuat",1,"osg::QuaternionBase< osg::Real32 > const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("getValueAsQuat",2,"float &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("getValueAsQuat",3,"float &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("getValueAsQuat",4,"float &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("getValueAsQuat",5,"float &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__QuaternionBaseT_float_t,0))){
    SWIG_fail_ptr("Quaternion_getValueAsQuat",1,SWIGTYPE_p_osg__QuaternionBaseT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("Quaternion_getValueAsQuat",2,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("Quaternion_getValueAsQuat",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("Quaternion_getValueAsQuat",4,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("Quaternion_getValueAsQuat",5,SWIGTYPE_p_float);
  }
  
  ((osg::QuaternionBase< osg::Real32 > const *)arg1)->getValueAsQuat(*arg2,*arg3,*arg4,*arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_getValueAsAxisRad__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  osg::QuaternionBase< osg::Real32 > *arg1 = (osg::QuaternionBase< osg::Real32 > *) 0 ;
  osg::QuaternionBase< float >::VectorType *arg2 = 0 ;
  float *arg3 = 0 ;
  
  SWIG_check_num_args("getValueAsAxisRad",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getValueAsAxisRad",1,"osg::QuaternionBase< osg::Real32 > const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("getValueAsAxisRad",2,"osg::QuaternionBase< float >::VectorType &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("getValueAsAxisRad",3,"float &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__QuaternionBaseT_float_t,0))){
    SWIG_fail_ptr("Quaternion_getValueAsAxisRad",1,SWIGTYPE_p_osg__QuaternionBaseT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__VectorT_float_3_t,0))){
    SWIG_fail_ptr("Quaternion_getValueAsAxisRad",2,SWIGTYPE_p_osg__VectorT_float_3_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("Quaternion_getValueAsAxisRad",3,SWIGTYPE_p_float);
  }
  
  ((osg::QuaternionBase< osg::Real32 > const *)arg1)->getValueAsAxisRad(*arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_getValueAsAxisRad(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_osg__QuaternionBaseT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_osg__VectorT_float_3_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_Quaternion_getValueAsAxisRad__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_osg__QuaternionBaseT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_float, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_Quaternion_getValueAsAxisRad__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'Quaternion_getValueAsAxisRad'\n"
    "  Possible C/C++ prototypes are:\n"
    "    getValueAsAxisRad(osg::QuaternionBase< osg::Real32 > const *,float &,float &,float &,float &)\n"
    "    getValueAsAxisRad(osg::QuaternionBase< osg::Real32 > const *,osg::QuaternionBase< float >::VectorType &,float &)\n");
  lua_error(L);return 0;
}


static int _wrap_Quaternion_getValueAsAxisDeg__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  osg::QuaternionBase< osg::Real32 > *arg1 = (osg::QuaternionBase< osg::Real32 > *) 0 ;
  osg::QuaternionBase< float >::VectorType *arg2 = 0 ;
  float *arg3 = 0 ;
  
  SWIG_check_num_args("getValueAsAxisDeg",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getValueAsAxisDeg",1,"osg::QuaternionBase< osg::Real32 > const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("getValueAsAxisDeg",2,"osg::QuaternionBase< float >::VectorType &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("getValueAsAxisDeg",3,"float &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__QuaternionBaseT_float_t,0))){
    SWIG_fail_ptr("Quaternion_getValueAsAxisDeg",1,SWIGTYPE_p_osg__QuaternionBaseT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__VectorT_float_3_t,0))){
    SWIG_fail_ptr("Quaternion_getValueAsAxisDeg",2,SWIGTYPE_p_osg__VectorT_float_3_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("Quaternion_getValueAsAxisDeg",3,SWIGTYPE_p_float);
  }
  
  ((osg::QuaternionBase< osg::Real32 > const *)arg1)->getValueAsAxisDeg(*arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_getValueAsAxisDeg(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_osg__QuaternionBaseT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_osg__VectorT_float_3_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_Quaternion_getValueAsAxisDeg__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_osg__QuaternionBaseT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_float, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_Quaternion_getValueAsAxisDeg__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'Quaternion_getValueAsAxisDeg'\n"
    "  Possible C/C++ prototypes are:\n"
    "    getValueAsAxisDeg(osg::QuaternionBase< osg::Real32 > const *,float &,float &,float &,float &)\n"
    "    getValueAsAxisDeg(osg::QuaternionBase< osg::Real32 > const *,osg::QuaternionBase< float >::VectorType &,float &)\n");
  lua_error(L);return 0;
}


static int _wrap_Quaternion_getValue(lua_State* L) {
  int SWIG_arg = 0;
  osg::QuaternionBase< osg::Real32 > *arg1 = (osg::QuaternionBase< osg::Real32 > *) 0 ;
  osg::QuaternionBase< float >::MatrixType *arg2 = 0 ;
  
  SWIG_check_num_args("getValue",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getValue",1,"osg::QuaternionBase< osg::Real32 > const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("getValue",2,"osg::QuaternionBase< float >::MatrixType &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__QuaternionBaseT_float_t,0))){
    SWIG_fail_ptr("Quaternion_getValue",1,SWIGTYPE_p_osg__QuaternionBaseT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__TransformationMatrixT_float_t,0))){
    SWIG_fail_ptr("Quaternion_getValue",2,SWIGTYPE_p_osg__TransformationMatrixT_float_t);
  }
  
  ((osg::QuaternionBase< osg::Real32 > const *)arg1)->getValue(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_getValuesOnly(lua_State* L) {
  int SWIG_arg = 0;
  osg::QuaternionBase< osg::Real32 > *arg1 = (osg::QuaternionBase< osg::Real32 > *) 0 ;
  osg::QuaternionBase< float >::MatrixType *arg2 = 0 ;
  
  SWIG_check_num_args("getValuesOnly",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getValuesOnly",1,"osg::QuaternionBase< osg::Real32 > const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("getValuesOnly",2,"osg::QuaternionBase< float >::MatrixType &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__QuaternionBaseT_float_t,0))){
    SWIG_fail_ptr("Quaternion_getValuesOnly",1,SWIGTYPE_p_osg__QuaternionBaseT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__TransformationMatrixT_float_t,0))){
    SWIG_fail_ptr("Quaternion_getValuesOnly",2,SWIGTYPE_p_osg__TransformationMatrixT_float_t);
  }
  
  ((osg::QuaternionBase< osg::Real32 > const *)arg1)->getValuesOnly(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_x(lua_State* L) {
  int SWIG_arg = 0;
  osg::QuaternionBase< osg::Real32 > *arg1 = (osg::QuaternionBase< osg::Real32 > *) 0 ;
  float result;
  
  SWIG_check_num_args("x",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("x",1,"osg::QuaternionBase< osg::Real32 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__QuaternionBaseT_float_t,0))){
    SWIG_fail_ptr("Quaternion_x",1,SWIGTYPE_p_osg__QuaternionBaseT_float_t);
  }
  
  result = (float)((osg::QuaternionBase< osg::Real32 > const *)arg1)->x();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_y(lua_State* L) {
  int SWIG_arg = 0;
  osg::QuaternionBase< osg::Real32 > *arg1 = (osg::QuaternionBase< osg::Real32 > *) 0 ;
  float result;
  
  SWIG_check_num_args("y",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("y",1,"osg::QuaternionBase< osg::Real32 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__QuaternionBaseT_float_t,0))){
    SWIG_fail_ptr("Quaternion_y",1,SWIGTYPE_p_osg__QuaternionBaseT_float_t);
  }
  
  result = (float)((osg::QuaternionBase< osg::Real32 > const *)arg1)->y();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_z(lua_State* L) {
  int SWIG_arg = 0;
  osg::QuaternionBase< osg::Real32 > *arg1 = (osg::QuaternionBase< osg::Real32 > *) 0 ;
  float result;
  
  SWIG_check_num_args("z",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("z",1,"osg::QuaternionBase< osg::Real32 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__QuaternionBaseT_float_t,0))){
    SWIG_fail_ptr("Quaternion_z",1,SWIGTYPE_p_osg__QuaternionBaseT_float_t);
  }
  
  result = (float)((osg::QuaternionBase< osg::Real32 > const *)arg1)->z();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_w(lua_State* L) {
  int SWIG_arg = 0;
  osg::QuaternionBase< osg::Real32 > *arg1 = (osg::QuaternionBase< osg::Real32 > *) 0 ;
  float result;
  
  SWIG_check_num_args("w",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("w",1,"osg::QuaternionBase< osg::Real32 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__QuaternionBaseT_float_t,0))){
    SWIG_fail_ptr("Quaternion_w",1,SWIGTYPE_p_osg__QuaternionBaseT_float_t);
  }
  
  result = (float)((osg::QuaternionBase< osg::Real32 > const *)arg1)->w();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_length(lua_State* L) {
  int SWIG_arg = 0;
  osg::QuaternionBase< osg::Real32 > *arg1 = (osg::QuaternionBase< osg::Real32 > *) 0 ;
  float result;
  
  SWIG_check_num_args("length",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("length",1,"osg::QuaternionBase< osg::Real32 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__QuaternionBaseT_float_t,0))){
    SWIG_fail_ptr("Quaternion_length",1,SWIGTYPE_p_osg__QuaternionBaseT_float_t);
  }
  
  result = (float)((osg::QuaternionBase< osg::Real32 > const *)arg1)->length();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_normalize(lua_State* L) {
  int SWIG_arg = 0;
  osg::QuaternionBase< osg::Real32 > *arg1 = (osg::QuaternionBase< osg::Real32 > *) 0 ;
  
  SWIG_check_num_args("normalize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("normalize",1,"osg::QuaternionBase< osg::Real32 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__QuaternionBaseT_float_t,0))){
    SWIG_fail_ptr("Quaternion_normalize",1,SWIGTYPE_p_osg__QuaternionBaseT_float_t);
  }
  
  (arg1)->normalize();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_invert(lua_State* L) {
  int SWIG_arg = 0;
  osg::QuaternionBase< osg::Real32 > *arg1 = (osg::QuaternionBase< osg::Real32 > *) 0 ;
  
  SWIG_check_num_args("invert",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("invert",1,"osg::QuaternionBase< osg::Real32 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__QuaternionBaseT_float_t,0))){
    SWIG_fail_ptr("Quaternion_invert",1,SWIGTYPE_p_osg__QuaternionBaseT_float_t);
  }
  
  (arg1)->invert();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_inverse(lua_State* L) {
  int SWIG_arg = 0;
  osg::QuaternionBase< osg::Real32 > *arg1 = (osg::QuaternionBase< osg::Real32 > *) 0 ;
  osg::QuaternionBase< osg::Real32 > result;
  
  SWIG_check_num_args("inverse",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inverse",1,"osg::QuaternionBase< osg::Real32 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__QuaternionBaseT_float_t,0))){
    SWIG_fail_ptr("Quaternion_inverse",1,SWIGTYPE_p_osg__QuaternionBaseT_float_t);
  }
  
  result = ((osg::QuaternionBase< osg::Real32 > const *)arg1)->inverse();
  {
    osg::QuaternionBase< osg::Real32 > * resultptr = new osg::QuaternionBase< osg::Real32 >((const osg::QuaternionBase< osg::Real32 > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_osg__QuaternionBaseT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_multVec(lua_State* L) {
  int SWIG_arg = 0;
  osg::QuaternionBase< osg::Real32 > *arg1 = (osg::QuaternionBase< osg::Real32 > *) 0 ;
  osg::QuaternionBase< float >::VectorType *arg2 = 0 ;
  osg::QuaternionBase< float >::VectorType *arg3 = 0 ;
  
  SWIG_check_num_args("multVec",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("multVec",1,"osg::QuaternionBase< osg::Real32 > const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("multVec",2,"osg::QuaternionBase< float >::VectorType const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("multVec",3,"osg::QuaternionBase< float >::VectorType &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__QuaternionBaseT_float_t,0))){
    SWIG_fail_ptr("Quaternion_multVec",1,SWIGTYPE_p_osg__QuaternionBaseT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__VectorT_float_3_t,0))){
    SWIG_fail_ptr("Quaternion_multVec",2,SWIGTYPE_p_osg__VectorT_float_3_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_osg__VectorT_float_3_t,0))){
    SWIG_fail_ptr("Quaternion_multVec",3,SWIGTYPE_p_osg__VectorT_float_3_t);
  }
  
  ((osg::QuaternionBase< osg::Real32 > const *)arg1)->multVec((osg::QuaternionBase< float >::VectorType const &)*arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_scaleAngle(lua_State* L) {
  int SWIG_arg = 0;
  osg::QuaternionBase< osg::Real32 > *arg1 = (osg::QuaternionBase< osg::Real32 > *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("scaleAngle",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("scaleAngle",1,"osg::QuaternionBase< osg::Real32 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("scaleAngle",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__QuaternionBaseT_float_t,0))){
    SWIG_fail_ptr("Quaternion_scaleAngle",1,SWIGTYPE_p_osg__QuaternionBaseT_float_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->scaleAngle(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_slerpThis(lua_State* L) {
  int SWIG_arg = 0;
  osg::QuaternionBase< osg::Real32 > *arg1 = (osg::QuaternionBase< osg::Real32 > *) 0 ;
  osg::QuaternionBase< osg::Real32 > *arg2 = 0 ;
  osg::QuaternionBase< osg::Real32 > *arg3 = 0 ;
  float arg4 ;
  
  SWIG_check_num_args("slerpThis",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("slerpThis",1,"osg::QuaternionBase< osg::Real32 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("slerpThis",2,"osg::QuaternionBase< osg::Real32 > const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("slerpThis",3,"osg::QuaternionBase< osg::Real32 > const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("slerpThis",4,"float const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__QuaternionBaseT_float_t,0))){
    SWIG_fail_ptr("Quaternion_slerpThis",1,SWIGTYPE_p_osg__QuaternionBaseT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__QuaternionBaseT_float_t,0))){
    SWIG_fail_ptr("Quaternion_slerpThis",2,SWIGTYPE_p_osg__QuaternionBaseT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_osg__QuaternionBaseT_float_t,0))){
    SWIG_fail_ptr("Quaternion_slerpThis",3,SWIGTYPE_p_osg__QuaternionBaseT_float_t);
  }
  
  arg4 = (float const)lua_tonumber(L, 4);
  (arg1)->slerpThis((osg::QuaternionBase< osg::Real32 > const &)*arg2,(osg::QuaternionBase< osg::Real32 > const &)*arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_mult(lua_State* L) {
  int SWIG_arg = 0;
  osg::QuaternionBase< osg::Real32 > *arg1 = (osg::QuaternionBase< osg::Real32 > *) 0 ;
  osg::QuaternionBase< osg::Real32 > *arg2 = 0 ;
  
  SWIG_check_num_args("mult",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("mult",1,"osg::QuaternionBase< osg::Real32 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("mult",2,"osg::QuaternionBase< osg::Real32 > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__QuaternionBaseT_float_t,0))){
    SWIG_fail_ptr("Quaternion_mult",1,SWIGTYPE_p_osg__QuaternionBaseT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__QuaternionBaseT_float_t,0))){
    SWIG_fail_ptr("Quaternion_mult",2,SWIGTYPE_p_osg__QuaternionBaseT_float_t);
  }
  
  (arg1)->mult((osg::QuaternionBase< osg::Real32 > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_multLeft(lua_State* L) {
  int SWIG_arg = 0;
  osg::QuaternionBase< osg::Real32 > *arg1 = (osg::QuaternionBase< osg::Real32 > *) 0 ;
  osg::QuaternionBase< osg::Real32 > *arg2 = 0 ;
  
  SWIG_check_num_args("multLeft",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("multLeft",1,"osg::QuaternionBase< osg::Real32 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("multLeft",2,"osg::QuaternionBase< osg::Real32 > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__QuaternionBaseT_float_t,0))){
    SWIG_fail_ptr("Quaternion_multLeft",1,SWIGTYPE_p_osg__QuaternionBaseT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__QuaternionBaseT_float_t,0))){
    SWIG_fail_ptr("Quaternion_multLeft",2,SWIGTYPE_p_osg__QuaternionBaseT_float_t);
  }
  
  (arg1)->multLeft((osg::QuaternionBase< osg::Real32 > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_equals(lua_State* L) {
  int SWIG_arg = 0;
  osg::QuaternionBase< osg::Real32 > *arg1 = (osg::QuaternionBase< osg::Real32 > *) 0 ;
  osg::QuaternionBase< osg::Real32 > *arg2 = 0 ;
  float arg3 ;
  bool result;
  
  SWIG_check_num_args("equals",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("equals",1,"osg::QuaternionBase< osg::Real32 > const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("equals",2,"osg::QuaternionBase< osg::Real32 > const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("equals",3,"float const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__QuaternionBaseT_float_t,0))){
    SWIG_fail_ptr("Quaternion_equals",1,SWIGTYPE_p_osg__QuaternionBaseT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__QuaternionBaseT_float_t,0))){
    SWIG_fail_ptr("Quaternion_equals",2,SWIGTYPE_p_osg__QuaternionBaseT_float_t);
  }
  
  arg3 = (float const)lua_tonumber(L, 3);
  result = (bool)((osg::QuaternionBase< osg::Real32 > const *)arg1)->equals((osg::QuaternionBase< osg::Real32 > const &)*arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion___eq(lua_State* L) {
  int SWIG_arg = 0;
  osg::QuaternionBase< osg::Real32 > *arg1 = (osg::QuaternionBase< osg::Real32 > *) 0 ;
  osg::QuaternionBase< osg::Real32 > *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("operator ==",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("operator ==",1,"osg::QuaternionBase< osg::Real32 > const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("operator ==",2,"osg::QuaternionBase< osg::Real32 > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__QuaternionBaseT_float_t,0))){
    SWIG_fail_ptr("Quaternion___eq",1,SWIGTYPE_p_osg__QuaternionBaseT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__QuaternionBaseT_float_t,0))){
    SWIG_fail_ptr("Quaternion___eq",2,SWIGTYPE_p_osg__QuaternionBaseT_float_t);
  }
  
  result = (bool)((osg::QuaternionBase< osg::Real32 > const *)arg1)->operator ==((osg::QuaternionBase< osg::Real32 > const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Quaternion(void *obj) {
osg::QuaternionBase< osg::Real32 > *arg1 = (osg::QuaternionBase< osg::Real32 > *) obj;
delete arg1;
}
static swig_lua_method swig_osg_QuaternionBase_Sl_osg_Real32_Sg__methods[] = {
    {"setIdentity", _wrap_Quaternion_setIdentity}, 
    {"setValueAsAxisRad", _wrap_Quaternion_setValueAsAxisRad}, 
    {"setValueAsAxisDeg", _wrap_Quaternion_setValueAsAxisDeg}, 
    {"setValueAsQuat", _wrap_Quaternion_setValueAsQuat}, 
    {"setValue", _wrap_Quaternion_setValue}, 
    {"getValues", _wrap_Quaternion_getValues}, 
    {"getValueAsQuat", _wrap_Quaternion_getValueAsQuat}, 
    {"getValueAsAxisRad", _wrap_Quaternion_getValueAsAxisRad}, 
    {"getValueAsAxisDeg", _wrap_Quaternion_getValueAsAxisDeg}, 
    {"getValue", _wrap_Quaternion_getValue}, 
    {"getValuesOnly", _wrap_Quaternion_getValuesOnly}, 
    {"x", _wrap_Quaternion_x}, 
    {"y", _wrap_Quaternion_y}, 
    {"z", _wrap_Quaternion_z}, 
    {"w", _wrap_Quaternion_w}, 
    {"length", _wrap_Quaternion_length}, 
    {"normalize", _wrap_Quaternion_normalize}, 
    {"invert", _wrap_Quaternion_invert}, 
    {"inverse", _wrap_Quaternion_inverse}, 
    {"multVec", _wrap_Quaternion_multVec}, 
    {"scaleAngle", _wrap_Quaternion_scaleAngle}, 
    {"slerpThis", _wrap_Quaternion_slerpThis}, 
    {"mult", _wrap_Quaternion_mult}, 
    {"multLeft", _wrap_Quaternion_multLeft}, 
    {"equals", _wrap_Quaternion_equals}, 
    {"__eq", _wrap_Quaternion___eq}, 
    {0,0}
};
static swig_lua_attribute swig_osg_QuaternionBase_Sl_osg_Real32_Sg__attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_osg_QuaternionBase_Sl_osg_Real32_Sg__bases[] = {0};
static const char *swig_osg_QuaternionBase_Sl_osg_Real32_Sg__base_names[] = {0};
static swig_lua_class _wrap_class_osg_QuaternionBase_Sl_osg_Real32_Sg_ = { "Quaternion", &SWIGTYPE_p_osg__QuaternionBaseT_float_t,_wrap_new_Quaternion, swig_delete_Quaternion, swig_osg_QuaternionBase_Sl_osg_Real32_Sg__methods, swig_osg_QuaternionBase_Sl_osg_Real32_Sg__attributes, swig_osg_QuaternionBase_Sl_osg_Real32_Sg__bases, swig_osg_QuaternionBase_Sl_osg_Real32_Sg__base_names };

static int _wrap_new_TypeBase__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  osg::Char8 *arg1 = (osg::Char8 *) 0 ;
  osg::Char8 *arg2 = (osg::Char8 *) 0 ;
  osg::UInt32 arg3 ;
  osg::TypeBase *result = 0 ;
  
  SWIG_check_num_args("osg::TypeBase",3,3)
  if(!lua_isstring(L,1)) SWIG_fail_arg("osg::TypeBase",1,"osg::Char8 const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("osg::TypeBase",2,"osg::Char8 const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("osg::TypeBase",3,"osg::UInt32 const");
  arg1 = (osg::Char8 *)lua_tostring(L, 1);
  arg2 = (osg::Char8 *)lua_tostring(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (osg::UInt32 const)lua_tonumber(L, 3);
  result = (osg::TypeBase *)new osg::TypeBase((osg::Char8 const *)arg1,(osg::Char8 const *)arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_osg__TypeBase,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TypeBase__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  osg::Char8 *arg1 = (osg::Char8 *) 0 ;
  osg::Char8 *arg2 = (osg::Char8 *) 0 ;
  osg::TypeBase *result = 0 ;
  
  SWIG_check_num_args("osg::TypeBase",2,2)
  if(!lua_isstring(L,1)) SWIG_fail_arg("osg::TypeBase",1,"osg::Char8 const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("osg::TypeBase",2,"osg::Char8 const *");
  arg1 = (osg::Char8 *)lua_tostring(L, 1);
  arg2 = (osg::Char8 *)lua_tostring(L, 2);
  result = (osg::TypeBase *)new osg::TypeBase((osg::Char8 const *)arg1,(osg::Char8 const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_osg__TypeBase,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TypeBase(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_TypeBase__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_TypeBase__SWIG_0(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_TypeBase'\n"
    "  Possible C/C++ prototypes are:\n"
    "    osg::TypeBase(osg::Char8 const *,osg::Char8 const *,osg::UInt32 const)\n"
    "    osg::TypeBase(osg::Char8 const *,osg::Char8 const *)\n");
  lua_error(L);return 0;
}


static int _wrap_TypeBase_getId(lua_State* L) {
  int SWIG_arg = 0;
  osg::TypeBase *arg1 = (osg::TypeBase *) 0 ;
  osg::UInt32 result;
  
  SWIG_check_num_args("getId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getId",1,"osg::TypeBase const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__TypeBase,0))){
    SWIG_fail_ptr("TypeBase_getId",1,SWIGTYPE_p_osg__TypeBase);
  }
  
  result = (osg::UInt32)((osg::TypeBase const *)arg1)->getId();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TypeBase_getCName(lua_State* L) {
  int SWIG_arg = 0;
  osg::TypeBase *arg1 = (osg::TypeBase *) 0 ;
  osg::Char8 *result = 0 ;
  
  SWIG_check_num_args("getCName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getCName",1,"osg::TypeBase const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__TypeBase,0))){
    SWIG_fail_ptr("TypeBase_getCName",1,SWIGTYPE_p_osg__TypeBase);
  }
  
  result = (osg::Char8 *)((osg::TypeBase const *)arg1)->getCName();
  lua_pushstring(L,(const char*)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TypeBase_getCParentName(lua_State* L) {
  int SWIG_arg = 0;
  osg::TypeBase *arg1 = (osg::TypeBase *) 0 ;
  osg::Char8 *result = 0 ;
  
  SWIG_check_num_args("getCParentName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getCParentName",1,"osg::TypeBase const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__TypeBase,0))){
    SWIG_fail_ptr("TypeBase_getCParentName",1,SWIGTYPE_p_osg__TypeBase);
  }
  
  result = (osg::Char8 *)((osg::TypeBase const *)arg1)->getCParentName();
  lua_pushstring(L,(const char*)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TypeBase_getNameSpace(lua_State* L) {
  int SWIG_arg = 0;
  osg::TypeBase *arg1 = (osg::TypeBase *) 0 ;
  osg::UInt32 result;
  
  SWIG_check_num_args("getNameSpace",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getNameSpace",1,"osg::TypeBase const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__TypeBase,0))){
    SWIG_fail_ptr("TypeBase_getNameSpace",1,SWIGTYPE_p_osg__TypeBase);
  }
  
  result = (osg::UInt32)((osg::TypeBase const *)arg1)->getNameSpace();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TypeBase_isDerivedFrom(lua_State* L) {
  int SWIG_arg = 0;
  osg::TypeBase *arg1 = (osg::TypeBase *) 0 ;
  osg::TypeBase *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("isDerivedFrom",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isDerivedFrom",1,"osg::TypeBase const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("isDerivedFrom",2,"osg::TypeBase const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__TypeBase,0))){
    SWIG_fail_ptr("TypeBase_isDerivedFrom",1,SWIGTYPE_p_osg__TypeBase);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__TypeBase,0))){
    SWIG_fail_ptr("TypeBase_isDerivedFrom",2,SWIGTYPE_p_osg__TypeBase);
  }
  
  result = (bool)((osg::TypeBase const *)arg1)->isDerivedFrom((osg::TypeBase const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TypeBase___eq(lua_State* L) {
  int SWIG_arg = 0;
  osg::TypeBase *arg1 = (osg::TypeBase *) 0 ;
  osg::TypeBase *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("operator ==",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("operator ==",1,"osg::TypeBase const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("operator ==",2,"osg::TypeBase const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__TypeBase,0))){
    SWIG_fail_ptr("TypeBase___eq",1,SWIGTYPE_p_osg__TypeBase);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__TypeBase,0))){
    SWIG_fail_ptr("TypeBase___eq",2,SWIGTYPE_p_osg__TypeBase);
  }
  
  result = (bool)((osg::TypeBase const *)arg1)->operator ==((osg::TypeBase const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_TypeBase(void *obj) {
osg::TypeBase *arg1 = (osg::TypeBase *) obj;
delete arg1;
}
static swig_lua_method swig_osg_TypeBase_methods[] = {
    {"getId", _wrap_TypeBase_getId}, 
    {"getCName", _wrap_TypeBase_getCName}, 
    {"getCParentName", _wrap_TypeBase_getCParentName}, 
    {"getNameSpace", _wrap_TypeBase_getNameSpace}, 
    {"isDerivedFrom", _wrap_TypeBase_isDerivedFrom}, 
    {"__eq", _wrap_TypeBase___eq}, 
    {0,0}
};
static swig_lua_attribute swig_osg_TypeBase_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_osg_TypeBase_bases[] = {0};
static const char *swig_osg_TypeBase_base_names[] = {0};
static swig_lua_class _wrap_class_osg_TypeBase = { "TypeBase", &SWIGTYPE_p_osg__TypeBase,_wrap_new_TypeBase, swig_delete_TypeBase, swig_osg_TypeBase_methods, swig_osg_TypeBase_attributes, swig_osg_TypeBase_bases, swig_osg_TypeBase_base_names };

static int _wrap_new_DataType__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  osg::Char8 *arg1 = (osg::Char8 *) 0 ;
  osg::Char8 *arg2 = (osg::Char8 *) 0 ;
  osg::UInt32 arg3 ;
  osg::DataType *result = 0 ;
  
  SWIG_check_num_args("osg::DataType",3,3)
  if(!lua_isstring(L,1)) SWIG_fail_arg("osg::DataType",1,"osg::Char8 const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("osg::DataType",2,"osg::Char8 const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("osg::DataType",3,"osg::UInt32 const");
  arg1 = (osg::Char8 *)lua_tostring(L, 1);
  arg2 = (osg::Char8 *)lua_tostring(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (osg::UInt32 const)lua_tonumber(L, 3);
  result = (osg::DataType *)new osg::DataType((osg::Char8 const *)arg1,(osg::Char8 const *)arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_osg__DataType,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DataType__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  osg::Char8 *arg1 = (osg::Char8 *) 0 ;
  osg::Char8 *arg2 = (osg::Char8 *) 0 ;
  osg::DataType *result = 0 ;
  
  SWIG_check_num_args("osg::DataType",2,2)
  if(!lua_isstring(L,1)) SWIG_fail_arg("osg::DataType",1,"osg::Char8 const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("osg::DataType",2,"osg::Char8 const *");
  arg1 = (osg::Char8 *)lua_tostring(L, 1);
  arg2 = (osg::Char8 *)lua_tostring(L, 2);
  result = (osg::DataType *)new osg::DataType((osg::Char8 const *)arg1,(osg::Char8 const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_osg__DataType,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DataType(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_DataType__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_DataType__SWIG_0(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_DataType'\n"
    "  Possible C/C++ prototypes are:\n"
    "    osg::DataType(osg::Char8 const *,osg::Char8 const *,osg::UInt32 const)\n"
    "    osg::DataType(osg::Char8 const *,osg::Char8 const *)\n");
  lua_error(L);return 0;
}


static int _wrap_DataType___eq(lua_State* L) {
  int SWIG_arg = 0;
  osg::DataType *arg1 = (osg::DataType *) 0 ;
  osg::DataType *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("operator ==",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("operator ==",1,"osg::DataType const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("operator ==",2,"osg::DataType const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__DataType,0))){
    SWIG_fail_ptr("DataType___eq",1,SWIGTYPE_p_osg__DataType);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__DataType,0))){
    SWIG_fail_ptr("DataType___eq",2,SWIGTYPE_p_osg__DataType);
  }
  
  result = (bool)((osg::DataType const *)arg1)->operator ==((osg::DataType const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_DataType(void *obj) {
osg::DataType *arg1 = (osg::DataType *) obj;
delete arg1;
}
static swig_lua_method swig_osg_DataType_methods[] = {
    {"__eq", _wrap_DataType___eq}, 
    {0,0}
};
static swig_lua_attribute swig_osg_DataType_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_osg_DataType_bases[] = {0,0};
static const char *swig_osg_DataType_base_names[] = {"osg::TypeBase *",0};
static swig_lua_class _wrap_class_osg_DataType = { "DataType", &SWIGTYPE_p_osg__DataType,_wrap_new_DataType, swig_delete_DataType, swig_osg_DataType_methods, swig_osg_DataType_attributes, swig_osg_DataType_bases, swig_osg_DataType_base_names };

static int _wrap_TypeFactory_the(lua_State* L) {
  int SWIG_arg = 0;
  osg::TypeFactory *result = 0 ;
  
  SWIG_check_num_args("osg::TypeFactory::the",0,0)
  result = (osg::TypeFactory *)osg::TypeFactory::the();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_osg__TypeFactory,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TypeFactory_registerType(lua_State* L) {
  int SWIG_arg = 0;
  osg::TypeFactory *arg1 = (osg::TypeFactory *) 0 ;
  osg::TypeBase *arg2 = (osg::TypeBase *) 0 ;
  osg::UInt32 result;
  
  SWIG_check_num_args("registerType",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("registerType",1,"osg::TypeFactory *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("registerType",2,"osg::TypeBase *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__TypeFactory,0))){
    SWIG_fail_ptr("TypeFactory_registerType",1,SWIGTYPE_p_osg__TypeFactory);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__TypeBase,0))){
    SWIG_fail_ptr("TypeFactory_registerType",2,SWIGTYPE_p_osg__TypeBase);
  }
  
  result = (osg::UInt32)(arg1)->registerType(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TypeFactory_findTypeId__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  osg::TypeFactory *arg1 = (osg::TypeFactory *) 0 ;
  osg::Char8 *arg2 = (osg::Char8 *) 0 ;
  osg::UInt32 arg3 ;
  osg::UInt32 result;
  
  SWIG_check_num_args("findTypeId",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("findTypeId",1,"osg::TypeFactory *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("findTypeId",2,"osg::Char8 const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("findTypeId",3,"osg::UInt32 const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__TypeFactory,0))){
    SWIG_fail_ptr("TypeFactory_findTypeId",1,SWIGTYPE_p_osg__TypeFactory);
  }
  
  arg2 = (osg::Char8 *)lua_tostring(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (osg::UInt32 const)lua_tonumber(L, 3);
  result = (osg::UInt32)(arg1)->findTypeId((osg::Char8 const *)arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TypeFactory_findTypeId__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  osg::TypeFactory *arg1 = (osg::TypeFactory *) 0 ;
  osg::Char8 *arg2 = (osg::Char8 *) 0 ;
  osg::UInt32 result;
  
  SWIG_check_num_args("findTypeId",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("findTypeId",1,"osg::TypeFactory *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("findTypeId",2,"osg::Char8 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__TypeFactory,0))){
    SWIG_fail_ptr("TypeFactory_findTypeId",1,SWIGTYPE_p_osg__TypeFactory);
  }
  
  arg2 = (osg::Char8 *)lua_tostring(L, 2);
  result = (osg::UInt32)(arg1)->findTypeId((osg::Char8 const *)arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TypeFactory_findTypeId(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_osg__TypeFactory, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_TypeFactory_findTypeId__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_osg__TypeFactory, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_TypeFactory_findTypeId__SWIG_0(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'TypeFactory_findTypeId'\n"
    "  Possible C/C++ prototypes are:\n"
    "    findTypeId(osg::TypeFactory *,osg::Char8 const *,osg::UInt32 const)\n"
    "    findTypeId(osg::TypeFactory *,osg::Char8 const *)\n");
  lua_error(L);return 0;
}


static int _wrap_TypeFactory_findType__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  osg::TypeFactory *arg1 = (osg::TypeFactory *) 0 ;
  osg::UInt32 arg2 ;
  osg::TypeBase *result = 0 ;
  
  SWIG_check_num_args("findType",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("findType",1,"osg::TypeFactory *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("findType",2,"osg::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__TypeFactory,0))){
    SWIG_fail_ptr("TypeFactory_findType",1,SWIGTYPE_p_osg__TypeFactory);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (osg::UInt32)lua_tonumber(L, 2);
  result = (osg::TypeBase *)(arg1)->findType(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_osg__TypeBase,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TypeFactory_findType__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  osg::TypeFactory *arg1 = (osg::TypeFactory *) 0 ;
  osg::Char8 *arg2 = (osg::Char8 *) 0 ;
  osg::UInt32 arg3 ;
  osg::TypeBase *result = 0 ;
  
  SWIG_check_num_args("findType",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("findType",1,"osg::TypeFactory *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("findType",2,"osg::Char8 const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("findType",3,"osg::UInt32 const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__TypeFactory,0))){
    SWIG_fail_ptr("TypeFactory_findType",1,SWIGTYPE_p_osg__TypeFactory);
  }
  
  arg2 = (osg::Char8 *)lua_tostring(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (osg::UInt32 const)lua_tonumber(L, 3);
  result = (osg::TypeBase *)(arg1)->findType((osg::Char8 const *)arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_osg__TypeBase,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TypeFactory_findType__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  osg::TypeFactory *arg1 = (osg::TypeFactory *) 0 ;
  osg::Char8 *arg2 = (osg::Char8 *) 0 ;
  osg::TypeBase *result = 0 ;
  
  SWIG_check_num_args("findType",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("findType",1,"osg::TypeFactory *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("findType",2,"osg::Char8 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__TypeFactory,0))){
    SWIG_fail_ptr("TypeFactory_findType",1,SWIGTYPE_p_osg__TypeFactory);
  }
  
  arg2 = (osg::Char8 *)lua_tostring(L, 2);
  result = (osg::TypeBase *)(arg1)->findType((osg::Char8 const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_osg__TypeBase,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TypeFactory_findType(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_osg__TypeFactory, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_TypeFactory_findType__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_osg__TypeFactory, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_TypeFactory_findType__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_osg__TypeFactory, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_TypeFactory_findType__SWIG_1(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'TypeFactory_findType'\n"
    "  Possible C/C++ prototypes are:\n"
    "    findType(osg::TypeFactory *,osg::UInt32)\n"
    "    findType(osg::TypeFactory *,osg::Char8 const *,osg::UInt32 const)\n"
    "    findType(osg::TypeFactory *,osg::Char8 const *)\n");
  lua_error(L);return 0;
}


static int _wrap_TypeFactory_getNumTypes(lua_State* L) {
  int SWIG_arg = 0;
  osg::TypeFactory *arg1 = (osg::TypeFactory *) 0 ;
  osg::UInt32 result;
  
  SWIG_check_num_args("getNumTypes",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getNumTypes",1,"osg::TypeFactory *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__TypeFactory,0))){
    SWIG_fail_ptr("TypeFactory_getNumTypes",1,SWIGTYPE_p_osg__TypeFactory);
  }
  
  result = (osg::UInt32)(arg1)->getNumTypes();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TypeFactory_writeTypeGraph(lua_State* L) {
  int SWIG_arg = 0;
  osg::TypeFactory *arg1 = (osg::TypeFactory *) 0 ;
  osg::Char8 *arg2 = (osg::Char8 *) 0 ;
  
  SWIG_check_num_args("writeTypeGraph",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("writeTypeGraph",1,"osg::TypeFactory *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("writeTypeGraph",2,"osg::Char8 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__TypeFactory,0))){
    SWIG_fail_ptr("TypeFactory_writeTypeGraph",1,SWIGTYPE_p_osg__TypeFactory);
  }
  
  arg2 = (osg::Char8 *)lua_tostring(L, 2);
  (arg1)->writeTypeGraph((osg::Char8 const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static swig_lua_method swig_osg_TypeFactory_methods[] = {
    {"registerType", _wrap_TypeFactory_registerType}, 
    {"findTypeId", _wrap_TypeFactory_findTypeId}, 
    {"findType", _wrap_TypeFactory_findType}, 
    {"getNumTypes", _wrap_TypeFactory_getNumTypes}, 
    {"writeTypeGraph", _wrap_TypeFactory_writeTypeGraph}, 
    {0,0}
};
static swig_lua_attribute swig_osg_TypeFactory_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_osg_TypeFactory_bases[] = {0};
static const char *swig_osg_TypeFactory_base_names[] = {0};
static swig_lua_class _wrap_class_osg_TypeFactory = { "TypeFactory", &SWIGTYPE_p_osg__TypeFactory,0,0, swig_osg_TypeFactory_methods, swig_osg_TypeFactory_attributes, swig_osg_TypeFactory_bases, swig_osg_TypeFactory_base_names };

static int _wrap_FieldType_getContentType(lua_State* L) {
  int SWIG_arg = 0;
  osg::FieldType *arg1 = (osg::FieldType *) 0 ;
  osg::DataType *result = 0 ;
  
  SWIG_check_num_args("getContentType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getContentType",1,"osg::FieldType const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__FieldType,0))){
    SWIG_fail_ptr("FieldType_getContentType",1,SWIGTYPE_p_osg__FieldType);
  }
  
  result = (osg::DataType *) &((osg::FieldType const *)arg1)->getContentType();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_osg__DataType,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FieldType_getCardinality(lua_State* L) {
  int SWIG_arg = 0;
  osg::FieldType *arg1 = (osg::FieldType *) 0 ;
  osg::FieldType::Cardinality result;
  
  SWIG_check_num_args("getCardinality",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getCardinality",1,"osg::FieldType const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__FieldType,0))){
    SWIG_fail_ptr("FieldType_getCardinality",1,SWIGTYPE_p_osg__FieldType);
  }
  
  result = (osg::FieldType::Cardinality)((osg::FieldType const *)arg1)->getCardinality();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FieldType_getScanTypeId(lua_State* L) {
  int SWIG_arg = 0;
  osg::FieldType *arg1 = (osg::FieldType *) 0 ;
  osg::UInt32 result;
  
  SWIG_check_num_args("getScanTypeId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getScanTypeId",1,"osg::FieldType const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__FieldType,0))){
    SWIG_fail_ptr("FieldType_getScanTypeId",1,SWIGTYPE_p_osg__FieldType);
  }
  
  result = (osg::UInt32)((osg::FieldType const *)arg1)->getScanTypeId();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_FieldType(void *obj) {
osg::FieldType *arg1 = (osg::FieldType *) obj;
delete arg1;
}
static swig_lua_method swig_osg_FieldType_methods[] = {
    {"getContentType", _wrap_FieldType_getContentType}, 
    {"getCardinality", _wrap_FieldType_getCardinality}, 
    {"getScanTypeId", _wrap_FieldType_getScanTypeId}, 
    {0,0}
};
static swig_lua_attribute swig_osg_FieldType_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_osg_FieldType_bases[] = {0,0};
static const char *swig_osg_FieldType_base_names[] = {"osg::DataType *",0};
static swig_lua_class _wrap_class_osg_FieldType = { "FieldType", &SWIGTYPE_p_osg__FieldType,0, swig_delete_FieldType, swig_osg_FieldType_methods, swig_osg_FieldType_attributes, swig_osg_FieldType_bases, swig_osg_FieldType_base_names };

static int _wrap_Field_getType(lua_State* L) {
  int SWIG_arg = 0;
  osg::Field *arg1 = (osg::Field *) 0 ;
  osg::FieldType *result = 0 ;
  
  SWIG_check_num_args("getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getType",1,"osg::Field const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__Field,0))){
    SWIG_fail_ptr("Field_getType",1,SWIGTYPE_p_osg__Field);
  }
  
  result = (osg::FieldType *) &((osg::Field const *)arg1)->getType();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_osg__FieldType,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Field_getContentType(lua_State* L) {
  int SWIG_arg = 0;
  osg::Field *arg1 = (osg::Field *) 0 ;
  osg::DataType *result = 0 ;
  
  SWIG_check_num_args("getContentType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getContentType",1,"osg::Field const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__Field,0))){
    SWIG_fail_ptr("Field_getContentType",1,SWIGTYPE_p_osg__Field);
  }
  
  result = (osg::DataType *) &((osg::Field const *)arg1)->getContentType();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_osg__DataType,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Field_getCardinality(lua_State* L) {
  int SWIG_arg = 0;
  osg::Field *arg1 = (osg::Field *) 0 ;
  osg::FieldType::Cardinality result;
  
  SWIG_check_num_args("getCardinality",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getCardinality",1,"osg::Field const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__Field,0))){
    SWIG_fail_ptr("Field_getCardinality",1,SWIGTYPE_p_osg__Field);
  }
  
  result = (osg::FieldType::Cardinality)((osg::Field const *)arg1)->getCardinality();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Field_isEmpty(lua_State* L) {
  int SWIG_arg = 0;
  osg::Field *arg1 = (osg::Field *) 0 ;
  bool result;
  
  SWIG_check_num_args("isEmpty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isEmpty",1,"osg::Field const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__Field,0))){
    SWIG_fail_ptr("Field_isEmpty",1,SWIGTYPE_p_osg__Field);
  }
  
  result = (bool)((osg::Field const *)arg1)->isEmpty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Field_getSize(lua_State* L) {
  int SWIG_arg = 0;
  osg::Field *arg1 = (osg::Field *) 0 ;
  osg::UInt32 result;
  
  SWIG_check_num_args("getSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getSize",1,"osg::Field const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__Field,0))){
    SWIG_fail_ptr("Field_getSize",1,SWIGTYPE_p_osg__Field);
  }
  
  result = (osg::UInt32)((osg::Field const *)arg1)->getSize();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Field_pushValueByStr(lua_State* L) {
  int SWIG_arg = 0;
  osg::Field *arg1 = (osg::Field *) 0 ;
  osg::Char8 *arg2 = (osg::Char8 *) 0 ;
  
  SWIG_check_num_args("pushValueByStr",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pushValueByStr",1,"osg::Field *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("pushValueByStr",2,"osg::Char8 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__Field,0))){
    SWIG_fail_ptr("Field_pushValueByStr",1,SWIGTYPE_p_osg__Field);
  }
  
  arg2 = (osg::Char8 *)lua_tostring(L, 2);
  (arg1)->pushValueByStr((osg::Char8 const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Field_getValueByStr(lua_State* L) {
  int SWIG_arg = 0;
  osg::Field *arg1 = (osg::Field *) 0 ;
  std::string *arg2 = 0 ;
  std::string *result = 0 ;
  
  SWIG_check_num_args("getValueByStr",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getValueByStr",1,"osg::Field const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("getValueByStr",2,"std::string &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__Field,0))){
    SWIG_fail_ptr("Field_getValueByStr",1,SWIGTYPE_p_osg__Field);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("Field_getValueByStr",2,SWIGTYPE_p_std__string);
  }
  
  result = (std::string *) &((osg::Field const *)arg1)->getValueByStr(*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__string,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Field_setAbstrValue(lua_State* L) {
  int SWIG_arg = 0;
  osg::Field *arg1 = (osg::Field *) 0 ;
  osg::Field *arg2 = 0 ;
  
  SWIG_check_num_args("setAbstrValue",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setAbstrValue",1,"osg::Field *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setAbstrValue",2,"osg::Field const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__Field,0))){
    SWIG_fail_ptr("Field_setAbstrValue",1,SWIGTYPE_p_osg__Field);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__Field,0))){
    SWIG_fail_ptr("Field_setAbstrValue",2,SWIGTYPE_p_osg__Field);
  }
  
  (arg1)->setAbstrValue((osg::Field const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Field_dump(lua_State* L) {
  int SWIG_arg = 0;
  osg::Field *arg1 = (osg::Field *) 0 ;
  
  SWIG_check_num_args("dump",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dump",1,"osg::Field const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__Field,0))){
    SWIG_fail_ptr("Field_dump",1,SWIGTYPE_p_osg__Field);
  }
  
  ((osg::Field const *)arg1)->dump();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Field(void *obj) {
osg::Field *arg1 = (osg::Field *) obj;
delete arg1;
}
static swig_lua_method swig_osg_Field_methods[] = {
    {"getType", _wrap_Field_getType}, 
    {"getContentType", _wrap_Field_getContentType}, 
    {"getCardinality", _wrap_Field_getCardinality}, 
    {"isEmpty", _wrap_Field_isEmpty}, 
    {"getSize", _wrap_Field_getSize}, 
    {"pushValueByStr", _wrap_Field_pushValueByStr}, 
    {"getValueByStr", _wrap_Field_getValueByStr}, 
    {"setAbstrValue", _wrap_Field_setAbstrValue}, 
    {"dump", _wrap_Field_dump}, 
    {0,0}
};
static swig_lua_attribute swig_osg_Field_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_osg_Field_bases[] = {0};
static const char *swig_osg_Field_base_names[] = {0};
static swig_lua_class _wrap_class_osg_Field = { "Field", &SWIGTYPE_p_osg__Field,0, swig_delete_Field, swig_osg_Field_methods, swig_osg_Field_attributes, swig_osg_Field_bases, swig_osg_Field_base_names };

static int _wrap_FieldFactory_createField__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  osg::FieldFactory *arg1 = (osg::FieldFactory *) 0 ;
  osg::UInt32 arg2 ;
  osg::Field *result = 0 ;
  
  SWIG_check_num_args("createField",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("createField",1,"osg::FieldFactory *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("createField",2,"osg::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__FieldFactory,0))){
    SWIG_fail_ptr("FieldFactory_createField",1,SWIGTYPE_p_osg__FieldFactory);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (osg::UInt32)lua_tonumber(L, 2);
  result = (osg::Field *)(arg1)->createField(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_osg__Field,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FieldFactory_createField__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  osg::FieldFactory *arg1 = (osg::FieldFactory *) 0 ;
  osg::Char8 *arg2 = (osg::Char8 *) 0 ;
  osg::Field *result = 0 ;
  
  SWIG_check_num_args("createField",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("createField",1,"osg::FieldFactory *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("createField",2,"osg::Char8 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__FieldFactory,0))){
    SWIG_fail_ptr("FieldFactory_createField",1,SWIGTYPE_p_osg__FieldFactory);
  }
  
  arg2 = (osg::Char8 *)lua_tostring(L, 2);
  result = (osg::Field *)(arg1)->createField((osg::Char8 const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_osg__Field,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FieldFactory_createField(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_osg__FieldFactory, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_FieldFactory_createField__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_osg__FieldFactory, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_FieldFactory_createField__SWIG_1(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'FieldFactory_createField'\n"
    "  Possible C/C++ prototypes are:\n"
    "    createField(osg::FieldFactory *,osg::UInt32)\n"
    "    createField(osg::FieldFactory *,osg::Char8 const *)\n");
  lua_error(L);return 0;
}


static int _wrap_FieldFactory_getNFieldTypes(lua_State* L) {
  int SWIG_arg = 0;
  osg::UInt32 result;
  
  SWIG_check_num_args("osg::FieldFactory::getNFieldTypes",0,0)
  result = (osg::UInt32)osg::FieldFactory::getNFieldTypes();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FieldFactory_getFieldType__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  osg::UInt32 arg1 ;
  osg::FieldType *result = 0 ;
  
  SWIG_check_num_args("osg::FieldFactory::getFieldType",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("osg::FieldFactory::getFieldType",1,"osg::UInt32");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (osg::UInt32)lua_tonumber(L, 1);
  result = (osg::FieldType *)osg::FieldFactory::getFieldType(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_osg__FieldType,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FieldFactory_getFieldType__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  osg::Char8 *arg1 = (osg::Char8 *) 0 ;
  osg::FieldType *result = 0 ;
  
  SWIG_check_num_args("osg::FieldFactory::getFieldType",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("osg::FieldFactory::getFieldType",1,"osg::Char8 const *");
  arg1 = (osg::Char8 *)lua_tostring(L, 1);
  result = (osg::FieldType *)osg::FieldFactory::getFieldType((char const *)arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_osg__FieldType,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FieldFactory_getFieldType(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_FieldFactory_getFieldType__SWIG_0(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      return _wrap_FieldFactory_getFieldType__SWIG_1(L);
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'FieldFactory_getFieldType'\n"
    "  Possible C/C++ prototypes are:\n"
    "    getFieldType(osg::UInt32)\n"
    "    osg::FieldFactory::getFieldType(osg::Char8 const *)\n");
  lua_error(L);return 0;
}


static int _wrap_FieldFactory_getFieldTypeName(lua_State* L) {
  int SWIG_arg = 0;
  osg::FieldFactory *arg1 = (osg::FieldFactory *) 0 ;
  osg::UInt32 arg2 ;
  osg::Char8 *result = 0 ;
  
  SWIG_check_num_args("getFieldTypeName",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getFieldTypeName",1,"osg::FieldFactory *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getFieldTypeName",2,"osg::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__FieldFactory,0))){
    SWIG_fail_ptr("FieldFactory_getFieldTypeName",1,SWIGTYPE_p_osg__FieldFactory);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (osg::UInt32)lua_tonumber(L, 2);
  result = (osg::Char8 *)(arg1)->getFieldTypeName(arg2);
  lua_pushstring(L,(const char*)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FieldFactory_the(lua_State* L) {
  int SWIG_arg = 0;
  osg::FieldFactory *result = 0 ;
  
  SWIG_check_num_args("osg::FieldFactory::the",0,0)
  result = (osg::FieldFactory *) &osg::FieldFactory::the();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_osg__FieldFactory,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_FieldFactory(void *obj) {
osg::FieldFactory *arg1 = (osg::FieldFactory *) obj;
delete arg1;
}
static swig_lua_method swig_osg_FieldFactory_methods[] = {
    {"createField", _wrap_FieldFactory_createField}, 
    {"getFieldTypeName", _wrap_FieldFactory_getFieldTypeName}, 
    {0,0}
};
static swig_lua_attribute swig_osg_FieldFactory_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_osg_FieldFactory_bases[] = {0};
static const char *swig_osg_FieldFactory_base_names[] = {0};
static swig_lua_class _wrap_class_osg_FieldFactory = { "FieldFactory", &SWIGTYPE_p_osg__FieldFactory,0, swig_delete_FieldFactory, swig_osg_FieldFactory_methods, swig_osg_FieldFactory_attributes, swig_osg_FieldFactory_bases, swig_osg_FieldFactory_base_names };

static int _wrap_new_FieldDescription(lua_State* L) {
  int SWIG_arg = 0;
  osg::FieldDescription *arg1 = 0 ;
  osg::FieldDescription *result = 0 ;
  
  SWIG_check_num_args("osg::FieldDescription",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("osg::FieldDescription",1,"osg::FieldDescription const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__FieldDescription,0))){
    SWIG_fail_ptr("new_FieldDescription",1,SWIGTYPE_p_osg__FieldDescription);
  }
  
  result = (osg::FieldDescription *)new osg::FieldDescription((osg::FieldDescription const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_osg__FieldDescription,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FieldDescription_getCName(lua_State* L) {
  int SWIG_arg = 0;
  osg::FieldDescription *arg1 = (osg::FieldDescription *) 0 ;
  osg::Char8 *result = 0 ;
  
  SWIG_check_num_args("getCName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getCName",1,"osg::FieldDescription const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__FieldDescription,0))){
    SWIG_fail_ptr("FieldDescription_getCName",1,SWIGTYPE_p_osg__FieldDescription);
  }
  
  result = (osg::Char8 *)((osg::FieldDescription const *)arg1)->getCName();
  lua_pushstring(L,(const char*)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FieldDescription_getTypeId(lua_State* L) {
  int SWIG_arg = 0;
  osg::FieldDescription *arg1 = (osg::FieldDescription *) 0 ;
  osg::UInt32 result;
  
  SWIG_check_num_args("getTypeId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getTypeId",1,"osg::FieldDescription const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__FieldDescription,0))){
    SWIG_fail_ptr("FieldDescription_getTypeId",1,SWIGTYPE_p_osg__FieldDescription);
  }
  
  result = (osg::UInt32)((osg::FieldDescription const *)arg1)->getTypeId();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FieldDescription_getFieldMask(lua_State* L) {
  int SWIG_arg = 0;
  osg::FieldDescription *arg1 = (osg::FieldDescription *) 0 ;
  osg::BitVector result;
  
  SWIG_check_num_args("getFieldMask",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getFieldMask",1,"osg::FieldDescription const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__FieldDescription,0))){
    SWIG_fail_ptr("FieldDescription_getFieldMask",1,SWIGTYPE_p_osg__FieldDescription);
  }
  
  result = (osg::BitVector)((osg::FieldDescription const *)arg1)->getFieldMask();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FieldDescription_setFieldMask(lua_State* L) {
  int SWIG_arg = 0;
  osg::FieldDescription *arg1 = (osg::FieldDescription *) 0 ;
  osg::BitVector arg2 ;
  
  SWIG_check_num_args("setFieldMask",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setFieldMask",1,"osg::FieldDescription *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("setFieldMask",2,"osg::BitVector");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__FieldDescription,0))){
    SWIG_fail_ptr("FieldDescription_setFieldMask",1,SWIGTYPE_p_osg__FieldDescription);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (osg::BitVector)lua_tonumber(L, 2);
  (arg1)->setFieldMask(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FieldDescription_getFieldId(lua_State* L) {
  int SWIG_arg = 0;
  osg::FieldDescription *arg1 = (osg::FieldDescription *) 0 ;
  osg::UInt32 result;
  
  SWIG_check_num_args("getFieldId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getFieldId",1,"osg::FieldDescription const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__FieldDescription,0))){
    SWIG_fail_ptr("FieldDescription_getFieldId",1,SWIGTYPE_p_osg__FieldDescription);
  }
  
  result = (osg::UInt32)((osg::FieldDescription const *)arg1)->getFieldId();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FieldDescription_setFieldId(lua_State* L) {
  int SWIG_arg = 0;
  osg::FieldDescription *arg1 = (osg::FieldDescription *) 0 ;
  osg::UInt32 arg2 ;
  
  SWIG_check_num_args("setFieldId",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setFieldId",1,"osg::FieldDescription *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("setFieldId",2,"osg::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__FieldDescription,0))){
    SWIG_fail_ptr("FieldDescription_setFieldId",1,SWIGTYPE_p_osg__FieldDescription);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (osg::UInt32)lua_tonumber(L, 2);
  (arg1)->setFieldId(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FieldDescription_getDefaultValue(lua_State* L) {
  int SWIG_arg = 0;
  osg::FieldDescription *arg1 = (osg::FieldDescription *) 0 ;
  osg::Char8 *result = 0 ;
  
  SWIG_check_num_args("getDefaultValue",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getDefaultValue",1,"osg::FieldDescription const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__FieldDescription,0))){
    SWIG_fail_ptr("FieldDescription_getDefaultValue",1,SWIGTYPE_p_osg__FieldDescription);
  }
  
  result = (osg::Char8 *)((osg::FieldDescription const *)arg1)->getDefaultValue();
  lua_pushstring(L,(const char*)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FieldDescription_getFieldType(lua_State* L) {
  int SWIG_arg = 0;
  osg::FieldDescription *arg1 = (osg::FieldDescription *) 0 ;
  osg::TypeBase *result = 0 ;
  
  SWIG_check_num_args("getFieldType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getFieldType",1,"osg::FieldDescription const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__FieldDescription,0))){
    SWIG_fail_ptr("FieldDescription_getFieldType",1,SWIGTYPE_p_osg__FieldDescription);
  }
  
  result = (osg::TypeBase *) &((osg::FieldDescription const *)arg1)->getFieldType();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_osg__TypeBase,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FieldDescription_isInternal(lua_State* L) {
  int SWIG_arg = 0;
  osg::FieldDescription *arg1 = (osg::FieldDescription *) 0 ;
  bool result;
  
  SWIG_check_num_args("isInternal",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isInternal",1,"osg::FieldDescription const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__FieldDescription,0))){
    SWIG_fail_ptr("FieldDescription_isInternal",1,SWIGTYPE_p_osg__FieldDescription);
  }
  
  result = (bool)((osg::FieldDescription const *)arg1)->isInternal();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FieldDescription_isValid(lua_State* L) {
  int SWIG_arg = 0;
  osg::FieldDescription *arg1 = (osg::FieldDescription *) 0 ;
  bool result;
  
  SWIG_check_num_args("isValid",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isValid",1,"osg::FieldDescription const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__FieldDescription,0))){
    SWIG_fail_ptr("FieldDescription_isValid",1,SWIGTYPE_p_osg__FieldDescription);
  }
  
  result = (bool)((osg::FieldDescription const *)arg1)->isValid();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_FieldDescription(void *obj) {
osg::FieldDescription *arg1 = (osg::FieldDescription *) obj;
delete arg1;
}
static swig_lua_method swig_osg_FieldDescription_methods[] = {
    {"getCName", _wrap_FieldDescription_getCName}, 
    {"getTypeId", _wrap_FieldDescription_getTypeId}, 
    {"getFieldMask", _wrap_FieldDescription_getFieldMask}, 
    {"setFieldMask", _wrap_FieldDescription_setFieldMask}, 
    {"getFieldId", _wrap_FieldDescription_getFieldId}, 
    {"setFieldId", _wrap_FieldDescription_setFieldId}, 
    {"getDefaultValue", _wrap_FieldDescription_getDefaultValue}, 
    {"getFieldType", _wrap_FieldDescription_getFieldType}, 
    {"isInternal", _wrap_FieldDescription_isInternal}, 
    {"isValid", _wrap_FieldDescription_isValid}, 
    {0,0}
};
static swig_lua_attribute swig_osg_FieldDescription_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_osg_FieldDescription_bases[] = {0};
static const char *swig_osg_FieldDescription_base_names[] = {0};
static swig_lua_class _wrap_class_osg_FieldDescription = { "FieldDescription", &SWIGTYPE_p_osg__FieldDescription,_wrap_new_FieldDescription, swig_delete_FieldDescription, swig_osg_FieldDescription_methods, swig_osg_FieldDescription_attributes, swig_osg_FieldDescription_bases, swig_osg_FieldDescription_base_names };

static int _wrap_FieldContainer_getType__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  osg::FieldContainer *arg1 = (osg::FieldContainer *) 0 ;
  osg::FieldContainerType *result = 0 ;
  
  SWIG_check_num_args("getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getType",1,"osg::FieldContainer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__FieldContainer,0))){
    SWIG_fail_ptr("FieldContainer_getType",1,SWIGTYPE_p_osg__FieldContainer);
  }
  
  result = (osg::FieldContainerType *) &(arg1)->getType();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_osg__FieldContainerType,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FieldContainer_getType__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  osg::FieldContainer *arg1 = (osg::FieldContainer *) 0 ;
  osg::FieldContainerType *result = 0 ;
  
  SWIG_check_num_args("getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getType",1,"osg::FieldContainer const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__FieldContainer,0))){
    SWIG_fail_ptr("FieldContainer_getType",1,SWIGTYPE_p_osg__FieldContainer);
  }
  
  result = (osg::FieldContainerType *) &((osg::FieldContainer const *)arg1)->getType();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_osg__FieldContainerType,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FieldContainer_getType(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_osg__FieldContainer, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_FieldContainer_getType__SWIG_0(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_osg__FieldContainer, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_FieldContainer_getType__SWIG_1(L);
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'FieldContainer_getType'\n"
    "  Possible C/C++ prototypes are:\n"
    "    getType(osg::FieldContainer *)\n"
    "    getType(osg::FieldContainer const *)\n");
  lua_error(L);return 0;
}


static int _wrap_FieldContainer_getTypeId(lua_State* L) {
  int SWIG_arg = 0;
  osg::FieldContainer *arg1 = (osg::FieldContainer *) 0 ;
  osg::UInt32 result;
  
  SWIG_check_num_args("getTypeId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getTypeId",1,"osg::FieldContainer const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__FieldContainer,0))){
    SWIG_fail_ptr("FieldContainer_getTypeId",1,SWIGTYPE_p_osg__FieldContainer);
  }
  
  result = (osg::UInt32)((osg::FieldContainer const *)arg1)->getTypeId();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FieldContainer_getGroupId(lua_State* L) {
  int SWIG_arg = 0;
  osg::FieldContainer *arg1 = (osg::FieldContainer *) 0 ;
  osg::UInt16 result;
  
  SWIG_check_num_args("getGroupId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getGroupId",1,"osg::FieldContainer const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__FieldContainer,0))){
    SWIG_fail_ptr("FieldContainer_getGroupId",1,SWIGTYPE_p_osg__FieldContainer);
  }
  
  result = ((osg::FieldContainer const *)arg1)->getGroupId();
  {
    osg::UInt16 * resultptr = new osg::UInt16((const osg::UInt16 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint16_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FieldContainer_getTypeName(lua_State* L) {
  int SWIG_arg = 0;
  osg::FieldContainer *arg1 = (osg::FieldContainer *) 0 ;
  osg::Char8 *result = 0 ;
  
  SWIG_check_num_args("getTypeName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getTypeName",1,"osg::FieldContainer const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__FieldContainer,0))){
    SWIG_fail_ptr("FieldContainer_getTypeName",1,SWIGTYPE_p_osg__FieldContainer);
  }
  
  result = (osg::Char8 *)((osg::FieldContainer const *)arg1)->getTypeName();
  lua_pushstring(L,(const char*)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FieldContainer_getContainerSize(lua_State* L) {
  int SWIG_arg = 0;
  osg::FieldContainer *arg1 = (osg::FieldContainer *) 0 ;
  osg::UInt32 result;
  
  SWIG_check_num_args("getContainerSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getContainerSize",1,"osg::FieldContainer const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__FieldContainer,0))){
    SWIG_fail_ptr("FieldContainer_getContainerSize",1,SWIGTYPE_p_osg__FieldContainer);
  }
  
  result = (osg::UInt32)((osg::FieldContainer const *)arg1)->getContainerSize();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FieldContainer_getField__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  osg::FieldContainer *arg1 = (osg::FieldContainer *) 0 ;
  osg::UInt32 arg2 ;
  osg::Field *result = 0 ;
  
  SWIG_check_num_args("getField",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getField",1,"osg::FieldContainer *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getField",2,"osg::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__FieldContainer,0))){
    SWIG_fail_ptr("FieldContainer_getField",1,SWIGTYPE_p_osg__FieldContainer);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (osg::UInt32)lua_tonumber(L, 2);
  result = (osg::Field *)(arg1)->getField(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_osg__Field,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FieldContainer_getField__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  osg::FieldContainer *arg1 = (osg::FieldContainer *) 0 ;
  osg::Char8 *arg2 = (osg::Char8 *) 0 ;
  osg::Field *result = 0 ;
  
  SWIG_check_num_args("getField",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getField",1,"osg::FieldContainer *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("getField",2,"osg::Char8 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__FieldContainer,0))){
    SWIG_fail_ptr("FieldContainer_getField",1,SWIGTYPE_p_osg__FieldContainer);
  }
  
  arg2 = (osg::Char8 *)lua_tostring(L, 2);
  result = (osg::Field *)(arg1)->getField((osg::Char8 const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_osg__Field,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FieldContainer_getField(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_osg__FieldContainer, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_FieldContainer_getField__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_osg__FieldContainer, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_FieldContainer_getField__SWIG_1(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'FieldContainer_getField'\n"
    "  Possible C/C++ prototypes are:\n"
    "    getField(osg::FieldContainer *,osg::UInt32)\n"
    "    getField(osg::FieldContainer *,osg::Char8 const *)\n");
  lua_error(L);return 0;
}


static int _wrap_FieldContainer_shallowCopy(lua_State* L) {
  int SWIG_arg = 0;
  osg::FieldContainer *arg1 = (osg::FieldContainer *) 0 ;
  osg::FieldContainerPtr result;
  
  SWIG_check_num_args("shallowCopy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("shallowCopy",1,"osg::FieldContainer const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__FieldContainer,0))){
    SWIG_fail_ptr("FieldContainer_shallowCopy",1,SWIGTYPE_p_osg__FieldContainer);
  }
  
  result = ((osg::FieldContainer const *)arg1)->shallowCopy();
  {
    osg::FieldContainerPtr * resultptr = new osg::FieldContainerPtr((const osg::FieldContainerPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_osg__FieldContainerPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static swig_lua_method swig_osg_FieldContainer_methods[] = {
    {"getType", _wrap_FieldContainer_getType}, 
    {"getTypeId", _wrap_FieldContainer_getTypeId}, 
    {"getGroupId", _wrap_FieldContainer_getGroupId}, 
    {"getTypeName", _wrap_FieldContainer_getTypeName}, 
    {"getContainerSize", _wrap_FieldContainer_getContainerSize}, 
    {"getField", _wrap_FieldContainer_getField}, 
    {"shallowCopy", _wrap_FieldContainer_shallowCopy}, 
    {0,0}
};
static swig_lua_attribute swig_osg_FieldContainer_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_osg_FieldContainer_bases[] = {0};
static const char *swig_osg_FieldContainer_base_names[] = {0};
static swig_lua_class _wrap_class_osg_FieldContainer = { "FieldContainer", &SWIGTYPE_p_osg__FieldContainer,0,0, swig_osg_FieldContainer_methods, swig_osg_FieldContainer_attributes, swig_osg_FieldContainer_bases, swig_osg_FieldContainer_base_names };

static int _wrap_new_FieldContainerPtr__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  osg::FieldContainerPtr *result = 0 ;
  
  SWIG_check_num_args("osg::FieldContainerPtr",0,0)
  result = (osg::FieldContainerPtr *)new osg::FieldContainerPtr();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_osg__FieldContainerPtr,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FieldContainerPtr__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  osg::FieldContainerPtr *arg1 = 0 ;
  osg::FieldContainerPtr *result = 0 ;
  
  SWIG_check_num_args("osg::FieldContainerPtr",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("osg::FieldContainerPtr",1,"osg::FieldContainerPtr const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__FieldContainerPtr,0))){
    SWIG_fail_ptr("new_FieldContainerPtr",1,SWIGTYPE_p_osg__FieldContainerPtr);
  }
  
  result = (osg::FieldContainerPtr *)new osg::FieldContainerPtr((osg::FieldContainerPtr const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_osg__FieldContainerPtr,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FieldContainerPtr(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_FieldContainerPtr__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_osg__FieldContainerPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_FieldContainerPtr__SWIG_1(L);
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_FieldContainerPtr'\n"
    "  Possible C/C++ prototypes are:\n"
    "    osg::FieldContainerPtr()\n"
    "    osg::FieldContainerPtr(osg::FieldContainerPtr const &)\n");
  lua_error(L);return 0;
}


static int _wrap_FieldContainerPtr___deref__(lua_State* L) {
  int SWIG_arg = 0;
  osg::FieldContainerPtr *arg1 = (osg::FieldContainerPtr *) 0 ;
  osg::FieldContainer *result = 0 ;
  
  SWIG_check_num_args("operator ->",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("operator ->",1,"osg::FieldContainerPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__FieldContainerPtr,0))){
    SWIG_fail_ptr("FieldContainerPtr___deref__",1,SWIGTYPE_p_osg__FieldContainerPtr);
  }
  
  result = (osg::FieldContainer *)(arg1)->operator ->();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_osg__FieldContainer,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FieldContainerPtr_getType__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  osg::FieldContainerPtr *arg1 = (osg::FieldContainerPtr *) 0 ;
  osg::FieldContainerType *result = 0 ;
  
  SWIG_check_num_args("getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getType",1,"osg::FieldContainerPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__FieldContainerPtr,0))){
    SWIG_fail_ptr("FieldContainerPtr_getType",1,SWIGTYPE_p_osg__FieldContainerPtr);
  }
  
  result = (osg::FieldContainerType *) &(*arg1)->getType();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_osg__FieldContainerType,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FieldContainerPtr_getType__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  osg::FieldContainerPtr *arg1 = (osg::FieldContainerPtr *) 0 ;
  osg::FieldContainerType *result = 0 ;
  
  SWIG_check_num_args("getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getType",1,"osg::FieldContainerPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__FieldContainerPtr,0))){
    SWIG_fail_ptr("FieldContainerPtr_getType",1,SWIGTYPE_p_osg__FieldContainerPtr);
  }
  
  result = (osg::FieldContainerType *) &(*arg1)->getType();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_osg__FieldContainerType,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FieldContainerPtr_getType(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_osg__FieldContainerPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_FieldContainerPtr_getType__SWIG_0(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_osg__FieldContainerPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_FieldContainerPtr_getType__SWIG_1(L);
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'FieldContainerPtr_getType'\n"
    "  Possible C/C++ prototypes are:\n"
    "    getType(osg::FieldContainerPtr *)\n"
    "    getType(osg::FieldContainerPtr const *)\n");
  lua_error(L);return 0;
}


static int _wrap_FieldContainerPtr_getTypeId(lua_State* L) {
  int SWIG_arg = 0;
  osg::FieldContainerPtr *arg1 = (osg::FieldContainerPtr *) 0 ;
  osg::UInt32 result;
  
  SWIG_check_num_args("getTypeId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getTypeId",1,"osg::FieldContainerPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__FieldContainerPtr,0))){
    SWIG_fail_ptr("FieldContainerPtr_getTypeId",1,SWIGTYPE_p_osg__FieldContainerPtr);
  }
  
  result = (osg::UInt32)(*arg1)->getTypeId();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FieldContainerPtr_getGroupId(lua_State* L) {
  int SWIG_arg = 0;
  osg::FieldContainerPtr *arg1 = (osg::FieldContainerPtr *) 0 ;
  osg::UInt16 result;
  
  SWIG_check_num_args("getGroupId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getGroupId",1,"osg::FieldContainerPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__FieldContainerPtr,0))){
    SWIG_fail_ptr("FieldContainerPtr_getGroupId",1,SWIGTYPE_p_osg__FieldContainerPtr);
  }
  
  result = (*arg1)->getGroupId();
  {
    osg::UInt16 * resultptr = new osg::UInt16((const osg::UInt16 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint16_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FieldContainerPtr_getTypeName(lua_State* L) {
  int SWIG_arg = 0;
  osg::FieldContainerPtr *arg1 = (osg::FieldContainerPtr *) 0 ;
  osg::Char8 *result = 0 ;
  
  SWIG_check_num_args("getTypeName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getTypeName",1,"osg::FieldContainerPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__FieldContainerPtr,0))){
    SWIG_fail_ptr("FieldContainerPtr_getTypeName",1,SWIGTYPE_p_osg__FieldContainerPtr);
  }
  
  result = (osg::Char8 *)(*arg1)->getTypeName();
  lua_pushstring(L,(const char*)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FieldContainerPtr_getContainerSize(lua_State* L) {
  int SWIG_arg = 0;
  osg::FieldContainerPtr *arg1 = (osg::FieldContainerPtr *) 0 ;
  osg::UInt32 result;
  
  SWIG_check_num_args("getContainerSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getContainerSize",1,"osg::FieldContainerPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__FieldContainerPtr,0))){
    SWIG_fail_ptr("FieldContainerPtr_getContainerSize",1,SWIGTYPE_p_osg__FieldContainerPtr);
  }
  
  result = (osg::UInt32)(*arg1)->getContainerSize();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FieldContainerPtr_getField__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  osg::FieldContainerPtr *arg1 = (osg::FieldContainerPtr *) 0 ;
  osg::UInt32 arg2 ;
  osg::Field *result = 0 ;
  
  SWIG_check_num_args("getField",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getField",1,"osg::FieldContainerPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getField",2,"osg::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__FieldContainerPtr,0))){
    SWIG_fail_ptr("FieldContainerPtr_getField",1,SWIGTYPE_p_osg__FieldContainerPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (osg::UInt32)lua_tonumber(L, 2);
  result = (osg::Field *)(*arg1)->getField(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_osg__Field,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FieldContainerPtr_getField__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  osg::FieldContainerPtr *arg1 = (osg::FieldContainerPtr *) 0 ;
  osg::Char8 *arg2 = (osg::Char8 *) 0 ;
  osg::Field *result = 0 ;
  
  SWIG_check_num_args("getField",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getField",1,"osg::FieldContainerPtr *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("getField",2,"osg::Char8 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__FieldContainerPtr,0))){
    SWIG_fail_ptr("FieldContainerPtr_getField",1,SWIGTYPE_p_osg__FieldContainerPtr);
  }
  
  arg2 = (osg::Char8 *)lua_tostring(L, 2);
  result = (osg::Field *)(*arg1)->getField((osg::Char8 const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_osg__Field,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FieldContainerPtr_getField(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_osg__FieldContainerPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_FieldContainerPtr_getField__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_osg__FieldContainerPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_FieldContainerPtr_getField__SWIG_1(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'FieldContainerPtr_getField'\n"
    "  Possible C/C++ prototypes are:\n"
    "    getField(osg::FieldContainerPtr *,osg::UInt32)\n"
    "    getField(osg::FieldContainerPtr *,osg::Char8 const *)\n");
  lua_error(L);return 0;
}


static int _wrap_FieldContainerPtr_shallowCopy(lua_State* L) {
  int SWIG_arg = 0;
  osg::FieldContainerPtr *arg1 = (osg::FieldContainerPtr *) 0 ;
  osg::FieldContainerPtr result;
  
  SWIG_check_num_args("shallowCopy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("shallowCopy",1,"osg::FieldContainerPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__FieldContainerPtr,0))){
    SWIG_fail_ptr("FieldContainerPtr_shallowCopy",1,SWIGTYPE_p_osg__FieldContainerPtr);
  }
  
  result = (*arg1)->shallowCopy();
  {
    osg::FieldContainerPtr * resultptr = new osg::FieldContainerPtr((const osg::FieldContainerPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_osg__FieldContainerPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_FieldContainerPtr(void *obj) {
osg::FieldContainerPtr *arg1 = (osg::FieldContainerPtr *) obj;
delete arg1;
}
static swig_lua_method swig_osg_FieldContainerPtr_methods[] = {
    {"__deref__", _wrap_FieldContainerPtr___deref__}, 
    {"getType", _wrap_FieldContainerPtr_getType}, 
    {"getTypeId", _wrap_FieldContainerPtr_getTypeId}, 
    {"getGroupId", _wrap_FieldContainerPtr_getGroupId}, 
    {"getTypeName", _wrap_FieldContainerPtr_getTypeName}, 
    {"getContainerSize", _wrap_FieldContainerPtr_getContainerSize}, 
    {"getField", _wrap_FieldContainerPtr_getField}, 
    {"shallowCopy", _wrap_FieldContainerPtr_shallowCopy}, 
    {0,0}
};
static swig_lua_attribute swig_osg_FieldContainerPtr_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_osg_FieldContainerPtr_bases[] = {0};
static const char *swig_osg_FieldContainerPtr_base_names[] = {0};
static swig_lua_class _wrap_class_osg_FieldContainerPtr = { "FieldContainerPtr", &SWIGTYPE_p_osg__FieldContainerPtr,_wrap_new_FieldContainerPtr, swig_delete_FieldContainerPtr, swig_osg_FieldContainerPtr_methods, swig_osg_FieldContainerPtr_attributes, swig_osg_FieldContainerPtr_bases, swig_osg_FieldContainerPtr_base_names };

static int _wrap_new_FieldContainerType(lua_State* L) {
  int SWIG_arg = 0;
  osg::FieldContainerType *arg1 = 0 ;
  osg::FieldContainerType *result = 0 ;
  
  SWIG_check_num_args("osg::FieldContainerType",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("osg::FieldContainerType",1,"osg::FieldContainerType const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__FieldContainerType,0))){
    SWIG_fail_ptr("new_FieldContainerType",1,SWIGTYPE_p_osg__FieldContainerType);
  }
  
  result = (osg::FieldContainerType *)new osg::FieldContainerType((osg::FieldContainerType const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_osg__FieldContainerType,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FieldContainerType_getGroupId(lua_State* L) {
  int SWIG_arg = 0;
  osg::FieldContainerType *arg1 = (osg::FieldContainerType *) 0 ;
  osg::UInt16 result;
  
  SWIG_check_num_args("getGroupId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getGroupId",1,"osg::FieldContainerType const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__FieldContainerType,0))){
    SWIG_fail_ptr("FieldContainerType_getGroupId",1,SWIGTYPE_p_osg__FieldContainerType);
  }
  
  result = ((osg::FieldContainerType const *)arg1)->getGroupId();
  {
    osg::UInt16 * resultptr = new osg::UInt16((const osg::UInt16 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint16_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FieldContainerType_getParent(lua_State* L) {
  int SWIG_arg = 0;
  osg::FieldContainerType *arg1 = (osg::FieldContainerType *) 0 ;
  osg::FieldContainerType *result = 0 ;
  
  SWIG_check_num_args("getParent",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getParent",1,"osg::FieldContainerType const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__FieldContainerType,0))){
    SWIG_fail_ptr("FieldContainerType_getParent",1,SWIGTYPE_p_osg__FieldContainerType);
  }
  
  result = (osg::FieldContainerType *)((osg::FieldContainerType const *)arg1)->getParent();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_osg__FieldContainerType,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FieldContainerType_getFieldDescription(lua_State* L) {
  int SWIG_arg = 0;
  osg::FieldContainerType *arg1 = (osg::FieldContainerType *) 0 ;
  osg::UInt32 arg2 ;
  osg::FieldDescription *result = 0 ;
  
  SWIG_check_num_args("getFieldDescription",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getFieldDescription",1,"osg::FieldContainerType *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getFieldDescription",2,"osg::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__FieldContainerType,0))){
    SWIG_fail_ptr("FieldContainerType_getFieldDescription",1,SWIGTYPE_p_osg__FieldContainerType);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (osg::UInt32)lua_tonumber(L, 2);
  result = (osg::FieldDescription *)(arg1)->getFieldDescription(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_osg__FieldDescription,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FieldContainerType_findFieldDescription__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  osg::FieldContainerType *arg1 = (osg::FieldContainerType *) 0 ;
  osg::Char8 *arg2 = (osg::Char8 *) 0 ;
  osg::FieldDescription *result = 0 ;
  
  SWIG_check_num_args("findFieldDescription",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("findFieldDescription",1,"osg::FieldContainerType *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("findFieldDescription",2,"osg::Char8 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__FieldContainerType,0))){
    SWIG_fail_ptr("FieldContainerType_findFieldDescription",1,SWIGTYPE_p_osg__FieldContainerType);
  }
  
  arg2 = (osg::Char8 *)lua_tostring(L, 2);
  result = (osg::FieldDescription *)(arg1)->findFieldDescription((osg::Char8 const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_osg__FieldDescription,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FieldContainerType_findFieldDescription__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  osg::FieldContainerType *arg1 = (osg::FieldContainerType *) 0 ;
  osg::Char8 *arg2 = (osg::Char8 *) 0 ;
  osg::FieldDescription *result = 0 ;
  
  SWIG_check_num_args("findFieldDescription",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("findFieldDescription",1,"osg::FieldContainerType const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("findFieldDescription",2,"osg::Char8 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__FieldContainerType,0))){
    SWIG_fail_ptr("FieldContainerType_findFieldDescription",1,SWIGTYPE_p_osg__FieldContainerType);
  }
  
  arg2 = (osg::Char8 *)lua_tostring(L, 2);
  result = (osg::FieldDescription *)((osg::FieldContainerType const *)arg1)->findFieldDescription((osg::Char8 const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_osg__FieldDescription,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FieldContainerType_findFieldDescription(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_osg__FieldContainerType, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_FieldContainerType_findFieldDescription__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_osg__FieldContainerType, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_FieldContainerType_findFieldDescription__SWIG_1(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'FieldContainerType_findFieldDescription'\n"
    "  Possible C/C++ prototypes are:\n"
    "    findFieldDescription(osg::FieldContainerType *,osg::Char8 const *)\n"
    "    findFieldDescription(osg::FieldContainerType const *,osg::Char8 const *)\n");
  lua_error(L);return 0;
}


static int _wrap_FieldContainerType_getNumFieldDescs(lua_State* L) {
  int SWIG_arg = 0;
  osg::FieldContainerType *arg1 = (osg::FieldContainerType *) 0 ;
  osg::UInt32 result;
  
  SWIG_check_num_args("getNumFieldDescs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getNumFieldDescs",1,"osg::FieldContainerType const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__FieldContainerType,0))){
    SWIG_fail_ptr("FieldContainerType_getNumFieldDescs",1,SWIGTYPE_p_osg__FieldContainerType);
  }
  
  result = (osg::UInt32)((osg::FieldContainerType const *)arg1)->getNumFieldDescs();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FieldContainerType_addDescription(lua_State* L) {
  int SWIG_arg = 0;
  osg::FieldContainerType *arg1 = (osg::FieldContainerType *) 0 ;
  osg::FieldDescription *arg2 = 0 ;
  osg::UInt32 result;
  
  SWIG_check_num_args("addDescription",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("addDescription",1,"osg::FieldContainerType *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("addDescription",2,"osg::FieldDescription const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__FieldContainerType,0))){
    SWIG_fail_ptr("FieldContainerType_addDescription",1,SWIGTYPE_p_osg__FieldContainerType);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__FieldDescription,0))){
    SWIG_fail_ptr("FieldContainerType_addDescription",2,SWIGTYPE_p_osg__FieldDescription);
  }
  
  result = (osg::UInt32)(arg1)->addDescription((osg::FieldDescription const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FieldContainerType_subDescription(lua_State* L) {
  int SWIG_arg = 0;
  osg::FieldContainerType *arg1 = (osg::FieldContainerType *) 0 ;
  osg::UInt32 arg2 ;
  bool result;
  
  SWIG_check_num_args("subDescription",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("subDescription",1,"osg::FieldContainerType *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("subDescription",2,"osg::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__FieldContainerType,0))){
    SWIG_fail_ptr("FieldContainerType_subDescription",1,SWIGTYPE_p_osg__FieldContainerType);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (osg::UInt32)lua_tonumber(L, 2);
  result = (bool)(arg1)->subDescription(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FieldContainerType_getPrototype(lua_State* L) {
  int SWIG_arg = 0;
  osg::FieldContainerType *arg1 = (osg::FieldContainerType *) 0 ;
  osg::FieldContainerPtr result;
  
  SWIG_check_num_args("getPrototype",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getPrototype",1,"osg::FieldContainerType const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__FieldContainerType,0))){
    SWIG_fail_ptr("FieldContainerType_getPrototype",1,SWIGTYPE_p_osg__FieldContainerType);
  }
  
  result = ((osg::FieldContainerType const *)arg1)->getPrototype();
  {
    osg::FieldContainerPtr * resultptr = new osg::FieldContainerPtr((const osg::FieldContainerPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_osg__FieldContainerPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FieldContainerType_setPrototype(lua_State* L) {
  int SWIG_arg = 0;
  osg::FieldContainerType *arg1 = (osg::FieldContainerType *) 0 ;
  osg::FieldContainerPtr arg2 ;
  osg::FieldContainerPtr *argp2 ;
  bool result;
  
  SWIG_check_num_args("setPrototype",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setPrototype",1,"osg::FieldContainerType *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setPrototype",2,"osg::FieldContainerPtr");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__FieldContainerType,0))){
    SWIG_fail_ptr("FieldContainerType_setPrototype",1,SWIGTYPE_p_osg__FieldContainerType);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_osg__FieldContainerPtr,0))){
    SWIG_fail_ptr("FieldContainerType_setPrototype",2,SWIGTYPE_p_osg__FieldContainerPtr);
  }
  arg2 = *argp2;
  
  result = (bool)(arg1)->setPrototype(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FieldContainerType_isInitialized(lua_State* L) {
  int SWIG_arg = 0;
  osg::FieldContainerType *arg1 = (osg::FieldContainerType *) 0 ;
  bool result;
  
  SWIG_check_num_args("isInitialized",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isInitialized",1,"osg::FieldContainerType const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__FieldContainerType,0))){
    SWIG_fail_ptr("FieldContainerType_isInitialized",1,SWIGTYPE_p_osg__FieldContainerType);
  }
  
  result = (bool)((osg::FieldContainerType const *)arg1)->isInitialized();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FieldContainerType_isAbstract(lua_State* L) {
  int SWIG_arg = 0;
  osg::FieldContainerType *arg1 = (osg::FieldContainerType *) 0 ;
  bool result;
  
  SWIG_check_num_args("isAbstract",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isAbstract",1,"osg::FieldContainerType const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__FieldContainerType,0))){
    SWIG_fail_ptr("FieldContainerType_isAbstract",1,SWIGTYPE_p_osg__FieldContainerType);
  }
  
  result = (bool)((osg::FieldContainerType const *)arg1)->isAbstract();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FieldContainerType_isDerivedFrom__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  osg::FieldContainerType *arg1 = (osg::FieldContainerType *) 0 ;
  osg::TypeBase *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("isDerivedFrom",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isDerivedFrom",1,"osg::FieldContainerType const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("isDerivedFrom",2,"osg::TypeBase const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__FieldContainerType,0))){
    SWIG_fail_ptr("FieldContainerType_isDerivedFrom",1,SWIGTYPE_p_osg__FieldContainerType);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__TypeBase,0))){
    SWIG_fail_ptr("FieldContainerType_isDerivedFrom",2,SWIGTYPE_p_osg__TypeBase);
  }
  
  result = (bool)((osg::FieldContainerType const *)arg1)->isDerivedFrom((osg::TypeBase const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FieldContainerType_isDerivedFrom__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  osg::FieldContainerType *arg1 = (osg::FieldContainerType *) 0 ;
  osg::FieldContainerType *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("isDerivedFrom",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isDerivedFrom",1,"osg::FieldContainerType const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("isDerivedFrom",2,"osg::FieldContainerType const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__FieldContainerType,0))){
    SWIG_fail_ptr("FieldContainerType_isDerivedFrom",1,SWIGTYPE_p_osg__FieldContainerType);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_osg__FieldContainerType,0))){
    SWIG_fail_ptr("FieldContainerType_isDerivedFrom",2,SWIGTYPE_p_osg__FieldContainerType);
  }
  
  result = (bool)((osg::FieldContainerType const *)arg1)->isDerivedFrom((osg::FieldContainerType const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FieldContainerType_isDerivedFrom(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_osg__FieldContainerType, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_osg__FieldContainerType, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FieldContainerType_isDerivedFrom__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_osg__FieldContainerType, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_osg__TypeBase, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FieldContainerType_isDerivedFrom__SWIG_0(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'FieldContainerType_isDerivedFrom'\n"
    "  Possible C/C++ prototypes are:\n"
    "    isDerivedFrom(osg::FieldContainerType const *,osg::TypeBase const &)\n"
    "    isDerivedFrom(osg::FieldContainerType const *,osg::FieldContainerType const &)\n");
  lua_error(L);return 0;
}


static int _wrap_FieldContainerType_isNode(lua_State* L) {
  int SWIG_arg = 0;
  osg::FieldContainerType *arg1 = (osg::FieldContainerType *) 0 ;
  bool result;
  
  SWIG_check_num_args("isNode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isNode",1,"osg::FieldContainerType const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__FieldContainerType,0))){
    SWIG_fail_ptr("FieldContainerType_isNode",1,SWIGTYPE_p_osg__FieldContainerType);
  }
  
  result = (bool)((osg::FieldContainerType const *)arg1)->isNode();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FieldContainerType_isNodeCore(lua_State* L) {
  int SWIG_arg = 0;
  osg::FieldContainerType *arg1 = (osg::FieldContainerType *) 0 ;
  bool result;
  
  SWIG_check_num_args("isNodeCore",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isNodeCore",1,"osg::FieldContainerType const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__FieldContainerType,0))){
    SWIG_fail_ptr("FieldContainerType_isNodeCore",1,SWIGTYPE_p_osg__FieldContainerType);
  }
  
  result = (bool)((osg::FieldContainerType const *)arg1)->isNodeCore();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FieldContainerType_isAttachment(lua_State* L) {
  int SWIG_arg = 0;
  osg::FieldContainerType *arg1 = (osg::FieldContainerType *) 0 ;
  bool result;
  
  SWIG_check_num_args("isAttachment",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isAttachment",1,"osg::FieldContainerType const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__FieldContainerType,0))){
    SWIG_fail_ptr("FieldContainerType_isAttachment",1,SWIGTYPE_p_osg__FieldContainerType);
  }
  
  result = (bool)((osg::FieldContainerType const *)arg1)->isAttachment();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FieldContainerType_createFieldContainer(lua_State* L) {
  int SWIG_arg = 0;
  osg::FieldContainerType *arg1 = (osg::FieldContainerType *) 0 ;
  osg::FieldContainerPtr result;
  
  SWIG_check_num_args("createFieldContainer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("createFieldContainer",1,"osg::FieldContainerType const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__FieldContainerType,0))){
    SWIG_fail_ptr("FieldContainerType_createFieldContainer",1,SWIGTYPE_p_osg__FieldContainerType);
  }
  
  result = ((osg::FieldContainerType const *)arg1)->createFieldContainer();
  {
    osg::FieldContainerPtr * resultptr = new osg::FieldContainerPtr((const osg::FieldContainerPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_osg__FieldContainerPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FieldContainerType_dump__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  osg::FieldContainerType *arg1 = (osg::FieldContainerType *) 0 ;
  osg::UInt32 arg2 ;
  osg::BitVector arg3 ;
  
  SWIG_check_num_args("dump",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dump",1,"osg::FieldContainerType const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("dump",2,"osg::UInt32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("dump",3,"osg::BitVector const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__FieldContainerType,0))){
    SWIG_fail_ptr("FieldContainerType_dump",1,SWIGTYPE_p_osg__FieldContainerType);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (osg::UInt32)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (osg::BitVector const)lua_tonumber(L, 3);
  ((osg::FieldContainerType const *)arg1)->dump(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FieldContainerType_dump__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  osg::FieldContainerType *arg1 = (osg::FieldContainerType *) 0 ;
  osg::UInt32 arg2 ;
  
  SWIG_check_num_args("dump",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dump",1,"osg::FieldContainerType const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("dump",2,"osg::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__FieldContainerType,0))){
    SWIG_fail_ptr("FieldContainerType_dump",1,SWIGTYPE_p_osg__FieldContainerType);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (osg::UInt32)lua_tonumber(L, 2);
  ((osg::FieldContainerType const *)arg1)->dump(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FieldContainerType_dump__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  osg::FieldContainerType *arg1 = (osg::FieldContainerType *) 0 ;
  
  SWIG_check_num_args("dump",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dump",1,"osg::FieldContainerType const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__FieldContainerType,0))){
    SWIG_fail_ptr("FieldContainerType_dump",1,SWIGTYPE_p_osg__FieldContainerType);
  }
  
  ((osg::FieldContainerType const *)arg1)->dump();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FieldContainerType_dump(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_osg__FieldContainerType, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_FieldContainerType_dump__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_osg__FieldContainerType, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_FieldContainerType_dump__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_osg__FieldContainerType, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_FieldContainerType_dump__SWIG_0(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'FieldContainerType_dump'\n"
    "  Possible C/C++ prototypes are:\n"
    "    dump(osg::FieldContainerType const *,osg::UInt32,osg::BitVector const)\n"
    "    dump(osg::FieldContainerType const *,osg::UInt32)\n"
    "    dump(osg::FieldContainerType const *)\n");
  lua_error(L);return 0;
}


static void swig_delete_FieldContainerType(void *obj) {
osg::FieldContainerType *arg1 = (osg::FieldContainerType *) obj;
delete arg1;
}
static swig_lua_method swig_osg_FieldContainerType_methods[] = {
    {"getGroupId", _wrap_FieldContainerType_getGroupId}, 
    {"getParent", _wrap_FieldContainerType_getParent}, 
    {"getFieldDescription", _wrap_FieldContainerType_getFieldDescription}, 
    {"findFieldDescription", _wrap_FieldContainerType_findFieldDescription}, 
    {"getNumFieldDescs", _wrap_FieldContainerType_getNumFieldDescs}, 
    {"addDescription", _wrap_FieldContainerType_addDescription}, 
    {"subDescription", _wrap_FieldContainerType_subDescription}, 
    {"getPrototype", _wrap_FieldContainerType_getPrototype}, 
    {"setPrototype", _wrap_FieldContainerType_setPrototype}, 
    {"isInitialized", _wrap_FieldContainerType_isInitialized}, 
    {"isAbstract", _wrap_FieldContainerType_isAbstract}, 
    {"isDerivedFrom", _wrap_FieldContainerType_isDerivedFrom}, 
    {"isNode", _wrap_FieldContainerType_isNode}, 
    {"isNodeCore", _wrap_FieldContainerType_isNodeCore}, 
    {"isAttachment", _wrap_FieldContainerType_isAttachment}, 
    {"createFieldContainer", _wrap_FieldContainerType_createFieldContainer}, 
    {"dump", _wrap_FieldContainerType_dump}, 
    {0,0}
};
static swig_lua_attribute swig_osg_FieldContainerType_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_osg_FieldContainerType_bases[] = {0,0};
static const char *swig_osg_FieldContainerType_base_names[] = {"osg::DataType *",0};
static swig_lua_class _wrap_class_osg_FieldContainerType = { "FieldContainerType", &SWIGTYPE_p_osg__FieldContainerType,_wrap_new_FieldContainerType, swig_delete_FieldContainerType, swig_osg_FieldContainerType_methods, swig_osg_FieldContainerType_attributes, swig_osg_FieldContainerType_bases, swig_osg_FieldContainerType_base_names };

static int _wrap_FieldContainerFactory_the(lua_State* L) {
  int SWIG_arg = 0;
  osg::FieldContainerFactory *result = 0 ;
  
  SWIG_check_num_args("osg::FieldContainerFactory::the",0,0)
  result = (osg::FieldContainerFactory *)osg::FieldContainerFactory::the();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_osg__FieldContainerFactory,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FieldContainerFactory_findType__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  osg::FieldContainerFactory *arg1 = (osg::FieldContainerFactory *) 0 ;
  osg::UInt32 arg2 ;
  osg::FieldContainerType *result = 0 ;
  
  SWIG_check_num_args("findType",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("findType",1,"osg::FieldContainerFactory const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("findType",2,"osg::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__FieldContainerFactory,0))){
    SWIG_fail_ptr("FieldContainerFactory_findType",1,SWIGTYPE_p_osg__FieldContainerFactory);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (osg::UInt32)lua_tonumber(L, 2);
  result = (osg::FieldContainerType *)((osg::FieldContainerFactory const *)arg1)->findType(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_osg__FieldContainerType,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FieldContainerFactory_findType__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  osg::FieldContainerFactory *arg1 = (osg::FieldContainerFactory *) 0 ;
  osg::Char8 *arg2 = (osg::Char8 *) 0 ;
  osg::FieldContainerType *result = 0 ;
  
  SWIG_check_num_args("findType",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("findType",1,"osg::FieldContainerFactory const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("findType",2,"osg::Char8 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__FieldContainerFactory,0))){
    SWIG_fail_ptr("FieldContainerFactory_findType",1,SWIGTYPE_p_osg__FieldContainerFactory);
  }
  
  arg2 = (osg::Char8 *)lua_tostring(L, 2);
  result = (osg::FieldContainerType *)((osg::FieldContainerFactory const *)arg1)->findType((osg::Char8 const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_osg__FieldContainerType,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FieldContainerFactory_findType(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_osg__FieldContainerFactory, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_FieldContainerFactory_findType__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_osg__FieldContainerFactory, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_FieldContainerFactory_findType__SWIG_1(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'FieldContainerFactory_findType'\n"
    "  Possible C/C++ prototypes are:\n"
    "    findType(osg::FieldContainerFactory const *,osg::UInt32)\n"
    "    findType(osg::FieldContainerFactory const *,osg::Char8 const *)\n");
  lua_error(L);return 0;
}


static int _wrap_FieldContainerFactory_getNumTypes(lua_State* L) {
  int SWIG_arg = 0;
  osg::FieldContainerFactory *arg1 = (osg::FieldContainerFactory *) 0 ;
  osg::UInt32 result;
  
  SWIG_check_num_args("getNumTypes",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getNumTypes",1,"osg::FieldContainerFactory const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__FieldContainerFactory,0))){
    SWIG_fail_ptr("FieldContainerFactory_getNumTypes",1,SWIGTYPE_p_osg__FieldContainerFactory);
  }
  
  result = (osg::UInt32)((osg::FieldContainerFactory const *)arg1)->getNumTypes();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FieldContainerFactory_findGroupId(lua_State* L) {
  int SWIG_arg = 0;
  osg::FieldContainerFactory *arg1 = (osg::FieldContainerFactory *) 0 ;
  osg::Char8 *arg2 = (osg::Char8 *) 0 ;
  osg::UInt16 result;
  
  SWIG_check_num_args("findGroupId",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("findGroupId",1,"osg::FieldContainerFactory const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("findGroupId",2,"osg::Char8 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__FieldContainerFactory,0))){
    SWIG_fail_ptr("FieldContainerFactory_findGroupId",1,SWIGTYPE_p_osg__FieldContainerFactory);
  }
  
  arg2 = (osg::Char8 *)lua_tostring(L, 2);
  result = ((osg::FieldContainerFactory const *)arg1)->findGroupId((osg::Char8 const *)arg2);
  {
    osg::UInt16 * resultptr = new osg::UInt16((const osg::UInt16 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint16_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FieldContainerFactory_findGroupName(lua_State* L) {
  int SWIG_arg = 0;
  osg::FieldContainerFactory *arg1 = (osg::FieldContainerFactory *) 0 ;
  osg::UInt16 arg2 ;
  osg::UInt16 *argp2 ;
  osg::Char8 *result = 0 ;
  
  SWIG_check_num_args("findGroupName",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("findGroupName",1,"osg::FieldContainerFactory const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("findGroupName",2,"osg::UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__FieldContainerFactory,0))){
    SWIG_fail_ptr("FieldContainerFactory_findGroupName",1,SWIGTYPE_p_osg__FieldContainerFactory);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint16_t,0))){
    SWIG_fail_ptr("FieldContainerFactory_findGroupName",2,SWIGTYPE_p_uint16_t);
  }
  arg2 = *argp2;
  
  result = (osg::Char8 *)((osg::FieldContainerFactory const *)arg1)->findGroupName(arg2);
  lua_pushstring(L,(const char*)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FieldContainerFactory_getNumGroups(lua_State* L) {
  int SWIG_arg = 0;
  osg::FieldContainerFactory *arg1 = (osg::FieldContainerFactory *) 0 ;
  osg::UInt16 result;
  
  SWIG_check_num_args("getNumGroups",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getNumGroups",1,"osg::FieldContainerFactory const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__FieldContainerFactory,0))){
    SWIG_fail_ptr("FieldContainerFactory_getNumGroups",1,SWIGTYPE_p_osg__FieldContainerFactory);
  }
  
  result = ((osg::FieldContainerFactory const *)arg1)->getNumGroups();
  {
    osg::UInt16 * resultptr = new osg::UInt16((const osg::UInt16 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint16_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FieldContainerFactory_getContainer(lua_State* L) {
  int SWIG_arg = 0;
  osg::FieldContainerFactory *arg1 = (osg::FieldContainerFactory *) 0 ;
  osg::UInt32 arg2 ;
  osg::FieldContainerPtr result;
  
  SWIG_check_num_args("getContainer",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getContainer",1,"osg::FieldContainerFactory const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getContainer",2,"osg::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__FieldContainerFactory,0))){
    SWIG_fail_ptr("FieldContainerFactory_getContainer",1,SWIGTYPE_p_osg__FieldContainerFactory);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (osg::UInt32)lua_tonumber(L, 2);
  result = ((osg::FieldContainerFactory const *)arg1)->getContainer(arg2);
  {
    osg::FieldContainerPtr * resultptr = new osg::FieldContainerPtr((const osg::FieldContainerPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_osg__FieldContainerPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FieldContainerFactory_createFieldContainer(lua_State* L) {
  int SWIG_arg = 0;
  osg::FieldContainerFactory *arg1 = (osg::FieldContainerFactory *) 0 ;
  osg::Char8 *arg2 = (osg::Char8 *) 0 ;
  osg::FieldContainerPtr result;
  
  SWIG_check_num_args("createFieldContainer",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("createFieldContainer",1,"osg::FieldContainerFactory const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("createFieldContainer",2,"osg::Char8 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__FieldContainerFactory,0))){
    SWIG_fail_ptr("FieldContainerFactory_createFieldContainer",1,SWIGTYPE_p_osg__FieldContainerFactory);
  }
  
  arg2 = (osg::Char8 *)lua_tostring(L, 2);
  result = ((osg::FieldContainerFactory const *)arg1)->createFieldContainer((osg::Char8 const *)arg2);
  {
    osg::FieldContainerPtr * resultptr = new osg::FieldContainerPtr((const osg::FieldContainerPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_osg__FieldContainerPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static swig_lua_method swig_osg_FieldContainerFactory_methods[] = {
    {"findType", _wrap_FieldContainerFactory_findType}, 
    {"getNumTypes", _wrap_FieldContainerFactory_getNumTypes}, 
    {"findGroupId", _wrap_FieldContainerFactory_findGroupId}, 
    {"findGroupName", _wrap_FieldContainerFactory_findGroupName}, 
    {"getNumGroups", _wrap_FieldContainerFactory_getNumGroups}, 
    {"getContainer", _wrap_FieldContainerFactory_getContainer}, 
    {"createFieldContainer", _wrap_FieldContainerFactory_createFieldContainer}, 
    {0,0}
};
static swig_lua_attribute swig_osg_FieldContainerFactory_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_osg_FieldContainerFactory_bases[] = {0};
static const char *swig_osg_FieldContainerFactory_base_names[] = {0};
static swig_lua_class _wrap_class_osg_FieldContainerFactory = { "FieldContainerFactory", &SWIGTYPE_p_osg__FieldContainerFactory,0,0, swig_osg_FieldContainerFactory_methods, swig_osg_FieldContainerFactory_attributes, swig_osg_FieldContainerFactory_bases, swig_osg_FieldContainerFactory_base_names };

static int _wrap_Attachment_addParent(lua_State* L) {
  int SWIG_arg = 0;
  osg::Attachment *arg1 = (osg::Attachment *) 0 ;
  osg::FieldContainerPtr arg2 ;
  osg::FieldContainerPtr *argp2 ;
  
  SWIG_check_num_args("addParent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("addParent",1,"osg::Attachment *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("addParent",2,"osg::FieldContainerPtr");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__Attachment,0))){
    SWIG_fail_ptr("Attachment_addParent",1,SWIGTYPE_p_osg__Attachment);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_osg__FieldContainerPtr,0))){
    SWIG_fail_ptr("Attachment_addParent",2,SWIGTYPE_p_osg__FieldContainerPtr);
  }
  arg2 = *argp2;
  
  (arg1)->addParent(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Attachment_subParent(lua_State* L) {
  int SWIG_arg = 0;
  osg::Attachment *arg1 = (osg::Attachment *) 0 ;
  osg::FieldContainerPtr arg2 ;
  osg::FieldContainerPtr *argp2 ;
  
  SWIG_check_num_args("subParent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("subParent",1,"osg::Attachment *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("subParent",2,"osg::FieldContainerPtr");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__Attachment,0))){
    SWIG_fail_ptr("Attachment_subParent",1,SWIGTYPE_p_osg__Attachment);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_osg__FieldContainerPtr,0))){
    SWIG_fail_ptr("Attachment_subParent",2,SWIGTYPE_p_osg__FieldContainerPtr);
  }
  arg2 = *argp2;
  
  (arg1)->subParent(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Attachment_findParent(lua_State* L) {
  int SWIG_arg = 0;
  osg::Attachment *arg1 = (osg::Attachment *) 0 ;
  osg::FieldContainerPtr arg2 ;
  osg::FieldContainerPtr *argp2 ;
  osg::Int32 result;
  
  SWIG_check_num_args("findParent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("findParent",1,"osg::Attachment *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("findParent",2,"osg::FieldContainerPtr");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__Attachment,0))){
    SWIG_fail_ptr("Attachment_findParent",1,SWIGTYPE_p_osg__Attachment);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_osg__FieldContainerPtr,0))){
    SWIG_fail_ptr("Attachment_findParent",2,SWIGTYPE_p_osg__FieldContainerPtr);
  }
  arg2 = *argp2;
  
  result = (osg::Int32)(arg1)->findParent(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Attachment_setInternal(lua_State* L) {
  int SWIG_arg = 0;
  osg::Attachment *arg1 = (osg::Attachment *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("setInternal",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setInternal",1,"osg::Attachment *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("setInternal",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_osg__Attachment,0))){
    SWIG_fail_ptr("Attachment_setInternal",1,SWIGTYPE_p_osg__Attachment);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setInternal(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static swig_lua_method swig_osg_Attachment_methods[] = {
    {"addParent", _wrap_Attachment_addParent}, 
    {"subParent", _wrap_Attachment_subParent}, 
    {"findParent", _wrap_Attachment_findParent}, 
    {"setInternal", _wrap_Attachment_setInternal}, 
    {0,0}
};
static swig_lua_attribute swig_osg_Attachment_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_osg_Attachment_bases[] = {0,0};
static const char *swig_osg_Attachment_base_names[] = {"osg::FieldContainer *",0};
static swig_lua_class _wrap_class_osg_Attachment = { "Attachment", &SWIGTYPE_p_osg__Attachment,0,0, swig_osg_Attachment_methods, swig_osg_Attachment_attributes, swig_osg_Attachment_bases, swig_osg_Attachment_base_names };

#ifdef __cplusplus
}
#endif

static const struct luaL_reg swig_commands[] = {
    { "version",OSGVersion},
    { "Color3f_convertFromHSV", _wrap_Color3f_convertFromHSV},
    { "Color3f_convertToHSV", _wrap_Color3f_convertToHSV},
    { "Color3f_minPart", _wrap_Color3f_minPart},
    { "Color3f_maxPart", _wrap_Color3f_maxPart},
    { "Matrix_identity", _wrap_Matrix_identity},
    { "Quaternion_identity", _wrap_Quaternion_identity},
    { "Quaternion_slerp", _wrap_Quaternion_slerp},
    { "TypeFactory_the", _wrap_TypeFactory_the},
    { "FieldFactory_getNFieldTypes", _wrap_FieldFactory_getNFieldTypes},
    { "FieldFactory_getFieldType",_wrap_FieldFactory_getFieldType},
    { "FieldFactory_the", _wrap_FieldFactory_the},
    { "FieldContainerFactory_the", _wrap_FieldContainerFactory_the},
    {0,0}
};

static swig_lua_var_info swig_variables[] = {
    {0,0,0}
};

static swig_lua_const_info swig_constants[] = {
{ SWIG_LUA_INT,     (char *)"FieldType_SINGLE_FIELD", (long) osg::FieldType::SINGLE_FIELD, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"FieldType_MULTI_FIELD", (long) osg::FieldType::MULTI_FIELD, 0, 0, 0},
    {0,0,0,0,0,0}
};

/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_osg__VectorT_float_2_tTo_p_osg__PointT_float_2_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((osg::Point< float,2 > *)  ((osg::Vector< float,2 > *) x));
}
static void *_p_osg__DataTypeTo_p_osg__TypeBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((osg::TypeBase *)  ((osg::DataType *) x));
}
static void *_p_osg__FieldTypeTo_p_osg__TypeBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((osg::TypeBase *) (osg::DataType *) ((osg::FieldType *) x));
}
static void *_p_osg__FieldContainerTypeTo_p_osg__TypeBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((osg::TypeBase *) (osg::DataType *) ((osg::FieldContainerType *) x));
}
static void *_p_osg__VectorT_float_4_tTo_p_osg__PointT_float_4_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((osg::Point< float,4 > *)  ((osg::Vector< float,4 > *) x));
}
static void *_p_osg__AttachmentTo_p_osg__FieldContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((osg::FieldContainer *)  ((osg::Attachment *) x));
}
static void *_p_osg__FieldTypeTo_p_osg__DataType(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((osg::DataType *)  ((osg::FieldType *) x));
}
static void *_p_osg__FieldContainerTypeTo_p_osg__DataType(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((osg::DataType *)  ((osg::FieldContainerType *) x));
}
static void *_p_osg__VectorT_float_3_tTo_p_osg__PointT_float_3_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((osg::Point< float,3 > *)  ((osg::Vector< float,3 > *) x));
}
static swig_type_info _swigt__p_Inherited = {"_p_Inherited", "Inherited *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_MatrixType = {"_p_MatrixType", "MatrixType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ObjectType = {"_p_ObjectType", "ObjectType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_PointType = {"_p_PointType", "PointType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_PointType3f = {"_p_PointType3f", "PointType3f *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_QuaternionBaseT_float_t = {"_p_QuaternionBaseT_float_t", "QuaternionBase< float > *|osg::TransformationMatrix< float >::QuaternionType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_QuaternionType = {"_p_QuaternionType", "QuaternionType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_RealReturnType = {"_p_RealReturnType", "RealReturnType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_StoredObjectType = {"_p_StoredObjectType", "StoredObjectType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ValueType = {"_p_ValueType", "ValueType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_VectorType = {"_p_VectorType", "VectorType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_VectorType3f = {"_p_VectorType3f", "VectorType3f *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_char = {"_p_char", "char *|osg::Char8 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_double = {"_p_double", "double *|osg::Real64 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_float = {"_p_float", "osg::Color4< float >::ValueType *|float *|osg::Real32 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int = {"_p_int", "int *|osg::Int32 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int16_t = {"_p_int16_t", "osg::Int16 *|int16_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int8_t = {"_p_int8_t", "osg::Int8 *|int8_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_long = {"_p_long", "osg::Int64 *|long *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_long_double = {"_p_long_double", "long double *|osg::Real128 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_osg__Attachment = {"_p_osg__Attachment", "osg::Attachment *", 0, 0, (void*)&_wrap_class_osg_Attachment, 0};
static swig_type_info _swigt__p_osg__Color3T_float_t = {"_p_osg__Color3T_float_t", "osg::Color3< float > *|osg::Color3< osg::Real32 > *", 0, 0, (void*)&_wrap_class_osg_Color3_Sl_osg_Real32_Sg_, 0};
static swig_type_info _swigt__p_osg__Color4T_float_t = {"_p_osg__Color4T_float_t", "osg::Color4< float > *|osg::Color4< osg::Real32 > *", 0, 0, (void*)&_wrap_class_osg_Color4_Sl_osg_Real32_Sg_, 0};
static swig_type_info _swigt__p_osg__DataType = {"_p_osg__DataType", "osg::DataType *", 0, 0, (void*)&_wrap_class_osg_DataType, 0};
static swig_type_info _swigt__p_osg__Field = {"_p_osg__Field", "osg::Field *", 0, 0, (void*)&_wrap_class_osg_Field, 0};
static swig_type_info _swigt__p_osg__FieldContainer = {"_p_osg__FieldContainer", "osg::FieldContainer *", 0, 0, (void*)&_wrap_class_osg_FieldContainer, 0};
static swig_type_info _swigt__p_osg__FieldContainerFactory = {"_p_osg__FieldContainerFactory", "osg::FieldContainerFactory *", 0, 0, (void*)&_wrap_class_osg_FieldContainerFactory, 0};
static swig_type_info _swigt__p_osg__FieldContainerPtr = {"_p_osg__FieldContainerPtr", "osg::FieldContainerPtr *", 0, 0, (void*)&_wrap_class_osg_FieldContainerPtr, 0};
static swig_type_info _swigt__p_osg__FieldContainerType = {"_p_osg__FieldContainerType", "osg::FieldContainerType *", 0, 0, (void*)&_wrap_class_osg_FieldContainerType, 0};
static swig_type_info _swigt__p_osg__FieldDescription = {"_p_osg__FieldDescription", "osg::FieldDescription *", 0, 0, (void*)&_wrap_class_osg_FieldDescription, 0};
static swig_type_info _swigt__p_osg__FieldFactory = {"_p_osg__FieldFactory", "osg::FieldFactory *", 0, 0, (void*)&_wrap_class_osg_FieldFactory, 0};
static swig_type_info _swigt__p_osg__FieldType = {"_p_osg__FieldType", "osg::FieldType *", 0, 0, (void*)&_wrap_class_osg_FieldType, 0};
static swig_type_info _swigt__p_osg__PointT_float_2_t = {"_p_osg__PointT_float_2_t", "osg::Point< float,2 >::PointType *|osg::Point< float,2 > *|osg::Point< osg::Real32,2 > *", 0, 0, (void*)&_wrap_class_osg_Point_Sl_osg_Real32_Sc_2_Sg_, 0};
static swig_type_info _swigt__p_osg__PointT_float_3_t = {"_p_osg__PointT_float_3_t", "osg::Point< float,3 >::PointType *|osg::TransformationMatrix< float >::PointType3f *|osg::Point< float,3 > *|osg::Point< osg::Real32,3 > *", 0, 0, (void*)&_wrap_class_osg_Point_Sl_osg_Real32_Sc_3_Sg_, 0};
static swig_type_info _swigt__p_osg__PointT_float_4_t = {"_p_osg__PointT_float_4_t", "osg::Point< float,4 >::PointType *|osg::TransformationMatrix< float >::PointType *|osg::Point< float,4 > *|osg::Point< osg::Real32,4 > *", 0, 0, (void*)&_wrap_class_osg_Point_Sl_osg_Real32_Sc_4_Sg_, 0};
static swig_type_info _swigt__p_osg__QuaternionBaseT_float_t = {"_p_osg__QuaternionBaseT_float_t", "osg::QuaternionBase< float > *|osg::QuaternionBase< osg::Real32 > *", 0, 0, (void*)&_wrap_class_osg_QuaternionBase_Sl_osg_Real32_Sg_, 0};
static swig_type_info _swigt__p_osg__TransformationMatrixT_float_t = {"_p_osg__TransformationMatrixT_float_t", "osg::QuaternionBase< float >::MatrixType *|osg::TransformationMatrix< float > *|osg::TransformationMatrix< osg::Real32 > *", 0, 0, (void*)&_wrap_class_osg_TransformationMatrix_Sl_osg_Real32_Sg_, 0};
static swig_type_info _swigt__p_osg__TypeBase = {"_p_osg__TypeBase", "osg::TypeBase *", 0, 0, (void*)&_wrap_class_osg_TypeBase, 0};
static swig_type_info _swigt__p_osg__TypeFactory = {"_p_osg__TypeFactory", "osg::TypeFactory *", 0, 0, (void*)&_wrap_class_osg_TypeFactory, 0};
static swig_type_info _swigt__p_osg__VectorT_float_2_t = {"_p_osg__VectorT_float_2_t", "osg::Point< float,2 >::VectorType *|osg::Vector< float,2 > *|osg::Vector< osg::Real32,2 > *", 0, 0, (void*)&_wrap_class_osg_Vector_Sl_osg_Real32_Sc_2_Sg_, 0};
static swig_type_info _swigt__p_osg__VectorT_float_3_t = {"_p_osg__VectorT_float_3_t", "osg::TransformationMatrix< float >::VectorType3f *|osg::QuaternionBase< float >::VectorType *|osg::Point< float,3 >::VectorType *|osg::Vector< float,3 > *|osg::Vector< osg::Real32,3 > *", 0, 0, (void*)&_wrap_class_osg_Vector_Sl_osg_Real32_Sc_3_Sg_, 0};
static swig_type_info _swigt__p_osg__VectorT_float_4_t = {"_p_osg__VectorT_float_4_t", "osg::TransformationMatrix< float >::VectorType *|osg::Point< float,4 >::VectorType *|osg::Vector< float,4 > *|osg::Vector< osg::Real32,4 > *", 0, 0, (void*)&_wrap_class_osg_Vector_Sl_osg_Real32_Sc_4_Sg_, 0};
static swig_type_info _swigt__p_signed_char = {"_p_signed_char", "signed char *|osg::SChar8 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__string = {"_p_std__string", "std::string *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_uint16_t = {"_p_uint16_t", "osg::UInt16 *|uint16_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_uint8_t = {"_p_uint8_t", "osg::UInt8 *|uint8_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_char = {"_p_unsigned_char", "unsigned char *|osg::UChar8 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_int = {"_p_unsigned_int", "osg::UInt32 *|unsigned int *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_long = {"_p_unsigned_long", "osg::UInt64 *|unsigned long *|osg::BitVector *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_Inherited,
  &_swigt__p_MatrixType,
  &_swigt__p_ObjectType,
  &_swigt__p_PointType,
  &_swigt__p_PointType3f,
  &_swigt__p_QuaternionBaseT_float_t,
  &_swigt__p_QuaternionType,
  &_swigt__p_RealReturnType,
  &_swigt__p_StoredObjectType,
  &_swigt__p_ValueType,
  &_swigt__p_VectorType,
  &_swigt__p_VectorType3f,
  &_swigt__p_char,
  &_swigt__p_double,
  &_swigt__p_float,
  &_swigt__p_int,
  &_swigt__p_int16_t,
  &_swigt__p_int8_t,
  &_swigt__p_long,
  &_swigt__p_long_double,
  &_swigt__p_osg__Attachment,
  &_swigt__p_osg__Color3T_float_t,
  &_swigt__p_osg__Color4T_float_t,
  &_swigt__p_osg__DataType,
  &_swigt__p_osg__Field,
  &_swigt__p_osg__FieldContainer,
  &_swigt__p_osg__FieldContainerFactory,
  &_swigt__p_osg__FieldContainerPtr,
  &_swigt__p_osg__FieldContainerType,
  &_swigt__p_osg__FieldDescription,
  &_swigt__p_osg__FieldFactory,
  &_swigt__p_osg__FieldType,
  &_swigt__p_osg__PointT_float_2_t,
  &_swigt__p_osg__PointT_float_3_t,
  &_swigt__p_osg__PointT_float_4_t,
  &_swigt__p_osg__QuaternionBaseT_float_t,
  &_swigt__p_osg__TransformationMatrixT_float_t,
  &_swigt__p_osg__TypeBase,
  &_swigt__p_osg__TypeFactory,
  &_swigt__p_osg__VectorT_float_2_t,
  &_swigt__p_osg__VectorT_float_3_t,
  &_swigt__p_osg__VectorT_float_4_t,
  &_swigt__p_signed_char,
  &_swigt__p_std__string,
  &_swigt__p_uint16_t,
  &_swigt__p_uint8_t,
  &_swigt__p_unsigned_char,
  &_swigt__p_unsigned_int,
  &_swigt__p_unsigned_long,
};

static swig_cast_info _swigc__p_Inherited[] = {  {&_swigt__p_Inherited, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MatrixType[] = {  {&_swigt__p_MatrixType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ObjectType[] = {  {&_swigt__p_ObjectType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_PointType[] = {  {&_swigt__p_PointType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_PointType3f[] = {  {&_swigt__p_PointType3f, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_QuaternionBaseT_float_t[] = {  {&_swigt__p_QuaternionBaseT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_QuaternionType[] = {  {&_swigt__p_QuaternionType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_RealReturnType[] = {  {&_swigt__p_RealReturnType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_StoredObjectType[] = {  {&_swigt__p_StoredObjectType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ValueType[] = {  {&_swigt__p_ValueType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_VectorType[] = {  {&_swigt__p_VectorType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_VectorType3f[] = {  {&_swigt__p_VectorType3f, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_double[] = {  {&_swigt__p_double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_float[] = {  {&_swigt__p_float, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int[] = {  {&_swigt__p_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int16_t[] = {  {&_swigt__p_int16_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int8_t[] = {  {&_swigt__p_int8_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_long[] = {  {&_swigt__p_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_long_double[] = {  {&_swigt__p_long_double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_osg__Attachment[] = {  {&_swigt__p_osg__Attachment, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_osg__Color3T_float_t[] = {  {&_swigt__p_osg__Color3T_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_osg__Color4T_float_t[] = {  {&_swigt__p_osg__Color4T_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_osg__DataType[] = {  {&_swigt__p_osg__DataType, 0, 0, 0},  {&_swigt__p_osg__FieldType, _p_osg__FieldTypeTo_p_osg__DataType, 0, 0},  {&_swigt__p_osg__FieldContainerType, _p_osg__FieldContainerTypeTo_p_osg__DataType, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_osg__Field[] = {  {&_swigt__p_osg__Field, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_osg__FieldContainer[] = {  {&_swigt__p_osg__Attachment, _p_osg__AttachmentTo_p_osg__FieldContainer, 0, 0},  {&_swigt__p_osg__FieldContainer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_osg__FieldContainerFactory[] = {  {&_swigt__p_osg__FieldContainerFactory, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_osg__FieldContainerPtr[] = {  {&_swigt__p_osg__FieldContainerPtr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_osg__FieldContainerType[] = {  {&_swigt__p_osg__FieldContainerType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_osg__FieldDescription[] = {  {&_swigt__p_osg__FieldDescription, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_osg__FieldFactory[] = {  {&_swigt__p_osg__FieldFactory, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_osg__FieldType[] = {  {&_swigt__p_osg__FieldType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_osg__PointT_float_2_t[] = {  {&_swigt__p_osg__PointT_float_2_t, 0, 0, 0},  {&_swigt__p_osg__VectorT_float_2_t, _p_osg__VectorT_float_2_tTo_p_osg__PointT_float_2_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_osg__PointT_float_3_t[] = {  {&_swigt__p_osg__PointT_float_3_t, 0, 0, 0},  {&_swigt__p_osg__VectorT_float_3_t, _p_osg__VectorT_float_3_tTo_p_osg__PointT_float_3_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_osg__PointT_float_4_t[] = {  {&_swigt__p_osg__PointT_float_4_t, 0, 0, 0},  {&_swigt__p_osg__VectorT_float_4_t, _p_osg__VectorT_float_4_tTo_p_osg__PointT_float_4_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_osg__QuaternionBaseT_float_t[] = {  {&_swigt__p_osg__QuaternionBaseT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_osg__TransformationMatrixT_float_t[] = {  {&_swigt__p_osg__TransformationMatrixT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_osg__TypeBase[] = {  {&_swigt__p_osg__DataType, _p_osg__DataTypeTo_p_osg__TypeBase, 0, 0},  {&_swigt__p_osg__TypeBase, 0, 0, 0},  {&_swigt__p_osg__FieldType, _p_osg__FieldTypeTo_p_osg__TypeBase, 0, 0},  {&_swigt__p_osg__FieldContainerType, _p_osg__FieldContainerTypeTo_p_osg__TypeBase, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_osg__TypeFactory[] = {  {&_swigt__p_osg__TypeFactory, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_osg__VectorT_float_2_t[] = {  {&_swigt__p_osg__VectorT_float_2_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_osg__VectorT_float_3_t[] = {  {&_swigt__p_osg__VectorT_float_3_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_osg__VectorT_float_4_t[] = {  {&_swigt__p_osg__VectorT_float_4_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_signed_char[] = {  {&_swigt__p_signed_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__string[] = {  {&_swigt__p_std__string, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_uint16_t[] = {  {&_swigt__p_uint16_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_uint8_t[] = {  {&_swigt__p_uint8_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_char[] = {  {&_swigt__p_unsigned_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_int[] = {  {&_swigt__p_unsigned_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_long[] = {  {&_swigt__p_unsigned_long, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_Inherited,
  _swigc__p_MatrixType,
  _swigc__p_ObjectType,
  _swigc__p_PointType,
  _swigc__p_PointType3f,
  _swigc__p_QuaternionBaseT_float_t,
  _swigc__p_QuaternionType,
  _swigc__p_RealReturnType,
  _swigc__p_StoredObjectType,
  _swigc__p_ValueType,
  _swigc__p_VectorType,
  _swigc__p_VectorType3f,
  _swigc__p_char,
  _swigc__p_double,
  _swigc__p_float,
  _swigc__p_int,
  _swigc__p_int16_t,
  _swigc__p_int8_t,
  _swigc__p_long,
  _swigc__p_long_double,
  _swigc__p_osg__Attachment,
  _swigc__p_osg__Color3T_float_t,
  _swigc__p_osg__Color4T_float_t,
  _swigc__p_osg__DataType,
  _swigc__p_osg__Field,
  _swigc__p_osg__FieldContainer,
  _swigc__p_osg__FieldContainerFactory,
  _swigc__p_osg__FieldContainerPtr,
  _swigc__p_osg__FieldContainerType,
  _swigc__p_osg__FieldDescription,
  _swigc__p_osg__FieldFactory,
  _swigc__p_osg__FieldType,
  _swigc__p_osg__PointT_float_2_t,
  _swigc__p_osg__PointT_float_3_t,
  _swigc__p_osg__PointT_float_4_t,
  _swigc__p_osg__QuaternionBaseT_float_t,
  _swigc__p_osg__TransformationMatrixT_float_t,
  _swigc__p_osg__TypeBase,
  _swigc__p_osg__TypeFactory,
  _swigc__p_osg__VectorT_float_2_t,
  _swigc__p_osg__VectorT_float_3_t,
  _swigc__p_osg__VectorT_float_4_t,
  _swigc__p_signed_char,
  _swigc__p_std__string,
  _swigc__p_uint16_t,
  _swigc__p_uint8_t,
  _swigc__p_unsigned_char,
  _swigc__p_unsigned_int,
  _swigc__p_unsigned_long,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic 
 * memory is used. Also, since swig_type_info structures store pointers to 
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization. 
 * The idea is that swig generates all the structures that are needed. 
 * The runtime then collects these partially filled structures. 
 * The SWIG_InitializeModule function takes these initial arrays out of 
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned staticly to an initial 
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it 
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded. 
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the 
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int found, init;

  clientdata = clientdata;

  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }

  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
    module_head = &swig_module;
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    found=0;
    iter=module_head;
    do {
      if (iter==&swig_module) {
        found=1;
        break;
      }
      iter=iter->next;
    } while (iter!= module_head);

    /* if the is found in the list, then all is done and we may leave */
    if (found) return;
    /* otherwise we must add out module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }

  /* When multiple interpeters are used, a module could have already been initialized in
     a different interpreter, but not yet have a pointer in this interpreter.
     In this case, we do not want to continue adding types... everything should be
     set up already */
  if (init == 0) return;

  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %d\n", swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;
  
#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
#endif

    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
	type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }

    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {
    
      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
	if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
	if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
	  printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
	  cast->type = ret;
	  ret = 0;
	} else {
	  /* Check for casting already in the list */
	  swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
	  if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
	  if (!ocast) ret = 0;
	}
      }

      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
	printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;

#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
  printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;

  if (init_run) return;
  init_run = 1;

  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
            SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{ /* c-mode */
#endif
}
#endif



/* Forward declaration of where the user's %init{} gets inserted */
void SWIG_init_user(lua_State* L );
    
#ifdef __cplusplus
extern "C" {
#endif
/* this is the initialization function
  added at the very end of the code
  the function is always called SWIG_init, but an eariler #define will rename it
*/
SWIGEXPORT int SWIG_init(lua_State* L)
{
  int i;
  /* start with global table */
  lua_pushvalue(L,LUA_GLOBALSINDEX);
  /* SWIG's internal initalisation */
  SWIG_InitializeModule((void*)L);
  SWIG_PropagateClientData();
  /* add a global fn */
  SWIG_Lua_add_function(L,"swig_type",SWIG_Lua_type);
  SWIG_Lua_add_function(L,"swig_equals",SWIG_Lua_equal);
  /* begin the module (its a table with the same name as the module) */
  SWIG_Lua_module_begin(L,SWIG_name);
  /* add commands/functions */
  for (i = 0; swig_commands[i].name; i++){
    SWIG_Lua_module_add_function(L,swig_commands[i].name,swig_commands[i].func);
  }
  /* add variables */
  for (i = 0; swig_variables[i].name; i++){
    SWIG_Lua_module_add_variable(L,swig_variables[i].name,swig_variables[i].get,swig_variables[i].set);
  }
  /* set up base class pointers (the hierachy) */
  for (i = 0; swig_types[i]; i++){
    if (swig_types[i]->clientdata){
      SWIG_Lua_init_base_class(L,(swig_lua_class*)(swig_types[i]->clientdata));
    }
  }
  /* additional registration structs & classes in lua */
  for (i = 0; swig_types[i]; i++){
    if (swig_types[i]->clientdata){
      SWIG_Lua_class_register(L,(swig_lua_class*)(swig_types[i]->clientdata));
    }
  }
  /* constants */
  SWIG_Lua_InstallConstants(L,swig_constants);
  /* invoke user-specific initialization */
  SWIG_init_user(L);
  /* end module */
  lua_pop(L,1);  /* tidy stack (remove module table)*/
  lua_pop(L,1);  /* tidy stack (remove global table)*/
  return 1;
}

#ifdef __cplusplus
}
#endif


const char* SWIG_LUACODE=
  "";

void SWIG_init_user(lua_State* L)
{
  /* exec Lua code if applicable */
  SWIG_Lua_dostring(L,SWIG_LUACODE);
}

