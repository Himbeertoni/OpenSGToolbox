/*---------------------------------------------------------------------------*\
 *                     OpenSG ToolBox Particle System                        *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                         www.vrac.iastate.edu                              *
 *                                                                           *
 *                          Authors: David Kabala                            *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class ConeDistribution3D!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#define OSG_COMPILECONEDISTRIBUTION3DINST

#include <stdlib.h>
#include <stdio.h>

#include <OpenSG/OSGConfig.h>

#include "OSGConeDistribution3DBase.h"
#include "OSGConeDistribution3D.h"


OSG_BEGIN_NAMESPACE

const OSG::BitVector  ConeDistribution3DBase::PositionFieldMask = 
    (TypeTraits<BitVector>::One << ConeDistribution3DBase::PositionFieldId);

const OSG::BitVector  ConeDistribution3DBase::DirectionFieldMask = 
    (TypeTraits<BitVector>::One << ConeDistribution3DBase::DirectionFieldId);

const OSG::BitVector  ConeDistribution3DBase::SpreadFieldMask = 
    (TypeTraits<BitVector>::One << ConeDistribution3DBase::SpreadFieldId);

const OSG::BitVector  ConeDistribution3DBase::MinThetaFieldMask = 
    (TypeTraits<BitVector>::One << ConeDistribution3DBase::MinThetaFieldId);

const OSG::BitVector  ConeDistribution3DBase::MaxThetaFieldMask = 
    (TypeTraits<BitVector>::One << ConeDistribution3DBase::MaxThetaFieldId);

const OSG::BitVector  ConeDistribution3DBase::MinFieldMask = 
    (TypeTraits<BitVector>::One << ConeDistribution3DBase::MinFieldId);

const OSG::BitVector  ConeDistribution3DBase::MaxFieldMask = 
    (TypeTraits<BitVector>::One << ConeDistribution3DBase::MaxFieldId);

const OSG::BitVector  ConeDistribution3DBase::SurfaceOrVolumeFieldMask = 
    (TypeTraits<BitVector>::One << ConeDistribution3DBase::SurfaceOrVolumeFieldId);

const OSG::BitVector ConeDistribution3DBase::MTInfluenceMask = 
    (Inherited::MTInfluenceMask) | 
    (static_cast<BitVector>(0x0) << Inherited::NextFieldId); 


// Field descriptions

/*! \var Pnt3f           ConeDistribution3DBase::_sfPosition
    
*/
/*! \var Vec3f           ConeDistribution3DBase::_sfDirection
    
*/
/*! \var Real32          ConeDistribution3DBase::_sfSpread
    
*/
/*! \var Real32          ConeDistribution3DBase::_sfMinTheta
    
*/
/*! \var Real32          ConeDistribution3DBase::_sfMaxTheta
    
*/
/*! \var Real32          ConeDistribution3DBase::_sfMin
    
*/
/*! \var Real32          ConeDistribution3DBase::_sfMax
    
*/
/*! \var UInt32          ConeDistribution3DBase::_sfSurfaceOrVolume
    
*/

//! ConeDistribution3D description

FieldDescription *ConeDistribution3DBase::_desc[] = 
{
    new FieldDescription(SFPnt3f::getClassType(), 
                     "Position", 
                     PositionFieldId, PositionFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&ConeDistribution3DBase::editSFPosition)),
    new FieldDescription(SFVec3f::getClassType(), 
                     "Direction", 
                     DirectionFieldId, DirectionFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&ConeDistribution3DBase::editSFDirection)),
    new FieldDescription(SFReal32::getClassType(), 
                     "Spread", 
                     SpreadFieldId, SpreadFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&ConeDistribution3DBase::editSFSpread)),
    new FieldDescription(SFReal32::getClassType(), 
                     "MinTheta", 
                     MinThetaFieldId, MinThetaFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&ConeDistribution3DBase::editSFMinTheta)),
    new FieldDescription(SFReal32::getClassType(), 
                     "MaxTheta", 
                     MaxThetaFieldId, MaxThetaFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&ConeDistribution3DBase::editSFMaxTheta)),
    new FieldDescription(SFReal32::getClassType(), 
                     "Min", 
                     MinFieldId, MinFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&ConeDistribution3DBase::editSFMin)),
    new FieldDescription(SFReal32::getClassType(), 
                     "Max", 
                     MaxFieldId, MaxFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&ConeDistribution3DBase::editSFMax)),
    new FieldDescription(SFUInt32::getClassType(), 
                     "SurfaceOrVolume", 
                     SurfaceOrVolumeFieldId, SurfaceOrVolumeFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&ConeDistribution3DBase::editSFSurfaceOrVolume))
};


FieldContainerType ConeDistribution3DBase::_type(
    "ConeDistribution3D",
    "Distribution3D",
    NULL,
    reinterpret_cast<PrototypeCreateF>(&ConeDistribution3DBase::createEmpty),
    ConeDistribution3D::initMethod,
    _desc,
    sizeof(_desc));

//OSG_FIELD_CONTAINER_DEF(ConeDistribution3DBase, ConeDistribution3DPtr)

/*------------------------------ get -----------------------------------*/

FieldContainerType &ConeDistribution3DBase::getType(void) 
{
    return _type; 
} 

const FieldContainerType &ConeDistribution3DBase::getType(void) const 
{
    return _type;
} 


FieldContainerPtr ConeDistribution3DBase::shallowCopy(void) const 
{ 
    ConeDistribution3DPtr returnValue; 

    newPtr(returnValue, dynamic_cast<const ConeDistribution3D *>(this)); 

    return returnValue; 
}

UInt32 ConeDistribution3DBase::getContainerSize(void) const 
{ 
    return sizeof(ConeDistribution3D); 
}


#if !defined(OSG_FIXED_MFIELDSYNC)
void ConeDistribution3DBase::executeSync(      FieldContainer &other,
                                    const BitVector      &whichField)
{
    this->executeSyncImpl(static_cast<ConeDistribution3DBase *>(&other),
                          whichField);
}
#else
void ConeDistribution3DBase::executeSync(      FieldContainer &other,
                                    const BitVector      &whichField,                                    const SyncInfo       &sInfo     )
{
    this->executeSyncImpl((ConeDistribution3DBase *) &other, whichField, sInfo);
}
void ConeDistribution3DBase::execBeginEdit(const BitVector &whichField, 
                                            UInt32     uiAspect,
                                            UInt32     uiContainerSize) 
{
    this->execBeginEditImpl(whichField, uiAspect, uiContainerSize);
}

void ConeDistribution3DBase::onDestroyAspect(UInt32 uiId, UInt32 uiAspect)
{
    Inherited::onDestroyAspect(uiId, uiAspect);

}
#endif

/*------------------------- constructors ----------------------------------*/

#ifdef OSG_WIN32_ICL
#pragma warning (disable : 383)
#endif

ConeDistribution3DBase::ConeDistribution3DBase(void) :
    _sfPosition               (Pnt3f(0.0,0.0,0.0)), 
    _sfDirection              (Vec3f(0.0,0.0,1.0)), 
    _sfSpread                 (Real32(0.57)), 
    _sfMinTheta               (Real32(0.0)), 
    _sfMaxTheta               (Real32(6.28319)), 
    _sfMin                    (Real32(0.0)), 
    _sfMax                    (Real32(1.0)), 
    _sfSurfaceOrVolume        (UInt32(ConeDistribution3D::VOLUME)), 
    Inherited() 
{
}

#ifdef OSG_WIN32_ICL
#pragma warning (default : 383)
#endif

ConeDistribution3DBase::ConeDistribution3DBase(const ConeDistribution3DBase &source) :
    _sfPosition               (source._sfPosition               ), 
    _sfDirection              (source._sfDirection              ), 
    _sfSpread                 (source._sfSpread                 ), 
    _sfMinTheta               (source._sfMinTheta               ), 
    _sfMaxTheta               (source._sfMaxTheta               ), 
    _sfMin                    (source._sfMin                    ), 
    _sfMax                    (source._sfMax                    ), 
    _sfSurfaceOrVolume        (source._sfSurfaceOrVolume        ), 
    Inherited                 (source)
{
}

/*-------------------------- destructors ----------------------------------*/

ConeDistribution3DBase::~ConeDistribution3DBase(void)
{
}

/*------------------------------ access -----------------------------------*/

UInt32 ConeDistribution3DBase::getBinSize(const BitVector &whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (PositionFieldMask & whichField))
    {
        returnValue += _sfPosition.getBinSize();
    }

    if(FieldBits::NoField != (DirectionFieldMask & whichField))
    {
        returnValue += _sfDirection.getBinSize();
    }

    if(FieldBits::NoField != (SpreadFieldMask & whichField))
    {
        returnValue += _sfSpread.getBinSize();
    }

    if(FieldBits::NoField != (MinThetaFieldMask & whichField))
    {
        returnValue += _sfMinTheta.getBinSize();
    }

    if(FieldBits::NoField != (MaxThetaFieldMask & whichField))
    {
        returnValue += _sfMaxTheta.getBinSize();
    }

    if(FieldBits::NoField != (MinFieldMask & whichField))
    {
        returnValue += _sfMin.getBinSize();
    }

    if(FieldBits::NoField != (MaxFieldMask & whichField))
    {
        returnValue += _sfMax.getBinSize();
    }

    if(FieldBits::NoField != (SurfaceOrVolumeFieldMask & whichField))
    {
        returnValue += _sfSurfaceOrVolume.getBinSize();
    }


    return returnValue;
}

void ConeDistribution3DBase::copyToBin(      BinaryDataHandler &pMem,
                                  const BitVector         &whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (PositionFieldMask & whichField))
    {
        _sfPosition.copyToBin(pMem);
    }

    if(FieldBits::NoField != (DirectionFieldMask & whichField))
    {
        _sfDirection.copyToBin(pMem);
    }

    if(FieldBits::NoField != (SpreadFieldMask & whichField))
    {
        _sfSpread.copyToBin(pMem);
    }

    if(FieldBits::NoField != (MinThetaFieldMask & whichField))
    {
        _sfMinTheta.copyToBin(pMem);
    }

    if(FieldBits::NoField != (MaxThetaFieldMask & whichField))
    {
        _sfMaxTheta.copyToBin(pMem);
    }

    if(FieldBits::NoField != (MinFieldMask & whichField))
    {
        _sfMin.copyToBin(pMem);
    }

    if(FieldBits::NoField != (MaxFieldMask & whichField))
    {
        _sfMax.copyToBin(pMem);
    }

    if(FieldBits::NoField != (SurfaceOrVolumeFieldMask & whichField))
    {
        _sfSurfaceOrVolume.copyToBin(pMem);
    }


}

void ConeDistribution3DBase::copyFromBin(      BinaryDataHandler &pMem,
                                    const BitVector    &whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (PositionFieldMask & whichField))
    {
        _sfPosition.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (DirectionFieldMask & whichField))
    {
        _sfDirection.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (SpreadFieldMask & whichField))
    {
        _sfSpread.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (MinThetaFieldMask & whichField))
    {
        _sfMinTheta.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (MaxThetaFieldMask & whichField))
    {
        _sfMaxTheta.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (MinFieldMask & whichField))
    {
        _sfMin.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (MaxFieldMask & whichField))
    {
        _sfMax.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (SurfaceOrVolumeFieldMask & whichField))
    {
        _sfSurfaceOrVolume.copyFromBin(pMem);
    }


}

#if !defined(OSG_FIXED_MFIELDSYNC)
void ConeDistribution3DBase::executeSyncImpl(      ConeDistribution3DBase *pOther,
                                        const BitVector         &whichField)
{

    Inherited::executeSyncImpl(pOther, whichField);

    if(FieldBits::NoField != (PositionFieldMask & whichField))
        _sfPosition.syncWith(pOther->_sfPosition);

    if(FieldBits::NoField != (DirectionFieldMask & whichField))
        _sfDirection.syncWith(pOther->_sfDirection);

    if(FieldBits::NoField != (SpreadFieldMask & whichField))
        _sfSpread.syncWith(pOther->_sfSpread);

    if(FieldBits::NoField != (MinThetaFieldMask & whichField))
        _sfMinTheta.syncWith(pOther->_sfMinTheta);

    if(FieldBits::NoField != (MaxThetaFieldMask & whichField))
        _sfMaxTheta.syncWith(pOther->_sfMaxTheta);

    if(FieldBits::NoField != (MinFieldMask & whichField))
        _sfMin.syncWith(pOther->_sfMin);

    if(FieldBits::NoField != (MaxFieldMask & whichField))
        _sfMax.syncWith(pOther->_sfMax);

    if(FieldBits::NoField != (SurfaceOrVolumeFieldMask & whichField))
        _sfSurfaceOrVolume.syncWith(pOther->_sfSurfaceOrVolume);


}
#else
void ConeDistribution3DBase::executeSyncImpl(      ConeDistribution3DBase *pOther,
                                        const BitVector         &whichField,
                                        const SyncInfo          &sInfo      )
{

    Inherited::executeSyncImpl(pOther, whichField, sInfo);

    if(FieldBits::NoField != (PositionFieldMask & whichField))
        _sfPosition.syncWith(pOther->_sfPosition);

    if(FieldBits::NoField != (DirectionFieldMask & whichField))
        _sfDirection.syncWith(pOther->_sfDirection);

    if(FieldBits::NoField != (SpreadFieldMask & whichField))
        _sfSpread.syncWith(pOther->_sfSpread);

    if(FieldBits::NoField != (MinThetaFieldMask & whichField))
        _sfMinTheta.syncWith(pOther->_sfMinTheta);

    if(FieldBits::NoField != (MaxThetaFieldMask & whichField))
        _sfMaxTheta.syncWith(pOther->_sfMaxTheta);

    if(FieldBits::NoField != (MinFieldMask & whichField))
        _sfMin.syncWith(pOther->_sfMin);

    if(FieldBits::NoField != (MaxFieldMask & whichField))
        _sfMax.syncWith(pOther->_sfMax);

    if(FieldBits::NoField != (SurfaceOrVolumeFieldMask & whichField))
        _sfSurfaceOrVolume.syncWith(pOther->_sfSurfaceOrVolume);



}

void ConeDistribution3DBase::execBeginEditImpl (const BitVector &whichField, 
                                                 UInt32     uiAspect,
                                                 UInt32     uiContainerSize)
{
    Inherited::execBeginEditImpl(whichField, uiAspect, uiContainerSize);

}
#endif



OSG_END_NAMESPACE

#include <OpenSG/OSGSFieldTypeDef.inl>
#include <OpenSG/OSGMFieldTypeDef.inl>

OSG_BEGIN_NAMESPACE

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldDataTraits<ConeDistribution3DPtr>::_type("ConeDistribution3DPtr", "Distribution3DPtr");
#endif

OSG_DLLEXPORT_SFIELD_DEF1(ConeDistribution3DPtr, OSG_PARTICLESYSTEMLIB_DLLTMPLMAPPING);
OSG_DLLEXPORT_MFIELD_DEF1(ConeDistribution3DPtr, OSG_PARTICLESYSTEMLIB_DLLTMPLMAPPING);


OSG_END_NAMESPACE

