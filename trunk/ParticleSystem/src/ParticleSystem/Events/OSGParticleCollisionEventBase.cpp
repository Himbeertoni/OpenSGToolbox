/*---------------------------------------------------------------------------*\
 *                     OpenSG ToolBox UserInterface                          *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                         www.vrac.iastate.edu                              *
 *                                                                           *
 *                          Authors: David Kabala                            *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class ParticleCollisionEvent!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#define OSG_COMPILEPARTICLECOLLISIONEVENTINST

#include <stdlib.h>
#include <stdio.h>

#include <OpenSG/OSGConfig.h>

#include "OSGParticleCollisionEventBase.h"
#include "OSGParticleCollisionEvent.h"


OSG_BEGIN_NAMESPACE

const OSG::BitVector  ParticleCollisionEventBase::HitTFieldMask = 
    (TypeTraits<BitVector>::One << ParticleCollisionEventBase::HitTFieldId);

const OSG::BitVector  ParticleCollisionEventBase::HitNodeFieldMask = 
    (TypeTraits<BitVector>::One << ParticleCollisionEventBase::HitNodeFieldId);

const OSG::BitVector  ParticleCollisionEventBase::HitPolygonIndexFieldMask = 
    (TypeTraits<BitVector>::One << ParticleCollisionEventBase::HitPolygonIndexFieldId);

const OSG::BitVector  ParticleCollisionEventBase::HitNormalFieldMask = 
    (TypeTraits<BitVector>::One << ParticleCollisionEventBase::HitNormalFieldId);

const OSG::BitVector  ParticleCollisionEventBase::HitPointFieldMask = 
    (TypeTraits<BitVector>::One << ParticleCollisionEventBase::HitPointFieldId);

const OSG::BitVector ParticleCollisionEventBase::MTInfluenceMask = 
    (Inherited::MTInfluenceMask) | 
    (static_cast<BitVector>(0x0) << Inherited::NextFieldId); 


// Field descriptions

/*! \var Real32          ParticleCollisionEventBase::_sfHitT
    
*/
/*! \var NodePtr         ParticleCollisionEventBase::_sfHitNode
    
*/
/*! \var Int32           ParticleCollisionEventBase::_sfHitPolygonIndex
    
*/
/*! \var Vec3f           ParticleCollisionEventBase::_sfHitNormal
    
*/
/*! \var Pnt3f           ParticleCollisionEventBase::_sfHitPoint
    
*/

//! ParticleCollisionEvent description

FieldDescription *ParticleCollisionEventBase::_desc[] = 
{
    new FieldDescription(SFReal32::getClassType(), 
                     "HitT", 
                     HitTFieldId, HitTFieldMask,
                     true,
                     reinterpret_cast<FieldAccessMethod>(&ParticleCollisionEventBase::editSFHitT)),
    new FieldDescription(SFNodePtr::getClassType(), 
                     "HitNode", 
                     HitNodeFieldId, HitNodeFieldMask,
                     true,
                     reinterpret_cast<FieldAccessMethod>(&ParticleCollisionEventBase::editSFHitNode)),
    new FieldDescription(SFInt32::getClassType(), 
                     "HitPolygonIndex", 
                     HitPolygonIndexFieldId, HitPolygonIndexFieldMask,
                     true,
                     reinterpret_cast<FieldAccessMethod>(&ParticleCollisionEventBase::editSFHitPolygonIndex)),
    new FieldDescription(SFVec3f::getClassType(), 
                     "HitNormal", 
                     HitNormalFieldId, HitNormalFieldMask,
                     true,
                     reinterpret_cast<FieldAccessMethod>(&ParticleCollisionEventBase::editSFHitNormal)),
    new FieldDescription(SFPnt3f::getClassType(), 
                     "HitPoint", 
                     HitPointFieldId, HitPointFieldMask,
                     true,
                     reinterpret_cast<FieldAccessMethod>(&ParticleCollisionEventBase::editSFHitPoint))
};


FieldContainerType ParticleCollisionEventBase::_type(
    "ParticleCollisionEvent",
    "Event",
    NULL,
    reinterpret_cast<PrototypeCreateF>(&ParticleCollisionEventBase::createEmpty),
    ParticleCollisionEvent::initMethod,
    _desc,
    sizeof(_desc));

//OSG_FIELD_CONTAINER_DEF(ParticleCollisionEventBase, ParticleCollisionEventPtr)

/*------------------------------ get -----------------------------------*/

FieldContainerType &ParticleCollisionEventBase::getType(void) 
{
    return _type; 
} 

const FieldContainerType &ParticleCollisionEventBase::getType(void) const 
{
    return _type;
} 


FieldContainerPtr ParticleCollisionEventBase::shallowCopy(void) const 
{ 
    ParticleCollisionEventPtr returnValue; 

    newPtr(returnValue, dynamic_cast<const ParticleCollisionEvent *>(this)); 

    return returnValue; 
}

UInt32 ParticleCollisionEventBase::getContainerSize(void) const 
{ 
    return sizeof(ParticleCollisionEvent); 
}


#if !defined(OSG_FIXED_MFIELDSYNC)
void ParticleCollisionEventBase::executeSync(      FieldContainer &other,
                                    const BitVector      &whichField)
{
    this->executeSyncImpl(static_cast<ParticleCollisionEventBase *>(&other),
                          whichField);
}
#else
void ParticleCollisionEventBase::executeSync(      FieldContainer &other,
                                    const BitVector      &whichField,                                    const SyncInfo       &sInfo     )
{
    this->executeSyncImpl((ParticleCollisionEventBase *) &other, whichField, sInfo);
}
void ParticleCollisionEventBase::execBeginEdit(const BitVector &whichField, 
                                            UInt32     uiAspect,
                                            UInt32     uiContainerSize) 
{
    this->execBeginEditImpl(whichField, uiAspect, uiContainerSize);
}

void ParticleCollisionEventBase::onDestroyAspect(UInt32 uiId, UInt32 uiAspect)
{
    Inherited::onDestroyAspect(uiId, uiAspect);

}
#endif

/*------------------------- constructors ----------------------------------*/

#ifdef OSG_WIN32_ICL
#pragma warning (disable : 383)
#endif

ParticleCollisionEventBase::ParticleCollisionEventBase(void) :
    _sfHitT                   (Real32(0.0f)), 
    _sfHitNode                (NodePtr(NullFC)), 
    _sfHitPolygonIndex        (Int32(-1)), 
    _sfHitNormal              (Vec3f(0.0f,0.0f,0.0f)), 
    _sfHitPoint               (Pnt3f(0.0f,0.0f,0.0f)), 
    Inherited() 
{
}

#ifdef OSG_WIN32_ICL
#pragma warning (default : 383)
#endif

ParticleCollisionEventBase::ParticleCollisionEventBase(const ParticleCollisionEventBase &source) :
    _sfHitT                   (source._sfHitT                   ), 
    _sfHitNode                (source._sfHitNode                ), 
    _sfHitPolygonIndex        (source._sfHitPolygonIndex        ), 
    _sfHitNormal              (source._sfHitNormal              ), 
    _sfHitPoint               (source._sfHitPoint               ), 
    Inherited                 (source)
{
}

/*-------------------------- destructors ----------------------------------*/

ParticleCollisionEventBase::~ParticleCollisionEventBase(void)
{
}

/*------------------------------ access -----------------------------------*/

UInt32 ParticleCollisionEventBase::getBinSize(const BitVector &whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (HitTFieldMask & whichField))
    {
        returnValue += _sfHitT.getBinSize();
    }

    if(FieldBits::NoField != (HitNodeFieldMask & whichField))
    {
        returnValue += _sfHitNode.getBinSize();
    }

    if(FieldBits::NoField != (HitPolygonIndexFieldMask & whichField))
    {
        returnValue += _sfHitPolygonIndex.getBinSize();
    }

    if(FieldBits::NoField != (HitNormalFieldMask & whichField))
    {
        returnValue += _sfHitNormal.getBinSize();
    }

    if(FieldBits::NoField != (HitPointFieldMask & whichField))
    {
        returnValue += _sfHitPoint.getBinSize();
    }


    return returnValue;
}

void ParticleCollisionEventBase::copyToBin(      BinaryDataHandler &pMem,
                                  const BitVector         &whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (HitTFieldMask & whichField))
    {
        _sfHitT.copyToBin(pMem);
    }

    if(FieldBits::NoField != (HitNodeFieldMask & whichField))
    {
        _sfHitNode.copyToBin(pMem);
    }

    if(FieldBits::NoField != (HitPolygonIndexFieldMask & whichField))
    {
        _sfHitPolygonIndex.copyToBin(pMem);
    }

    if(FieldBits::NoField != (HitNormalFieldMask & whichField))
    {
        _sfHitNormal.copyToBin(pMem);
    }

    if(FieldBits::NoField != (HitPointFieldMask & whichField))
    {
        _sfHitPoint.copyToBin(pMem);
    }


}

void ParticleCollisionEventBase::copyFromBin(      BinaryDataHandler &pMem,
                                    const BitVector    &whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (HitTFieldMask & whichField))
    {
        _sfHitT.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (HitNodeFieldMask & whichField))
    {
        _sfHitNode.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (HitPolygonIndexFieldMask & whichField))
    {
        _sfHitPolygonIndex.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (HitNormalFieldMask & whichField))
    {
        _sfHitNormal.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (HitPointFieldMask & whichField))
    {
        _sfHitPoint.copyFromBin(pMem);
    }


}

#if !defined(OSG_FIXED_MFIELDSYNC)
void ParticleCollisionEventBase::executeSyncImpl(      ParticleCollisionEventBase *pOther,
                                        const BitVector         &whichField)
{

    Inherited::executeSyncImpl(pOther, whichField);

    if(FieldBits::NoField != (HitTFieldMask & whichField))
        _sfHitT.syncWith(pOther->_sfHitT);

    if(FieldBits::NoField != (HitNodeFieldMask & whichField))
        _sfHitNode.syncWith(pOther->_sfHitNode);

    if(FieldBits::NoField != (HitPolygonIndexFieldMask & whichField))
        _sfHitPolygonIndex.syncWith(pOther->_sfHitPolygonIndex);

    if(FieldBits::NoField != (HitNormalFieldMask & whichField))
        _sfHitNormal.syncWith(pOther->_sfHitNormal);

    if(FieldBits::NoField != (HitPointFieldMask & whichField))
        _sfHitPoint.syncWith(pOther->_sfHitPoint);


}
#else
void ParticleCollisionEventBase::executeSyncImpl(      ParticleCollisionEventBase *pOther,
                                        const BitVector         &whichField,
                                        const SyncInfo          &sInfo      )
{

    Inherited::executeSyncImpl(pOther, whichField, sInfo);

    if(FieldBits::NoField != (HitTFieldMask & whichField))
        _sfHitT.syncWith(pOther->_sfHitT);

    if(FieldBits::NoField != (HitNodeFieldMask & whichField))
        _sfHitNode.syncWith(pOther->_sfHitNode);

    if(FieldBits::NoField != (HitPolygonIndexFieldMask & whichField))
        _sfHitPolygonIndex.syncWith(pOther->_sfHitPolygonIndex);

    if(FieldBits::NoField != (HitNormalFieldMask & whichField))
        _sfHitNormal.syncWith(pOther->_sfHitNormal);

    if(FieldBits::NoField != (HitPointFieldMask & whichField))
        _sfHitPoint.syncWith(pOther->_sfHitPoint);



}

void ParticleCollisionEventBase::execBeginEditImpl (const BitVector &whichField, 
                                                 UInt32     uiAspect,
                                                 UInt32     uiContainerSize)
{
    Inherited::execBeginEditImpl(whichField, uiAspect, uiContainerSize);

}
#endif



OSG_END_NAMESPACE

#include <OpenSG/OSGSFieldTypeDef.inl>

OSG_BEGIN_NAMESPACE

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldDataTraits<ParticleCollisionEventPtr>::_type("ParticleCollisionEventPtr", "EventPtr");
#endif

OSG_DLLEXPORT_SFIELD_DEF1(ParticleCollisionEventPtr, OSG_PARTICLESYSTEMLIB_DLLTMPLMAPPING);


OSG_END_NAMESPACE

