/*---------------------------------------------------------------------------*\
 *                     OpenSG ToolBox UserInterface                          *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                          Authors: David Kabala                            *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class ParticleCollisionEvent!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <OpenSG/OSGConfig.h>

OSG_BEGIN_NAMESPACE


//! access the type of the class
inline
OSG::FieldContainerType &ParticleCollisionEventBase::getClassType(void)
{
    return _type; 
} 

//! access the numerical type of the class
inline
OSG::UInt32 ParticleCollisionEventBase::getClassTypeId(void) 
{
    return _type.getId(); 
} 

//! create a new instance of the class
inline
ParticleCollisionEventPtr ParticleCollisionEventBase::create(void) 
{
    ParticleCollisionEventPtr fc; 

    if(getClassType().getPrototype() != OSG::NullFC) 
    {
        fc = ParticleCollisionEventPtr::dcast(
            getClassType().getPrototype()-> shallowCopy()); 
    }
    
    return fc; 
}

//! create an empty new instance of the class, do not copy the prototype
inline
ParticleCollisionEventPtr ParticleCollisionEventBase::createEmpty(void) 
{ 
    ParticleCollisionEventPtr returnValue; 
    
    newPtr(returnValue); 

    return returnValue; 
}


/*------------------------------ get -----------------------------------*/

//! Get the ParticleCollisionEvent::_sfHitT field.
inline
const SFReal32 *ParticleCollisionEventBase::getSFHitT(void) const
{
    return &_sfHitT;
}

//! Get the ParticleCollisionEvent::_sfHitT field.
inline
SFReal32 *ParticleCollisionEventBase::editSFHitT(void)
{
    return &_sfHitT;
}

//! Get the ParticleCollisionEvent::_sfHitNode field.
inline
const SFNodePtr *ParticleCollisionEventBase::getSFHitNode(void) const
{
    return &_sfHitNode;
}

//! Get the ParticleCollisionEvent::_sfHitNode field.
inline
SFNodePtr *ParticleCollisionEventBase::editSFHitNode(void)
{
    return &_sfHitNode;
}

//! Get the ParticleCollisionEvent::_sfHitPolygonIndex field.
inline
const SFInt32 *ParticleCollisionEventBase::getSFHitPolygonIndex(void) const
{
    return &_sfHitPolygonIndex;
}

//! Get the ParticleCollisionEvent::_sfHitPolygonIndex field.
inline
SFInt32 *ParticleCollisionEventBase::editSFHitPolygonIndex(void)
{
    return &_sfHitPolygonIndex;
}

//! Get the ParticleCollisionEvent::_sfHitNormal field.
inline
const SFVec3f *ParticleCollisionEventBase::getSFHitNormal(void) const
{
    return &_sfHitNormal;
}

//! Get the ParticleCollisionEvent::_sfHitNormal field.
inline
SFVec3f *ParticleCollisionEventBase::editSFHitNormal(void)
{
    return &_sfHitNormal;
}

//! Get the ParticleCollisionEvent::_sfHitPoint field.
inline
const SFPnt3f *ParticleCollisionEventBase::getSFHitPoint(void) const
{
    return &_sfHitPoint;
}

//! Get the ParticleCollisionEvent::_sfHitPoint field.
inline
SFPnt3f *ParticleCollisionEventBase::editSFHitPoint(void)
{
    return &_sfHitPoint;
}


//! Get the value of the ParticleCollisionEvent::_sfHitT field.
inline
Real32 &ParticleCollisionEventBase::editHitT(void)
{
    return _sfHitT.getValue();
}

//! Get the value of the ParticleCollisionEvent::_sfHitT field.
inline
const Real32 &ParticleCollisionEventBase::getHitT(void) const
{
    return _sfHitT.getValue();
}

//! Set the value of the ParticleCollisionEvent::_sfHitT field.
inline
void ParticleCollisionEventBase::setHitT(const Real32 &value)
{
    _sfHitT.setValue(value);
}

//! Get the value of the ParticleCollisionEvent::_sfHitNode field.
inline
NodePtr &ParticleCollisionEventBase::editHitNode(void)
{
    return _sfHitNode.getValue();
}

//! Get the value of the ParticleCollisionEvent::_sfHitNode field.
inline
const NodePtr &ParticleCollisionEventBase::getHitNode(void) const
{
    return _sfHitNode.getValue();
}

//! Set the value of the ParticleCollisionEvent::_sfHitNode field.
inline
void ParticleCollisionEventBase::setHitNode(const NodePtr &value)
{
    _sfHitNode.setValue(value);
}

//! Get the value of the ParticleCollisionEvent::_sfHitPolygonIndex field.
inline
Int32 &ParticleCollisionEventBase::editHitPolygonIndex(void)
{
    return _sfHitPolygonIndex.getValue();
}

//! Get the value of the ParticleCollisionEvent::_sfHitPolygonIndex field.
inline
const Int32 &ParticleCollisionEventBase::getHitPolygonIndex(void) const
{
    return _sfHitPolygonIndex.getValue();
}

//! Set the value of the ParticleCollisionEvent::_sfHitPolygonIndex field.
inline
void ParticleCollisionEventBase::setHitPolygonIndex(const Int32 &value)
{
    _sfHitPolygonIndex.setValue(value);
}

//! Get the value of the ParticleCollisionEvent::_sfHitNormal field.
inline
Vec3f &ParticleCollisionEventBase::editHitNormal(void)
{
    return _sfHitNormal.getValue();
}

//! Get the value of the ParticleCollisionEvent::_sfHitNormal field.
inline
const Vec3f &ParticleCollisionEventBase::getHitNormal(void) const
{
    return _sfHitNormal.getValue();
}

//! Set the value of the ParticleCollisionEvent::_sfHitNormal field.
inline
void ParticleCollisionEventBase::setHitNormal(const Vec3f &value)
{
    _sfHitNormal.setValue(value);
}

//! Get the value of the ParticleCollisionEvent::_sfHitPoint field.
inline
Pnt3f &ParticleCollisionEventBase::editHitPoint(void)
{
    return _sfHitPoint.getValue();
}

//! Get the value of the ParticleCollisionEvent::_sfHitPoint field.
inline
const Pnt3f &ParticleCollisionEventBase::getHitPoint(void) const
{
    return _sfHitPoint.getValue();
}

//! Set the value of the ParticleCollisionEvent::_sfHitPoint field.
inline
void ParticleCollisionEventBase::setHitPoint(const Pnt3f &value)
{
    _sfHitPoint.setValue(value);
}


OSG_END_NAMESPACE

