/*---------------------------------------------------------------------------*\
 *                     OpenSG ToolBox UserInterface                          *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                         www.vrac.iastate.edu                              *
 *                                                                           *
 *                          Authors: David Kabala                            *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class ParticleEvent
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#ifndef _OSGPARTICLEEVENTBASE_H_
#define _OSGPARTICLEEVENTBASE_H_
#ifdef __sgi
#pragma once
#endif


#include <OpenSG/OSGConfig.h>
#include "OSGParticleSystemDef.h"

#include <OpenSG/OSGBaseTypes.h>
#include <OpenSG/OSGRefPtr.h>
#include <OpenSG/OSGCoredNodePtr.h>

#include <OpenSG/Toolbox/OSGEvent.h> // Parent

#include <OpenSG/OSGInt32Fields.h> // ParticleIndex type
#include <OpenSG/OSGPnt3fFields.h> // ParticlePosition type
#include <OpenSG/OSGPnt3fFields.h> // ParticleSecPosition type
#include <OpenSG/OSGVec3fFields.h> // ParticleNormal type
#include <OpenSG/OSGColor4fFields.h> // ParticleColor type
#include <OpenSG/OSGVec3fFields.h> // ParticleSize type
#include <OpenSG/OSGReal32Fields.h> // ParticleLifespan type
#include <OpenSG/OSGReal32Fields.h> // ParticleAge type
#include <OpenSG/OSGVec3fFields.h> // ParticleVelocity type
#include <OpenSG/OSGVec3fFields.h> // ParticleSecVelocity type
#include <OpenSG/OSGVec3fFields.h> // ParticleAcceleration type
#include <OpenSG/Toolbox/OSGStringToUInt32MapType.h> // ParticleAttributes type

#include "OSGParticleEventFields.h"
OSG_BEGIN_NAMESPACE

class ParticleEvent;
class BinaryDataHandler;

//! \brief ParticleEvent Base Class.

class OSG_PARTICLESYSTEMLIB_DLLMAPPING ParticleEventBase : public Event
{
  private:

    typedef Event    Inherited;

    /*==========================  PUBLIC  =================================*/
  public:

    typedef ParticleEventPtr  Ptr;

    enum
    {
        ParticleIndexFieldId        = Inherited::NextFieldId,
        ParticlePositionFieldId     = ParticleIndexFieldId        + 1,
        ParticleSecPositionFieldId  = ParticlePositionFieldId     + 1,
        ParticleNormalFieldId       = ParticleSecPositionFieldId  + 1,
        ParticleColorFieldId        = ParticleNormalFieldId       + 1,
        ParticleSizeFieldId         = ParticleColorFieldId        + 1,
        ParticleLifespanFieldId     = ParticleSizeFieldId         + 1,
        ParticleAgeFieldId          = ParticleLifespanFieldId     + 1,
        ParticleVelocityFieldId     = ParticleAgeFieldId          + 1,
        ParticleSecVelocityFieldId  = ParticleVelocityFieldId     + 1,
        ParticleAccelerationFieldId = ParticleSecVelocityFieldId  + 1,
        ParticleAttributesFieldId   = ParticleAccelerationFieldId + 1,
        NextFieldId                 = ParticleAttributesFieldId   + 1
    };

    static const OSG::BitVector ParticleIndexFieldMask;
    static const OSG::BitVector ParticlePositionFieldMask;
    static const OSG::BitVector ParticleSecPositionFieldMask;
    static const OSG::BitVector ParticleNormalFieldMask;
    static const OSG::BitVector ParticleColorFieldMask;
    static const OSG::BitVector ParticleSizeFieldMask;
    static const OSG::BitVector ParticleLifespanFieldMask;
    static const OSG::BitVector ParticleAgeFieldMask;
    static const OSG::BitVector ParticleVelocityFieldMask;
    static const OSG::BitVector ParticleSecVelocityFieldMask;
    static const OSG::BitVector ParticleAccelerationFieldMask;
    static const OSG::BitVector ParticleAttributesFieldMask;


    static const OSG::BitVector MTInfluenceMask;

    /*---------------------------------------------------------------------*/
    /*! \name                    Class Get                                 */
    /*! \{                                                                 */

    static        FieldContainerType &getClassType    (void); 
    static        UInt32              getClassTypeId  (void); 

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                FieldContainer Get                            */
    /*! \{                                                                 */

    virtual       FieldContainerType &getType  (void); 
    virtual const FieldContainerType &getType  (void) const; 

    virtual       UInt32              getContainerSize(void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Get                                 */
    /*! \{                                                                 */

     const SFInt32             *getSFParticleIndex  (void) const;
     const SFPnt3f             *getSFParticlePosition(void) const;
     const SFPnt3f             *getSFParticleSecPosition(void) const;
     const SFVec3f             *getSFParticleNormal (void) const;
     const SFColor4f           *getSFParticleColor  (void) const;
     const SFVec3f             *getSFParticleSize   (void) const;
     const SFReal32            *getSFParticleLifespan(void) const;
     const SFReal32            *getSFParticleAge    (void) const;
     const SFVec3f             *getSFParticleVelocity(void) const;
     const SFVec3f             *getSFParticleSecVelocity(void) const;
     const SFVec3f             *getSFParticleAcceleration(void) const;
     const SFStringToUInt32Map *getSFParticleAttributes(void) const;


     const Int32               &getParticleIndex  (void) const;

     const Pnt3f               &getParticlePosition(void) const;

     const Pnt3f               &getParticleSecPosition(void) const;

     const Vec3f               &getParticleNormal (void) const;

     const Color4f             &getParticleColor  (void) const;

     const Vec3f               &getParticleSize   (void) const;

     const Real32              &getParticleLifespan(void) const;

     const Real32              &getParticleAge    (void) const;

     const Vec3f               &getParticleVelocity(void) const;

     const Vec3f               &getParticleSecVelocity(void) const;

     const Vec3f               &getParticleAcceleration(void) const;

     const StringToUInt32Map   &getParticleAttributes(void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Set                                 */
    /*! \{                                                                 */


    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Binary Access                              */
    /*! \{                                                                 */

    virtual UInt32 getBinSize (const BitVector         &whichField);
    virtual void   copyToBin  (      BinaryDataHandler &pMem,
                               const BitVector         &whichField);
    virtual void   copyFromBin(      BinaryDataHandler &pMem,
                               const BitVector         &whichField);


    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Construction                               */
    /*! \{                                                                 */

    static  ParticleEventPtr      create          (void); 
    static  ParticleEventPtr      createEmpty     (void); 

    /*! \}                                                                 */

    /*---------------------------------------------------------------------*/
    /*! \name                       Copy                                   */
    /*! \{                                                                 */

    virtual FieldContainerPtr     shallowCopy     (void) const; 

    /*! \}                                                                 */
    /*=========================  PROTECTED  ===============================*/
  protected:

    /*---------------------------------------------------------------------*/
    /*! \name                      Fields                                  */
    /*! \{                                                                 */

    SFInt32             _sfParticleIndex;
    SFPnt3f             _sfParticlePosition;
    SFPnt3f             _sfParticleSecPosition;
    SFVec3f             _sfParticleNormal;
    SFColor4f           _sfParticleColor;
    SFVec3f             _sfParticleSize;
    SFReal32            _sfParticleLifespan;
    SFReal32            _sfParticleAge;
    SFVec3f             _sfParticleVelocity;
    SFVec3f             _sfParticleSecVelocity;
    SFVec3f             _sfParticleAcceleration;
    SFStringToUInt32Map   _sfParticleAttributes;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Constructors                               */
    /*! \{                                                                 */

    ParticleEventBase(void);
    ParticleEventBase(const ParticleEventBase &source);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Destructors                                */
    /*! \{                                                                 */

    virtual ~ParticleEventBase(void); 

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Get                                 */
    /*! \{                                                                 */

           SFInt32             *editSFParticleIndex  (void);
           SFPnt3f             *editSFParticlePosition(void);
           SFPnt3f             *editSFParticleSecPosition(void);
           SFVec3f             *editSFParticleNormal (void);
           SFColor4f           *editSFParticleColor  (void);
           SFVec3f             *editSFParticleSize   (void);
           SFReal32            *editSFParticleLifespan(void);
           SFReal32            *editSFParticleAge    (void);
           SFVec3f             *editSFParticleVelocity(void);
           SFVec3f             *editSFParticleSecVelocity(void);
           SFVec3f             *editSFParticleAcceleration(void);
           SFStringToUInt32Map *editSFParticleAttributes(void);

           Int32               &editParticleIndex  (void);
           Pnt3f               &editParticlePosition(void);
           Pnt3f               &editParticleSecPosition(void);
           Vec3f               &editParticleNormal (void);
           Color4f             &editParticleColor  (void);
           Vec3f               &editParticleSize   (void);
           Real32              &editParticleLifespan(void);
           Real32              &editParticleAge    (void);
           Vec3f               &editParticleVelocity(void);
           Vec3f               &editParticleSecVelocity(void);
           Vec3f               &editParticleAcceleration(void);
           StringToUInt32Map   &editParticleAttributes(void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Set                                 */
    /*! \{                                                                 */

     void setParticleIndex  (const Int32 &value);
     void setParticlePosition(const Pnt3f &value);
     void setParticleSecPosition(const Pnt3f &value);
     void setParticleNormal (const Vec3f &value);
     void setParticleColor  (const Color4f &value);
     void setParticleSize   (const Vec3f &value);
     void setParticleLifespan(const Real32 &value);
     void setParticleAge    (const Real32 &value);
     void setParticleVelocity(const Vec3f &value);
     void setParticleSecVelocity(const Vec3f &value);
     void setParticleAcceleration(const Vec3f &value);
     void setParticleAttributes(const StringToUInt32Map &value);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

#if !defined(OSG_FIXED_MFIELDSYNC)
    void executeSyncImpl(      ParticleEventBase *pOther,
                         const BitVector         &whichField);

    virtual void   executeSync(      FieldContainer    &other,
                               const BitVector         &whichField);
#else
    void executeSyncImpl(      ParticleEventBase *pOther,
                         const BitVector         &whichField,
                         const SyncInfo          &sInfo     );

    virtual void   executeSync(      FieldContainer    &other,
                               const BitVector         &whichField,
                               const SyncInfo          &sInfo);

    virtual void execBeginEdit     (const BitVector &whichField,
                                          UInt32     uiAspect,
                                          UInt32     uiContainerSize);

            void execBeginEditImpl (const BitVector &whichField,
                                          UInt32     uiAspect,
                                          UInt32     uiContainerSize);

    virtual void onDestroyAspect(UInt32 uiId, UInt32 uiAspect);
#endif

    /*! \}                                                                 */
    /*==========================  PRIVATE  ================================*/
  private:

    friend class FieldContainer;

    static FieldDescription   *_desc[];
    static FieldContainerType  _type;


    // prohibit default functions (move to 'public' if you need one)
    void operator =(const ParticleEventBase &source);
};

//---------------------------------------------------------------------------
//   Exported Types
//---------------------------------------------------------------------------


typedef ParticleEventBase *ParticleEventBaseP;

typedef osgIF<ParticleEventBase::isNodeCore,
              CoredNodePtr<ParticleEvent>,
              FieldContainer::attempt_to_create_CoredNodePtr_on_non_NodeCore_FC
              >::_IRet ParticleEventNodePtr;

typedef RefPtr<ParticleEventPtr> ParticleEventRefPtr;

OSG_END_NAMESPACE

#endif /* _OSGPARTICLEEVENTBASE_H_ */
