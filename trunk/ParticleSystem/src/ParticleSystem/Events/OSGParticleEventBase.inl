/*---------------------------------------------------------------------------*\
 *                     OpenSG ToolBox UserInterface                          *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                          Authors: David Kabala                            *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class ParticleEvent!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <OpenSG/OSGConfig.h>

OSG_BEGIN_NAMESPACE


//! access the type of the class
inline
OSG::FieldContainerType &ParticleEventBase::getClassType(void)
{
    return _type; 
} 

//! access the numerical type of the class
inline
OSG::UInt32 ParticleEventBase::getClassTypeId(void) 
{
    return _type.getId(); 
} 

//! create a new instance of the class
inline
ParticleEventPtr ParticleEventBase::create(void) 
{
    ParticleEventPtr fc; 

    if(getClassType().getPrototype() != OSG::NullFC) 
    {
        fc = ParticleEventPtr::dcast(
            getClassType().getPrototype()-> shallowCopy()); 
    }
    
    return fc; 
}

//! create an empty new instance of the class, do not copy the prototype
inline
ParticleEventPtr ParticleEventBase::createEmpty(void) 
{ 
    ParticleEventPtr returnValue; 
    
    newPtr(returnValue); 

    return returnValue; 
}


/*------------------------------ get -----------------------------------*/

//! Get the ParticleEvent::_sfParticleIndex field.
inline
const SFInt32 *ParticleEventBase::getSFParticleIndex(void) const
{
    return &_sfParticleIndex;
}

//! Get the ParticleEvent::_sfParticleIndex field.
inline
SFInt32 *ParticleEventBase::editSFParticleIndex(void)
{
    return &_sfParticleIndex;
}

//! Get the ParticleEvent::_sfParticlePosition field.
inline
const SFPnt3f *ParticleEventBase::getSFParticlePosition(void) const
{
    return &_sfParticlePosition;
}

//! Get the ParticleEvent::_sfParticlePosition field.
inline
SFPnt3f *ParticleEventBase::editSFParticlePosition(void)
{
    return &_sfParticlePosition;
}

//! Get the ParticleEvent::_sfParticleSecPosition field.
inline
const SFPnt3f *ParticleEventBase::getSFParticleSecPosition(void) const
{
    return &_sfParticleSecPosition;
}

//! Get the ParticleEvent::_sfParticleSecPosition field.
inline
SFPnt3f *ParticleEventBase::editSFParticleSecPosition(void)
{
    return &_sfParticleSecPosition;
}

//! Get the ParticleEvent::_sfParticleNormal field.
inline
const SFVec3f *ParticleEventBase::getSFParticleNormal(void) const
{
    return &_sfParticleNormal;
}

//! Get the ParticleEvent::_sfParticleNormal field.
inline
SFVec3f *ParticleEventBase::editSFParticleNormal(void)
{
    return &_sfParticleNormal;
}

//! Get the ParticleEvent::_sfParticleColor field.
inline
const SFColor4f *ParticleEventBase::getSFParticleColor(void) const
{
    return &_sfParticleColor;
}

//! Get the ParticleEvent::_sfParticleColor field.
inline
SFColor4f *ParticleEventBase::editSFParticleColor(void)
{
    return &_sfParticleColor;
}

//! Get the ParticleEvent::_sfParticleSize field.
inline
const SFVec3f *ParticleEventBase::getSFParticleSize(void) const
{
    return &_sfParticleSize;
}

//! Get the ParticleEvent::_sfParticleSize field.
inline
SFVec3f *ParticleEventBase::editSFParticleSize(void)
{
    return &_sfParticleSize;
}

//! Get the ParticleEvent::_sfParticleLifespan field.
inline
const SFReal32 *ParticleEventBase::getSFParticleLifespan(void) const
{
    return &_sfParticleLifespan;
}

//! Get the ParticleEvent::_sfParticleLifespan field.
inline
SFReal32 *ParticleEventBase::editSFParticleLifespan(void)
{
    return &_sfParticleLifespan;
}

//! Get the ParticleEvent::_sfParticleAge field.
inline
const SFReal32 *ParticleEventBase::getSFParticleAge(void) const
{
    return &_sfParticleAge;
}

//! Get the ParticleEvent::_sfParticleAge field.
inline
SFReal32 *ParticleEventBase::editSFParticleAge(void)
{
    return &_sfParticleAge;
}

//! Get the ParticleEvent::_sfParticleVelocity field.
inline
const SFVec3f *ParticleEventBase::getSFParticleVelocity(void) const
{
    return &_sfParticleVelocity;
}

//! Get the ParticleEvent::_sfParticleVelocity field.
inline
SFVec3f *ParticleEventBase::editSFParticleVelocity(void)
{
    return &_sfParticleVelocity;
}

//! Get the ParticleEvent::_sfParticleSecVelocity field.
inline
const SFVec3f *ParticleEventBase::getSFParticleSecVelocity(void) const
{
    return &_sfParticleSecVelocity;
}

//! Get the ParticleEvent::_sfParticleSecVelocity field.
inline
SFVec3f *ParticleEventBase::editSFParticleSecVelocity(void)
{
    return &_sfParticleSecVelocity;
}

//! Get the ParticleEvent::_sfParticleAcceleration field.
inline
const SFVec3f *ParticleEventBase::getSFParticleAcceleration(void) const
{
    return &_sfParticleAcceleration;
}

//! Get the ParticleEvent::_sfParticleAcceleration field.
inline
SFVec3f *ParticleEventBase::editSFParticleAcceleration(void)
{
    return &_sfParticleAcceleration;
}

//! Get the ParticleEvent::_sfParticleAttributes field.
inline
const SFStringToUInt32Map *ParticleEventBase::getSFParticleAttributes(void) const
{
    return &_sfParticleAttributes;
}

//! Get the ParticleEvent::_sfParticleAttributes field.
inline
SFStringToUInt32Map *ParticleEventBase::editSFParticleAttributes(void)
{
    return &_sfParticleAttributes;
}


//! Get the value of the ParticleEvent::_sfParticleIndex field.
inline
Int32 &ParticleEventBase::editParticleIndex(void)
{
    return _sfParticleIndex.getValue();
}

//! Get the value of the ParticleEvent::_sfParticleIndex field.
inline
const Int32 &ParticleEventBase::getParticleIndex(void) const
{
    return _sfParticleIndex.getValue();
}

//! Set the value of the ParticleEvent::_sfParticleIndex field.
inline
void ParticleEventBase::setParticleIndex(const Int32 &value)
{
    _sfParticleIndex.setValue(value);
}

//! Get the value of the ParticleEvent::_sfParticlePosition field.
inline
Pnt3f &ParticleEventBase::editParticlePosition(void)
{
    return _sfParticlePosition.getValue();
}

//! Get the value of the ParticleEvent::_sfParticlePosition field.
inline
const Pnt3f &ParticleEventBase::getParticlePosition(void) const
{
    return _sfParticlePosition.getValue();
}

//! Set the value of the ParticleEvent::_sfParticlePosition field.
inline
void ParticleEventBase::setParticlePosition(const Pnt3f &value)
{
    _sfParticlePosition.setValue(value);
}

//! Get the value of the ParticleEvent::_sfParticleSecPosition field.
inline
Pnt3f &ParticleEventBase::editParticleSecPosition(void)
{
    return _sfParticleSecPosition.getValue();
}

//! Get the value of the ParticleEvent::_sfParticleSecPosition field.
inline
const Pnt3f &ParticleEventBase::getParticleSecPosition(void) const
{
    return _sfParticleSecPosition.getValue();
}

//! Set the value of the ParticleEvent::_sfParticleSecPosition field.
inline
void ParticleEventBase::setParticleSecPosition(const Pnt3f &value)
{
    _sfParticleSecPosition.setValue(value);
}

//! Get the value of the ParticleEvent::_sfParticleNormal field.
inline
Vec3f &ParticleEventBase::editParticleNormal(void)
{
    return _sfParticleNormal.getValue();
}

//! Get the value of the ParticleEvent::_sfParticleNormal field.
inline
const Vec3f &ParticleEventBase::getParticleNormal(void) const
{
    return _sfParticleNormal.getValue();
}

//! Set the value of the ParticleEvent::_sfParticleNormal field.
inline
void ParticleEventBase::setParticleNormal(const Vec3f &value)
{
    _sfParticleNormal.setValue(value);
}

//! Get the value of the ParticleEvent::_sfParticleColor field.
inline
Color4f &ParticleEventBase::editParticleColor(void)
{
    return _sfParticleColor.getValue();
}

//! Get the value of the ParticleEvent::_sfParticleColor field.
inline
const Color4f &ParticleEventBase::getParticleColor(void) const
{
    return _sfParticleColor.getValue();
}

//! Set the value of the ParticleEvent::_sfParticleColor field.
inline
void ParticleEventBase::setParticleColor(const Color4f &value)
{
    _sfParticleColor.setValue(value);
}

//! Get the value of the ParticleEvent::_sfParticleSize field.
inline
Vec3f &ParticleEventBase::editParticleSize(void)
{
    return _sfParticleSize.getValue();
}

//! Get the value of the ParticleEvent::_sfParticleSize field.
inline
const Vec3f &ParticleEventBase::getParticleSize(void) const
{
    return _sfParticleSize.getValue();
}

//! Set the value of the ParticleEvent::_sfParticleSize field.
inline
void ParticleEventBase::setParticleSize(const Vec3f &value)
{
    _sfParticleSize.setValue(value);
}

//! Get the value of the ParticleEvent::_sfParticleLifespan field.
inline
Real32 &ParticleEventBase::editParticleLifespan(void)
{
    return _sfParticleLifespan.getValue();
}

//! Get the value of the ParticleEvent::_sfParticleLifespan field.
inline
const Real32 &ParticleEventBase::getParticleLifespan(void) const
{
    return _sfParticleLifespan.getValue();
}

//! Set the value of the ParticleEvent::_sfParticleLifespan field.
inline
void ParticleEventBase::setParticleLifespan(const Real32 &value)
{
    _sfParticleLifespan.setValue(value);
}

//! Get the value of the ParticleEvent::_sfParticleAge field.
inline
Real32 &ParticleEventBase::editParticleAge(void)
{
    return _sfParticleAge.getValue();
}

//! Get the value of the ParticleEvent::_sfParticleAge field.
inline
const Real32 &ParticleEventBase::getParticleAge(void) const
{
    return _sfParticleAge.getValue();
}

//! Set the value of the ParticleEvent::_sfParticleAge field.
inline
void ParticleEventBase::setParticleAge(const Real32 &value)
{
    _sfParticleAge.setValue(value);
}

//! Get the value of the ParticleEvent::_sfParticleVelocity field.
inline
Vec3f &ParticleEventBase::editParticleVelocity(void)
{
    return _sfParticleVelocity.getValue();
}

//! Get the value of the ParticleEvent::_sfParticleVelocity field.
inline
const Vec3f &ParticleEventBase::getParticleVelocity(void) const
{
    return _sfParticleVelocity.getValue();
}

//! Set the value of the ParticleEvent::_sfParticleVelocity field.
inline
void ParticleEventBase::setParticleVelocity(const Vec3f &value)
{
    _sfParticleVelocity.setValue(value);
}

//! Get the value of the ParticleEvent::_sfParticleSecVelocity field.
inline
Vec3f &ParticleEventBase::editParticleSecVelocity(void)
{
    return _sfParticleSecVelocity.getValue();
}

//! Get the value of the ParticleEvent::_sfParticleSecVelocity field.
inline
const Vec3f &ParticleEventBase::getParticleSecVelocity(void) const
{
    return _sfParticleSecVelocity.getValue();
}

//! Set the value of the ParticleEvent::_sfParticleSecVelocity field.
inline
void ParticleEventBase::setParticleSecVelocity(const Vec3f &value)
{
    _sfParticleSecVelocity.setValue(value);
}

//! Get the value of the ParticleEvent::_sfParticleAcceleration field.
inline
Vec3f &ParticleEventBase::editParticleAcceleration(void)
{
    return _sfParticleAcceleration.getValue();
}

//! Get the value of the ParticleEvent::_sfParticleAcceleration field.
inline
const Vec3f &ParticleEventBase::getParticleAcceleration(void) const
{
    return _sfParticleAcceleration.getValue();
}

//! Set the value of the ParticleEvent::_sfParticleAcceleration field.
inline
void ParticleEventBase::setParticleAcceleration(const Vec3f &value)
{
    _sfParticleAcceleration.setValue(value);
}

//! Get the value of the ParticleEvent::_sfParticleAttributes field.
inline
StringToUInt32Map &ParticleEventBase::editParticleAttributes(void)
{
    return _sfParticleAttributes.getValue();
}

//! Get the value of the ParticleEvent::_sfParticleAttributes field.
inline
const StringToUInt32Map &ParticleEventBase::getParticleAttributes(void) const
{
    return _sfParticleAttributes.getValue();
}

//! Set the value of the ParticleEvent::_sfParticleAttributes field.
inline
void ParticleEventBase::setParticleAttributes(const StringToUInt32Map &value)
{
    _sfParticleAttributes.setValue(value);
}


OSG_END_NAMESPACE

