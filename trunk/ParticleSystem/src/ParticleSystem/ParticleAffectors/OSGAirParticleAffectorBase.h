/*---------------------------------------------------------------------------*\
 *                     OpenSG ToolBox Particle System                        *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                         www.vrac.iastate.edu                              *
 *                                                                           *
 *                          Authors: David Kabala                            *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class AirParticleAffector
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#ifndef _OSGAIRPARTICLEAFFECTORBASE_H_
#define _OSGAIRPARTICLEAFFECTORBASE_H_
#ifdef __sgi
#pragma once
#endif


#include <OpenSG/OSGConfig.h>
#include "OSGParticleSystemDef.h"

#include <OpenSG/OSGBaseTypes.h>
#include <OpenSG/OSGRefPtr.h>
#include <OpenSG/OSGCoredNodePtr.h>

#include "OSGParticleAffector.h" // Parent

#include <OpenSG/OSGReal32Fields.h> // Magnitude type
#include <OpenSG/OSGVec3fFields.h> // Direction type
#include <OpenSG/OSGReal32Fields.h> // Attenuation type
#include <OpenSG/OSGReal32Fields.h> // Speed type
#include <OpenSG/OSGReal32Fields.h> // Spread type
#include <OpenSG/OSGReal32Fields.h> // MaxDistance type
#include <OpenSG/OSGBoolFields.h> // InheritRotation type
#include <OpenSG/OSGReal32Fields.h> // InheritVelocity type
#include <OpenSG/OSGBoolFields.h> // UseSpread type
#include <OpenSG/OSGBoolFields.h> // ComponentOnly type
#include <OpenSG/OSGNodeFields.h> // Beacon type
#include <OpenSG/OSGPnt3fFields.h> // LastPosition type

#include "OSGAirParticleAffectorFields.h"

OSG_BEGIN_NAMESPACE

class AirParticleAffector;
class BinaryDataHandler;

//! \brief AirParticleAffector Base Class.

class OSG_PARTICLESYSTEMLIB_DLLMAPPING AirParticleAffectorBase : public ParticleAffector
{
  private:

    typedef ParticleAffector    Inherited;

    /*==========================  PUBLIC  =================================*/
  public:

    typedef AirParticleAffectorPtr  Ptr;

    enum
    {
        MagnitudeFieldId       = Inherited::NextFieldId,
        DirectionFieldId       = MagnitudeFieldId       + 1,
        AttenuationFieldId     = DirectionFieldId       + 1,
        SpeedFieldId           = AttenuationFieldId     + 1,
        SpreadFieldId          = SpeedFieldId           + 1,
        MaxDistanceFieldId     = SpreadFieldId          + 1,
        InheritRotationFieldId = MaxDistanceFieldId     + 1,
        InheritVelocityFieldId = InheritRotationFieldId + 1,
        UseSpreadFieldId       = InheritVelocityFieldId + 1,
        ComponentOnlyFieldId   = UseSpreadFieldId       + 1,
        BeaconFieldId          = ComponentOnlyFieldId   + 1,
        LastPositionFieldId    = BeaconFieldId          + 1,
        NextFieldId            = LastPositionFieldId    + 1
    };

    static const OSG::BitVector MagnitudeFieldMask;
    static const OSG::BitVector DirectionFieldMask;
    static const OSG::BitVector AttenuationFieldMask;
    static const OSG::BitVector SpeedFieldMask;
    static const OSG::BitVector SpreadFieldMask;
    static const OSG::BitVector MaxDistanceFieldMask;
    static const OSG::BitVector InheritRotationFieldMask;
    static const OSG::BitVector InheritVelocityFieldMask;
    static const OSG::BitVector UseSpreadFieldMask;
    static const OSG::BitVector ComponentOnlyFieldMask;
    static const OSG::BitVector BeaconFieldMask;
    static const OSG::BitVector LastPositionFieldMask;


    static const OSG::BitVector MTInfluenceMask;

    /*---------------------------------------------------------------------*/
    /*! \name                    Class Get                                 */
    /*! \{                                                                 */

    static        FieldContainerType &getClassType    (void); 
    static        UInt32              getClassTypeId  (void); 

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                FieldContainer Get                            */
    /*! \{                                                                 */

    virtual       FieldContainerType &getType  (void); 
    virtual const FieldContainerType &getType  (void) const; 

    virtual       UInt32              getContainerSize(void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Get                                 */
    /*! \{                                                                 */

           SFReal32            *getSFMagnitude      (void);
           SFVec3f             *getSFDirection      (void);
           SFReal32            *getSFAttenuation    (void);
           SFReal32            *getSFSpeed          (void);
           SFReal32            *getSFSpread         (void);
           SFReal32            *getSFMaxDistance    (void);
           SFBool              *getSFInheritRotation(void);
           SFReal32            *getSFInheritVelocity(void);
           SFBool              *getSFUseSpread      (void);
           SFBool              *getSFComponentOnly  (void);
           SFNodePtr           *getSFBeacon         (void);
           SFPnt3f             *getSFLastPosition   (void);

           Real32              &getMagnitude      (void);
     const Real32              &getMagnitude      (void) const;
           Vec3f               &getDirection      (void);
     const Vec3f               &getDirection      (void) const;
           Real32              &getAttenuation    (void);
     const Real32              &getAttenuation    (void) const;
           Real32              &getSpeed          (void);
     const Real32              &getSpeed          (void) const;
           Real32              &getSpread         (void);
     const Real32              &getSpread         (void) const;
           Real32              &getMaxDistance    (void);
     const Real32              &getMaxDistance    (void) const;
           bool                &getInheritRotation(void);
     const bool                &getInheritRotation(void) const;
           Real32              &getInheritVelocity(void);
     const Real32              &getInheritVelocity(void) const;
           bool                &getUseSpread      (void);
     const bool                &getUseSpread      (void) const;
           bool                &getComponentOnly  (void);
     const bool                &getComponentOnly  (void) const;
           NodePtr             &getBeacon         (void);
     const NodePtr             &getBeacon         (void) const;
           Pnt3f               &getLastPosition   (void);
     const Pnt3f               &getLastPosition   (void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Set                                 */
    /*! \{                                                                 */

     void setMagnitude      ( const Real32 &value );
     void setDirection      ( const Vec3f &value );
     void setAttenuation    ( const Real32 &value );
     void setSpeed          ( const Real32 &value );
     void setSpread         ( const Real32 &value );
     void setMaxDistance    ( const Real32 &value );
     void setInheritRotation( const bool &value );
     void setInheritVelocity( const Real32 &value );
     void setUseSpread      ( const bool &value );
     void setComponentOnly  ( const bool &value );
     void setBeacon         ( const NodePtr &value );
     void setLastPosition   ( const Pnt3f &value );

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Binary Access                              */
    /*! \{                                                                 */

    virtual UInt32 getBinSize (const BitVector         &whichField);
    virtual void   copyToBin  (      BinaryDataHandler &pMem,
                               const BitVector         &whichField);
    virtual void   copyFromBin(      BinaryDataHandler &pMem,
                               const BitVector         &whichField);


    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Construction                               */
    /*! \{                                                                 */

    static  AirParticleAffectorPtr      create          (void); 
    static  AirParticleAffectorPtr      createEmpty     (void); 

    /*! \}                                                                 */

    /*---------------------------------------------------------------------*/
    /*! \name                       Copy                                   */
    /*! \{                                                                 */

    virtual FieldContainerPtr     shallowCopy     (void) const; 

    /*! \}                                                                 */
    /*=========================  PROTECTED  ===============================*/
  protected:

    /*---------------------------------------------------------------------*/
    /*! \name                      Fields                                  */
    /*! \{                                                                 */

    SFReal32            _sfMagnitude;
    SFVec3f             _sfDirection;
    SFReal32            _sfAttenuation;
    SFReal32            _sfSpeed;
    SFReal32            _sfSpread;
    SFReal32            _sfMaxDistance;
    SFBool              _sfInheritRotation;
    SFReal32            _sfInheritVelocity;
    SFBool              _sfUseSpread;
    SFBool              _sfComponentOnly;
    SFNodePtr           _sfBeacon;
    SFPnt3f             _sfLastPosition;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Constructors                               */
    /*! \{                                                                 */

    AirParticleAffectorBase(void);
    AirParticleAffectorBase(const AirParticleAffectorBase &source);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Destructors                                */
    /*! \{                                                                 */

    virtual ~AirParticleAffectorBase(void); 

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

#if !defined(OSG_FIXED_MFIELDSYNC)
    void executeSyncImpl(      AirParticleAffectorBase *pOther,
                         const BitVector         &whichField);

    virtual void   executeSync(      FieldContainer    &other,
                               const BitVector         &whichField);
#else
    void executeSyncImpl(      AirParticleAffectorBase *pOther,
                         const BitVector         &whichField,
                         const SyncInfo          &sInfo     );

    virtual void   executeSync(      FieldContainer    &other,
                               const BitVector         &whichField,
                               const SyncInfo          &sInfo);

    virtual void execBeginEdit     (const BitVector &whichField,
                                          UInt32     uiAspect,
                                          UInt32     uiContainerSize);

            void execBeginEditImpl (const BitVector &whichField,
                                          UInt32     uiAspect,
                                          UInt32     uiContainerSize);

    virtual void onDestroyAspect(UInt32 uiId, UInt32 uiAspect);
#endif

    /*! \}                                                                 */
    /*==========================  PRIVATE  ================================*/
  private:

    friend class FieldContainer;

    static FieldDescription   *_desc[];
    static FieldContainerType  _type;


    // prohibit default functions (move to 'public' if you need one)
    void operator =(const AirParticleAffectorBase &source);
};

//---------------------------------------------------------------------------
//   Exported Types
//---------------------------------------------------------------------------


typedef AirParticleAffectorBase *AirParticleAffectorBaseP;

typedef osgIF<AirParticleAffectorBase::isNodeCore,
              CoredNodePtr<AirParticleAffector>,
              FieldContainer::attempt_to_create_CoredNodePtr_on_non_NodeCore_FC
              >::_IRet AirParticleAffectorNodePtr;

typedef RefPtr<AirParticleAffectorPtr> AirParticleAffectorRefPtr;

OSG_END_NAMESPACE

#define OSGAIRPARTICLEAFFECTORBASE_HEADER_CVSID "@(#)$Id: FCBaseTemplate_h.h,v 1.40 2005/07/20 00:10:14 vossg Exp $"

#endif /* _OSGAIRPARTICLEAFFECTORBASE_H_ */
