/*---------------------------------------------------------------------------*\
 *                     OpenSG ToolBox Particle System                        *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                         www.vrac.iastate.edu                              *
 *                                                                           *
 *                          Authors: David Kabala                            *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class UniformParticleAffector!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#define OSG_COMPILEUNIFORMPARTICLEAFFECTORINST

#include <stdlib.h>
#include <stdio.h>

#include <OpenSG/OSGConfig.h>

#include "OSGUniformParticleAffectorBase.h"
#include "OSGUniformParticleAffector.h"


OSG_BEGIN_NAMESPACE

const OSG::BitVector  UniformParticleAffectorBase::MagnitudeFieldMask = 
    (TypeTraits<BitVector>::One << UniformParticleAffectorBase::MagnitudeFieldId);

const OSG::BitVector  UniformParticleAffectorBase::DirectionFieldMask = 
    (TypeTraits<BitVector>::One << UniformParticleAffectorBase::DirectionFieldId);

const OSG::BitVector  UniformParticleAffectorBase::AttenuationFieldMask = 
    (TypeTraits<BitVector>::One << UniformParticleAffectorBase::AttenuationFieldId);

const OSG::BitVector  UniformParticleAffectorBase::MaxDistanceFieldMask = 
    (TypeTraits<BitVector>::One << UniformParticleAffectorBase::MaxDistanceFieldId);

const OSG::BitVector  UniformParticleAffectorBase::BeaconFieldMask = 
    (TypeTraits<BitVector>::One << UniformParticleAffectorBase::BeaconFieldId);

const OSG::BitVector  UniformParticleAffectorBase::ParticleMassFieldMask = 
    (TypeTraits<BitVector>::One << UniformParticleAffectorBase::ParticleMassFieldId);

const OSG::BitVector UniformParticleAffectorBase::MTInfluenceMask = 
    (Inherited::MTInfluenceMask) | 
    (static_cast<BitVector>(0x0) << Inherited::NextFieldId); 


// Field descriptions

/*! \var Real32          UniformParticleAffectorBase::_sfMagnitude
    
*/
/*! \var Vec3f           UniformParticleAffectorBase::_sfDirection
    
*/
/*! \var Real32          UniformParticleAffectorBase::_sfAttenuation
    
*/
/*! \var Real32          UniformParticleAffectorBase::_sfMaxDistance
    
*/
/*! \var NodePtr         UniformParticleAffectorBase::_sfBeacon
    
*/
/*! \var Real32          UniformParticleAffectorBase::_sfParticleMass
    
*/

//! UniformParticleAffector description

FieldDescription *UniformParticleAffectorBase::_desc[] = 
{
    new FieldDescription(SFReal32::getClassType(), 
                     "Magnitude", 
                     MagnitudeFieldId, MagnitudeFieldMask,
                     false,
                     (FieldAccessMethod) &UniformParticleAffectorBase::getSFMagnitude),
    new FieldDescription(SFVec3f::getClassType(), 
                     "Direction", 
                     DirectionFieldId, DirectionFieldMask,
                     false,
                     (FieldAccessMethod) &UniformParticleAffectorBase::getSFDirection),
    new FieldDescription(SFReal32::getClassType(), 
                     "Attenuation", 
                     AttenuationFieldId, AttenuationFieldMask,
                     false,
                     (FieldAccessMethod) &UniformParticleAffectorBase::getSFAttenuation),
    new FieldDescription(SFReal32::getClassType(), 
                     "MaxDistance", 
                     MaxDistanceFieldId, MaxDistanceFieldMask,
                     false,
                     (FieldAccessMethod) &UniformParticleAffectorBase::getSFMaxDistance),
    new FieldDescription(SFNodePtr::getClassType(), 
                     "Beacon", 
                     BeaconFieldId, BeaconFieldMask,
                     false,
                     (FieldAccessMethod) &UniformParticleAffectorBase::getSFBeacon),
    new FieldDescription(SFReal32::getClassType(), 
                     "ParticleMass", 
                     ParticleMassFieldId, ParticleMassFieldMask,
                     false,
                     (FieldAccessMethod) &UniformParticleAffectorBase::getSFParticleMass)
};


FieldContainerType UniformParticleAffectorBase::_type(
    "UniformParticleAffector",
    "ParticleAffector",
    NULL,
    (PrototypeCreateF) &UniformParticleAffectorBase::createEmpty,
    UniformParticleAffector::initMethod,
    _desc,
    sizeof(_desc));

//OSG_FIELD_CONTAINER_DEF(UniformParticleAffectorBase, UniformParticleAffectorPtr)

/*------------------------------ get -----------------------------------*/

FieldContainerType &UniformParticleAffectorBase::getType(void) 
{
    return _type; 
} 

const FieldContainerType &UniformParticleAffectorBase::getType(void) const 
{
    return _type;
} 


FieldContainerPtr UniformParticleAffectorBase::shallowCopy(void) const 
{ 
    UniformParticleAffectorPtr returnValue; 

    newPtr(returnValue, dynamic_cast<const UniformParticleAffector *>(this)); 

    return returnValue; 
}

UInt32 UniformParticleAffectorBase::getContainerSize(void) const 
{ 
    return sizeof(UniformParticleAffector); 
}


#if !defined(OSG_FIXED_MFIELDSYNC)
void UniformParticleAffectorBase::executeSync(      FieldContainer &other,
                                    const BitVector      &whichField)
{
    this->executeSyncImpl((UniformParticleAffectorBase *) &other, whichField);
}
#else
void UniformParticleAffectorBase::executeSync(      FieldContainer &other,
                                    const BitVector      &whichField,                                    const SyncInfo       &sInfo     )
{
    this->executeSyncImpl((UniformParticleAffectorBase *) &other, whichField, sInfo);
}
void UniformParticleAffectorBase::execBeginEdit(const BitVector &whichField, 
                                            UInt32     uiAspect,
                                            UInt32     uiContainerSize) 
{
    this->execBeginEditImpl(whichField, uiAspect, uiContainerSize);
}

void UniformParticleAffectorBase::onDestroyAspect(UInt32 uiId, UInt32 uiAspect)
{
    Inherited::onDestroyAspect(uiId, uiAspect);

}
#endif

/*------------------------- constructors ----------------------------------*/

#ifdef OSG_WIN32_ICL
#pragma warning (disable : 383)
#endif

UniformParticleAffectorBase::UniformParticleAffectorBase(void) :
    _sfMagnitude              (Real32(5.00)), 
    _sfDirection              (Vec3f(1.0, 0.0, 0.0)), 
    _sfAttenuation            (Real32(2.0)), 
    _sfMaxDistance            (Real32(-1.0)), 
    _sfBeacon                 (NodePtr(NullFC)), 
    _sfParticleMass           (Real32(1.0)), 
    Inherited() 
{
}

#ifdef OSG_WIN32_ICL
#pragma warning (default : 383)
#endif

UniformParticleAffectorBase::UniformParticleAffectorBase(const UniformParticleAffectorBase &source) :
    _sfMagnitude              (source._sfMagnitude              ), 
    _sfDirection              (source._sfDirection              ), 
    _sfAttenuation            (source._sfAttenuation            ), 
    _sfMaxDistance            (source._sfMaxDistance            ), 
    _sfBeacon                 (source._sfBeacon                 ), 
    _sfParticleMass           (source._sfParticleMass           ), 
    Inherited                 (source)
{
}

/*-------------------------- destructors ----------------------------------*/

UniformParticleAffectorBase::~UniformParticleAffectorBase(void)
{
}

/*------------------------------ access -----------------------------------*/

UInt32 UniformParticleAffectorBase::getBinSize(const BitVector &whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (MagnitudeFieldMask & whichField))
    {
        returnValue += _sfMagnitude.getBinSize();
    }

    if(FieldBits::NoField != (DirectionFieldMask & whichField))
    {
        returnValue += _sfDirection.getBinSize();
    }

    if(FieldBits::NoField != (AttenuationFieldMask & whichField))
    {
        returnValue += _sfAttenuation.getBinSize();
    }

    if(FieldBits::NoField != (MaxDistanceFieldMask & whichField))
    {
        returnValue += _sfMaxDistance.getBinSize();
    }

    if(FieldBits::NoField != (BeaconFieldMask & whichField))
    {
        returnValue += _sfBeacon.getBinSize();
    }

    if(FieldBits::NoField != (ParticleMassFieldMask & whichField))
    {
        returnValue += _sfParticleMass.getBinSize();
    }


    return returnValue;
}

void UniformParticleAffectorBase::copyToBin(      BinaryDataHandler &pMem,
                                  const BitVector         &whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (MagnitudeFieldMask & whichField))
    {
        _sfMagnitude.copyToBin(pMem);
    }

    if(FieldBits::NoField != (DirectionFieldMask & whichField))
    {
        _sfDirection.copyToBin(pMem);
    }

    if(FieldBits::NoField != (AttenuationFieldMask & whichField))
    {
        _sfAttenuation.copyToBin(pMem);
    }

    if(FieldBits::NoField != (MaxDistanceFieldMask & whichField))
    {
        _sfMaxDistance.copyToBin(pMem);
    }

    if(FieldBits::NoField != (BeaconFieldMask & whichField))
    {
        _sfBeacon.copyToBin(pMem);
    }

    if(FieldBits::NoField != (ParticleMassFieldMask & whichField))
    {
        _sfParticleMass.copyToBin(pMem);
    }


}

void UniformParticleAffectorBase::copyFromBin(      BinaryDataHandler &pMem,
                                    const BitVector    &whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (MagnitudeFieldMask & whichField))
    {
        _sfMagnitude.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (DirectionFieldMask & whichField))
    {
        _sfDirection.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (AttenuationFieldMask & whichField))
    {
        _sfAttenuation.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (MaxDistanceFieldMask & whichField))
    {
        _sfMaxDistance.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (BeaconFieldMask & whichField))
    {
        _sfBeacon.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (ParticleMassFieldMask & whichField))
    {
        _sfParticleMass.copyFromBin(pMem);
    }


}

#if !defined(OSG_FIXED_MFIELDSYNC)
void UniformParticleAffectorBase::executeSyncImpl(      UniformParticleAffectorBase *pOther,
                                        const BitVector         &whichField)
{

    Inherited::executeSyncImpl(pOther, whichField);

    if(FieldBits::NoField != (MagnitudeFieldMask & whichField))
        _sfMagnitude.syncWith(pOther->_sfMagnitude);

    if(FieldBits::NoField != (DirectionFieldMask & whichField))
        _sfDirection.syncWith(pOther->_sfDirection);

    if(FieldBits::NoField != (AttenuationFieldMask & whichField))
        _sfAttenuation.syncWith(pOther->_sfAttenuation);

    if(FieldBits::NoField != (MaxDistanceFieldMask & whichField))
        _sfMaxDistance.syncWith(pOther->_sfMaxDistance);

    if(FieldBits::NoField != (BeaconFieldMask & whichField))
        _sfBeacon.syncWith(pOther->_sfBeacon);

    if(FieldBits::NoField != (ParticleMassFieldMask & whichField))
        _sfParticleMass.syncWith(pOther->_sfParticleMass);


}
#else
void UniformParticleAffectorBase::executeSyncImpl(      UniformParticleAffectorBase *pOther,
                                        const BitVector         &whichField,
                                        const SyncInfo          &sInfo      )
{

    Inherited::executeSyncImpl(pOther, whichField, sInfo);

    if(FieldBits::NoField != (MagnitudeFieldMask & whichField))
        _sfMagnitude.syncWith(pOther->_sfMagnitude);

    if(FieldBits::NoField != (DirectionFieldMask & whichField))
        _sfDirection.syncWith(pOther->_sfDirection);

    if(FieldBits::NoField != (AttenuationFieldMask & whichField))
        _sfAttenuation.syncWith(pOther->_sfAttenuation);

    if(FieldBits::NoField != (MaxDistanceFieldMask & whichField))
        _sfMaxDistance.syncWith(pOther->_sfMaxDistance);

    if(FieldBits::NoField != (BeaconFieldMask & whichField))
        _sfBeacon.syncWith(pOther->_sfBeacon);

    if(FieldBits::NoField != (ParticleMassFieldMask & whichField))
        _sfParticleMass.syncWith(pOther->_sfParticleMass);



}

void UniformParticleAffectorBase::execBeginEditImpl (const BitVector &whichField, 
                                                 UInt32     uiAspect,
                                                 UInt32     uiContainerSize)
{
    Inherited::execBeginEditImpl(whichField, uiAspect, uiContainerSize);

}
#endif



OSG_END_NAMESPACE

#include <OpenSG/OSGSFieldTypeDef.inl>
#include <OpenSG/OSGMFieldTypeDef.inl>

OSG_BEGIN_NAMESPACE

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldDataTraits<UniformParticleAffectorPtr>::_type("UniformParticleAffectorPtr", "ParticleAffectorPtr");
#endif

OSG_DLLEXPORT_SFIELD_DEF1(UniformParticleAffectorPtr, OSG_PARTICLESYSTEMLIB_DLLTMPLMAPPING);
OSG_DLLEXPORT_MFIELD_DEF1(UniformParticleAffectorPtr, OSG_PARTICLESYSTEMLIB_DLLTMPLMAPPING);


/*------------------------------------------------------------------------*/
/*                              cvs id's                                  */

#ifdef OSG_SGI_CC
#pragma set woff 1174
#endif

#ifdef OSG_LINUX_ICC
#pragma warning( disable : 177 )
#endif

namespace
{
    static Char8 cvsid_cpp       [] = "@(#)$Id: FCBaseTemplate_cpp.h,v 1.47 2006/03/17 17:03:19 pdaehne Exp $";
    static Char8 cvsid_hpp       [] = OSGUNIFORMPARTICLEAFFECTORBASE_HEADER_CVSID;
    static Char8 cvsid_inl       [] = OSGUNIFORMPARTICLEAFFECTORBASE_INLINE_CVSID;

    static Char8 cvsid_fields_hpp[] = OSGUNIFORMPARTICLEAFFECTORFIELDS_HEADER_CVSID;
}

OSG_END_NAMESPACE

