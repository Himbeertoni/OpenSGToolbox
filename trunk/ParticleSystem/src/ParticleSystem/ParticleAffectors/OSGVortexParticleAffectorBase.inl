/*---------------------------------------------------------------------------*\
 *                     OpenSG ToolBox Particle System                        *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                          Authors: David Kabala                            *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class VortexParticleAffector!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <OpenSG/OSGConfig.h>

OSG_BEGIN_NAMESPACE


//! access the type of the class
inline
OSG::FieldContainerType &VortexParticleAffectorBase::getClassType(void)
{
    return _type; 
} 

//! access the numerical type of the class
inline
OSG::UInt32 VortexParticleAffectorBase::getClassTypeId(void) 
{
    return _type.getId(); 
} 

//! create a new instance of the class
inline
VortexParticleAffectorPtr VortexParticleAffectorBase::create(void) 
{
    VortexParticleAffectorPtr fc; 

    if(getClassType().getPrototype() != OSG::NullFC) 
    {
        fc = VortexParticleAffectorPtr::dcast(
            getClassType().getPrototype()-> shallowCopy()); 
    }
    
    return fc; 
}

//! create an empty new instance of the class, do not copy the prototype
inline
VortexParticleAffectorPtr VortexParticleAffectorBase::createEmpty(void) 
{ 
    VortexParticleAffectorPtr returnValue; 
    
    newPtr(returnValue); 

    return returnValue; 
}


/*------------------------------ get -----------------------------------*/

//! Get the VortexParticleAffector::_sfMagnitude field.
inline
SFReal32 *VortexParticleAffectorBase::getSFMagnitude(void)
{
    return &_sfMagnitude;
}

//! Get the VortexParticleAffector::_sfVortexAxis field.
inline
SFVec3f *VortexParticleAffectorBase::getSFVortexAxis(void)
{
    return &_sfVortexAxis;
}

//! Get the VortexParticleAffector::_sfAttenuation field.
inline
SFReal32 *VortexParticleAffectorBase::getSFAttenuation(void)
{
    return &_sfAttenuation;
}

//! Get the VortexParticleAffector::_sfMaxDistance field.
inline
SFReal32 *VortexParticleAffectorBase::getSFMaxDistance(void)
{
    return &_sfMaxDistance;
}

//! Get the VortexParticleAffector::_sfBeacon field.
inline
SFNodePtr *VortexParticleAffectorBase::getSFBeacon(void)
{
    return &_sfBeacon;
}


//! Get the value of the VortexParticleAffector::_sfMagnitude field.
inline
Real32 &VortexParticleAffectorBase::getMagnitude(void)
{
    return _sfMagnitude.getValue();
}

//! Get the value of the VortexParticleAffector::_sfMagnitude field.
inline
const Real32 &VortexParticleAffectorBase::getMagnitude(void) const
{
    return _sfMagnitude.getValue();
}

//! Set the value of the VortexParticleAffector::_sfMagnitude field.
inline
void VortexParticleAffectorBase::setMagnitude(const Real32 &value)
{
    _sfMagnitude.setValue(value);
}

//! Get the value of the VortexParticleAffector::_sfVortexAxis field.
inline
Vec3f &VortexParticleAffectorBase::getVortexAxis(void)
{
    return _sfVortexAxis.getValue();
}

//! Get the value of the VortexParticleAffector::_sfVortexAxis field.
inline
const Vec3f &VortexParticleAffectorBase::getVortexAxis(void) const
{
    return _sfVortexAxis.getValue();
}

//! Set the value of the VortexParticleAffector::_sfVortexAxis field.
inline
void VortexParticleAffectorBase::setVortexAxis(const Vec3f &value)
{
    _sfVortexAxis.setValue(value);
}

//! Get the value of the VortexParticleAffector::_sfAttenuation field.
inline
Real32 &VortexParticleAffectorBase::getAttenuation(void)
{
    return _sfAttenuation.getValue();
}

//! Get the value of the VortexParticleAffector::_sfAttenuation field.
inline
const Real32 &VortexParticleAffectorBase::getAttenuation(void) const
{
    return _sfAttenuation.getValue();
}

//! Set the value of the VortexParticleAffector::_sfAttenuation field.
inline
void VortexParticleAffectorBase::setAttenuation(const Real32 &value)
{
    _sfAttenuation.setValue(value);
}

//! Get the value of the VortexParticleAffector::_sfMaxDistance field.
inline
Real32 &VortexParticleAffectorBase::getMaxDistance(void)
{
    return _sfMaxDistance.getValue();
}

//! Get the value of the VortexParticleAffector::_sfMaxDistance field.
inline
const Real32 &VortexParticleAffectorBase::getMaxDistance(void) const
{
    return _sfMaxDistance.getValue();
}

//! Set the value of the VortexParticleAffector::_sfMaxDistance field.
inline
void VortexParticleAffectorBase::setMaxDistance(const Real32 &value)
{
    _sfMaxDistance.setValue(value);
}

//! Get the value of the VortexParticleAffector::_sfBeacon field.
inline
NodePtr &VortexParticleAffectorBase::getBeacon(void)
{
    return _sfBeacon.getValue();
}

//! Get the value of the VortexParticleAffector::_sfBeacon field.
inline
const NodePtr &VortexParticleAffectorBase::getBeacon(void) const
{
    return _sfBeacon.getValue();
}

//! Set the value of the VortexParticleAffector::_sfBeacon field.
inline
void VortexParticleAffectorBase::setBeacon(const NodePtr &value)
{
    _sfBeacon.setValue(value);
}


OSG_END_NAMESPACE

#define OSGVORTEXPARTICLEAFFECTORBASE_INLINE_CVSID "@(#)$Id: FCBaseTemplate_inl.h,v 1.20 2002/12/04 14:22:22 dirk Exp $"

