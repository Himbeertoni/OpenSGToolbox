/*---------------------------------------------------------------------------*\
 *                     OpenSG ToolBox Particle System                        *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                         www.vrac.iastate.edu                              *
 *                                                                           *
 *                          Authors: David Kabala                            *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class SurfaceParticleGenerator!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#define OSG_COMPILESURFACEPARTICLEGENERATORINST

#include <stdlib.h>
#include <stdio.h>

#include <OpenSG/OSGConfig.h>

#include "OSGSurfaceParticleGeneratorBase.h"
#include "OSGSurfaceParticleGenerator.h"


OSG_BEGIN_NAMESPACE

const OSG::BitVector  SurfaceParticleGeneratorBase::PositionVelocityFunctionFieldMask = 
    (TypeTraits<BitVector>::One << SurfaceParticleGeneratorBase::PositionVelocityFunctionFieldId);

const OSG::BitVector  SurfaceParticleGeneratorBase::NormalFunctionFieldMask = 
    (TypeTraits<BitVector>::One << SurfaceParticleGeneratorBase::NormalFunctionFieldId);

const OSG::BitVector  SurfaceParticleGeneratorBase::ColorFunctionFieldMask = 
    (TypeTraits<BitVector>::One << SurfaceParticleGeneratorBase::ColorFunctionFieldId);

const OSG::BitVector  SurfaceParticleGeneratorBase::SizeFunctionFieldMask = 
    (TypeTraits<BitVector>::One << SurfaceParticleGeneratorBase::SizeFunctionFieldId);

const OSG::BitVector  SurfaceParticleGeneratorBase::LifespanFunctionFieldMask = 
    (TypeTraits<BitVector>::One << SurfaceParticleGeneratorBase::LifespanFunctionFieldId);

const OSG::BitVector  SurfaceParticleGeneratorBase::AgeFunctionFieldMask = 
    (TypeTraits<BitVector>::One << SurfaceParticleGeneratorBase::AgeFunctionFieldId);

const OSG::BitVector  SurfaceParticleGeneratorBase::SpeedFunctionFieldMask = 
    (TypeTraits<BitVector>::One << SurfaceParticleGeneratorBase::SpeedFunctionFieldId);

const OSG::BitVector  SurfaceParticleGeneratorBase::AccelerationFunctionFieldMask = 
    (TypeTraits<BitVector>::One << SurfaceParticleGeneratorBase::AccelerationFunctionFieldId);

const OSG::BitVector  SurfaceParticleGeneratorBase::PropertyFunctionFieldMask = 
    (TypeTraits<BitVector>::One << SurfaceParticleGeneratorBase::PropertyFunctionFieldId);

const OSG::BitVector SurfaceParticleGeneratorBase::MTInfluenceMask = 
    (Inherited::MTInfluenceMask) | 
    (static_cast<BitVector>(0x0) << Inherited::NextFieldId); 


// Field descriptions

/*! \var FunctionPtr     SurfaceParticleGeneratorBase::_sfPositionVelocityFunction
    
*/
/*! \var FunctionPtr     SurfaceParticleGeneratorBase::_sfNormalFunction
    
*/
/*! \var FunctionPtr     SurfaceParticleGeneratorBase::_sfColorFunction
    
*/
/*! \var FunctionPtr     SurfaceParticleGeneratorBase::_sfSizeFunction
    
*/
/*! \var FunctionPtr     SurfaceParticleGeneratorBase::_sfLifespanFunction
    
*/
/*! \var FunctionPtr     SurfaceParticleGeneratorBase::_sfAgeFunction
    
*/
/*! \var FunctionPtr     SurfaceParticleGeneratorBase::_sfSpeedFunction
    
*/
/*! \var FunctionPtr     SurfaceParticleGeneratorBase::_sfAccelerationFunction
    
*/
/*! \var FunctionPtr     SurfaceParticleGeneratorBase::_sfPropertyFunction
    
*/

//! SurfaceParticleGenerator description

FieldDescription *SurfaceParticleGeneratorBase::_desc[] = 
{
    new FieldDescription(SFFunctionPtr::getClassType(), 
                     "PositionVelocityFunction", 
                     PositionVelocityFunctionFieldId, PositionVelocityFunctionFieldMask,
                     false,
                     (FieldAccessMethod) &SurfaceParticleGeneratorBase::getSFPositionVelocityFunction),
    new FieldDescription(SFFunctionPtr::getClassType(), 
                     "NormalFunction", 
                     NormalFunctionFieldId, NormalFunctionFieldMask,
                     false,
                     (FieldAccessMethod) &SurfaceParticleGeneratorBase::getSFNormalFunction),
    new FieldDescription(SFFunctionPtr::getClassType(), 
                     "ColorFunction", 
                     ColorFunctionFieldId, ColorFunctionFieldMask,
                     false,
                     (FieldAccessMethod) &SurfaceParticleGeneratorBase::getSFColorFunction),
    new FieldDescription(SFFunctionPtr::getClassType(), 
                     "SizeFunction", 
                     SizeFunctionFieldId, SizeFunctionFieldMask,
                     false,
                     (FieldAccessMethod) &SurfaceParticleGeneratorBase::getSFSizeFunction),
    new FieldDescription(SFFunctionPtr::getClassType(), 
                     "LifespanFunction", 
                     LifespanFunctionFieldId, LifespanFunctionFieldMask,
                     false,
                     (FieldAccessMethod) &SurfaceParticleGeneratorBase::getSFLifespanFunction),
    new FieldDescription(SFFunctionPtr::getClassType(), 
                     "AgeFunction", 
                     AgeFunctionFieldId, AgeFunctionFieldMask,
                     false,
                     (FieldAccessMethod) &SurfaceParticleGeneratorBase::getSFAgeFunction),
    new FieldDescription(SFFunctionPtr::getClassType(), 
                     "SpeedFunction", 
                     SpeedFunctionFieldId, SpeedFunctionFieldMask,
                     false,
                     (FieldAccessMethod) &SurfaceParticleGeneratorBase::getSFSpeedFunction),
    new FieldDescription(SFFunctionPtr::getClassType(), 
                     "AccelerationFunction", 
                     AccelerationFunctionFieldId, AccelerationFunctionFieldMask,
                     false,
                     (FieldAccessMethod) &SurfaceParticleGeneratorBase::getSFAccelerationFunction),
    new FieldDescription(SFFunctionPtr::getClassType(), 
                     "PropertyFunction", 
                     PropertyFunctionFieldId, PropertyFunctionFieldMask,
                     false,
                     (FieldAccessMethod) &SurfaceParticleGeneratorBase::getSFPropertyFunction)
};


FieldContainerType SurfaceParticleGeneratorBase::_type(
    "SurfaceParticleGenerator",
    "ParticleGenerator",
    NULL,
    (PrototypeCreateF) &SurfaceParticleGeneratorBase::createEmpty,
    SurfaceParticleGenerator::initMethod,
    _desc,
    sizeof(_desc));

//OSG_FIELD_CONTAINER_DEF(SurfaceParticleGeneratorBase, SurfaceParticleGeneratorPtr)

/*------------------------------ get -----------------------------------*/

FieldContainerType &SurfaceParticleGeneratorBase::getType(void) 
{
    return _type; 
} 

const FieldContainerType &SurfaceParticleGeneratorBase::getType(void) const 
{
    return _type;
} 


FieldContainerPtr SurfaceParticleGeneratorBase::shallowCopy(void) const 
{ 
    SurfaceParticleGeneratorPtr returnValue; 

    newPtr(returnValue, dynamic_cast<const SurfaceParticleGenerator *>(this)); 

    return returnValue; 
}

UInt32 SurfaceParticleGeneratorBase::getContainerSize(void) const 
{ 
    return sizeof(SurfaceParticleGenerator); 
}


#if !defined(OSG_FIXED_MFIELDSYNC)
void SurfaceParticleGeneratorBase::executeSync(      FieldContainer &other,
                                    const BitVector      &whichField)
{
    this->executeSyncImpl((SurfaceParticleGeneratorBase *) &other, whichField);
}
#else
void SurfaceParticleGeneratorBase::executeSync(      FieldContainer &other,
                                    const BitVector      &whichField,                                    const SyncInfo       &sInfo     )
{
    this->executeSyncImpl((SurfaceParticleGeneratorBase *) &other, whichField, sInfo);
}
void SurfaceParticleGeneratorBase::execBeginEdit(const BitVector &whichField, 
                                            UInt32     uiAspect,
                                            UInt32     uiContainerSize) 
{
    this->execBeginEditImpl(whichField, uiAspect, uiContainerSize);
}

void SurfaceParticleGeneratorBase::onDestroyAspect(UInt32 uiId, UInt32 uiAspect)
{
    Inherited::onDestroyAspect(uiId, uiAspect);

}
#endif

/*------------------------- constructors ----------------------------------*/

#ifdef OSG_WIN32_ICL
#pragma warning (disable : 383)
#endif

SurfaceParticleGeneratorBase::SurfaceParticleGeneratorBase(void) :
    _sfPositionVelocityFunction(FunctionPtr(NullFC)), 
    _sfNormalFunction         (FunctionPtr(NullFC)), 
    _sfColorFunction          (FunctionPtr(NullFC)), 
    _sfSizeFunction           (FunctionPtr(NullFC)), 
    _sfLifespanFunction       (FunctionPtr(NullFC)), 
    _sfAgeFunction            (FunctionPtr(NullFC)), 
    _sfSpeedFunction          (FunctionPtr(NullFC)), 
    _sfAccelerationFunction   (FunctionPtr(NullFC)), 
    _sfPropertyFunction       (FunctionPtr(NullFC)), 
    Inherited() 
{
}

#ifdef OSG_WIN32_ICL
#pragma warning (default : 383)
#endif

SurfaceParticleGeneratorBase::SurfaceParticleGeneratorBase(const SurfaceParticleGeneratorBase &source) :
    _sfPositionVelocityFunction(source._sfPositionVelocityFunction), 
    _sfNormalFunction         (source._sfNormalFunction         ), 
    _sfColorFunction          (source._sfColorFunction          ), 
    _sfSizeFunction           (source._sfSizeFunction           ), 
    _sfLifespanFunction       (source._sfLifespanFunction       ), 
    _sfAgeFunction            (source._sfAgeFunction            ), 
    _sfSpeedFunction          (source._sfSpeedFunction          ), 
    _sfAccelerationFunction   (source._sfAccelerationFunction   ), 
    _sfPropertyFunction       (source._sfPropertyFunction       ), 
    Inherited                 (source)
{
}

/*-------------------------- destructors ----------------------------------*/

SurfaceParticleGeneratorBase::~SurfaceParticleGeneratorBase(void)
{
}

/*------------------------------ access -----------------------------------*/

UInt32 SurfaceParticleGeneratorBase::getBinSize(const BitVector &whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (PositionVelocityFunctionFieldMask & whichField))
    {
        returnValue += _sfPositionVelocityFunction.getBinSize();
    }

    if(FieldBits::NoField != (NormalFunctionFieldMask & whichField))
    {
        returnValue += _sfNormalFunction.getBinSize();
    }

    if(FieldBits::NoField != (ColorFunctionFieldMask & whichField))
    {
        returnValue += _sfColorFunction.getBinSize();
    }

    if(FieldBits::NoField != (SizeFunctionFieldMask & whichField))
    {
        returnValue += _sfSizeFunction.getBinSize();
    }

    if(FieldBits::NoField != (LifespanFunctionFieldMask & whichField))
    {
        returnValue += _sfLifespanFunction.getBinSize();
    }

    if(FieldBits::NoField != (AgeFunctionFieldMask & whichField))
    {
        returnValue += _sfAgeFunction.getBinSize();
    }

    if(FieldBits::NoField != (SpeedFunctionFieldMask & whichField))
    {
        returnValue += _sfSpeedFunction.getBinSize();
    }

    if(FieldBits::NoField != (AccelerationFunctionFieldMask & whichField))
    {
        returnValue += _sfAccelerationFunction.getBinSize();
    }

    if(FieldBits::NoField != (PropertyFunctionFieldMask & whichField))
    {
        returnValue += _sfPropertyFunction.getBinSize();
    }


    return returnValue;
}

void SurfaceParticleGeneratorBase::copyToBin(      BinaryDataHandler &pMem,
                                  const BitVector         &whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (PositionVelocityFunctionFieldMask & whichField))
    {
        _sfPositionVelocityFunction.copyToBin(pMem);
    }

    if(FieldBits::NoField != (NormalFunctionFieldMask & whichField))
    {
        _sfNormalFunction.copyToBin(pMem);
    }

    if(FieldBits::NoField != (ColorFunctionFieldMask & whichField))
    {
        _sfColorFunction.copyToBin(pMem);
    }

    if(FieldBits::NoField != (SizeFunctionFieldMask & whichField))
    {
        _sfSizeFunction.copyToBin(pMem);
    }

    if(FieldBits::NoField != (LifespanFunctionFieldMask & whichField))
    {
        _sfLifespanFunction.copyToBin(pMem);
    }

    if(FieldBits::NoField != (AgeFunctionFieldMask & whichField))
    {
        _sfAgeFunction.copyToBin(pMem);
    }

    if(FieldBits::NoField != (SpeedFunctionFieldMask & whichField))
    {
        _sfSpeedFunction.copyToBin(pMem);
    }

    if(FieldBits::NoField != (AccelerationFunctionFieldMask & whichField))
    {
        _sfAccelerationFunction.copyToBin(pMem);
    }

    if(FieldBits::NoField != (PropertyFunctionFieldMask & whichField))
    {
        _sfPropertyFunction.copyToBin(pMem);
    }


}

void SurfaceParticleGeneratorBase::copyFromBin(      BinaryDataHandler &pMem,
                                    const BitVector    &whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (PositionVelocityFunctionFieldMask & whichField))
    {
        _sfPositionVelocityFunction.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (NormalFunctionFieldMask & whichField))
    {
        _sfNormalFunction.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (ColorFunctionFieldMask & whichField))
    {
        _sfColorFunction.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (SizeFunctionFieldMask & whichField))
    {
        _sfSizeFunction.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (LifespanFunctionFieldMask & whichField))
    {
        _sfLifespanFunction.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (AgeFunctionFieldMask & whichField))
    {
        _sfAgeFunction.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (SpeedFunctionFieldMask & whichField))
    {
        _sfSpeedFunction.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (AccelerationFunctionFieldMask & whichField))
    {
        _sfAccelerationFunction.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (PropertyFunctionFieldMask & whichField))
    {
        _sfPropertyFunction.copyFromBin(pMem);
    }


}

#if !defined(OSG_FIXED_MFIELDSYNC)
void SurfaceParticleGeneratorBase::executeSyncImpl(      SurfaceParticleGeneratorBase *pOther,
                                        const BitVector         &whichField)
{

    Inherited::executeSyncImpl(pOther, whichField);

    if(FieldBits::NoField != (PositionVelocityFunctionFieldMask & whichField))
        _sfPositionVelocityFunction.syncWith(pOther->_sfPositionVelocityFunction);

    if(FieldBits::NoField != (NormalFunctionFieldMask & whichField))
        _sfNormalFunction.syncWith(pOther->_sfNormalFunction);

    if(FieldBits::NoField != (ColorFunctionFieldMask & whichField))
        _sfColorFunction.syncWith(pOther->_sfColorFunction);

    if(FieldBits::NoField != (SizeFunctionFieldMask & whichField))
        _sfSizeFunction.syncWith(pOther->_sfSizeFunction);

    if(FieldBits::NoField != (LifespanFunctionFieldMask & whichField))
        _sfLifespanFunction.syncWith(pOther->_sfLifespanFunction);

    if(FieldBits::NoField != (AgeFunctionFieldMask & whichField))
        _sfAgeFunction.syncWith(pOther->_sfAgeFunction);

    if(FieldBits::NoField != (SpeedFunctionFieldMask & whichField))
        _sfSpeedFunction.syncWith(pOther->_sfSpeedFunction);

    if(FieldBits::NoField != (AccelerationFunctionFieldMask & whichField))
        _sfAccelerationFunction.syncWith(pOther->_sfAccelerationFunction);

    if(FieldBits::NoField != (PropertyFunctionFieldMask & whichField))
        _sfPropertyFunction.syncWith(pOther->_sfPropertyFunction);


}
#else
void SurfaceParticleGeneratorBase::executeSyncImpl(      SurfaceParticleGeneratorBase *pOther,
                                        const BitVector         &whichField,
                                        const SyncInfo          &sInfo      )
{

    Inherited::executeSyncImpl(pOther, whichField, sInfo);

    if(FieldBits::NoField != (PositionVelocityFunctionFieldMask & whichField))
        _sfPositionVelocityFunction.syncWith(pOther->_sfPositionVelocityFunction);

    if(FieldBits::NoField != (NormalFunctionFieldMask & whichField))
        _sfNormalFunction.syncWith(pOther->_sfNormalFunction);

    if(FieldBits::NoField != (ColorFunctionFieldMask & whichField))
        _sfColorFunction.syncWith(pOther->_sfColorFunction);

    if(FieldBits::NoField != (SizeFunctionFieldMask & whichField))
        _sfSizeFunction.syncWith(pOther->_sfSizeFunction);

    if(FieldBits::NoField != (LifespanFunctionFieldMask & whichField))
        _sfLifespanFunction.syncWith(pOther->_sfLifespanFunction);

    if(FieldBits::NoField != (AgeFunctionFieldMask & whichField))
        _sfAgeFunction.syncWith(pOther->_sfAgeFunction);

    if(FieldBits::NoField != (SpeedFunctionFieldMask & whichField))
        _sfSpeedFunction.syncWith(pOther->_sfSpeedFunction);

    if(FieldBits::NoField != (AccelerationFunctionFieldMask & whichField))
        _sfAccelerationFunction.syncWith(pOther->_sfAccelerationFunction);

    if(FieldBits::NoField != (PropertyFunctionFieldMask & whichField))
        _sfPropertyFunction.syncWith(pOther->_sfPropertyFunction);



}

void SurfaceParticleGeneratorBase::execBeginEditImpl (const BitVector &whichField, 
                                                 UInt32     uiAspect,
                                                 UInt32     uiContainerSize)
{
    Inherited::execBeginEditImpl(whichField, uiAspect, uiContainerSize);

}
#endif



OSG_END_NAMESPACE

#include <OpenSG/OSGSFieldTypeDef.inl>
#include <OpenSG/OSGMFieldTypeDef.inl>

OSG_BEGIN_NAMESPACE

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldDataTraits<SurfaceParticleGeneratorPtr>::_type("SurfaceParticleGeneratorPtr", "ParticleGeneratorPtr");
#endif

OSG_DLLEXPORT_SFIELD_DEF1(SurfaceParticleGeneratorPtr, OSG_PARTICLESYSTEMLIB_DLLTMPLMAPPING);
OSG_DLLEXPORT_MFIELD_DEF1(SurfaceParticleGeneratorPtr, OSG_PARTICLESYSTEMLIB_DLLTMPLMAPPING);


/*------------------------------------------------------------------------*/
/*                              cvs id's                                  */

#ifdef OSG_SGI_CC
#pragma set woff 1174
#endif

#ifdef OSG_LINUX_ICC
#pragma warning( disable : 177 )
#endif

namespace
{
    static Char8 cvsid_cpp       [] = "@(#)$Id: FCBaseTemplate_cpp.h,v 1.47 2006/03/17 17:03:19 pdaehne Exp $";
    static Char8 cvsid_hpp       [] = OSGSURFACEPARTICLEGENERATORBASE_HEADER_CVSID;
    static Char8 cvsid_inl       [] = OSGSURFACEPARTICLEGENERATORBASE_INLINE_CVSID;

    static Char8 cvsid_fields_hpp[] = OSGSURFACEPARTICLEGENERATORFIELDS_HEADER_CVSID;
}

OSG_END_NAMESPACE

