/*---------------------------------------------------------------------------*\
 *                     OpenSG ToolBox Particle System                        *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                          Authors: David Kabala                            *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class DiscParticleSystemDrawer!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <OpenSG/OSGConfig.h>

OSG_BEGIN_NAMESPACE


//! access the type of the class
inline
OSG::FieldContainerType &DiscParticleSystemDrawerBase::getClassType(void)
{
    return _type; 
} 

//! access the numerical type of the class
inline
OSG::UInt32 DiscParticleSystemDrawerBase::getClassTypeId(void) 
{
    return _type.getId(); 
} 

//! create a new instance of the class
inline
DiscParticleSystemDrawerPtr DiscParticleSystemDrawerBase::create(void) 
{
    DiscParticleSystemDrawerPtr fc; 

    if(getClassType().getPrototype() != OSG::NullFC) 
    {
        fc = DiscParticleSystemDrawerPtr::dcast(
            getClassType().getPrototype()-> shallowCopy()); 
    }
    
    return fc; 
}

//! create an empty new instance of the class, do not copy the prototype
inline
DiscParticleSystemDrawerPtr DiscParticleSystemDrawerBase::createEmpty(void) 
{ 
    DiscParticleSystemDrawerPtr returnValue; 
    
    newPtr(returnValue); 

    return returnValue; 
}


/*------------------------------ get -----------------------------------*/

//! Get the DiscParticleSystemDrawer::_sfRadius field.
inline
SFReal32 *DiscParticleSystemDrawerBase::getSFRadius(void)
{
    return &_sfRadius;
}

//! Get the DiscParticleSystemDrawer::_sfSegments field.
inline
SFUInt32 *DiscParticleSystemDrawerBase::getSFSegments(void)
{
    return &_sfSegments;
}

//! Get the DiscParticleSystemDrawer::_sfNormalSource field.
inline
SFUInt32 *DiscParticleSystemDrawerBase::getSFNormalSource(void)
{
    return &_sfNormalSource;
}

//! Get the DiscParticleSystemDrawer::_sfNormal field.
inline
SFVec3f *DiscParticleSystemDrawerBase::getSFNormal(void)
{
    return &_sfNormal;
}

//! Get the DiscParticleSystemDrawer::_sfUpSource field.
inline
SFUInt32 *DiscParticleSystemDrawerBase::getSFUpSource(void)
{
    return &_sfUpSource;
}

//! Get the DiscParticleSystemDrawer::_sfUp field.
inline
SFVec3f *DiscParticleSystemDrawerBase::getSFUp(void)
{
    return &_sfUp;
}

//! Get the DiscParticleSystemDrawer::_sfUseNormalAsObjectSpaceRotation field.
inline
SFBool *DiscParticleSystemDrawerBase::getSFUseNormalAsObjectSpaceRotation(void)
{
    return &_sfUseNormalAsObjectSpaceRotation;
}

//! Get the DiscParticleSystemDrawer::_sfCenterAlpha field.
inline
SFReal32 *DiscParticleSystemDrawerBase::getSFCenterAlpha(void)
{
    return &_sfCenterAlpha;
}

//! Get the DiscParticleSystemDrawer::_sfEdgeAlpha field.
inline
SFReal32 *DiscParticleSystemDrawerBase::getSFEdgeAlpha(void)
{
    return &_sfEdgeAlpha;
}


//! Get the value of the DiscParticleSystemDrawer::_sfRadius field.
inline
Real32 &DiscParticleSystemDrawerBase::getRadius(void)
{
    return _sfRadius.getValue();
}

//! Get the value of the DiscParticleSystemDrawer::_sfRadius field.
inline
const Real32 &DiscParticleSystemDrawerBase::getRadius(void) const
{
    return _sfRadius.getValue();
}

//! Set the value of the DiscParticleSystemDrawer::_sfRadius field.
inline
void DiscParticleSystemDrawerBase::setRadius(const Real32 &value)
{
    _sfRadius.setValue(value);
}

//! Get the value of the DiscParticleSystemDrawer::_sfSegments field.
inline
UInt32 &DiscParticleSystemDrawerBase::getSegments(void)
{
    return _sfSegments.getValue();
}

//! Get the value of the DiscParticleSystemDrawer::_sfSegments field.
inline
const UInt32 &DiscParticleSystemDrawerBase::getSegments(void) const
{
    return _sfSegments.getValue();
}

//! Set the value of the DiscParticleSystemDrawer::_sfSegments field.
inline
void DiscParticleSystemDrawerBase::setSegments(const UInt32 &value)
{
    _sfSegments.setValue(value);
}

//! Get the value of the DiscParticleSystemDrawer::_sfNormalSource field.
inline
UInt32 &DiscParticleSystemDrawerBase::getNormalSource(void)
{
    return _sfNormalSource.getValue();
}

//! Get the value of the DiscParticleSystemDrawer::_sfNormalSource field.
inline
const UInt32 &DiscParticleSystemDrawerBase::getNormalSource(void) const
{
    return _sfNormalSource.getValue();
}

//! Set the value of the DiscParticleSystemDrawer::_sfNormalSource field.
inline
void DiscParticleSystemDrawerBase::setNormalSource(const UInt32 &value)
{
    _sfNormalSource.setValue(value);
}

//! Get the value of the DiscParticleSystemDrawer::_sfNormal field.
inline
Vec3f &DiscParticleSystemDrawerBase::getNormal(void)
{
    return _sfNormal.getValue();
}

//! Get the value of the DiscParticleSystemDrawer::_sfNormal field.
inline
const Vec3f &DiscParticleSystemDrawerBase::getNormal(void) const
{
    return _sfNormal.getValue();
}

//! Set the value of the DiscParticleSystemDrawer::_sfNormal field.
inline
void DiscParticleSystemDrawerBase::setNormal(const Vec3f &value)
{
    _sfNormal.setValue(value);
}

//! Get the value of the DiscParticleSystemDrawer::_sfUpSource field.
inline
UInt32 &DiscParticleSystemDrawerBase::getUpSource(void)
{
    return _sfUpSource.getValue();
}

//! Get the value of the DiscParticleSystemDrawer::_sfUpSource field.
inline
const UInt32 &DiscParticleSystemDrawerBase::getUpSource(void) const
{
    return _sfUpSource.getValue();
}

//! Set the value of the DiscParticleSystemDrawer::_sfUpSource field.
inline
void DiscParticleSystemDrawerBase::setUpSource(const UInt32 &value)
{
    _sfUpSource.setValue(value);
}

//! Get the value of the DiscParticleSystemDrawer::_sfUp field.
inline
Vec3f &DiscParticleSystemDrawerBase::getUp(void)
{
    return _sfUp.getValue();
}

//! Get the value of the DiscParticleSystemDrawer::_sfUp field.
inline
const Vec3f &DiscParticleSystemDrawerBase::getUp(void) const
{
    return _sfUp.getValue();
}

//! Set the value of the DiscParticleSystemDrawer::_sfUp field.
inline
void DiscParticleSystemDrawerBase::setUp(const Vec3f &value)
{
    _sfUp.setValue(value);
}

//! Get the value of the DiscParticleSystemDrawer::_sfUseNormalAsObjectSpaceRotation field.
inline
bool &DiscParticleSystemDrawerBase::getUseNormalAsObjectSpaceRotation(void)
{
    return _sfUseNormalAsObjectSpaceRotation.getValue();
}

//! Get the value of the DiscParticleSystemDrawer::_sfUseNormalAsObjectSpaceRotation field.
inline
const bool &DiscParticleSystemDrawerBase::getUseNormalAsObjectSpaceRotation(void) const
{
    return _sfUseNormalAsObjectSpaceRotation.getValue();
}

//! Set the value of the DiscParticleSystemDrawer::_sfUseNormalAsObjectSpaceRotation field.
inline
void DiscParticleSystemDrawerBase::setUseNormalAsObjectSpaceRotation(const bool &value)
{
    _sfUseNormalAsObjectSpaceRotation.setValue(value);
}

//! Get the value of the DiscParticleSystemDrawer::_sfCenterAlpha field.
inline
Real32 &DiscParticleSystemDrawerBase::getCenterAlpha(void)
{
    return _sfCenterAlpha.getValue();
}

//! Get the value of the DiscParticleSystemDrawer::_sfCenterAlpha field.
inline
const Real32 &DiscParticleSystemDrawerBase::getCenterAlpha(void) const
{
    return _sfCenterAlpha.getValue();
}

//! Set the value of the DiscParticleSystemDrawer::_sfCenterAlpha field.
inline
void DiscParticleSystemDrawerBase::setCenterAlpha(const Real32 &value)
{
    _sfCenterAlpha.setValue(value);
}

//! Get the value of the DiscParticleSystemDrawer::_sfEdgeAlpha field.
inline
Real32 &DiscParticleSystemDrawerBase::getEdgeAlpha(void)
{
    return _sfEdgeAlpha.getValue();
}

//! Get the value of the DiscParticleSystemDrawer::_sfEdgeAlpha field.
inline
const Real32 &DiscParticleSystemDrawerBase::getEdgeAlpha(void) const
{
    return _sfEdgeAlpha.getValue();
}

//! Set the value of the DiscParticleSystemDrawer::_sfEdgeAlpha field.
inline
void DiscParticleSystemDrawerBase::setEdgeAlpha(const Real32 &value)
{
    _sfEdgeAlpha.setValue(value);
}


OSG_END_NAMESPACE

#define OSGDISCPARTICLESYSTEMDRAWERBASE_INLINE_CVSID "@(#)$Id: FCBaseTemplate_inl.h,v 1.20 2002/12/04 14:22:22 dirk Exp $"

