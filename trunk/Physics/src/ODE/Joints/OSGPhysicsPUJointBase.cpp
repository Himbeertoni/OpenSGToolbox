/*---------------------------------------------------------------------------*\
 *                         OpenSG ToolBox Physics                            *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                          www.vrac.iastate.edu                             *
 *                                                                           *
 *                Authors: Behboud Kalantary, David Kabala                   *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class PhysicsPUJoint!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#define OSG_COMPILEPHYSICSPUJOINTINST

#include <stdlib.h>
#include <stdio.h>

#include <OpenSG/OSGConfig.h>

#include "OSGPhysicsPUJointBase.h"
#include "OSGPhysicsPUJoint.h"


OSG_BEGIN_NAMESPACE

const OSG::BitVector  PhysicsPUJointBase::AnchorFieldMask = 
    (TypeTraits<BitVector>::One << PhysicsPUJointBase::AnchorFieldId);

const OSG::BitVector  PhysicsPUJointBase::Axis1FieldMask = 
    (TypeTraits<BitVector>::One << PhysicsPUJointBase::Axis1FieldId);

const OSG::BitVector  PhysicsPUJointBase::Axis2FieldMask = 
    (TypeTraits<BitVector>::One << PhysicsPUJointBase::Axis2FieldId);

const OSG::BitVector  PhysicsPUJointBase::Axis3FieldMask = 
    (TypeTraits<BitVector>::One << PhysicsPUJointBase::Axis3FieldId);

const OSG::BitVector  PhysicsPUJointBase::HiStopFieldMask = 
    (TypeTraits<BitVector>::One << PhysicsPUJointBase::HiStopFieldId);

const OSG::BitVector  PhysicsPUJointBase::LoStopFieldMask = 
    (TypeTraits<BitVector>::One << PhysicsPUJointBase::LoStopFieldId);

const OSG::BitVector  PhysicsPUJointBase::BounceFieldMask = 
    (TypeTraits<BitVector>::One << PhysicsPUJointBase::BounceFieldId);

const OSG::BitVector  PhysicsPUJointBase::CFMFieldMask = 
    (TypeTraits<BitVector>::One << PhysicsPUJointBase::CFMFieldId);

const OSG::BitVector  PhysicsPUJointBase::StopERPFieldMask = 
    (TypeTraits<BitVector>::One << PhysicsPUJointBase::StopERPFieldId);

const OSG::BitVector  PhysicsPUJointBase::StopCFMFieldMask = 
    (TypeTraits<BitVector>::One << PhysicsPUJointBase::StopCFMFieldId);

const OSG::BitVector  PhysicsPUJointBase::HiStop2FieldMask = 
    (TypeTraits<BitVector>::One << PhysicsPUJointBase::HiStop2FieldId);

const OSG::BitVector  PhysicsPUJointBase::LoStop2FieldMask = 
    (TypeTraits<BitVector>::One << PhysicsPUJointBase::LoStop2FieldId);

const OSG::BitVector  PhysicsPUJointBase::Bounce2FieldMask = 
    (TypeTraits<BitVector>::One << PhysicsPUJointBase::Bounce2FieldId);

const OSG::BitVector  PhysicsPUJointBase::CFM2FieldMask = 
    (TypeTraits<BitVector>::One << PhysicsPUJointBase::CFM2FieldId);

const OSG::BitVector  PhysicsPUJointBase::StopERP2FieldMask = 
    (TypeTraits<BitVector>::One << PhysicsPUJointBase::StopERP2FieldId);

const OSG::BitVector  PhysicsPUJointBase::StopCFM2FieldMask = 
    (TypeTraits<BitVector>::One << PhysicsPUJointBase::StopCFM2FieldId);

const OSG::BitVector  PhysicsPUJointBase::HiStop3FieldMask = 
    (TypeTraits<BitVector>::One << PhysicsPUJointBase::HiStop3FieldId);

const OSG::BitVector  PhysicsPUJointBase::LoStop3FieldMask = 
    (TypeTraits<BitVector>::One << PhysicsPUJointBase::LoStop3FieldId);

const OSG::BitVector  PhysicsPUJointBase::Bounce3FieldMask = 
    (TypeTraits<BitVector>::One << PhysicsPUJointBase::Bounce3FieldId);

const OSG::BitVector  PhysicsPUJointBase::CFM3FieldMask = 
    (TypeTraits<BitVector>::One << PhysicsPUJointBase::CFM3FieldId);

const OSG::BitVector  PhysicsPUJointBase::StopERP3FieldMask = 
    (TypeTraits<BitVector>::One << PhysicsPUJointBase::StopERP3FieldId);

const OSG::BitVector  PhysicsPUJointBase::StopCFM3FieldMask = 
    (TypeTraits<BitVector>::One << PhysicsPUJointBase::StopCFM3FieldId);

const OSG::BitVector PhysicsPUJointBase::MTInfluenceMask = 
    (Inherited::MTInfluenceMask) | 
    (static_cast<BitVector>(0x0) << Inherited::NextFieldId); 


// Field descriptions

/*! \var Vec3f           PhysicsPUJointBase::_sfAnchor
    
*/
/*! \var Vec3f           PhysicsPUJointBase::_sfAxis1
    
*/
/*! \var Vec3f           PhysicsPUJointBase::_sfAxis2
    
*/
/*! \var Vec3f           PhysicsPUJointBase::_sfAxis3
    
*/
/*! \var Real32          PhysicsPUJointBase::_sfHiStop
    High stop angle or position. Setting this to dInfinity (the default value) turns off the high stop. For rotational joints, this stop must be less than pi to be effective. If the high stop is less than the low stop then both stops will be ineffective.
*/
/*! \var Real32          PhysicsPUJointBase::_sfLoStop
    Low stop angle or position. Setting this to -dInfinity (the default value) turns off the low stop.  For rotational joints, this stop must be greater than - pi to be effective.
*/
/*! \var Real32          PhysicsPUJointBase::_sfBounce
    The bouncyness of the stops. This is a restitution parameter in the range 0..1. 0 means the stops are not bouncy at all, 1 means maximum bouncyness.
*/
/*! \var Real32          PhysicsPUJointBase::_sfCFM
    The constraint force mixing (CFM) value used when not at a stop.
*/
/*! \var Real32          PhysicsPUJointBase::_sfStopERP
    The error reduction parameter (ERP) used by the stops.
*/
/*! \var Real32          PhysicsPUJointBase::_sfStopCFM
    The constraint force mixing (CFM) value used by the stops. Together with the ERP value this can be used to get spongy or soft stops. Note that this is intended for unpowered joints, it does not really work as expected when a powered joint reaches its limit.
*/
/*! \var Real32          PhysicsPUJointBase::_sfHiStop2
    High stop angle or position. Setting this to dInfinity (the default value) turns off the high stop. For rotational joints, this stop must be less than pi to be effective. If the high stop is less than the low stop then both stops will be ineffective.
*/
/*! \var Real32          PhysicsPUJointBase::_sfLoStop2
    Low stop angle or position. Setting this to -dInfinity (the default value) turns off the low stop.  For rotational joints, this stop must be greater than - pi to be effective.
*/
/*! \var Real32          PhysicsPUJointBase::_sfBounce2
    The bouncyness of the stops. This is a restitution parameter in the range 0..1. 0 means the stops are not bouncy at all, 1 means maximum bouncyness.
*/
/*! \var Real32          PhysicsPUJointBase::_sfCFM2
    The constraint force mixing (CFM) value used when not at a stop.
*/
/*! \var Real32          PhysicsPUJointBase::_sfStopERP2
    The error reduction parameter (ERP) used by the stops.
*/
/*! \var Real32          PhysicsPUJointBase::_sfStopCFM2
    The constraint force mixing (CFM) value used by the stops. Together with the ERP value this can be used to get spongy or soft stops. Note that this is intended for unpowered joints, it does not really work as expected when a powered joint reaches its limit.
*/
/*! \var Real32          PhysicsPUJointBase::_sfHiStop3
    High stop angle or position. Setting this to dInfinity (the default value) turns off the high stop. For rotational joints, this stop must be less than pi to be effective. If the high stop is less than the low stop then both stops will be ineffective.
*/
/*! \var Real32          PhysicsPUJointBase::_sfLoStop3
    Low stop angle or position. Setting this to -dInfinity (the default value) turns off the low stop.  For rotational joints, this stop must be greater than - pi to be effective.
*/
/*! \var Real32          PhysicsPUJointBase::_sfBounce3
    The bouncyness of the stops. This is a restitution parameter in the range 0..1. 0 means the stops are not bouncy at all, 1 means maximum bouncyness.
*/
/*! \var Real32          PhysicsPUJointBase::_sfCFM3
    The constraint force mixing (CFM) value used when not at a stop.
*/
/*! \var Real32          PhysicsPUJointBase::_sfStopERP3
    The error reduction parameter (ERP) used by the stops.
*/
/*! \var Real32          PhysicsPUJointBase::_sfStopCFM3
    The constraint force mixing (CFM) value used by the stops. Together with the ERP value this can be used to get spongy or soft stops. Note that this is intended for unpowered joints, it does not really work as expected when a powered joint reaches its limit.
*/

//! PhysicsPUJoint description

FieldDescription *PhysicsPUJointBase::_desc[] = 
{
    new FieldDescription(SFVec3f::getClassType(), 
                     "anchor", 
                     AnchorFieldId, AnchorFieldMask,
                     false,
                     (FieldAccessMethod) &PhysicsPUJointBase::getSFAnchor),
    new FieldDescription(SFVec3f::getClassType(), 
                     "axis1", 
                     Axis1FieldId, Axis1FieldMask,
                     false,
                     (FieldAccessMethod) &PhysicsPUJointBase::getSFAxis1),
    new FieldDescription(SFVec3f::getClassType(), 
                     "axis2", 
                     Axis2FieldId, Axis2FieldMask,
                     false,
                     (FieldAccessMethod) &PhysicsPUJointBase::getSFAxis2),
    new FieldDescription(SFVec3f::getClassType(), 
                     "axis3", 
                     Axis3FieldId, Axis3FieldMask,
                     false,
                     (FieldAccessMethod) &PhysicsPUJointBase::getSFAxis3),
    new FieldDescription(SFReal32::getClassType(), 
                     "hiStop", 
                     HiStopFieldId, HiStopFieldMask,
                     false,
                     (FieldAccessMethod) &PhysicsPUJointBase::getSFHiStop),
    new FieldDescription(SFReal32::getClassType(), 
                     "loStop", 
                     LoStopFieldId, LoStopFieldMask,
                     false,
                     (FieldAccessMethod) &PhysicsPUJointBase::getSFLoStop),
    new FieldDescription(SFReal32::getClassType(), 
                     "bounce", 
                     BounceFieldId, BounceFieldMask,
                     false,
                     (FieldAccessMethod) &PhysicsPUJointBase::getSFBounce),
    new FieldDescription(SFReal32::getClassType(), 
                     "CFM", 
                     CFMFieldId, CFMFieldMask,
                     false,
                     (FieldAccessMethod) &PhysicsPUJointBase::getSFCFM),
    new FieldDescription(SFReal32::getClassType(), 
                     "stopERP", 
                     StopERPFieldId, StopERPFieldMask,
                     false,
                     (FieldAccessMethod) &PhysicsPUJointBase::getSFStopERP),
    new FieldDescription(SFReal32::getClassType(), 
                     "stopCFM", 
                     StopCFMFieldId, StopCFMFieldMask,
                     false,
                     (FieldAccessMethod) &PhysicsPUJointBase::getSFStopCFM),
    new FieldDescription(SFReal32::getClassType(), 
                     "hiStop2", 
                     HiStop2FieldId, HiStop2FieldMask,
                     false,
                     (FieldAccessMethod) &PhysicsPUJointBase::getSFHiStop2),
    new FieldDescription(SFReal32::getClassType(), 
                     "loStop2", 
                     LoStop2FieldId, LoStop2FieldMask,
                     false,
                     (FieldAccessMethod) &PhysicsPUJointBase::getSFLoStop2),
    new FieldDescription(SFReal32::getClassType(), 
                     "bounce2", 
                     Bounce2FieldId, Bounce2FieldMask,
                     false,
                     (FieldAccessMethod) &PhysicsPUJointBase::getSFBounce2),
    new FieldDescription(SFReal32::getClassType(), 
                     "CFM2", 
                     CFM2FieldId, CFM2FieldMask,
                     false,
                     (FieldAccessMethod) &PhysicsPUJointBase::getSFCFM2),
    new FieldDescription(SFReal32::getClassType(), 
                     "stopERP2", 
                     StopERP2FieldId, StopERP2FieldMask,
                     false,
                     (FieldAccessMethod) &PhysicsPUJointBase::getSFStopERP2),
    new FieldDescription(SFReal32::getClassType(), 
                     "stopCFM2", 
                     StopCFM2FieldId, StopCFM2FieldMask,
                     false,
                     (FieldAccessMethod) &PhysicsPUJointBase::getSFStopCFM2),
    new FieldDescription(SFReal32::getClassType(), 
                     "hiStop3", 
                     HiStop3FieldId, HiStop3FieldMask,
                     false,
                     (FieldAccessMethod) &PhysicsPUJointBase::getSFHiStop3),
    new FieldDescription(SFReal32::getClassType(), 
                     "loStop3", 
                     LoStop3FieldId, LoStop3FieldMask,
                     false,
                     (FieldAccessMethod) &PhysicsPUJointBase::getSFLoStop3),
    new FieldDescription(SFReal32::getClassType(), 
                     "bounce3", 
                     Bounce3FieldId, Bounce3FieldMask,
                     false,
                     (FieldAccessMethod) &PhysicsPUJointBase::getSFBounce3),
    new FieldDescription(SFReal32::getClassType(), 
                     "CFM3", 
                     CFM3FieldId, CFM3FieldMask,
                     false,
                     (FieldAccessMethod) &PhysicsPUJointBase::getSFCFM3),
    new FieldDescription(SFReal32::getClassType(), 
                     "stopERP3", 
                     StopERP3FieldId, StopERP3FieldMask,
                     false,
                     (FieldAccessMethod) &PhysicsPUJointBase::getSFStopERP3),
    new FieldDescription(SFReal32::getClassType(), 
                     "stopCFM3", 
                     StopCFM3FieldId, StopCFM3FieldMask,
                     false,
                     (FieldAccessMethod) &PhysicsPUJointBase::getSFStopCFM3)
};


FieldContainerType PhysicsPUJointBase::_type(
    "PhysicsPUJoint",
    "PhysicsJoint",
    NULL,
    (PrototypeCreateF) &PhysicsPUJointBase::createEmpty,
    PhysicsPUJoint::initMethod,
    _desc,
    sizeof(_desc));

//OSG_FIELD_CONTAINER_DEF(PhysicsPUJointBase, PhysicsPUJointPtr)

/*------------------------------ get -----------------------------------*/

FieldContainerType &PhysicsPUJointBase::getType(void) 
{
    return _type; 
} 

const FieldContainerType &PhysicsPUJointBase::getType(void) const 
{
    return _type;
} 


FieldContainerPtr PhysicsPUJointBase::shallowCopy(void) const 
{ 
    PhysicsPUJointPtr returnValue; 

    newPtr(returnValue, dynamic_cast<const PhysicsPUJoint *>(this)); 

    return returnValue; 
}

UInt32 PhysicsPUJointBase::getContainerSize(void) const 
{ 
    return sizeof(PhysicsPUJoint); 
}


#if !defined(OSG_FIXED_MFIELDSYNC)
void PhysicsPUJointBase::executeSync(      FieldContainer &other,
                                    const BitVector      &whichField)
{
    this->executeSyncImpl((PhysicsPUJointBase *) &other, whichField);
}
#else
void PhysicsPUJointBase::executeSync(      FieldContainer &other,
                                    const BitVector      &whichField,                                    const SyncInfo       &sInfo     )
{
    this->executeSyncImpl((PhysicsPUJointBase *) &other, whichField, sInfo);
}
void PhysicsPUJointBase::execBeginEdit(const BitVector &whichField, 
                                            UInt32     uiAspect,
                                            UInt32     uiContainerSize) 
{
    this->execBeginEditImpl(whichField, uiAspect, uiContainerSize);
}

void PhysicsPUJointBase::onDestroyAspect(UInt32 uiId, UInt32 uiAspect)
{
    Inherited::onDestroyAspect(uiId, uiAspect);

}
#endif

/*------------------------- constructors ----------------------------------*/

#ifdef OSG_WIN32_ICL
#pragma warning (disable : 383)
#endif

PhysicsPUJointBase::PhysicsPUJointBase(void) :
    _sfAnchor                 (), 
    _sfAxis1                  (), 
    _sfAxis2                  (), 
    _sfAxis3                  (), 
    _sfHiStop                 (), 
    _sfLoStop                 (), 
    _sfBounce                 (), 
    _sfCFM                    (), 
    _sfStopERP                (), 
    _sfStopCFM                (), 
    _sfHiStop2                (), 
    _sfLoStop2                (), 
    _sfBounce2                (), 
    _sfCFM2                   (), 
    _sfStopERP2               (), 
    _sfStopCFM2               (), 
    _sfHiStop3                (), 
    _sfLoStop3                (), 
    _sfBounce3                (), 
    _sfCFM3                   (), 
    _sfStopERP3               (), 
    _sfStopCFM3               (), 
    Inherited() 
{
}

#ifdef OSG_WIN32_ICL
#pragma warning (default : 383)
#endif

PhysicsPUJointBase::PhysicsPUJointBase(const PhysicsPUJointBase &source) :
    _sfAnchor                 (source._sfAnchor                 ), 
    _sfAxis1                  (source._sfAxis1                  ), 
    _sfAxis2                  (source._sfAxis2                  ), 
    _sfAxis3                  (source._sfAxis3                  ), 
    _sfHiStop                 (source._sfHiStop                 ), 
    _sfLoStop                 (source._sfLoStop                 ), 
    _sfBounce                 (source._sfBounce                 ), 
    _sfCFM                    (source._sfCFM                    ), 
    _sfStopERP                (source._sfStopERP                ), 
    _sfStopCFM                (source._sfStopCFM                ), 
    _sfHiStop2                (source._sfHiStop2                ), 
    _sfLoStop2                (source._sfLoStop2                ), 
    _sfBounce2                (source._sfBounce2                ), 
    _sfCFM2                   (source._sfCFM2                   ), 
    _sfStopERP2               (source._sfStopERP2               ), 
    _sfStopCFM2               (source._sfStopCFM2               ), 
    _sfHiStop3                (source._sfHiStop3                ), 
    _sfLoStop3                (source._sfLoStop3                ), 
    _sfBounce3                (source._sfBounce3                ), 
    _sfCFM3                   (source._sfCFM3                   ), 
    _sfStopERP3               (source._sfStopERP3               ), 
    _sfStopCFM3               (source._sfStopCFM3               ), 
    Inherited                 (source)
{
}

/*-------------------------- destructors ----------------------------------*/

PhysicsPUJointBase::~PhysicsPUJointBase(void)
{
}

/*------------------------------ access -----------------------------------*/

UInt32 PhysicsPUJointBase::getBinSize(const BitVector &whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (AnchorFieldMask & whichField))
    {
        returnValue += _sfAnchor.getBinSize();
    }

    if(FieldBits::NoField != (Axis1FieldMask & whichField))
    {
        returnValue += _sfAxis1.getBinSize();
    }

    if(FieldBits::NoField != (Axis2FieldMask & whichField))
    {
        returnValue += _sfAxis2.getBinSize();
    }

    if(FieldBits::NoField != (Axis3FieldMask & whichField))
    {
        returnValue += _sfAxis3.getBinSize();
    }

    if(FieldBits::NoField != (HiStopFieldMask & whichField))
    {
        returnValue += _sfHiStop.getBinSize();
    }

    if(FieldBits::NoField != (LoStopFieldMask & whichField))
    {
        returnValue += _sfLoStop.getBinSize();
    }

    if(FieldBits::NoField != (BounceFieldMask & whichField))
    {
        returnValue += _sfBounce.getBinSize();
    }

    if(FieldBits::NoField != (CFMFieldMask & whichField))
    {
        returnValue += _sfCFM.getBinSize();
    }

    if(FieldBits::NoField != (StopERPFieldMask & whichField))
    {
        returnValue += _sfStopERP.getBinSize();
    }

    if(FieldBits::NoField != (StopCFMFieldMask & whichField))
    {
        returnValue += _sfStopCFM.getBinSize();
    }

    if(FieldBits::NoField != (HiStop2FieldMask & whichField))
    {
        returnValue += _sfHiStop2.getBinSize();
    }

    if(FieldBits::NoField != (LoStop2FieldMask & whichField))
    {
        returnValue += _sfLoStop2.getBinSize();
    }

    if(FieldBits::NoField != (Bounce2FieldMask & whichField))
    {
        returnValue += _sfBounce2.getBinSize();
    }

    if(FieldBits::NoField != (CFM2FieldMask & whichField))
    {
        returnValue += _sfCFM2.getBinSize();
    }

    if(FieldBits::NoField != (StopERP2FieldMask & whichField))
    {
        returnValue += _sfStopERP2.getBinSize();
    }

    if(FieldBits::NoField != (StopCFM2FieldMask & whichField))
    {
        returnValue += _sfStopCFM2.getBinSize();
    }

    if(FieldBits::NoField != (HiStop3FieldMask & whichField))
    {
        returnValue += _sfHiStop3.getBinSize();
    }

    if(FieldBits::NoField != (LoStop3FieldMask & whichField))
    {
        returnValue += _sfLoStop3.getBinSize();
    }

    if(FieldBits::NoField != (Bounce3FieldMask & whichField))
    {
        returnValue += _sfBounce3.getBinSize();
    }

    if(FieldBits::NoField != (CFM3FieldMask & whichField))
    {
        returnValue += _sfCFM3.getBinSize();
    }

    if(FieldBits::NoField != (StopERP3FieldMask & whichField))
    {
        returnValue += _sfStopERP3.getBinSize();
    }

    if(FieldBits::NoField != (StopCFM3FieldMask & whichField))
    {
        returnValue += _sfStopCFM3.getBinSize();
    }


    return returnValue;
}

void PhysicsPUJointBase::copyToBin(      BinaryDataHandler &pMem,
                                  const BitVector         &whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (AnchorFieldMask & whichField))
    {
        _sfAnchor.copyToBin(pMem);
    }

    if(FieldBits::NoField != (Axis1FieldMask & whichField))
    {
        _sfAxis1.copyToBin(pMem);
    }

    if(FieldBits::NoField != (Axis2FieldMask & whichField))
    {
        _sfAxis2.copyToBin(pMem);
    }

    if(FieldBits::NoField != (Axis3FieldMask & whichField))
    {
        _sfAxis3.copyToBin(pMem);
    }

    if(FieldBits::NoField != (HiStopFieldMask & whichField))
    {
        _sfHiStop.copyToBin(pMem);
    }

    if(FieldBits::NoField != (LoStopFieldMask & whichField))
    {
        _sfLoStop.copyToBin(pMem);
    }

    if(FieldBits::NoField != (BounceFieldMask & whichField))
    {
        _sfBounce.copyToBin(pMem);
    }

    if(FieldBits::NoField != (CFMFieldMask & whichField))
    {
        _sfCFM.copyToBin(pMem);
    }

    if(FieldBits::NoField != (StopERPFieldMask & whichField))
    {
        _sfStopERP.copyToBin(pMem);
    }

    if(FieldBits::NoField != (StopCFMFieldMask & whichField))
    {
        _sfStopCFM.copyToBin(pMem);
    }

    if(FieldBits::NoField != (HiStop2FieldMask & whichField))
    {
        _sfHiStop2.copyToBin(pMem);
    }

    if(FieldBits::NoField != (LoStop2FieldMask & whichField))
    {
        _sfLoStop2.copyToBin(pMem);
    }

    if(FieldBits::NoField != (Bounce2FieldMask & whichField))
    {
        _sfBounce2.copyToBin(pMem);
    }

    if(FieldBits::NoField != (CFM2FieldMask & whichField))
    {
        _sfCFM2.copyToBin(pMem);
    }

    if(FieldBits::NoField != (StopERP2FieldMask & whichField))
    {
        _sfStopERP2.copyToBin(pMem);
    }

    if(FieldBits::NoField != (StopCFM2FieldMask & whichField))
    {
        _sfStopCFM2.copyToBin(pMem);
    }

    if(FieldBits::NoField != (HiStop3FieldMask & whichField))
    {
        _sfHiStop3.copyToBin(pMem);
    }

    if(FieldBits::NoField != (LoStop3FieldMask & whichField))
    {
        _sfLoStop3.copyToBin(pMem);
    }

    if(FieldBits::NoField != (Bounce3FieldMask & whichField))
    {
        _sfBounce3.copyToBin(pMem);
    }

    if(FieldBits::NoField != (CFM3FieldMask & whichField))
    {
        _sfCFM3.copyToBin(pMem);
    }

    if(FieldBits::NoField != (StopERP3FieldMask & whichField))
    {
        _sfStopERP3.copyToBin(pMem);
    }

    if(FieldBits::NoField != (StopCFM3FieldMask & whichField))
    {
        _sfStopCFM3.copyToBin(pMem);
    }


}

void PhysicsPUJointBase::copyFromBin(      BinaryDataHandler &pMem,
                                    const BitVector    &whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (AnchorFieldMask & whichField))
    {
        _sfAnchor.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (Axis1FieldMask & whichField))
    {
        _sfAxis1.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (Axis2FieldMask & whichField))
    {
        _sfAxis2.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (Axis3FieldMask & whichField))
    {
        _sfAxis3.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (HiStopFieldMask & whichField))
    {
        _sfHiStop.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (LoStopFieldMask & whichField))
    {
        _sfLoStop.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (BounceFieldMask & whichField))
    {
        _sfBounce.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (CFMFieldMask & whichField))
    {
        _sfCFM.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (StopERPFieldMask & whichField))
    {
        _sfStopERP.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (StopCFMFieldMask & whichField))
    {
        _sfStopCFM.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (HiStop2FieldMask & whichField))
    {
        _sfHiStop2.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (LoStop2FieldMask & whichField))
    {
        _sfLoStop2.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (Bounce2FieldMask & whichField))
    {
        _sfBounce2.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (CFM2FieldMask & whichField))
    {
        _sfCFM2.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (StopERP2FieldMask & whichField))
    {
        _sfStopERP2.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (StopCFM2FieldMask & whichField))
    {
        _sfStopCFM2.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (HiStop3FieldMask & whichField))
    {
        _sfHiStop3.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (LoStop3FieldMask & whichField))
    {
        _sfLoStop3.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (Bounce3FieldMask & whichField))
    {
        _sfBounce3.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (CFM3FieldMask & whichField))
    {
        _sfCFM3.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (StopERP3FieldMask & whichField))
    {
        _sfStopERP3.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (StopCFM3FieldMask & whichField))
    {
        _sfStopCFM3.copyFromBin(pMem);
    }


}

#if !defined(OSG_FIXED_MFIELDSYNC)
void PhysicsPUJointBase::executeSyncImpl(      PhysicsPUJointBase *pOther,
                                        const BitVector         &whichField)
{

    Inherited::executeSyncImpl(pOther, whichField);

    if(FieldBits::NoField != (AnchorFieldMask & whichField))
        _sfAnchor.syncWith(pOther->_sfAnchor);

    if(FieldBits::NoField != (Axis1FieldMask & whichField))
        _sfAxis1.syncWith(pOther->_sfAxis1);

    if(FieldBits::NoField != (Axis2FieldMask & whichField))
        _sfAxis2.syncWith(pOther->_sfAxis2);

    if(FieldBits::NoField != (Axis3FieldMask & whichField))
        _sfAxis3.syncWith(pOther->_sfAxis3);

    if(FieldBits::NoField != (HiStopFieldMask & whichField))
        _sfHiStop.syncWith(pOther->_sfHiStop);

    if(FieldBits::NoField != (LoStopFieldMask & whichField))
        _sfLoStop.syncWith(pOther->_sfLoStop);

    if(FieldBits::NoField != (BounceFieldMask & whichField))
        _sfBounce.syncWith(pOther->_sfBounce);

    if(FieldBits::NoField != (CFMFieldMask & whichField))
        _sfCFM.syncWith(pOther->_sfCFM);

    if(FieldBits::NoField != (StopERPFieldMask & whichField))
        _sfStopERP.syncWith(pOther->_sfStopERP);

    if(FieldBits::NoField != (StopCFMFieldMask & whichField))
        _sfStopCFM.syncWith(pOther->_sfStopCFM);

    if(FieldBits::NoField != (HiStop2FieldMask & whichField))
        _sfHiStop2.syncWith(pOther->_sfHiStop2);

    if(FieldBits::NoField != (LoStop2FieldMask & whichField))
        _sfLoStop2.syncWith(pOther->_sfLoStop2);

    if(FieldBits::NoField != (Bounce2FieldMask & whichField))
        _sfBounce2.syncWith(pOther->_sfBounce2);

    if(FieldBits::NoField != (CFM2FieldMask & whichField))
        _sfCFM2.syncWith(pOther->_sfCFM2);

    if(FieldBits::NoField != (StopERP2FieldMask & whichField))
        _sfStopERP2.syncWith(pOther->_sfStopERP2);

    if(FieldBits::NoField != (StopCFM2FieldMask & whichField))
        _sfStopCFM2.syncWith(pOther->_sfStopCFM2);

    if(FieldBits::NoField != (HiStop3FieldMask & whichField))
        _sfHiStop3.syncWith(pOther->_sfHiStop3);

    if(FieldBits::NoField != (LoStop3FieldMask & whichField))
        _sfLoStop3.syncWith(pOther->_sfLoStop3);

    if(FieldBits::NoField != (Bounce3FieldMask & whichField))
        _sfBounce3.syncWith(pOther->_sfBounce3);

    if(FieldBits::NoField != (CFM3FieldMask & whichField))
        _sfCFM3.syncWith(pOther->_sfCFM3);

    if(FieldBits::NoField != (StopERP3FieldMask & whichField))
        _sfStopERP3.syncWith(pOther->_sfStopERP3);

    if(FieldBits::NoField != (StopCFM3FieldMask & whichField))
        _sfStopCFM3.syncWith(pOther->_sfStopCFM3);


}
#else
void PhysicsPUJointBase::executeSyncImpl(      PhysicsPUJointBase *pOther,
                                        const BitVector         &whichField,
                                        const SyncInfo          &sInfo      )
{

    Inherited::executeSyncImpl(pOther, whichField, sInfo);

    if(FieldBits::NoField != (AnchorFieldMask & whichField))
        _sfAnchor.syncWith(pOther->_sfAnchor);

    if(FieldBits::NoField != (Axis1FieldMask & whichField))
        _sfAxis1.syncWith(pOther->_sfAxis1);

    if(FieldBits::NoField != (Axis2FieldMask & whichField))
        _sfAxis2.syncWith(pOther->_sfAxis2);

    if(FieldBits::NoField != (Axis3FieldMask & whichField))
        _sfAxis3.syncWith(pOther->_sfAxis3);

    if(FieldBits::NoField != (HiStopFieldMask & whichField))
        _sfHiStop.syncWith(pOther->_sfHiStop);

    if(FieldBits::NoField != (LoStopFieldMask & whichField))
        _sfLoStop.syncWith(pOther->_sfLoStop);

    if(FieldBits::NoField != (BounceFieldMask & whichField))
        _sfBounce.syncWith(pOther->_sfBounce);

    if(FieldBits::NoField != (CFMFieldMask & whichField))
        _sfCFM.syncWith(pOther->_sfCFM);

    if(FieldBits::NoField != (StopERPFieldMask & whichField))
        _sfStopERP.syncWith(pOther->_sfStopERP);

    if(FieldBits::NoField != (StopCFMFieldMask & whichField))
        _sfStopCFM.syncWith(pOther->_sfStopCFM);

    if(FieldBits::NoField != (HiStop2FieldMask & whichField))
        _sfHiStop2.syncWith(pOther->_sfHiStop2);

    if(FieldBits::NoField != (LoStop2FieldMask & whichField))
        _sfLoStop2.syncWith(pOther->_sfLoStop2);

    if(FieldBits::NoField != (Bounce2FieldMask & whichField))
        _sfBounce2.syncWith(pOther->_sfBounce2);

    if(FieldBits::NoField != (CFM2FieldMask & whichField))
        _sfCFM2.syncWith(pOther->_sfCFM2);

    if(FieldBits::NoField != (StopERP2FieldMask & whichField))
        _sfStopERP2.syncWith(pOther->_sfStopERP2);

    if(FieldBits::NoField != (StopCFM2FieldMask & whichField))
        _sfStopCFM2.syncWith(pOther->_sfStopCFM2);

    if(FieldBits::NoField != (HiStop3FieldMask & whichField))
        _sfHiStop3.syncWith(pOther->_sfHiStop3);

    if(FieldBits::NoField != (LoStop3FieldMask & whichField))
        _sfLoStop3.syncWith(pOther->_sfLoStop3);

    if(FieldBits::NoField != (Bounce3FieldMask & whichField))
        _sfBounce3.syncWith(pOther->_sfBounce3);

    if(FieldBits::NoField != (CFM3FieldMask & whichField))
        _sfCFM3.syncWith(pOther->_sfCFM3);

    if(FieldBits::NoField != (StopERP3FieldMask & whichField))
        _sfStopERP3.syncWith(pOther->_sfStopERP3);

    if(FieldBits::NoField != (StopCFM3FieldMask & whichField))
        _sfStopCFM3.syncWith(pOther->_sfStopCFM3);



}

void PhysicsPUJointBase::execBeginEditImpl (const BitVector &whichField, 
                                                 UInt32     uiAspect,
                                                 UInt32     uiContainerSize)
{
    Inherited::execBeginEditImpl(whichField, uiAspect, uiContainerSize);

}
#endif



OSG_END_NAMESPACE

#include <OpenSG/OSGSFieldTypeDef.inl>
#include <OpenSG/OSGMFieldTypeDef.inl>

OSG_BEGIN_NAMESPACE

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldDataTraits<PhysicsPUJointPtr>::_type("PhysicsPUJointPtr", "PhysicsJointPtr");
#endif

OSG_DLLEXPORT_SFIELD_DEF1(PhysicsPUJointPtr, OSG_PHYSICSLIB_DLLTMPLMAPPING);
OSG_DLLEXPORT_MFIELD_DEF1(PhysicsPUJointPtr, OSG_PHYSICSLIB_DLLTMPLMAPPING);


/*------------------------------------------------------------------------*/
/*                              cvs id's                                  */

#ifdef OSG_SGI_CC
#pragma set woff 1174
#endif

#ifdef OSG_LINUX_ICC
#pragma warning( disable : 177 )
#endif

namespace
{
    static Char8 cvsid_cpp       [] = "@(#)$Id: FCBaseTemplate_cpp.h,v 1.47 2006/03/17 17:03:19 pdaehne Exp $";
    static Char8 cvsid_hpp       [] = OSGPHYSICSPUJOINTBASE_HEADER_CVSID;
    static Char8 cvsid_inl       [] = OSGPHYSICSPUJOINTBASE_INLINE_CVSID;

    static Char8 cvsid_fields_hpp[] = OSGPHYSICSPUJOINTFIELDS_HEADER_CVSID;
}

OSG_END_NAMESPACE

