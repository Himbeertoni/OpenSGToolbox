/*---------------------------------------------------------------------------*\
 *                         OpenSG ToolBox Physics                            *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                          www.vrac.iastate.edu                             *
 *                                                                           *
 *                Authors: Behboud Kalantary, David Kabala                   *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class PhysicsPistonJoint!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#define OSG_COMPILEPHYSICSPISTONJOINTINST

#include <stdlib.h>
#include <stdio.h>

#include <OpenSG/OSGConfig.h>

#include "OSGPhysicsPistonJointBase.h"
#include "OSGPhysicsPistonJoint.h"


OSG_BEGIN_NAMESPACE

const OSG::BitVector  PhysicsPistonJointBase::AnchorFieldMask = 
    (TypeTraits<BitVector>::One << PhysicsPistonJointBase::AnchorFieldId);

const OSG::BitVector  PhysicsPistonJointBase::AxisFieldMask = 
    (TypeTraits<BitVector>::One << PhysicsPistonJointBase::AxisFieldId);

const OSG::BitVector  PhysicsPistonJointBase::HiStopFieldMask = 
    (TypeTraits<BitVector>::One << PhysicsPistonJointBase::HiStopFieldId);

const OSG::BitVector  PhysicsPistonJointBase::LoStopFieldMask = 
    (TypeTraits<BitVector>::One << PhysicsPistonJointBase::LoStopFieldId);

const OSG::BitVector  PhysicsPistonJointBase::BounceFieldMask = 
    (TypeTraits<BitVector>::One << PhysicsPistonJointBase::BounceFieldId);

const OSG::BitVector  PhysicsPistonJointBase::CFMFieldMask = 
    (TypeTraits<BitVector>::One << PhysicsPistonJointBase::CFMFieldId);

const OSG::BitVector  PhysicsPistonJointBase::StopERPFieldMask = 
    (TypeTraits<BitVector>::One << PhysicsPistonJointBase::StopERPFieldId);

const OSG::BitVector  PhysicsPistonJointBase::StopCFMFieldMask = 
    (TypeTraits<BitVector>::One << PhysicsPistonJointBase::StopCFMFieldId);

const OSG::BitVector  PhysicsPistonJointBase::HiStop2FieldMask = 
    (TypeTraits<BitVector>::One << PhysicsPistonJointBase::HiStop2FieldId);

const OSG::BitVector  PhysicsPistonJointBase::LoStop2FieldMask = 
    (TypeTraits<BitVector>::One << PhysicsPistonJointBase::LoStop2FieldId);

const OSG::BitVector  PhysicsPistonJointBase::Bounce2FieldMask = 
    (TypeTraits<BitVector>::One << PhysicsPistonJointBase::Bounce2FieldId);

const OSG::BitVector  PhysicsPistonJointBase::CFM2FieldMask = 
    (TypeTraits<BitVector>::One << PhysicsPistonJointBase::CFM2FieldId);

const OSG::BitVector  PhysicsPistonJointBase::StopERP2FieldMask = 
    (TypeTraits<BitVector>::One << PhysicsPistonJointBase::StopERP2FieldId);

const OSG::BitVector  PhysicsPistonJointBase::StopCFM2FieldMask = 
    (TypeTraits<BitVector>::One << PhysicsPistonJointBase::StopCFM2FieldId);

const OSG::BitVector PhysicsPistonJointBase::MTInfluenceMask = 
    (Inherited::MTInfluenceMask) | 
    (static_cast<BitVector>(0x0) << Inherited::NextFieldId); 


// Field descriptions

/*! \var Vec3f           PhysicsPistonJointBase::_sfAnchor
    
*/
/*! \var Vec3f           PhysicsPistonJointBase::_sfAxis
    
*/
/*! \var Real32          PhysicsPistonJointBase::_sfHiStop
    High stop angle or position. Setting this to dInfinity (the default value) turns off the high stop. For rotational joints, this stop must be less than pi to be effective. If the high stop is less than the low stop then both stops will be ineffective.
*/
/*! \var Real32          PhysicsPistonJointBase::_sfLoStop
    Low stop angle or position. Setting this to -dInfinity (the default value) turns off the low stop.  For rotational joints, this stop must be greater than - pi to be effective.
*/
/*! \var Real32          PhysicsPistonJointBase::_sfBounce
    The bouncyness of the stops. This is a restitution parameter in the range 0..1. 0 means the stops are not bouncy at all, 1 means maximum bouncyness.
*/
/*! \var Real32          PhysicsPistonJointBase::_sfCFM
    The constraint force mixing (CFM) value used when not at a stop.
*/
/*! \var Real32          PhysicsPistonJointBase::_sfStopERP
    The error reduction parameter (ERP) used by the stops.
*/
/*! \var Real32          PhysicsPistonJointBase::_sfStopCFM
    The constraint force mixing (CFM) value used by the stops. Together with the ERP value this can be used to get spongy or soft stops. Note that this is intended for unpowered joints, it does not really work as expected when a powered joint reaches its limit.
*/
/*! \var Real32          PhysicsPistonJointBase::_sfHiStop2
    High stop angle or position. Setting this to dInfinity (the default value) turns off the high stop. For rotational joints, this stop must be less than pi to be effective. If the high stop is less than the low stop then both stops will be ineffective.
*/
/*! \var Real32          PhysicsPistonJointBase::_sfLoStop2
    Low stop angle or position. Setting this to -dInfinity (the default value) turns off the low stop.  For rotational joints, this stop must be greater than - pi to be effective.
*/
/*! \var Real32          PhysicsPistonJointBase::_sfBounce2
    The bouncyness of the stops. This is a restitution parameter in the range 0..1. 0 means the stops are not bouncy at all, 1 means maximum bouncyness.
*/
/*! \var Real32          PhysicsPistonJointBase::_sfCFM2
    The constraint force mixing (CFM) value used when not at a stop.
*/
/*! \var Real32          PhysicsPistonJointBase::_sfStopERP2
    The error reduction parameter (ERP) used by the stops.
*/
/*! \var Real32          PhysicsPistonJointBase::_sfStopCFM2
    The constraint force mixing (CFM) value used by the stops. Together with the ERP value this can be used to get spongy or soft stops. Note that this is intended for unpowered joints, it does not really work as expected when a powered joint reaches its limit.
*/

//! PhysicsPistonJoint description

FieldDescription *PhysicsPistonJointBase::_desc[] = 
{
    new FieldDescription(SFVec3f::getClassType(), 
                     "anchor", 
                     AnchorFieldId, AnchorFieldMask,
                     false,
                     (FieldAccessMethod) &PhysicsPistonJointBase::getSFAnchor),
    new FieldDescription(SFVec3f::getClassType(), 
                     "axis", 
                     AxisFieldId, AxisFieldMask,
                     false,
                     (FieldAccessMethod) &PhysicsPistonJointBase::getSFAxis),
    new FieldDescription(SFReal32::getClassType(), 
                     "hiStop", 
                     HiStopFieldId, HiStopFieldMask,
                     false,
                     (FieldAccessMethod) &PhysicsPistonJointBase::getSFHiStop),
    new FieldDescription(SFReal32::getClassType(), 
                     "loStop", 
                     LoStopFieldId, LoStopFieldMask,
                     false,
                     (FieldAccessMethod) &PhysicsPistonJointBase::getSFLoStop),
    new FieldDescription(SFReal32::getClassType(), 
                     "bounce", 
                     BounceFieldId, BounceFieldMask,
                     false,
                     (FieldAccessMethod) &PhysicsPistonJointBase::getSFBounce),
    new FieldDescription(SFReal32::getClassType(), 
                     "CFM", 
                     CFMFieldId, CFMFieldMask,
                     false,
                     (FieldAccessMethod) &PhysicsPistonJointBase::getSFCFM),
    new FieldDescription(SFReal32::getClassType(), 
                     "stopERP", 
                     StopERPFieldId, StopERPFieldMask,
                     false,
                     (FieldAccessMethod) &PhysicsPistonJointBase::getSFStopERP),
    new FieldDescription(SFReal32::getClassType(), 
                     "stopCFM", 
                     StopCFMFieldId, StopCFMFieldMask,
                     false,
                     (FieldAccessMethod) &PhysicsPistonJointBase::getSFStopCFM),
    new FieldDescription(SFReal32::getClassType(), 
                     "hiStop2", 
                     HiStop2FieldId, HiStop2FieldMask,
                     false,
                     (FieldAccessMethod) &PhysicsPistonJointBase::getSFHiStop2),
    new FieldDescription(SFReal32::getClassType(), 
                     "loStop2", 
                     LoStop2FieldId, LoStop2FieldMask,
                     false,
                     (FieldAccessMethod) &PhysicsPistonJointBase::getSFLoStop2),
    new FieldDescription(SFReal32::getClassType(), 
                     "bounce2", 
                     Bounce2FieldId, Bounce2FieldMask,
                     false,
                     (FieldAccessMethod) &PhysicsPistonJointBase::getSFBounce2),
    new FieldDescription(SFReal32::getClassType(), 
                     "CFM2", 
                     CFM2FieldId, CFM2FieldMask,
                     false,
                     (FieldAccessMethod) &PhysicsPistonJointBase::getSFCFM2),
    new FieldDescription(SFReal32::getClassType(), 
                     "stopERP2", 
                     StopERP2FieldId, StopERP2FieldMask,
                     false,
                     (FieldAccessMethod) &PhysicsPistonJointBase::getSFStopERP2),
    new FieldDescription(SFReal32::getClassType(), 
                     "stopCFM2", 
                     StopCFM2FieldId, StopCFM2FieldMask,
                     false,
                     (FieldAccessMethod) &PhysicsPistonJointBase::getSFStopCFM2)
};


FieldContainerType PhysicsPistonJointBase::_type(
    "PhysicsPistonJoint",
    "PhysicsJoint",
    NULL,
    (PrototypeCreateF) &PhysicsPistonJointBase::createEmpty,
    PhysicsPistonJoint::initMethod,
    _desc,
    sizeof(_desc));

//OSG_FIELD_CONTAINER_DEF(PhysicsPistonJointBase, PhysicsPistonJointPtr)

/*------------------------------ get -----------------------------------*/

FieldContainerType &PhysicsPistonJointBase::getType(void) 
{
    return _type; 
} 

const FieldContainerType &PhysicsPistonJointBase::getType(void) const 
{
    return _type;
} 


FieldContainerPtr PhysicsPistonJointBase::shallowCopy(void) const 
{ 
    PhysicsPistonJointPtr returnValue; 

    newPtr(returnValue, dynamic_cast<const PhysicsPistonJoint *>(this)); 

    return returnValue; 
}

UInt32 PhysicsPistonJointBase::getContainerSize(void) const 
{ 
    return sizeof(PhysicsPistonJoint); 
}


#if !defined(OSG_FIXED_MFIELDSYNC)
void PhysicsPistonJointBase::executeSync(      FieldContainer &other,
                                    const BitVector      &whichField)
{
    this->executeSyncImpl((PhysicsPistonJointBase *) &other, whichField);
}
#else
void PhysicsPistonJointBase::executeSync(      FieldContainer &other,
                                    const BitVector      &whichField,                                    const SyncInfo       &sInfo     )
{
    this->executeSyncImpl((PhysicsPistonJointBase *) &other, whichField, sInfo);
}
void PhysicsPistonJointBase::execBeginEdit(const BitVector &whichField, 
                                            UInt32     uiAspect,
                                            UInt32     uiContainerSize) 
{
    this->execBeginEditImpl(whichField, uiAspect, uiContainerSize);
}

void PhysicsPistonJointBase::onDestroyAspect(UInt32 uiId, UInt32 uiAspect)
{
    Inherited::onDestroyAspect(uiId, uiAspect);

}
#endif

/*------------------------- constructors ----------------------------------*/

#ifdef OSG_WIN32_ICL
#pragma warning (disable : 383)
#endif

PhysicsPistonJointBase::PhysicsPistonJointBase(void) :
    _sfAnchor                 (), 
    _sfAxis                   (), 
    _sfHiStop                 (), 
    _sfLoStop                 (), 
    _sfBounce                 (), 
    _sfCFM                    (), 
    _sfStopERP                (), 
    _sfStopCFM                (), 
    _sfHiStop2                (), 
    _sfLoStop2                (), 
    _sfBounce2                (), 
    _sfCFM2                   (), 
    _sfStopERP2               (), 
    _sfStopCFM2               (), 
    Inherited() 
{
}

#ifdef OSG_WIN32_ICL
#pragma warning (default : 383)
#endif

PhysicsPistonJointBase::PhysicsPistonJointBase(const PhysicsPistonJointBase &source) :
    _sfAnchor                 (source._sfAnchor                 ), 
    _sfAxis                   (source._sfAxis                   ), 
    _sfHiStop                 (source._sfHiStop                 ), 
    _sfLoStop                 (source._sfLoStop                 ), 
    _sfBounce                 (source._sfBounce                 ), 
    _sfCFM                    (source._sfCFM                    ), 
    _sfStopERP                (source._sfStopERP                ), 
    _sfStopCFM                (source._sfStopCFM                ), 
    _sfHiStop2                (source._sfHiStop2                ), 
    _sfLoStop2                (source._sfLoStop2                ), 
    _sfBounce2                (source._sfBounce2                ), 
    _sfCFM2                   (source._sfCFM2                   ), 
    _sfStopERP2               (source._sfStopERP2               ), 
    _sfStopCFM2               (source._sfStopCFM2               ), 
    Inherited                 (source)
{
}

/*-------------------------- destructors ----------------------------------*/

PhysicsPistonJointBase::~PhysicsPistonJointBase(void)
{
}

/*------------------------------ access -----------------------------------*/

UInt32 PhysicsPistonJointBase::getBinSize(const BitVector &whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (AnchorFieldMask & whichField))
    {
        returnValue += _sfAnchor.getBinSize();
    }

    if(FieldBits::NoField != (AxisFieldMask & whichField))
    {
        returnValue += _sfAxis.getBinSize();
    }

    if(FieldBits::NoField != (HiStopFieldMask & whichField))
    {
        returnValue += _sfHiStop.getBinSize();
    }

    if(FieldBits::NoField != (LoStopFieldMask & whichField))
    {
        returnValue += _sfLoStop.getBinSize();
    }

    if(FieldBits::NoField != (BounceFieldMask & whichField))
    {
        returnValue += _sfBounce.getBinSize();
    }

    if(FieldBits::NoField != (CFMFieldMask & whichField))
    {
        returnValue += _sfCFM.getBinSize();
    }

    if(FieldBits::NoField != (StopERPFieldMask & whichField))
    {
        returnValue += _sfStopERP.getBinSize();
    }

    if(FieldBits::NoField != (StopCFMFieldMask & whichField))
    {
        returnValue += _sfStopCFM.getBinSize();
    }

    if(FieldBits::NoField != (HiStop2FieldMask & whichField))
    {
        returnValue += _sfHiStop2.getBinSize();
    }

    if(FieldBits::NoField != (LoStop2FieldMask & whichField))
    {
        returnValue += _sfLoStop2.getBinSize();
    }

    if(FieldBits::NoField != (Bounce2FieldMask & whichField))
    {
        returnValue += _sfBounce2.getBinSize();
    }

    if(FieldBits::NoField != (CFM2FieldMask & whichField))
    {
        returnValue += _sfCFM2.getBinSize();
    }

    if(FieldBits::NoField != (StopERP2FieldMask & whichField))
    {
        returnValue += _sfStopERP2.getBinSize();
    }

    if(FieldBits::NoField != (StopCFM2FieldMask & whichField))
    {
        returnValue += _sfStopCFM2.getBinSize();
    }


    return returnValue;
}

void PhysicsPistonJointBase::copyToBin(      BinaryDataHandler &pMem,
                                  const BitVector         &whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (AnchorFieldMask & whichField))
    {
        _sfAnchor.copyToBin(pMem);
    }

    if(FieldBits::NoField != (AxisFieldMask & whichField))
    {
        _sfAxis.copyToBin(pMem);
    }

    if(FieldBits::NoField != (HiStopFieldMask & whichField))
    {
        _sfHiStop.copyToBin(pMem);
    }

    if(FieldBits::NoField != (LoStopFieldMask & whichField))
    {
        _sfLoStop.copyToBin(pMem);
    }

    if(FieldBits::NoField != (BounceFieldMask & whichField))
    {
        _sfBounce.copyToBin(pMem);
    }

    if(FieldBits::NoField != (CFMFieldMask & whichField))
    {
        _sfCFM.copyToBin(pMem);
    }

    if(FieldBits::NoField != (StopERPFieldMask & whichField))
    {
        _sfStopERP.copyToBin(pMem);
    }

    if(FieldBits::NoField != (StopCFMFieldMask & whichField))
    {
        _sfStopCFM.copyToBin(pMem);
    }

    if(FieldBits::NoField != (HiStop2FieldMask & whichField))
    {
        _sfHiStop2.copyToBin(pMem);
    }

    if(FieldBits::NoField != (LoStop2FieldMask & whichField))
    {
        _sfLoStop2.copyToBin(pMem);
    }

    if(FieldBits::NoField != (Bounce2FieldMask & whichField))
    {
        _sfBounce2.copyToBin(pMem);
    }

    if(FieldBits::NoField != (CFM2FieldMask & whichField))
    {
        _sfCFM2.copyToBin(pMem);
    }

    if(FieldBits::NoField != (StopERP2FieldMask & whichField))
    {
        _sfStopERP2.copyToBin(pMem);
    }

    if(FieldBits::NoField != (StopCFM2FieldMask & whichField))
    {
        _sfStopCFM2.copyToBin(pMem);
    }


}

void PhysicsPistonJointBase::copyFromBin(      BinaryDataHandler &pMem,
                                    const BitVector    &whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (AnchorFieldMask & whichField))
    {
        _sfAnchor.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (AxisFieldMask & whichField))
    {
        _sfAxis.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (HiStopFieldMask & whichField))
    {
        _sfHiStop.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (LoStopFieldMask & whichField))
    {
        _sfLoStop.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (BounceFieldMask & whichField))
    {
        _sfBounce.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (CFMFieldMask & whichField))
    {
        _sfCFM.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (StopERPFieldMask & whichField))
    {
        _sfStopERP.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (StopCFMFieldMask & whichField))
    {
        _sfStopCFM.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (HiStop2FieldMask & whichField))
    {
        _sfHiStop2.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (LoStop2FieldMask & whichField))
    {
        _sfLoStop2.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (Bounce2FieldMask & whichField))
    {
        _sfBounce2.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (CFM2FieldMask & whichField))
    {
        _sfCFM2.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (StopERP2FieldMask & whichField))
    {
        _sfStopERP2.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (StopCFM2FieldMask & whichField))
    {
        _sfStopCFM2.copyFromBin(pMem);
    }


}

#if !defined(OSG_FIXED_MFIELDSYNC)
void PhysicsPistonJointBase::executeSyncImpl(      PhysicsPistonJointBase *pOther,
                                        const BitVector         &whichField)
{

    Inherited::executeSyncImpl(pOther, whichField);

    if(FieldBits::NoField != (AnchorFieldMask & whichField))
        _sfAnchor.syncWith(pOther->_sfAnchor);

    if(FieldBits::NoField != (AxisFieldMask & whichField))
        _sfAxis.syncWith(pOther->_sfAxis);

    if(FieldBits::NoField != (HiStopFieldMask & whichField))
        _sfHiStop.syncWith(pOther->_sfHiStop);

    if(FieldBits::NoField != (LoStopFieldMask & whichField))
        _sfLoStop.syncWith(pOther->_sfLoStop);

    if(FieldBits::NoField != (BounceFieldMask & whichField))
        _sfBounce.syncWith(pOther->_sfBounce);

    if(FieldBits::NoField != (CFMFieldMask & whichField))
        _sfCFM.syncWith(pOther->_sfCFM);

    if(FieldBits::NoField != (StopERPFieldMask & whichField))
        _sfStopERP.syncWith(pOther->_sfStopERP);

    if(FieldBits::NoField != (StopCFMFieldMask & whichField))
        _sfStopCFM.syncWith(pOther->_sfStopCFM);

    if(FieldBits::NoField != (HiStop2FieldMask & whichField))
        _sfHiStop2.syncWith(pOther->_sfHiStop2);

    if(FieldBits::NoField != (LoStop2FieldMask & whichField))
        _sfLoStop2.syncWith(pOther->_sfLoStop2);

    if(FieldBits::NoField != (Bounce2FieldMask & whichField))
        _sfBounce2.syncWith(pOther->_sfBounce2);

    if(FieldBits::NoField != (CFM2FieldMask & whichField))
        _sfCFM2.syncWith(pOther->_sfCFM2);

    if(FieldBits::NoField != (StopERP2FieldMask & whichField))
        _sfStopERP2.syncWith(pOther->_sfStopERP2);

    if(FieldBits::NoField != (StopCFM2FieldMask & whichField))
        _sfStopCFM2.syncWith(pOther->_sfStopCFM2);


}
#else
void PhysicsPistonJointBase::executeSyncImpl(      PhysicsPistonJointBase *pOther,
                                        const BitVector         &whichField,
                                        const SyncInfo          &sInfo      )
{

    Inherited::executeSyncImpl(pOther, whichField, sInfo);

    if(FieldBits::NoField != (AnchorFieldMask & whichField))
        _sfAnchor.syncWith(pOther->_sfAnchor);

    if(FieldBits::NoField != (AxisFieldMask & whichField))
        _sfAxis.syncWith(pOther->_sfAxis);

    if(FieldBits::NoField != (HiStopFieldMask & whichField))
        _sfHiStop.syncWith(pOther->_sfHiStop);

    if(FieldBits::NoField != (LoStopFieldMask & whichField))
        _sfLoStop.syncWith(pOther->_sfLoStop);

    if(FieldBits::NoField != (BounceFieldMask & whichField))
        _sfBounce.syncWith(pOther->_sfBounce);

    if(FieldBits::NoField != (CFMFieldMask & whichField))
        _sfCFM.syncWith(pOther->_sfCFM);

    if(FieldBits::NoField != (StopERPFieldMask & whichField))
        _sfStopERP.syncWith(pOther->_sfStopERP);

    if(FieldBits::NoField != (StopCFMFieldMask & whichField))
        _sfStopCFM.syncWith(pOther->_sfStopCFM);

    if(FieldBits::NoField != (HiStop2FieldMask & whichField))
        _sfHiStop2.syncWith(pOther->_sfHiStop2);

    if(FieldBits::NoField != (LoStop2FieldMask & whichField))
        _sfLoStop2.syncWith(pOther->_sfLoStop2);

    if(FieldBits::NoField != (Bounce2FieldMask & whichField))
        _sfBounce2.syncWith(pOther->_sfBounce2);

    if(FieldBits::NoField != (CFM2FieldMask & whichField))
        _sfCFM2.syncWith(pOther->_sfCFM2);

    if(FieldBits::NoField != (StopERP2FieldMask & whichField))
        _sfStopERP2.syncWith(pOther->_sfStopERP2);

    if(FieldBits::NoField != (StopCFM2FieldMask & whichField))
        _sfStopCFM2.syncWith(pOther->_sfStopCFM2);



}

void PhysicsPistonJointBase::execBeginEditImpl (const BitVector &whichField, 
                                                 UInt32     uiAspect,
                                                 UInt32     uiContainerSize)
{
    Inherited::execBeginEditImpl(whichField, uiAspect, uiContainerSize);

}
#endif



OSG_END_NAMESPACE

#include <OpenSG/OSGSFieldTypeDef.inl>
#include <OpenSG/OSGMFieldTypeDef.inl>

OSG_BEGIN_NAMESPACE

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldDataTraits<PhysicsPistonJointPtr>::_type("PhysicsPistonJointPtr", "PhysicsJointPtr");
#endif

OSG_DLLEXPORT_SFIELD_DEF1(PhysicsPistonJointPtr, OSG_PHYSICSLIB_DLLTMPLMAPPING);
OSG_DLLEXPORT_MFIELD_DEF1(PhysicsPistonJointPtr, OSG_PHYSICSLIB_DLLTMPLMAPPING);


/*------------------------------------------------------------------------*/
/*                              cvs id's                                  */

#ifdef OSG_SGI_CC
#pragma set woff 1174
#endif

#ifdef OSG_LINUX_ICC
#pragma warning( disable : 177 )
#endif

namespace
{
    static Char8 cvsid_cpp       [] = "@(#)$Id: FCBaseTemplate_cpp.h,v 1.47 2006/03/17 17:03:19 pdaehne Exp $";
    static Char8 cvsid_hpp       [] = OSGPHYSICSPISTONJOINTBASE_HEADER_CVSID;
    static Char8 cvsid_inl       [] = OSGPHYSICSPISTONJOINTBASE_INLINE_CVSID;

    static Char8 cvsid_fields_hpp[] = OSGPHYSICSPISTONJOINTFIELDS_HEADER_CVSID;
}

OSG_END_NAMESPACE

