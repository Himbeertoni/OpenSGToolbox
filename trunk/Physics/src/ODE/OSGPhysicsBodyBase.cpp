/*---------------------------------------------------------------------------*\
 *                     OpenSG ToolBox UserInterface                          *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                         www.vrac.iastate.edu                              *
 *                                                                           *
 *                          Authors: David Kabala                            *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class PhysicsBody!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#define OSG_COMPILEPHYSICSBODYINST

#include <stdlib.h>
#include <stdio.h>

#include <OpenSG/OSGConfig.h>

#include "OSGPhysicsBodyBase.h"
#include "OSGPhysicsBody.h"


OSG_BEGIN_NAMESPACE

const OSG::BitVector  PhysicsBodyBase::PositionFieldMask = 
    (TypeTraits<BitVector>::One << PhysicsBodyBase::PositionFieldId);

const OSG::BitVector  PhysicsBodyBase::RotationFieldMask = 
    (TypeTraits<BitVector>::One << PhysicsBodyBase::RotationFieldId);

const OSG::BitVector  PhysicsBodyBase::QuaternionFieldMask = 
    (TypeTraits<BitVector>::One << PhysicsBodyBase::QuaternionFieldId);

const OSG::BitVector  PhysicsBodyBase::LinearVelFieldMask = 
    (TypeTraits<BitVector>::One << PhysicsBodyBase::LinearVelFieldId);

const OSG::BitVector  PhysicsBodyBase::AngularVelFieldMask = 
    (TypeTraits<BitVector>::One << PhysicsBodyBase::AngularVelFieldId);

const OSG::BitVector  PhysicsBodyBase::ForceFieldMask = 
    (TypeTraits<BitVector>::One << PhysicsBodyBase::ForceFieldId);

const OSG::BitVector  PhysicsBodyBase::TorqueFieldMask = 
    (TypeTraits<BitVector>::One << PhysicsBodyBase::TorqueFieldId);

const OSG::BitVector  PhysicsBodyBase::MassFieldMask = 
    (TypeTraits<BitVector>::One << PhysicsBodyBase::MassFieldId);

const OSG::BitVector  PhysicsBodyBase::MassCenterOfGravityFieldMask = 
    (TypeTraits<BitVector>::One << PhysicsBodyBase::MassCenterOfGravityFieldId);

const OSG::BitVector  PhysicsBodyBase::MassInertiaTensorFieldMask = 
    (TypeTraits<BitVector>::One << PhysicsBodyBase::MassInertiaTensorFieldId);

const OSG::BitVector  PhysicsBodyBase::AutoDisableFlagFieldMask = 
    (TypeTraits<BitVector>::One << PhysicsBodyBase::AutoDisableFlagFieldId);

const OSG::BitVector  PhysicsBodyBase::AutoDisableLinearThresholdFieldMask = 
    (TypeTraits<BitVector>::One << PhysicsBodyBase::AutoDisableLinearThresholdFieldId);

const OSG::BitVector  PhysicsBodyBase::AutoDisableAngularThresholdFieldMask = 
    (TypeTraits<BitVector>::One << PhysicsBodyBase::AutoDisableAngularThresholdFieldId);

const OSG::BitVector  PhysicsBodyBase::AutoDisableStepsFieldMask = 
    (TypeTraits<BitVector>::One << PhysicsBodyBase::AutoDisableStepsFieldId);

const OSG::BitVector  PhysicsBodyBase::AutoDisableTimeFieldMask = 
    (TypeTraits<BitVector>::One << PhysicsBodyBase::AutoDisableTimeFieldId);

const OSG::BitVector  PhysicsBodyBase::FiniteRotationModeFieldMask = 
    (TypeTraits<BitVector>::One << PhysicsBodyBase::FiniteRotationModeFieldId);

const OSG::BitVector  PhysicsBodyBase::FiniteRotationAxisFieldMask = 
    (TypeTraits<BitVector>::One << PhysicsBodyBase::FiniteRotationAxisFieldId);

const OSG::BitVector  PhysicsBodyBase::GravityModeFieldMask = 
    (TypeTraits<BitVector>::One << PhysicsBodyBase::GravityModeFieldId);

const OSG::BitVector  PhysicsBodyBase::LinearDampingFieldMask = 
    (TypeTraits<BitVector>::One << PhysicsBodyBase::LinearDampingFieldId);

const OSG::BitVector  PhysicsBodyBase::AngularDampingFieldMask = 
    (TypeTraits<BitVector>::One << PhysicsBodyBase::AngularDampingFieldId);

const OSG::BitVector  PhysicsBodyBase::LinearDampingThresholdFieldMask = 
    (TypeTraits<BitVector>::One << PhysicsBodyBase::LinearDampingThresholdFieldId);

const OSG::BitVector  PhysicsBodyBase::AngularDampingThresholdFieldMask = 
    (TypeTraits<BitVector>::One << PhysicsBodyBase::AngularDampingThresholdFieldId);

const OSG::BitVector  PhysicsBodyBase::MaxAngularSpeedFieldMask = 
    (TypeTraits<BitVector>::One << PhysicsBodyBase::MaxAngularSpeedFieldId);

const OSG::BitVector  PhysicsBodyBase::KinematicFieldMask = 
    (TypeTraits<BitVector>::One << PhysicsBodyBase::KinematicFieldId);

const OSG::BitVector  PhysicsBodyBase::WorldFieldMask = 
    (TypeTraits<BitVector>::One << PhysicsBodyBase::WorldFieldId);

const OSG::BitVector PhysicsBodyBase::MTInfluenceMask = 
    (Inherited::MTInfluenceMask) | 
    (static_cast<BitVector>(0x0) << Inherited::NextFieldId); 


// Field descriptions

/*! \var Vec3f           PhysicsBodyBase::_sfPosition
    
*/
/*! \var Matrix          PhysicsBodyBase::_sfRotation
    
*/
/*! \var Quaternion      PhysicsBodyBase::_sfQuaternion
    
*/
/*! \var Vec3f           PhysicsBodyBase::_sfLinearVel
    
*/
/*! \var Vec3f           PhysicsBodyBase::_sfAngularVel
    
*/
/*! \var Vec3f           PhysicsBodyBase::_sfForce
    
*/
/*! \var Vec3f           PhysicsBodyBase::_sfTorque
    
*/
/*! \var Real32          PhysicsBodyBase::_sfMass
    
*/
/*! \var Vec3f           PhysicsBodyBase::_sfMassCenterOfGravity
    
*/
/*! \var Matrix          PhysicsBodyBase::_sfMassInertiaTensor
    
*/
/*! \var Int32           PhysicsBodyBase::_sfAutoDisableFlag
    
*/
/*! \var Real32          PhysicsBodyBase::_sfAutoDisableLinearThreshold
    
*/
/*! \var Real32          PhysicsBodyBase::_sfAutoDisableAngularThreshold
    
*/
/*! \var Int32           PhysicsBodyBase::_sfAutoDisableSteps
    
*/
/*! \var Real32          PhysicsBodyBase::_sfAutoDisableTime
    
*/
/*! \var Int32           PhysicsBodyBase::_sfFiniteRotationMode
    
*/
/*! \var Vec3f           PhysicsBodyBase::_sfFiniteRotationAxis
    
*/
/*! \var bool            PhysicsBodyBase::_sfGravityMode
    
*/
/*! \var Real32          PhysicsBodyBase::_sfLinearDamping
    
*/
/*! \var Real32          PhysicsBodyBase::_sfAngularDamping
    
*/
/*! \var Real32          PhysicsBodyBase::_sfLinearDampingThreshold
    
*/
/*! \var Real32          PhysicsBodyBase::_sfAngularDampingThreshold
    
*/
/*! \var Real32          PhysicsBodyBase::_sfMaxAngularSpeed
    
*/
/*! \var bool            PhysicsBodyBase::_sfKinematic
    
*/
/*! \var PhysicsWorldPtr PhysicsBodyBase::_sfWorld
    
*/

//! PhysicsBody description

FieldDescription *PhysicsBodyBase::_desc[] = 
{
    new FieldDescription(SFVec3f::getClassType(), 
                     "position", 
                     PositionFieldId, PositionFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&PhysicsBodyBase::editSFPosition)),
    new FieldDescription(SFMatrix::getClassType(), 
                     "rotation", 
                     RotationFieldId, RotationFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&PhysicsBodyBase::editSFRotation)),
    new FieldDescription(SFQuaternion::getClassType(), 
                     "quaternion", 
                     QuaternionFieldId, QuaternionFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&PhysicsBodyBase::editSFQuaternion)),
    new FieldDescription(SFVec3f::getClassType(), 
                     "linearVel", 
                     LinearVelFieldId, LinearVelFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&PhysicsBodyBase::editSFLinearVel)),
    new FieldDescription(SFVec3f::getClassType(), 
                     "angularVel", 
                     AngularVelFieldId, AngularVelFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&PhysicsBodyBase::editSFAngularVel)),
    new FieldDescription(SFVec3f::getClassType(), 
                     "force", 
                     ForceFieldId, ForceFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&PhysicsBodyBase::editSFForce)),
    new FieldDescription(SFVec3f::getClassType(), 
                     "torque", 
                     TorqueFieldId, TorqueFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&PhysicsBodyBase::editSFTorque)),
    new FieldDescription(SFReal32::getClassType(), 
                     "mass", 
                     MassFieldId, MassFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&PhysicsBodyBase::editSFMass)),
    new FieldDescription(SFVec3f::getClassType(), 
                     "massCenterOfGravity", 
                     MassCenterOfGravityFieldId, MassCenterOfGravityFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&PhysicsBodyBase::editSFMassCenterOfGravity)),
    new FieldDescription(SFMatrix::getClassType(), 
                     "massInertiaTensor", 
                     MassInertiaTensorFieldId, MassInertiaTensorFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&PhysicsBodyBase::editSFMassInertiaTensor)),
    new FieldDescription(SFInt32::getClassType(), 
                     "autoDisableFlag", 
                     AutoDisableFlagFieldId, AutoDisableFlagFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&PhysicsBodyBase::editSFAutoDisableFlag)),
    new FieldDescription(SFReal32::getClassType(), 
                     "autoDisableLinearThreshold", 
                     AutoDisableLinearThresholdFieldId, AutoDisableLinearThresholdFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&PhysicsBodyBase::editSFAutoDisableLinearThreshold)),
    new FieldDescription(SFReal32::getClassType(), 
                     "autoDisableAngularThreshold", 
                     AutoDisableAngularThresholdFieldId, AutoDisableAngularThresholdFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&PhysicsBodyBase::editSFAutoDisableAngularThreshold)),
    new FieldDescription(SFInt32::getClassType(), 
                     "autoDisableSteps", 
                     AutoDisableStepsFieldId, AutoDisableStepsFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&PhysicsBodyBase::editSFAutoDisableSteps)),
    new FieldDescription(SFReal32::getClassType(), 
                     "autoDisableTime", 
                     AutoDisableTimeFieldId, AutoDisableTimeFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&PhysicsBodyBase::editSFAutoDisableTime)),
    new FieldDescription(SFInt32::getClassType(), 
                     "finiteRotationMode", 
                     FiniteRotationModeFieldId, FiniteRotationModeFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&PhysicsBodyBase::editSFFiniteRotationMode)),
    new FieldDescription(SFVec3f::getClassType(), 
                     "finiteRotationAxis", 
                     FiniteRotationAxisFieldId, FiniteRotationAxisFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&PhysicsBodyBase::editSFFiniteRotationAxis)),
    new FieldDescription(SFBool::getClassType(), 
                     "gravityMode", 
                     GravityModeFieldId, GravityModeFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&PhysicsBodyBase::editSFGravityMode)),
    new FieldDescription(SFReal32::getClassType(), 
                     "linearDamping", 
                     LinearDampingFieldId, LinearDampingFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&PhysicsBodyBase::editSFLinearDamping)),
    new FieldDescription(SFReal32::getClassType(), 
                     "angularDamping", 
                     AngularDampingFieldId, AngularDampingFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&PhysicsBodyBase::editSFAngularDamping)),
    new FieldDescription(SFReal32::getClassType(), 
                     "linearDampingThreshold", 
                     LinearDampingThresholdFieldId, LinearDampingThresholdFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&PhysicsBodyBase::editSFLinearDampingThreshold)),
    new FieldDescription(SFReal32::getClassType(), 
                     "angularDampingThreshold", 
                     AngularDampingThresholdFieldId, AngularDampingThresholdFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&PhysicsBodyBase::editSFAngularDampingThreshold)),
    new FieldDescription(SFReal32::getClassType(), 
                     "maxAngularSpeed", 
                     MaxAngularSpeedFieldId, MaxAngularSpeedFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&PhysicsBodyBase::editSFMaxAngularSpeed)),
    new FieldDescription(SFBool::getClassType(), 
                     "kinematic", 
                     KinematicFieldId, KinematicFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&PhysicsBodyBase::editSFKinematic)),
    new FieldDescription(SFPhysicsWorldPtr::getClassType(), 
                     "world", 
                     WorldFieldId, WorldFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&PhysicsBodyBase::editSFWorld))
};


FieldContainerType PhysicsBodyBase::_type(
    "PhysicsBody",
    "Attachment",
    NULL,
    reinterpret_cast<PrototypeCreateF>(&PhysicsBodyBase::createEmpty),
    PhysicsBody::initMethod,
    _desc,
    sizeof(_desc));

//OSG_FIELD_CONTAINER_DEF(PhysicsBodyBase, PhysicsBodyPtr)

/*------------------------------ get -----------------------------------*/

FieldContainerType &PhysicsBodyBase::getType(void) 
{
    return _type; 
} 

const FieldContainerType &PhysicsBodyBase::getType(void) const 
{
    return _type;
} 


FieldContainerPtr PhysicsBodyBase::shallowCopy(void) const 
{ 
    PhysicsBodyPtr returnValue; 

    newPtr(returnValue, dynamic_cast<const PhysicsBody *>(this)); 

    return returnValue; 
}

UInt32 PhysicsBodyBase::getContainerSize(void) const 
{ 
    return sizeof(PhysicsBody); 
}


#if !defined(OSG_FIXED_MFIELDSYNC)
void PhysicsBodyBase::executeSync(      FieldContainer &other,
                                    const BitVector      &whichField)
{
    this->executeSyncImpl(static_cast<PhysicsBodyBase *>(&other),
                          whichField);
}
#else
void PhysicsBodyBase::executeSync(      FieldContainer &other,
                                    const BitVector      &whichField,                                    const SyncInfo       &sInfo     )
{
    this->executeSyncImpl((PhysicsBodyBase *) &other, whichField, sInfo);
}
void PhysicsBodyBase::execBeginEdit(const BitVector &whichField, 
                                            UInt32     uiAspect,
                                            UInt32     uiContainerSize) 
{
    this->execBeginEditImpl(whichField, uiAspect, uiContainerSize);
}

void PhysicsBodyBase::onDestroyAspect(UInt32 uiId, UInt32 uiAspect)
{
    Inherited::onDestroyAspect(uiId, uiAspect);

}
#endif

/*------------------------- constructors ----------------------------------*/

#ifdef OSG_WIN32_ICL
#pragma warning (disable : 383)
#endif

PhysicsBodyBase::PhysicsBodyBase(void) :
    _sfPosition               (Vec3f(0.0f,0.0f,0.0f)), 
    _sfRotation               (), 
    _sfQuaternion             (), 
    _sfLinearVel              (Vec3f(0.0f,0.0f,0.0f)), 
    _sfAngularVel             (Vec3f(0.0f,0.0f,0.0f)), 
    _sfForce                  (Vec3f(0.0f,0.0f,0.0f)), 
    _sfTorque                 (Vec3f(0.0f,0.0f,0.0f)), 
    _sfMass                   (Real32(1)), 
    _sfMassCenterOfGravity    (Vec3f(0.0f,0.0f,0.0f)), 
    _sfMassInertiaTensor      (), 
    _sfAutoDisableFlag        (Int32(1)), 
    _sfAutoDisableLinearThreshold(Real32(0.01f)), 
    _sfAutoDisableAngularThreshold(Real32(0.01f)), 
    _sfAutoDisableSteps       (Int32(10)), 
    _sfAutoDisableTime        (Real32(0.75f)), 
    _sfFiniteRotationMode     (Int32(0)), 
    _sfFiniteRotationAxis     (Vec3f(0.0f,0.0f,0.0f)), 
    _sfGravityMode            (bool(true)), 
    _sfLinearDamping          (Real32(0.0f)), 
    _sfAngularDamping         (Real32(0.0f)), 
    _sfLinearDampingThreshold (Real32(0.01f)), 
    _sfAngularDampingThreshold(Real32(0.01f)), 
    _sfMaxAngularSpeed        (Real32(-1.0)), 
    _sfKinematic              (bool(false)), 
    _sfWorld                  (PhysicsWorldPtr(NullFC)), 
    Inherited() 
{
}

#ifdef OSG_WIN32_ICL
#pragma warning (default : 383)
#endif

PhysicsBodyBase::PhysicsBodyBase(const PhysicsBodyBase &source) :
    _sfPosition               (source._sfPosition               ), 
    _sfRotation               (source._sfRotation               ), 
    _sfQuaternion             (source._sfQuaternion             ), 
    _sfLinearVel              (source._sfLinearVel              ), 
    _sfAngularVel             (source._sfAngularVel             ), 
    _sfForce                  (source._sfForce                  ), 
    _sfTorque                 (source._sfTorque                 ), 
    _sfMass                   (source._sfMass                   ), 
    _sfMassCenterOfGravity    (source._sfMassCenterOfGravity    ), 
    _sfMassInertiaTensor      (source._sfMassInertiaTensor      ), 
    _sfAutoDisableFlag        (source._sfAutoDisableFlag        ), 
    _sfAutoDisableLinearThreshold(source._sfAutoDisableLinearThreshold), 
    _sfAutoDisableAngularThreshold(source._sfAutoDisableAngularThreshold), 
    _sfAutoDisableSteps       (source._sfAutoDisableSteps       ), 
    _sfAutoDisableTime        (source._sfAutoDisableTime        ), 
    _sfFiniteRotationMode     (source._sfFiniteRotationMode     ), 
    _sfFiniteRotationAxis     (source._sfFiniteRotationAxis     ), 
    _sfGravityMode            (source._sfGravityMode            ), 
    _sfLinearDamping          (source._sfLinearDamping          ), 
    _sfAngularDamping         (source._sfAngularDamping         ), 
    _sfLinearDampingThreshold (source._sfLinearDampingThreshold ), 
    _sfAngularDampingThreshold(source._sfAngularDampingThreshold), 
    _sfMaxAngularSpeed        (source._sfMaxAngularSpeed        ), 
    _sfKinematic              (source._sfKinematic              ), 
    _sfWorld                  (source._sfWorld                  ), 
    Inherited                 (source)
{
}

/*-------------------------- destructors ----------------------------------*/

PhysicsBodyBase::~PhysicsBodyBase(void)
{
}

/*------------------------------ access -----------------------------------*/

UInt32 PhysicsBodyBase::getBinSize(const BitVector &whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (PositionFieldMask & whichField))
    {
        returnValue += _sfPosition.getBinSize();
    }

    if(FieldBits::NoField != (RotationFieldMask & whichField))
    {
        returnValue += _sfRotation.getBinSize();
    }

    if(FieldBits::NoField != (QuaternionFieldMask & whichField))
    {
        returnValue += _sfQuaternion.getBinSize();
    }

    if(FieldBits::NoField != (LinearVelFieldMask & whichField))
    {
        returnValue += _sfLinearVel.getBinSize();
    }

    if(FieldBits::NoField != (AngularVelFieldMask & whichField))
    {
        returnValue += _sfAngularVel.getBinSize();
    }

    if(FieldBits::NoField != (ForceFieldMask & whichField))
    {
        returnValue += _sfForce.getBinSize();
    }

    if(FieldBits::NoField != (TorqueFieldMask & whichField))
    {
        returnValue += _sfTorque.getBinSize();
    }

    if(FieldBits::NoField != (MassFieldMask & whichField))
    {
        returnValue += _sfMass.getBinSize();
    }

    if(FieldBits::NoField != (MassCenterOfGravityFieldMask & whichField))
    {
        returnValue += _sfMassCenterOfGravity.getBinSize();
    }

    if(FieldBits::NoField != (MassInertiaTensorFieldMask & whichField))
    {
        returnValue += _sfMassInertiaTensor.getBinSize();
    }

    if(FieldBits::NoField != (AutoDisableFlagFieldMask & whichField))
    {
        returnValue += _sfAutoDisableFlag.getBinSize();
    }

    if(FieldBits::NoField != (AutoDisableLinearThresholdFieldMask & whichField))
    {
        returnValue += _sfAutoDisableLinearThreshold.getBinSize();
    }

    if(FieldBits::NoField != (AutoDisableAngularThresholdFieldMask & whichField))
    {
        returnValue += _sfAutoDisableAngularThreshold.getBinSize();
    }

    if(FieldBits::NoField != (AutoDisableStepsFieldMask & whichField))
    {
        returnValue += _sfAutoDisableSteps.getBinSize();
    }

    if(FieldBits::NoField != (AutoDisableTimeFieldMask & whichField))
    {
        returnValue += _sfAutoDisableTime.getBinSize();
    }

    if(FieldBits::NoField != (FiniteRotationModeFieldMask & whichField))
    {
        returnValue += _sfFiniteRotationMode.getBinSize();
    }

    if(FieldBits::NoField != (FiniteRotationAxisFieldMask & whichField))
    {
        returnValue += _sfFiniteRotationAxis.getBinSize();
    }

    if(FieldBits::NoField != (GravityModeFieldMask & whichField))
    {
        returnValue += _sfGravityMode.getBinSize();
    }

    if(FieldBits::NoField != (LinearDampingFieldMask & whichField))
    {
        returnValue += _sfLinearDamping.getBinSize();
    }

    if(FieldBits::NoField != (AngularDampingFieldMask & whichField))
    {
        returnValue += _sfAngularDamping.getBinSize();
    }

    if(FieldBits::NoField != (LinearDampingThresholdFieldMask & whichField))
    {
        returnValue += _sfLinearDampingThreshold.getBinSize();
    }

    if(FieldBits::NoField != (AngularDampingThresholdFieldMask & whichField))
    {
        returnValue += _sfAngularDampingThreshold.getBinSize();
    }

    if(FieldBits::NoField != (MaxAngularSpeedFieldMask & whichField))
    {
        returnValue += _sfMaxAngularSpeed.getBinSize();
    }

    if(FieldBits::NoField != (KinematicFieldMask & whichField))
    {
        returnValue += _sfKinematic.getBinSize();
    }

    if(FieldBits::NoField != (WorldFieldMask & whichField))
    {
        returnValue += _sfWorld.getBinSize();
    }


    return returnValue;
}

void PhysicsBodyBase::copyToBin(      BinaryDataHandler &pMem,
                                  const BitVector         &whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (PositionFieldMask & whichField))
    {
        _sfPosition.copyToBin(pMem);
    }

    if(FieldBits::NoField != (RotationFieldMask & whichField))
    {
        _sfRotation.copyToBin(pMem);
    }

    if(FieldBits::NoField != (QuaternionFieldMask & whichField))
    {
        _sfQuaternion.copyToBin(pMem);
    }

    if(FieldBits::NoField != (LinearVelFieldMask & whichField))
    {
        _sfLinearVel.copyToBin(pMem);
    }

    if(FieldBits::NoField != (AngularVelFieldMask & whichField))
    {
        _sfAngularVel.copyToBin(pMem);
    }

    if(FieldBits::NoField != (ForceFieldMask & whichField))
    {
        _sfForce.copyToBin(pMem);
    }

    if(FieldBits::NoField != (TorqueFieldMask & whichField))
    {
        _sfTorque.copyToBin(pMem);
    }

    if(FieldBits::NoField != (MassFieldMask & whichField))
    {
        _sfMass.copyToBin(pMem);
    }

    if(FieldBits::NoField != (MassCenterOfGravityFieldMask & whichField))
    {
        _sfMassCenterOfGravity.copyToBin(pMem);
    }

    if(FieldBits::NoField != (MassInertiaTensorFieldMask & whichField))
    {
        _sfMassInertiaTensor.copyToBin(pMem);
    }

    if(FieldBits::NoField != (AutoDisableFlagFieldMask & whichField))
    {
        _sfAutoDisableFlag.copyToBin(pMem);
    }

    if(FieldBits::NoField != (AutoDisableLinearThresholdFieldMask & whichField))
    {
        _sfAutoDisableLinearThreshold.copyToBin(pMem);
    }

    if(FieldBits::NoField != (AutoDisableAngularThresholdFieldMask & whichField))
    {
        _sfAutoDisableAngularThreshold.copyToBin(pMem);
    }

    if(FieldBits::NoField != (AutoDisableStepsFieldMask & whichField))
    {
        _sfAutoDisableSteps.copyToBin(pMem);
    }

    if(FieldBits::NoField != (AutoDisableTimeFieldMask & whichField))
    {
        _sfAutoDisableTime.copyToBin(pMem);
    }

    if(FieldBits::NoField != (FiniteRotationModeFieldMask & whichField))
    {
        _sfFiniteRotationMode.copyToBin(pMem);
    }

    if(FieldBits::NoField != (FiniteRotationAxisFieldMask & whichField))
    {
        _sfFiniteRotationAxis.copyToBin(pMem);
    }

    if(FieldBits::NoField != (GravityModeFieldMask & whichField))
    {
        _sfGravityMode.copyToBin(pMem);
    }

    if(FieldBits::NoField != (LinearDampingFieldMask & whichField))
    {
        _sfLinearDamping.copyToBin(pMem);
    }

    if(FieldBits::NoField != (AngularDampingFieldMask & whichField))
    {
        _sfAngularDamping.copyToBin(pMem);
    }

    if(FieldBits::NoField != (LinearDampingThresholdFieldMask & whichField))
    {
        _sfLinearDampingThreshold.copyToBin(pMem);
    }

    if(FieldBits::NoField != (AngularDampingThresholdFieldMask & whichField))
    {
        _sfAngularDampingThreshold.copyToBin(pMem);
    }

    if(FieldBits::NoField != (MaxAngularSpeedFieldMask & whichField))
    {
        _sfMaxAngularSpeed.copyToBin(pMem);
    }

    if(FieldBits::NoField != (KinematicFieldMask & whichField))
    {
        _sfKinematic.copyToBin(pMem);
    }

    if(FieldBits::NoField != (WorldFieldMask & whichField))
    {
        _sfWorld.copyToBin(pMem);
    }


}

void PhysicsBodyBase::copyFromBin(      BinaryDataHandler &pMem,
                                    const BitVector    &whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (PositionFieldMask & whichField))
    {
        _sfPosition.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (RotationFieldMask & whichField))
    {
        _sfRotation.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (QuaternionFieldMask & whichField))
    {
        _sfQuaternion.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (LinearVelFieldMask & whichField))
    {
        _sfLinearVel.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (AngularVelFieldMask & whichField))
    {
        _sfAngularVel.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (ForceFieldMask & whichField))
    {
        _sfForce.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (TorqueFieldMask & whichField))
    {
        _sfTorque.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (MassFieldMask & whichField))
    {
        _sfMass.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (MassCenterOfGravityFieldMask & whichField))
    {
        _sfMassCenterOfGravity.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (MassInertiaTensorFieldMask & whichField))
    {
        _sfMassInertiaTensor.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (AutoDisableFlagFieldMask & whichField))
    {
        _sfAutoDisableFlag.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (AutoDisableLinearThresholdFieldMask & whichField))
    {
        _sfAutoDisableLinearThreshold.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (AutoDisableAngularThresholdFieldMask & whichField))
    {
        _sfAutoDisableAngularThreshold.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (AutoDisableStepsFieldMask & whichField))
    {
        _sfAutoDisableSteps.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (AutoDisableTimeFieldMask & whichField))
    {
        _sfAutoDisableTime.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (FiniteRotationModeFieldMask & whichField))
    {
        _sfFiniteRotationMode.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (FiniteRotationAxisFieldMask & whichField))
    {
        _sfFiniteRotationAxis.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (GravityModeFieldMask & whichField))
    {
        _sfGravityMode.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (LinearDampingFieldMask & whichField))
    {
        _sfLinearDamping.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (AngularDampingFieldMask & whichField))
    {
        _sfAngularDamping.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (LinearDampingThresholdFieldMask & whichField))
    {
        _sfLinearDampingThreshold.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (AngularDampingThresholdFieldMask & whichField))
    {
        _sfAngularDampingThreshold.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (MaxAngularSpeedFieldMask & whichField))
    {
        _sfMaxAngularSpeed.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (KinematicFieldMask & whichField))
    {
        _sfKinematic.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (WorldFieldMask & whichField))
    {
        _sfWorld.copyFromBin(pMem);
    }


}

#if !defined(OSG_FIXED_MFIELDSYNC)
void PhysicsBodyBase::executeSyncImpl(      PhysicsBodyBase *pOther,
                                        const BitVector         &whichField)
{

    Inherited::executeSyncImpl(pOther, whichField);

    if(FieldBits::NoField != (PositionFieldMask & whichField))
        _sfPosition.syncWith(pOther->_sfPosition);

    if(FieldBits::NoField != (RotationFieldMask & whichField))
        _sfRotation.syncWith(pOther->_sfRotation);

    if(FieldBits::NoField != (QuaternionFieldMask & whichField))
        _sfQuaternion.syncWith(pOther->_sfQuaternion);

    if(FieldBits::NoField != (LinearVelFieldMask & whichField))
        _sfLinearVel.syncWith(pOther->_sfLinearVel);

    if(FieldBits::NoField != (AngularVelFieldMask & whichField))
        _sfAngularVel.syncWith(pOther->_sfAngularVel);

    if(FieldBits::NoField != (ForceFieldMask & whichField))
        _sfForce.syncWith(pOther->_sfForce);

    if(FieldBits::NoField != (TorqueFieldMask & whichField))
        _sfTorque.syncWith(pOther->_sfTorque);

    if(FieldBits::NoField != (MassFieldMask & whichField))
        _sfMass.syncWith(pOther->_sfMass);

    if(FieldBits::NoField != (MassCenterOfGravityFieldMask & whichField))
        _sfMassCenterOfGravity.syncWith(pOther->_sfMassCenterOfGravity);

    if(FieldBits::NoField != (MassInertiaTensorFieldMask & whichField))
        _sfMassInertiaTensor.syncWith(pOther->_sfMassInertiaTensor);

    if(FieldBits::NoField != (AutoDisableFlagFieldMask & whichField))
        _sfAutoDisableFlag.syncWith(pOther->_sfAutoDisableFlag);

    if(FieldBits::NoField != (AutoDisableLinearThresholdFieldMask & whichField))
        _sfAutoDisableLinearThreshold.syncWith(pOther->_sfAutoDisableLinearThreshold);

    if(FieldBits::NoField != (AutoDisableAngularThresholdFieldMask & whichField))
        _sfAutoDisableAngularThreshold.syncWith(pOther->_sfAutoDisableAngularThreshold);

    if(FieldBits::NoField != (AutoDisableStepsFieldMask & whichField))
        _sfAutoDisableSteps.syncWith(pOther->_sfAutoDisableSteps);

    if(FieldBits::NoField != (AutoDisableTimeFieldMask & whichField))
        _sfAutoDisableTime.syncWith(pOther->_sfAutoDisableTime);

    if(FieldBits::NoField != (FiniteRotationModeFieldMask & whichField))
        _sfFiniteRotationMode.syncWith(pOther->_sfFiniteRotationMode);

    if(FieldBits::NoField != (FiniteRotationAxisFieldMask & whichField))
        _sfFiniteRotationAxis.syncWith(pOther->_sfFiniteRotationAxis);

    if(FieldBits::NoField != (GravityModeFieldMask & whichField))
        _sfGravityMode.syncWith(pOther->_sfGravityMode);

    if(FieldBits::NoField != (LinearDampingFieldMask & whichField))
        _sfLinearDamping.syncWith(pOther->_sfLinearDamping);

    if(FieldBits::NoField != (AngularDampingFieldMask & whichField))
        _sfAngularDamping.syncWith(pOther->_sfAngularDamping);

    if(FieldBits::NoField != (LinearDampingThresholdFieldMask & whichField))
        _sfLinearDampingThreshold.syncWith(pOther->_sfLinearDampingThreshold);

    if(FieldBits::NoField != (AngularDampingThresholdFieldMask & whichField))
        _sfAngularDampingThreshold.syncWith(pOther->_sfAngularDampingThreshold);

    if(FieldBits::NoField != (MaxAngularSpeedFieldMask & whichField))
        _sfMaxAngularSpeed.syncWith(pOther->_sfMaxAngularSpeed);

    if(FieldBits::NoField != (KinematicFieldMask & whichField))
        _sfKinematic.syncWith(pOther->_sfKinematic);

    if(FieldBits::NoField != (WorldFieldMask & whichField))
        _sfWorld.syncWith(pOther->_sfWorld);


}
#else
void PhysicsBodyBase::executeSyncImpl(      PhysicsBodyBase *pOther,
                                        const BitVector         &whichField,
                                        const SyncInfo          &sInfo      )
{

    Inherited::executeSyncImpl(pOther, whichField, sInfo);

    if(FieldBits::NoField != (PositionFieldMask & whichField))
        _sfPosition.syncWith(pOther->_sfPosition);

    if(FieldBits::NoField != (RotationFieldMask & whichField))
        _sfRotation.syncWith(pOther->_sfRotation);

    if(FieldBits::NoField != (QuaternionFieldMask & whichField))
        _sfQuaternion.syncWith(pOther->_sfQuaternion);

    if(FieldBits::NoField != (LinearVelFieldMask & whichField))
        _sfLinearVel.syncWith(pOther->_sfLinearVel);

    if(FieldBits::NoField != (AngularVelFieldMask & whichField))
        _sfAngularVel.syncWith(pOther->_sfAngularVel);

    if(FieldBits::NoField != (ForceFieldMask & whichField))
        _sfForce.syncWith(pOther->_sfForce);

    if(FieldBits::NoField != (TorqueFieldMask & whichField))
        _sfTorque.syncWith(pOther->_sfTorque);

    if(FieldBits::NoField != (MassFieldMask & whichField))
        _sfMass.syncWith(pOther->_sfMass);

    if(FieldBits::NoField != (MassCenterOfGravityFieldMask & whichField))
        _sfMassCenterOfGravity.syncWith(pOther->_sfMassCenterOfGravity);

    if(FieldBits::NoField != (MassInertiaTensorFieldMask & whichField))
        _sfMassInertiaTensor.syncWith(pOther->_sfMassInertiaTensor);

    if(FieldBits::NoField != (AutoDisableFlagFieldMask & whichField))
        _sfAutoDisableFlag.syncWith(pOther->_sfAutoDisableFlag);

    if(FieldBits::NoField != (AutoDisableLinearThresholdFieldMask & whichField))
        _sfAutoDisableLinearThreshold.syncWith(pOther->_sfAutoDisableLinearThreshold);

    if(FieldBits::NoField != (AutoDisableAngularThresholdFieldMask & whichField))
        _sfAutoDisableAngularThreshold.syncWith(pOther->_sfAutoDisableAngularThreshold);

    if(FieldBits::NoField != (AutoDisableStepsFieldMask & whichField))
        _sfAutoDisableSteps.syncWith(pOther->_sfAutoDisableSteps);

    if(FieldBits::NoField != (AutoDisableTimeFieldMask & whichField))
        _sfAutoDisableTime.syncWith(pOther->_sfAutoDisableTime);

    if(FieldBits::NoField != (FiniteRotationModeFieldMask & whichField))
        _sfFiniteRotationMode.syncWith(pOther->_sfFiniteRotationMode);

    if(FieldBits::NoField != (FiniteRotationAxisFieldMask & whichField))
        _sfFiniteRotationAxis.syncWith(pOther->_sfFiniteRotationAxis);

    if(FieldBits::NoField != (GravityModeFieldMask & whichField))
        _sfGravityMode.syncWith(pOther->_sfGravityMode);

    if(FieldBits::NoField != (LinearDampingFieldMask & whichField))
        _sfLinearDamping.syncWith(pOther->_sfLinearDamping);

    if(FieldBits::NoField != (AngularDampingFieldMask & whichField))
        _sfAngularDamping.syncWith(pOther->_sfAngularDamping);

    if(FieldBits::NoField != (LinearDampingThresholdFieldMask & whichField))
        _sfLinearDampingThreshold.syncWith(pOther->_sfLinearDampingThreshold);

    if(FieldBits::NoField != (AngularDampingThresholdFieldMask & whichField))
        _sfAngularDampingThreshold.syncWith(pOther->_sfAngularDampingThreshold);

    if(FieldBits::NoField != (MaxAngularSpeedFieldMask & whichField))
        _sfMaxAngularSpeed.syncWith(pOther->_sfMaxAngularSpeed);

    if(FieldBits::NoField != (KinematicFieldMask & whichField))
        _sfKinematic.syncWith(pOther->_sfKinematic);

    if(FieldBits::NoField != (WorldFieldMask & whichField))
        _sfWorld.syncWith(pOther->_sfWorld);



}

void PhysicsBodyBase::execBeginEditImpl (const BitVector &whichField, 
                                                 UInt32     uiAspect,
                                                 UInt32     uiContainerSize)
{
    Inherited::execBeginEditImpl(whichField, uiAspect, uiContainerSize);

}
#endif



OSG_END_NAMESPACE

#include <OpenSG/OSGSFieldTypeDef.inl>
#include <OpenSG/OSGMFieldTypeDef.inl>

OSG_BEGIN_NAMESPACE

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldDataTraits<PhysicsBodyPtr>::_type("PhysicsBodyPtr", "AttachmentPtr");
#endif

OSG_DLLEXPORT_SFIELD_DEF1(PhysicsBodyPtr, OSG_PHYSICSLIB_DLLTMPLMAPPING);
OSG_DLLEXPORT_MFIELD_DEF1(PhysicsBodyPtr, OSG_PHYSICSLIB_DLLTMPLMAPPING);


OSG_END_NAMESPACE

