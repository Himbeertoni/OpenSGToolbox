/*---------------------------------------------------------------------------*\
 *                         OpenSG ToolBox Physics                            *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                          www.vrac.iastate.edu                             *
 *                                                                           *
 *                Authors: Behboud Kalantary, David Kabala                   *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class CollisionContactParameters
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#ifndef _OSGCOLLISIONCONTACTPARAMETERSBASE_H_
#define _OSGCOLLISIONCONTACTPARAMETERSBASE_H_
#ifdef __sgi
#pragma once
#endif


#include <OpenSG/OSGConfig.h>
#include "OSGPhysicsDef.h"

#include <OpenSG/OSGBaseTypes.h>
#include <OpenSG/OSGRefPtr.h>
#include <OpenSG/OSGCoredNodePtr.h>

#include <OpenSG/OSGAttachmentContainer.h> // Parent

#include <OpenSG/OSGInt32Fields.h> // Mode type
#include <OpenSG/OSGReal32Fields.h> // Mu type
#include <OpenSG/OSGReal32Fields.h> // Mu2 type
#include <OpenSG/OSGReal32Fields.h> // Bounce type
#include <OpenSG/OSGReal32Fields.h> // BounceSpeedThreshold type
#include <OpenSG/OSGReal32Fields.h> // SoftCFM type
#include <OpenSG/OSGReal32Fields.h> // SoftERP type
#include <OpenSG/OSGReal32Fields.h> // Motion1 type
#include <OpenSG/OSGReal32Fields.h> // Motion2 type
#include <OpenSG/OSGReal32Fields.h> // MotionN type
#include <OpenSG/OSGReal32Fields.h> // Slip1 type
#include <OpenSG/OSGReal32Fields.h> // Slip2 type

#include "OSGCollisionContactParametersFields.h"

OSG_BEGIN_NAMESPACE

class CollisionContactParameters;
class BinaryDataHandler;

//! \brief CollisionContactParameters Base Class.

class OSG_PHYSICSLIB_DLLMAPPING CollisionContactParametersBase : public AttachmentContainer
{
  private:

    typedef AttachmentContainer    Inherited;

    /*==========================  PUBLIC  =================================*/
  public:

    typedef CollisionContactParametersPtr  Ptr;

    enum
    {
        ModeFieldId                 = Inherited::NextFieldId,
        MuFieldId                   = ModeFieldId                 + 1,
        Mu2FieldId                  = MuFieldId                   + 1,
        BounceFieldId               = Mu2FieldId                  + 1,
        BounceSpeedThresholdFieldId = BounceFieldId               + 1,
        SoftCFMFieldId              = BounceSpeedThresholdFieldId + 1,
        SoftERPFieldId              = SoftCFMFieldId              + 1,
        Motion1FieldId              = SoftERPFieldId              + 1,
        Motion2FieldId              = Motion1FieldId              + 1,
        MotionNFieldId              = Motion2FieldId              + 1,
        Slip1FieldId                = MotionNFieldId              + 1,
        Slip2FieldId                = Slip1FieldId                + 1,
        NextFieldId                 = Slip2FieldId                + 1
    };

    static const OSG::BitVector ModeFieldMask;
    static const OSG::BitVector MuFieldMask;
    static const OSG::BitVector Mu2FieldMask;
    static const OSG::BitVector BounceFieldMask;
    static const OSG::BitVector BounceSpeedThresholdFieldMask;
    static const OSG::BitVector SoftCFMFieldMask;
    static const OSG::BitVector SoftERPFieldMask;
    static const OSG::BitVector Motion1FieldMask;
    static const OSG::BitVector Motion2FieldMask;
    static const OSG::BitVector MotionNFieldMask;
    static const OSG::BitVector Slip1FieldMask;
    static const OSG::BitVector Slip2FieldMask;


    static const OSG::BitVector MTInfluenceMask;

    /*---------------------------------------------------------------------*/
    /*! \name                    Class Get                                 */
    /*! \{                                                                 */

    static        FieldContainerType &getClassType    (void); 
    static        UInt32              getClassTypeId  (void); 

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                FieldContainer Get                            */
    /*! \{                                                                 */

    virtual       FieldContainerType &getType  (void); 
    virtual const FieldContainerType &getType  (void) const; 

    virtual       UInt32              getContainerSize(void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Get                                 */
    /*! \{                                                                 */

           SFInt32             *getSFMode           (void);
           SFReal32            *getSFMu             (void);
           SFReal32            *getSFMu2            (void);
           SFReal32            *getSFBounce         (void);
           SFReal32            *getSFBounceSpeedThreshold(void);
           SFReal32            *getSFSoftCFM        (void);
           SFReal32            *getSFSoftERP        (void);
           SFReal32            *getSFMotion1        (void);
           SFReal32            *getSFMotion2        (void);
           SFReal32            *getSFMotionN        (void);
           SFReal32            *getSFSlip1          (void);
           SFReal32            *getSFSlip2          (void);

           Int32               &getMode           (void);
     const Int32               &getMode           (void) const;
           Real32              &getMu             (void);
     const Real32              &getMu             (void) const;
           Real32              &getMu2            (void);
     const Real32              &getMu2            (void) const;
           Real32              &getBounce         (void);
     const Real32              &getBounce         (void) const;
           Real32              &getBounceSpeedThreshold(void);
     const Real32              &getBounceSpeedThreshold(void) const;
           Real32              &getSoftCFM        (void);
     const Real32              &getSoftCFM        (void) const;
           Real32              &getSoftERP        (void);
     const Real32              &getSoftERP        (void) const;
           Real32              &getMotion1        (void);
     const Real32              &getMotion1        (void) const;
           Real32              &getMotion2        (void);
     const Real32              &getMotion2        (void) const;
           Real32              &getMotionN        (void);
     const Real32              &getMotionN        (void) const;
           Real32              &getSlip1          (void);
     const Real32              &getSlip1          (void) const;
           Real32              &getSlip2          (void);
     const Real32              &getSlip2          (void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Set                                 */
    /*! \{                                                                 */

     void setMode           ( const Int32 &value );
     void setMu             ( const Real32 &value );
     void setMu2            ( const Real32 &value );
     void setBounce         ( const Real32 &value );
     void setBounceSpeedThreshold( const Real32 &value );
     void setSoftCFM        ( const Real32 &value );
     void setSoftERP        ( const Real32 &value );
     void setMotion1        ( const Real32 &value );
     void setMotion2        ( const Real32 &value );
     void setMotionN        ( const Real32 &value );
     void setSlip1          ( const Real32 &value );
     void setSlip2          ( const Real32 &value );

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Binary Access                              */
    /*! \{                                                                 */

    virtual UInt32 getBinSize (const BitVector         &whichField);
    virtual void   copyToBin  (      BinaryDataHandler &pMem,
                               const BitVector         &whichField);
    virtual void   copyFromBin(      BinaryDataHandler &pMem,
                               const BitVector         &whichField);


    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Construction                               */
    /*! \{                                                                 */

    static  CollisionContactParametersPtr      create          (void); 
    static  CollisionContactParametersPtr      createEmpty     (void); 

    /*! \}                                                                 */

    /*---------------------------------------------------------------------*/
    /*! \name                       Copy                                   */
    /*! \{                                                                 */

    virtual FieldContainerPtr     shallowCopy     (void) const; 

    /*! \}                                                                 */
    /*=========================  PROTECTED  ===============================*/
  protected:

    /*---------------------------------------------------------------------*/
    /*! \name                      Fields                                  */
    /*! \{                                                                 */

    SFInt32             _sfMode;
    SFReal32            _sfMu;
    SFReal32            _sfMu2;
    SFReal32            _sfBounce;
    SFReal32            _sfBounceSpeedThreshold;
    SFReal32            _sfSoftCFM;
    SFReal32            _sfSoftERP;
    SFReal32            _sfMotion1;
    SFReal32            _sfMotion2;
    SFReal32            _sfMotionN;
    SFReal32            _sfSlip1;
    SFReal32            _sfSlip2;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Constructors                               */
    /*! \{                                                                 */

    CollisionContactParametersBase(void);
    CollisionContactParametersBase(const CollisionContactParametersBase &source);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Destructors                                */
    /*! \{                                                                 */

    virtual ~CollisionContactParametersBase(void); 

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

#if !defined(OSG_FIXED_MFIELDSYNC)
    void executeSyncImpl(      CollisionContactParametersBase *pOther,
                         const BitVector         &whichField);

    virtual void   executeSync(      FieldContainer    &other,
                               const BitVector         &whichField);
#else
    void executeSyncImpl(      CollisionContactParametersBase *pOther,
                         const BitVector         &whichField,
                         const SyncInfo          &sInfo     );

    virtual void   executeSync(      FieldContainer    &other,
                               const BitVector         &whichField,
                               const SyncInfo          &sInfo);

    virtual void execBeginEdit     (const BitVector &whichField,
                                          UInt32     uiAspect,
                                          UInt32     uiContainerSize);

            void execBeginEditImpl (const BitVector &whichField,
                                          UInt32     uiAspect,
                                          UInt32     uiContainerSize);

    virtual void onDestroyAspect(UInt32 uiId, UInt32 uiAspect);
#endif

    /*! \}                                                                 */
    /*==========================  PRIVATE  ================================*/
  private:

    friend class FieldContainer;

    static FieldDescription   *_desc[];
    static FieldContainerType  _type;


    // prohibit default functions (move to 'public' if you need one)
    void operator =(const CollisionContactParametersBase &source);
};

//---------------------------------------------------------------------------
//   Exported Types
//---------------------------------------------------------------------------


typedef CollisionContactParametersBase *CollisionContactParametersBaseP;

typedef osgIF<CollisionContactParametersBase::isNodeCore,
              CoredNodePtr<CollisionContactParameters>,
              FieldContainer::attempt_to_create_CoredNodePtr_on_non_NodeCore_FC
              >::_IRet CollisionContactParametersNodePtr;

typedef RefPtr<CollisionContactParametersPtr> CollisionContactParametersRefPtr;

OSG_END_NAMESPACE

#define OSGCOLLISIONCONTACTPARAMETERSBASE_HEADER_CVSID "@(#)$Id: FCBaseTemplate_h.h,v 1.40 2005/07/20 00:10:14 vossg Exp $"

#endif /* _OSGCOLLISIONCONTACTPARAMETERSBASE_H_ */
