/*---------------------------------------------------------------------------*\
 *                     OpenSG ToolBox UserInterface                          *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                         www.vrac.iastate.edu                              *
 *                                                                           *
 *                          Authors: David Kabala                            *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class PhysicsSpace
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#ifndef _OSGPHYSICSSPACEBASE_H_
#define _OSGPHYSICSSPACEBASE_H_
#ifdef __sgi
#pragma once
#endif


#include <OpenSG/OSGConfig.h>
#include "OSGPhysicsDef.h"

#include <OpenSG/OSGBaseTypes.h>
#include <OpenSG/OSGRefPtr.h>
#include <OpenSG/OSGCoredNodePtr.h>

#include <OpenSG/OSGAttachment.h> // Parent

#include <OpenSG/OSGBoolFields.h> // Cleanup type
#include <OpenSG/OSGInt32Fields.h> // Sublevel type
#include "ODE/OSGPhysicsHandlerFields.h" // InternalParentHandler type
#include "OSGCollisionContactParametersFields.h" // DefaultCollisionParameters type
#include <OpenSG/OSGUInt64Fields.h> // Category1 type
#include <OpenSG/OSGUInt64Fields.h> // Category2 type
#include "OSGCollisionContactParametersFields.h" // CategoryCollisionParameters type

#include "OSGPhysicsSpaceFields.h"
#include <OpenSG/Toolbox/OSGEventProducer.h>
#include <OpenSG/Toolbox/OSGEventProducerType.h>
#include <OpenSG/Toolbox/OSGMethodDescription.h>
#include <OpenSG/Toolbox/OSGEventProducerPtrType.h>

OSG_BEGIN_NAMESPACE

class PhysicsSpace;
class BinaryDataHandler;

//! \brief PhysicsSpace Base Class.

class OSG_PHYSICSLIB_DLLMAPPING PhysicsSpaceBase : public Attachment
{
  private:

    typedef Attachment    Inherited;

    /*==========================  PUBLIC  =================================*/
  public:

    typedef PhysicsSpacePtr  Ptr;

    enum
    {
        CleanupFieldId                     = Inherited::NextFieldId,
        SublevelFieldId                    = CleanupFieldId                     + 1,
        InternalParentHandlerFieldId       = SublevelFieldId                    + 1,
        DefaultCollisionParametersFieldId  = InternalParentHandlerFieldId       + 1,
        Category1FieldId                   = DefaultCollisionParametersFieldId  + 1,
        Category2FieldId                   = Category1FieldId                   + 1,
        CategoryCollisionParametersFieldId = Category2FieldId                   + 1,
        EventProducerFieldId               = CategoryCollisionParametersFieldId + 1,
        NextFieldId                        = EventProducerFieldId               + 1
    };

    static const OSG::BitVector CleanupFieldMask;
    static const OSG::BitVector SublevelFieldMask;
    static const OSG::BitVector InternalParentHandlerFieldMask;
    static const OSG::BitVector DefaultCollisionParametersFieldMask;
    static const OSG::BitVector Category1FieldMask;
    static const OSG::BitVector Category2FieldMask;
    static const OSG::BitVector CategoryCollisionParametersFieldMask;
    static const OSG::BitVector EventProducerFieldMask;


    enum
    {
        CollisionMethodId = 1,
        NextMethodId      = CollisionMethodId + 1
    };



    static const OSG::BitVector MTInfluenceMask;

    /*---------------------------------------------------------------------*/
    /*! \name                    Class Get                                 */
    /*! \{                                                                 */

    static        FieldContainerType &getClassType    (void); 
    static        UInt32              getClassTypeId  (void); 
    static const  EventProducerType  &getProducerClassType  (void); 
    static        UInt32              getProducerClassTypeId(void); 

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                FieldContainer Get                            */
    /*! \{                                                                 */

    virtual       FieldContainerType &getType  (void); 
    virtual const FieldContainerType &getType  (void) const; 

    virtual       UInt32              getContainerSize(void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Get                                 */
    /*! \{                                                                 */


           SFBool              *editSFCleanup        (void);
     const SFBool              *getSFCleanup        (void) const;

           SFInt32             *editSFSublevel       (void);
     const SFInt32             *getSFSublevel       (void) const;

           SFCollisionContactParametersPtr *editSFDefaultCollisionParameters(void);
     const SFCollisionContactParametersPtr *getSFDefaultCollisionParameters(void) const;


           bool                &editCleanup        (void);
     const bool                &getCleanup        (void) const;

           Int32               &editSublevel       (void);
     const Int32               &getSublevel       (void) const;


           CollisionContactParametersPtr &editDefaultCollisionParameters(void);
     const CollisionContactParametersPtr &getDefaultCollisionParameters(void) const;




    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Set                                 */
    /*! \{                                                                 */

     void setCleanup        ( const bool &value );
     void setSublevel       ( const Int32 &value );
     void setDefaultCollisionParameters( const CollisionContactParametersPtr &value );

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                Method Produced Get                           */
    /*! \{                                                                 */

    virtual const EventProducerType &getProducerType(void) const; 
    EventConnection attachEventListener(EventListenerPtr Listener, UInt32 ProducedEventId);
    bool isEventListenerAttached(EventListenerPtr Listener, UInt32 ProducedEventId) const;
    UInt32 getNumListenersAttached(UInt32 ProducedEventId) const;
    EventListenerPtr getAttachedListener(UInt32 ProducedEventId, UInt32 ListenerIndex) const;
    void detachEventListener(EventListenerPtr Listener, UInt32 ProducedEventId);
    UInt32 getNumProducedEvents(void) const;
    const MethodDescription *getProducedEventDescription(const Char8 *ProducedEventName) const;
    const MethodDescription *getProducedEventDescription(UInt32 ProducedEventId) const;
    UInt32 getProducedEventId(const Char8 *ProducedEventName) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Binary Access                              */
    /*! \{                                                                 */

    virtual UInt32 getBinSize (const BitVector         &whichField);
    virtual void   copyToBin  (      BinaryDataHandler &pMem,
                               const BitVector         &whichField);
    virtual void   copyFromBin(      BinaryDataHandler &pMem,
                               const BitVector         &whichField);


    /*! \}                                                                 */
    /*=========================  PROTECTED  ===============================*/
  protected:
    EventProducer _Producer;

    /*---------------------------------------------------------------------*/
    /*! \name                      Fields                                  */
    /*! \{                                                                 */

    SFBool              _sfCleanup;
    SFInt32             _sfSublevel;
    SFPhysicsHandlerPtr   _sfInternalParentHandler;
    SFCollisionContactParametersPtr   _sfDefaultCollisionParameters;
    MFUInt64            _mfCategory1;
    MFUInt64            _mfCategory2;
    MFCollisionContactParametersPtr   _mfCategoryCollisionParameters;

    /*! \}                                                                 */
    SFEventProducerPtr _sfEventProducer;
    /*---------------------------------------------------------------------*/
    /*! \name                   Constructors                               */
    /*! \{                                                                 */

    PhysicsSpaceBase(void);
    PhysicsSpaceBase(const PhysicsSpaceBase &source);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Destructors                                */
    /*! \{                                                                 */

    virtual ~PhysicsSpaceBase(void); 

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Get                                 */
    /*! \{                                                                 */

           SFPhysicsHandlerPtr *editSFInternalParentHandler(void);
     const SFPhysicsHandlerPtr *getSFInternalParentHandler(void) const;
           MFUInt64            *editMFCategory1      (void);
     const MFUInt64            *getMFCategory1      (void) const;
           MFUInt64            *editMFCategory2      (void);
     const MFUInt64            *getMFCategory2      (void) const;
           MFCollisionContactParametersPtr *editMFCategoryCollisionParameters(void);
     const MFCollisionContactParametersPtr *getMFCategoryCollisionParameters(void) const;

           PhysicsHandlerPtr   &editInternalParentHandler(void);
     const PhysicsHandlerPtr   &getInternalParentHandler(void) const;
           UInt64              &editCategory1      (UInt32 index);
#ifndef OSG_2_PREP
           MFUInt64            &getCategory1      (void);
     const MFUInt64            &getCategory1      (void) const;
#endif
     const UInt64              &getCategory1      (UInt32 index) const;
           UInt64              &editCategory2      (UInt32 index);
#ifndef OSG_2_PREP
           MFUInt64            &getCategory2      (void);
     const MFUInt64            &getCategory2      (void) const;
#endif
     const UInt64              &getCategory2      (UInt32 index) const;
           CollisionContactParametersPtr &editCategoryCollisionParameters(UInt32 index);
#ifndef OSG_2_PREP
           MFCollisionContactParametersPtr &getCategoryCollisionParameters(void);
     const MFCollisionContactParametersPtr &getCategoryCollisionParameters(void) const;
#endif
     const CollisionContactParametersPtr &getCategoryCollisionParameters(UInt32 index) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Set                                 */
    /*! \{                                                                 */

     void setInternalParentHandler(const PhysicsHandlerPtr &value);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

#if !defined(OSG_FIXED_MFIELDSYNC)
    void executeSyncImpl(      PhysicsSpaceBase *pOther,
                         const BitVector         &whichField);

    virtual void   executeSync(      FieldContainer    &other,
                               const BitVector         &whichField);
#else
    void executeSyncImpl(      PhysicsSpaceBase *pOther,
                         const BitVector         &whichField,
                         const SyncInfo          &sInfo     );

    virtual void   executeSync(      FieldContainer    &other,
                               const BitVector         &whichField,
                               const SyncInfo          &sInfo);

    virtual void execBeginEdit     (const BitVector &whichField,
                                          UInt32     uiAspect,
                                          UInt32     uiContainerSize);

            void execBeginEditImpl (const BitVector &whichField,
                                          UInt32     uiAspect,
                                          UInt32     uiContainerSize);

    virtual void onDestroyAspect(UInt32 uiId, UInt32 uiAspect);
#endif

    /*! \}                                                                 */
    /*==========================  PRIVATE  ================================*/
  private:

    friend class FieldContainer;

    static MethodDescription   *_methodDesc[];
    static EventProducerType _producerType;

    static FieldDescription   *_desc[];
    static FieldContainerType  _type;


    // prohibit default functions (move to 'public' if you need one)
    void operator =(const PhysicsSpaceBase &source);
};

//---------------------------------------------------------------------------
//   Exported Types
//---------------------------------------------------------------------------


typedef PhysicsSpaceBase *PhysicsSpaceBaseP;

typedef osgIF<PhysicsSpaceBase::isNodeCore,
              CoredNodePtr<PhysicsSpace>,
              FieldContainer::attempt_to_create_CoredNodePtr_on_non_NodeCore_FC
              >::_IRet PhysicsSpaceNodePtr;

typedef RefPtr<PhysicsSpacePtr> PhysicsSpaceRefPtr;

OSG_END_NAMESPACE

#endif /* _OSGPHYSICSSPACEBASE_H_ */
