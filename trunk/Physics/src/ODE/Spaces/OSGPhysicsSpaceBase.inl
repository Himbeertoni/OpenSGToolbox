/*---------------------------------------------------------------------------*\
 *                     OpenSG ToolBox UserInterface                          *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                          Authors: David Kabala                            *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class PhysicsSpace!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <OpenSG/OSGConfig.h>

OSG_BEGIN_NAMESPACE


//! access the type of the class
inline
OSG::FieldContainerType &PhysicsSpaceBase::getClassType(void)
{
    return _type; 
} 

//! access the numerical type of the class
inline
OSG::UInt32 PhysicsSpaceBase::getClassTypeId(void) 
{
    return _type.getId(); 
} 

//! access the producer type of the class
inline
const EventProducerType &PhysicsSpaceBase::getProducerClassType(void)
{
    return _producerType;
}

//! access the producer type id of the class
inline
UInt32 PhysicsSpaceBase::getProducerClassTypeId(void)
{
    return _producerType.getId();
}


/*------------------------------ get -----------------------------------*/

//! Get the PhysicsSpace::_sfCleanup field.
inline
const SFBool *PhysicsSpaceBase::getSFCleanup(void) const
{
    return &_sfCleanup;
}

//! Get the PhysicsSpace::_sfCleanup field.
inline
SFBool *PhysicsSpaceBase::editSFCleanup(void)
{
    return &_sfCleanup;
}

//! Get the PhysicsSpace::_sfSublevel field.
inline
const SFInt32 *PhysicsSpaceBase::getSFSublevel(void) const
{
    return &_sfSublevel;
}

//! Get the PhysicsSpace::_sfSublevel field.
inline
SFInt32 *PhysicsSpaceBase::editSFSublevel(void)
{
    return &_sfSublevel;
}

//! Get the PhysicsSpace::_sfInternalParentHandler field.
inline
const SFPhysicsHandlerPtr *PhysicsSpaceBase::getSFInternalParentHandler(void) const
{
    return &_sfInternalParentHandler;
}

//! Get the PhysicsSpace::_sfInternalParentHandler field.
inline
SFPhysicsHandlerPtr *PhysicsSpaceBase::editSFInternalParentHandler(void)
{
    return &_sfInternalParentHandler;
}

//! Get the PhysicsSpace::_sfDefaultCollisionParameters field.
inline
const SFCollisionContactParametersPtr *PhysicsSpaceBase::getSFDefaultCollisionParameters(void) const
{
    return &_sfDefaultCollisionParameters;
}

//! Get the PhysicsSpace::_sfDefaultCollisionParameters field.
inline
SFCollisionContactParametersPtr *PhysicsSpaceBase::editSFDefaultCollisionParameters(void)
{
    return &_sfDefaultCollisionParameters;
}

//! Get the PhysicsSpace::_mfCategory1 field.
inline
const MFUInt64 *PhysicsSpaceBase::getMFCategory1(void) const
{
    return &_mfCategory1;
}

//! Get the PhysicsSpace::_mfCategory1 field.
inline
MFUInt64 *PhysicsSpaceBase::editMFCategory1(void)
{
    return &_mfCategory1;
}

//! Get the PhysicsSpace::_mfCategory2 field.
inline
const MFUInt64 *PhysicsSpaceBase::getMFCategory2(void) const
{
    return &_mfCategory2;
}

//! Get the PhysicsSpace::_mfCategory2 field.
inline
MFUInt64 *PhysicsSpaceBase::editMFCategory2(void)
{
    return &_mfCategory2;
}

//! Get the PhysicsSpace::_mfCategoryCollisionParameters field.
inline
const MFCollisionContactParametersPtr *PhysicsSpaceBase::getMFCategoryCollisionParameters(void) const
{
    return &_mfCategoryCollisionParameters;
}

//! Get the PhysicsSpace::_mfCategoryCollisionParameters field.
inline
MFCollisionContactParametersPtr *PhysicsSpaceBase::editMFCategoryCollisionParameters(void)
{
    return &_mfCategoryCollisionParameters;
}


//! Get the value of the PhysicsSpace::_sfCleanup field.
inline
bool &PhysicsSpaceBase::editCleanup(void)
{
    return _sfCleanup.getValue();
}

//! Get the value of the PhysicsSpace::_sfCleanup field.
inline
const bool &PhysicsSpaceBase::getCleanup(void) const
{
    return _sfCleanup.getValue();
}

//! Set the value of the PhysicsSpace::_sfCleanup field.
inline
void PhysicsSpaceBase::setCleanup(const bool &value)
{
    _sfCleanup.setValue(value);
}

//! Get the value of the PhysicsSpace::_sfSublevel field.
inline
Int32 &PhysicsSpaceBase::editSublevel(void)
{
    return _sfSublevel.getValue();
}

//! Get the value of the PhysicsSpace::_sfSublevel field.
inline
const Int32 &PhysicsSpaceBase::getSublevel(void) const
{
    return _sfSublevel.getValue();
}

//! Set the value of the PhysicsSpace::_sfSublevel field.
inline
void PhysicsSpaceBase::setSublevel(const Int32 &value)
{
    _sfSublevel.setValue(value);
}

//! Get the value of the PhysicsSpace::_sfInternalParentHandler field.
inline
PhysicsHandlerPtr &PhysicsSpaceBase::editInternalParentHandler(void)
{
    return _sfInternalParentHandler.getValue();
}

//! Get the value of the PhysicsSpace::_sfInternalParentHandler field.
inline
const PhysicsHandlerPtr &PhysicsSpaceBase::getInternalParentHandler(void) const
{
    return _sfInternalParentHandler.getValue();
}

//! Set the value of the PhysicsSpace::_sfInternalParentHandler field.
inline
void PhysicsSpaceBase::setInternalParentHandler(const PhysicsHandlerPtr &value)
{
    _sfInternalParentHandler.setValue(value);
}

//! Get the value of the PhysicsSpace::_sfDefaultCollisionParameters field.
inline
CollisionContactParametersPtr &PhysicsSpaceBase::editDefaultCollisionParameters(void)
{
    return _sfDefaultCollisionParameters.getValue();
}

//! Get the value of the PhysicsSpace::_sfDefaultCollisionParameters field.
inline
const CollisionContactParametersPtr &PhysicsSpaceBase::getDefaultCollisionParameters(void) const
{
    return _sfDefaultCollisionParameters.getValue();
}

//! Set the value of the PhysicsSpace::_sfDefaultCollisionParameters field.
inline
void PhysicsSpaceBase::setDefaultCollisionParameters(const CollisionContactParametersPtr &value)
{
    _sfDefaultCollisionParameters.setValue(value);
}


//! Get the value of the \a index element the PhysicsSpace::_mfCategory1 field.
inline
UInt64 &PhysicsSpaceBase::editCategory1(const UInt32 index)
{
    return _mfCategory1[index];
}

//! Get the value of the \a index element the PhysicsSpace::_mfCategory1 field.
inline
const UInt64 &PhysicsSpaceBase::getCategory1(const UInt32 index) const
{
    return _mfCategory1[index];
}

#ifndef OSG_2_PREP
//! Get the PhysicsSpace::_mfCategory1 field.
inline
MFUInt64 &PhysicsSpaceBase::getCategory1(void)
{
    return _mfCategory1;
}

//! Get the PhysicsSpace::_mfCategory1 field.
inline
const MFUInt64 &PhysicsSpaceBase::getCategory1(void) const
{
    return _mfCategory1;
}

#endif
//! Get the value of the \a index element the PhysicsSpace::_mfCategory2 field.
inline
UInt64 &PhysicsSpaceBase::editCategory2(const UInt32 index)
{
    return _mfCategory2[index];
}

//! Get the value of the \a index element the PhysicsSpace::_mfCategory2 field.
inline
const UInt64 &PhysicsSpaceBase::getCategory2(const UInt32 index) const
{
    return _mfCategory2[index];
}

#ifndef OSG_2_PREP
//! Get the PhysicsSpace::_mfCategory2 field.
inline
MFUInt64 &PhysicsSpaceBase::getCategory2(void)
{
    return _mfCategory2;
}

//! Get the PhysicsSpace::_mfCategory2 field.
inline
const MFUInt64 &PhysicsSpaceBase::getCategory2(void) const
{
    return _mfCategory2;
}

#endif
//! Get the value of the \a index element the PhysicsSpace::_mfCategoryCollisionParameters field.
inline
CollisionContactParametersPtr &PhysicsSpaceBase::editCategoryCollisionParameters(const UInt32 index)
{
    return _mfCategoryCollisionParameters[index];
}

//! Get the value of the \a index element the PhysicsSpace::_mfCategoryCollisionParameters field.
inline
const CollisionContactParametersPtr &PhysicsSpaceBase::getCategoryCollisionParameters(const UInt32 index) const
{
    return _mfCategoryCollisionParameters[index];
}

#ifndef OSG_2_PREP
//! Get the PhysicsSpace::_mfCategoryCollisionParameters field.
inline
MFCollisionContactParametersPtr &PhysicsSpaceBase::getCategoryCollisionParameters(void)
{
    return _mfCategoryCollisionParameters;
}

//! Get the PhysicsSpace::_mfCategoryCollisionParameters field.
inline
const MFCollisionContactParametersPtr &PhysicsSpaceBase::getCategoryCollisionParameters(void) const
{
    return _mfCategoryCollisionParameters;
}

#endif

inline
EventConnection PhysicsSpaceBase::attachEventListener(EventListenerPtr Listener, UInt32 ProducedEventId)
{
    return _Producer.attachEventListener(Listener, ProducedEventId);
}

inline
bool PhysicsSpaceBase::isEventListenerAttached(EventListenerPtr Listener, UInt32 ProducedEventId) const
{
    return _Producer.isEventListenerAttached(Listener, ProducedEventId);
}

inline
UInt32 PhysicsSpaceBase::getNumListenersAttached(UInt32 ProducedEventId) const
{
    return _Producer.getNumListenersAttached(ProducedEventId);
}

inline
EventListenerPtr PhysicsSpaceBase::getAttachedListener(UInt32 ProducedEventId, UInt32 ListenerIndex) const
{
    return _Producer.getAttachedListener(ProducedEventId,ListenerIndex);
}

inline
void PhysicsSpaceBase::detachEventListener(EventListenerPtr Listener, UInt32 ProducedEventId)
{
    _Producer.detachEventListener(Listener, ProducedEventId);
}

inline
UInt32 PhysicsSpaceBase::getNumProducedEvents(void) const
{
    return _Producer.getNumProducedEvents();
}

inline
const MethodDescription *PhysicsSpaceBase::getProducedEventDescription(const Char8 *ProducedEventName) const
{
    return _Producer.getProducedEventDescription(ProducedEventName);
}

inline
const MethodDescription *PhysicsSpaceBase::getProducedEventDescription(UInt32 ProducedEventId) const
{
    return _Producer.getProducedEventDescription(ProducedEventId);
}

inline
UInt32 PhysicsSpaceBase::getProducedEventId(const Char8 *ProducedEventName) const
{
    return _Producer.getProducedEventId(ProducedEventName);
}
OSG_END_NAMESPACE

