# Set directory paths
SET(TOOLBOX_BASE_DIR "/Users/davidkabala/Documents/Work/OpenSGToolbox/trunk")
SET(OPENSG_BASE_DIR "/Users/davidkabala/Documents/Work/OpenSG/OpenSG/AppleInstall")
SET(BOOST_BASE_DIR "/Users/davidkabala/Documents/Work/boost_1_39_0/AppleInstall")
SET(ODE_BASE_DIR "/Users/davidkabala/Documents/Work/ode-0.11.1/AppleInstall")
SET(INSTALLER_BASE_DIR "/Users/davidkabala/Documents/Work/OpenSGToolbox/trunk/Release/Installer_Full")
SET(TOOLBOX_INSTALL_DIR "/Users/davidkabala/Documents/Work/OpenSGToolbox/trunk/Builds/Apple")
SET(JPG_LIB_DIR "/sw/lib")

MACRO(PROCESS_LIBRARY LIBRARY_DIR)

    MESSAGE("Processing files for: ${LIBRARY_DIR}")

    SET(INSTALL_DIRS ${INSTALL_DIRS};${LIBRARY_DIR}/include;/include)

ENDMACRO(PROCESS_LIBRARY)

MACRO(PROCESS_TUTORIAL TUTORIAL_LIBRARY_NAME)

    MESSAGE("Processing files for: ${TUTORIAL_LIBRARY_NAME}")

    #Make the directory for these tutorials
    SET(CPACK_INSTALL_COMMANDS ${CPACK_INSTALL_COMMANDS} "mkdir ${INSTALLER_BASE_DIR}/TEMP_INSTALL_FILES/share/OpenSGToolbox/${TUTORIAL_LIBRARY_NAME}")

    #For all of the Tutorials
    FILE(GLOB TUTORIAL_SOURCES "${TOOLBOX_BASE_DIR}/${TUTORIAL_LIBRARY_NAME}/Tutorials/[0-9][0-9]*.cpp")
    FOREACH(TUTORIAL_SOURCE ${TUTORIAL_SOURCES})
        #Get the path to the tutorial executable
        STRING(LENGTH ${TUTORIAL_SOURCE} SOURCE_PATH_LENGTH)
        MATH(EXPR SOURCE_PATH_LENGTH '${SOURCE_PATH_LENGTH}-4')
        STRING(SUBSTRING ${TUTORIAL_SOURCE} 0 ${SOURCE_PATH_LENGTH} TUTORIAL_EXE_PATH )
        SET(TUTORIAL_EXE_PATH "${TUTORIAL_EXE_PATH}${CMAKE_EXECUTABLE_SUFFIX}")

        #Add the Source File to the package
        SET(CPACK_INSTALL_COMMANDS ${CPACK_INSTALL_COMMANDS} "cp ${TUTORIAL_SOURCE} ${INSTALLER_BASE_DIR}/TEMP_INSTALL_FILES/share/OpenSGToolbox/${TUTORIAL_LIBRARY_NAME}")

        #Copy the executable 
        IF(EXISTS "${TUTORIAL_EXE_PATH}")
            SET(CPACK_INSTALL_COMMANDS ${CPACK_INSTALL_COMMANDS} "../OS\\ X/BundleLibPaths.sh ${TUTORIAL_EXE_PATH}")
            SET(CPACK_INSTALL_COMMANDS ${CPACK_INSTALL_COMMANDS} "cp ${TUTORIAL_EXE_PATH} ${INSTALLER_BASE_DIR}/TEMP_INSTALL_FILES/share/OpenSGToolbox/${TUTORIAL_LIBRARY_NAME}")
        ENDIF(EXISTS "${TUTORIAL_EXE_PATH}")

    ENDFOREACH(TUTORIAL_SOURCE ${TUTORIAL_SOURCES})

    #Add the CMakeLists File to the package
    SET(CPACK_INSTALL_COMMANDS ${CPACK_INSTALL_COMMANDS} "cp ${TOOLBOX_BASE_DIR}/${TUTORIAL_LIBRARY_NAME}/Tutorials/CMakeLists.txt ${INSTALLER_BASE_DIR}/TEMP_INSTALL_FILES/share/OpenSGToolbox/${TUTORIAL_LIBRARY_NAME}")

    #Update the dylib paths names
    #SET(CPACK_INSTALL_COMMANDS ${CPACK_INSTALL_COMMANDS} "../OS\\ X/BundleDirLibPaths.sh ${INSTALLER_BASE_DIR}/TEMP_INSTALL_FILES/share/OpenSGToolbox/${TUTORIAL_LIBRARY_NAME}")

    #Add the Tutorials to the package
    SET(INSTALL_DIRS ${INSTALL_DIRS};${INSTALLER_BASE_DIR}/TEMP_INSTALL_FILES/share/OpenSGToolbox/${TUTORIAL_LIBRARY_NAME};/share/OpenSGToolbox/${TUTORIAL_LIBRARY_NAME})


    #If there is a data directory
    IF(EXISTS "${TOOLBOX_BASE_DIR}/${TUTORIAL_LIBRARY_NAME}/Tutorials/Data")
        #Add the data directory to the package
        SET(INSTALL_DIRS ${INSTALL_DIRS};${TOOLBOX_BASE_DIR}/${TUTORIAL_LIBRARY_NAME}/Tutorials/Data;/share/OpenSGToolbox/${TUTORIAL_LIBRARY_NAME}/Data)
    ENDIF(EXISTS "${TOOLBOX_BASE_DIR}/${TUTORIAL_LIBRARY_NAME}/Tutorials/Data")

ENDMACRO(PROCESS_TUTORIAL)

# Check directory paths
IF(NOT EXISTS ${TOOLBOX_BASE_DIR})
    MESSAGE("ERROR (TOOLBOX_BASE_DIR):  \"${TOOLBOX_BASE_DIR}\"  is not a valid directory.")
ENDIF(NOT EXISTS ${TOOLBOX_BASE_DIR})

IF(NOT EXISTS ${TOOLBOX_INSTALL_DIR})
    MESSAGE("ERROR (TOOLBOX_INSTALL_DIR):  \"${TOOLBOX_INSTALL_DIR}\"  is not a valid directory.")
ENDIF(NOT EXISTS ${TOOLBOX_INSTALL_DIR})

IF(NOT EXISTS ${OPENSG_BASE_DIR})
    MESSAGE("ERROR (OPENSG_BASE_DIR):  \"${OPENSG_BASE_DIR}\"  is not a valid directory.")
ENDIF(NOT EXISTS ${OPENSG_BASE_DIR})

IF(NOT EXISTS ${BOOST_BASE_DIR})
    MESSAGE("ERROR (BOOST_BASE_DIR):  \"${BOOST_BASE_DIR}\"  is not a valid directory.")
ENDIF(NOT EXISTS ${BOOST_BASE_DIR})

IF(NOT EXISTS ${ODE_BASE_DIR})
    MESSAGE("ERROR (ODE_BASE_DIR):  \"${ODE_BASE_DIR}\"  is not a valid directory.")
ENDIF(NOT EXISTS ${ODE_BASE_DIR})

IF(NOT EXISTS ${INSTALLER_BASE_DIR})
    MESSAGE("ERROR (INSTALLER_BASE_DIR):  \"${INSTALLER_BASE_DIR}\"  is not a valid directory.")
ENDIF(NOT EXISTS ${INSTALLER_BASE_DIR})


# Get revision number
FIND_PACKAGE(Subversion)
IF(Subversion_FOUND)
    Subversion_WC_INFO(${TOOLBOX_BASE_DIR} Project)
    MESSAGE("Current revision is ${Project_WC_REVISION}")
ENDIF(Subversion_FOUND)

# Save revision number
FILE(WRITE ${INSTALLER_BASE_DIR}/REVISION/Revision "${Project_WC_REVISION}")
SET(INSTALL_DIRS ${INSTALLER_BASE_DIR}/REVISION;/share/OpenSGToolbox)

# Get Apple architecture
IF(APPLE)
    EXEC_PROGRAM(uname ARGS -m OUTPUT_VARIABLE _CMAKE_OSX_MACHINE)
    IF("${_CMAKE_OSX_MACHINE}" MATCHES "Power")
        SET(_CMAKE_OSX_MACHINE ppc)
    ELSE("${_CMAKE_OSX_MACHINE}" MATCHES "Power")
        SET(_CMAKE_OSX_MACHINE intel)
    ENDIF("${_CMAKE_OSX_MACHINE}" MATCHES "Power")
    MESSAGE("Apple Architecture: ${_CMAKE_OSX_MACHINE}")
ENDIF(APPLE)

# Configure installer
SET(CPACK_GENERATOR "PackageMaker")
SET(CPACK_IGNORE_FILES "/\\.svn/;\\.vcproj$;\\.sln$;/Makefile;/CMakeFiles/;/CMakeCache.txt;/cmake_install.cmake")
SET(CPACK_PACKAGING_INSTALL_PREFIX "/")
SET(CPACK_PACKAGE_DEFAULT_LOCATION "/usr/local")
SET(CPACK_PACKAGE_RELOCATABLE "true")

# Name and version
FILE(STRINGS ${TOOLBOX_BASE_DIR}/VERSION VersionFile)
STRING(REGEX MATCH "([0-9]+)\\.([0-9]+)\\.([0-9]+)" VersionMatch ${VersionFile})
SET(CPACK_PACKAGE_VERSION ${CMAKE_MATCH_0})
SET(CPACK_PACKAGE_VERSION_MAJOR ${CMAKE_MATCH_1})
SET(CPACK_PACKAGE_VERSION_MINOR ${CMAKE_MATCH_2})
SET(CPACK_PACKAGE_VERSION_PATCH ${CMAKE_MATCH_3})
MESSAGE("Version: ${CMAKE_MATCH_0}")
SET(CPACK_PACKAGE_FILE_NAME "OpenSGToolbox-${CPACK_PACKAGE_VERSION}-${Project_WC_REVISION}-OSX-${_CMAKE_OSX_MACHINE}")
SET(CPACK_PACKAGE_NAME "OpenSGToolbox")
SET(CPACK_PACKAGE_VENDOR "VRAC")

# Resource files
SET(CPACK_RESOURCE_FILE_LICENSE "${INSTALLER_BASE_DIR}/../../LICENSE.txt")
SET(CPACK_RESOURCE_FILE_README "${INSTALLER_BASE_DIR}/../../README.txt")
SET(CPACK_PACKAGE_DESCRIPTION_FILE "${INSTALLER_BASE_DIR}/DESCRIPTION.txt")
SET(CPACK_RESOURCE_FILE_WELCOME "${INSTALLER_BASE_DIR}/WELCOME.txt")

# Process files to install
IF(APPLE)
    IF(EXISTS ${INSTALLER_BASE_DIR}/TEMP_INSTALL_FILES)
        SET(CPACK_INSTALL_COMMANDS ${CPACK_INSTALL_COMMANDS} "rm -r ${INSTALLER_BASE_DIR}/TEMP_INSTALL_FILES")
    ENDIF(EXISTS ${INSTALLER_BASE_DIR}/TEMP_INSTALL_FILES)
    SET(CPACK_INSTALL_COMMANDS ${CPACK_INSTALL_COMMANDS} "mkdir ${INSTALLER_BASE_DIR}/TEMP_INSTALL_FILES")
    SET(CPACK_INSTALL_COMMANDS ${CPACK_INSTALL_COMMANDS} "mkdir ${INSTALLER_BASE_DIR}/TEMP_INSTALL_FILES/lib")
	SET(CPACK_INSTALL_COMMANDS ${CPACK_INSTALL_COMMANDS} "mkdir ${INSTALLER_BASE_DIR}/TEMP_INSTALL_FILES/bin")
    SET(CPACK_INSTALL_COMMANDS ${CPACK_INSTALL_COMMANDS} "mkdir ${INSTALLER_BASE_DIR}/TEMP_INSTALL_FILES/include")
    SET(CPACK_INSTALL_COMMANDS ${CPACK_INSTALL_COMMANDS} "mkdir ${INSTALLER_BASE_DIR}/TEMP_INSTALL_FILES/share")
    SET(CPACK_INSTALL_COMMANDS ${CPACK_INSTALL_COMMANDS} "mkdir ${INSTALLER_BASE_DIR}/TEMP_INSTALL_FILES/share/OpenSGToolbox")

    # If APPLE, include libtif, libpng, and libjpg
    FILE(GLOB FILE_LIST "${JPG_LIB_DIR}/libjpeg*.dylib" "${JPG_LIB_DIR}/libpng*.dylib" "${JPG_LIB_DIR}/libtiff*.dylib")
    FOREACH(FILE ${FILE_LIST})
        SET(CPACK_INSTALL_COMMANDS ${CPACK_INSTALL_COMMANDS} "cp ${FILE} ${INSTALLER_BASE_DIR}/TEMP_INSTALL_FILES/lib")
    ENDFOREACH(FILE ${FILE_LIST})
    #Don't include the symlinks, this couses a problem on OS X because libjpep.dylib in /sw/lib from fink collides with libJPEG.dylib
    #defined in OS X qpplication services framework
    IF(EXISTS ${INSTALLER_BASE_DIR}/TEMP_INSTALL_FILES/lib/libjpeg.dylib)
        SET(CPACK_INSTALL_COMMANDS ${CPACK_INSTALL_COMMANDS} "rm ${INSTALLER_BASE_DIR}/TEMP_INSTALL_FILES/lib/libjpeg.dylib")
    ENDIF(EXISTS ${INSTALLER_BASE_DIR}/TEMP_INSTALL_FILES/lib/libjpeg.dylib)
    IF(EXISTS ${INSTALLER_BASE_DIR}/TEMP_INSTALL_FILES/lib/libpng.dylib)
        SET(CPACK_INSTALL_COMMANDS ${CPACK_INSTALL_COMMANDS} "rm ${INSTALLER_BASE_DIR}/TEMP_INSTALL_FILES/lib/libpng.dylib")
    ENDIF(EXISTS ${INSTALLER_BASE_DIR}/TEMP_INSTALL_FILES/lib/libpng.dylib)
    IF(EXISTS ${INSTALLER_BASE_DIR}/TEMP_INSTALL_FILES/lib/libtiff.dylib)
        SET(CPACK_INSTALL_COMMANDS ${CPACK_INSTALL_COMMANDS} "rm ${INSTALLER_BASE_DIR}/TEMP_INSTALL_FILES/lib/libtiff.dylib")
    ENDIF(EXISTS ${INSTALLER_BASE_DIR}/TEMP_INSTALL_FILES/lib/libtiff.dylib)

    #OpenSG
    SET(CPACK_INSTALL_COMMANDS ${CPACK_INSTALL_COMMANDS} "cp -r ${OPENSG_BASE_DIR}/lib/dbg ${INSTALLER_BASE_DIR}/TEMP_INSTALL_FILES/lib")
    SET(CPACK_INSTALL_COMMANDS ${CPACK_INSTALL_COMMANDS} "cp -r ${OPENSG_BASE_DIR}/lib/opt ${INSTALLER_BASE_DIR}/TEMP_INSTALL_FILES/lib")
	SET(CPACK_INSTALL_COMMANDS ${CPACK_INSTALL_COMMANDS} "cp ${OPENSG_BASE_DIR}/bin/osg-config ${INSTALLER_BASE_DIR}/TEMP_INSTALL_FILES/bin")

    #Boost
    FILE(GLOB FILE_LIST "${BOOST_BASE_DIR}/lib/*.dylib")
    FOREACH(FILE ${FILE_LIST})
        SET(CPACK_INSTALL_COMMANDS ${CPACK_INSTALL_COMMANDS} "cp ${FILE} ${INSTALLER_BASE_DIR}/TEMP_INSTALL_FILES/lib")
    ENDFOREACH(FILE ${FILE_LIST})

    #ODE
    FILE(GLOB FILE_LIST "${ODE_BASE_DIR}/lib/*.dylib")
    FOREACH(FILE ${FILE_LIST})
        SET(CPACK_INSTALL_COMMANDS ${CPACK_INSTALL_COMMANDS} "cp ${FILE} ${INSTALLER_BASE_DIR}/TEMP_INSTALL_FILES/lib")
    ENDFOREACH(FILE ${FILE_LIST})

    #OpenSGToolbox
    FILE(GLOB FILE_LIST "${TOOLBOX_INSTALL_DIR}/lib/*.dylib")
    FOREACH(FILE ${FILE_LIST})
        SET(CPACK_INSTALL_COMMANDS ${CPACK_INSTALL_COMMANDS} "cp ${FILE} ${INSTALLER_BASE_DIR}/TEMP_INSTALL_FILES/lib")
    ENDFOREACH(FILE ${FILE_LIST})

    #Fix the dynamic library naming
    SET(CPACK_INSTALL_COMMANDS ${CPACK_INSTALL_COMMANDS} "../OS\\ X/BundleDirLibPaths.sh ${INSTALLER_BASE_DIR}/TEMP_INSTALL_FILES/lib")
    SET(CPACK_INSTALL_COMMANDS ${CPACK_INSTALL_COMMANDS} "../OS\\ X/BundleDirLibPaths.sh ${INSTALLER_BASE_DIR}/TEMP_INSTALL_FILES/lib/dbg")
    SET(CPACK_INSTALL_COMMANDS ${CPACK_INSTALL_COMMANDS} "../OS\\ X/BundleDirLibPaths.sh ${INSTALLER_BASE_DIR}/TEMP_INSTALL_FILES/lib/opt")
    SET(INSTALL_DIRS ${INSTALL_DIRS};${INSTALLER_BASE_DIR}/TEMP_INSTALL_FILES/lib;/lib)
	SET(INSTALL_DIRS ${INSTALL_DIRS};${INSTALLER_BASE_DIR}/TEMP_INSTALL_FILES/bin;/bin)
ENDIF(APPLE)

# Package the Cmake export file for OpenSGToolbox
SET(INSTALL_DIRS ${INSTALL_DIRS};${TOOLBOX_INSTALL_DIR}/lib/export;/share/OpenSGToolbox/build/export)
SET(INSTALL_DIRS ${INSTALL_DIRS};${TOOLBOX_BASE_DIR}/Builds/Common;/share/OpenSGToolbox/build)


# Tell CPack where to look for library files
PROCESS_LIBRARY(${OPENSG_BASE_DIR})
PROCESS_LIBRARY(${BOOST_BASE_DIR})
PROCESS_LIBRARY(${ODE_BASE_DIR})
PROCESS_LIBRARY(${TOOLBOX_INSTALL_DIR})


# Tell CPack where to look for tutorial files
PROCESS_TUTORIAL("Animation")
PROCESS_TUTORIAL("Dynamics")
PROCESS_TUTORIAL("Game")
PROCESS_TUTORIAL("Input")
PROCESS_TUTORIAL("Metabolic")
PROCESS_TUTORIAL("ParticleSystem")
PROCESS_TUTORIAL("Physics")
PROCESS_TUTORIAL("Sound")
PROCESS_TUTORIAL("Toolbox")
PROCESS_TUTORIAL("UserInterface")
PROCESS_TUTORIAL("Video")

# Configure installer
SET(CPACK_INSTALLED_DIRECTORIES ${INSTALL_DIRS})

