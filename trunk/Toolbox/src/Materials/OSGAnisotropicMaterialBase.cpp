/*---------------------------------------------------------------------------*\
 *                        OpenSG ToolBox Toolbox                             *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                         www.vrac.iastate.edu                              *
 *                                                                           *
 *                          Authors: David Kabala                            *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class AnisotropicMaterial!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#define OSG_COMPILEANISOTROPICMATERIALINST

#include <stdlib.h>
#include <stdio.h>

#include <OpenSG/OSGConfig.h>

#include "OSGAnisotropicMaterialBase.h"
#include "OSGAnisotropicMaterial.h"


OSG_BEGIN_NAMESPACE

const OSG::BitVector  AnisotropicMaterialBase::ColorFieldMask = 
    (TypeTraits<BitVector>::One << AnisotropicMaterialBase::ColorFieldId);

const OSG::BitVector  AnisotropicMaterialBase::ColorImageFieldMask = 
    (TypeTraits<BitVector>::One << AnisotropicMaterialBase::ColorImageFieldId);

const OSG::BitVector  AnisotropicMaterialBase::TransparencyFieldMask = 
    (TypeTraits<BitVector>::One << AnisotropicMaterialBase::TransparencyFieldId);

const OSG::BitVector  AnisotropicMaterialBase::TransparencyImageFieldMask = 
    (TypeTraits<BitVector>::One << AnisotropicMaterialBase::TransparencyImageFieldId);

const OSG::BitVector  AnisotropicMaterialBase::AmbientColorFieldMask = 
    (TypeTraits<BitVector>::One << AnisotropicMaterialBase::AmbientColorFieldId);

const OSG::BitVector  AnisotropicMaterialBase::AmbientColorImageFieldMask = 
    (TypeTraits<BitVector>::One << AnisotropicMaterialBase::AmbientColorImageFieldId);

const OSG::BitVector  AnisotropicMaterialBase::IncandescenceFieldMask = 
    (TypeTraits<BitVector>::One << AnisotropicMaterialBase::IncandescenceFieldId);

const OSG::BitVector  AnisotropicMaterialBase::IncandescenceImageFieldMask = 
    (TypeTraits<BitVector>::One << AnisotropicMaterialBase::IncandescenceImageFieldId);

const OSG::BitVector  AnisotropicMaterialBase::NormalMapImageFieldMask = 
    (TypeTraits<BitVector>::One << AnisotropicMaterialBase::NormalMapImageFieldId);

const OSG::BitVector  AnisotropicMaterialBase::BumpDepthFieldMask = 
    (TypeTraits<BitVector>::One << AnisotropicMaterialBase::BumpDepthFieldId);

const OSG::BitVector  AnisotropicMaterialBase::BumpDepthImageFieldMask = 
    (TypeTraits<BitVector>::One << AnisotropicMaterialBase::BumpDepthImageFieldId);

const OSG::BitVector  AnisotropicMaterialBase::DiffuseFieldMask = 
    (TypeTraits<BitVector>::One << AnisotropicMaterialBase::DiffuseFieldId);

const OSG::BitVector  AnisotropicMaterialBase::DiffuseImageFieldMask = 
    (TypeTraits<BitVector>::One << AnisotropicMaterialBase::DiffuseImageFieldId);

const OSG::BitVector  AnisotropicMaterialBase::TransleucenceFieldMask = 
    (TypeTraits<BitVector>::One << AnisotropicMaterialBase::TransleucenceFieldId);

const OSG::BitVector  AnisotropicMaterialBase::TransleucenceImageFieldMask = 
    (TypeTraits<BitVector>::One << AnisotropicMaterialBase::TransleucenceImageFieldId);

const OSG::BitVector  AnisotropicMaterialBase::TransleucenceDepthFieldMask = 
    (TypeTraits<BitVector>::One << AnisotropicMaterialBase::TransleucenceDepthFieldId);

const OSG::BitVector  AnisotropicMaterialBase::TransleucenceDepthImageFieldMask = 
    (TypeTraits<BitVector>::One << AnisotropicMaterialBase::TransleucenceDepthImageFieldId);

const OSG::BitVector  AnisotropicMaterialBase::TransleucenceFocusFieldMask = 
    (TypeTraits<BitVector>::One << AnisotropicMaterialBase::TransleucenceFocusFieldId);

const OSG::BitVector  AnisotropicMaterialBase::TransleucenceFocusImageFieldMask = 
    (TypeTraits<BitVector>::One << AnisotropicMaterialBase::TransleucenceFocusImageFieldId);

const OSG::BitVector  AnisotropicMaterialBase::SpecularAngleFieldMask = 
    (TypeTraits<BitVector>::One << AnisotropicMaterialBase::SpecularAngleFieldId);

const OSG::BitVector  AnisotropicMaterialBase::SpecularAngleImageFieldMask = 
    (TypeTraits<BitVector>::One << AnisotropicMaterialBase::SpecularAngleImageFieldId);

const OSG::BitVector  AnisotropicMaterialBase::SpecularSpreadXFieldMask = 
    (TypeTraits<BitVector>::One << AnisotropicMaterialBase::SpecularSpreadXFieldId);

const OSG::BitVector  AnisotropicMaterialBase::SpecularSpreadXImageFieldMask = 
    (TypeTraits<BitVector>::One << AnisotropicMaterialBase::SpecularSpreadXImageFieldId);

const OSG::BitVector  AnisotropicMaterialBase::SpecularSpreadYFieldMask = 
    (TypeTraits<BitVector>::One << AnisotropicMaterialBase::SpecularSpreadYFieldId);

const OSG::BitVector  AnisotropicMaterialBase::SpecularSpreadYmageFieldMask = 
    (TypeTraits<BitVector>::One << AnisotropicMaterialBase::SpecularSpreadYmageFieldId);

const OSG::BitVector  AnisotropicMaterialBase::SpecularRoughnessFieldMask = 
    (TypeTraits<BitVector>::One << AnisotropicMaterialBase::SpecularRoughnessFieldId);

const OSG::BitVector  AnisotropicMaterialBase::SpecularRoughnessImageFieldMask = 
    (TypeTraits<BitVector>::One << AnisotropicMaterialBase::SpecularRoughnessImageFieldId);

const OSG::BitVector  AnisotropicMaterialBase::SpecularFresnelIndexFieldMask = 
    (TypeTraits<BitVector>::One << AnisotropicMaterialBase::SpecularFresnelIndexFieldId);

const OSG::BitVector  AnisotropicMaterialBase::SpecularFresnelIndexImageFieldMask = 
    (TypeTraits<BitVector>::One << AnisotropicMaterialBase::SpecularFresnelIndexImageFieldId);

const OSG::BitVector  AnisotropicMaterialBase::SpecularColorFieldMask = 
    (TypeTraits<BitVector>::One << AnisotropicMaterialBase::SpecularColorFieldId);

const OSG::BitVector  AnisotropicMaterialBase::SpecularColorImageFieldMask = 
    (TypeTraits<BitVector>::One << AnisotropicMaterialBase::SpecularColorImageFieldId);

const OSG::BitVector AnisotropicMaterialBase::MTInfluenceMask = 
    (Inherited::MTInfluenceMask) | 
    (static_cast<BitVector>(0x0) << Inherited::NextFieldId); 


// Field descriptions

/*! \var Color3f         AnisotropicMaterialBase::_sfColor
    
*/
/*! \var ImagePtr        AnisotropicMaterialBase::_sfColorImage
    
*/
/*! \var Color3f         AnisotropicMaterialBase::_sfTransparency
    
*/
/*! \var ImagePtr        AnisotropicMaterialBase::_sfTransparencyImage
    
*/
/*! \var Color3f         AnisotropicMaterialBase::_sfAmbientColor
    
*/
/*! \var ImagePtr        AnisotropicMaterialBase::_sfAmbientColorImage
    
*/
/*! \var Color3f         AnisotropicMaterialBase::_sfIncandescence
    
*/
/*! \var ImagePtr        AnisotropicMaterialBase::_sfIncandescenceImage
    
*/
/*! \var ImagePtr        AnisotropicMaterialBase::_sfNormalMapImage
    
*/
/*! \var Real32          AnisotropicMaterialBase::_sfBumpDepth
    
*/
/*! \var ImagePtr        AnisotropicMaterialBase::_sfBumpDepthImage
    
*/
/*! \var Real32          AnisotropicMaterialBase::_sfDiffuse
    
*/
/*! \var ImagePtr        AnisotropicMaterialBase::_sfDiffuseImage
    
*/
/*! \var Real32          AnisotropicMaterialBase::_sfTransleucence
    
*/
/*! \var ImagePtr        AnisotropicMaterialBase::_sfTransleucenceImage
    
*/
/*! \var Real32          AnisotropicMaterialBase::_sfTransleucenceDepth
    
*/
/*! \var ImagePtr        AnisotropicMaterialBase::_sfTransleucenceDepthImage
    
*/
/*! \var Real32          AnisotropicMaterialBase::_sfTransleucenceFocus
    
*/
/*! \var ImagePtr        AnisotropicMaterialBase::_sfTransleucenceFocusImage
    
*/
/*! \var Real32          AnisotropicMaterialBase::_sfSpecularAngle
    
*/
/*! \var ImagePtr        AnisotropicMaterialBase::_sfSpecularAngleImage
    
*/
/*! \var Real32          AnisotropicMaterialBase::_sfSpecularSpreadX
    
*/
/*! \var ImagePtr        AnisotropicMaterialBase::_sfSpecularSpreadXImage
    
*/
/*! \var Real32          AnisotropicMaterialBase::_sfSpecularSpreadY
    
*/
/*! \var ImagePtr        AnisotropicMaterialBase::_sfSpecularSpreadYmage
    
*/
/*! \var Real32          AnisotropicMaterialBase::_sfSpecularRoughness
    
*/
/*! \var ImagePtr        AnisotropicMaterialBase::_sfSpecularRoughnessImage
    
*/
/*! \var Real32          AnisotropicMaterialBase::_sfSpecularFresnelIndex
    
*/
/*! \var ImagePtr        AnisotropicMaterialBase::_sfSpecularFresnelIndexImage
    
*/
/*! \var Color3f         AnisotropicMaterialBase::_sfSpecularColor
    
*/
/*! \var ImagePtr        AnisotropicMaterialBase::_sfSpecularColorImage
    
*/

//! AnisotropicMaterial description

FieldDescription *AnisotropicMaterialBase::_desc[] = 
{
    new FieldDescription(SFColor3f::getClassType(), 
                     "Color", 
                     ColorFieldId, ColorFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&AnisotropicMaterialBase::editSFColor)),
    new FieldDescription(SFImagePtr::getClassType(), 
                     "ColorImage", 
                     ColorImageFieldId, ColorImageFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&AnisotropicMaterialBase::editSFColorImage)),
    new FieldDescription(SFColor3f::getClassType(), 
                     "Transparency", 
                     TransparencyFieldId, TransparencyFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&AnisotropicMaterialBase::editSFTransparency)),
    new FieldDescription(SFImagePtr::getClassType(), 
                     "TransparencyImage", 
                     TransparencyImageFieldId, TransparencyImageFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&AnisotropicMaterialBase::editSFTransparencyImage)),
    new FieldDescription(SFColor3f::getClassType(), 
                     "AmbientColor", 
                     AmbientColorFieldId, AmbientColorFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&AnisotropicMaterialBase::editSFAmbientColor)),
    new FieldDescription(SFImagePtr::getClassType(), 
                     "AmbientColorImage", 
                     AmbientColorImageFieldId, AmbientColorImageFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&AnisotropicMaterialBase::editSFAmbientColorImage)),
    new FieldDescription(SFColor3f::getClassType(), 
                     "Incandescence", 
                     IncandescenceFieldId, IncandescenceFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&AnisotropicMaterialBase::editSFIncandescence)),
    new FieldDescription(SFImagePtr::getClassType(), 
                     "IncandescenceImage", 
                     IncandescenceImageFieldId, IncandescenceImageFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&AnisotropicMaterialBase::editSFIncandescenceImage)),
    new FieldDescription(SFImagePtr::getClassType(), 
                     "NormalMapImage", 
                     NormalMapImageFieldId, NormalMapImageFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&AnisotropicMaterialBase::editSFNormalMapImage)),
    new FieldDescription(SFReal32::getClassType(), 
                     "BumpDepth", 
                     BumpDepthFieldId, BumpDepthFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&AnisotropicMaterialBase::editSFBumpDepth)),
    new FieldDescription(SFImagePtr::getClassType(), 
                     "BumpDepthImage", 
                     BumpDepthImageFieldId, BumpDepthImageFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&AnisotropicMaterialBase::editSFBumpDepthImage)),
    new FieldDescription(SFReal32::getClassType(), 
                     "Diffuse", 
                     DiffuseFieldId, DiffuseFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&AnisotropicMaterialBase::editSFDiffuse)),
    new FieldDescription(SFImagePtr::getClassType(), 
                     "DiffuseImage", 
                     DiffuseImageFieldId, DiffuseImageFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&AnisotropicMaterialBase::editSFDiffuseImage)),
    new FieldDescription(SFReal32::getClassType(), 
                     "Transleucence", 
                     TransleucenceFieldId, TransleucenceFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&AnisotropicMaterialBase::editSFTransleucence)),
    new FieldDescription(SFImagePtr::getClassType(), 
                     "TransleucenceImage", 
                     TransleucenceImageFieldId, TransleucenceImageFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&AnisotropicMaterialBase::editSFTransleucenceImage)),
    new FieldDescription(SFReal32::getClassType(), 
                     "TransleucenceDepth", 
                     TransleucenceDepthFieldId, TransleucenceDepthFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&AnisotropicMaterialBase::editSFTransleucenceDepth)),
    new FieldDescription(SFImagePtr::getClassType(), 
                     "TransleucenceDepthImage", 
                     TransleucenceDepthImageFieldId, TransleucenceDepthImageFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&AnisotropicMaterialBase::editSFTransleucenceDepthImage)),
    new FieldDescription(SFReal32::getClassType(), 
                     "TransleucenceFocus", 
                     TransleucenceFocusFieldId, TransleucenceFocusFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&AnisotropicMaterialBase::editSFTransleucenceFocus)),
    new FieldDescription(SFImagePtr::getClassType(), 
                     "TransleucenceFocusImage", 
                     TransleucenceFocusImageFieldId, TransleucenceFocusImageFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&AnisotropicMaterialBase::editSFTransleucenceFocusImage)),
    new FieldDescription(SFReal32::getClassType(), 
                     "SpecularAngle", 
                     SpecularAngleFieldId, SpecularAngleFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&AnisotropicMaterialBase::editSFSpecularAngle)),
    new FieldDescription(SFImagePtr::getClassType(), 
                     "SpecularAngleImage", 
                     SpecularAngleImageFieldId, SpecularAngleImageFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&AnisotropicMaterialBase::editSFSpecularAngleImage)),
    new FieldDescription(SFReal32::getClassType(), 
                     "SpecularSpreadX", 
                     SpecularSpreadXFieldId, SpecularSpreadXFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&AnisotropicMaterialBase::editSFSpecularSpreadX)),
    new FieldDescription(SFImagePtr::getClassType(), 
                     "SpecularSpreadXImage", 
                     SpecularSpreadXImageFieldId, SpecularSpreadXImageFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&AnisotropicMaterialBase::editSFSpecularSpreadXImage)),
    new FieldDescription(SFReal32::getClassType(), 
                     "SpecularSpreadY", 
                     SpecularSpreadYFieldId, SpecularSpreadYFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&AnisotropicMaterialBase::editSFSpecularSpreadY)),
    new FieldDescription(SFImagePtr::getClassType(), 
                     "SpecularSpreadYmage", 
                     SpecularSpreadYmageFieldId, SpecularSpreadYmageFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&AnisotropicMaterialBase::editSFSpecularSpreadYmage)),
    new FieldDescription(SFReal32::getClassType(), 
                     "SpecularRoughness", 
                     SpecularRoughnessFieldId, SpecularRoughnessFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&AnisotropicMaterialBase::editSFSpecularRoughness)),
    new FieldDescription(SFImagePtr::getClassType(), 
                     "SpecularRoughnessImage", 
                     SpecularRoughnessImageFieldId, SpecularRoughnessImageFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&AnisotropicMaterialBase::editSFSpecularRoughnessImage)),
    new FieldDescription(SFReal32::getClassType(), 
                     "SpecularFresnelIndex", 
                     SpecularFresnelIndexFieldId, SpecularFresnelIndexFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&AnisotropicMaterialBase::editSFSpecularFresnelIndex)),
    new FieldDescription(SFImagePtr::getClassType(), 
                     "SpecularFresnelIndexImage", 
                     SpecularFresnelIndexImageFieldId, SpecularFresnelIndexImageFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&AnisotropicMaterialBase::editSFSpecularFresnelIndexImage)),
    new FieldDescription(SFColor3f::getClassType(), 
                     "SpecularColor", 
                     SpecularColorFieldId, SpecularColorFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&AnisotropicMaterialBase::editSFSpecularColor)),
    new FieldDescription(SFImagePtr::getClassType(), 
                     "SpecularColorImage", 
                     SpecularColorImageFieldId, SpecularColorImageFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&AnisotropicMaterialBase::editSFSpecularColorImage))
};


FieldContainerType AnisotropicMaterialBase::_type(
    "AnisotropicMaterial",
    "ChunkMaterial",
    NULL,
    reinterpret_cast<PrototypeCreateF>(&AnisotropicMaterialBase::createEmpty),
    AnisotropicMaterial::initMethod,
    _desc,
    sizeof(_desc));

//OSG_FIELD_CONTAINER_DEF(AnisotropicMaterialBase, AnisotropicMaterialPtr)

/*------------------------------ get -----------------------------------*/

FieldContainerType &AnisotropicMaterialBase::getType(void) 
{
    return _type; 
} 

const FieldContainerType &AnisotropicMaterialBase::getType(void) const 
{
    return _type;
} 


FieldContainerPtr AnisotropicMaterialBase::shallowCopy(void) const 
{ 
    AnisotropicMaterialPtr returnValue; 

    newPtr(returnValue, dynamic_cast<const AnisotropicMaterial *>(this)); 

    return returnValue; 
}

UInt32 AnisotropicMaterialBase::getContainerSize(void) const 
{ 
    return sizeof(AnisotropicMaterial); 
}


#if !defined(OSG_FIXED_MFIELDSYNC)
void AnisotropicMaterialBase::executeSync(      FieldContainer &other,
                                    const BitVector      &whichField)
{
    this->executeSyncImpl(static_cast<AnisotropicMaterialBase *>(&other),
                          whichField);
}
#else
void AnisotropicMaterialBase::executeSync(      FieldContainer &other,
                                    const BitVector      &whichField,                                    const SyncInfo       &sInfo     )
{
    this->executeSyncImpl((AnisotropicMaterialBase *) &other, whichField, sInfo);
}
void AnisotropicMaterialBase::execBeginEdit(const BitVector &whichField, 
                                            UInt32     uiAspect,
                                            UInt32     uiContainerSize) 
{
    this->execBeginEditImpl(whichField, uiAspect, uiContainerSize);
}

void AnisotropicMaterialBase::onDestroyAspect(UInt32 uiId, UInt32 uiAspect)
{
    Inherited::onDestroyAspect(uiId, uiAspect);

}
#endif

/*------------------------- constructors ----------------------------------*/

#ifdef OSG_WIN32_ICL
#pragma warning (disable : 383)
#endif

AnisotropicMaterialBase::AnisotropicMaterialBase(void) :
    _sfColor                  (), 
    _sfColorImage             (ImagePtr(NullFC)), 
    _sfTransparency           (), 
    _sfTransparencyImage      (ImagePtr(NullFC)), 
    _sfAmbientColor           (), 
    _sfAmbientColorImage      (ImagePtr(NullFC)), 
    _sfIncandescence          (), 
    _sfIncandescenceImage     (ImagePtr(NullFC)), 
    _sfNormalMapImage         (ImagePtr(NullFC)), 
    _sfBumpDepth              (), 
    _sfBumpDepthImage         (ImagePtr(NullFC)), 
    _sfDiffuse                (), 
    _sfDiffuseImage           (ImagePtr(NullFC)), 
    _sfTransleucence          (), 
    _sfTransleucenceImage     (ImagePtr(NullFC)), 
    _sfTransleucenceDepth     (), 
    _sfTransleucenceDepthImage(ImagePtr(NullFC)), 
    _sfTransleucenceFocus     (), 
    _sfTransleucenceFocusImage(ImagePtr(NullFC)), 
    _sfSpecularAngle          (), 
    _sfSpecularAngleImage     (ImagePtr(NullFC)), 
    _sfSpecularSpreadX        (), 
    _sfSpecularSpreadXImage   (ImagePtr(NullFC)), 
    _sfSpecularSpreadY        (), 
    _sfSpecularSpreadYmage    (ImagePtr(NullFC)), 
    _sfSpecularRoughness      (), 
    _sfSpecularRoughnessImage (ImagePtr(NullFC)), 
    _sfSpecularFresnelIndex   (), 
    _sfSpecularFresnelIndexImage(ImagePtr(NullFC)), 
    _sfSpecularColor          (), 
    _sfSpecularColorImage     (ImagePtr(NullFC)), 
    Inherited() 
{
}

#ifdef OSG_WIN32_ICL
#pragma warning (default : 383)
#endif

AnisotropicMaterialBase::AnisotropicMaterialBase(const AnisotropicMaterialBase &source) :
    _sfColor                  (source._sfColor                  ), 
    _sfColorImage             (source._sfColorImage             ), 
    _sfTransparency           (source._sfTransparency           ), 
    _sfTransparencyImage      (source._sfTransparencyImage      ), 
    _sfAmbientColor           (source._sfAmbientColor           ), 
    _sfAmbientColorImage      (source._sfAmbientColorImage      ), 
    _sfIncandescence          (source._sfIncandescence          ), 
    _sfIncandescenceImage     (source._sfIncandescenceImage     ), 
    _sfNormalMapImage         (source._sfNormalMapImage         ), 
    _sfBumpDepth              (source._sfBumpDepth              ), 
    _sfBumpDepthImage         (source._sfBumpDepthImage         ), 
    _sfDiffuse                (source._sfDiffuse                ), 
    _sfDiffuseImage           (source._sfDiffuseImage           ), 
    _sfTransleucence          (source._sfTransleucence          ), 
    _sfTransleucenceImage     (source._sfTransleucenceImage     ), 
    _sfTransleucenceDepth     (source._sfTransleucenceDepth     ), 
    _sfTransleucenceDepthImage(source._sfTransleucenceDepthImage), 
    _sfTransleucenceFocus     (source._sfTransleucenceFocus     ), 
    _sfTransleucenceFocusImage(source._sfTransleucenceFocusImage), 
    _sfSpecularAngle          (source._sfSpecularAngle          ), 
    _sfSpecularAngleImage     (source._sfSpecularAngleImage     ), 
    _sfSpecularSpreadX        (source._sfSpecularSpreadX        ), 
    _sfSpecularSpreadXImage   (source._sfSpecularSpreadXImage   ), 
    _sfSpecularSpreadY        (source._sfSpecularSpreadY        ), 
    _sfSpecularSpreadYmage    (source._sfSpecularSpreadYmage    ), 
    _sfSpecularRoughness      (source._sfSpecularRoughness      ), 
    _sfSpecularRoughnessImage (source._sfSpecularRoughnessImage ), 
    _sfSpecularFresnelIndex   (source._sfSpecularFresnelIndex   ), 
    _sfSpecularFresnelIndexImage(source._sfSpecularFresnelIndexImage), 
    _sfSpecularColor          (source._sfSpecularColor          ), 
    _sfSpecularColorImage     (source._sfSpecularColorImage     ), 
    Inherited                 (source)
{
}

/*-------------------------- destructors ----------------------------------*/

AnisotropicMaterialBase::~AnisotropicMaterialBase(void)
{
}

/*------------------------------ access -----------------------------------*/

UInt32 AnisotropicMaterialBase::getBinSize(const BitVector &whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (ColorFieldMask & whichField))
    {
        returnValue += _sfColor.getBinSize();
    }

    if(FieldBits::NoField != (ColorImageFieldMask & whichField))
    {
        returnValue += _sfColorImage.getBinSize();
    }

    if(FieldBits::NoField != (TransparencyFieldMask & whichField))
    {
        returnValue += _sfTransparency.getBinSize();
    }

    if(FieldBits::NoField != (TransparencyImageFieldMask & whichField))
    {
        returnValue += _sfTransparencyImage.getBinSize();
    }

    if(FieldBits::NoField != (AmbientColorFieldMask & whichField))
    {
        returnValue += _sfAmbientColor.getBinSize();
    }

    if(FieldBits::NoField != (AmbientColorImageFieldMask & whichField))
    {
        returnValue += _sfAmbientColorImage.getBinSize();
    }

    if(FieldBits::NoField != (IncandescenceFieldMask & whichField))
    {
        returnValue += _sfIncandescence.getBinSize();
    }

    if(FieldBits::NoField != (IncandescenceImageFieldMask & whichField))
    {
        returnValue += _sfIncandescenceImage.getBinSize();
    }

    if(FieldBits::NoField != (NormalMapImageFieldMask & whichField))
    {
        returnValue += _sfNormalMapImage.getBinSize();
    }

    if(FieldBits::NoField != (BumpDepthFieldMask & whichField))
    {
        returnValue += _sfBumpDepth.getBinSize();
    }

    if(FieldBits::NoField != (BumpDepthImageFieldMask & whichField))
    {
        returnValue += _sfBumpDepthImage.getBinSize();
    }

    if(FieldBits::NoField != (DiffuseFieldMask & whichField))
    {
        returnValue += _sfDiffuse.getBinSize();
    }

    if(FieldBits::NoField != (DiffuseImageFieldMask & whichField))
    {
        returnValue += _sfDiffuseImage.getBinSize();
    }

    if(FieldBits::NoField != (TransleucenceFieldMask & whichField))
    {
        returnValue += _sfTransleucence.getBinSize();
    }

    if(FieldBits::NoField != (TransleucenceImageFieldMask & whichField))
    {
        returnValue += _sfTransleucenceImage.getBinSize();
    }

    if(FieldBits::NoField != (TransleucenceDepthFieldMask & whichField))
    {
        returnValue += _sfTransleucenceDepth.getBinSize();
    }

    if(FieldBits::NoField != (TransleucenceDepthImageFieldMask & whichField))
    {
        returnValue += _sfTransleucenceDepthImage.getBinSize();
    }

    if(FieldBits::NoField != (TransleucenceFocusFieldMask & whichField))
    {
        returnValue += _sfTransleucenceFocus.getBinSize();
    }

    if(FieldBits::NoField != (TransleucenceFocusImageFieldMask & whichField))
    {
        returnValue += _sfTransleucenceFocusImage.getBinSize();
    }

    if(FieldBits::NoField != (SpecularAngleFieldMask & whichField))
    {
        returnValue += _sfSpecularAngle.getBinSize();
    }

    if(FieldBits::NoField != (SpecularAngleImageFieldMask & whichField))
    {
        returnValue += _sfSpecularAngleImage.getBinSize();
    }

    if(FieldBits::NoField != (SpecularSpreadXFieldMask & whichField))
    {
        returnValue += _sfSpecularSpreadX.getBinSize();
    }

    if(FieldBits::NoField != (SpecularSpreadXImageFieldMask & whichField))
    {
        returnValue += _sfSpecularSpreadXImage.getBinSize();
    }

    if(FieldBits::NoField != (SpecularSpreadYFieldMask & whichField))
    {
        returnValue += _sfSpecularSpreadY.getBinSize();
    }

    if(FieldBits::NoField != (SpecularSpreadYmageFieldMask & whichField))
    {
        returnValue += _sfSpecularSpreadYmage.getBinSize();
    }

    if(FieldBits::NoField != (SpecularRoughnessFieldMask & whichField))
    {
        returnValue += _sfSpecularRoughness.getBinSize();
    }

    if(FieldBits::NoField != (SpecularRoughnessImageFieldMask & whichField))
    {
        returnValue += _sfSpecularRoughnessImage.getBinSize();
    }

    if(FieldBits::NoField != (SpecularFresnelIndexFieldMask & whichField))
    {
        returnValue += _sfSpecularFresnelIndex.getBinSize();
    }

    if(FieldBits::NoField != (SpecularFresnelIndexImageFieldMask & whichField))
    {
        returnValue += _sfSpecularFresnelIndexImage.getBinSize();
    }

    if(FieldBits::NoField != (SpecularColorFieldMask & whichField))
    {
        returnValue += _sfSpecularColor.getBinSize();
    }

    if(FieldBits::NoField != (SpecularColorImageFieldMask & whichField))
    {
        returnValue += _sfSpecularColorImage.getBinSize();
    }


    return returnValue;
}

void AnisotropicMaterialBase::copyToBin(      BinaryDataHandler &pMem,
                                  const BitVector         &whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (ColorFieldMask & whichField))
    {
        _sfColor.copyToBin(pMem);
    }

    if(FieldBits::NoField != (ColorImageFieldMask & whichField))
    {
        _sfColorImage.copyToBin(pMem);
    }

    if(FieldBits::NoField != (TransparencyFieldMask & whichField))
    {
        _sfTransparency.copyToBin(pMem);
    }

    if(FieldBits::NoField != (TransparencyImageFieldMask & whichField))
    {
        _sfTransparencyImage.copyToBin(pMem);
    }

    if(FieldBits::NoField != (AmbientColorFieldMask & whichField))
    {
        _sfAmbientColor.copyToBin(pMem);
    }

    if(FieldBits::NoField != (AmbientColorImageFieldMask & whichField))
    {
        _sfAmbientColorImage.copyToBin(pMem);
    }

    if(FieldBits::NoField != (IncandescenceFieldMask & whichField))
    {
        _sfIncandescence.copyToBin(pMem);
    }

    if(FieldBits::NoField != (IncandescenceImageFieldMask & whichField))
    {
        _sfIncandescenceImage.copyToBin(pMem);
    }

    if(FieldBits::NoField != (NormalMapImageFieldMask & whichField))
    {
        _sfNormalMapImage.copyToBin(pMem);
    }

    if(FieldBits::NoField != (BumpDepthFieldMask & whichField))
    {
        _sfBumpDepth.copyToBin(pMem);
    }

    if(FieldBits::NoField != (BumpDepthImageFieldMask & whichField))
    {
        _sfBumpDepthImage.copyToBin(pMem);
    }

    if(FieldBits::NoField != (DiffuseFieldMask & whichField))
    {
        _sfDiffuse.copyToBin(pMem);
    }

    if(FieldBits::NoField != (DiffuseImageFieldMask & whichField))
    {
        _sfDiffuseImage.copyToBin(pMem);
    }

    if(FieldBits::NoField != (TransleucenceFieldMask & whichField))
    {
        _sfTransleucence.copyToBin(pMem);
    }

    if(FieldBits::NoField != (TransleucenceImageFieldMask & whichField))
    {
        _sfTransleucenceImage.copyToBin(pMem);
    }

    if(FieldBits::NoField != (TransleucenceDepthFieldMask & whichField))
    {
        _sfTransleucenceDepth.copyToBin(pMem);
    }

    if(FieldBits::NoField != (TransleucenceDepthImageFieldMask & whichField))
    {
        _sfTransleucenceDepthImage.copyToBin(pMem);
    }

    if(FieldBits::NoField != (TransleucenceFocusFieldMask & whichField))
    {
        _sfTransleucenceFocus.copyToBin(pMem);
    }

    if(FieldBits::NoField != (TransleucenceFocusImageFieldMask & whichField))
    {
        _sfTransleucenceFocusImage.copyToBin(pMem);
    }

    if(FieldBits::NoField != (SpecularAngleFieldMask & whichField))
    {
        _sfSpecularAngle.copyToBin(pMem);
    }

    if(FieldBits::NoField != (SpecularAngleImageFieldMask & whichField))
    {
        _sfSpecularAngleImage.copyToBin(pMem);
    }

    if(FieldBits::NoField != (SpecularSpreadXFieldMask & whichField))
    {
        _sfSpecularSpreadX.copyToBin(pMem);
    }

    if(FieldBits::NoField != (SpecularSpreadXImageFieldMask & whichField))
    {
        _sfSpecularSpreadXImage.copyToBin(pMem);
    }

    if(FieldBits::NoField != (SpecularSpreadYFieldMask & whichField))
    {
        _sfSpecularSpreadY.copyToBin(pMem);
    }

    if(FieldBits::NoField != (SpecularSpreadYmageFieldMask & whichField))
    {
        _sfSpecularSpreadYmage.copyToBin(pMem);
    }

    if(FieldBits::NoField != (SpecularRoughnessFieldMask & whichField))
    {
        _sfSpecularRoughness.copyToBin(pMem);
    }

    if(FieldBits::NoField != (SpecularRoughnessImageFieldMask & whichField))
    {
        _sfSpecularRoughnessImage.copyToBin(pMem);
    }

    if(FieldBits::NoField != (SpecularFresnelIndexFieldMask & whichField))
    {
        _sfSpecularFresnelIndex.copyToBin(pMem);
    }

    if(FieldBits::NoField != (SpecularFresnelIndexImageFieldMask & whichField))
    {
        _sfSpecularFresnelIndexImage.copyToBin(pMem);
    }

    if(FieldBits::NoField != (SpecularColorFieldMask & whichField))
    {
        _sfSpecularColor.copyToBin(pMem);
    }

    if(FieldBits::NoField != (SpecularColorImageFieldMask & whichField))
    {
        _sfSpecularColorImage.copyToBin(pMem);
    }


}

void AnisotropicMaterialBase::copyFromBin(      BinaryDataHandler &pMem,
                                    const BitVector    &whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (ColorFieldMask & whichField))
    {
        _sfColor.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (ColorImageFieldMask & whichField))
    {
        _sfColorImage.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (TransparencyFieldMask & whichField))
    {
        _sfTransparency.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (TransparencyImageFieldMask & whichField))
    {
        _sfTransparencyImage.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (AmbientColorFieldMask & whichField))
    {
        _sfAmbientColor.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (AmbientColorImageFieldMask & whichField))
    {
        _sfAmbientColorImage.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (IncandescenceFieldMask & whichField))
    {
        _sfIncandescence.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (IncandescenceImageFieldMask & whichField))
    {
        _sfIncandescenceImage.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (NormalMapImageFieldMask & whichField))
    {
        _sfNormalMapImage.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (BumpDepthFieldMask & whichField))
    {
        _sfBumpDepth.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (BumpDepthImageFieldMask & whichField))
    {
        _sfBumpDepthImage.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (DiffuseFieldMask & whichField))
    {
        _sfDiffuse.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (DiffuseImageFieldMask & whichField))
    {
        _sfDiffuseImage.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (TransleucenceFieldMask & whichField))
    {
        _sfTransleucence.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (TransleucenceImageFieldMask & whichField))
    {
        _sfTransleucenceImage.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (TransleucenceDepthFieldMask & whichField))
    {
        _sfTransleucenceDepth.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (TransleucenceDepthImageFieldMask & whichField))
    {
        _sfTransleucenceDepthImage.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (TransleucenceFocusFieldMask & whichField))
    {
        _sfTransleucenceFocus.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (TransleucenceFocusImageFieldMask & whichField))
    {
        _sfTransleucenceFocusImage.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (SpecularAngleFieldMask & whichField))
    {
        _sfSpecularAngle.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (SpecularAngleImageFieldMask & whichField))
    {
        _sfSpecularAngleImage.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (SpecularSpreadXFieldMask & whichField))
    {
        _sfSpecularSpreadX.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (SpecularSpreadXImageFieldMask & whichField))
    {
        _sfSpecularSpreadXImage.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (SpecularSpreadYFieldMask & whichField))
    {
        _sfSpecularSpreadY.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (SpecularSpreadYmageFieldMask & whichField))
    {
        _sfSpecularSpreadYmage.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (SpecularRoughnessFieldMask & whichField))
    {
        _sfSpecularRoughness.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (SpecularRoughnessImageFieldMask & whichField))
    {
        _sfSpecularRoughnessImage.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (SpecularFresnelIndexFieldMask & whichField))
    {
        _sfSpecularFresnelIndex.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (SpecularFresnelIndexImageFieldMask & whichField))
    {
        _sfSpecularFresnelIndexImage.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (SpecularColorFieldMask & whichField))
    {
        _sfSpecularColor.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (SpecularColorImageFieldMask & whichField))
    {
        _sfSpecularColorImage.copyFromBin(pMem);
    }


}

#if !defined(OSG_FIXED_MFIELDSYNC)
void AnisotropicMaterialBase::executeSyncImpl(      AnisotropicMaterialBase *pOther,
                                        const BitVector         &whichField)
{

    Inherited::executeSyncImpl(pOther, whichField);

    if(FieldBits::NoField != (ColorFieldMask & whichField))
        _sfColor.syncWith(pOther->_sfColor);

    if(FieldBits::NoField != (ColorImageFieldMask & whichField))
        _sfColorImage.syncWith(pOther->_sfColorImage);

    if(FieldBits::NoField != (TransparencyFieldMask & whichField))
        _sfTransparency.syncWith(pOther->_sfTransparency);

    if(FieldBits::NoField != (TransparencyImageFieldMask & whichField))
        _sfTransparencyImage.syncWith(pOther->_sfTransparencyImage);

    if(FieldBits::NoField != (AmbientColorFieldMask & whichField))
        _sfAmbientColor.syncWith(pOther->_sfAmbientColor);

    if(FieldBits::NoField != (AmbientColorImageFieldMask & whichField))
        _sfAmbientColorImage.syncWith(pOther->_sfAmbientColorImage);

    if(FieldBits::NoField != (IncandescenceFieldMask & whichField))
        _sfIncandescence.syncWith(pOther->_sfIncandescence);

    if(FieldBits::NoField != (IncandescenceImageFieldMask & whichField))
        _sfIncandescenceImage.syncWith(pOther->_sfIncandescenceImage);

    if(FieldBits::NoField != (NormalMapImageFieldMask & whichField))
        _sfNormalMapImage.syncWith(pOther->_sfNormalMapImage);

    if(FieldBits::NoField != (BumpDepthFieldMask & whichField))
        _sfBumpDepth.syncWith(pOther->_sfBumpDepth);

    if(FieldBits::NoField != (BumpDepthImageFieldMask & whichField))
        _sfBumpDepthImage.syncWith(pOther->_sfBumpDepthImage);

    if(FieldBits::NoField != (DiffuseFieldMask & whichField))
        _sfDiffuse.syncWith(pOther->_sfDiffuse);

    if(FieldBits::NoField != (DiffuseImageFieldMask & whichField))
        _sfDiffuseImage.syncWith(pOther->_sfDiffuseImage);

    if(FieldBits::NoField != (TransleucenceFieldMask & whichField))
        _sfTransleucence.syncWith(pOther->_sfTransleucence);

    if(FieldBits::NoField != (TransleucenceImageFieldMask & whichField))
        _sfTransleucenceImage.syncWith(pOther->_sfTransleucenceImage);

    if(FieldBits::NoField != (TransleucenceDepthFieldMask & whichField))
        _sfTransleucenceDepth.syncWith(pOther->_sfTransleucenceDepth);

    if(FieldBits::NoField != (TransleucenceDepthImageFieldMask & whichField))
        _sfTransleucenceDepthImage.syncWith(pOther->_sfTransleucenceDepthImage);

    if(FieldBits::NoField != (TransleucenceFocusFieldMask & whichField))
        _sfTransleucenceFocus.syncWith(pOther->_sfTransleucenceFocus);

    if(FieldBits::NoField != (TransleucenceFocusImageFieldMask & whichField))
        _sfTransleucenceFocusImage.syncWith(pOther->_sfTransleucenceFocusImage);

    if(FieldBits::NoField != (SpecularAngleFieldMask & whichField))
        _sfSpecularAngle.syncWith(pOther->_sfSpecularAngle);

    if(FieldBits::NoField != (SpecularAngleImageFieldMask & whichField))
        _sfSpecularAngleImage.syncWith(pOther->_sfSpecularAngleImage);

    if(FieldBits::NoField != (SpecularSpreadXFieldMask & whichField))
        _sfSpecularSpreadX.syncWith(pOther->_sfSpecularSpreadX);

    if(FieldBits::NoField != (SpecularSpreadXImageFieldMask & whichField))
        _sfSpecularSpreadXImage.syncWith(pOther->_sfSpecularSpreadXImage);

    if(FieldBits::NoField != (SpecularSpreadYFieldMask & whichField))
        _sfSpecularSpreadY.syncWith(pOther->_sfSpecularSpreadY);

    if(FieldBits::NoField != (SpecularSpreadYmageFieldMask & whichField))
        _sfSpecularSpreadYmage.syncWith(pOther->_sfSpecularSpreadYmage);

    if(FieldBits::NoField != (SpecularRoughnessFieldMask & whichField))
        _sfSpecularRoughness.syncWith(pOther->_sfSpecularRoughness);

    if(FieldBits::NoField != (SpecularRoughnessImageFieldMask & whichField))
        _sfSpecularRoughnessImage.syncWith(pOther->_sfSpecularRoughnessImage);

    if(FieldBits::NoField != (SpecularFresnelIndexFieldMask & whichField))
        _sfSpecularFresnelIndex.syncWith(pOther->_sfSpecularFresnelIndex);

    if(FieldBits::NoField != (SpecularFresnelIndexImageFieldMask & whichField))
        _sfSpecularFresnelIndexImage.syncWith(pOther->_sfSpecularFresnelIndexImage);

    if(FieldBits::NoField != (SpecularColorFieldMask & whichField))
        _sfSpecularColor.syncWith(pOther->_sfSpecularColor);

    if(FieldBits::NoField != (SpecularColorImageFieldMask & whichField))
        _sfSpecularColorImage.syncWith(pOther->_sfSpecularColorImage);


}
#else
void AnisotropicMaterialBase::executeSyncImpl(      AnisotropicMaterialBase *pOther,
                                        const BitVector         &whichField,
                                        const SyncInfo          &sInfo      )
{

    Inherited::executeSyncImpl(pOther, whichField, sInfo);

    if(FieldBits::NoField != (ColorFieldMask & whichField))
        _sfColor.syncWith(pOther->_sfColor);

    if(FieldBits::NoField != (ColorImageFieldMask & whichField))
        _sfColorImage.syncWith(pOther->_sfColorImage);

    if(FieldBits::NoField != (TransparencyFieldMask & whichField))
        _sfTransparency.syncWith(pOther->_sfTransparency);

    if(FieldBits::NoField != (TransparencyImageFieldMask & whichField))
        _sfTransparencyImage.syncWith(pOther->_sfTransparencyImage);

    if(FieldBits::NoField != (AmbientColorFieldMask & whichField))
        _sfAmbientColor.syncWith(pOther->_sfAmbientColor);

    if(FieldBits::NoField != (AmbientColorImageFieldMask & whichField))
        _sfAmbientColorImage.syncWith(pOther->_sfAmbientColorImage);

    if(FieldBits::NoField != (IncandescenceFieldMask & whichField))
        _sfIncandescence.syncWith(pOther->_sfIncandescence);

    if(FieldBits::NoField != (IncandescenceImageFieldMask & whichField))
        _sfIncandescenceImage.syncWith(pOther->_sfIncandescenceImage);

    if(FieldBits::NoField != (NormalMapImageFieldMask & whichField))
        _sfNormalMapImage.syncWith(pOther->_sfNormalMapImage);

    if(FieldBits::NoField != (BumpDepthFieldMask & whichField))
        _sfBumpDepth.syncWith(pOther->_sfBumpDepth);

    if(FieldBits::NoField != (BumpDepthImageFieldMask & whichField))
        _sfBumpDepthImage.syncWith(pOther->_sfBumpDepthImage);

    if(FieldBits::NoField != (DiffuseFieldMask & whichField))
        _sfDiffuse.syncWith(pOther->_sfDiffuse);

    if(FieldBits::NoField != (DiffuseImageFieldMask & whichField))
        _sfDiffuseImage.syncWith(pOther->_sfDiffuseImage);

    if(FieldBits::NoField != (TransleucenceFieldMask & whichField))
        _sfTransleucence.syncWith(pOther->_sfTransleucence);

    if(FieldBits::NoField != (TransleucenceImageFieldMask & whichField))
        _sfTransleucenceImage.syncWith(pOther->_sfTransleucenceImage);

    if(FieldBits::NoField != (TransleucenceDepthFieldMask & whichField))
        _sfTransleucenceDepth.syncWith(pOther->_sfTransleucenceDepth);

    if(FieldBits::NoField != (TransleucenceDepthImageFieldMask & whichField))
        _sfTransleucenceDepthImage.syncWith(pOther->_sfTransleucenceDepthImage);

    if(FieldBits::NoField != (TransleucenceFocusFieldMask & whichField))
        _sfTransleucenceFocus.syncWith(pOther->_sfTransleucenceFocus);

    if(FieldBits::NoField != (TransleucenceFocusImageFieldMask & whichField))
        _sfTransleucenceFocusImage.syncWith(pOther->_sfTransleucenceFocusImage);

    if(FieldBits::NoField != (SpecularAngleFieldMask & whichField))
        _sfSpecularAngle.syncWith(pOther->_sfSpecularAngle);

    if(FieldBits::NoField != (SpecularAngleImageFieldMask & whichField))
        _sfSpecularAngleImage.syncWith(pOther->_sfSpecularAngleImage);

    if(FieldBits::NoField != (SpecularSpreadXFieldMask & whichField))
        _sfSpecularSpreadX.syncWith(pOther->_sfSpecularSpreadX);

    if(FieldBits::NoField != (SpecularSpreadXImageFieldMask & whichField))
        _sfSpecularSpreadXImage.syncWith(pOther->_sfSpecularSpreadXImage);

    if(FieldBits::NoField != (SpecularSpreadYFieldMask & whichField))
        _sfSpecularSpreadY.syncWith(pOther->_sfSpecularSpreadY);

    if(FieldBits::NoField != (SpecularSpreadYmageFieldMask & whichField))
        _sfSpecularSpreadYmage.syncWith(pOther->_sfSpecularSpreadYmage);

    if(FieldBits::NoField != (SpecularRoughnessFieldMask & whichField))
        _sfSpecularRoughness.syncWith(pOther->_sfSpecularRoughness);

    if(FieldBits::NoField != (SpecularRoughnessImageFieldMask & whichField))
        _sfSpecularRoughnessImage.syncWith(pOther->_sfSpecularRoughnessImage);

    if(FieldBits::NoField != (SpecularFresnelIndexFieldMask & whichField))
        _sfSpecularFresnelIndex.syncWith(pOther->_sfSpecularFresnelIndex);

    if(FieldBits::NoField != (SpecularFresnelIndexImageFieldMask & whichField))
        _sfSpecularFresnelIndexImage.syncWith(pOther->_sfSpecularFresnelIndexImage);

    if(FieldBits::NoField != (SpecularColorFieldMask & whichField))
        _sfSpecularColor.syncWith(pOther->_sfSpecularColor);

    if(FieldBits::NoField != (SpecularColorImageFieldMask & whichField))
        _sfSpecularColorImage.syncWith(pOther->_sfSpecularColorImage);



}

void AnisotropicMaterialBase::execBeginEditImpl (const BitVector &whichField, 
                                                 UInt32     uiAspect,
                                                 UInt32     uiContainerSize)
{
    Inherited::execBeginEditImpl(whichField, uiAspect, uiContainerSize);

}
#endif



OSG_END_NAMESPACE

#include <OpenSG/OSGSFieldTypeDef.inl>
#include <OpenSG/OSGMFieldTypeDef.inl>

OSG_BEGIN_NAMESPACE

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldDataTraits<AnisotropicMaterialPtr>::_type("AnisotropicMaterialPtr", "ChunkMaterialPtr");
#endif

OSG_DLLEXPORT_SFIELD_DEF1(AnisotropicMaterialPtr, OSG_TOOLBOXLIB_DLLTMPLMAPPING);
OSG_DLLEXPORT_MFIELD_DEF1(AnisotropicMaterialPtr, OSG_TOOLBOXLIB_DLLTMPLMAPPING);


OSG_END_NAMESPACE

