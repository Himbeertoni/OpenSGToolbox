/*---------------------------------------------------------------------------*\
 *                        OpenSG ToolBox Toolbox                             *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                         www.vrac.iastate.edu                              *
 *                                                                           *
 *                          Authors: David Kabala                            *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class AnisotropicMaterial!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#define OSG_COMPILEANISOTROPICMATERIALINST

#include <stdlib.h>
#include <stdio.h>

#include <OpenSG/OSGConfig.h>

#include "OSGAnisotropicMaterialBase.h"
#include "OSGAnisotropicMaterial.h"


OSG_BEGIN_NAMESPACE

const OSG::BitVector  AnisotropicMaterialBase::SpecularAngleFieldMask = 
    (TypeTraits<BitVector>::One << AnisotropicMaterialBase::SpecularAngleFieldId);

const OSG::BitVector  AnisotropicMaterialBase::SpecularAngleTextureFieldMask = 
    (TypeTraits<BitVector>::One << AnisotropicMaterialBase::SpecularAngleTextureFieldId);

const OSG::BitVector  AnisotropicMaterialBase::SpecularSpreadXFieldMask = 
    (TypeTraits<BitVector>::One << AnisotropicMaterialBase::SpecularSpreadXFieldId);

const OSG::BitVector  AnisotropicMaterialBase::SpecularSpreadXTextureFieldMask = 
    (TypeTraits<BitVector>::One << AnisotropicMaterialBase::SpecularSpreadXTextureFieldId);

const OSG::BitVector  AnisotropicMaterialBase::SpecularSpreadYFieldMask = 
    (TypeTraits<BitVector>::One << AnisotropicMaterialBase::SpecularSpreadYFieldId);

const OSG::BitVector  AnisotropicMaterialBase::SpecularSpreadYTextureFieldMask = 
    (TypeTraits<BitVector>::One << AnisotropicMaterialBase::SpecularSpreadYTextureFieldId);

const OSG::BitVector  AnisotropicMaterialBase::SpecularRoughnessFieldMask = 
    (TypeTraits<BitVector>::One << AnisotropicMaterialBase::SpecularRoughnessFieldId);

const OSG::BitVector  AnisotropicMaterialBase::SpecularRoughnessTextureFieldMask = 
    (TypeTraits<BitVector>::One << AnisotropicMaterialBase::SpecularRoughnessTextureFieldId);

const OSG::BitVector  AnisotropicMaterialBase::SpecularFresnelIndexFieldMask = 
    (TypeTraits<BitVector>::One << AnisotropicMaterialBase::SpecularFresnelIndexFieldId);

const OSG::BitVector  AnisotropicMaterialBase::SpecularFresnelIndexTextureFieldMask = 
    (TypeTraits<BitVector>::One << AnisotropicMaterialBase::SpecularFresnelIndexTextureFieldId);

const OSG::BitVector  AnisotropicMaterialBase::SpecularColorFieldMask = 
    (TypeTraits<BitVector>::One << AnisotropicMaterialBase::SpecularColorFieldId);

const OSG::BitVector  AnisotropicMaterialBase::SpecularColorTextureFieldMask = 
    (TypeTraits<BitVector>::One << AnisotropicMaterialBase::SpecularColorTextureFieldId);

const OSG::BitVector AnisotropicMaterialBase::MTInfluenceMask = 
    (Inherited::MTInfluenceMask) | 
    (static_cast<BitVector>(0x0) << Inherited::NextFieldId); 


// Field descriptions

/*! \var Real32          AnisotropicMaterialBase::_sfSpecularAngle
    
*/
/*! \var TextureChunkPtr AnisotropicMaterialBase::_sfSpecularAngleTexture
    
*/
/*! \var Real32          AnisotropicMaterialBase::_sfSpecularSpreadX
    
*/
/*! \var TextureChunkPtr AnisotropicMaterialBase::_sfSpecularSpreadXTexture
    
*/
/*! \var Real32          AnisotropicMaterialBase::_sfSpecularSpreadY
    
*/
/*! \var TextureChunkPtr AnisotropicMaterialBase::_sfSpecularSpreadYTexture
    
*/
/*! \var Real32          AnisotropicMaterialBase::_sfSpecularRoughness
    
*/
/*! \var TextureChunkPtr AnisotropicMaterialBase::_sfSpecularRoughnessTexture
    
*/
/*! \var Real32          AnisotropicMaterialBase::_sfSpecularFresnelIndex
    
*/
/*! \var TextureChunkPtr AnisotropicMaterialBase::_sfSpecularFresnelIndexTexture
    
*/
/*! \var Color3f         AnisotropicMaterialBase::_sfSpecularColor
    
*/
/*! \var TextureChunkPtr AnisotropicMaterialBase::_sfSpecularColorTexture
    
*/

//! AnisotropicMaterial description

FieldDescription *AnisotropicMaterialBase::_desc[] = 
{
    new FieldDescription(SFReal32::getClassType(), 
                     "SpecularAngle", 
                     SpecularAngleFieldId, SpecularAngleFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&AnisotropicMaterialBase::editSFSpecularAngle)),
    new FieldDescription(SFTextureChunkPtr::getClassType(), 
                     "SpecularAngleTexture", 
                     SpecularAngleTextureFieldId, SpecularAngleTextureFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&AnisotropicMaterialBase::editSFSpecularAngleTexture)),
    new FieldDescription(SFReal32::getClassType(), 
                     "SpecularSpreadX", 
                     SpecularSpreadXFieldId, SpecularSpreadXFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&AnisotropicMaterialBase::editSFSpecularSpreadX)),
    new FieldDescription(SFTextureChunkPtr::getClassType(), 
                     "SpecularSpreadXTexture", 
                     SpecularSpreadXTextureFieldId, SpecularSpreadXTextureFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&AnisotropicMaterialBase::editSFSpecularSpreadXTexture)),
    new FieldDescription(SFReal32::getClassType(), 
                     "SpecularSpreadY", 
                     SpecularSpreadYFieldId, SpecularSpreadYFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&AnisotropicMaterialBase::editSFSpecularSpreadY)),
    new FieldDescription(SFTextureChunkPtr::getClassType(), 
                     "SpecularSpreadYTexture", 
                     SpecularSpreadYTextureFieldId, SpecularSpreadYTextureFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&AnisotropicMaterialBase::editSFSpecularSpreadYTexture)),
    new FieldDescription(SFReal32::getClassType(), 
                     "SpecularRoughness", 
                     SpecularRoughnessFieldId, SpecularRoughnessFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&AnisotropicMaterialBase::editSFSpecularRoughness)),
    new FieldDescription(SFTextureChunkPtr::getClassType(), 
                     "SpecularRoughnessTexture", 
                     SpecularRoughnessTextureFieldId, SpecularRoughnessTextureFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&AnisotropicMaterialBase::editSFSpecularRoughnessTexture)),
    new FieldDescription(SFReal32::getClassType(), 
                     "SpecularFresnelIndex", 
                     SpecularFresnelIndexFieldId, SpecularFresnelIndexFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&AnisotropicMaterialBase::editSFSpecularFresnelIndex)),
    new FieldDescription(SFTextureChunkPtr::getClassType(), 
                     "SpecularFresnelIndexTexture", 
                     SpecularFresnelIndexTextureFieldId, SpecularFresnelIndexTextureFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&AnisotropicMaterialBase::editSFSpecularFresnelIndexTexture)),
    new FieldDescription(SFColor3f::getClassType(), 
                     "SpecularColor", 
                     SpecularColorFieldId, SpecularColorFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&AnisotropicMaterialBase::editSFSpecularColor)),
    new FieldDescription(SFTextureChunkPtr::getClassType(), 
                     "SpecularColorTexture", 
                     SpecularColorTextureFieldId, SpecularColorTextureFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&AnisotropicMaterialBase::editSFSpecularColorTexture))
};


FieldContainerType AnisotropicMaterialBase::_type(
    "AnisotropicMaterial",
    "LambertMaterial",
    NULL,
    reinterpret_cast<PrototypeCreateF>(&AnisotropicMaterialBase::createEmpty),
    AnisotropicMaterial::initMethod,
    _desc,
    sizeof(_desc));

//OSG_FIELD_CONTAINER_DEF(AnisotropicMaterialBase, AnisotropicMaterialPtr)

/*------------------------------ get -----------------------------------*/

FieldContainerType &AnisotropicMaterialBase::getType(void) 
{
    return _type; 
} 

const FieldContainerType &AnisotropicMaterialBase::getType(void) const 
{
    return _type;
} 


FieldContainerPtr AnisotropicMaterialBase::shallowCopy(void) const 
{ 
    AnisotropicMaterialPtr returnValue; 

    newPtr(returnValue, dynamic_cast<const AnisotropicMaterial *>(this)); 

    return returnValue; 
}

UInt32 AnisotropicMaterialBase::getContainerSize(void) const 
{ 
    return sizeof(AnisotropicMaterial); 
}


#if !defined(OSG_FIXED_MFIELDSYNC)
void AnisotropicMaterialBase::executeSync(      FieldContainer &other,
                                    const BitVector      &whichField)
{
    this->executeSyncImpl(static_cast<AnisotropicMaterialBase *>(&other),
                          whichField);
}
#else
void AnisotropicMaterialBase::executeSync(      FieldContainer &other,
                                    const BitVector      &whichField,                                    const SyncInfo       &sInfo     )
{
    this->executeSyncImpl((AnisotropicMaterialBase *) &other, whichField, sInfo);
}
void AnisotropicMaterialBase::execBeginEdit(const BitVector &whichField, 
                                            UInt32     uiAspect,
                                            UInt32     uiContainerSize) 
{
    this->execBeginEditImpl(whichField, uiAspect, uiContainerSize);
}

void AnisotropicMaterialBase::onDestroyAspect(UInt32 uiId, UInt32 uiAspect)
{
    Inherited::onDestroyAspect(uiId, uiAspect);

}
#endif

/*------------------------- constructors ----------------------------------*/

#ifdef OSG_WIN32_ICL
#pragma warning (disable : 383)
#endif

AnisotropicMaterialBase::AnisotropicMaterialBase(void) :
    _sfSpecularAngle          (Real32(0.0f)), 
    _sfSpecularAngleTexture   (TextureChunkPtr(NullFC)), 
    _sfSpecularSpreadX        (Real32(4.0f)), 
    _sfSpecularSpreadXTexture (TextureChunkPtr(NullFC)), 
    _sfSpecularSpreadY        (Real32(10.0f)), 
    _sfSpecularSpreadYTexture (TextureChunkPtr(NullFC)), 
    _sfSpecularRoughness      (Real32(0.7f)), 
    _sfSpecularRoughnessTexture(TextureChunkPtr(NullFC)), 
    _sfSpecularFresnelIndex   (Real32(0.7f)), 
    _sfSpecularFresnelIndexTexture(TextureChunkPtr(NullFC)), 
    _sfSpecularColor          (Color3f(1.0f, 1.0f, 1.0f)), 
    _sfSpecularColorTexture   (TextureChunkPtr(NullFC)), 
    Inherited() 
{
}

#ifdef OSG_WIN32_ICL
#pragma warning (default : 383)
#endif

AnisotropicMaterialBase::AnisotropicMaterialBase(const AnisotropicMaterialBase &source) :
    _sfSpecularAngle          (source._sfSpecularAngle          ), 
    _sfSpecularAngleTexture   (source._sfSpecularAngleTexture   ), 
    _sfSpecularSpreadX        (source._sfSpecularSpreadX        ), 
    _sfSpecularSpreadXTexture (source._sfSpecularSpreadXTexture ), 
    _sfSpecularSpreadY        (source._sfSpecularSpreadY        ), 
    _sfSpecularSpreadYTexture (source._sfSpecularSpreadYTexture ), 
    _sfSpecularRoughness      (source._sfSpecularRoughness      ), 
    _sfSpecularRoughnessTexture(source._sfSpecularRoughnessTexture), 
    _sfSpecularFresnelIndex   (source._sfSpecularFresnelIndex   ), 
    _sfSpecularFresnelIndexTexture(source._sfSpecularFresnelIndexTexture), 
    _sfSpecularColor          (source._sfSpecularColor          ), 
    _sfSpecularColorTexture   (source._sfSpecularColorTexture   ), 
    Inherited                 (source)
{
}

/*-------------------------- destructors ----------------------------------*/

AnisotropicMaterialBase::~AnisotropicMaterialBase(void)
{
}

/*------------------------------ access -----------------------------------*/

UInt32 AnisotropicMaterialBase::getBinSize(const BitVector &whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (SpecularAngleFieldMask & whichField))
    {
        returnValue += _sfSpecularAngle.getBinSize();
    }

    if(FieldBits::NoField != (SpecularAngleTextureFieldMask & whichField))
    {
        returnValue += _sfSpecularAngleTexture.getBinSize();
    }

    if(FieldBits::NoField != (SpecularSpreadXFieldMask & whichField))
    {
        returnValue += _sfSpecularSpreadX.getBinSize();
    }

    if(FieldBits::NoField != (SpecularSpreadXTextureFieldMask & whichField))
    {
        returnValue += _sfSpecularSpreadXTexture.getBinSize();
    }

    if(FieldBits::NoField != (SpecularSpreadYFieldMask & whichField))
    {
        returnValue += _sfSpecularSpreadY.getBinSize();
    }

    if(FieldBits::NoField != (SpecularSpreadYTextureFieldMask & whichField))
    {
        returnValue += _sfSpecularSpreadYTexture.getBinSize();
    }

    if(FieldBits::NoField != (SpecularRoughnessFieldMask & whichField))
    {
        returnValue += _sfSpecularRoughness.getBinSize();
    }

    if(FieldBits::NoField != (SpecularRoughnessTextureFieldMask & whichField))
    {
        returnValue += _sfSpecularRoughnessTexture.getBinSize();
    }

    if(FieldBits::NoField != (SpecularFresnelIndexFieldMask & whichField))
    {
        returnValue += _sfSpecularFresnelIndex.getBinSize();
    }

    if(FieldBits::NoField != (SpecularFresnelIndexTextureFieldMask & whichField))
    {
        returnValue += _sfSpecularFresnelIndexTexture.getBinSize();
    }

    if(FieldBits::NoField != (SpecularColorFieldMask & whichField))
    {
        returnValue += _sfSpecularColor.getBinSize();
    }

    if(FieldBits::NoField != (SpecularColorTextureFieldMask & whichField))
    {
        returnValue += _sfSpecularColorTexture.getBinSize();
    }


    return returnValue;
}

void AnisotropicMaterialBase::copyToBin(      BinaryDataHandler &pMem,
                                  const BitVector         &whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (SpecularAngleFieldMask & whichField))
    {
        _sfSpecularAngle.copyToBin(pMem);
    }

    if(FieldBits::NoField != (SpecularAngleTextureFieldMask & whichField))
    {
        _sfSpecularAngleTexture.copyToBin(pMem);
    }

    if(FieldBits::NoField != (SpecularSpreadXFieldMask & whichField))
    {
        _sfSpecularSpreadX.copyToBin(pMem);
    }

    if(FieldBits::NoField != (SpecularSpreadXTextureFieldMask & whichField))
    {
        _sfSpecularSpreadXTexture.copyToBin(pMem);
    }

    if(FieldBits::NoField != (SpecularSpreadYFieldMask & whichField))
    {
        _sfSpecularSpreadY.copyToBin(pMem);
    }

    if(FieldBits::NoField != (SpecularSpreadYTextureFieldMask & whichField))
    {
        _sfSpecularSpreadYTexture.copyToBin(pMem);
    }

    if(FieldBits::NoField != (SpecularRoughnessFieldMask & whichField))
    {
        _sfSpecularRoughness.copyToBin(pMem);
    }

    if(FieldBits::NoField != (SpecularRoughnessTextureFieldMask & whichField))
    {
        _sfSpecularRoughnessTexture.copyToBin(pMem);
    }

    if(FieldBits::NoField != (SpecularFresnelIndexFieldMask & whichField))
    {
        _sfSpecularFresnelIndex.copyToBin(pMem);
    }

    if(FieldBits::NoField != (SpecularFresnelIndexTextureFieldMask & whichField))
    {
        _sfSpecularFresnelIndexTexture.copyToBin(pMem);
    }

    if(FieldBits::NoField != (SpecularColorFieldMask & whichField))
    {
        _sfSpecularColor.copyToBin(pMem);
    }

    if(FieldBits::NoField != (SpecularColorTextureFieldMask & whichField))
    {
        _sfSpecularColorTexture.copyToBin(pMem);
    }


}

void AnisotropicMaterialBase::copyFromBin(      BinaryDataHandler &pMem,
                                    const BitVector    &whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (SpecularAngleFieldMask & whichField))
    {
        _sfSpecularAngle.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (SpecularAngleTextureFieldMask & whichField))
    {
        _sfSpecularAngleTexture.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (SpecularSpreadXFieldMask & whichField))
    {
        _sfSpecularSpreadX.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (SpecularSpreadXTextureFieldMask & whichField))
    {
        _sfSpecularSpreadXTexture.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (SpecularSpreadYFieldMask & whichField))
    {
        _sfSpecularSpreadY.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (SpecularSpreadYTextureFieldMask & whichField))
    {
        _sfSpecularSpreadYTexture.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (SpecularRoughnessFieldMask & whichField))
    {
        _sfSpecularRoughness.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (SpecularRoughnessTextureFieldMask & whichField))
    {
        _sfSpecularRoughnessTexture.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (SpecularFresnelIndexFieldMask & whichField))
    {
        _sfSpecularFresnelIndex.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (SpecularFresnelIndexTextureFieldMask & whichField))
    {
        _sfSpecularFresnelIndexTexture.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (SpecularColorFieldMask & whichField))
    {
        _sfSpecularColor.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (SpecularColorTextureFieldMask & whichField))
    {
        _sfSpecularColorTexture.copyFromBin(pMem);
    }


}

#if !defined(OSG_FIXED_MFIELDSYNC)
void AnisotropicMaterialBase::executeSyncImpl(      AnisotropicMaterialBase *pOther,
                                        const BitVector         &whichField)
{

    Inherited::executeSyncImpl(pOther, whichField);

    if(FieldBits::NoField != (SpecularAngleFieldMask & whichField))
        _sfSpecularAngle.syncWith(pOther->_sfSpecularAngle);

    if(FieldBits::NoField != (SpecularAngleTextureFieldMask & whichField))
        _sfSpecularAngleTexture.syncWith(pOther->_sfSpecularAngleTexture);

    if(FieldBits::NoField != (SpecularSpreadXFieldMask & whichField))
        _sfSpecularSpreadX.syncWith(pOther->_sfSpecularSpreadX);

    if(FieldBits::NoField != (SpecularSpreadXTextureFieldMask & whichField))
        _sfSpecularSpreadXTexture.syncWith(pOther->_sfSpecularSpreadXTexture);

    if(FieldBits::NoField != (SpecularSpreadYFieldMask & whichField))
        _sfSpecularSpreadY.syncWith(pOther->_sfSpecularSpreadY);

    if(FieldBits::NoField != (SpecularSpreadYTextureFieldMask & whichField))
        _sfSpecularSpreadYTexture.syncWith(pOther->_sfSpecularSpreadYTexture);

    if(FieldBits::NoField != (SpecularRoughnessFieldMask & whichField))
        _sfSpecularRoughness.syncWith(pOther->_sfSpecularRoughness);

    if(FieldBits::NoField != (SpecularRoughnessTextureFieldMask & whichField))
        _sfSpecularRoughnessTexture.syncWith(pOther->_sfSpecularRoughnessTexture);

    if(FieldBits::NoField != (SpecularFresnelIndexFieldMask & whichField))
        _sfSpecularFresnelIndex.syncWith(pOther->_sfSpecularFresnelIndex);

    if(FieldBits::NoField != (SpecularFresnelIndexTextureFieldMask & whichField))
        _sfSpecularFresnelIndexTexture.syncWith(pOther->_sfSpecularFresnelIndexTexture);

    if(FieldBits::NoField != (SpecularColorFieldMask & whichField))
        _sfSpecularColor.syncWith(pOther->_sfSpecularColor);

    if(FieldBits::NoField != (SpecularColorTextureFieldMask & whichField))
        _sfSpecularColorTexture.syncWith(pOther->_sfSpecularColorTexture);


}
#else
void AnisotropicMaterialBase::executeSyncImpl(      AnisotropicMaterialBase *pOther,
                                        const BitVector         &whichField,
                                        const SyncInfo          &sInfo      )
{

    Inherited::executeSyncImpl(pOther, whichField, sInfo);

    if(FieldBits::NoField != (SpecularAngleFieldMask & whichField))
        _sfSpecularAngle.syncWith(pOther->_sfSpecularAngle);

    if(FieldBits::NoField != (SpecularAngleTextureFieldMask & whichField))
        _sfSpecularAngleTexture.syncWith(pOther->_sfSpecularAngleTexture);

    if(FieldBits::NoField != (SpecularSpreadXFieldMask & whichField))
        _sfSpecularSpreadX.syncWith(pOther->_sfSpecularSpreadX);

    if(FieldBits::NoField != (SpecularSpreadXTextureFieldMask & whichField))
        _sfSpecularSpreadXTexture.syncWith(pOther->_sfSpecularSpreadXTexture);

    if(FieldBits::NoField != (SpecularSpreadYFieldMask & whichField))
        _sfSpecularSpreadY.syncWith(pOther->_sfSpecularSpreadY);

    if(FieldBits::NoField != (SpecularSpreadYTextureFieldMask & whichField))
        _sfSpecularSpreadYTexture.syncWith(pOther->_sfSpecularSpreadYTexture);

    if(FieldBits::NoField != (SpecularRoughnessFieldMask & whichField))
        _sfSpecularRoughness.syncWith(pOther->_sfSpecularRoughness);

    if(FieldBits::NoField != (SpecularRoughnessTextureFieldMask & whichField))
        _sfSpecularRoughnessTexture.syncWith(pOther->_sfSpecularRoughnessTexture);

    if(FieldBits::NoField != (SpecularFresnelIndexFieldMask & whichField))
        _sfSpecularFresnelIndex.syncWith(pOther->_sfSpecularFresnelIndex);

    if(FieldBits::NoField != (SpecularFresnelIndexTextureFieldMask & whichField))
        _sfSpecularFresnelIndexTexture.syncWith(pOther->_sfSpecularFresnelIndexTexture);

    if(FieldBits::NoField != (SpecularColorFieldMask & whichField))
        _sfSpecularColor.syncWith(pOther->_sfSpecularColor);

    if(FieldBits::NoField != (SpecularColorTextureFieldMask & whichField))
        _sfSpecularColorTexture.syncWith(pOther->_sfSpecularColorTexture);



}

void AnisotropicMaterialBase::execBeginEditImpl (const BitVector &whichField, 
                                                 UInt32     uiAspect,
                                                 UInt32     uiContainerSize)
{
    Inherited::execBeginEditImpl(whichField, uiAspect, uiContainerSize);

}
#endif



OSG_END_NAMESPACE

#include <OpenSG/OSGSFieldTypeDef.inl>
#include <OpenSG/OSGMFieldTypeDef.inl>

OSG_BEGIN_NAMESPACE

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldDataTraits<AnisotropicMaterialPtr>::_type("AnisotropicMaterialPtr", "LambertMaterialPtr");
#endif

OSG_DLLEXPORT_SFIELD_DEF1(AnisotropicMaterialPtr, OSG_TOOLBOXLIB_DLLTMPLMAPPING);
OSG_DLLEXPORT_MFIELD_DEF1(AnisotropicMaterialPtr, OSG_TOOLBOXLIB_DLLTMPLMAPPING);


OSG_END_NAMESPACE

