/*---------------------------------------------------------------------------*\
 *                        OpenSG ToolBox Toolbox                             *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                         www.vrac.iastate.edu                              *
 *                                                                           *
 *                          Authors: David Kabala                            *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class AnisotropicMaterial
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#ifndef _OSGANISOTROPICMATERIALBASE_H_
#define _OSGANISOTROPICMATERIALBASE_H_
#ifdef __sgi
#pragma once
#endif


#include <OpenSG/OSGConfig.h>
#include "OSGToolboxDef.h"

#include <OpenSG/OSGBaseTypes.h>
#include <OpenSG/OSGRefPtr.h>
#include <OpenSG/OSGCoredNodePtr.h>

#include "OSGLambertMaterial.h" // Parent

#include <OpenSG/OSGReal32Fields.h> // SpecularAngle type
#include <OpenSG/OSGTextureChunkFields.h> // SpecularAngleTexture type
#include <OpenSG/OSGReal32Fields.h> // SpecularSpreadX type
#include <OpenSG/OSGTextureChunkFields.h> // SpecularSpreadXTexture type
#include <OpenSG/OSGReal32Fields.h> // SpecularSpreadY type
#include <OpenSG/OSGTextureChunkFields.h> // SpecularSpreadYTexture type
#include <OpenSG/OSGReal32Fields.h> // SpecularRoughness type
#include <OpenSG/OSGTextureChunkFields.h> // SpecularRoughnessTexture type
#include <OpenSG/OSGReal32Fields.h> // SpecularFresnelIndex type
#include <OpenSG/OSGTextureChunkFields.h> // SpecularFresnelIndexTexture type
#include <OpenSG/OSGColor3fFields.h> // SpecularColor type
#include <OpenSG/OSGTextureChunkFields.h> // SpecularColorTexture type

#include "OSGAnisotropicMaterialFields.h"

OSG_BEGIN_NAMESPACE

class AnisotropicMaterial;
class BinaryDataHandler;

//! \brief AnisotropicMaterial Base Class.

class OSG_TOOLBOXLIB_DLLMAPPING AnisotropicMaterialBase : public LambertMaterial
{
  private:

    typedef LambertMaterial    Inherited;

    /*==========================  PUBLIC  =================================*/
  public:

    typedef AnisotropicMaterialPtr  Ptr;

    enum
    {
        SpecularAngleFieldId               = Inherited::NextFieldId,
        SpecularAngleTextureFieldId        = SpecularAngleFieldId               + 1,
        SpecularSpreadXFieldId             = SpecularAngleTextureFieldId        + 1,
        SpecularSpreadXTextureFieldId      = SpecularSpreadXFieldId             + 1,
        SpecularSpreadYFieldId             = SpecularSpreadXTextureFieldId      + 1,
        SpecularSpreadYTextureFieldId      = SpecularSpreadYFieldId             + 1,
        SpecularRoughnessFieldId           = SpecularSpreadYTextureFieldId      + 1,
        SpecularRoughnessTextureFieldId    = SpecularRoughnessFieldId           + 1,
        SpecularFresnelIndexFieldId        = SpecularRoughnessTextureFieldId    + 1,
        SpecularFresnelIndexTextureFieldId = SpecularFresnelIndexFieldId        + 1,
        SpecularColorFieldId               = SpecularFresnelIndexTextureFieldId + 1,
        SpecularColorTextureFieldId        = SpecularColorFieldId               + 1,
        NextFieldId                        = SpecularColorTextureFieldId        + 1
    };

    static const OSG::BitVector SpecularAngleFieldMask;
    static const OSG::BitVector SpecularAngleTextureFieldMask;
    static const OSG::BitVector SpecularSpreadXFieldMask;
    static const OSG::BitVector SpecularSpreadXTextureFieldMask;
    static const OSG::BitVector SpecularSpreadYFieldMask;
    static const OSG::BitVector SpecularSpreadYTextureFieldMask;
    static const OSG::BitVector SpecularRoughnessFieldMask;
    static const OSG::BitVector SpecularRoughnessTextureFieldMask;
    static const OSG::BitVector SpecularFresnelIndexFieldMask;
    static const OSG::BitVector SpecularFresnelIndexTextureFieldMask;
    static const OSG::BitVector SpecularColorFieldMask;
    static const OSG::BitVector SpecularColorTextureFieldMask;


    static const OSG::BitVector MTInfluenceMask;

    /*---------------------------------------------------------------------*/
    /*! \name                    Class Get                                 */
    /*! \{                                                                 */

    static        FieldContainerType &getClassType    (void); 
    static        UInt32              getClassTypeId  (void); 

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                FieldContainer Get                            */
    /*! \{                                                                 */

    virtual       FieldContainerType &getType  (void); 
    virtual const FieldContainerType &getType  (void) const; 

    virtual       UInt32              getContainerSize(void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Get                                 */
    /*! \{                                                                 */


           SFReal32            *editSFSpecularAngle  (void);
     const SFReal32            *getSFSpecularAngle  (void) const;
#ifndef OSG_2_PREP
           SFReal32            *getSFSpecularAngle  (void);
#endif

           SFTextureChunkPtr   *editSFSpecularAngleTexture(void);
     const SFTextureChunkPtr   *getSFSpecularAngleTexture(void) const;
#ifndef OSG_2_PREP
           SFTextureChunkPtr   *getSFSpecularAngleTexture(void);
#endif

           SFReal32            *editSFSpecularSpreadX(void);
     const SFReal32            *getSFSpecularSpreadX(void) const;
#ifndef OSG_2_PREP
           SFReal32            *getSFSpecularSpreadX(void);
#endif

           SFTextureChunkPtr   *editSFSpecularSpreadXTexture(void);
     const SFTextureChunkPtr   *getSFSpecularSpreadXTexture(void) const;
#ifndef OSG_2_PREP
           SFTextureChunkPtr   *getSFSpecularSpreadXTexture(void);
#endif

           SFReal32            *editSFSpecularSpreadY(void);
     const SFReal32            *getSFSpecularSpreadY(void) const;
#ifndef OSG_2_PREP
           SFReal32            *getSFSpecularSpreadY(void);
#endif

           SFTextureChunkPtr   *editSFSpecularSpreadYTexture(void);
     const SFTextureChunkPtr   *getSFSpecularSpreadYTexture(void) const;
#ifndef OSG_2_PREP
           SFTextureChunkPtr   *getSFSpecularSpreadYTexture(void);
#endif

           SFReal32            *editSFSpecularRoughness(void);
     const SFReal32            *getSFSpecularRoughness(void) const;
#ifndef OSG_2_PREP
           SFReal32            *getSFSpecularRoughness(void);
#endif

           SFTextureChunkPtr   *editSFSpecularRoughnessTexture(void);
     const SFTextureChunkPtr   *getSFSpecularRoughnessTexture(void) const;
#ifndef OSG_2_PREP
           SFTextureChunkPtr   *getSFSpecularRoughnessTexture(void);
#endif

           SFReal32            *editSFSpecularFresnelIndex(void);
     const SFReal32            *getSFSpecularFresnelIndex(void) const;
#ifndef OSG_2_PREP
           SFReal32            *getSFSpecularFresnelIndex(void);
#endif

           SFTextureChunkPtr   *editSFSpecularFresnelIndexTexture(void);
     const SFTextureChunkPtr   *getSFSpecularFresnelIndexTexture(void) const;
#ifndef OSG_2_PREP
           SFTextureChunkPtr   *getSFSpecularFresnelIndexTexture(void);
#endif

           SFColor3f           *editSFSpecularColor  (void);
     const SFColor3f           *getSFSpecularColor  (void) const;
#ifndef OSG_2_PREP
           SFColor3f           *getSFSpecularColor  (void);
#endif

           SFTextureChunkPtr   *editSFSpecularColorTexture(void);
     const SFTextureChunkPtr   *getSFSpecularColorTexture(void) const;
#ifndef OSG_2_PREP
           SFTextureChunkPtr   *getSFSpecularColorTexture(void);
#endif


           Real32              &editSpecularAngle  (void);
     const Real32              &getSpecularAngle  (void) const;
#ifndef OSG_2_PREP
           Real32              &getSpecularAngle  (void);
#endif

           TextureChunkPtr     &editSpecularAngleTexture(void);
     const TextureChunkPtr     &getSpecularAngleTexture(void) const;
#ifndef OSG_2_PREP
           TextureChunkPtr     &getSpecularAngleTexture(void);
#endif

           Real32              &editSpecularSpreadX(void);
     const Real32              &getSpecularSpreadX(void) const;
#ifndef OSG_2_PREP
           Real32              &getSpecularSpreadX(void);
#endif

           TextureChunkPtr     &editSpecularSpreadXTexture(void);
     const TextureChunkPtr     &getSpecularSpreadXTexture(void) const;
#ifndef OSG_2_PREP
           TextureChunkPtr     &getSpecularSpreadXTexture(void);
#endif

           Real32              &editSpecularSpreadY(void);
     const Real32              &getSpecularSpreadY(void) const;
#ifndef OSG_2_PREP
           Real32              &getSpecularSpreadY(void);
#endif

           TextureChunkPtr     &editSpecularSpreadYTexture(void);
     const TextureChunkPtr     &getSpecularSpreadYTexture(void) const;
#ifndef OSG_2_PREP
           TextureChunkPtr     &getSpecularSpreadYTexture(void);
#endif

           Real32              &editSpecularRoughness(void);
     const Real32              &getSpecularRoughness(void) const;
#ifndef OSG_2_PREP
           Real32              &getSpecularRoughness(void);
#endif

           TextureChunkPtr     &editSpecularRoughnessTexture(void);
     const TextureChunkPtr     &getSpecularRoughnessTexture(void) const;
#ifndef OSG_2_PREP
           TextureChunkPtr     &getSpecularRoughnessTexture(void);
#endif

           Real32              &editSpecularFresnelIndex(void);
     const Real32              &getSpecularFresnelIndex(void) const;
#ifndef OSG_2_PREP
           Real32              &getSpecularFresnelIndex(void);
#endif

           TextureChunkPtr     &editSpecularFresnelIndexTexture(void);
     const TextureChunkPtr     &getSpecularFresnelIndexTexture(void) const;
#ifndef OSG_2_PREP
           TextureChunkPtr     &getSpecularFresnelIndexTexture(void);
#endif

           Color3f             &editSpecularColor  (void);
     const Color3f             &getSpecularColor  (void) const;
#ifndef OSG_2_PREP
           Color3f             &getSpecularColor  (void);
#endif

           TextureChunkPtr     &editSpecularColorTexture(void);
     const TextureChunkPtr     &getSpecularColorTexture(void) const;
#ifndef OSG_2_PREP
           TextureChunkPtr     &getSpecularColorTexture(void);
#endif

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Set                                 */
    /*! \{                                                                 */

     void setSpecularAngle  ( const Real32 &value );
     void setSpecularAngleTexture( const TextureChunkPtr &value );
     void setSpecularSpreadX( const Real32 &value );
     void setSpecularSpreadXTexture( const TextureChunkPtr &value );
     void setSpecularSpreadY( const Real32 &value );
     void setSpecularSpreadYTexture( const TextureChunkPtr &value );
     void setSpecularRoughness( const Real32 &value );
     void setSpecularRoughnessTexture( const TextureChunkPtr &value );
     void setSpecularFresnelIndex( const Real32 &value );
     void setSpecularFresnelIndexTexture( const TextureChunkPtr &value );
     void setSpecularColor  ( const Color3f &value );
     void setSpecularColorTexture( const TextureChunkPtr &value );

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Binary Access                              */
    /*! \{                                                                 */

    virtual UInt32 getBinSize (const BitVector         &whichField);
    virtual void   copyToBin  (      BinaryDataHandler &pMem,
                               const BitVector         &whichField);
    virtual void   copyFromBin(      BinaryDataHandler &pMem,
                               const BitVector         &whichField);


    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Construction                               */
    /*! \{                                                                 */

    static  AnisotropicMaterialPtr      create          (void); 
    static  AnisotropicMaterialPtr      createEmpty     (void); 

    /*! \}                                                                 */

    /*---------------------------------------------------------------------*/
    /*! \name                       Copy                                   */
    /*! \{                                                                 */

    virtual FieldContainerPtr     shallowCopy     (void) const; 

    /*! \}                                                                 */
    /*=========================  PROTECTED  ===============================*/
  protected:

    /*---------------------------------------------------------------------*/
    /*! \name                      Fields                                  */
    /*! \{                                                                 */

    SFReal32            _sfSpecularAngle;
    SFTextureChunkPtr   _sfSpecularAngleTexture;
    SFReal32            _sfSpecularSpreadX;
    SFTextureChunkPtr   _sfSpecularSpreadXTexture;
    SFReal32            _sfSpecularSpreadY;
    SFTextureChunkPtr   _sfSpecularSpreadYTexture;
    SFReal32            _sfSpecularRoughness;
    SFTextureChunkPtr   _sfSpecularRoughnessTexture;
    SFReal32            _sfSpecularFresnelIndex;
    SFTextureChunkPtr   _sfSpecularFresnelIndexTexture;
    SFColor3f           _sfSpecularColor;
    SFTextureChunkPtr   _sfSpecularColorTexture;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Constructors                               */
    /*! \{                                                                 */

    AnisotropicMaterialBase(void);
    AnisotropicMaterialBase(const AnisotropicMaterialBase &source);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Destructors                                */
    /*! \{                                                                 */

    virtual ~AnisotropicMaterialBase(void); 

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

#if !defined(OSG_FIXED_MFIELDSYNC)
    void executeSyncImpl(      AnisotropicMaterialBase *pOther,
                         const BitVector         &whichField);

    virtual void   executeSync(      FieldContainer    &other,
                               const BitVector         &whichField);
#else
    void executeSyncImpl(      AnisotropicMaterialBase *pOther,
                         const BitVector         &whichField,
                         const SyncInfo          &sInfo     );

    virtual void   executeSync(      FieldContainer    &other,
                               const BitVector         &whichField,
                               const SyncInfo          &sInfo);

    virtual void execBeginEdit     (const BitVector &whichField,
                                          UInt32     uiAspect,
                                          UInt32     uiContainerSize);

            void execBeginEditImpl (const BitVector &whichField,
                                          UInt32     uiAspect,
                                          UInt32     uiContainerSize);

    virtual void onDestroyAspect(UInt32 uiId, UInt32 uiAspect);
#endif

    /*! \}                                                                 */
    /*==========================  PRIVATE  ================================*/
  private:

    friend class FieldContainer;

    static FieldDescription   *_desc[];
    static FieldContainerType  _type;


    // prohibit default functions (move to 'public' if you need one)
    void operator =(const AnisotropicMaterialBase &source);
};

//---------------------------------------------------------------------------
//   Exported Types
//---------------------------------------------------------------------------


typedef AnisotropicMaterialBase *AnisotropicMaterialBaseP;

typedef osgIF<AnisotropicMaterialBase::isNodeCore,
              CoredNodePtr<AnisotropicMaterial>,
              FieldContainer::attempt_to_create_CoredNodePtr_on_non_NodeCore_FC
              >::_IRet AnisotropicMaterialNodePtr;

typedef RefPtr<AnisotropicMaterialPtr> AnisotropicMaterialRefPtr;

OSG_END_NAMESPACE

#endif /* _OSGANISOTROPICMATERIALBASE_H_ */
