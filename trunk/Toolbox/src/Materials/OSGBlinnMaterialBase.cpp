/*---------------------------------------------------------------------------*\
 *                        OpenSG ToolBox Toolbox                             *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                         www.vrac.iastate.edu                              *
 *                                                                           *
 *                          Authors: David Kabala                            *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class BlinnMaterial!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#define OSG_COMPILEBLINNMATERIALINST

#include <stdlib.h>
#include <stdio.h>

#include <OpenSG/OSGConfig.h>

#include "OSGBlinnMaterialBase.h"
#include "OSGBlinnMaterial.h"


OSG_BEGIN_NAMESPACE

const OSG::BitVector  BlinnMaterialBase::SpecularEccentricityFieldMask = 
    (TypeTraits<BitVector>::One << BlinnMaterialBase::SpecularEccentricityFieldId);

const OSG::BitVector  BlinnMaterialBase::SpecularEccentricityTextureFieldMask = 
    (TypeTraits<BitVector>::One << BlinnMaterialBase::SpecularEccentricityTextureFieldId);

const OSG::BitVector  BlinnMaterialBase::SpecularRolloffFieldMask = 
    (TypeTraits<BitVector>::One << BlinnMaterialBase::SpecularRolloffFieldId);

const OSG::BitVector  BlinnMaterialBase::SpecularRolloffTextureFieldMask = 
    (TypeTraits<BitVector>::One << BlinnMaterialBase::SpecularRolloffTextureFieldId);

const OSG::BitVector  BlinnMaterialBase::SpecularColorFieldMask = 
    (TypeTraits<BitVector>::One << BlinnMaterialBase::SpecularColorFieldId);

const OSG::BitVector  BlinnMaterialBase::SpecularColorTextureFieldMask = 
    (TypeTraits<BitVector>::One << BlinnMaterialBase::SpecularColorTextureFieldId);

const OSG::BitVector BlinnMaterialBase::MTInfluenceMask = 
    (Inherited::MTInfluenceMask) | 
    (static_cast<BitVector>(0x0) << Inherited::NextFieldId); 


// Field descriptions

/*! \var Real32          BlinnMaterialBase::_sfSpecularEccentricity
    
*/
/*! \var TextureChunkPtr BlinnMaterialBase::_sfSpecularEccentricityTexture
    
*/
/*! \var Real32          BlinnMaterialBase::_sfSpecularRolloff
    
*/
/*! \var TextureChunkPtr BlinnMaterialBase::_sfSpecularRolloffTexture
    
*/
/*! \var Color3f         BlinnMaterialBase::_sfSpecularColor
    
*/
/*! \var TextureChunkPtr BlinnMaterialBase::_sfSpecularColorTexture
    
*/

//! BlinnMaterial description

FieldDescription *BlinnMaterialBase::_desc[] = 
{
    new FieldDescription(SFReal32::getClassType(), 
                     "SpecularEccentricity", 
                     SpecularEccentricityFieldId, SpecularEccentricityFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&BlinnMaterialBase::editSFSpecularEccentricity)),
    new FieldDescription(SFTextureChunkPtr::getClassType(), 
                     "SpecularEccentricityTexture", 
                     SpecularEccentricityTextureFieldId, SpecularEccentricityTextureFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&BlinnMaterialBase::editSFSpecularEccentricityTexture)),
    new FieldDescription(SFReal32::getClassType(), 
                     "SpecularRolloff", 
                     SpecularRolloffFieldId, SpecularRolloffFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&BlinnMaterialBase::editSFSpecularRolloff)),
    new FieldDescription(SFTextureChunkPtr::getClassType(), 
                     "SpecularRolloffTexture", 
                     SpecularRolloffTextureFieldId, SpecularRolloffTextureFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&BlinnMaterialBase::editSFSpecularRolloffTexture)),
    new FieldDescription(SFColor3f::getClassType(), 
                     "SpecularColor", 
                     SpecularColorFieldId, SpecularColorFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&BlinnMaterialBase::editSFSpecularColor)),
    new FieldDescription(SFTextureChunkPtr::getClassType(), 
                     "SpecularColorTexture", 
                     SpecularColorTextureFieldId, SpecularColorTextureFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&BlinnMaterialBase::editSFSpecularColorTexture))
};


FieldContainerType BlinnMaterialBase::_type(
    "BlinnMaterial",
    "LambertMaterial",
    NULL,
    reinterpret_cast<PrototypeCreateF>(&BlinnMaterialBase::createEmpty),
    BlinnMaterial::initMethod,
    _desc,
    sizeof(_desc));

//OSG_FIELD_CONTAINER_DEF(BlinnMaterialBase, BlinnMaterialPtr)

/*------------------------------ get -----------------------------------*/

FieldContainerType &BlinnMaterialBase::getType(void) 
{
    return _type; 
} 

const FieldContainerType &BlinnMaterialBase::getType(void) const 
{
    return _type;
} 


FieldContainerPtr BlinnMaterialBase::shallowCopy(void) const 
{ 
    BlinnMaterialPtr returnValue; 

    newPtr(returnValue, dynamic_cast<const BlinnMaterial *>(this)); 

    return returnValue; 
}

UInt32 BlinnMaterialBase::getContainerSize(void) const 
{ 
    return sizeof(BlinnMaterial); 
}


#if !defined(OSG_FIXED_MFIELDSYNC)
void BlinnMaterialBase::executeSync(      FieldContainer &other,
                                    const BitVector      &whichField)
{
    this->executeSyncImpl(static_cast<BlinnMaterialBase *>(&other),
                          whichField);
}
#else
void BlinnMaterialBase::executeSync(      FieldContainer &other,
                                    const BitVector      &whichField,                                    const SyncInfo       &sInfo     )
{
    this->executeSyncImpl((BlinnMaterialBase *) &other, whichField, sInfo);
}
void BlinnMaterialBase::execBeginEdit(const BitVector &whichField, 
                                            UInt32     uiAspect,
                                            UInt32     uiContainerSize) 
{
    this->execBeginEditImpl(whichField, uiAspect, uiContainerSize);
}

void BlinnMaterialBase::onDestroyAspect(UInt32 uiId, UInt32 uiAspect)
{
    Inherited::onDestroyAspect(uiId, uiAspect);

}
#endif

/*------------------------- constructors ----------------------------------*/

#ifdef OSG_WIN32_ICL
#pragma warning (disable : 383)
#endif

BlinnMaterialBase::BlinnMaterialBase(void) :
    _sfSpecularEccentricity   (), 
    _sfSpecularEccentricityTexture(TextureChunkPtr(NullFC)), 
    _sfSpecularRolloff        (), 
    _sfSpecularRolloffTexture (TextureChunkPtr(NullFC)), 
    _sfSpecularColor          (), 
    _sfSpecularColorTexture   (TextureChunkPtr(NullFC)), 
    Inherited() 
{
}

#ifdef OSG_WIN32_ICL
#pragma warning (default : 383)
#endif

BlinnMaterialBase::BlinnMaterialBase(const BlinnMaterialBase &source) :
    _sfSpecularEccentricity   (source._sfSpecularEccentricity   ), 
    _sfSpecularEccentricityTexture(source._sfSpecularEccentricityTexture), 
    _sfSpecularRolloff        (source._sfSpecularRolloff        ), 
    _sfSpecularRolloffTexture (source._sfSpecularRolloffTexture ), 
    _sfSpecularColor          (source._sfSpecularColor          ), 
    _sfSpecularColorTexture   (source._sfSpecularColorTexture   ), 
    Inherited                 (source)
{
}

/*-------------------------- destructors ----------------------------------*/

BlinnMaterialBase::~BlinnMaterialBase(void)
{
}

/*------------------------------ access -----------------------------------*/

UInt32 BlinnMaterialBase::getBinSize(const BitVector &whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (SpecularEccentricityFieldMask & whichField))
    {
        returnValue += _sfSpecularEccentricity.getBinSize();
    }

    if(FieldBits::NoField != (SpecularEccentricityTextureFieldMask & whichField))
    {
        returnValue += _sfSpecularEccentricityTexture.getBinSize();
    }

    if(FieldBits::NoField != (SpecularRolloffFieldMask & whichField))
    {
        returnValue += _sfSpecularRolloff.getBinSize();
    }

    if(FieldBits::NoField != (SpecularRolloffTextureFieldMask & whichField))
    {
        returnValue += _sfSpecularRolloffTexture.getBinSize();
    }

    if(FieldBits::NoField != (SpecularColorFieldMask & whichField))
    {
        returnValue += _sfSpecularColor.getBinSize();
    }

    if(FieldBits::NoField != (SpecularColorTextureFieldMask & whichField))
    {
        returnValue += _sfSpecularColorTexture.getBinSize();
    }


    return returnValue;
}

void BlinnMaterialBase::copyToBin(      BinaryDataHandler &pMem,
                                  const BitVector         &whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (SpecularEccentricityFieldMask & whichField))
    {
        _sfSpecularEccentricity.copyToBin(pMem);
    }

    if(FieldBits::NoField != (SpecularEccentricityTextureFieldMask & whichField))
    {
        _sfSpecularEccentricityTexture.copyToBin(pMem);
    }

    if(FieldBits::NoField != (SpecularRolloffFieldMask & whichField))
    {
        _sfSpecularRolloff.copyToBin(pMem);
    }

    if(FieldBits::NoField != (SpecularRolloffTextureFieldMask & whichField))
    {
        _sfSpecularRolloffTexture.copyToBin(pMem);
    }

    if(FieldBits::NoField != (SpecularColorFieldMask & whichField))
    {
        _sfSpecularColor.copyToBin(pMem);
    }

    if(FieldBits::NoField != (SpecularColorTextureFieldMask & whichField))
    {
        _sfSpecularColorTexture.copyToBin(pMem);
    }


}

void BlinnMaterialBase::copyFromBin(      BinaryDataHandler &pMem,
                                    const BitVector    &whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (SpecularEccentricityFieldMask & whichField))
    {
        _sfSpecularEccentricity.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (SpecularEccentricityTextureFieldMask & whichField))
    {
        _sfSpecularEccentricityTexture.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (SpecularRolloffFieldMask & whichField))
    {
        _sfSpecularRolloff.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (SpecularRolloffTextureFieldMask & whichField))
    {
        _sfSpecularRolloffTexture.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (SpecularColorFieldMask & whichField))
    {
        _sfSpecularColor.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (SpecularColorTextureFieldMask & whichField))
    {
        _sfSpecularColorTexture.copyFromBin(pMem);
    }


}

#if !defined(OSG_FIXED_MFIELDSYNC)
void BlinnMaterialBase::executeSyncImpl(      BlinnMaterialBase *pOther,
                                        const BitVector         &whichField)
{

    Inherited::executeSyncImpl(pOther, whichField);

    if(FieldBits::NoField != (SpecularEccentricityFieldMask & whichField))
        _sfSpecularEccentricity.syncWith(pOther->_sfSpecularEccentricity);

    if(FieldBits::NoField != (SpecularEccentricityTextureFieldMask & whichField))
        _sfSpecularEccentricityTexture.syncWith(pOther->_sfSpecularEccentricityTexture);

    if(FieldBits::NoField != (SpecularRolloffFieldMask & whichField))
        _sfSpecularRolloff.syncWith(pOther->_sfSpecularRolloff);

    if(FieldBits::NoField != (SpecularRolloffTextureFieldMask & whichField))
        _sfSpecularRolloffTexture.syncWith(pOther->_sfSpecularRolloffTexture);

    if(FieldBits::NoField != (SpecularColorFieldMask & whichField))
        _sfSpecularColor.syncWith(pOther->_sfSpecularColor);

    if(FieldBits::NoField != (SpecularColorTextureFieldMask & whichField))
        _sfSpecularColorTexture.syncWith(pOther->_sfSpecularColorTexture);


}
#else
void BlinnMaterialBase::executeSyncImpl(      BlinnMaterialBase *pOther,
                                        const BitVector         &whichField,
                                        const SyncInfo          &sInfo      )
{

    Inherited::executeSyncImpl(pOther, whichField, sInfo);

    if(FieldBits::NoField != (SpecularEccentricityFieldMask & whichField))
        _sfSpecularEccentricity.syncWith(pOther->_sfSpecularEccentricity);

    if(FieldBits::NoField != (SpecularEccentricityTextureFieldMask & whichField))
        _sfSpecularEccentricityTexture.syncWith(pOther->_sfSpecularEccentricityTexture);

    if(FieldBits::NoField != (SpecularRolloffFieldMask & whichField))
        _sfSpecularRolloff.syncWith(pOther->_sfSpecularRolloff);

    if(FieldBits::NoField != (SpecularRolloffTextureFieldMask & whichField))
        _sfSpecularRolloffTexture.syncWith(pOther->_sfSpecularRolloffTexture);

    if(FieldBits::NoField != (SpecularColorFieldMask & whichField))
        _sfSpecularColor.syncWith(pOther->_sfSpecularColor);

    if(FieldBits::NoField != (SpecularColorTextureFieldMask & whichField))
        _sfSpecularColorTexture.syncWith(pOther->_sfSpecularColorTexture);



}

void BlinnMaterialBase::execBeginEditImpl (const BitVector &whichField, 
                                                 UInt32     uiAspect,
                                                 UInt32     uiContainerSize)
{
    Inherited::execBeginEditImpl(whichField, uiAspect, uiContainerSize);

}
#endif



OSG_END_NAMESPACE

#include <OpenSG/OSGSFieldTypeDef.inl>
#include <OpenSG/OSGMFieldTypeDef.inl>

OSG_BEGIN_NAMESPACE

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldDataTraits<BlinnMaterialPtr>::_type("BlinnMaterialPtr", "LambertMaterialPtr");
#endif

OSG_DLLEXPORT_SFIELD_DEF1(BlinnMaterialPtr, OSG_TOOLBOXLIB_DLLTMPLMAPPING);
OSG_DLLEXPORT_MFIELD_DEF1(BlinnMaterialPtr, OSG_TOOLBOXLIB_DLLTMPLMAPPING);


OSG_END_NAMESPACE

