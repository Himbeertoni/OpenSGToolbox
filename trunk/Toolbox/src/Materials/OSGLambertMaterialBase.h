/*---------------------------------------------------------------------------*\
 *                        OpenSG ToolBox Toolbox                             *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                         www.vrac.iastate.edu                              *
 *                                                                           *
 *                          Authors: David Kabala                            *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class LambertMaterial
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#ifndef _OSGLAMBERTMATERIALBASE_H_
#define _OSGLAMBERTMATERIALBASE_H_
#ifdef __sgi
#pragma once
#endif


#include <OpenSG/OSGConfig.h>
#include "OSGToolboxDef.h"

#include <OpenSG/OSGBaseTypes.h>
#include <OpenSG/OSGRefPtr.h>
#include <OpenSG/OSGCoredNodePtr.h>

#include <OpenSG/OSGChunkMaterial.h> // Parent

#include <OpenSG/OSGColor3fFields.h> // Color type
#include <OpenSG/OSGImageFields.h> // ColorImage type
#include <OpenSG/OSGColor3fFields.h> // Transparency type
#include <OpenSG/OSGImageFields.h> // TransparencyImage type
#include <OpenSG/OSGColor3fFields.h> // AmbientColor type
#include <OpenSG/OSGImageFields.h> // AmbientColorImage type
#include <OpenSG/OSGColor3fFields.h> // Incandescence type
#include <OpenSG/OSGImageFields.h> // IncandescenceImage type
#include <OpenSG/OSGImageFields.h> // NormalMapImage type
#include <OpenSG/OSGReal32Fields.h> // BumpDepth type
#include <OpenSG/OSGImageFields.h> // BumpDepthImage type
#include <OpenSG/OSGReal32Fields.h> // Diffuse type
#include <OpenSG/OSGImageFields.h> // DiffuseImage type
#include <OpenSG/OSGReal32Fields.h> // Transleucence type
#include <OpenSG/OSGImageFields.h> // TransleucenceImage type
#include <OpenSG/OSGReal32Fields.h> // TransleucenceDepth type
#include <OpenSG/OSGImageFields.h> // TransleucenceDepthImage type
#include <OpenSG/OSGReal32Fields.h> // TransleucenceFocus type
#include <OpenSG/OSGImageFields.h> // TransleucenceFocusImage type

#include "OSGLambertMaterialFields.h"

OSG_BEGIN_NAMESPACE

class LambertMaterial;
class BinaryDataHandler;

//! \brief LambertMaterial Base Class.

class OSG_TOOLBOXLIB_DLLMAPPING LambertMaterialBase : public ChunkMaterial
{
  private:

    typedef ChunkMaterial    Inherited;

    /*==========================  PUBLIC  =================================*/
  public:

    typedef LambertMaterialPtr  Ptr;

    enum
    {
        ColorFieldId                   = Inherited::NextFieldId,
        ColorImageFieldId              = ColorFieldId                   + 1,
        TransparencyFieldId            = ColorImageFieldId              + 1,
        TransparencyImageFieldId       = TransparencyFieldId            + 1,
        AmbientColorFieldId            = TransparencyImageFieldId       + 1,
        AmbientColorImageFieldId       = AmbientColorFieldId            + 1,
        IncandescenceFieldId           = AmbientColorImageFieldId       + 1,
        IncandescenceImageFieldId      = IncandescenceFieldId           + 1,
        NormalMapImageFieldId          = IncandescenceImageFieldId      + 1,
        BumpDepthFieldId               = NormalMapImageFieldId          + 1,
        BumpDepthImageFieldId          = BumpDepthFieldId               + 1,
        DiffuseFieldId                 = BumpDepthImageFieldId          + 1,
        DiffuseImageFieldId            = DiffuseFieldId                 + 1,
        TransleucenceFieldId           = DiffuseImageFieldId            + 1,
        TransleucenceImageFieldId      = TransleucenceFieldId           + 1,
        TransleucenceDepthFieldId      = TransleucenceImageFieldId      + 1,
        TransleucenceDepthImageFieldId = TransleucenceDepthFieldId      + 1,
        TransleucenceFocusFieldId      = TransleucenceDepthImageFieldId + 1,
        TransleucenceFocusImageFieldId = TransleucenceFocusFieldId      + 1,
        NextFieldId                    = TransleucenceFocusImageFieldId + 1
    };

    static const OSG::BitVector ColorFieldMask;
    static const OSG::BitVector ColorImageFieldMask;
    static const OSG::BitVector TransparencyFieldMask;
    static const OSG::BitVector TransparencyImageFieldMask;
    static const OSG::BitVector AmbientColorFieldMask;
    static const OSG::BitVector AmbientColorImageFieldMask;
    static const OSG::BitVector IncandescenceFieldMask;
    static const OSG::BitVector IncandescenceImageFieldMask;
    static const OSG::BitVector NormalMapImageFieldMask;
    static const OSG::BitVector BumpDepthFieldMask;
    static const OSG::BitVector BumpDepthImageFieldMask;
    static const OSG::BitVector DiffuseFieldMask;
    static const OSG::BitVector DiffuseImageFieldMask;
    static const OSG::BitVector TransleucenceFieldMask;
    static const OSG::BitVector TransleucenceImageFieldMask;
    static const OSG::BitVector TransleucenceDepthFieldMask;
    static const OSG::BitVector TransleucenceDepthImageFieldMask;
    static const OSG::BitVector TransleucenceFocusFieldMask;
    static const OSG::BitVector TransleucenceFocusImageFieldMask;


    static const OSG::BitVector MTInfluenceMask;

    /*---------------------------------------------------------------------*/
    /*! \name                    Class Get                                 */
    /*! \{                                                                 */

    static        FieldContainerType &getClassType    (void); 
    static        UInt32              getClassTypeId  (void); 

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                FieldContainer Get                            */
    /*! \{                                                                 */

    virtual       FieldContainerType &getType  (void); 
    virtual const FieldContainerType &getType  (void) const; 

    virtual       UInt32              getContainerSize(void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Get                                 */
    /*! \{                                                                 */


           SFColor3f           *editSFColor          (void);
     const SFColor3f           *getSFColor          (void) const;
#ifndef OSG_2_PREP
           SFColor3f           *getSFColor          (void);
#endif

           SFImagePtr          *editSFColorImage     (void);
     const SFImagePtr          *getSFColorImage     (void) const;
#ifndef OSG_2_PREP
           SFImagePtr          *getSFColorImage     (void);
#endif

           SFColor3f           *editSFTransparency   (void);
     const SFColor3f           *getSFTransparency   (void) const;
#ifndef OSG_2_PREP
           SFColor3f           *getSFTransparency   (void);
#endif

           SFImagePtr          *editSFTransparencyImage(void);
     const SFImagePtr          *getSFTransparencyImage(void) const;
#ifndef OSG_2_PREP
           SFImagePtr          *getSFTransparencyImage(void);
#endif

           SFColor3f           *editSFAmbientColor   (void);
     const SFColor3f           *getSFAmbientColor   (void) const;
#ifndef OSG_2_PREP
           SFColor3f           *getSFAmbientColor   (void);
#endif

           SFImagePtr          *editSFAmbientColorImage(void);
     const SFImagePtr          *getSFAmbientColorImage(void) const;
#ifndef OSG_2_PREP
           SFImagePtr          *getSFAmbientColorImage(void);
#endif

           SFColor3f           *editSFIncandescence  (void);
     const SFColor3f           *getSFIncandescence  (void) const;
#ifndef OSG_2_PREP
           SFColor3f           *getSFIncandescence  (void);
#endif

           SFImagePtr          *editSFIncandescenceImage(void);
     const SFImagePtr          *getSFIncandescenceImage(void) const;
#ifndef OSG_2_PREP
           SFImagePtr          *getSFIncandescenceImage(void);
#endif

           SFImagePtr          *editSFNormalMapImage (void);
     const SFImagePtr          *getSFNormalMapImage (void) const;
#ifndef OSG_2_PREP
           SFImagePtr          *getSFNormalMapImage (void);
#endif

           SFReal32            *editSFBumpDepth      (void);
     const SFReal32            *getSFBumpDepth      (void) const;
#ifndef OSG_2_PREP
           SFReal32            *getSFBumpDepth      (void);
#endif

           SFImagePtr          *editSFBumpDepthImage (void);
     const SFImagePtr          *getSFBumpDepthImage (void) const;
#ifndef OSG_2_PREP
           SFImagePtr          *getSFBumpDepthImage (void);
#endif

           SFReal32            *editSFDiffuse        (void);
     const SFReal32            *getSFDiffuse        (void) const;
#ifndef OSG_2_PREP
           SFReal32            *getSFDiffuse        (void);
#endif

           SFImagePtr          *editSFDiffuseImage   (void);
     const SFImagePtr          *getSFDiffuseImage   (void) const;
#ifndef OSG_2_PREP
           SFImagePtr          *getSFDiffuseImage   (void);
#endif

           SFReal32            *editSFTransleucence  (void);
     const SFReal32            *getSFTransleucence  (void) const;
#ifndef OSG_2_PREP
           SFReal32            *getSFTransleucence  (void);
#endif

           SFImagePtr          *editSFTransleucenceImage(void);
     const SFImagePtr          *getSFTransleucenceImage(void) const;
#ifndef OSG_2_PREP
           SFImagePtr          *getSFTransleucenceImage(void);
#endif

           SFReal32            *editSFTransleucenceDepth(void);
     const SFReal32            *getSFTransleucenceDepth(void) const;
#ifndef OSG_2_PREP
           SFReal32            *getSFTransleucenceDepth(void);
#endif

           SFImagePtr          *editSFTransleucenceDepthImage(void);
     const SFImagePtr          *getSFTransleucenceDepthImage(void) const;
#ifndef OSG_2_PREP
           SFImagePtr          *getSFTransleucenceDepthImage(void);
#endif

           SFReal32            *editSFTransleucenceFocus(void);
     const SFReal32            *getSFTransleucenceFocus(void) const;
#ifndef OSG_2_PREP
           SFReal32            *getSFTransleucenceFocus(void);
#endif

           SFImagePtr          *editSFTransleucenceFocusImage(void);
     const SFImagePtr          *getSFTransleucenceFocusImage(void) const;
#ifndef OSG_2_PREP
           SFImagePtr          *getSFTransleucenceFocusImage(void);
#endif


           Color3f             &editColor          (void);
     const Color3f             &getColor          (void) const;
#ifndef OSG_2_PREP
           Color3f             &getColor          (void);
#endif

           ImagePtr            &editColorImage     (void);
     const ImagePtr            &getColorImage     (void) const;
#ifndef OSG_2_PREP
           ImagePtr            &getColorImage     (void);
#endif

           Color3f             &editTransparency   (void);
     const Color3f             &getTransparency   (void) const;
#ifndef OSG_2_PREP
           Color3f             &getTransparency   (void);
#endif

           ImagePtr            &editTransparencyImage(void);
     const ImagePtr            &getTransparencyImage(void) const;
#ifndef OSG_2_PREP
           ImagePtr            &getTransparencyImage(void);
#endif

           Color3f             &editAmbientColor   (void);
     const Color3f             &getAmbientColor   (void) const;
#ifndef OSG_2_PREP
           Color3f             &getAmbientColor   (void);
#endif

           ImagePtr            &editAmbientColorImage(void);
     const ImagePtr            &getAmbientColorImage(void) const;
#ifndef OSG_2_PREP
           ImagePtr            &getAmbientColorImage(void);
#endif

           Color3f             &editIncandescence  (void);
     const Color3f             &getIncandescence  (void) const;
#ifndef OSG_2_PREP
           Color3f             &getIncandescence  (void);
#endif

           ImagePtr            &editIncandescenceImage(void);
     const ImagePtr            &getIncandescenceImage(void) const;
#ifndef OSG_2_PREP
           ImagePtr            &getIncandescenceImage(void);
#endif

           ImagePtr            &editNormalMapImage (void);
     const ImagePtr            &getNormalMapImage (void) const;
#ifndef OSG_2_PREP
           ImagePtr            &getNormalMapImage (void);
#endif

           Real32              &editBumpDepth      (void);
     const Real32              &getBumpDepth      (void) const;
#ifndef OSG_2_PREP
           Real32              &getBumpDepth      (void);
#endif

           ImagePtr            &editBumpDepthImage (void);
     const ImagePtr            &getBumpDepthImage (void) const;
#ifndef OSG_2_PREP
           ImagePtr            &getBumpDepthImage (void);
#endif

           Real32              &editDiffuse        (void);
     const Real32              &getDiffuse        (void) const;
#ifndef OSG_2_PREP
           Real32              &getDiffuse        (void);
#endif

           ImagePtr            &editDiffuseImage   (void);
     const ImagePtr            &getDiffuseImage   (void) const;
#ifndef OSG_2_PREP
           ImagePtr            &getDiffuseImage   (void);
#endif

           Real32              &editTransleucence  (void);
     const Real32              &getTransleucence  (void) const;
#ifndef OSG_2_PREP
           Real32              &getTransleucence  (void);
#endif

           ImagePtr            &editTransleucenceImage(void);
     const ImagePtr            &getTransleucenceImage(void) const;
#ifndef OSG_2_PREP
           ImagePtr            &getTransleucenceImage(void);
#endif

           Real32              &editTransleucenceDepth(void);
     const Real32              &getTransleucenceDepth(void) const;
#ifndef OSG_2_PREP
           Real32              &getTransleucenceDepth(void);
#endif

           ImagePtr            &editTransleucenceDepthImage(void);
     const ImagePtr            &getTransleucenceDepthImage(void) const;
#ifndef OSG_2_PREP
           ImagePtr            &getTransleucenceDepthImage(void);
#endif

           Real32              &editTransleucenceFocus(void);
     const Real32              &getTransleucenceFocus(void) const;
#ifndef OSG_2_PREP
           Real32              &getTransleucenceFocus(void);
#endif

           ImagePtr            &editTransleucenceFocusImage(void);
     const ImagePtr            &getTransleucenceFocusImage(void) const;
#ifndef OSG_2_PREP
           ImagePtr            &getTransleucenceFocusImage(void);
#endif

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Set                                 */
    /*! \{                                                                 */

     void setColor          ( const Color3f &value );
     void setColorImage     ( const ImagePtr &value );
     void setTransparency   ( const Color3f &value );
     void setTransparencyImage( const ImagePtr &value );
     void setAmbientColor   ( const Color3f &value );
     void setAmbientColorImage( const ImagePtr &value );
     void setIncandescence  ( const Color3f &value );
     void setIncandescenceImage( const ImagePtr &value );
     void setNormalMapImage ( const ImagePtr &value );
     void setBumpDepth      ( const Real32 &value );
     void setBumpDepthImage ( const ImagePtr &value );
     void setDiffuse        ( const Real32 &value );
     void setDiffuseImage   ( const ImagePtr &value );
     void setTransleucence  ( const Real32 &value );
     void setTransleucenceImage( const ImagePtr &value );
     void setTransleucenceDepth( const Real32 &value );
     void setTransleucenceDepthImage( const ImagePtr &value );
     void setTransleucenceFocus( const Real32 &value );
     void setTransleucenceFocusImage( const ImagePtr &value );

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Binary Access                              */
    /*! \{                                                                 */

    virtual UInt32 getBinSize (const BitVector         &whichField);
    virtual void   copyToBin  (      BinaryDataHandler &pMem,
                               const BitVector         &whichField);
    virtual void   copyFromBin(      BinaryDataHandler &pMem,
                               const BitVector         &whichField);


    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Construction                               */
    /*! \{                                                                 */

    static  LambertMaterialPtr      create          (void); 
    static  LambertMaterialPtr      createEmpty     (void); 

    /*! \}                                                                 */

    /*---------------------------------------------------------------------*/
    /*! \name                       Copy                                   */
    /*! \{                                                                 */

    virtual FieldContainerPtr     shallowCopy     (void) const; 

    /*! \}                                                                 */
    /*=========================  PROTECTED  ===============================*/
  protected:

    /*---------------------------------------------------------------------*/
    /*! \name                      Fields                                  */
    /*! \{                                                                 */

    SFColor3f           _sfColor;
    SFImagePtr          _sfColorImage;
    SFColor3f           _sfTransparency;
    SFImagePtr          _sfTransparencyImage;
    SFColor3f           _sfAmbientColor;
    SFImagePtr          _sfAmbientColorImage;
    SFColor3f           _sfIncandescence;
    SFImagePtr          _sfIncandescenceImage;
    SFImagePtr          _sfNormalMapImage;
    SFReal32            _sfBumpDepth;
    SFImagePtr          _sfBumpDepthImage;
    SFReal32            _sfDiffuse;
    SFImagePtr          _sfDiffuseImage;
    SFReal32            _sfTransleucence;
    SFImagePtr          _sfTransleucenceImage;
    SFReal32            _sfTransleucenceDepth;
    SFImagePtr          _sfTransleucenceDepthImage;
    SFReal32            _sfTransleucenceFocus;
    SFImagePtr          _sfTransleucenceFocusImage;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Constructors                               */
    /*! \{                                                                 */

    LambertMaterialBase(void);
    LambertMaterialBase(const LambertMaterialBase &source);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Destructors                                */
    /*! \{                                                                 */

    virtual ~LambertMaterialBase(void); 

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

#if !defined(OSG_FIXED_MFIELDSYNC)
    void executeSyncImpl(      LambertMaterialBase *pOther,
                         const BitVector         &whichField);

    virtual void   executeSync(      FieldContainer    &other,
                               const BitVector         &whichField);
#else
    void executeSyncImpl(      LambertMaterialBase *pOther,
                         const BitVector         &whichField,
                         const SyncInfo          &sInfo     );

    virtual void   executeSync(      FieldContainer    &other,
                               const BitVector         &whichField,
                               const SyncInfo          &sInfo);

    virtual void execBeginEdit     (const BitVector &whichField,
                                          UInt32     uiAspect,
                                          UInt32     uiContainerSize);

            void execBeginEditImpl (const BitVector &whichField,
                                          UInt32     uiAspect,
                                          UInt32     uiContainerSize);

    virtual void onDestroyAspect(UInt32 uiId, UInt32 uiAspect);
#endif

    /*! \}                                                                 */
    /*==========================  PRIVATE  ================================*/
  private:

    friend class FieldContainer;

    static FieldDescription   *_desc[];
    static FieldContainerType  _type;


    // prohibit default functions (move to 'public' if you need one)
    void operator =(const LambertMaterialBase &source);
};

//---------------------------------------------------------------------------
//   Exported Types
//---------------------------------------------------------------------------


typedef LambertMaterialBase *LambertMaterialBaseP;

typedef osgIF<LambertMaterialBase::isNodeCore,
              CoredNodePtr<LambertMaterial>,
              FieldContainer::attempt_to_create_CoredNodePtr_on_non_NodeCore_FC
              >::_IRet LambertMaterialNodePtr;

typedef RefPtr<LambertMaterialPtr> LambertMaterialRefPtr;

OSG_END_NAMESPACE

#endif /* _OSGLAMBERTMATERIALBASE_H_ */
