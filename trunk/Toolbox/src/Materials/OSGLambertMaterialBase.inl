/*---------------------------------------------------------------------------*\
 *                        OpenSG ToolBox Toolbox                             *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                          Authors: David Kabala                            *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class LambertMaterial!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <OpenSG/OSGConfig.h>

OSG_BEGIN_NAMESPACE


//! access the type of the class
inline
OSG::FieldContainerType &LambertMaterialBase::getClassType(void)
{
    return _type; 
} 

//! access the numerical type of the class
inline
OSG::UInt32 LambertMaterialBase::getClassTypeId(void) 
{
    return _type.getId(); 
} 

//! create a new instance of the class
inline
LambertMaterialPtr LambertMaterialBase::create(void) 
{
    LambertMaterialPtr fc; 

    if(getClassType().getPrototype() != OSG::NullFC) 
    {
        fc = LambertMaterialPtr::dcast(
            getClassType().getPrototype()-> shallowCopy()); 
    }
    
    return fc; 
}

//! create an empty new instance of the class, do not copy the prototype
inline
LambertMaterialPtr LambertMaterialBase::createEmpty(void) 
{ 
    LambertMaterialPtr returnValue; 
    
    newPtr(returnValue); 

    return returnValue; 
}


/*------------------------------ get -----------------------------------*/

//! Get the LambertMaterial::_sfParameters field.
inline
const SFSHLParameterChunkPtr *LambertMaterialBase::getSFParameters(void) const
{
    return &_sfParameters;
}

//! Get the LambertMaterial::_sfParameters field.
inline
SFSHLParameterChunkPtr *LambertMaterialBase::editSFParameters(void)
{
    return &_sfParameters;
}

#ifndef OSG_2_PREP
//! Get the LambertMaterial::_sfParameters field.
inline
SFSHLParameterChunkPtr *LambertMaterialBase::getSFParameters(void)
{
    return &_sfParameters;
}
#endif

//! Get the LambertMaterial::_sfShader field.
inline
const SFSHLChunkPtr *LambertMaterialBase::getSFShader(void) const
{
    return &_sfShader;
}

//! Get the LambertMaterial::_sfShader field.
inline
SFSHLChunkPtr *LambertMaterialBase::editSFShader(void)
{
    return &_sfShader;
}

#ifndef OSG_2_PREP
//! Get the LambertMaterial::_sfShader field.
inline
SFSHLChunkPtr *LambertMaterialBase::getSFShader(void)
{
    return &_sfShader;
}
#endif

//! Get the LambertMaterial::_sfNumLights field.
inline
const SFUInt8 *LambertMaterialBase::getSFNumLights(void) const
{
    return &_sfNumLights;
}

//! Get the LambertMaterial::_sfNumLights field.
inline
SFUInt8 *LambertMaterialBase::editSFNumLights(void)
{
    return &_sfNumLights;
}

#ifndef OSG_2_PREP
//! Get the LambertMaterial::_sfNumLights field.
inline
SFUInt8 *LambertMaterialBase::getSFNumLights(void)
{
    return &_sfNumLights;
}
#endif

//! Get the LambertMaterial::_sfColor field.
inline
const SFColor3f *LambertMaterialBase::getSFColor(void) const
{
    return &_sfColor;
}

//! Get the LambertMaterial::_sfColor field.
inline
SFColor3f *LambertMaterialBase::editSFColor(void)
{
    return &_sfColor;
}

#ifndef OSG_2_PREP
//! Get the LambertMaterial::_sfColor field.
inline
SFColor3f *LambertMaterialBase::getSFColor(void)
{
    return &_sfColor;
}
#endif

//! Get the LambertMaterial::_sfColorTexture field.
inline
const SFTextureChunkPtr *LambertMaterialBase::getSFColorTexture(void) const
{
    return &_sfColorTexture;
}

//! Get the LambertMaterial::_sfColorTexture field.
inline
SFTextureChunkPtr *LambertMaterialBase::editSFColorTexture(void)
{
    return &_sfColorTexture;
}

#ifndef OSG_2_PREP
//! Get the LambertMaterial::_sfColorTexture field.
inline
SFTextureChunkPtr *LambertMaterialBase::getSFColorTexture(void)
{
    return &_sfColorTexture;
}
#endif

//! Get the LambertMaterial::_sfTransparency field.
inline
const SFColor3f *LambertMaterialBase::getSFTransparency(void) const
{
    return &_sfTransparency;
}

//! Get the LambertMaterial::_sfTransparency field.
inline
SFColor3f *LambertMaterialBase::editSFTransparency(void)
{
    return &_sfTransparency;
}

#ifndef OSG_2_PREP
//! Get the LambertMaterial::_sfTransparency field.
inline
SFColor3f *LambertMaterialBase::getSFTransparency(void)
{
    return &_sfTransparency;
}
#endif

//! Get the LambertMaterial::_sfTransparencyTexture field.
inline
const SFTextureChunkPtr *LambertMaterialBase::getSFTransparencyTexture(void) const
{
    return &_sfTransparencyTexture;
}

//! Get the LambertMaterial::_sfTransparencyTexture field.
inline
SFTextureChunkPtr *LambertMaterialBase::editSFTransparencyTexture(void)
{
    return &_sfTransparencyTexture;
}

#ifndef OSG_2_PREP
//! Get the LambertMaterial::_sfTransparencyTexture field.
inline
SFTextureChunkPtr *LambertMaterialBase::getSFTransparencyTexture(void)
{
    return &_sfTransparencyTexture;
}
#endif

//! Get the LambertMaterial::_sfAmbientColor field.
inline
const SFColor3f *LambertMaterialBase::getSFAmbientColor(void) const
{
    return &_sfAmbientColor;
}

//! Get the LambertMaterial::_sfAmbientColor field.
inline
SFColor3f *LambertMaterialBase::editSFAmbientColor(void)
{
    return &_sfAmbientColor;
}

#ifndef OSG_2_PREP
//! Get the LambertMaterial::_sfAmbientColor field.
inline
SFColor3f *LambertMaterialBase::getSFAmbientColor(void)
{
    return &_sfAmbientColor;
}
#endif

//! Get the LambertMaterial::_sfAmbientColorTexture field.
inline
const SFTextureChunkPtr *LambertMaterialBase::getSFAmbientColorTexture(void) const
{
    return &_sfAmbientColorTexture;
}

//! Get the LambertMaterial::_sfAmbientColorTexture field.
inline
SFTextureChunkPtr *LambertMaterialBase::editSFAmbientColorTexture(void)
{
    return &_sfAmbientColorTexture;
}

#ifndef OSG_2_PREP
//! Get the LambertMaterial::_sfAmbientColorTexture field.
inline
SFTextureChunkPtr *LambertMaterialBase::getSFAmbientColorTexture(void)
{
    return &_sfAmbientColorTexture;
}
#endif

//! Get the LambertMaterial::_sfIncandescence field.
inline
const SFColor3f *LambertMaterialBase::getSFIncandescence(void) const
{
    return &_sfIncandescence;
}

//! Get the LambertMaterial::_sfIncandescence field.
inline
SFColor3f *LambertMaterialBase::editSFIncandescence(void)
{
    return &_sfIncandescence;
}

#ifndef OSG_2_PREP
//! Get the LambertMaterial::_sfIncandescence field.
inline
SFColor3f *LambertMaterialBase::getSFIncandescence(void)
{
    return &_sfIncandescence;
}
#endif

//! Get the LambertMaterial::_sfIncandescenceTexture field.
inline
const SFTextureChunkPtr *LambertMaterialBase::getSFIncandescenceTexture(void) const
{
    return &_sfIncandescenceTexture;
}

//! Get the LambertMaterial::_sfIncandescenceTexture field.
inline
SFTextureChunkPtr *LambertMaterialBase::editSFIncandescenceTexture(void)
{
    return &_sfIncandescenceTexture;
}

#ifndef OSG_2_PREP
//! Get the LambertMaterial::_sfIncandescenceTexture field.
inline
SFTextureChunkPtr *LambertMaterialBase::getSFIncandescenceTexture(void)
{
    return &_sfIncandescenceTexture;
}
#endif

//! Get the LambertMaterial::_sfNormalMapTexture field.
inline
const SFTextureChunkPtr *LambertMaterialBase::getSFNormalMapTexture(void) const
{
    return &_sfNormalMapTexture;
}

//! Get the LambertMaterial::_sfNormalMapTexture field.
inline
SFTextureChunkPtr *LambertMaterialBase::editSFNormalMapTexture(void)
{
    return &_sfNormalMapTexture;
}

#ifndef OSG_2_PREP
//! Get the LambertMaterial::_sfNormalMapTexture field.
inline
SFTextureChunkPtr *LambertMaterialBase::getSFNormalMapTexture(void)
{
    return &_sfNormalMapTexture;
}
#endif

//! Get the LambertMaterial::_sfBumpDepth field.
inline
const SFReal32 *LambertMaterialBase::getSFBumpDepth(void) const
{
    return &_sfBumpDepth;
}

//! Get the LambertMaterial::_sfBumpDepth field.
inline
SFReal32 *LambertMaterialBase::editSFBumpDepth(void)
{
    return &_sfBumpDepth;
}

#ifndef OSG_2_PREP
//! Get the LambertMaterial::_sfBumpDepth field.
inline
SFReal32 *LambertMaterialBase::getSFBumpDepth(void)
{
    return &_sfBumpDepth;
}
#endif

//! Get the LambertMaterial::_sfBumpDepthTexture field.
inline
const SFTextureChunkPtr *LambertMaterialBase::getSFBumpDepthTexture(void) const
{
    return &_sfBumpDepthTexture;
}

//! Get the LambertMaterial::_sfBumpDepthTexture field.
inline
SFTextureChunkPtr *LambertMaterialBase::editSFBumpDepthTexture(void)
{
    return &_sfBumpDepthTexture;
}

#ifndef OSG_2_PREP
//! Get the LambertMaterial::_sfBumpDepthTexture field.
inline
SFTextureChunkPtr *LambertMaterialBase::getSFBumpDepthTexture(void)
{
    return &_sfBumpDepthTexture;
}
#endif

//! Get the LambertMaterial::_sfDiffuse field.
inline
const SFReal32 *LambertMaterialBase::getSFDiffuse(void) const
{
    return &_sfDiffuse;
}

//! Get the LambertMaterial::_sfDiffuse field.
inline
SFReal32 *LambertMaterialBase::editSFDiffuse(void)
{
    return &_sfDiffuse;
}

#ifndef OSG_2_PREP
//! Get the LambertMaterial::_sfDiffuse field.
inline
SFReal32 *LambertMaterialBase::getSFDiffuse(void)
{
    return &_sfDiffuse;
}
#endif

//! Get the LambertMaterial::_sfDiffuseTexture field.
inline
const SFTextureChunkPtr *LambertMaterialBase::getSFDiffuseTexture(void) const
{
    return &_sfDiffuseTexture;
}

//! Get the LambertMaterial::_sfDiffuseTexture field.
inline
SFTextureChunkPtr *LambertMaterialBase::editSFDiffuseTexture(void)
{
    return &_sfDiffuseTexture;
}

#ifndef OSG_2_PREP
//! Get the LambertMaterial::_sfDiffuseTexture field.
inline
SFTextureChunkPtr *LambertMaterialBase::getSFDiffuseTexture(void)
{
    return &_sfDiffuseTexture;
}
#endif

//! Get the LambertMaterial::_sfTransleucence field.
inline
const SFReal32 *LambertMaterialBase::getSFTransleucence(void) const
{
    return &_sfTransleucence;
}

//! Get the LambertMaterial::_sfTransleucence field.
inline
SFReal32 *LambertMaterialBase::editSFTransleucence(void)
{
    return &_sfTransleucence;
}

#ifndef OSG_2_PREP
//! Get the LambertMaterial::_sfTransleucence field.
inline
SFReal32 *LambertMaterialBase::getSFTransleucence(void)
{
    return &_sfTransleucence;
}
#endif

//! Get the LambertMaterial::_sfTransleucenceTexture field.
inline
const SFTextureChunkPtr *LambertMaterialBase::getSFTransleucenceTexture(void) const
{
    return &_sfTransleucenceTexture;
}

//! Get the LambertMaterial::_sfTransleucenceTexture field.
inline
SFTextureChunkPtr *LambertMaterialBase::editSFTransleucenceTexture(void)
{
    return &_sfTransleucenceTexture;
}

#ifndef OSG_2_PREP
//! Get the LambertMaterial::_sfTransleucenceTexture field.
inline
SFTextureChunkPtr *LambertMaterialBase::getSFTransleucenceTexture(void)
{
    return &_sfTransleucenceTexture;
}
#endif

//! Get the LambertMaterial::_sfTransleucenceDepth field.
inline
const SFReal32 *LambertMaterialBase::getSFTransleucenceDepth(void) const
{
    return &_sfTransleucenceDepth;
}

//! Get the LambertMaterial::_sfTransleucenceDepth field.
inline
SFReal32 *LambertMaterialBase::editSFTransleucenceDepth(void)
{
    return &_sfTransleucenceDepth;
}

#ifndef OSG_2_PREP
//! Get the LambertMaterial::_sfTransleucenceDepth field.
inline
SFReal32 *LambertMaterialBase::getSFTransleucenceDepth(void)
{
    return &_sfTransleucenceDepth;
}
#endif

//! Get the LambertMaterial::_sfTransleucenceDepthTexture field.
inline
const SFTextureChunkPtr *LambertMaterialBase::getSFTransleucenceDepthTexture(void) const
{
    return &_sfTransleucenceDepthTexture;
}

//! Get the LambertMaterial::_sfTransleucenceDepthTexture field.
inline
SFTextureChunkPtr *LambertMaterialBase::editSFTransleucenceDepthTexture(void)
{
    return &_sfTransleucenceDepthTexture;
}

#ifndef OSG_2_PREP
//! Get the LambertMaterial::_sfTransleucenceDepthTexture field.
inline
SFTextureChunkPtr *LambertMaterialBase::getSFTransleucenceDepthTexture(void)
{
    return &_sfTransleucenceDepthTexture;
}
#endif

//! Get the LambertMaterial::_sfTransleucenceFocus field.
inline
const SFReal32 *LambertMaterialBase::getSFTransleucenceFocus(void) const
{
    return &_sfTransleucenceFocus;
}

//! Get the LambertMaterial::_sfTransleucenceFocus field.
inline
SFReal32 *LambertMaterialBase::editSFTransleucenceFocus(void)
{
    return &_sfTransleucenceFocus;
}

#ifndef OSG_2_PREP
//! Get the LambertMaterial::_sfTransleucenceFocus field.
inline
SFReal32 *LambertMaterialBase::getSFTransleucenceFocus(void)
{
    return &_sfTransleucenceFocus;
}
#endif

//! Get the LambertMaterial::_sfTransleucenceFocusTexture field.
inline
const SFTextureChunkPtr *LambertMaterialBase::getSFTransleucenceFocusTexture(void) const
{
    return &_sfTransleucenceFocusTexture;
}

//! Get the LambertMaterial::_sfTransleucenceFocusTexture field.
inline
SFTextureChunkPtr *LambertMaterialBase::editSFTransleucenceFocusTexture(void)
{
    return &_sfTransleucenceFocusTexture;
}

#ifndef OSG_2_PREP
//! Get the LambertMaterial::_sfTransleucenceFocusTexture field.
inline
SFTextureChunkPtr *LambertMaterialBase::getSFTransleucenceFocusTexture(void)
{
    return &_sfTransleucenceFocusTexture;
}
#endif


//! Get the value of the LambertMaterial::_sfParameters field.
inline
SHLParameterChunkPtr &LambertMaterialBase::editParameters(void)
{
    return _sfParameters.getValue();
}

//! Get the value of the LambertMaterial::_sfParameters field.
inline
const SHLParameterChunkPtr &LambertMaterialBase::getParameters(void) const
{
    return _sfParameters.getValue();
}

#ifndef OSG_2_PREP
//! Get the value of the LambertMaterial::_sfParameters field.
inline
SHLParameterChunkPtr &LambertMaterialBase::getParameters(void)
{
    return _sfParameters.getValue();
}
#endif

//! Set the value of the LambertMaterial::_sfParameters field.
inline
void LambertMaterialBase::setParameters(const SHLParameterChunkPtr &value)
{
    _sfParameters.setValue(value);
}

//! Get the value of the LambertMaterial::_sfShader field.
inline
SHLChunkPtr &LambertMaterialBase::editShader(void)
{
    return _sfShader.getValue();
}

//! Get the value of the LambertMaterial::_sfShader field.
inline
const SHLChunkPtr &LambertMaterialBase::getShader(void) const
{
    return _sfShader.getValue();
}

#ifndef OSG_2_PREP
//! Get the value of the LambertMaterial::_sfShader field.
inline
SHLChunkPtr &LambertMaterialBase::getShader(void)
{
    return _sfShader.getValue();
}
#endif

//! Set the value of the LambertMaterial::_sfShader field.
inline
void LambertMaterialBase::setShader(const SHLChunkPtr &value)
{
    _sfShader.setValue(value);
}

//! Get the value of the LambertMaterial::_sfNumLights field.
inline
UInt8 &LambertMaterialBase::editNumLights(void)
{
    return _sfNumLights.getValue();
}

//! Get the value of the LambertMaterial::_sfNumLights field.
inline
const UInt8 &LambertMaterialBase::getNumLights(void) const
{
    return _sfNumLights.getValue();
}

#ifndef OSG_2_PREP
//! Get the value of the LambertMaterial::_sfNumLights field.
inline
UInt8 &LambertMaterialBase::getNumLights(void)
{
    return _sfNumLights.getValue();
}
#endif

//! Set the value of the LambertMaterial::_sfNumLights field.
inline
void LambertMaterialBase::setNumLights(const UInt8 &value)
{
    _sfNumLights.setValue(value);
}

//! Get the value of the LambertMaterial::_sfColor field.
inline
Color3f &LambertMaterialBase::editColor(void)
{
    return _sfColor.getValue();
}

//! Get the value of the LambertMaterial::_sfColor field.
inline
const Color3f &LambertMaterialBase::getColor(void) const
{
    return _sfColor.getValue();
}

#ifndef OSG_2_PREP
//! Get the value of the LambertMaterial::_sfColor field.
inline
Color3f &LambertMaterialBase::getColor(void)
{
    return _sfColor.getValue();
}
#endif

//! Set the value of the LambertMaterial::_sfColor field.
inline
void LambertMaterialBase::setColor(const Color3f &value)
{
    _sfColor.setValue(value);
}

//! Get the value of the LambertMaterial::_sfColorTexture field.
inline
TextureChunkPtr &LambertMaterialBase::editColorTexture(void)
{
    return _sfColorTexture.getValue();
}

//! Get the value of the LambertMaterial::_sfColorTexture field.
inline
const TextureChunkPtr &LambertMaterialBase::getColorTexture(void) const
{
    return _sfColorTexture.getValue();
}

#ifndef OSG_2_PREP
//! Get the value of the LambertMaterial::_sfColorTexture field.
inline
TextureChunkPtr &LambertMaterialBase::getColorTexture(void)
{
    return _sfColorTexture.getValue();
}
#endif

//! Set the value of the LambertMaterial::_sfColorTexture field.
inline
void LambertMaterialBase::setColorTexture(const TextureChunkPtr &value)
{
    _sfColorTexture.setValue(value);
}

//! Get the value of the LambertMaterial::_sfTransparency field.
inline
Color3f &LambertMaterialBase::editTransparency(void)
{
    return _sfTransparency.getValue();
}

//! Get the value of the LambertMaterial::_sfTransparency field.
inline
const Color3f &LambertMaterialBase::getTransparency(void) const
{
    return _sfTransparency.getValue();
}

#ifndef OSG_2_PREP
//! Get the value of the LambertMaterial::_sfTransparency field.
inline
Color3f &LambertMaterialBase::getTransparency(void)
{
    return _sfTransparency.getValue();
}
#endif

//! Set the value of the LambertMaterial::_sfTransparency field.
inline
void LambertMaterialBase::setTransparency(const Color3f &value)
{
    _sfTransparency.setValue(value);
}

//! Get the value of the LambertMaterial::_sfTransparencyTexture field.
inline
TextureChunkPtr &LambertMaterialBase::editTransparencyTexture(void)
{
    return _sfTransparencyTexture.getValue();
}

//! Get the value of the LambertMaterial::_sfTransparencyTexture field.
inline
const TextureChunkPtr &LambertMaterialBase::getTransparencyTexture(void) const
{
    return _sfTransparencyTexture.getValue();
}

#ifndef OSG_2_PREP
//! Get the value of the LambertMaterial::_sfTransparencyTexture field.
inline
TextureChunkPtr &LambertMaterialBase::getTransparencyTexture(void)
{
    return _sfTransparencyTexture.getValue();
}
#endif

//! Set the value of the LambertMaterial::_sfTransparencyTexture field.
inline
void LambertMaterialBase::setTransparencyTexture(const TextureChunkPtr &value)
{
    _sfTransparencyTexture.setValue(value);
}

//! Get the value of the LambertMaterial::_sfAmbientColor field.
inline
Color3f &LambertMaterialBase::editAmbientColor(void)
{
    return _sfAmbientColor.getValue();
}

//! Get the value of the LambertMaterial::_sfAmbientColor field.
inline
const Color3f &LambertMaterialBase::getAmbientColor(void) const
{
    return _sfAmbientColor.getValue();
}

#ifndef OSG_2_PREP
//! Get the value of the LambertMaterial::_sfAmbientColor field.
inline
Color3f &LambertMaterialBase::getAmbientColor(void)
{
    return _sfAmbientColor.getValue();
}
#endif

//! Set the value of the LambertMaterial::_sfAmbientColor field.
inline
void LambertMaterialBase::setAmbientColor(const Color3f &value)
{
    _sfAmbientColor.setValue(value);
}

//! Get the value of the LambertMaterial::_sfAmbientColorTexture field.
inline
TextureChunkPtr &LambertMaterialBase::editAmbientColorTexture(void)
{
    return _sfAmbientColorTexture.getValue();
}

//! Get the value of the LambertMaterial::_sfAmbientColorTexture field.
inline
const TextureChunkPtr &LambertMaterialBase::getAmbientColorTexture(void) const
{
    return _sfAmbientColorTexture.getValue();
}

#ifndef OSG_2_PREP
//! Get the value of the LambertMaterial::_sfAmbientColorTexture field.
inline
TextureChunkPtr &LambertMaterialBase::getAmbientColorTexture(void)
{
    return _sfAmbientColorTexture.getValue();
}
#endif

//! Set the value of the LambertMaterial::_sfAmbientColorTexture field.
inline
void LambertMaterialBase::setAmbientColorTexture(const TextureChunkPtr &value)
{
    _sfAmbientColorTexture.setValue(value);
}

//! Get the value of the LambertMaterial::_sfIncandescence field.
inline
Color3f &LambertMaterialBase::editIncandescence(void)
{
    return _sfIncandescence.getValue();
}

//! Get the value of the LambertMaterial::_sfIncandescence field.
inline
const Color3f &LambertMaterialBase::getIncandescence(void) const
{
    return _sfIncandescence.getValue();
}

#ifndef OSG_2_PREP
//! Get the value of the LambertMaterial::_sfIncandescence field.
inline
Color3f &LambertMaterialBase::getIncandescence(void)
{
    return _sfIncandescence.getValue();
}
#endif

//! Set the value of the LambertMaterial::_sfIncandescence field.
inline
void LambertMaterialBase::setIncandescence(const Color3f &value)
{
    _sfIncandescence.setValue(value);
}

//! Get the value of the LambertMaterial::_sfIncandescenceTexture field.
inline
TextureChunkPtr &LambertMaterialBase::editIncandescenceTexture(void)
{
    return _sfIncandescenceTexture.getValue();
}

//! Get the value of the LambertMaterial::_sfIncandescenceTexture field.
inline
const TextureChunkPtr &LambertMaterialBase::getIncandescenceTexture(void) const
{
    return _sfIncandescenceTexture.getValue();
}

#ifndef OSG_2_PREP
//! Get the value of the LambertMaterial::_sfIncandescenceTexture field.
inline
TextureChunkPtr &LambertMaterialBase::getIncandescenceTexture(void)
{
    return _sfIncandescenceTexture.getValue();
}
#endif

//! Set the value of the LambertMaterial::_sfIncandescenceTexture field.
inline
void LambertMaterialBase::setIncandescenceTexture(const TextureChunkPtr &value)
{
    _sfIncandescenceTexture.setValue(value);
}

//! Get the value of the LambertMaterial::_sfNormalMapTexture field.
inline
TextureChunkPtr &LambertMaterialBase::editNormalMapTexture(void)
{
    return _sfNormalMapTexture.getValue();
}

//! Get the value of the LambertMaterial::_sfNormalMapTexture field.
inline
const TextureChunkPtr &LambertMaterialBase::getNormalMapTexture(void) const
{
    return _sfNormalMapTexture.getValue();
}

#ifndef OSG_2_PREP
//! Get the value of the LambertMaterial::_sfNormalMapTexture field.
inline
TextureChunkPtr &LambertMaterialBase::getNormalMapTexture(void)
{
    return _sfNormalMapTexture.getValue();
}
#endif

//! Set the value of the LambertMaterial::_sfNormalMapTexture field.
inline
void LambertMaterialBase::setNormalMapTexture(const TextureChunkPtr &value)
{
    _sfNormalMapTexture.setValue(value);
}

//! Get the value of the LambertMaterial::_sfBumpDepth field.
inline
Real32 &LambertMaterialBase::editBumpDepth(void)
{
    return _sfBumpDepth.getValue();
}

//! Get the value of the LambertMaterial::_sfBumpDepth field.
inline
const Real32 &LambertMaterialBase::getBumpDepth(void) const
{
    return _sfBumpDepth.getValue();
}

#ifndef OSG_2_PREP
//! Get the value of the LambertMaterial::_sfBumpDepth field.
inline
Real32 &LambertMaterialBase::getBumpDepth(void)
{
    return _sfBumpDepth.getValue();
}
#endif

//! Set the value of the LambertMaterial::_sfBumpDepth field.
inline
void LambertMaterialBase::setBumpDepth(const Real32 &value)
{
    _sfBumpDepth.setValue(value);
}

//! Get the value of the LambertMaterial::_sfBumpDepthTexture field.
inline
TextureChunkPtr &LambertMaterialBase::editBumpDepthTexture(void)
{
    return _sfBumpDepthTexture.getValue();
}

//! Get the value of the LambertMaterial::_sfBumpDepthTexture field.
inline
const TextureChunkPtr &LambertMaterialBase::getBumpDepthTexture(void) const
{
    return _sfBumpDepthTexture.getValue();
}

#ifndef OSG_2_PREP
//! Get the value of the LambertMaterial::_sfBumpDepthTexture field.
inline
TextureChunkPtr &LambertMaterialBase::getBumpDepthTexture(void)
{
    return _sfBumpDepthTexture.getValue();
}
#endif

//! Set the value of the LambertMaterial::_sfBumpDepthTexture field.
inline
void LambertMaterialBase::setBumpDepthTexture(const TextureChunkPtr &value)
{
    _sfBumpDepthTexture.setValue(value);
}

//! Get the value of the LambertMaterial::_sfDiffuse field.
inline
Real32 &LambertMaterialBase::editDiffuse(void)
{
    return _sfDiffuse.getValue();
}

//! Get the value of the LambertMaterial::_sfDiffuse field.
inline
const Real32 &LambertMaterialBase::getDiffuse(void) const
{
    return _sfDiffuse.getValue();
}

#ifndef OSG_2_PREP
//! Get the value of the LambertMaterial::_sfDiffuse field.
inline
Real32 &LambertMaterialBase::getDiffuse(void)
{
    return _sfDiffuse.getValue();
}
#endif

//! Set the value of the LambertMaterial::_sfDiffuse field.
inline
void LambertMaterialBase::setDiffuse(const Real32 &value)
{
    _sfDiffuse.setValue(value);
}

//! Get the value of the LambertMaterial::_sfDiffuseTexture field.
inline
TextureChunkPtr &LambertMaterialBase::editDiffuseTexture(void)
{
    return _sfDiffuseTexture.getValue();
}

//! Get the value of the LambertMaterial::_sfDiffuseTexture field.
inline
const TextureChunkPtr &LambertMaterialBase::getDiffuseTexture(void) const
{
    return _sfDiffuseTexture.getValue();
}

#ifndef OSG_2_PREP
//! Get the value of the LambertMaterial::_sfDiffuseTexture field.
inline
TextureChunkPtr &LambertMaterialBase::getDiffuseTexture(void)
{
    return _sfDiffuseTexture.getValue();
}
#endif

//! Set the value of the LambertMaterial::_sfDiffuseTexture field.
inline
void LambertMaterialBase::setDiffuseTexture(const TextureChunkPtr &value)
{
    _sfDiffuseTexture.setValue(value);
}

//! Get the value of the LambertMaterial::_sfTransleucence field.
inline
Real32 &LambertMaterialBase::editTransleucence(void)
{
    return _sfTransleucence.getValue();
}

//! Get the value of the LambertMaterial::_sfTransleucence field.
inline
const Real32 &LambertMaterialBase::getTransleucence(void) const
{
    return _sfTransleucence.getValue();
}

#ifndef OSG_2_PREP
//! Get the value of the LambertMaterial::_sfTransleucence field.
inline
Real32 &LambertMaterialBase::getTransleucence(void)
{
    return _sfTransleucence.getValue();
}
#endif

//! Set the value of the LambertMaterial::_sfTransleucence field.
inline
void LambertMaterialBase::setTransleucence(const Real32 &value)
{
    _sfTransleucence.setValue(value);
}

//! Get the value of the LambertMaterial::_sfTransleucenceTexture field.
inline
TextureChunkPtr &LambertMaterialBase::editTransleucenceTexture(void)
{
    return _sfTransleucenceTexture.getValue();
}

//! Get the value of the LambertMaterial::_sfTransleucenceTexture field.
inline
const TextureChunkPtr &LambertMaterialBase::getTransleucenceTexture(void) const
{
    return _sfTransleucenceTexture.getValue();
}

#ifndef OSG_2_PREP
//! Get the value of the LambertMaterial::_sfTransleucenceTexture field.
inline
TextureChunkPtr &LambertMaterialBase::getTransleucenceTexture(void)
{
    return _sfTransleucenceTexture.getValue();
}
#endif

//! Set the value of the LambertMaterial::_sfTransleucenceTexture field.
inline
void LambertMaterialBase::setTransleucenceTexture(const TextureChunkPtr &value)
{
    _sfTransleucenceTexture.setValue(value);
}

//! Get the value of the LambertMaterial::_sfTransleucenceDepth field.
inline
Real32 &LambertMaterialBase::editTransleucenceDepth(void)
{
    return _sfTransleucenceDepth.getValue();
}

//! Get the value of the LambertMaterial::_sfTransleucenceDepth field.
inline
const Real32 &LambertMaterialBase::getTransleucenceDepth(void) const
{
    return _sfTransleucenceDepth.getValue();
}

#ifndef OSG_2_PREP
//! Get the value of the LambertMaterial::_sfTransleucenceDepth field.
inline
Real32 &LambertMaterialBase::getTransleucenceDepth(void)
{
    return _sfTransleucenceDepth.getValue();
}
#endif

//! Set the value of the LambertMaterial::_sfTransleucenceDepth field.
inline
void LambertMaterialBase::setTransleucenceDepth(const Real32 &value)
{
    _sfTransleucenceDepth.setValue(value);
}

//! Get the value of the LambertMaterial::_sfTransleucenceDepthTexture field.
inline
TextureChunkPtr &LambertMaterialBase::editTransleucenceDepthTexture(void)
{
    return _sfTransleucenceDepthTexture.getValue();
}

//! Get the value of the LambertMaterial::_sfTransleucenceDepthTexture field.
inline
const TextureChunkPtr &LambertMaterialBase::getTransleucenceDepthTexture(void) const
{
    return _sfTransleucenceDepthTexture.getValue();
}

#ifndef OSG_2_PREP
//! Get the value of the LambertMaterial::_sfTransleucenceDepthTexture field.
inline
TextureChunkPtr &LambertMaterialBase::getTransleucenceDepthTexture(void)
{
    return _sfTransleucenceDepthTexture.getValue();
}
#endif

//! Set the value of the LambertMaterial::_sfTransleucenceDepthTexture field.
inline
void LambertMaterialBase::setTransleucenceDepthTexture(const TextureChunkPtr &value)
{
    _sfTransleucenceDepthTexture.setValue(value);
}

//! Get the value of the LambertMaterial::_sfTransleucenceFocus field.
inline
Real32 &LambertMaterialBase::editTransleucenceFocus(void)
{
    return _sfTransleucenceFocus.getValue();
}

//! Get the value of the LambertMaterial::_sfTransleucenceFocus field.
inline
const Real32 &LambertMaterialBase::getTransleucenceFocus(void) const
{
    return _sfTransleucenceFocus.getValue();
}

#ifndef OSG_2_PREP
//! Get the value of the LambertMaterial::_sfTransleucenceFocus field.
inline
Real32 &LambertMaterialBase::getTransleucenceFocus(void)
{
    return _sfTransleucenceFocus.getValue();
}
#endif

//! Set the value of the LambertMaterial::_sfTransleucenceFocus field.
inline
void LambertMaterialBase::setTransleucenceFocus(const Real32 &value)
{
    _sfTransleucenceFocus.setValue(value);
}

//! Get the value of the LambertMaterial::_sfTransleucenceFocusTexture field.
inline
TextureChunkPtr &LambertMaterialBase::editTransleucenceFocusTexture(void)
{
    return _sfTransleucenceFocusTexture.getValue();
}

//! Get the value of the LambertMaterial::_sfTransleucenceFocusTexture field.
inline
const TextureChunkPtr &LambertMaterialBase::getTransleucenceFocusTexture(void) const
{
    return _sfTransleucenceFocusTexture.getValue();
}

#ifndef OSG_2_PREP
//! Get the value of the LambertMaterial::_sfTransleucenceFocusTexture field.
inline
TextureChunkPtr &LambertMaterialBase::getTransleucenceFocusTexture(void)
{
    return _sfTransleucenceFocusTexture.getValue();
}
#endif

//! Set the value of the LambertMaterial::_sfTransleucenceFocusTexture field.
inline
void LambertMaterialBase::setTransleucenceFocusTexture(const TextureChunkPtr &value)
{
    _sfTransleucenceFocusTexture.setValue(value);
}


OSG_END_NAMESPACE

