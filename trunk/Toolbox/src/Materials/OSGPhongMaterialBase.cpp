/*---------------------------------------------------------------------------*\
 *                        OpenSG ToolBox Toolbox                             *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                         www.vrac.iastate.edu                              *
 *                                                                           *
 *                          Authors: David Kabala                            *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class PhongMaterial!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#define OSG_COMPILEPHONGMATERIALINST

#include <stdlib.h>
#include <stdio.h>

#include <OpenSG/OSGConfig.h>

#include "OSGPhongMaterialBase.h"
#include "OSGPhongMaterial.h"


OSG_BEGIN_NAMESPACE

const OSG::BitVector  PhongMaterialBase::ColorFieldMask = 
    (TypeTraits<BitVector>::One << PhongMaterialBase::ColorFieldId);

const OSG::BitVector  PhongMaterialBase::ColorImageFieldMask = 
    (TypeTraits<BitVector>::One << PhongMaterialBase::ColorImageFieldId);

const OSG::BitVector  PhongMaterialBase::TransparencyFieldMask = 
    (TypeTraits<BitVector>::One << PhongMaterialBase::TransparencyFieldId);

const OSG::BitVector  PhongMaterialBase::TransparencyImageFieldMask = 
    (TypeTraits<BitVector>::One << PhongMaterialBase::TransparencyImageFieldId);

const OSG::BitVector  PhongMaterialBase::AmbientColorFieldMask = 
    (TypeTraits<BitVector>::One << PhongMaterialBase::AmbientColorFieldId);

const OSG::BitVector  PhongMaterialBase::AmbientColorImageFieldMask = 
    (TypeTraits<BitVector>::One << PhongMaterialBase::AmbientColorImageFieldId);

const OSG::BitVector  PhongMaterialBase::IncandescenceFieldMask = 
    (TypeTraits<BitVector>::One << PhongMaterialBase::IncandescenceFieldId);

const OSG::BitVector  PhongMaterialBase::IncandescenceImageFieldMask = 
    (TypeTraits<BitVector>::One << PhongMaterialBase::IncandescenceImageFieldId);

const OSG::BitVector  PhongMaterialBase::NormalMapImageFieldMask = 
    (TypeTraits<BitVector>::One << PhongMaterialBase::NormalMapImageFieldId);

const OSG::BitVector  PhongMaterialBase::BumpDepthFieldMask = 
    (TypeTraits<BitVector>::One << PhongMaterialBase::BumpDepthFieldId);

const OSG::BitVector  PhongMaterialBase::BumpDepthImageFieldMask = 
    (TypeTraits<BitVector>::One << PhongMaterialBase::BumpDepthImageFieldId);

const OSG::BitVector  PhongMaterialBase::DiffuseFieldMask = 
    (TypeTraits<BitVector>::One << PhongMaterialBase::DiffuseFieldId);

const OSG::BitVector  PhongMaterialBase::DiffuseImageFieldMask = 
    (TypeTraits<BitVector>::One << PhongMaterialBase::DiffuseImageFieldId);

const OSG::BitVector  PhongMaterialBase::TransleucenceFieldMask = 
    (TypeTraits<BitVector>::One << PhongMaterialBase::TransleucenceFieldId);

const OSG::BitVector  PhongMaterialBase::TransleucenceImageFieldMask = 
    (TypeTraits<BitVector>::One << PhongMaterialBase::TransleucenceImageFieldId);

const OSG::BitVector  PhongMaterialBase::TransleucenceDepthFieldMask = 
    (TypeTraits<BitVector>::One << PhongMaterialBase::TransleucenceDepthFieldId);

const OSG::BitVector  PhongMaterialBase::TransleucenceDepthImageFieldMask = 
    (TypeTraits<BitVector>::One << PhongMaterialBase::TransleucenceDepthImageFieldId);

const OSG::BitVector  PhongMaterialBase::TransleucenceFocusFieldMask = 
    (TypeTraits<BitVector>::One << PhongMaterialBase::TransleucenceFocusFieldId);

const OSG::BitVector  PhongMaterialBase::TransleucenceFocusImageFieldMask = 
    (TypeTraits<BitVector>::One << PhongMaterialBase::TransleucenceFocusImageFieldId);

const OSG::BitVector  PhongMaterialBase::SpecularCosinePowerFieldMask = 
    (TypeTraits<BitVector>::One << PhongMaterialBase::SpecularCosinePowerFieldId);

const OSG::BitVector  PhongMaterialBase::SpecularCosinePowerImageFieldMask = 
    (TypeTraits<BitVector>::One << PhongMaterialBase::SpecularCosinePowerImageFieldId);

const OSG::BitVector  PhongMaterialBase::SpecularColorFieldMask = 
    (TypeTraits<BitVector>::One << PhongMaterialBase::SpecularColorFieldId);

const OSG::BitVector  PhongMaterialBase::SpecularColorImageFieldMask = 
    (TypeTraits<BitVector>::One << PhongMaterialBase::SpecularColorImageFieldId);

const OSG::BitVector PhongMaterialBase::MTInfluenceMask = 
    (Inherited::MTInfluenceMask) | 
    (static_cast<BitVector>(0x0) << Inherited::NextFieldId); 


// Field descriptions

/*! \var Color3f         PhongMaterialBase::_sfColor
    
*/
/*! \var ImagePtr        PhongMaterialBase::_sfColorImage
    
*/
/*! \var Color3f         PhongMaterialBase::_sfTransparency
    
*/
/*! \var ImagePtr        PhongMaterialBase::_sfTransparencyImage
    
*/
/*! \var Color3f         PhongMaterialBase::_sfAmbientColor
    
*/
/*! \var ImagePtr        PhongMaterialBase::_sfAmbientColorImage
    
*/
/*! \var Color3f         PhongMaterialBase::_sfIncandescence
    
*/
/*! \var ImagePtr        PhongMaterialBase::_sfIncandescenceImage
    
*/
/*! \var ImagePtr        PhongMaterialBase::_sfNormalMapImage
    
*/
/*! \var Real32          PhongMaterialBase::_sfBumpDepth
    
*/
/*! \var ImagePtr        PhongMaterialBase::_sfBumpDepthImage
    
*/
/*! \var Real32          PhongMaterialBase::_sfDiffuse
    
*/
/*! \var ImagePtr        PhongMaterialBase::_sfDiffuseImage
    
*/
/*! \var Real32          PhongMaterialBase::_sfTransleucence
    
*/
/*! \var ImagePtr        PhongMaterialBase::_sfTransleucenceImage
    
*/
/*! \var Real32          PhongMaterialBase::_sfTransleucenceDepth
    
*/
/*! \var ImagePtr        PhongMaterialBase::_sfTransleucenceDepthImage
    
*/
/*! \var Real32          PhongMaterialBase::_sfTransleucenceFocus
    
*/
/*! \var ImagePtr        PhongMaterialBase::_sfTransleucenceFocusImage
    
*/
/*! \var Real32          PhongMaterialBase::_sfSpecularCosinePower
    
*/
/*! \var ImagePtr        PhongMaterialBase::_sfSpecularCosinePowerImage
    
*/
/*! \var Color3f         PhongMaterialBase::_sfSpecularColor
    
*/
/*! \var ImagePtr        PhongMaterialBase::_sfSpecularColorImage
    
*/

//! PhongMaterial description

FieldDescription *PhongMaterialBase::_desc[] = 
{
    new FieldDescription(SFColor3f::getClassType(), 
                     "Color", 
                     ColorFieldId, ColorFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&PhongMaterialBase::editSFColor)),
    new FieldDescription(SFImagePtr::getClassType(), 
                     "ColorImage", 
                     ColorImageFieldId, ColorImageFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&PhongMaterialBase::editSFColorImage)),
    new FieldDescription(SFColor3f::getClassType(), 
                     "Transparency", 
                     TransparencyFieldId, TransparencyFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&PhongMaterialBase::editSFTransparency)),
    new FieldDescription(SFImagePtr::getClassType(), 
                     "TransparencyImage", 
                     TransparencyImageFieldId, TransparencyImageFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&PhongMaterialBase::editSFTransparencyImage)),
    new FieldDescription(SFColor3f::getClassType(), 
                     "AmbientColor", 
                     AmbientColorFieldId, AmbientColorFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&PhongMaterialBase::editSFAmbientColor)),
    new FieldDescription(SFImagePtr::getClassType(), 
                     "AmbientColorImage", 
                     AmbientColorImageFieldId, AmbientColorImageFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&PhongMaterialBase::editSFAmbientColorImage)),
    new FieldDescription(SFColor3f::getClassType(), 
                     "Incandescence", 
                     IncandescenceFieldId, IncandescenceFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&PhongMaterialBase::editSFIncandescence)),
    new FieldDescription(SFImagePtr::getClassType(), 
                     "IncandescenceImage", 
                     IncandescenceImageFieldId, IncandescenceImageFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&PhongMaterialBase::editSFIncandescenceImage)),
    new FieldDescription(SFImagePtr::getClassType(), 
                     "NormalMapImage", 
                     NormalMapImageFieldId, NormalMapImageFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&PhongMaterialBase::editSFNormalMapImage)),
    new FieldDescription(SFReal32::getClassType(), 
                     "BumpDepth", 
                     BumpDepthFieldId, BumpDepthFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&PhongMaterialBase::editSFBumpDepth)),
    new FieldDescription(SFImagePtr::getClassType(), 
                     "BumpDepthImage", 
                     BumpDepthImageFieldId, BumpDepthImageFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&PhongMaterialBase::editSFBumpDepthImage)),
    new FieldDescription(SFReal32::getClassType(), 
                     "Diffuse", 
                     DiffuseFieldId, DiffuseFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&PhongMaterialBase::editSFDiffuse)),
    new FieldDescription(SFImagePtr::getClassType(), 
                     "DiffuseImage", 
                     DiffuseImageFieldId, DiffuseImageFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&PhongMaterialBase::editSFDiffuseImage)),
    new FieldDescription(SFReal32::getClassType(), 
                     "Transleucence", 
                     TransleucenceFieldId, TransleucenceFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&PhongMaterialBase::editSFTransleucence)),
    new FieldDescription(SFImagePtr::getClassType(), 
                     "TransleucenceImage", 
                     TransleucenceImageFieldId, TransleucenceImageFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&PhongMaterialBase::editSFTransleucenceImage)),
    new FieldDescription(SFReal32::getClassType(), 
                     "TransleucenceDepth", 
                     TransleucenceDepthFieldId, TransleucenceDepthFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&PhongMaterialBase::editSFTransleucenceDepth)),
    new FieldDescription(SFImagePtr::getClassType(), 
                     "TransleucenceDepthImage", 
                     TransleucenceDepthImageFieldId, TransleucenceDepthImageFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&PhongMaterialBase::editSFTransleucenceDepthImage)),
    new FieldDescription(SFReal32::getClassType(), 
                     "TransleucenceFocus", 
                     TransleucenceFocusFieldId, TransleucenceFocusFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&PhongMaterialBase::editSFTransleucenceFocus)),
    new FieldDescription(SFImagePtr::getClassType(), 
                     "TransleucenceFocusImage", 
                     TransleucenceFocusImageFieldId, TransleucenceFocusImageFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&PhongMaterialBase::editSFTransleucenceFocusImage)),
    new FieldDescription(SFReal32::getClassType(), 
                     "SpecularCosinePower", 
                     SpecularCosinePowerFieldId, SpecularCosinePowerFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&PhongMaterialBase::editSFSpecularCosinePower)),
    new FieldDescription(SFImagePtr::getClassType(), 
                     "SpecularCosinePowerImage", 
                     SpecularCosinePowerImageFieldId, SpecularCosinePowerImageFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&PhongMaterialBase::editSFSpecularCosinePowerImage)),
    new FieldDescription(SFColor3f::getClassType(), 
                     "SpecularColor", 
                     SpecularColorFieldId, SpecularColorFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&PhongMaterialBase::editSFSpecularColor)),
    new FieldDescription(SFImagePtr::getClassType(), 
                     "SpecularColorImage", 
                     SpecularColorImageFieldId, SpecularColorImageFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&PhongMaterialBase::editSFSpecularColorImage))
};


FieldContainerType PhongMaterialBase::_type(
    "PhongMaterial",
    "ChunkMaterial",
    NULL,
    reinterpret_cast<PrototypeCreateF>(&PhongMaterialBase::createEmpty),
    PhongMaterial::initMethod,
    _desc,
    sizeof(_desc));

//OSG_FIELD_CONTAINER_DEF(PhongMaterialBase, PhongMaterialPtr)

/*------------------------------ get -----------------------------------*/

FieldContainerType &PhongMaterialBase::getType(void) 
{
    return _type; 
} 

const FieldContainerType &PhongMaterialBase::getType(void) const 
{
    return _type;
} 


FieldContainerPtr PhongMaterialBase::shallowCopy(void) const 
{ 
    PhongMaterialPtr returnValue; 

    newPtr(returnValue, dynamic_cast<const PhongMaterial *>(this)); 

    return returnValue; 
}

UInt32 PhongMaterialBase::getContainerSize(void) const 
{ 
    return sizeof(PhongMaterial); 
}


#if !defined(OSG_FIXED_MFIELDSYNC)
void PhongMaterialBase::executeSync(      FieldContainer &other,
                                    const BitVector      &whichField)
{
    this->executeSyncImpl(static_cast<PhongMaterialBase *>(&other),
                          whichField);
}
#else
void PhongMaterialBase::executeSync(      FieldContainer &other,
                                    const BitVector      &whichField,                                    const SyncInfo       &sInfo     )
{
    this->executeSyncImpl((PhongMaterialBase *) &other, whichField, sInfo);
}
void PhongMaterialBase::execBeginEdit(const BitVector &whichField, 
                                            UInt32     uiAspect,
                                            UInt32     uiContainerSize) 
{
    this->execBeginEditImpl(whichField, uiAspect, uiContainerSize);
}

void PhongMaterialBase::onDestroyAspect(UInt32 uiId, UInt32 uiAspect)
{
    Inherited::onDestroyAspect(uiId, uiAspect);

}
#endif

/*------------------------- constructors ----------------------------------*/

#ifdef OSG_WIN32_ICL
#pragma warning (disable : 383)
#endif

PhongMaterialBase::PhongMaterialBase(void) :
    _sfColor                  (), 
    _sfColorImage             (ImagePtr(NullFC)), 
    _sfTransparency           (), 
    _sfTransparencyImage      (ImagePtr(NullFC)), 
    _sfAmbientColor           (), 
    _sfAmbientColorImage      (ImagePtr(NullFC)), 
    _sfIncandescence          (), 
    _sfIncandescenceImage     (ImagePtr(NullFC)), 
    _sfNormalMapImage         (ImagePtr(NullFC)), 
    _sfBumpDepth              (), 
    _sfBumpDepthImage         (ImagePtr(NullFC)), 
    _sfDiffuse                (), 
    _sfDiffuseImage           (ImagePtr(NullFC)), 
    _sfTransleucence          (), 
    _sfTransleucenceImage     (ImagePtr(NullFC)), 
    _sfTransleucenceDepth     (), 
    _sfTransleucenceDepthImage(ImagePtr(NullFC)), 
    _sfTransleucenceFocus     (), 
    _sfTransleucenceFocusImage(ImagePtr(NullFC)), 
    _sfSpecularCosinePower    (), 
    _sfSpecularCosinePowerImage(ImagePtr(NullFC)), 
    _sfSpecularColor          (), 
    _sfSpecularColorImage     (ImagePtr(NullFC)), 
    Inherited() 
{
}

#ifdef OSG_WIN32_ICL
#pragma warning (default : 383)
#endif

PhongMaterialBase::PhongMaterialBase(const PhongMaterialBase &source) :
    _sfColor                  (source._sfColor                  ), 
    _sfColorImage             (source._sfColorImage             ), 
    _sfTransparency           (source._sfTransparency           ), 
    _sfTransparencyImage      (source._sfTransparencyImage      ), 
    _sfAmbientColor           (source._sfAmbientColor           ), 
    _sfAmbientColorImage      (source._sfAmbientColorImage      ), 
    _sfIncandescence          (source._sfIncandescence          ), 
    _sfIncandescenceImage     (source._sfIncandescenceImage     ), 
    _sfNormalMapImage         (source._sfNormalMapImage         ), 
    _sfBumpDepth              (source._sfBumpDepth              ), 
    _sfBumpDepthImage         (source._sfBumpDepthImage         ), 
    _sfDiffuse                (source._sfDiffuse                ), 
    _sfDiffuseImage           (source._sfDiffuseImage           ), 
    _sfTransleucence          (source._sfTransleucence          ), 
    _sfTransleucenceImage     (source._sfTransleucenceImage     ), 
    _sfTransleucenceDepth     (source._sfTransleucenceDepth     ), 
    _sfTransleucenceDepthImage(source._sfTransleucenceDepthImage), 
    _sfTransleucenceFocus     (source._sfTransleucenceFocus     ), 
    _sfTransleucenceFocusImage(source._sfTransleucenceFocusImage), 
    _sfSpecularCosinePower    (source._sfSpecularCosinePower    ), 
    _sfSpecularCosinePowerImage(source._sfSpecularCosinePowerImage), 
    _sfSpecularColor          (source._sfSpecularColor          ), 
    _sfSpecularColorImage     (source._sfSpecularColorImage     ), 
    Inherited                 (source)
{
}

/*-------------------------- destructors ----------------------------------*/

PhongMaterialBase::~PhongMaterialBase(void)
{
}

/*------------------------------ access -----------------------------------*/

UInt32 PhongMaterialBase::getBinSize(const BitVector &whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (ColorFieldMask & whichField))
    {
        returnValue += _sfColor.getBinSize();
    }

    if(FieldBits::NoField != (ColorImageFieldMask & whichField))
    {
        returnValue += _sfColorImage.getBinSize();
    }

    if(FieldBits::NoField != (TransparencyFieldMask & whichField))
    {
        returnValue += _sfTransparency.getBinSize();
    }

    if(FieldBits::NoField != (TransparencyImageFieldMask & whichField))
    {
        returnValue += _sfTransparencyImage.getBinSize();
    }

    if(FieldBits::NoField != (AmbientColorFieldMask & whichField))
    {
        returnValue += _sfAmbientColor.getBinSize();
    }

    if(FieldBits::NoField != (AmbientColorImageFieldMask & whichField))
    {
        returnValue += _sfAmbientColorImage.getBinSize();
    }

    if(FieldBits::NoField != (IncandescenceFieldMask & whichField))
    {
        returnValue += _sfIncandescence.getBinSize();
    }

    if(FieldBits::NoField != (IncandescenceImageFieldMask & whichField))
    {
        returnValue += _sfIncandescenceImage.getBinSize();
    }

    if(FieldBits::NoField != (NormalMapImageFieldMask & whichField))
    {
        returnValue += _sfNormalMapImage.getBinSize();
    }

    if(FieldBits::NoField != (BumpDepthFieldMask & whichField))
    {
        returnValue += _sfBumpDepth.getBinSize();
    }

    if(FieldBits::NoField != (BumpDepthImageFieldMask & whichField))
    {
        returnValue += _sfBumpDepthImage.getBinSize();
    }

    if(FieldBits::NoField != (DiffuseFieldMask & whichField))
    {
        returnValue += _sfDiffuse.getBinSize();
    }

    if(FieldBits::NoField != (DiffuseImageFieldMask & whichField))
    {
        returnValue += _sfDiffuseImage.getBinSize();
    }

    if(FieldBits::NoField != (TransleucenceFieldMask & whichField))
    {
        returnValue += _sfTransleucence.getBinSize();
    }

    if(FieldBits::NoField != (TransleucenceImageFieldMask & whichField))
    {
        returnValue += _sfTransleucenceImage.getBinSize();
    }

    if(FieldBits::NoField != (TransleucenceDepthFieldMask & whichField))
    {
        returnValue += _sfTransleucenceDepth.getBinSize();
    }

    if(FieldBits::NoField != (TransleucenceDepthImageFieldMask & whichField))
    {
        returnValue += _sfTransleucenceDepthImage.getBinSize();
    }

    if(FieldBits::NoField != (TransleucenceFocusFieldMask & whichField))
    {
        returnValue += _sfTransleucenceFocus.getBinSize();
    }

    if(FieldBits::NoField != (TransleucenceFocusImageFieldMask & whichField))
    {
        returnValue += _sfTransleucenceFocusImage.getBinSize();
    }

    if(FieldBits::NoField != (SpecularCosinePowerFieldMask & whichField))
    {
        returnValue += _sfSpecularCosinePower.getBinSize();
    }

    if(FieldBits::NoField != (SpecularCosinePowerImageFieldMask & whichField))
    {
        returnValue += _sfSpecularCosinePowerImage.getBinSize();
    }

    if(FieldBits::NoField != (SpecularColorFieldMask & whichField))
    {
        returnValue += _sfSpecularColor.getBinSize();
    }

    if(FieldBits::NoField != (SpecularColorImageFieldMask & whichField))
    {
        returnValue += _sfSpecularColorImage.getBinSize();
    }


    return returnValue;
}

void PhongMaterialBase::copyToBin(      BinaryDataHandler &pMem,
                                  const BitVector         &whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (ColorFieldMask & whichField))
    {
        _sfColor.copyToBin(pMem);
    }

    if(FieldBits::NoField != (ColorImageFieldMask & whichField))
    {
        _sfColorImage.copyToBin(pMem);
    }

    if(FieldBits::NoField != (TransparencyFieldMask & whichField))
    {
        _sfTransparency.copyToBin(pMem);
    }

    if(FieldBits::NoField != (TransparencyImageFieldMask & whichField))
    {
        _sfTransparencyImage.copyToBin(pMem);
    }

    if(FieldBits::NoField != (AmbientColorFieldMask & whichField))
    {
        _sfAmbientColor.copyToBin(pMem);
    }

    if(FieldBits::NoField != (AmbientColorImageFieldMask & whichField))
    {
        _sfAmbientColorImage.copyToBin(pMem);
    }

    if(FieldBits::NoField != (IncandescenceFieldMask & whichField))
    {
        _sfIncandescence.copyToBin(pMem);
    }

    if(FieldBits::NoField != (IncandescenceImageFieldMask & whichField))
    {
        _sfIncandescenceImage.copyToBin(pMem);
    }

    if(FieldBits::NoField != (NormalMapImageFieldMask & whichField))
    {
        _sfNormalMapImage.copyToBin(pMem);
    }

    if(FieldBits::NoField != (BumpDepthFieldMask & whichField))
    {
        _sfBumpDepth.copyToBin(pMem);
    }

    if(FieldBits::NoField != (BumpDepthImageFieldMask & whichField))
    {
        _sfBumpDepthImage.copyToBin(pMem);
    }

    if(FieldBits::NoField != (DiffuseFieldMask & whichField))
    {
        _sfDiffuse.copyToBin(pMem);
    }

    if(FieldBits::NoField != (DiffuseImageFieldMask & whichField))
    {
        _sfDiffuseImage.copyToBin(pMem);
    }

    if(FieldBits::NoField != (TransleucenceFieldMask & whichField))
    {
        _sfTransleucence.copyToBin(pMem);
    }

    if(FieldBits::NoField != (TransleucenceImageFieldMask & whichField))
    {
        _sfTransleucenceImage.copyToBin(pMem);
    }

    if(FieldBits::NoField != (TransleucenceDepthFieldMask & whichField))
    {
        _sfTransleucenceDepth.copyToBin(pMem);
    }

    if(FieldBits::NoField != (TransleucenceDepthImageFieldMask & whichField))
    {
        _sfTransleucenceDepthImage.copyToBin(pMem);
    }

    if(FieldBits::NoField != (TransleucenceFocusFieldMask & whichField))
    {
        _sfTransleucenceFocus.copyToBin(pMem);
    }

    if(FieldBits::NoField != (TransleucenceFocusImageFieldMask & whichField))
    {
        _sfTransleucenceFocusImage.copyToBin(pMem);
    }

    if(FieldBits::NoField != (SpecularCosinePowerFieldMask & whichField))
    {
        _sfSpecularCosinePower.copyToBin(pMem);
    }

    if(FieldBits::NoField != (SpecularCosinePowerImageFieldMask & whichField))
    {
        _sfSpecularCosinePowerImage.copyToBin(pMem);
    }

    if(FieldBits::NoField != (SpecularColorFieldMask & whichField))
    {
        _sfSpecularColor.copyToBin(pMem);
    }

    if(FieldBits::NoField != (SpecularColorImageFieldMask & whichField))
    {
        _sfSpecularColorImage.copyToBin(pMem);
    }


}

void PhongMaterialBase::copyFromBin(      BinaryDataHandler &pMem,
                                    const BitVector    &whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (ColorFieldMask & whichField))
    {
        _sfColor.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (ColorImageFieldMask & whichField))
    {
        _sfColorImage.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (TransparencyFieldMask & whichField))
    {
        _sfTransparency.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (TransparencyImageFieldMask & whichField))
    {
        _sfTransparencyImage.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (AmbientColorFieldMask & whichField))
    {
        _sfAmbientColor.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (AmbientColorImageFieldMask & whichField))
    {
        _sfAmbientColorImage.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (IncandescenceFieldMask & whichField))
    {
        _sfIncandescence.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (IncandescenceImageFieldMask & whichField))
    {
        _sfIncandescenceImage.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (NormalMapImageFieldMask & whichField))
    {
        _sfNormalMapImage.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (BumpDepthFieldMask & whichField))
    {
        _sfBumpDepth.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (BumpDepthImageFieldMask & whichField))
    {
        _sfBumpDepthImage.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (DiffuseFieldMask & whichField))
    {
        _sfDiffuse.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (DiffuseImageFieldMask & whichField))
    {
        _sfDiffuseImage.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (TransleucenceFieldMask & whichField))
    {
        _sfTransleucence.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (TransleucenceImageFieldMask & whichField))
    {
        _sfTransleucenceImage.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (TransleucenceDepthFieldMask & whichField))
    {
        _sfTransleucenceDepth.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (TransleucenceDepthImageFieldMask & whichField))
    {
        _sfTransleucenceDepthImage.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (TransleucenceFocusFieldMask & whichField))
    {
        _sfTransleucenceFocus.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (TransleucenceFocusImageFieldMask & whichField))
    {
        _sfTransleucenceFocusImage.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (SpecularCosinePowerFieldMask & whichField))
    {
        _sfSpecularCosinePower.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (SpecularCosinePowerImageFieldMask & whichField))
    {
        _sfSpecularCosinePowerImage.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (SpecularColorFieldMask & whichField))
    {
        _sfSpecularColor.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (SpecularColorImageFieldMask & whichField))
    {
        _sfSpecularColorImage.copyFromBin(pMem);
    }


}

#if !defined(OSG_FIXED_MFIELDSYNC)
void PhongMaterialBase::executeSyncImpl(      PhongMaterialBase *pOther,
                                        const BitVector         &whichField)
{

    Inherited::executeSyncImpl(pOther, whichField);

    if(FieldBits::NoField != (ColorFieldMask & whichField))
        _sfColor.syncWith(pOther->_sfColor);

    if(FieldBits::NoField != (ColorImageFieldMask & whichField))
        _sfColorImage.syncWith(pOther->_sfColorImage);

    if(FieldBits::NoField != (TransparencyFieldMask & whichField))
        _sfTransparency.syncWith(pOther->_sfTransparency);

    if(FieldBits::NoField != (TransparencyImageFieldMask & whichField))
        _sfTransparencyImage.syncWith(pOther->_sfTransparencyImage);

    if(FieldBits::NoField != (AmbientColorFieldMask & whichField))
        _sfAmbientColor.syncWith(pOther->_sfAmbientColor);

    if(FieldBits::NoField != (AmbientColorImageFieldMask & whichField))
        _sfAmbientColorImage.syncWith(pOther->_sfAmbientColorImage);

    if(FieldBits::NoField != (IncandescenceFieldMask & whichField))
        _sfIncandescence.syncWith(pOther->_sfIncandescence);

    if(FieldBits::NoField != (IncandescenceImageFieldMask & whichField))
        _sfIncandescenceImage.syncWith(pOther->_sfIncandescenceImage);

    if(FieldBits::NoField != (NormalMapImageFieldMask & whichField))
        _sfNormalMapImage.syncWith(pOther->_sfNormalMapImage);

    if(FieldBits::NoField != (BumpDepthFieldMask & whichField))
        _sfBumpDepth.syncWith(pOther->_sfBumpDepth);

    if(FieldBits::NoField != (BumpDepthImageFieldMask & whichField))
        _sfBumpDepthImage.syncWith(pOther->_sfBumpDepthImage);

    if(FieldBits::NoField != (DiffuseFieldMask & whichField))
        _sfDiffuse.syncWith(pOther->_sfDiffuse);

    if(FieldBits::NoField != (DiffuseImageFieldMask & whichField))
        _sfDiffuseImage.syncWith(pOther->_sfDiffuseImage);

    if(FieldBits::NoField != (TransleucenceFieldMask & whichField))
        _sfTransleucence.syncWith(pOther->_sfTransleucence);

    if(FieldBits::NoField != (TransleucenceImageFieldMask & whichField))
        _sfTransleucenceImage.syncWith(pOther->_sfTransleucenceImage);

    if(FieldBits::NoField != (TransleucenceDepthFieldMask & whichField))
        _sfTransleucenceDepth.syncWith(pOther->_sfTransleucenceDepth);

    if(FieldBits::NoField != (TransleucenceDepthImageFieldMask & whichField))
        _sfTransleucenceDepthImage.syncWith(pOther->_sfTransleucenceDepthImage);

    if(FieldBits::NoField != (TransleucenceFocusFieldMask & whichField))
        _sfTransleucenceFocus.syncWith(pOther->_sfTransleucenceFocus);

    if(FieldBits::NoField != (TransleucenceFocusImageFieldMask & whichField))
        _sfTransleucenceFocusImage.syncWith(pOther->_sfTransleucenceFocusImage);

    if(FieldBits::NoField != (SpecularCosinePowerFieldMask & whichField))
        _sfSpecularCosinePower.syncWith(pOther->_sfSpecularCosinePower);

    if(FieldBits::NoField != (SpecularCosinePowerImageFieldMask & whichField))
        _sfSpecularCosinePowerImage.syncWith(pOther->_sfSpecularCosinePowerImage);

    if(FieldBits::NoField != (SpecularColorFieldMask & whichField))
        _sfSpecularColor.syncWith(pOther->_sfSpecularColor);

    if(FieldBits::NoField != (SpecularColorImageFieldMask & whichField))
        _sfSpecularColorImage.syncWith(pOther->_sfSpecularColorImage);


}
#else
void PhongMaterialBase::executeSyncImpl(      PhongMaterialBase *pOther,
                                        const BitVector         &whichField,
                                        const SyncInfo          &sInfo      )
{

    Inherited::executeSyncImpl(pOther, whichField, sInfo);

    if(FieldBits::NoField != (ColorFieldMask & whichField))
        _sfColor.syncWith(pOther->_sfColor);

    if(FieldBits::NoField != (ColorImageFieldMask & whichField))
        _sfColorImage.syncWith(pOther->_sfColorImage);

    if(FieldBits::NoField != (TransparencyFieldMask & whichField))
        _sfTransparency.syncWith(pOther->_sfTransparency);

    if(FieldBits::NoField != (TransparencyImageFieldMask & whichField))
        _sfTransparencyImage.syncWith(pOther->_sfTransparencyImage);

    if(FieldBits::NoField != (AmbientColorFieldMask & whichField))
        _sfAmbientColor.syncWith(pOther->_sfAmbientColor);

    if(FieldBits::NoField != (AmbientColorImageFieldMask & whichField))
        _sfAmbientColorImage.syncWith(pOther->_sfAmbientColorImage);

    if(FieldBits::NoField != (IncandescenceFieldMask & whichField))
        _sfIncandescence.syncWith(pOther->_sfIncandescence);

    if(FieldBits::NoField != (IncandescenceImageFieldMask & whichField))
        _sfIncandescenceImage.syncWith(pOther->_sfIncandescenceImage);

    if(FieldBits::NoField != (NormalMapImageFieldMask & whichField))
        _sfNormalMapImage.syncWith(pOther->_sfNormalMapImage);

    if(FieldBits::NoField != (BumpDepthFieldMask & whichField))
        _sfBumpDepth.syncWith(pOther->_sfBumpDepth);

    if(FieldBits::NoField != (BumpDepthImageFieldMask & whichField))
        _sfBumpDepthImage.syncWith(pOther->_sfBumpDepthImage);

    if(FieldBits::NoField != (DiffuseFieldMask & whichField))
        _sfDiffuse.syncWith(pOther->_sfDiffuse);

    if(FieldBits::NoField != (DiffuseImageFieldMask & whichField))
        _sfDiffuseImage.syncWith(pOther->_sfDiffuseImage);

    if(FieldBits::NoField != (TransleucenceFieldMask & whichField))
        _sfTransleucence.syncWith(pOther->_sfTransleucence);

    if(FieldBits::NoField != (TransleucenceImageFieldMask & whichField))
        _sfTransleucenceImage.syncWith(pOther->_sfTransleucenceImage);

    if(FieldBits::NoField != (TransleucenceDepthFieldMask & whichField))
        _sfTransleucenceDepth.syncWith(pOther->_sfTransleucenceDepth);

    if(FieldBits::NoField != (TransleucenceDepthImageFieldMask & whichField))
        _sfTransleucenceDepthImage.syncWith(pOther->_sfTransleucenceDepthImage);

    if(FieldBits::NoField != (TransleucenceFocusFieldMask & whichField))
        _sfTransleucenceFocus.syncWith(pOther->_sfTransleucenceFocus);

    if(FieldBits::NoField != (TransleucenceFocusImageFieldMask & whichField))
        _sfTransleucenceFocusImage.syncWith(pOther->_sfTransleucenceFocusImage);

    if(FieldBits::NoField != (SpecularCosinePowerFieldMask & whichField))
        _sfSpecularCosinePower.syncWith(pOther->_sfSpecularCosinePower);

    if(FieldBits::NoField != (SpecularCosinePowerImageFieldMask & whichField))
        _sfSpecularCosinePowerImage.syncWith(pOther->_sfSpecularCosinePowerImage);

    if(FieldBits::NoField != (SpecularColorFieldMask & whichField))
        _sfSpecularColor.syncWith(pOther->_sfSpecularColor);

    if(FieldBits::NoField != (SpecularColorImageFieldMask & whichField))
        _sfSpecularColorImage.syncWith(pOther->_sfSpecularColorImage);



}

void PhongMaterialBase::execBeginEditImpl (const BitVector &whichField, 
                                                 UInt32     uiAspect,
                                                 UInt32     uiContainerSize)
{
    Inherited::execBeginEditImpl(whichField, uiAspect, uiContainerSize);

}
#endif



OSG_END_NAMESPACE

#include <OpenSG/OSGSFieldTypeDef.inl>
#include <OpenSG/OSGMFieldTypeDef.inl>

OSG_BEGIN_NAMESPACE

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldDataTraits<PhongMaterialPtr>::_type("PhongMaterialPtr", "ChunkMaterialPtr");
#endif

OSG_DLLEXPORT_SFIELD_DEF1(PhongMaterialPtr, OSG_TOOLBOXLIB_DLLTMPLMAPPING);
OSG_DLLEXPORT_MFIELD_DEF1(PhongMaterialPtr, OSG_TOOLBOXLIB_DLLTMPLMAPPING);


OSG_END_NAMESPACE

