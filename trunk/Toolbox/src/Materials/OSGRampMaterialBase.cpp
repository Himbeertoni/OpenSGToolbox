/*---------------------------------------------------------------------------*\
 *                        OpenSG ToolBox Toolbox                             *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                         www.vrac.iastate.edu                              *
 *                                                                           *
 *                          Authors: David Kabala                            *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class RampMaterial!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#define OSG_COMPILERAMPMATERIALINST

#include <stdlib.h>
#include <stdio.h>

#include <OpenSG/OSGConfig.h>

#include "OSGRampMaterialBase.h"
#include "OSGRampMaterial.h"


OSG_BEGIN_NAMESPACE

const OSG::BitVector  RampMaterialBase::ParametersFieldMask = 
    (TypeTraits<BitVector>::One << RampMaterialBase::ParametersFieldId);

const OSG::BitVector  RampMaterialBase::ShaderFieldMask = 
    (TypeTraits<BitVector>::One << RampMaterialBase::ShaderFieldId);

const OSG::BitVector  RampMaterialBase::ExtraChunksFieldMask = 
    (TypeTraits<BitVector>::One << RampMaterialBase::ExtraChunksFieldId);

const OSG::BitVector  RampMaterialBase::NumLightsFieldMask = 
    (TypeTraits<BitVector>::One << RampMaterialBase::NumLightsFieldId);

const OSG::BitVector  RampMaterialBase::RampSourceFieldMask = 
    (TypeTraits<BitVector>::One << RampMaterialBase::RampSourceFieldId);

const OSG::BitVector  RampMaterialBase::ColorsFieldMask = 
    (TypeTraits<BitVector>::One << RampMaterialBase::ColorsFieldId);

const OSG::BitVector  RampMaterialBase::ColorPositionsFieldMask = 
    (TypeTraits<BitVector>::One << RampMaterialBase::ColorPositionsFieldId);

const OSG::BitVector  RampMaterialBase::ColorInterpolationsFieldMask = 
    (TypeTraits<BitVector>::One << RampMaterialBase::ColorInterpolationsFieldId);

const OSG::BitVector  RampMaterialBase::ColorTextureFieldMask = 
    (TypeTraits<BitVector>::One << RampMaterialBase::ColorTextureFieldId);

const OSG::BitVector  RampMaterialBase::TransparenciesFieldMask = 
    (TypeTraits<BitVector>::One << RampMaterialBase::TransparenciesFieldId);

const OSG::BitVector  RampMaterialBase::TransparencyPositionsFieldMask = 
    (TypeTraits<BitVector>::One << RampMaterialBase::TransparencyPositionsFieldId);

const OSG::BitVector  RampMaterialBase::TransparencyInterpolationsFieldMask = 
    (TypeTraits<BitVector>::One << RampMaterialBase::TransparencyInterpolationsFieldId);

const OSG::BitVector  RampMaterialBase::TransparencyTextureFieldMask = 
    (TypeTraits<BitVector>::One << RampMaterialBase::TransparencyTextureFieldId);

const OSG::BitVector  RampMaterialBase::AmbientColorFieldMask = 
    (TypeTraits<BitVector>::One << RampMaterialBase::AmbientColorFieldId);

const OSG::BitVector  RampMaterialBase::AmbientColorTextureFieldMask = 
    (TypeTraits<BitVector>::One << RampMaterialBase::AmbientColorTextureFieldId);

const OSG::BitVector  RampMaterialBase::IncandescencesFieldMask = 
    (TypeTraits<BitVector>::One << RampMaterialBase::IncandescencesFieldId);

const OSG::BitVector  RampMaterialBase::IncandescencePositionsFieldMask = 
    (TypeTraits<BitVector>::One << RampMaterialBase::IncandescencePositionsFieldId);

const OSG::BitVector  RampMaterialBase::IncandescenceInterpolationsFieldMask = 
    (TypeTraits<BitVector>::One << RampMaterialBase::IncandescenceInterpolationsFieldId);

const OSG::BitVector  RampMaterialBase::IncandescenceTextureFieldMask = 
    (TypeTraits<BitVector>::One << RampMaterialBase::IncandescenceTextureFieldId);

const OSG::BitVector  RampMaterialBase::NormalMapTextureFieldMask = 
    (TypeTraits<BitVector>::One << RampMaterialBase::NormalMapTextureFieldId);

const OSG::BitVector  RampMaterialBase::BumpDepthFieldMask = 
    (TypeTraits<BitVector>::One << RampMaterialBase::BumpDepthFieldId);

const OSG::BitVector  RampMaterialBase::BumpDepthTextureFieldMask = 
    (TypeTraits<BitVector>::One << RampMaterialBase::BumpDepthTextureFieldId);

const OSG::BitVector  RampMaterialBase::DiffuseFieldMask = 
    (TypeTraits<BitVector>::One << RampMaterialBase::DiffuseFieldId);

const OSG::BitVector  RampMaterialBase::DiffuseTextureFieldMask = 
    (TypeTraits<BitVector>::One << RampMaterialBase::DiffuseTextureFieldId);

const OSG::BitVector  RampMaterialBase::SpecularityFieldMask = 
    (TypeTraits<BitVector>::One << RampMaterialBase::SpecularityFieldId);

const OSG::BitVector  RampMaterialBase::SpecularityTextureFieldMask = 
    (TypeTraits<BitVector>::One << RampMaterialBase::SpecularityTextureFieldId);

const OSG::BitVector  RampMaterialBase::SpecularEccentricityFieldMask = 
    (TypeTraits<BitVector>::One << RampMaterialBase::SpecularEccentricityFieldId);

const OSG::BitVector  RampMaterialBase::SpecularEccentricityTextureFieldMask = 
    (TypeTraits<BitVector>::One << RampMaterialBase::SpecularEccentricityTextureFieldId);

const OSG::BitVector  RampMaterialBase::SpecularColorsFieldMask = 
    (TypeTraits<BitVector>::One << RampMaterialBase::SpecularColorsFieldId);

const OSG::BitVector  RampMaterialBase::SpecularColorPositionsFieldMask = 
    (TypeTraits<BitVector>::One << RampMaterialBase::SpecularColorPositionsFieldId);

const OSG::BitVector  RampMaterialBase::SpecularColorInterpolationsFieldMask = 
    (TypeTraits<BitVector>::One << RampMaterialBase::SpecularColorInterpolationsFieldId);

const OSG::BitVector  RampMaterialBase::SpecularColorTextureFieldMask = 
    (TypeTraits<BitVector>::One << RampMaterialBase::SpecularColorTextureFieldId);

const OSG::BitVector  RampMaterialBase::SpecularRolloffsFieldMask = 
    (TypeTraits<BitVector>::One << RampMaterialBase::SpecularRolloffsFieldId);

const OSG::BitVector  RampMaterialBase::SpecularRolloffPositionsFieldMask = 
    (TypeTraits<BitVector>::One << RampMaterialBase::SpecularRolloffPositionsFieldId);

const OSG::BitVector  RampMaterialBase::SpecularRolloffInterpolationsFieldMask = 
    (TypeTraits<BitVector>::One << RampMaterialBase::SpecularRolloffInterpolationsFieldId);

const OSG::BitVector  RampMaterialBase::SpecularRolloffTextureFieldMask = 
    (TypeTraits<BitVector>::One << RampMaterialBase::SpecularRolloffTextureFieldId);

const OSG::BitVector RampMaterialBase::MTInfluenceMask = 
    (Inherited::MTInfluenceMask) | 
    (static_cast<BitVector>(0x0) << Inherited::NextFieldId); 


// Field descriptions

/*! \var SHLParameterChunkPtr RampMaterialBase::_sfParameters
    
*/
/*! \var SHLChunkPtr     RampMaterialBase::_sfShader
    
*/
/*! \var StateChunkPtr   RampMaterialBase::_mfExtraChunks
    
*/
/*! \var UInt8           RampMaterialBase::_sfNumLights
    
*/
/*! \var UInt8           RampMaterialBase::_sfRampSource
    
*/
/*! \var Color3f         RampMaterialBase::_mfColors
    
*/
/*! \var Real32          RampMaterialBase::_mfColorPositions
    
*/
/*! \var UInt8           RampMaterialBase::_mfColorInterpolations
    
*/
/*! \var TextureChunkPtr RampMaterialBase::_sfColorTexture
    
*/
/*! \var Color3f         RampMaterialBase::_mfTransparencies
    
*/
/*! \var Real32          RampMaterialBase::_mfTransparencyPositions
    
*/
/*! \var UInt8           RampMaterialBase::_mfTransparencyInterpolations
    
*/
/*! \var TextureChunkPtr RampMaterialBase::_sfTransparencyTexture
    
*/
/*! \var Color3f         RampMaterialBase::_sfAmbientColor
    
*/
/*! \var TextureChunkPtr RampMaterialBase::_sfAmbientColorTexture
    
*/
/*! \var Color3f         RampMaterialBase::_mfIncandescences
    
*/
/*! \var Real32          RampMaterialBase::_mfIncandescencePositions
    
*/
/*! \var UInt8           RampMaterialBase::_mfIncandescenceInterpolations
    
*/
/*! \var TextureChunkPtr RampMaterialBase::_sfIncandescenceTexture
    
*/
/*! \var TextureChunkPtr RampMaterialBase::_sfNormalMapTexture
    
*/
/*! \var Real32          RampMaterialBase::_sfBumpDepth
    
*/
/*! \var TextureChunkPtr RampMaterialBase::_sfBumpDepthTexture
    
*/
/*! \var Real32          RampMaterialBase::_sfDiffuse
    
*/
/*! \var TextureChunkPtr RampMaterialBase::_sfDiffuseTexture
    
*/
/*! \var Real32          RampMaterialBase::_sfSpecularity
    
*/
/*! \var TextureChunkPtr RampMaterialBase::_sfSpecularityTexture
    
*/
/*! \var Real32          RampMaterialBase::_sfSpecularEccentricity
    
*/
/*! \var TextureChunkPtr RampMaterialBase::_sfSpecularEccentricityTexture
    
*/
/*! \var Color3f         RampMaterialBase::_mfSpecularColors
    
*/
/*! \var Real32          RampMaterialBase::_mfSpecularColorPositions
    
*/
/*! \var UInt8           RampMaterialBase::_mfSpecularColorInterpolations
    
*/
/*! \var TextureChunkPtr RampMaterialBase::_sfSpecularColorTexture
    
*/
/*! \var Real32          RampMaterialBase::_mfSpecularRolloffs
    
*/
/*! \var Real32          RampMaterialBase::_mfSpecularRolloffPositions
    
*/
/*! \var UInt8           RampMaterialBase::_mfSpecularRolloffInterpolations
    
*/
/*! \var TextureChunkPtr RampMaterialBase::_sfSpecularRolloffTexture
    
*/

//! RampMaterial description

FieldDescription *RampMaterialBase::_desc[] = 
{
    new FieldDescription(SFSHLParameterChunkPtr::getClassType(), 
                     "Parameters", 
                     ParametersFieldId, ParametersFieldMask,
                     true,
                     reinterpret_cast<FieldAccessMethod>(&RampMaterialBase::editSFParameters)),
    new FieldDescription(SFSHLChunkPtr::getClassType(), 
                     "Shader", 
                     ShaderFieldId, ShaderFieldMask,
                     true,
                     reinterpret_cast<FieldAccessMethod>(&RampMaterialBase::editSFShader)),
    new FieldDescription(MFStateChunkPtr::getClassType(), 
                     "ExtraChunks", 
                     ExtraChunksFieldId, ExtraChunksFieldMask,
                     true,
                     reinterpret_cast<FieldAccessMethod>(&RampMaterialBase::editMFExtraChunks)),
    new FieldDescription(SFUInt8::getClassType(), 
                     "NumLights", 
                     NumLightsFieldId, NumLightsFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&RampMaterialBase::editSFNumLights)),
    new FieldDescription(SFUInt8::getClassType(), 
                     "RampSource", 
                     RampSourceFieldId, RampSourceFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&RampMaterialBase::editSFRampSource)),
    new FieldDescription(MFColor3f::getClassType(), 
                     "Colors", 
                     ColorsFieldId, ColorsFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&RampMaterialBase::editMFColors)),
    new FieldDescription(MFReal32::getClassType(), 
                     "ColorPositions", 
                     ColorPositionsFieldId, ColorPositionsFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&RampMaterialBase::editMFColorPositions)),
    new FieldDescription(MFUInt8::getClassType(), 
                     "ColorInterpolations", 
                     ColorInterpolationsFieldId, ColorInterpolationsFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&RampMaterialBase::editMFColorInterpolations)),
    new FieldDescription(SFTextureChunkPtr::getClassType(), 
                     "ColorTexture", 
                     ColorTextureFieldId, ColorTextureFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&RampMaterialBase::editSFColorTexture)),
    new FieldDescription(MFColor3f::getClassType(), 
                     "Transparencies", 
                     TransparenciesFieldId, TransparenciesFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&RampMaterialBase::editMFTransparencies)),
    new FieldDescription(MFReal32::getClassType(), 
                     "TransparencyPositions", 
                     TransparencyPositionsFieldId, TransparencyPositionsFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&RampMaterialBase::editMFTransparencyPositions)),
    new FieldDescription(MFUInt8::getClassType(), 
                     "TransparencyInterpolations", 
                     TransparencyInterpolationsFieldId, TransparencyInterpolationsFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&RampMaterialBase::editMFTransparencyInterpolations)),
    new FieldDescription(SFTextureChunkPtr::getClassType(), 
                     "TransparencyTexture", 
                     TransparencyTextureFieldId, TransparencyTextureFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&RampMaterialBase::editSFTransparencyTexture)),
    new FieldDescription(SFColor3f::getClassType(), 
                     "AmbientColor", 
                     AmbientColorFieldId, AmbientColorFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&RampMaterialBase::editSFAmbientColor)),
    new FieldDescription(SFTextureChunkPtr::getClassType(), 
                     "AmbientColorTexture", 
                     AmbientColorTextureFieldId, AmbientColorTextureFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&RampMaterialBase::editSFAmbientColorTexture)),
    new FieldDescription(MFColor3f::getClassType(), 
                     "Incandescences", 
                     IncandescencesFieldId, IncandescencesFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&RampMaterialBase::editMFIncandescences)),
    new FieldDescription(MFReal32::getClassType(), 
                     "IncandescencePositions", 
                     IncandescencePositionsFieldId, IncandescencePositionsFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&RampMaterialBase::editMFIncandescencePositions)),
    new FieldDescription(MFUInt8::getClassType(), 
                     "IncandescenceInterpolations", 
                     IncandescenceInterpolationsFieldId, IncandescenceInterpolationsFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&RampMaterialBase::editMFIncandescenceInterpolations)),
    new FieldDescription(SFTextureChunkPtr::getClassType(), 
                     "IncandescenceTexture", 
                     IncandescenceTextureFieldId, IncandescenceTextureFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&RampMaterialBase::editSFIncandescenceTexture)),
    new FieldDescription(SFTextureChunkPtr::getClassType(), 
                     "NormalMapTexture", 
                     NormalMapTextureFieldId, NormalMapTextureFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&RampMaterialBase::editSFNormalMapTexture)),
    new FieldDescription(SFReal32::getClassType(), 
                     "BumpDepth", 
                     BumpDepthFieldId, BumpDepthFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&RampMaterialBase::editSFBumpDepth)),
    new FieldDescription(SFTextureChunkPtr::getClassType(), 
                     "BumpDepthTexture", 
                     BumpDepthTextureFieldId, BumpDepthTextureFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&RampMaterialBase::editSFBumpDepthTexture)),
    new FieldDescription(SFReal32::getClassType(), 
                     "Diffuse", 
                     DiffuseFieldId, DiffuseFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&RampMaterialBase::editSFDiffuse)),
    new FieldDescription(SFTextureChunkPtr::getClassType(), 
                     "DiffuseTexture", 
                     DiffuseTextureFieldId, DiffuseTextureFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&RampMaterialBase::editSFDiffuseTexture)),
    new FieldDescription(SFReal32::getClassType(), 
                     "Specularity", 
                     SpecularityFieldId, SpecularityFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&RampMaterialBase::editSFSpecularity)),
    new FieldDescription(SFTextureChunkPtr::getClassType(), 
                     "SpecularityTexture", 
                     SpecularityTextureFieldId, SpecularityTextureFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&RampMaterialBase::editSFSpecularityTexture)),
    new FieldDescription(SFReal32::getClassType(), 
                     "SpecularEccentricity", 
                     SpecularEccentricityFieldId, SpecularEccentricityFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&RampMaterialBase::editSFSpecularEccentricity)),
    new FieldDescription(SFTextureChunkPtr::getClassType(), 
                     "SpecularEccentricityTexture", 
                     SpecularEccentricityTextureFieldId, SpecularEccentricityTextureFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&RampMaterialBase::editSFSpecularEccentricityTexture)),
    new FieldDescription(MFColor3f::getClassType(), 
                     "SpecularColors", 
                     SpecularColorsFieldId, SpecularColorsFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&RampMaterialBase::editMFSpecularColors)),
    new FieldDescription(MFReal32::getClassType(), 
                     "SpecularColorPositions", 
                     SpecularColorPositionsFieldId, SpecularColorPositionsFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&RampMaterialBase::editMFSpecularColorPositions)),
    new FieldDescription(MFUInt8::getClassType(), 
                     "SpecularColorInterpolations", 
                     SpecularColorInterpolationsFieldId, SpecularColorInterpolationsFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&RampMaterialBase::editMFSpecularColorInterpolations)),
    new FieldDescription(SFTextureChunkPtr::getClassType(), 
                     "SpecularColorTexture", 
                     SpecularColorTextureFieldId, SpecularColorTextureFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&RampMaterialBase::editSFSpecularColorTexture)),
    new FieldDescription(MFReal32::getClassType(), 
                     "SpecularRolloffs", 
                     SpecularRolloffsFieldId, SpecularRolloffsFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&RampMaterialBase::editMFSpecularRolloffs)),
    new FieldDescription(MFReal32::getClassType(), 
                     "SpecularRolloffPositions", 
                     SpecularRolloffPositionsFieldId, SpecularRolloffPositionsFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&RampMaterialBase::editMFSpecularRolloffPositions)),
    new FieldDescription(MFUInt8::getClassType(), 
                     "SpecularRolloffInterpolations", 
                     SpecularRolloffInterpolationsFieldId, SpecularRolloffInterpolationsFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&RampMaterialBase::editMFSpecularRolloffInterpolations)),
    new FieldDescription(SFTextureChunkPtr::getClassType(), 
                     "SpecularRolloffTexture", 
                     SpecularRolloffTextureFieldId, SpecularRolloffTextureFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&RampMaterialBase::editSFSpecularRolloffTexture))
};


FieldContainerType RampMaterialBase::_type(
    "RampMaterial",
    "ChunkMaterial",
    NULL,
    reinterpret_cast<PrototypeCreateF>(&RampMaterialBase::createEmpty),
    RampMaterial::initMethod,
    _desc,
    sizeof(_desc));

//OSG_FIELD_CONTAINER_DEF(RampMaterialBase, RampMaterialPtr)

/*------------------------------ get -----------------------------------*/

FieldContainerType &RampMaterialBase::getType(void) 
{
    return _type; 
} 

const FieldContainerType &RampMaterialBase::getType(void) const 
{
    return _type;
} 


FieldContainerPtr RampMaterialBase::shallowCopy(void) const 
{ 
    RampMaterialPtr returnValue; 

    newPtr(returnValue, dynamic_cast<const RampMaterial *>(this)); 

    return returnValue; 
}

UInt32 RampMaterialBase::getContainerSize(void) const 
{ 
    return sizeof(RampMaterial); 
}


#if !defined(OSG_FIXED_MFIELDSYNC)
void RampMaterialBase::executeSync(      FieldContainer &other,
                                    const BitVector      &whichField)
{
    this->executeSyncImpl(static_cast<RampMaterialBase *>(&other),
                          whichField);
}
#else
void RampMaterialBase::executeSync(      FieldContainer &other,
                                    const BitVector      &whichField,                                    const SyncInfo       &sInfo     )
{
    this->executeSyncImpl((RampMaterialBase *) &other, whichField, sInfo);
}
void RampMaterialBase::execBeginEdit(const BitVector &whichField, 
                                            UInt32     uiAspect,
                                            UInt32     uiContainerSize) 
{
    this->execBeginEditImpl(whichField, uiAspect, uiContainerSize);
}

void RampMaterialBase::onDestroyAspect(UInt32 uiId, UInt32 uiAspect)
{
    Inherited::onDestroyAspect(uiId, uiAspect);

    _mfExtraChunks.terminateShare(uiAspect, this->getContainerSize());
    _mfColors.terminateShare(uiAspect, this->getContainerSize());
    _mfColorPositions.terminateShare(uiAspect, this->getContainerSize());
    _mfColorInterpolations.terminateShare(uiAspect, this->getContainerSize());
    _mfTransparencies.terminateShare(uiAspect, this->getContainerSize());
    _mfTransparencyPositions.terminateShare(uiAspect, this->getContainerSize());
    _mfTransparencyInterpolations.terminateShare(uiAspect, this->getContainerSize());
    _mfIncandescences.terminateShare(uiAspect, this->getContainerSize());
    _mfIncandescencePositions.terminateShare(uiAspect, this->getContainerSize());
    _mfIncandescenceInterpolations.terminateShare(uiAspect, this->getContainerSize());
    _mfSpecularColors.terminateShare(uiAspect, this->getContainerSize());
    _mfSpecularColorPositions.terminateShare(uiAspect, this->getContainerSize());
    _mfSpecularColorInterpolations.terminateShare(uiAspect, this->getContainerSize());
    _mfSpecularRolloffs.terminateShare(uiAspect, this->getContainerSize());
    _mfSpecularRolloffPositions.terminateShare(uiAspect, this->getContainerSize());
    _mfSpecularRolloffInterpolations.terminateShare(uiAspect, this->getContainerSize());
}
#endif

/*------------------------- constructors ----------------------------------*/

#ifdef OSG_WIN32_ICL
#pragma warning (disable : 383)
#endif

RampMaterialBase::RampMaterialBase(void) :
    _sfParameters             (SHLParameterChunkPtr(NullFC)), 
    _sfShader                 (SHLChunkPtr(NullFC)), 
    _mfExtraChunks            (), 
    _sfNumLights              (UInt8(1)), 
    _sfRampSource             (UInt8(RampMaterial::RAMP_SOURCE_FACING_ANGLE)), 
    _mfColors                 (), 
    _mfColorPositions         (), 
    _mfColorInterpolations    (), 
    _sfColorTexture           (TextureChunkPtr(NullFC)), 
    _mfTransparencies         (), 
    _mfTransparencyPositions  (), 
    _mfTransparencyInterpolations(), 
    _sfTransparencyTexture    (TextureChunkPtr(NullFC)), 
    _sfAmbientColor           (Color3f(1.0f, 1.0f, 1.0f)), 
    _sfAmbientColorTexture    (TextureChunkPtr(NullFC)), 
    _mfIncandescences         (), 
    _mfIncandescencePositions (), 
    _mfIncandescenceInterpolations(), 
    _sfIncandescenceTexture   (TextureChunkPtr(NullFC)), 
    _sfNormalMapTexture       (TextureChunkPtr(NullFC)), 
    _sfBumpDepth              (Real32(1.0f)), 
    _sfBumpDepthTexture       (TextureChunkPtr(NullFC)), 
    _sfDiffuse                (Real32(1.0f)), 
    _sfDiffuseTexture         (TextureChunkPtr(NullFC)), 
    _sfSpecularity            (), 
    _sfSpecularityTexture     (TextureChunkPtr(NullFC)), 
    _sfSpecularEccentricity   (), 
    _sfSpecularEccentricityTexture(TextureChunkPtr(NullFC)), 
    _mfSpecularColors         (), 
    _mfSpecularColorPositions (), 
    _mfSpecularColorInterpolations(), 
    _sfSpecularColorTexture   (TextureChunkPtr(NullFC)), 
    _mfSpecularRolloffs       (), 
    _mfSpecularRolloffPositions(), 
    _mfSpecularRolloffInterpolations(), 
    _sfSpecularRolloffTexture (TextureChunkPtr(NullFC)), 
    Inherited() 
{
}

#ifdef OSG_WIN32_ICL
#pragma warning (default : 383)
#endif

RampMaterialBase::RampMaterialBase(const RampMaterialBase &source) :
    _sfParameters             (source._sfParameters             ), 
    _sfShader                 (source._sfShader                 ), 
    _mfExtraChunks            (source._mfExtraChunks            ), 
    _sfNumLights              (source._sfNumLights              ), 
    _sfRampSource             (source._sfRampSource             ), 
    _mfColors                 (source._mfColors                 ), 
    _mfColorPositions         (source._mfColorPositions         ), 
    _mfColorInterpolations    (source._mfColorInterpolations    ), 
    _sfColorTexture           (source._sfColorTexture           ), 
    _mfTransparencies         (source._mfTransparencies         ), 
    _mfTransparencyPositions  (source._mfTransparencyPositions  ), 
    _mfTransparencyInterpolations(source._mfTransparencyInterpolations), 
    _sfTransparencyTexture    (source._sfTransparencyTexture    ), 
    _sfAmbientColor           (source._sfAmbientColor           ), 
    _sfAmbientColorTexture    (source._sfAmbientColorTexture    ), 
    _mfIncandescences         (source._mfIncandescences         ), 
    _mfIncandescencePositions (source._mfIncandescencePositions ), 
    _mfIncandescenceInterpolations(source._mfIncandescenceInterpolations), 
    _sfIncandescenceTexture   (source._sfIncandescenceTexture   ), 
    _sfNormalMapTexture       (source._sfNormalMapTexture       ), 
    _sfBumpDepth              (source._sfBumpDepth              ), 
    _sfBumpDepthTexture       (source._sfBumpDepthTexture       ), 
    _sfDiffuse                (source._sfDiffuse                ), 
    _sfDiffuseTexture         (source._sfDiffuseTexture         ), 
    _sfSpecularity            (source._sfSpecularity            ), 
    _sfSpecularityTexture     (source._sfSpecularityTexture     ), 
    _sfSpecularEccentricity   (source._sfSpecularEccentricity   ), 
    _sfSpecularEccentricityTexture(source._sfSpecularEccentricityTexture), 
    _mfSpecularColors         (source._mfSpecularColors         ), 
    _mfSpecularColorPositions (source._mfSpecularColorPositions ), 
    _mfSpecularColorInterpolations(source._mfSpecularColorInterpolations), 
    _sfSpecularColorTexture   (source._sfSpecularColorTexture   ), 
    _mfSpecularRolloffs       (source._mfSpecularRolloffs       ), 
    _mfSpecularRolloffPositions(source._mfSpecularRolloffPositions), 
    _mfSpecularRolloffInterpolations(source._mfSpecularRolloffInterpolations), 
    _sfSpecularRolloffTexture (source._sfSpecularRolloffTexture ), 
    Inherited                 (source)
{
}

/*-------------------------- destructors ----------------------------------*/

RampMaterialBase::~RampMaterialBase(void)
{
}

/*------------------------------ access -----------------------------------*/

UInt32 RampMaterialBase::getBinSize(const BitVector &whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (ParametersFieldMask & whichField))
    {
        returnValue += _sfParameters.getBinSize();
    }

    if(FieldBits::NoField != (ShaderFieldMask & whichField))
    {
        returnValue += _sfShader.getBinSize();
    }

    if(FieldBits::NoField != (ExtraChunksFieldMask & whichField))
    {
        returnValue += _mfExtraChunks.getBinSize();
    }

    if(FieldBits::NoField != (NumLightsFieldMask & whichField))
    {
        returnValue += _sfNumLights.getBinSize();
    }

    if(FieldBits::NoField != (RampSourceFieldMask & whichField))
    {
        returnValue += _sfRampSource.getBinSize();
    }

    if(FieldBits::NoField != (ColorsFieldMask & whichField))
    {
        returnValue += _mfColors.getBinSize();
    }

    if(FieldBits::NoField != (ColorPositionsFieldMask & whichField))
    {
        returnValue += _mfColorPositions.getBinSize();
    }

    if(FieldBits::NoField != (ColorInterpolationsFieldMask & whichField))
    {
        returnValue += _mfColorInterpolations.getBinSize();
    }

    if(FieldBits::NoField != (ColorTextureFieldMask & whichField))
    {
        returnValue += _sfColorTexture.getBinSize();
    }

    if(FieldBits::NoField != (TransparenciesFieldMask & whichField))
    {
        returnValue += _mfTransparencies.getBinSize();
    }

    if(FieldBits::NoField != (TransparencyPositionsFieldMask & whichField))
    {
        returnValue += _mfTransparencyPositions.getBinSize();
    }

    if(FieldBits::NoField != (TransparencyInterpolationsFieldMask & whichField))
    {
        returnValue += _mfTransparencyInterpolations.getBinSize();
    }

    if(FieldBits::NoField != (TransparencyTextureFieldMask & whichField))
    {
        returnValue += _sfTransparencyTexture.getBinSize();
    }

    if(FieldBits::NoField != (AmbientColorFieldMask & whichField))
    {
        returnValue += _sfAmbientColor.getBinSize();
    }

    if(FieldBits::NoField != (AmbientColorTextureFieldMask & whichField))
    {
        returnValue += _sfAmbientColorTexture.getBinSize();
    }

    if(FieldBits::NoField != (IncandescencesFieldMask & whichField))
    {
        returnValue += _mfIncandescences.getBinSize();
    }

    if(FieldBits::NoField != (IncandescencePositionsFieldMask & whichField))
    {
        returnValue += _mfIncandescencePositions.getBinSize();
    }

    if(FieldBits::NoField != (IncandescenceInterpolationsFieldMask & whichField))
    {
        returnValue += _mfIncandescenceInterpolations.getBinSize();
    }

    if(FieldBits::NoField != (IncandescenceTextureFieldMask & whichField))
    {
        returnValue += _sfIncandescenceTexture.getBinSize();
    }

    if(FieldBits::NoField != (NormalMapTextureFieldMask & whichField))
    {
        returnValue += _sfNormalMapTexture.getBinSize();
    }

    if(FieldBits::NoField != (BumpDepthFieldMask & whichField))
    {
        returnValue += _sfBumpDepth.getBinSize();
    }

    if(FieldBits::NoField != (BumpDepthTextureFieldMask & whichField))
    {
        returnValue += _sfBumpDepthTexture.getBinSize();
    }

    if(FieldBits::NoField != (DiffuseFieldMask & whichField))
    {
        returnValue += _sfDiffuse.getBinSize();
    }

    if(FieldBits::NoField != (DiffuseTextureFieldMask & whichField))
    {
        returnValue += _sfDiffuseTexture.getBinSize();
    }

    if(FieldBits::NoField != (SpecularityFieldMask & whichField))
    {
        returnValue += _sfSpecularity.getBinSize();
    }

    if(FieldBits::NoField != (SpecularityTextureFieldMask & whichField))
    {
        returnValue += _sfSpecularityTexture.getBinSize();
    }

    if(FieldBits::NoField != (SpecularEccentricityFieldMask & whichField))
    {
        returnValue += _sfSpecularEccentricity.getBinSize();
    }

    if(FieldBits::NoField != (SpecularEccentricityTextureFieldMask & whichField))
    {
        returnValue += _sfSpecularEccentricityTexture.getBinSize();
    }

    if(FieldBits::NoField != (SpecularColorsFieldMask & whichField))
    {
        returnValue += _mfSpecularColors.getBinSize();
    }

    if(FieldBits::NoField != (SpecularColorPositionsFieldMask & whichField))
    {
        returnValue += _mfSpecularColorPositions.getBinSize();
    }

    if(FieldBits::NoField != (SpecularColorInterpolationsFieldMask & whichField))
    {
        returnValue += _mfSpecularColorInterpolations.getBinSize();
    }

    if(FieldBits::NoField != (SpecularColorTextureFieldMask & whichField))
    {
        returnValue += _sfSpecularColorTexture.getBinSize();
    }

    if(FieldBits::NoField != (SpecularRolloffsFieldMask & whichField))
    {
        returnValue += _mfSpecularRolloffs.getBinSize();
    }

    if(FieldBits::NoField != (SpecularRolloffPositionsFieldMask & whichField))
    {
        returnValue += _mfSpecularRolloffPositions.getBinSize();
    }

    if(FieldBits::NoField != (SpecularRolloffInterpolationsFieldMask & whichField))
    {
        returnValue += _mfSpecularRolloffInterpolations.getBinSize();
    }

    if(FieldBits::NoField != (SpecularRolloffTextureFieldMask & whichField))
    {
        returnValue += _sfSpecularRolloffTexture.getBinSize();
    }


    return returnValue;
}

void RampMaterialBase::copyToBin(      BinaryDataHandler &pMem,
                                  const BitVector         &whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (ParametersFieldMask & whichField))
    {
        _sfParameters.copyToBin(pMem);
    }

    if(FieldBits::NoField != (ShaderFieldMask & whichField))
    {
        _sfShader.copyToBin(pMem);
    }

    if(FieldBits::NoField != (ExtraChunksFieldMask & whichField))
    {
        _mfExtraChunks.copyToBin(pMem);
    }

    if(FieldBits::NoField != (NumLightsFieldMask & whichField))
    {
        _sfNumLights.copyToBin(pMem);
    }

    if(FieldBits::NoField != (RampSourceFieldMask & whichField))
    {
        _sfRampSource.copyToBin(pMem);
    }

    if(FieldBits::NoField != (ColorsFieldMask & whichField))
    {
        _mfColors.copyToBin(pMem);
    }

    if(FieldBits::NoField != (ColorPositionsFieldMask & whichField))
    {
        _mfColorPositions.copyToBin(pMem);
    }

    if(FieldBits::NoField != (ColorInterpolationsFieldMask & whichField))
    {
        _mfColorInterpolations.copyToBin(pMem);
    }

    if(FieldBits::NoField != (ColorTextureFieldMask & whichField))
    {
        _sfColorTexture.copyToBin(pMem);
    }

    if(FieldBits::NoField != (TransparenciesFieldMask & whichField))
    {
        _mfTransparencies.copyToBin(pMem);
    }

    if(FieldBits::NoField != (TransparencyPositionsFieldMask & whichField))
    {
        _mfTransparencyPositions.copyToBin(pMem);
    }

    if(FieldBits::NoField != (TransparencyInterpolationsFieldMask & whichField))
    {
        _mfTransparencyInterpolations.copyToBin(pMem);
    }

    if(FieldBits::NoField != (TransparencyTextureFieldMask & whichField))
    {
        _sfTransparencyTexture.copyToBin(pMem);
    }

    if(FieldBits::NoField != (AmbientColorFieldMask & whichField))
    {
        _sfAmbientColor.copyToBin(pMem);
    }

    if(FieldBits::NoField != (AmbientColorTextureFieldMask & whichField))
    {
        _sfAmbientColorTexture.copyToBin(pMem);
    }

    if(FieldBits::NoField != (IncandescencesFieldMask & whichField))
    {
        _mfIncandescences.copyToBin(pMem);
    }

    if(FieldBits::NoField != (IncandescencePositionsFieldMask & whichField))
    {
        _mfIncandescencePositions.copyToBin(pMem);
    }

    if(FieldBits::NoField != (IncandescenceInterpolationsFieldMask & whichField))
    {
        _mfIncandescenceInterpolations.copyToBin(pMem);
    }

    if(FieldBits::NoField != (IncandescenceTextureFieldMask & whichField))
    {
        _sfIncandescenceTexture.copyToBin(pMem);
    }

    if(FieldBits::NoField != (NormalMapTextureFieldMask & whichField))
    {
        _sfNormalMapTexture.copyToBin(pMem);
    }

    if(FieldBits::NoField != (BumpDepthFieldMask & whichField))
    {
        _sfBumpDepth.copyToBin(pMem);
    }

    if(FieldBits::NoField != (BumpDepthTextureFieldMask & whichField))
    {
        _sfBumpDepthTexture.copyToBin(pMem);
    }

    if(FieldBits::NoField != (DiffuseFieldMask & whichField))
    {
        _sfDiffuse.copyToBin(pMem);
    }

    if(FieldBits::NoField != (DiffuseTextureFieldMask & whichField))
    {
        _sfDiffuseTexture.copyToBin(pMem);
    }

    if(FieldBits::NoField != (SpecularityFieldMask & whichField))
    {
        _sfSpecularity.copyToBin(pMem);
    }

    if(FieldBits::NoField != (SpecularityTextureFieldMask & whichField))
    {
        _sfSpecularityTexture.copyToBin(pMem);
    }

    if(FieldBits::NoField != (SpecularEccentricityFieldMask & whichField))
    {
        _sfSpecularEccentricity.copyToBin(pMem);
    }

    if(FieldBits::NoField != (SpecularEccentricityTextureFieldMask & whichField))
    {
        _sfSpecularEccentricityTexture.copyToBin(pMem);
    }

    if(FieldBits::NoField != (SpecularColorsFieldMask & whichField))
    {
        _mfSpecularColors.copyToBin(pMem);
    }

    if(FieldBits::NoField != (SpecularColorPositionsFieldMask & whichField))
    {
        _mfSpecularColorPositions.copyToBin(pMem);
    }

    if(FieldBits::NoField != (SpecularColorInterpolationsFieldMask & whichField))
    {
        _mfSpecularColorInterpolations.copyToBin(pMem);
    }

    if(FieldBits::NoField != (SpecularColorTextureFieldMask & whichField))
    {
        _sfSpecularColorTexture.copyToBin(pMem);
    }

    if(FieldBits::NoField != (SpecularRolloffsFieldMask & whichField))
    {
        _mfSpecularRolloffs.copyToBin(pMem);
    }

    if(FieldBits::NoField != (SpecularRolloffPositionsFieldMask & whichField))
    {
        _mfSpecularRolloffPositions.copyToBin(pMem);
    }

    if(FieldBits::NoField != (SpecularRolloffInterpolationsFieldMask & whichField))
    {
        _mfSpecularRolloffInterpolations.copyToBin(pMem);
    }

    if(FieldBits::NoField != (SpecularRolloffTextureFieldMask & whichField))
    {
        _sfSpecularRolloffTexture.copyToBin(pMem);
    }


}

void RampMaterialBase::copyFromBin(      BinaryDataHandler &pMem,
                                    const BitVector    &whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (ParametersFieldMask & whichField))
    {
        _sfParameters.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (ShaderFieldMask & whichField))
    {
        _sfShader.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (ExtraChunksFieldMask & whichField))
    {
        _mfExtraChunks.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (NumLightsFieldMask & whichField))
    {
        _sfNumLights.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (RampSourceFieldMask & whichField))
    {
        _sfRampSource.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (ColorsFieldMask & whichField))
    {
        _mfColors.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (ColorPositionsFieldMask & whichField))
    {
        _mfColorPositions.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (ColorInterpolationsFieldMask & whichField))
    {
        _mfColorInterpolations.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (ColorTextureFieldMask & whichField))
    {
        _sfColorTexture.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (TransparenciesFieldMask & whichField))
    {
        _mfTransparencies.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (TransparencyPositionsFieldMask & whichField))
    {
        _mfTransparencyPositions.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (TransparencyInterpolationsFieldMask & whichField))
    {
        _mfTransparencyInterpolations.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (TransparencyTextureFieldMask & whichField))
    {
        _sfTransparencyTexture.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (AmbientColorFieldMask & whichField))
    {
        _sfAmbientColor.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (AmbientColorTextureFieldMask & whichField))
    {
        _sfAmbientColorTexture.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (IncandescencesFieldMask & whichField))
    {
        _mfIncandescences.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (IncandescencePositionsFieldMask & whichField))
    {
        _mfIncandescencePositions.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (IncandescenceInterpolationsFieldMask & whichField))
    {
        _mfIncandescenceInterpolations.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (IncandescenceTextureFieldMask & whichField))
    {
        _sfIncandescenceTexture.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (NormalMapTextureFieldMask & whichField))
    {
        _sfNormalMapTexture.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (BumpDepthFieldMask & whichField))
    {
        _sfBumpDepth.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (BumpDepthTextureFieldMask & whichField))
    {
        _sfBumpDepthTexture.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (DiffuseFieldMask & whichField))
    {
        _sfDiffuse.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (DiffuseTextureFieldMask & whichField))
    {
        _sfDiffuseTexture.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (SpecularityFieldMask & whichField))
    {
        _sfSpecularity.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (SpecularityTextureFieldMask & whichField))
    {
        _sfSpecularityTexture.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (SpecularEccentricityFieldMask & whichField))
    {
        _sfSpecularEccentricity.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (SpecularEccentricityTextureFieldMask & whichField))
    {
        _sfSpecularEccentricityTexture.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (SpecularColorsFieldMask & whichField))
    {
        _mfSpecularColors.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (SpecularColorPositionsFieldMask & whichField))
    {
        _mfSpecularColorPositions.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (SpecularColorInterpolationsFieldMask & whichField))
    {
        _mfSpecularColorInterpolations.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (SpecularColorTextureFieldMask & whichField))
    {
        _sfSpecularColorTexture.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (SpecularRolloffsFieldMask & whichField))
    {
        _mfSpecularRolloffs.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (SpecularRolloffPositionsFieldMask & whichField))
    {
        _mfSpecularRolloffPositions.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (SpecularRolloffInterpolationsFieldMask & whichField))
    {
        _mfSpecularRolloffInterpolations.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (SpecularRolloffTextureFieldMask & whichField))
    {
        _sfSpecularRolloffTexture.copyFromBin(pMem);
    }


}

#if !defined(OSG_FIXED_MFIELDSYNC)
void RampMaterialBase::executeSyncImpl(      RampMaterialBase *pOther,
                                        const BitVector         &whichField)
{

    Inherited::executeSyncImpl(pOther, whichField);

    if(FieldBits::NoField != (ParametersFieldMask & whichField))
        _sfParameters.syncWith(pOther->_sfParameters);

    if(FieldBits::NoField != (ShaderFieldMask & whichField))
        _sfShader.syncWith(pOther->_sfShader);

    if(FieldBits::NoField != (ExtraChunksFieldMask & whichField))
        _mfExtraChunks.syncWith(pOther->_mfExtraChunks);

    if(FieldBits::NoField != (NumLightsFieldMask & whichField))
        _sfNumLights.syncWith(pOther->_sfNumLights);

    if(FieldBits::NoField != (RampSourceFieldMask & whichField))
        _sfRampSource.syncWith(pOther->_sfRampSource);

    if(FieldBits::NoField != (ColorsFieldMask & whichField))
        _mfColors.syncWith(pOther->_mfColors);

    if(FieldBits::NoField != (ColorPositionsFieldMask & whichField))
        _mfColorPositions.syncWith(pOther->_mfColorPositions);

    if(FieldBits::NoField != (ColorInterpolationsFieldMask & whichField))
        _mfColorInterpolations.syncWith(pOther->_mfColorInterpolations);

    if(FieldBits::NoField != (ColorTextureFieldMask & whichField))
        _sfColorTexture.syncWith(pOther->_sfColorTexture);

    if(FieldBits::NoField != (TransparenciesFieldMask & whichField))
        _mfTransparencies.syncWith(pOther->_mfTransparencies);

    if(FieldBits::NoField != (TransparencyPositionsFieldMask & whichField))
        _mfTransparencyPositions.syncWith(pOther->_mfTransparencyPositions);

    if(FieldBits::NoField != (TransparencyInterpolationsFieldMask & whichField))
        _mfTransparencyInterpolations.syncWith(pOther->_mfTransparencyInterpolations);

    if(FieldBits::NoField != (TransparencyTextureFieldMask & whichField))
        _sfTransparencyTexture.syncWith(pOther->_sfTransparencyTexture);

    if(FieldBits::NoField != (AmbientColorFieldMask & whichField))
        _sfAmbientColor.syncWith(pOther->_sfAmbientColor);

    if(FieldBits::NoField != (AmbientColorTextureFieldMask & whichField))
        _sfAmbientColorTexture.syncWith(pOther->_sfAmbientColorTexture);

    if(FieldBits::NoField != (IncandescencesFieldMask & whichField))
        _mfIncandescences.syncWith(pOther->_mfIncandescences);

    if(FieldBits::NoField != (IncandescencePositionsFieldMask & whichField))
        _mfIncandescencePositions.syncWith(pOther->_mfIncandescencePositions);

    if(FieldBits::NoField != (IncandescenceInterpolationsFieldMask & whichField))
        _mfIncandescenceInterpolations.syncWith(pOther->_mfIncandescenceInterpolations);

    if(FieldBits::NoField != (IncandescenceTextureFieldMask & whichField))
        _sfIncandescenceTexture.syncWith(pOther->_sfIncandescenceTexture);

    if(FieldBits::NoField != (NormalMapTextureFieldMask & whichField))
        _sfNormalMapTexture.syncWith(pOther->_sfNormalMapTexture);

    if(FieldBits::NoField != (BumpDepthFieldMask & whichField))
        _sfBumpDepth.syncWith(pOther->_sfBumpDepth);

    if(FieldBits::NoField != (BumpDepthTextureFieldMask & whichField))
        _sfBumpDepthTexture.syncWith(pOther->_sfBumpDepthTexture);

    if(FieldBits::NoField != (DiffuseFieldMask & whichField))
        _sfDiffuse.syncWith(pOther->_sfDiffuse);

    if(FieldBits::NoField != (DiffuseTextureFieldMask & whichField))
        _sfDiffuseTexture.syncWith(pOther->_sfDiffuseTexture);

    if(FieldBits::NoField != (SpecularityFieldMask & whichField))
        _sfSpecularity.syncWith(pOther->_sfSpecularity);

    if(FieldBits::NoField != (SpecularityTextureFieldMask & whichField))
        _sfSpecularityTexture.syncWith(pOther->_sfSpecularityTexture);

    if(FieldBits::NoField != (SpecularEccentricityFieldMask & whichField))
        _sfSpecularEccentricity.syncWith(pOther->_sfSpecularEccentricity);

    if(FieldBits::NoField != (SpecularEccentricityTextureFieldMask & whichField))
        _sfSpecularEccentricityTexture.syncWith(pOther->_sfSpecularEccentricityTexture);

    if(FieldBits::NoField != (SpecularColorsFieldMask & whichField))
        _mfSpecularColors.syncWith(pOther->_mfSpecularColors);

    if(FieldBits::NoField != (SpecularColorPositionsFieldMask & whichField))
        _mfSpecularColorPositions.syncWith(pOther->_mfSpecularColorPositions);

    if(FieldBits::NoField != (SpecularColorInterpolationsFieldMask & whichField))
        _mfSpecularColorInterpolations.syncWith(pOther->_mfSpecularColorInterpolations);

    if(FieldBits::NoField != (SpecularColorTextureFieldMask & whichField))
        _sfSpecularColorTexture.syncWith(pOther->_sfSpecularColorTexture);

    if(FieldBits::NoField != (SpecularRolloffsFieldMask & whichField))
        _mfSpecularRolloffs.syncWith(pOther->_mfSpecularRolloffs);

    if(FieldBits::NoField != (SpecularRolloffPositionsFieldMask & whichField))
        _mfSpecularRolloffPositions.syncWith(pOther->_mfSpecularRolloffPositions);

    if(FieldBits::NoField != (SpecularRolloffInterpolationsFieldMask & whichField))
        _mfSpecularRolloffInterpolations.syncWith(pOther->_mfSpecularRolloffInterpolations);

    if(FieldBits::NoField != (SpecularRolloffTextureFieldMask & whichField))
        _sfSpecularRolloffTexture.syncWith(pOther->_sfSpecularRolloffTexture);


}
#else
void RampMaterialBase::executeSyncImpl(      RampMaterialBase *pOther,
                                        const BitVector         &whichField,
                                        const SyncInfo          &sInfo      )
{

    Inherited::executeSyncImpl(pOther, whichField, sInfo);

    if(FieldBits::NoField != (ParametersFieldMask & whichField))
        _sfParameters.syncWith(pOther->_sfParameters);

    if(FieldBits::NoField != (ShaderFieldMask & whichField))
        _sfShader.syncWith(pOther->_sfShader);

    if(FieldBits::NoField != (NumLightsFieldMask & whichField))
        _sfNumLights.syncWith(pOther->_sfNumLights);

    if(FieldBits::NoField != (RampSourceFieldMask & whichField))
        _sfRampSource.syncWith(pOther->_sfRampSource);

    if(FieldBits::NoField != (ColorTextureFieldMask & whichField))
        _sfColorTexture.syncWith(pOther->_sfColorTexture);

    if(FieldBits::NoField != (TransparencyTextureFieldMask & whichField))
        _sfTransparencyTexture.syncWith(pOther->_sfTransparencyTexture);

    if(FieldBits::NoField != (AmbientColorFieldMask & whichField))
        _sfAmbientColor.syncWith(pOther->_sfAmbientColor);

    if(FieldBits::NoField != (AmbientColorTextureFieldMask & whichField))
        _sfAmbientColorTexture.syncWith(pOther->_sfAmbientColorTexture);

    if(FieldBits::NoField != (IncandescenceTextureFieldMask & whichField))
        _sfIncandescenceTexture.syncWith(pOther->_sfIncandescenceTexture);

    if(FieldBits::NoField != (NormalMapTextureFieldMask & whichField))
        _sfNormalMapTexture.syncWith(pOther->_sfNormalMapTexture);

    if(FieldBits::NoField != (BumpDepthFieldMask & whichField))
        _sfBumpDepth.syncWith(pOther->_sfBumpDepth);

    if(FieldBits::NoField != (BumpDepthTextureFieldMask & whichField))
        _sfBumpDepthTexture.syncWith(pOther->_sfBumpDepthTexture);

    if(FieldBits::NoField != (DiffuseFieldMask & whichField))
        _sfDiffuse.syncWith(pOther->_sfDiffuse);

    if(FieldBits::NoField != (DiffuseTextureFieldMask & whichField))
        _sfDiffuseTexture.syncWith(pOther->_sfDiffuseTexture);

    if(FieldBits::NoField != (SpecularityFieldMask & whichField))
        _sfSpecularity.syncWith(pOther->_sfSpecularity);

    if(FieldBits::NoField != (SpecularityTextureFieldMask & whichField))
        _sfSpecularityTexture.syncWith(pOther->_sfSpecularityTexture);

    if(FieldBits::NoField != (SpecularEccentricityFieldMask & whichField))
        _sfSpecularEccentricity.syncWith(pOther->_sfSpecularEccentricity);

    if(FieldBits::NoField != (SpecularEccentricityTextureFieldMask & whichField))
        _sfSpecularEccentricityTexture.syncWith(pOther->_sfSpecularEccentricityTexture);

    if(FieldBits::NoField != (SpecularColorTextureFieldMask & whichField))
        _sfSpecularColorTexture.syncWith(pOther->_sfSpecularColorTexture);

    if(FieldBits::NoField != (SpecularRolloffTextureFieldMask & whichField))
        _sfSpecularRolloffTexture.syncWith(pOther->_sfSpecularRolloffTexture);


    if(FieldBits::NoField != (ExtraChunksFieldMask & whichField))
        _mfExtraChunks.syncWith(pOther->_mfExtraChunks, sInfo);

    if(FieldBits::NoField != (ColorsFieldMask & whichField))
        _mfColors.syncWith(pOther->_mfColors, sInfo);

    if(FieldBits::NoField != (ColorPositionsFieldMask & whichField))
        _mfColorPositions.syncWith(pOther->_mfColorPositions, sInfo);

    if(FieldBits::NoField != (ColorInterpolationsFieldMask & whichField))
        _mfColorInterpolations.syncWith(pOther->_mfColorInterpolations, sInfo);

    if(FieldBits::NoField != (TransparenciesFieldMask & whichField))
        _mfTransparencies.syncWith(pOther->_mfTransparencies, sInfo);

    if(FieldBits::NoField != (TransparencyPositionsFieldMask & whichField))
        _mfTransparencyPositions.syncWith(pOther->_mfTransparencyPositions, sInfo);

    if(FieldBits::NoField != (TransparencyInterpolationsFieldMask & whichField))
        _mfTransparencyInterpolations.syncWith(pOther->_mfTransparencyInterpolations, sInfo);

    if(FieldBits::NoField != (IncandescencesFieldMask & whichField))
        _mfIncandescences.syncWith(pOther->_mfIncandescences, sInfo);

    if(FieldBits::NoField != (IncandescencePositionsFieldMask & whichField))
        _mfIncandescencePositions.syncWith(pOther->_mfIncandescencePositions, sInfo);

    if(FieldBits::NoField != (IncandescenceInterpolationsFieldMask & whichField))
        _mfIncandescenceInterpolations.syncWith(pOther->_mfIncandescenceInterpolations, sInfo);

    if(FieldBits::NoField != (SpecularColorsFieldMask & whichField))
        _mfSpecularColors.syncWith(pOther->_mfSpecularColors, sInfo);

    if(FieldBits::NoField != (SpecularColorPositionsFieldMask & whichField))
        _mfSpecularColorPositions.syncWith(pOther->_mfSpecularColorPositions, sInfo);

    if(FieldBits::NoField != (SpecularColorInterpolationsFieldMask & whichField))
        _mfSpecularColorInterpolations.syncWith(pOther->_mfSpecularColorInterpolations, sInfo);

    if(FieldBits::NoField != (SpecularRolloffsFieldMask & whichField))
        _mfSpecularRolloffs.syncWith(pOther->_mfSpecularRolloffs, sInfo);

    if(FieldBits::NoField != (SpecularRolloffPositionsFieldMask & whichField))
        _mfSpecularRolloffPositions.syncWith(pOther->_mfSpecularRolloffPositions, sInfo);

    if(FieldBits::NoField != (SpecularRolloffInterpolationsFieldMask & whichField))
        _mfSpecularRolloffInterpolations.syncWith(pOther->_mfSpecularRolloffInterpolations, sInfo);


}

void RampMaterialBase::execBeginEditImpl (const BitVector &whichField, 
                                                 UInt32     uiAspect,
                                                 UInt32     uiContainerSize)
{
    Inherited::execBeginEditImpl(whichField, uiAspect, uiContainerSize);

    if(FieldBits::NoField != (ExtraChunksFieldMask & whichField))
        _mfExtraChunks.beginEdit(uiAspect, uiContainerSize);

    if(FieldBits::NoField != (ColorsFieldMask & whichField))
        _mfColors.beginEdit(uiAspect, uiContainerSize);

    if(FieldBits::NoField != (ColorPositionsFieldMask & whichField))
        _mfColorPositions.beginEdit(uiAspect, uiContainerSize);

    if(FieldBits::NoField != (ColorInterpolationsFieldMask & whichField))
        _mfColorInterpolations.beginEdit(uiAspect, uiContainerSize);

    if(FieldBits::NoField != (TransparenciesFieldMask & whichField))
        _mfTransparencies.beginEdit(uiAspect, uiContainerSize);

    if(FieldBits::NoField != (TransparencyPositionsFieldMask & whichField))
        _mfTransparencyPositions.beginEdit(uiAspect, uiContainerSize);

    if(FieldBits::NoField != (TransparencyInterpolationsFieldMask & whichField))
        _mfTransparencyInterpolations.beginEdit(uiAspect, uiContainerSize);

    if(FieldBits::NoField != (IncandescencesFieldMask & whichField))
        _mfIncandescences.beginEdit(uiAspect, uiContainerSize);

    if(FieldBits::NoField != (IncandescencePositionsFieldMask & whichField))
        _mfIncandescencePositions.beginEdit(uiAspect, uiContainerSize);

    if(FieldBits::NoField != (IncandescenceInterpolationsFieldMask & whichField))
        _mfIncandescenceInterpolations.beginEdit(uiAspect, uiContainerSize);

    if(FieldBits::NoField != (SpecularColorsFieldMask & whichField))
        _mfSpecularColors.beginEdit(uiAspect, uiContainerSize);

    if(FieldBits::NoField != (SpecularColorPositionsFieldMask & whichField))
        _mfSpecularColorPositions.beginEdit(uiAspect, uiContainerSize);

    if(FieldBits::NoField != (SpecularColorInterpolationsFieldMask & whichField))
        _mfSpecularColorInterpolations.beginEdit(uiAspect, uiContainerSize);

    if(FieldBits::NoField != (SpecularRolloffsFieldMask & whichField))
        _mfSpecularRolloffs.beginEdit(uiAspect, uiContainerSize);

    if(FieldBits::NoField != (SpecularRolloffPositionsFieldMask & whichField))
        _mfSpecularRolloffPositions.beginEdit(uiAspect, uiContainerSize);

    if(FieldBits::NoField != (SpecularRolloffInterpolationsFieldMask & whichField))
        _mfSpecularRolloffInterpolations.beginEdit(uiAspect, uiContainerSize);

}
#endif



OSG_END_NAMESPACE

#include <OpenSG/OSGSFieldTypeDef.inl>
#include <OpenSG/OSGMFieldTypeDef.inl>

OSG_BEGIN_NAMESPACE

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldDataTraits<RampMaterialPtr>::_type("RampMaterialPtr", "ChunkMaterialPtr");
#endif

OSG_DLLEXPORT_SFIELD_DEF1(RampMaterialPtr, OSG_TOOLBOXLIB_DLLTMPLMAPPING);
OSG_DLLEXPORT_MFIELD_DEF1(RampMaterialPtr, OSG_TOOLBOXLIB_DLLTMPLMAPPING);


OSG_END_NAMESPACE

