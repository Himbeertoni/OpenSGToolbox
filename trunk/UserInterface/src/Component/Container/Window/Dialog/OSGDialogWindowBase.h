/*---------------------------------------------------------------------------*\
 *                     OpenSG ToolBox UserInterface                          *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                         www.vrac.iastate.edu                              *
 *                                                                           *
 *                          Authors: David Kabala                            *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class DialogWindow
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#ifndef _OSGDIALOGWINDOWBASE_H_
#define _OSGDIALOGWINDOWBASE_H_
#ifdef __sgi
#pragma once
#endif


#include <OpenSG/OSGConfig.h>
#include "OSGUserInterfaceDef.h"

#include <OpenSG/OSGBaseTypes.h>
#include <OpenSG/OSGRefPtr.h>
#include <OpenSG/OSGCoredNodePtr.h>

#include "Component/Container/Window/OSGInternalWindow.h" // Parent

#include <OpenSG/OSGReal32Fields.h> // ErrorIcon type
#include <OpenSG/OSGReal32Fields.h> // QuestionIcon type
#include <OpenSG/OSGReal32Fields.h> // DefaultIcon type
#include <OpenSG/OSGBoolFields.h> // ShowCancel type
#include <OpenSG/OSGStringFields.h> // InputValues type

#include "OSGDialogWindowFields.h"
#include <OpenSG/Toolbox/OSGEventProducer.h>
#include <OpenSG/Toolbox/OSGEventProducerType.h>
#include <OpenSG/Toolbox/OSGMethodDescription.h>

OSG_BEGIN_NAMESPACE

class DialogWindow;
class BinaryDataHandler;

//! \brief DialogWindow Base Class.

class OSG_USERINTERFACELIB_DLLMAPPING DialogWindowBase : public InternalWindow
{
  private:

    typedef InternalWindow    Inherited;

    /*==========================  PUBLIC  =================================*/
  public:

    typedef DialogWindowPtr  Ptr;

    enum
    {
        ErrorIconFieldId    = Inherited::NextFieldId,
        QuestionIconFieldId = ErrorIconFieldId    + 1,
        DefaultIconFieldId  = QuestionIconFieldId + 1,
        ShowCancelFieldId   = DefaultIconFieldId  + 1,
        InputValuesFieldId  = ShowCancelFieldId   + 1,
        NextFieldId         = InputValuesFieldId  + 1
    };

    static const OSG::BitVector ErrorIconFieldMask;
    static const OSG::BitVector QuestionIconFieldMask;
    static const OSG::BitVector DefaultIconFieldMask;
    static const OSG::BitVector ShowCancelFieldMask;
    static const OSG::BitVector InputValuesFieldMask;


    enum
    {
        DialogWindowClosingMethodId = Inherited::NextMethodId,
        DialogWindowClosedMethodId  = DialogWindowClosingMethodId + 1,
        NextMethodId                = DialogWindowClosedMethodId  + 1
    };



    static const OSG::BitVector MTInfluenceMask;

    /*---------------------------------------------------------------------*/
    /*! \name                    Class Get                                 */
    /*! \{                                                                 */

    static        FieldContainerType &getClassType    (void); 
    static        UInt32              getClassTypeId  (void); 
    static const  EventProducerType  &getProducerClassType  (void); 
    static        UInt32              getProducerClassTypeId(void); 

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                FieldContainer Get                            */
    /*! \{                                                                 */

    virtual       FieldContainerType &getType  (void); 
    virtual const FieldContainerType &getType  (void) const; 

    virtual       UInt32              getContainerSize(void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Get                                 */
    /*! \{                                                                 */


           SFReal32            *editSFErrorIcon      (void);
     const SFReal32            *getSFErrorIcon      (void) const;

           SFReal32            *editSFQuestionIcon   (void);
     const SFReal32            *getSFQuestionIcon   (void) const;

           SFReal32            *editSFDefaultIcon    (void);
     const SFReal32            *getSFDefaultIcon    (void) const;

           SFBool              *editSFShowCancel     (void);
     const SFBool              *getSFShowCancel     (void) const;

           SFString            *editSFInputValues    (void);
     const SFString            *getSFInputValues    (void) const;


           Real32              &editErrorIcon      (void);
     const Real32              &getErrorIcon      (void) const;

           Real32              &editQuestionIcon   (void);
     const Real32              &getQuestionIcon   (void) const;

           Real32              &editDefaultIcon    (void);
     const Real32              &getDefaultIcon    (void) const;

           bool                &editShowCancel     (void);
     const bool                &getShowCancel     (void) const;

           std::string         &editInputValues    (void);
     const std::string         &getInputValues    (void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Set                                 */
    /*! \{                                                                 */

     void setErrorIcon      ( const Real32 &value );
     void setQuestionIcon   ( const Real32 &value );
     void setDefaultIcon    ( const Real32 &value );
     void setShowCancel     ( const bool &value );
     void setInputValues    ( const std::string &value );

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                Method Produced Get                           */
    /*! \{                                                                 */

    virtual const EventProducerType &getProducerType(void) const; 

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Binary Access                              */
    /*! \{                                                                 */

    virtual UInt32 getBinSize (const BitVector         &whichField);
    virtual void   copyToBin  (      BinaryDataHandler &pMem,
                               const BitVector         &whichField);
    virtual void   copyFromBin(      BinaryDataHandler &pMem,
                               const BitVector         &whichField);


    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Construction                               */
    /*! \{                                                                 */

    static  DialogWindowPtr      create          (void); 
    static  DialogWindowPtr      createEmpty     (void); 

    /*! \}                                                                 */

    /*---------------------------------------------------------------------*/
    /*! \name                       Copy                                   */
    /*! \{                                                                 */

    virtual FieldContainerPtr     shallowCopy     (void) const; 

    /*! \}                                                                 */
    /*=========================  PROTECTED  ===============================*/
  protected:

    /*---------------------------------------------------------------------*/
    /*! \name                      Fields                                  */
    /*! \{                                                                 */

    SFReal32            _sfErrorIcon;
    SFReal32            _sfQuestionIcon;
    SFReal32            _sfDefaultIcon;
    SFBool              _sfShowCancel;
    SFString            _sfInputValues;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Constructors                               */
    /*! \{                                                                 */

    DialogWindowBase(void);
    DialogWindowBase(const DialogWindowBase &source);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Destructors                                */
    /*! \{                                                                 */

    virtual ~DialogWindowBase(void); 

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

#if !defined(OSG_FIXED_MFIELDSYNC)
    void executeSyncImpl(      DialogWindowBase *pOther,
                         const BitVector         &whichField);

    virtual void   executeSync(      FieldContainer    &other,
                               const BitVector         &whichField);
#else
    void executeSyncImpl(      DialogWindowBase *pOther,
                         const BitVector         &whichField,
                         const SyncInfo          &sInfo     );

    virtual void   executeSync(      FieldContainer    &other,
                               const BitVector         &whichField,
                               const SyncInfo          &sInfo);

    virtual void execBeginEdit     (const BitVector &whichField,
                                          UInt32     uiAspect,
                                          UInt32     uiContainerSize);

            void execBeginEditImpl (const BitVector &whichField,
                                          UInt32     uiAspect,
                                          UInt32     uiContainerSize);

    virtual void onDestroyAspect(UInt32 uiId, UInt32 uiAspect);
#endif

    /*! \}                                                                 */
    /*==========================  PRIVATE  ================================*/
  private:

    friend class FieldContainer;

    static MethodDescription   *_methodDesc[];
    static EventProducerType _producerType;

    static FieldDescription   *_desc[];
    static FieldContainerType  _type;


    // prohibit default functions (move to 'public' if you need one)
    void operator =(const DialogWindowBase &source);
};

//---------------------------------------------------------------------------
//   Exported Types
//---------------------------------------------------------------------------


typedef DialogWindowBase *DialogWindowBaseP;

typedef osgIF<DialogWindowBase::isNodeCore,
              CoredNodePtr<DialogWindow>,
              FieldContainer::attempt_to_create_CoredNodePtr_on_non_NodeCore_FC
              >::_IRet DialogWindowNodePtr;

typedef RefPtr<DialogWindowPtr> DialogWindowRefPtr;

OSG_END_NAMESPACE

#endif /* _OSGDIALOGWINDOWBASE_H_ */
