/*---------------------------------------------------------------------------*\
 *                     OpenSG ToolBox UserInterface                          *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                         www.vrac.iastate.edu                              *
 *                                                                           *
 *   Authors: David Kabala, Alden Peterson, Lee Zaniewski, Jonathan Flory    *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class MenuItem!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#define OSG_COMPILEMENUITEMINST

#include <stdlib.h>
#include <stdio.h>

#include <OpenSG/OSGConfig.h>

#include "OSGMenuItemBase.h"
#include "OSGMenuItem.h"

#include <OpenSG/Input/OSGKeyEvent.h>     // AcceleratorKey default header
#include <OpenSG/Input/OSGKeyEvent.h>     // MnemonicKey default header

OSG_BEGIN_NAMESPACE

const OSG::BitVector  MenuItemBase::ParentMenuFieldMask = 
    (TypeTraits<BitVector>::One << MenuItemBase::ParentMenuFieldId);

const OSG::BitVector  MenuItemBase::AcceleratorModifiersFieldMask = 
    (TypeTraits<BitVector>::One << MenuItemBase::AcceleratorModifiersFieldId);

const OSG::BitVector  MenuItemBase::AcceleratorKeyFieldMask = 
    (TypeTraits<BitVector>::One << MenuItemBase::AcceleratorKeyFieldId);

const OSG::BitVector  MenuItemBase::MnemonicKeyFieldMask = 
    (TypeTraits<BitVector>::One << MenuItemBase::MnemonicKeyFieldId);

const OSG::BitVector  MenuItemBase::AcceleratorTextFieldMask = 
    (TypeTraits<BitVector>::One << MenuItemBase::AcceleratorTextFieldId);

const OSG::BitVector  MenuItemBase::MnemonicTextPositionFieldMask = 
    (TypeTraits<BitVector>::One << MenuItemBase::MnemonicTextPositionFieldId);

const OSG::BitVector MenuItemBase::MTInfluenceMask = 
    (Inherited::MTInfluenceMask) | 
    (static_cast<BitVector>(0x0) << Inherited::NextFieldId); 


// Field descriptions

/*! \var MenuPtr         MenuItemBase::_sfParentMenu
    
*/
/*! \var UInt32          MenuItemBase::_sfAcceleratorModifiers
    
*/
/*! \var UInt32          MenuItemBase::_sfAcceleratorKey
    
*/
/*! \var UInt32          MenuItemBase::_sfMnemonicKey
    
*/
/*! \var std::string     MenuItemBase::_sfAcceleratorText
    
*/
/*! \var Int32           MenuItemBase::_sfMnemonicTextPosition
    
*/

//! MenuItem description

FieldDescription *MenuItemBase::_desc[] = 
{
    new FieldDescription(SFMenuPtr::getClassType(), 
                     "ParentMenu", 
                     ParentMenuFieldId, ParentMenuFieldMask,
                     false,
                     (FieldAccessMethod) &MenuItemBase::getSFParentMenu),
    new FieldDescription(SFUInt32::getClassType(), 
                     "AcceleratorModifiers", 
                     AcceleratorModifiersFieldId, AcceleratorModifiersFieldMask,
                     false,
                     (FieldAccessMethod) &MenuItemBase::getSFAcceleratorModifiers),
    new FieldDescription(SFUInt32::getClassType(), 
                     "AcceleratorKey", 
                     AcceleratorKeyFieldId, AcceleratorKeyFieldMask,
                     false,
                     (FieldAccessMethod) &MenuItemBase::getSFAcceleratorKey),
    new FieldDescription(SFUInt32::getClassType(), 
                     "MnemonicKey", 
                     MnemonicKeyFieldId, MnemonicKeyFieldMask,
                     false,
                     (FieldAccessMethod) &MenuItemBase::getSFMnemonicKey),
    new FieldDescription(SFString::getClassType(), 
                     "AcceleratorText", 
                     AcceleratorTextFieldId, AcceleratorTextFieldMask,
                     false,
                     (FieldAccessMethod) &MenuItemBase::getSFAcceleratorText),
    new FieldDescription(SFInt32::getClassType(), 
                     "MnemonicTextPosition", 
                     MnemonicTextPositionFieldId, MnemonicTextPositionFieldMask,
                     false,
                     (FieldAccessMethod) &MenuItemBase::getSFMnemonicTextPosition)
};


FieldContainerType MenuItemBase::_type(
    "MenuItem",
    "ToggleButton",
    NULL,
    (PrototypeCreateF) &MenuItemBase::createEmpty,
    MenuItem::initMethod,
    _desc,
    sizeof(_desc));

//OSG_FIELD_CONTAINER_DEF(MenuItemBase, MenuItemPtr)

/*------------------------------ get -----------------------------------*/

FieldContainerType &MenuItemBase::getType(void) 
{
    return _type; 
} 

const FieldContainerType &MenuItemBase::getType(void) const 
{
    return _type;
} 


FieldContainerPtr MenuItemBase::shallowCopy(void) const 
{ 
    MenuItemPtr returnValue; 

    newPtr(returnValue, dynamic_cast<const MenuItem *>(this)); 

    return returnValue; 
}

UInt32 MenuItemBase::getContainerSize(void) const 
{ 
    return sizeof(MenuItem); 
}


#if !defined(OSG_FIXED_MFIELDSYNC)
void MenuItemBase::executeSync(      FieldContainer &other,
                                    const BitVector      &whichField)
{
    this->executeSyncImpl((MenuItemBase *) &other, whichField);
}
#else
void MenuItemBase::executeSync(      FieldContainer &other,
                                    const BitVector      &whichField,                                    const SyncInfo       &sInfo     )
{
    this->executeSyncImpl((MenuItemBase *) &other, whichField, sInfo);
}
void MenuItemBase::execBeginEdit(const BitVector &whichField, 
                                            UInt32     uiAspect,
                                            UInt32     uiContainerSize) 
{
    this->execBeginEditImpl(whichField, uiAspect, uiContainerSize);
}

void MenuItemBase::onDestroyAspect(UInt32 uiId, UInt32 uiAspect)
{
    Inherited::onDestroyAspect(uiId, uiAspect);

}
#endif

/*------------------------- constructors ----------------------------------*/

#ifdef OSG_WIN32_ICL
#pragma warning (disable : 383)
#endif

MenuItemBase::MenuItemBase(void) :
    _sfParentMenu             (MenuPtr(NullFC)), 
    _sfAcceleratorModifiers   (UInt32(0)), 
    _sfAcceleratorKey         (UInt32(KeyEvent::KEY_NONE)), 
    _sfMnemonicKey            (UInt32(KeyEvent::KEY_NONE)), 
    _sfAcceleratorText        (), 
    _sfMnemonicTextPosition   (Int32(-1)), 
    Inherited() 
{
}

#ifdef OSG_WIN32_ICL
#pragma warning (default : 383)
#endif

MenuItemBase::MenuItemBase(const MenuItemBase &source) :
    _sfParentMenu             (source._sfParentMenu             ), 
    _sfAcceleratorModifiers   (source._sfAcceleratorModifiers   ), 
    _sfAcceleratorKey         (source._sfAcceleratorKey         ), 
    _sfMnemonicKey            (source._sfMnemonicKey            ), 
    _sfAcceleratorText        (source._sfAcceleratorText        ), 
    _sfMnemonicTextPosition   (source._sfMnemonicTextPosition   ), 
    Inherited                 (source)
{
}

/*-------------------------- destructors ----------------------------------*/

MenuItemBase::~MenuItemBase(void)
{
}

/*------------------------------ access -----------------------------------*/

UInt32 MenuItemBase::getBinSize(const BitVector &whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (ParentMenuFieldMask & whichField))
    {
        returnValue += _sfParentMenu.getBinSize();
    }

    if(FieldBits::NoField != (AcceleratorModifiersFieldMask & whichField))
    {
        returnValue += _sfAcceleratorModifiers.getBinSize();
    }

    if(FieldBits::NoField != (AcceleratorKeyFieldMask & whichField))
    {
        returnValue += _sfAcceleratorKey.getBinSize();
    }

    if(FieldBits::NoField != (MnemonicKeyFieldMask & whichField))
    {
        returnValue += _sfMnemonicKey.getBinSize();
    }

    if(FieldBits::NoField != (AcceleratorTextFieldMask & whichField))
    {
        returnValue += _sfAcceleratorText.getBinSize();
    }

    if(FieldBits::NoField != (MnemonicTextPositionFieldMask & whichField))
    {
        returnValue += _sfMnemonicTextPosition.getBinSize();
    }


    return returnValue;
}

void MenuItemBase::copyToBin(      BinaryDataHandler &pMem,
                                  const BitVector         &whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (ParentMenuFieldMask & whichField))
    {
        _sfParentMenu.copyToBin(pMem);
    }

    if(FieldBits::NoField != (AcceleratorModifiersFieldMask & whichField))
    {
        _sfAcceleratorModifiers.copyToBin(pMem);
    }

    if(FieldBits::NoField != (AcceleratorKeyFieldMask & whichField))
    {
        _sfAcceleratorKey.copyToBin(pMem);
    }

    if(FieldBits::NoField != (MnemonicKeyFieldMask & whichField))
    {
        _sfMnemonicKey.copyToBin(pMem);
    }

    if(FieldBits::NoField != (AcceleratorTextFieldMask & whichField))
    {
        _sfAcceleratorText.copyToBin(pMem);
    }

    if(FieldBits::NoField != (MnemonicTextPositionFieldMask & whichField))
    {
        _sfMnemonicTextPosition.copyToBin(pMem);
    }


}

void MenuItemBase::copyFromBin(      BinaryDataHandler &pMem,
                                    const BitVector    &whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (ParentMenuFieldMask & whichField))
    {
        _sfParentMenu.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (AcceleratorModifiersFieldMask & whichField))
    {
        _sfAcceleratorModifiers.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (AcceleratorKeyFieldMask & whichField))
    {
        _sfAcceleratorKey.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (MnemonicKeyFieldMask & whichField))
    {
        _sfMnemonicKey.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (AcceleratorTextFieldMask & whichField))
    {
        _sfAcceleratorText.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (MnemonicTextPositionFieldMask & whichField))
    {
        _sfMnemonicTextPosition.copyFromBin(pMem);
    }


}

#if !defined(OSG_FIXED_MFIELDSYNC)
void MenuItemBase::executeSyncImpl(      MenuItemBase *pOther,
                                        const BitVector         &whichField)
{

    Inherited::executeSyncImpl(pOther, whichField);

    if(FieldBits::NoField != (ParentMenuFieldMask & whichField))
        _sfParentMenu.syncWith(pOther->_sfParentMenu);

    if(FieldBits::NoField != (AcceleratorModifiersFieldMask & whichField))
        _sfAcceleratorModifiers.syncWith(pOther->_sfAcceleratorModifiers);

    if(FieldBits::NoField != (AcceleratorKeyFieldMask & whichField))
        _sfAcceleratorKey.syncWith(pOther->_sfAcceleratorKey);

    if(FieldBits::NoField != (MnemonicKeyFieldMask & whichField))
        _sfMnemonicKey.syncWith(pOther->_sfMnemonicKey);

    if(FieldBits::NoField != (AcceleratorTextFieldMask & whichField))
        _sfAcceleratorText.syncWith(pOther->_sfAcceleratorText);

    if(FieldBits::NoField != (MnemonicTextPositionFieldMask & whichField))
        _sfMnemonicTextPosition.syncWith(pOther->_sfMnemonicTextPosition);


}
#else
void MenuItemBase::executeSyncImpl(      MenuItemBase *pOther,
                                        const BitVector         &whichField,
                                        const SyncInfo          &sInfo      )
{

    Inherited::executeSyncImpl(pOther, whichField, sInfo);

    if(FieldBits::NoField != (ParentMenuFieldMask & whichField))
        _sfParentMenu.syncWith(pOther->_sfParentMenu);

    if(FieldBits::NoField != (AcceleratorModifiersFieldMask & whichField))
        _sfAcceleratorModifiers.syncWith(pOther->_sfAcceleratorModifiers);

    if(FieldBits::NoField != (AcceleratorKeyFieldMask & whichField))
        _sfAcceleratorKey.syncWith(pOther->_sfAcceleratorKey);

    if(FieldBits::NoField != (MnemonicKeyFieldMask & whichField))
        _sfMnemonicKey.syncWith(pOther->_sfMnemonicKey);

    if(FieldBits::NoField != (AcceleratorTextFieldMask & whichField))
        _sfAcceleratorText.syncWith(pOther->_sfAcceleratorText);

    if(FieldBits::NoField != (MnemonicTextPositionFieldMask & whichField))
        _sfMnemonicTextPosition.syncWith(pOther->_sfMnemonicTextPosition);



}

void MenuItemBase::execBeginEditImpl (const BitVector &whichField, 
                                                 UInt32     uiAspect,
                                                 UInt32     uiContainerSize)
{
    Inherited::execBeginEditImpl(whichField, uiAspect, uiContainerSize);

}
#endif



OSG_END_NAMESPACE

#include <OpenSG/OSGSFieldTypeDef.inl>
#include <OpenSG/OSGMFieldTypeDef.inl>

OSG_BEGIN_NAMESPACE

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldDataTraits<MenuItemPtr>::_type("MenuItemPtr", "ToggleButtonPtr");
#endif

OSG_DLLEXPORT_SFIELD_DEF1(MenuItemPtr, OSG_USERINTERFACELIB_DLLTMPLMAPPING);
OSG_DLLEXPORT_MFIELD_DEF1(MenuItemPtr, OSG_USERINTERFACELIB_DLLTMPLMAPPING);


/*------------------------------------------------------------------------*/
/*                              cvs id's                                  */

#ifdef OSG_SGI_CC
#pragma set woff 1174
#endif

#ifdef OSG_LINUX_ICC
#pragma warning( disable : 177 )
#endif

namespace
{
    static Char8 cvsid_cpp       [] = "@(#)$Id: FCBaseTemplate_cpp.h,v 1.47 2006/03/17 17:03:19 pdaehne Exp $";
    static Char8 cvsid_hpp       [] = OSGMENUITEMBASE_HEADER_CVSID;
    static Char8 cvsid_inl       [] = OSGMENUITEMBASE_INLINE_CVSID;

    static Char8 cvsid_fields_hpp[] = OSGMENUITEMFIELDS_HEADER_CVSID;
}

OSG_END_NAMESPACE

