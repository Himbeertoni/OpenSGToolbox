/*---------------------------------------------------------------------------*\
 *                     OpenSG ToolBox UserInterface                          *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                          Authors: David Kabala                            *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class ImageComponent!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <OpenSG/OSGConfig.h>

OSG_BEGIN_NAMESPACE


//! access the type of the class
inline
OSG::FieldContainerType &ImageComponentBase::getClassType(void)
{
    return _type; 
} 

//! access the numerical type of the class
inline
OSG::UInt32 ImageComponentBase::getClassTypeId(void) 
{
    return _type.getId(); 
} 

//! create a new instance of the class
inline
ImageComponentPtr ImageComponentBase::create(void) 
{
    ImageComponentPtr fc; 

    if(getClassType().getPrototype() != OSG::NullFC) 
    {
        fc = ImageComponentPtr::dcast(
            getClassType().getPrototype()-> shallowCopy()); 
    }
    
    return fc; 
}

//! create an empty new instance of the class, do not copy the prototype
inline
ImageComponentPtr ImageComponentBase::createEmpty(void) 
{ 
    ImageComponentPtr returnValue; 
    
    newPtr(returnValue); 

    return returnValue; 
}


/*------------------------------ get -----------------------------------*/

//! Get the ImageComponent::_sfTexture field.
inline
const SFTextureChunkPtr *ImageComponentBase::getSFTexture(void) const
{
    return &_sfTexture;
}

//! Get the ImageComponent::_sfTexture field.
inline
SFTextureChunkPtr *ImageComponentBase::editSFTexture(void)
{
    return &_sfTexture;
}

#ifndef OSG_2_PREP
//! Get the ImageComponent::_sfTexture field.
inline
SFTextureChunkPtr *ImageComponentBase::getSFTexture(void)
{
    return &_sfTexture;
}
#endif

//! Get the ImageComponent::_sfRolloverTexture field.
inline
const SFTextureChunkPtr *ImageComponentBase::getSFRolloverTexture(void) const
{
    return &_sfRolloverTexture;
}

//! Get the ImageComponent::_sfRolloverTexture field.
inline
SFTextureChunkPtr *ImageComponentBase::editSFRolloverTexture(void)
{
    return &_sfRolloverTexture;
}

#ifndef OSG_2_PREP
//! Get the ImageComponent::_sfRolloverTexture field.
inline
SFTextureChunkPtr *ImageComponentBase::getSFRolloverTexture(void)
{
    return &_sfRolloverTexture;
}
#endif

//! Get the ImageComponent::_sfDisabledTexture field.
inline
const SFTextureChunkPtr *ImageComponentBase::getSFDisabledTexture(void) const
{
    return &_sfDisabledTexture;
}

//! Get the ImageComponent::_sfDisabledTexture field.
inline
SFTextureChunkPtr *ImageComponentBase::editSFDisabledTexture(void)
{
    return &_sfDisabledTexture;
}

#ifndef OSG_2_PREP
//! Get the ImageComponent::_sfDisabledTexture field.
inline
SFTextureChunkPtr *ImageComponentBase::getSFDisabledTexture(void)
{
    return &_sfDisabledTexture;
}
#endif

//! Get the ImageComponent::_sfFocusedTexture field.
inline
const SFTextureChunkPtr *ImageComponentBase::getSFFocusedTexture(void) const
{
    return &_sfFocusedTexture;
}

//! Get the ImageComponent::_sfFocusedTexture field.
inline
SFTextureChunkPtr *ImageComponentBase::editSFFocusedTexture(void)
{
    return &_sfFocusedTexture;
}

#ifndef OSG_2_PREP
//! Get the ImageComponent::_sfFocusedTexture field.
inline
SFTextureChunkPtr *ImageComponentBase::getSFFocusedTexture(void)
{
    return &_sfFocusedTexture;
}
#endif

//! Get the ImageComponent::_sfTransformation field.
inline
const SFTextureTransformChunkPtr *ImageComponentBase::getSFTransformation(void) const
{
    return &_sfTransformation;
}

//! Get the ImageComponent::_sfTransformation field.
inline
SFTextureTransformChunkPtr *ImageComponentBase::editSFTransformation(void)
{
    return &_sfTransformation;
}

#ifndef OSG_2_PREP
//! Get the ImageComponent::_sfTransformation field.
inline
SFTextureTransformChunkPtr *ImageComponentBase::getSFTransformation(void)
{
    return &_sfTransformation;
}
#endif

//! Get the ImageComponent::_sfColor field.
inline
const SFColor4f *ImageComponentBase::getSFColor(void) const
{
    return &_sfColor;
}

//! Get the ImageComponent::_sfColor field.
inline
SFColor4f *ImageComponentBase::editSFColor(void)
{
    return &_sfColor;
}

#ifndef OSG_2_PREP
//! Get the ImageComponent::_sfColor field.
inline
SFColor4f *ImageComponentBase::getSFColor(void)
{
    return &_sfColor;
}
#endif

//! Get the ImageComponent::_sfScale field.
inline
const SFUInt32 *ImageComponentBase::getSFScale(void) const
{
    return &_sfScale;
}

//! Get the ImageComponent::_sfScale field.
inline
SFUInt32 *ImageComponentBase::editSFScale(void)
{
    return &_sfScale;
}

#ifndef OSG_2_PREP
//! Get the ImageComponent::_sfScale field.
inline
SFUInt32 *ImageComponentBase::getSFScale(void)
{
    return &_sfScale;
}
#endif

//! Get the ImageComponent::_sfScaleAbsoluteSize field.
inline
const SFVec2f *ImageComponentBase::getSFScaleAbsoluteSize(void) const
{
    return &_sfScaleAbsoluteSize;
}

//! Get the ImageComponent::_sfScaleAbsoluteSize field.
inline
SFVec2f *ImageComponentBase::editSFScaleAbsoluteSize(void)
{
    return &_sfScaleAbsoluteSize;
}

#ifndef OSG_2_PREP
//! Get the ImageComponent::_sfScaleAbsoluteSize field.
inline
SFVec2f *ImageComponentBase::getSFScaleAbsoluteSize(void)
{
    return &_sfScaleAbsoluteSize;
}
#endif

//! Get the ImageComponent::_sfAlignment field.
inline
const SFVec2f *ImageComponentBase::getSFAlignment(void) const
{
    return &_sfAlignment;
}

//! Get the ImageComponent::_sfAlignment field.
inline
SFVec2f *ImageComponentBase::editSFAlignment(void)
{
    return &_sfAlignment;
}

#ifndef OSG_2_PREP
//! Get the ImageComponent::_sfAlignment field.
inline
SFVec2f *ImageComponentBase::getSFAlignment(void)
{
    return &_sfAlignment;
}
#endif


//! Get the value of the ImageComponent::_sfTexture field.
inline
TextureChunkPtr &ImageComponentBase::editTexture(void)
{
    return _sfTexture.getValue();
}

//! Get the value of the ImageComponent::_sfTexture field.
inline
const TextureChunkPtr &ImageComponentBase::getTexture(void) const
{
    return _sfTexture.getValue();
}

#ifndef OSG_2_PREP
//! Get the value of the ImageComponent::_sfTexture field.
inline
TextureChunkPtr &ImageComponentBase::getTexture(void)
{
    return _sfTexture.getValue();
}
#endif

//! Set the value of the ImageComponent::_sfTexture field.
inline
void ImageComponentBase::setTexture(const TextureChunkPtr &value)
{
    _sfTexture.setValue(value);
}

//! Get the value of the ImageComponent::_sfRolloverTexture field.
inline
TextureChunkPtr &ImageComponentBase::editRolloverTexture(void)
{
    return _sfRolloverTexture.getValue();
}

//! Get the value of the ImageComponent::_sfRolloverTexture field.
inline
const TextureChunkPtr &ImageComponentBase::getRolloverTexture(void) const
{
    return _sfRolloverTexture.getValue();
}

#ifndef OSG_2_PREP
//! Get the value of the ImageComponent::_sfRolloverTexture field.
inline
TextureChunkPtr &ImageComponentBase::getRolloverTexture(void)
{
    return _sfRolloverTexture.getValue();
}
#endif

//! Set the value of the ImageComponent::_sfRolloverTexture field.
inline
void ImageComponentBase::setRolloverTexture(const TextureChunkPtr &value)
{
    _sfRolloverTexture.setValue(value);
}

//! Get the value of the ImageComponent::_sfDisabledTexture field.
inline
TextureChunkPtr &ImageComponentBase::editDisabledTexture(void)
{
    return _sfDisabledTexture.getValue();
}

//! Get the value of the ImageComponent::_sfDisabledTexture field.
inline
const TextureChunkPtr &ImageComponentBase::getDisabledTexture(void) const
{
    return _sfDisabledTexture.getValue();
}

#ifndef OSG_2_PREP
//! Get the value of the ImageComponent::_sfDisabledTexture field.
inline
TextureChunkPtr &ImageComponentBase::getDisabledTexture(void)
{
    return _sfDisabledTexture.getValue();
}
#endif

//! Set the value of the ImageComponent::_sfDisabledTexture field.
inline
void ImageComponentBase::setDisabledTexture(const TextureChunkPtr &value)
{
    _sfDisabledTexture.setValue(value);
}

//! Get the value of the ImageComponent::_sfFocusedTexture field.
inline
TextureChunkPtr &ImageComponentBase::editFocusedTexture(void)
{
    return _sfFocusedTexture.getValue();
}

//! Get the value of the ImageComponent::_sfFocusedTexture field.
inline
const TextureChunkPtr &ImageComponentBase::getFocusedTexture(void) const
{
    return _sfFocusedTexture.getValue();
}

#ifndef OSG_2_PREP
//! Get the value of the ImageComponent::_sfFocusedTexture field.
inline
TextureChunkPtr &ImageComponentBase::getFocusedTexture(void)
{
    return _sfFocusedTexture.getValue();
}
#endif

//! Set the value of the ImageComponent::_sfFocusedTexture field.
inline
void ImageComponentBase::setFocusedTexture(const TextureChunkPtr &value)
{
    _sfFocusedTexture.setValue(value);
}

//! Get the value of the ImageComponent::_sfTransformation field.
inline
TextureTransformChunkPtr &ImageComponentBase::editTransformation(void)
{
    return _sfTransformation.getValue();
}

//! Get the value of the ImageComponent::_sfTransformation field.
inline
const TextureTransformChunkPtr &ImageComponentBase::getTransformation(void) const
{
    return _sfTransformation.getValue();
}

#ifndef OSG_2_PREP
//! Get the value of the ImageComponent::_sfTransformation field.
inline
TextureTransformChunkPtr &ImageComponentBase::getTransformation(void)
{
    return _sfTransformation.getValue();
}
#endif

//! Set the value of the ImageComponent::_sfTransformation field.
inline
void ImageComponentBase::setTransformation(const TextureTransformChunkPtr &value)
{
    _sfTransformation.setValue(value);
}

//! Get the value of the ImageComponent::_sfColor field.
inline
Color4f &ImageComponentBase::editColor(void)
{
    return _sfColor.getValue();
}

//! Get the value of the ImageComponent::_sfColor field.
inline
const Color4f &ImageComponentBase::getColor(void) const
{
    return _sfColor.getValue();
}

#ifndef OSG_2_PREP
//! Get the value of the ImageComponent::_sfColor field.
inline
Color4f &ImageComponentBase::getColor(void)
{
    return _sfColor.getValue();
}
#endif

//! Set the value of the ImageComponent::_sfColor field.
inline
void ImageComponentBase::setColor(const Color4f &value)
{
    _sfColor.setValue(value);
}

//! Get the value of the ImageComponent::_sfScale field.
inline
UInt32 &ImageComponentBase::editScale(void)
{
    return _sfScale.getValue();
}

//! Get the value of the ImageComponent::_sfScale field.
inline
const UInt32 &ImageComponentBase::getScale(void) const
{
    return _sfScale.getValue();
}

#ifndef OSG_2_PREP
//! Get the value of the ImageComponent::_sfScale field.
inline
UInt32 &ImageComponentBase::getScale(void)
{
    return _sfScale.getValue();
}
#endif

//! Set the value of the ImageComponent::_sfScale field.
inline
void ImageComponentBase::setScale(const UInt32 &value)
{
    _sfScale.setValue(value);
}

//! Get the value of the ImageComponent::_sfScaleAbsoluteSize field.
inline
Vec2f &ImageComponentBase::editScaleAbsoluteSize(void)
{
    return _sfScaleAbsoluteSize.getValue();
}

//! Get the value of the ImageComponent::_sfScaleAbsoluteSize field.
inline
const Vec2f &ImageComponentBase::getScaleAbsoluteSize(void) const
{
    return _sfScaleAbsoluteSize.getValue();
}

#ifndef OSG_2_PREP
//! Get the value of the ImageComponent::_sfScaleAbsoluteSize field.
inline
Vec2f &ImageComponentBase::getScaleAbsoluteSize(void)
{
    return _sfScaleAbsoluteSize.getValue();
}
#endif

//! Set the value of the ImageComponent::_sfScaleAbsoluteSize field.
inline
void ImageComponentBase::setScaleAbsoluteSize(const Vec2f &value)
{
    _sfScaleAbsoluteSize.setValue(value);
}

//! Get the value of the ImageComponent::_sfAlignment field.
inline
Vec2f &ImageComponentBase::editAlignment(void)
{
    return _sfAlignment.getValue();
}

//! Get the value of the ImageComponent::_sfAlignment field.
inline
const Vec2f &ImageComponentBase::getAlignment(void) const
{
    return _sfAlignment.getValue();
}

#ifndef OSG_2_PREP
//! Get the value of the ImageComponent::_sfAlignment field.
inline
Vec2f &ImageComponentBase::getAlignment(void)
{
    return _sfAlignment.getValue();
}
#endif

//! Set the value of the ImageComponent::_sfAlignment field.
inline
void ImageComponentBase::setAlignment(const Vec2f &value)
{
    _sfAlignment.setValue(value);
}


OSG_END_NAMESPACE

