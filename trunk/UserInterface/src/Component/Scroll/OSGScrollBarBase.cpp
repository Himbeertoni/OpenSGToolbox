/*---------------------------------------------------------------------------*\
 *                     OpenSG ToolBox UserInterface                          *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                         www.vrac.iastate.edu                              *
 *                                                                           *
 *                          Authors: David Kabala                            *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class ScrollBar!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#define OSG_COMPILESCROLLBARINST

#include <stdlib.h>
#include <stdio.h>

#include <OpenSG/OSGConfig.h>

#include "OSGScrollBarBase.h"
#include "OSGScrollBar.h"


OSG_BEGIN_NAMESPACE

const OSG::BitVector  ScrollBarBase::OrientationFieldMask = 
    (TypeTraits<BitVector>::One << ScrollBarBase::OrientationFieldId);

const OSG::BitVector  ScrollBarBase::UnitIncrementFieldMask = 
    (TypeTraits<BitVector>::One << ScrollBarBase::UnitIncrementFieldId);

const OSG::BitVector  ScrollBarBase::BlockIncrementFieldMask = 
    (TypeTraits<BitVector>::One << ScrollBarBase::BlockIncrementFieldId);

const OSG::BitVector  ScrollBarBase::VerticalMinButtonFieldMask = 
    (TypeTraits<BitVector>::One << ScrollBarBase::VerticalMinButtonFieldId);

const OSG::BitVector  ScrollBarBase::VerticalMaxButtonFieldMask = 
    (TypeTraits<BitVector>::One << ScrollBarBase::VerticalMaxButtonFieldId);

const OSG::BitVector  ScrollBarBase::VerticalScrollBarFieldMask = 
    (TypeTraits<BitVector>::One << ScrollBarBase::VerticalScrollBarFieldId);

const OSG::BitVector  ScrollBarBase::VerticalScrollFieldFieldMask = 
    (TypeTraits<BitVector>::One << ScrollBarBase::VerticalScrollFieldFieldId);

const OSG::BitVector  ScrollBarBase::HorizontalMinButtonFieldMask = 
    (TypeTraits<BitVector>::One << ScrollBarBase::HorizontalMinButtonFieldId);

const OSG::BitVector  ScrollBarBase::HorizontalMaxButtonFieldMask = 
    (TypeTraits<BitVector>::One << ScrollBarBase::HorizontalMaxButtonFieldId);

const OSG::BitVector  ScrollBarBase::HorizontalScrollBarFieldMask = 
    (TypeTraits<BitVector>::One << ScrollBarBase::HorizontalScrollBarFieldId);

const OSG::BitVector  ScrollBarBase::HorizontalScrollFieldFieldMask = 
    (TypeTraits<BitVector>::One << ScrollBarBase::HorizontalScrollFieldFieldId);

const OSG::BitVector  ScrollBarBase::ScrollBarMinLengthFieldMask = 
    (TypeTraits<BitVector>::One << ScrollBarBase::ScrollBarMinLengthFieldId);

const OSG::BitVector  ScrollBarBase::RangeModelFieldMask = 
    (TypeTraits<BitVector>::One << ScrollBarBase::RangeModelFieldId);

const OSG::BitVector ScrollBarBase::MTInfluenceMask = 
    (Inherited::MTInfluenceMask) | 
    (static_cast<BitVector>(0x0) << Inherited::NextFieldId); 


// Field descriptions

/*! \var UInt32          ScrollBarBase::_sfOrientation
    
*/
/*! \var UInt32          ScrollBarBase::_sfUnitIncrement
    
*/
/*! \var UInt32          ScrollBarBase::_sfBlockIncrement
    
*/
/*! \var ButtonPtr       ScrollBarBase::_sfVerticalMinButton
    
*/
/*! \var ButtonPtr       ScrollBarBase::_sfVerticalMaxButton
    
*/
/*! \var ButtonPtr       ScrollBarBase::_sfVerticalScrollBar
    
*/
/*! \var ButtonPtr       ScrollBarBase::_sfVerticalScrollField
    
*/
/*! \var ButtonPtr       ScrollBarBase::_sfHorizontalMinButton
    
*/
/*! \var ButtonPtr       ScrollBarBase::_sfHorizontalMaxButton
    
*/
/*! \var ButtonPtr       ScrollBarBase::_sfHorizontalScrollBar
    
*/
/*! \var ButtonPtr       ScrollBarBase::_sfHorizontalScrollField
    
*/
/*! \var UInt32          ScrollBarBase::_sfScrollBarMinLength
    
*/
/*! \var BoundedRangeModelPtr ScrollBarBase::_sfRangeModel
    
*/

//! ScrollBar description

FieldDescription *ScrollBarBase::_desc[] = 
{
    new FieldDescription(SFUInt32::getClassType(), 
                     "Orientation", 
                     OrientationFieldId, OrientationFieldMask,
                     false,
                     (FieldAccessMethod) &ScrollBarBase::getSFOrientation),
    new FieldDescription(SFUInt32::getClassType(), 
                     "UnitIncrement", 
                     UnitIncrementFieldId, UnitIncrementFieldMask,
                     false,
                     (FieldAccessMethod) &ScrollBarBase::getSFUnitIncrement),
    new FieldDescription(SFUInt32::getClassType(), 
                     "BlockIncrement", 
                     BlockIncrementFieldId, BlockIncrementFieldMask,
                     false,
                     (FieldAccessMethod) &ScrollBarBase::getSFBlockIncrement),
    new FieldDescription(SFButtonPtr::getClassType(), 
                     "VerticalMinButton", 
                     VerticalMinButtonFieldId, VerticalMinButtonFieldMask,
                     false,
                     (FieldAccessMethod) &ScrollBarBase::getSFVerticalMinButton),
    new FieldDescription(SFButtonPtr::getClassType(), 
                     "VerticalMaxButton", 
                     VerticalMaxButtonFieldId, VerticalMaxButtonFieldMask,
                     false,
                     (FieldAccessMethod) &ScrollBarBase::getSFVerticalMaxButton),
    new FieldDescription(SFButtonPtr::getClassType(), 
                     "VerticalScrollBar", 
                     VerticalScrollBarFieldId, VerticalScrollBarFieldMask,
                     false,
                     (FieldAccessMethod) &ScrollBarBase::getSFVerticalScrollBar),
    new FieldDescription(SFButtonPtr::getClassType(), 
                     "VerticalScrollField", 
                     VerticalScrollFieldFieldId, VerticalScrollFieldFieldMask,
                     false,
                     (FieldAccessMethod) &ScrollBarBase::getSFVerticalScrollField),
    new FieldDescription(SFButtonPtr::getClassType(), 
                     "HorizontalMinButton", 
                     HorizontalMinButtonFieldId, HorizontalMinButtonFieldMask,
                     false,
                     (FieldAccessMethod) &ScrollBarBase::getSFHorizontalMinButton),
    new FieldDescription(SFButtonPtr::getClassType(), 
                     "HorizontalMaxButton", 
                     HorizontalMaxButtonFieldId, HorizontalMaxButtonFieldMask,
                     false,
                     (FieldAccessMethod) &ScrollBarBase::getSFHorizontalMaxButton),
    new FieldDescription(SFButtonPtr::getClassType(), 
                     "HorizontalScrollBar", 
                     HorizontalScrollBarFieldId, HorizontalScrollBarFieldMask,
                     false,
                     (FieldAccessMethod) &ScrollBarBase::getSFHorizontalScrollBar),
    new FieldDescription(SFButtonPtr::getClassType(), 
                     "HorizontalScrollField", 
                     HorizontalScrollFieldFieldId, HorizontalScrollFieldFieldMask,
                     false,
                     (FieldAccessMethod) &ScrollBarBase::getSFHorizontalScrollField),
    new FieldDescription(SFUInt32::getClassType(), 
                     "ScrollBarMinLength", 
                     ScrollBarMinLengthFieldId, ScrollBarMinLengthFieldMask,
                     false,
                     (FieldAccessMethod) &ScrollBarBase::getSFScrollBarMinLength),
    new FieldDescription(SFBoundedRangeModelPtr::getClassType(), 
                     "RangeModel", 
                     RangeModelFieldId, RangeModelFieldMask,
                     false,
                     (FieldAccessMethod) &ScrollBarBase::getSFRangeModel)
};


FieldContainerType ScrollBarBase::_type(
    "ScrollBar",
    "Container",
    NULL,
    (PrototypeCreateF) &ScrollBarBase::createEmpty,
    ScrollBar::initMethod,
    _desc,
    sizeof(_desc));

//OSG_FIELD_CONTAINER_DEF(ScrollBarBase, ScrollBarPtr)

/*------------------------------ get -----------------------------------*/

FieldContainerType &ScrollBarBase::getType(void) 
{
    return _type; 
} 

const FieldContainerType &ScrollBarBase::getType(void) const 
{
    return _type;
} 


FieldContainerPtr ScrollBarBase::shallowCopy(void) const 
{ 
    ScrollBarPtr returnValue; 

    newPtr(returnValue, dynamic_cast<const ScrollBar *>(this)); 

    return returnValue; 
}

UInt32 ScrollBarBase::getContainerSize(void) const 
{ 
    return sizeof(ScrollBar); 
}


#if !defined(OSG_FIXED_MFIELDSYNC)
void ScrollBarBase::executeSync(      FieldContainer &other,
                                    const BitVector      &whichField)
{
    this->executeSyncImpl((ScrollBarBase *) &other, whichField);
}
#else
void ScrollBarBase::executeSync(      FieldContainer &other,
                                    const BitVector      &whichField,                                    const SyncInfo       &sInfo     )
{
    this->executeSyncImpl((ScrollBarBase *) &other, whichField, sInfo);
}
void ScrollBarBase::execBeginEdit(const BitVector &whichField, 
                                            UInt32     uiAspect,
                                            UInt32     uiContainerSize) 
{
    this->execBeginEditImpl(whichField, uiAspect, uiContainerSize);
}

void ScrollBarBase::onDestroyAspect(UInt32 uiId, UInt32 uiAspect)
{
    Inherited::onDestroyAspect(uiId, uiAspect);

}
#endif

/*------------------------- constructors ----------------------------------*/

#ifdef OSG_WIN32_ICL
#pragma warning (disable : 383)
#endif

ScrollBarBase::ScrollBarBase(void) :
    _sfOrientation            (UInt32(ScrollBar::VERTICAL_ORIENTATION)), 
    _sfUnitIncrement          (UInt32(1)), 
    _sfBlockIncrement         (UInt32(2)), 
    _sfVerticalMinButton      (ButtonPtr(NullFC)), 
    _sfVerticalMaxButton      (ButtonPtr(NullFC)), 
    _sfVerticalScrollBar      (ButtonPtr(NullFC)), 
    _sfVerticalScrollField    (ButtonPtr(NullFC)), 
    _sfHorizontalMinButton    (ButtonPtr(NullFC)), 
    _sfHorizontalMaxButton    (ButtonPtr(NullFC)), 
    _sfHorizontalScrollBar    (ButtonPtr(NullFC)), 
    _sfHorizontalScrollField  (ButtonPtr(NullFC)), 
    _sfScrollBarMinLength     (UInt32(20)), 
    _sfRangeModel             (BoundedRangeModelPtr(NullFC)), 
    Inherited() 
{
}

#ifdef OSG_WIN32_ICL
#pragma warning (default : 383)
#endif

ScrollBarBase::ScrollBarBase(const ScrollBarBase &source) :
    _sfOrientation            (source._sfOrientation            ), 
    _sfUnitIncrement          (source._sfUnitIncrement          ), 
    _sfBlockIncrement         (source._sfBlockIncrement         ), 
    _sfVerticalMinButton      (source._sfVerticalMinButton      ), 
    _sfVerticalMaxButton      (source._sfVerticalMaxButton      ), 
    _sfVerticalScrollBar      (source._sfVerticalScrollBar      ), 
    _sfVerticalScrollField    (source._sfVerticalScrollField    ), 
    _sfHorizontalMinButton    (source._sfHorizontalMinButton    ), 
    _sfHorizontalMaxButton    (source._sfHorizontalMaxButton    ), 
    _sfHorizontalScrollBar    (source._sfHorizontalScrollBar    ), 
    _sfHorizontalScrollField  (source._sfHorizontalScrollField  ), 
    _sfScrollBarMinLength     (source._sfScrollBarMinLength     ), 
    _sfRangeModel             (source._sfRangeModel             ), 
    Inherited                 (source)
{
}

/*-------------------------- destructors ----------------------------------*/

ScrollBarBase::~ScrollBarBase(void)
{
}

/*------------------------------ access -----------------------------------*/

UInt32 ScrollBarBase::getBinSize(const BitVector &whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (OrientationFieldMask & whichField))
    {
        returnValue += _sfOrientation.getBinSize();
    }

    if(FieldBits::NoField != (UnitIncrementFieldMask & whichField))
    {
        returnValue += _sfUnitIncrement.getBinSize();
    }

    if(FieldBits::NoField != (BlockIncrementFieldMask & whichField))
    {
        returnValue += _sfBlockIncrement.getBinSize();
    }

    if(FieldBits::NoField != (VerticalMinButtonFieldMask & whichField))
    {
        returnValue += _sfVerticalMinButton.getBinSize();
    }

    if(FieldBits::NoField != (VerticalMaxButtonFieldMask & whichField))
    {
        returnValue += _sfVerticalMaxButton.getBinSize();
    }

    if(FieldBits::NoField != (VerticalScrollBarFieldMask & whichField))
    {
        returnValue += _sfVerticalScrollBar.getBinSize();
    }

    if(FieldBits::NoField != (VerticalScrollFieldFieldMask & whichField))
    {
        returnValue += _sfVerticalScrollField.getBinSize();
    }

    if(FieldBits::NoField != (HorizontalMinButtonFieldMask & whichField))
    {
        returnValue += _sfHorizontalMinButton.getBinSize();
    }

    if(FieldBits::NoField != (HorizontalMaxButtonFieldMask & whichField))
    {
        returnValue += _sfHorizontalMaxButton.getBinSize();
    }

    if(FieldBits::NoField != (HorizontalScrollBarFieldMask & whichField))
    {
        returnValue += _sfHorizontalScrollBar.getBinSize();
    }

    if(FieldBits::NoField != (HorizontalScrollFieldFieldMask & whichField))
    {
        returnValue += _sfHorizontalScrollField.getBinSize();
    }

    if(FieldBits::NoField != (ScrollBarMinLengthFieldMask & whichField))
    {
        returnValue += _sfScrollBarMinLength.getBinSize();
    }

    if(FieldBits::NoField != (RangeModelFieldMask & whichField))
    {
        returnValue += _sfRangeModel.getBinSize();
    }


    return returnValue;
}

void ScrollBarBase::copyToBin(      BinaryDataHandler &pMem,
                                  const BitVector         &whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (OrientationFieldMask & whichField))
    {
        _sfOrientation.copyToBin(pMem);
    }

    if(FieldBits::NoField != (UnitIncrementFieldMask & whichField))
    {
        _sfUnitIncrement.copyToBin(pMem);
    }

    if(FieldBits::NoField != (BlockIncrementFieldMask & whichField))
    {
        _sfBlockIncrement.copyToBin(pMem);
    }

    if(FieldBits::NoField != (VerticalMinButtonFieldMask & whichField))
    {
        _sfVerticalMinButton.copyToBin(pMem);
    }

    if(FieldBits::NoField != (VerticalMaxButtonFieldMask & whichField))
    {
        _sfVerticalMaxButton.copyToBin(pMem);
    }

    if(FieldBits::NoField != (VerticalScrollBarFieldMask & whichField))
    {
        _sfVerticalScrollBar.copyToBin(pMem);
    }

    if(FieldBits::NoField != (VerticalScrollFieldFieldMask & whichField))
    {
        _sfVerticalScrollField.copyToBin(pMem);
    }

    if(FieldBits::NoField != (HorizontalMinButtonFieldMask & whichField))
    {
        _sfHorizontalMinButton.copyToBin(pMem);
    }

    if(FieldBits::NoField != (HorizontalMaxButtonFieldMask & whichField))
    {
        _sfHorizontalMaxButton.copyToBin(pMem);
    }

    if(FieldBits::NoField != (HorizontalScrollBarFieldMask & whichField))
    {
        _sfHorizontalScrollBar.copyToBin(pMem);
    }

    if(FieldBits::NoField != (HorizontalScrollFieldFieldMask & whichField))
    {
        _sfHorizontalScrollField.copyToBin(pMem);
    }

    if(FieldBits::NoField != (ScrollBarMinLengthFieldMask & whichField))
    {
        _sfScrollBarMinLength.copyToBin(pMem);
    }

    if(FieldBits::NoField != (RangeModelFieldMask & whichField))
    {
        _sfRangeModel.copyToBin(pMem);
    }


}

void ScrollBarBase::copyFromBin(      BinaryDataHandler &pMem,
                                    const BitVector    &whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (OrientationFieldMask & whichField))
    {
        _sfOrientation.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (UnitIncrementFieldMask & whichField))
    {
        _sfUnitIncrement.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (BlockIncrementFieldMask & whichField))
    {
        _sfBlockIncrement.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (VerticalMinButtonFieldMask & whichField))
    {
        _sfVerticalMinButton.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (VerticalMaxButtonFieldMask & whichField))
    {
        _sfVerticalMaxButton.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (VerticalScrollBarFieldMask & whichField))
    {
        _sfVerticalScrollBar.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (VerticalScrollFieldFieldMask & whichField))
    {
        _sfVerticalScrollField.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (HorizontalMinButtonFieldMask & whichField))
    {
        _sfHorizontalMinButton.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (HorizontalMaxButtonFieldMask & whichField))
    {
        _sfHorizontalMaxButton.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (HorizontalScrollBarFieldMask & whichField))
    {
        _sfHorizontalScrollBar.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (HorizontalScrollFieldFieldMask & whichField))
    {
        _sfHorizontalScrollField.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (ScrollBarMinLengthFieldMask & whichField))
    {
        _sfScrollBarMinLength.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (RangeModelFieldMask & whichField))
    {
        _sfRangeModel.copyFromBin(pMem);
    }


}

#if !defined(OSG_FIXED_MFIELDSYNC)
void ScrollBarBase::executeSyncImpl(      ScrollBarBase *pOther,
                                        const BitVector         &whichField)
{

    Inherited::executeSyncImpl(pOther, whichField);

    if(FieldBits::NoField != (OrientationFieldMask & whichField))
        _sfOrientation.syncWith(pOther->_sfOrientation);

    if(FieldBits::NoField != (UnitIncrementFieldMask & whichField))
        _sfUnitIncrement.syncWith(pOther->_sfUnitIncrement);

    if(FieldBits::NoField != (BlockIncrementFieldMask & whichField))
        _sfBlockIncrement.syncWith(pOther->_sfBlockIncrement);

    if(FieldBits::NoField != (VerticalMinButtonFieldMask & whichField))
        _sfVerticalMinButton.syncWith(pOther->_sfVerticalMinButton);

    if(FieldBits::NoField != (VerticalMaxButtonFieldMask & whichField))
        _sfVerticalMaxButton.syncWith(pOther->_sfVerticalMaxButton);

    if(FieldBits::NoField != (VerticalScrollBarFieldMask & whichField))
        _sfVerticalScrollBar.syncWith(pOther->_sfVerticalScrollBar);

    if(FieldBits::NoField != (VerticalScrollFieldFieldMask & whichField))
        _sfVerticalScrollField.syncWith(pOther->_sfVerticalScrollField);

    if(FieldBits::NoField != (HorizontalMinButtonFieldMask & whichField))
        _sfHorizontalMinButton.syncWith(pOther->_sfHorizontalMinButton);

    if(FieldBits::NoField != (HorizontalMaxButtonFieldMask & whichField))
        _sfHorizontalMaxButton.syncWith(pOther->_sfHorizontalMaxButton);

    if(FieldBits::NoField != (HorizontalScrollBarFieldMask & whichField))
        _sfHorizontalScrollBar.syncWith(pOther->_sfHorizontalScrollBar);

    if(FieldBits::NoField != (HorizontalScrollFieldFieldMask & whichField))
        _sfHorizontalScrollField.syncWith(pOther->_sfHorizontalScrollField);

    if(FieldBits::NoField != (ScrollBarMinLengthFieldMask & whichField))
        _sfScrollBarMinLength.syncWith(pOther->_sfScrollBarMinLength);

    if(FieldBits::NoField != (RangeModelFieldMask & whichField))
        _sfRangeModel.syncWith(pOther->_sfRangeModel);


}
#else
void ScrollBarBase::executeSyncImpl(      ScrollBarBase *pOther,
                                        const BitVector         &whichField,
                                        const SyncInfo          &sInfo      )
{

    Inherited::executeSyncImpl(pOther, whichField, sInfo);

    if(FieldBits::NoField != (OrientationFieldMask & whichField))
        _sfOrientation.syncWith(pOther->_sfOrientation);

    if(FieldBits::NoField != (UnitIncrementFieldMask & whichField))
        _sfUnitIncrement.syncWith(pOther->_sfUnitIncrement);

    if(FieldBits::NoField != (BlockIncrementFieldMask & whichField))
        _sfBlockIncrement.syncWith(pOther->_sfBlockIncrement);

    if(FieldBits::NoField != (VerticalMinButtonFieldMask & whichField))
        _sfVerticalMinButton.syncWith(pOther->_sfVerticalMinButton);

    if(FieldBits::NoField != (VerticalMaxButtonFieldMask & whichField))
        _sfVerticalMaxButton.syncWith(pOther->_sfVerticalMaxButton);

    if(FieldBits::NoField != (VerticalScrollBarFieldMask & whichField))
        _sfVerticalScrollBar.syncWith(pOther->_sfVerticalScrollBar);

    if(FieldBits::NoField != (VerticalScrollFieldFieldMask & whichField))
        _sfVerticalScrollField.syncWith(pOther->_sfVerticalScrollField);

    if(FieldBits::NoField != (HorizontalMinButtonFieldMask & whichField))
        _sfHorizontalMinButton.syncWith(pOther->_sfHorizontalMinButton);

    if(FieldBits::NoField != (HorizontalMaxButtonFieldMask & whichField))
        _sfHorizontalMaxButton.syncWith(pOther->_sfHorizontalMaxButton);

    if(FieldBits::NoField != (HorizontalScrollBarFieldMask & whichField))
        _sfHorizontalScrollBar.syncWith(pOther->_sfHorizontalScrollBar);

    if(FieldBits::NoField != (HorizontalScrollFieldFieldMask & whichField))
        _sfHorizontalScrollField.syncWith(pOther->_sfHorizontalScrollField);

    if(FieldBits::NoField != (ScrollBarMinLengthFieldMask & whichField))
        _sfScrollBarMinLength.syncWith(pOther->_sfScrollBarMinLength);

    if(FieldBits::NoField != (RangeModelFieldMask & whichField))
        _sfRangeModel.syncWith(pOther->_sfRangeModel);



}

void ScrollBarBase::execBeginEditImpl (const BitVector &whichField, 
                                                 UInt32     uiAspect,
                                                 UInt32     uiContainerSize)
{
    Inherited::execBeginEditImpl(whichField, uiAspect, uiContainerSize);

}
#endif



OSG_END_NAMESPACE

#include <OpenSG/OSGSFieldTypeDef.inl>
#include <OpenSG/OSGMFieldTypeDef.inl>

OSG_BEGIN_NAMESPACE

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldDataTraits<ScrollBarPtr>::_type("ScrollBarPtr", "ContainerPtr");
#endif

OSG_DLLEXPORT_SFIELD_DEF1(ScrollBarPtr, OSG_USERINTERFACELIB_DLLTMPLMAPPING);
OSG_DLLEXPORT_MFIELD_DEF1(ScrollBarPtr, OSG_USERINTERFACELIB_DLLTMPLMAPPING);


/*------------------------------------------------------------------------*/
/*                              cvs id's                                  */

#ifdef OSG_SGI_CC
#pragma set woff 1174
#endif

#ifdef OSG_LINUX_ICC
#pragma warning( disable : 177 )
#endif

namespace
{
    static Char8 cvsid_cpp       [] = "@(#)$Id: FCBaseTemplate_cpp.h,v 1.47 2006/03/17 17:03:19 pdaehne Exp $";
    static Char8 cvsid_hpp       [] = OSGSCROLLBARBASE_HEADER_CVSID;
    static Char8 cvsid_inl       [] = OSGSCROLLBARBASE_INLINE_CVSID;

    static Char8 cvsid_fields_hpp[] = OSGSCROLLBARFIELDS_HEADER_CVSID;
}

OSG_END_NAMESPACE

