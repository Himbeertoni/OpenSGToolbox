/*---------------------------------------------------------------------------*\
 *                     OpenSG ToolBox UserInterface                          *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *   Authors: David Kabala, Alden Peterson, Lee Zaniewski, Jonathan Flory    *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class TableColumn!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <OpenSG/OSGConfig.h>

OSG_BEGIN_NAMESPACE


//! access the type of the class
inline
OSG::FieldContainerType &TableColumnBase::getClassType(void)
{
    return _type; 
} 

//! access the numerical type of the class
inline
OSG::UInt32 TableColumnBase::getClassTypeId(void) 
{
    return _type.getId(); 
} 

//! create a new instance of the class
inline
TableColumnPtr TableColumnBase::create(void) 
{
    TableColumnPtr fc; 

    if(getClassType().getPrototype() != OSG::NullFC) 
    {
        fc = TableColumnPtr::dcast(
            getClassType().getPrototype()-> shallowCopy()); 
    }
    
    return fc; 
}

//! create an empty new instance of the class, do not copy the prototype
inline
TableColumnPtr TableColumnBase::createEmpty(void) 
{ 
    TableColumnPtr returnValue; 
    
    newPtr(returnValue); 

    return returnValue; 
}


/*------------------------------ get -----------------------------------*/

//! Get the TableColumn::_sfMaxWidth field.
inline
SFUInt32 *TableColumnBase::getSFMaxWidth(void)
{
    return &_sfMaxWidth;
}

//! Get the TableColumn::_sfMinWidth field.
inline
SFUInt32 *TableColumnBase::getSFMinWidth(void)
{
    return &_sfMinWidth;
}

//! Get the TableColumn::_sfModelIndex field.
inline
SFUInt32 *TableColumnBase::getSFModelIndex(void)
{
    return &_sfModelIndex;
}

//! Get the TableColumn::_sfPreferredWidth field.
inline
SFUInt32 *TableColumnBase::getSFPreferredWidth(void)
{
    return &_sfPreferredWidth;
}

//! Get the TableColumn::_sfWidth field.
inline
SFUInt32 *TableColumnBase::getSFWidth(void)
{
    return &_sfWidth;
}

//! Get the TableColumn::_sfResizable field.
inline
SFBool *TableColumnBase::getSFResizable(void)
{
    return &_sfResizable;
}

//! Get the TableColumn::_sfCellEditor field.
inline
SFTableCellEditorPtr *TableColumnBase::getSFCellEditor(void)
{
    return &_sfCellEditor;
}


//! Get the value of the TableColumn::_sfMaxWidth field.
inline
UInt32 &TableColumnBase::getMaxWidth(void)
{
    return _sfMaxWidth.getValue();
}

//! Get the value of the TableColumn::_sfMaxWidth field.
inline
const UInt32 &TableColumnBase::getMaxWidth(void) const
{
    return _sfMaxWidth.getValue();
}

//! Set the value of the TableColumn::_sfMaxWidth field.
inline
void TableColumnBase::setMaxWidth(const UInt32 &value)
{
    _sfMaxWidth.setValue(value);
}

//! Get the value of the TableColumn::_sfMinWidth field.
inline
UInt32 &TableColumnBase::getMinWidth(void)
{
    return _sfMinWidth.getValue();
}

//! Get the value of the TableColumn::_sfMinWidth field.
inline
const UInt32 &TableColumnBase::getMinWidth(void) const
{
    return _sfMinWidth.getValue();
}

//! Set the value of the TableColumn::_sfMinWidth field.
inline
void TableColumnBase::setMinWidth(const UInt32 &value)
{
    _sfMinWidth.setValue(value);
}

//! Get the value of the TableColumn::_sfModelIndex field.
inline
UInt32 &TableColumnBase::getModelIndex(void)
{
    return _sfModelIndex.getValue();
}

//! Get the value of the TableColumn::_sfModelIndex field.
inline
const UInt32 &TableColumnBase::getModelIndex(void) const
{
    return _sfModelIndex.getValue();
}

//! Set the value of the TableColumn::_sfModelIndex field.
inline
void TableColumnBase::setModelIndex(const UInt32 &value)
{
    _sfModelIndex.setValue(value);
}

//! Get the value of the TableColumn::_sfPreferredWidth field.
inline
UInt32 &TableColumnBase::getPreferredWidth(void)
{
    return _sfPreferredWidth.getValue();
}

//! Get the value of the TableColumn::_sfPreferredWidth field.
inline
const UInt32 &TableColumnBase::getPreferredWidth(void) const
{
    return _sfPreferredWidth.getValue();
}

//! Set the value of the TableColumn::_sfPreferredWidth field.
inline
void TableColumnBase::setPreferredWidth(const UInt32 &value)
{
    _sfPreferredWidth.setValue(value);
}

//! Get the value of the TableColumn::_sfWidth field.
inline
UInt32 &TableColumnBase::getWidth(void)
{
    return _sfWidth.getValue();
}

//! Get the value of the TableColumn::_sfWidth field.
inline
const UInt32 &TableColumnBase::getWidth(void) const
{
    return _sfWidth.getValue();
}

//! Set the value of the TableColumn::_sfWidth field.
inline
void TableColumnBase::setWidth(const UInt32 &value)
{
    _sfWidth.setValue(value);
}

//! Get the value of the TableColumn::_sfResizable field.
inline
bool &TableColumnBase::getResizable(void)
{
    return _sfResizable.getValue();
}

//! Get the value of the TableColumn::_sfResizable field.
inline
const bool &TableColumnBase::getResizable(void) const
{
    return _sfResizable.getValue();
}

//! Set the value of the TableColumn::_sfResizable field.
inline
void TableColumnBase::setResizable(const bool &value)
{
    _sfResizable.setValue(value);
}

//! Get the value of the TableColumn::_sfCellEditor field.
inline
TableCellEditorPtr &TableColumnBase::getCellEditor(void)
{
    return _sfCellEditor.getValue();
}

//! Get the value of the TableColumn::_sfCellEditor field.
inline
const TableCellEditorPtr &TableColumnBase::getCellEditor(void) const
{
    return _sfCellEditor.getValue();
}

//! Set the value of the TableColumn::_sfCellEditor field.
inline
void TableColumnBase::setCellEditor(const TableCellEditorPtr &value)
{
    _sfCellEditor.setValue(value);
}


OSG_END_NAMESPACE

#define OSGTABLECOLUMNBASE_INLINE_CVSID "@(#)$Id: FCBaseTemplate_inl.h,v 1.20 2002/12/04 14:22:22 dirk Exp $"

