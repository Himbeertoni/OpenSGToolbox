/*---------------------------------------------------------------------------*\
 *                     OpenSG ToolBox UserInterface                          *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                         www.vrac.iastate.edu                              *
 *                                                                           *
 *                          Authors: David Kabala                            *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class TextComponent
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#ifndef _OSGTEXTCOMPONENTBASE_H_
#define _OSGTEXTCOMPONENTBASE_H_
#ifdef __sgi
#pragma once
#endif


#include <OpenSG/OSGConfig.h>
#include "OSGUserInterfaceDef.h"

#include <OpenSG/OSGBaseTypes.h>
#include <OpenSG/OSGRefPtr.h>
#include <OpenSG/OSGCoredNodePtr.h>

#include "Component/Container/OSGContainer.h" // Parent

#include <OpenSG/OSGStringFields.h> // Text type
#include <OpenSG/OSGUInt32Fields.h> // CaretPosition type
#include "Text/OSGUIFont.h" // Font type
#include <OpenSG/OSGColor4fFields.h> // SelectionBoxColor type
#include <OpenSG/OSGColor4fFields.h> // SelectionTextColor type
#include <OpenSG/OSGColor4fFields.h> // ActiveTextColor type
#include <OpenSG/OSGColor4fFields.h> // FocusedTextColor type
#include <OpenSG/OSGColor4fFields.h> // RolloverTextColor type
#include <OpenSG/OSGColor4fFields.h> // DisabledTextColor type
#include <OpenSG/OSGColor4fFields.h> // TextColor type

#include "OSGTextComponentFields.h"
#include <OpenSG/Toolbox/OSGEventProducer.h>
#include <OpenSG/Toolbox/OSGEventProducerType.h>
#include <OpenSG/Toolbox/OSGMethodDescription.h>

OSG_BEGIN_NAMESPACE

class TextComponent;
class BinaryDataHandler;

//! \brief TextComponent Base Class.

class OSG_USERINTERFACELIB_DLLMAPPING TextComponentBase : public Component
{
  private:

    typedef Component    Inherited;
    typedef Component    ProducerInherited;

    /*==========================  PUBLIC  =================================*/
  public:

    typedef TextComponentPtr  Ptr;

    enum
    {
        TextFieldId               = Inherited::NextFieldId,
        CaretPositionFieldId      = TextFieldId               + 1,
        FontFieldId               = CaretPositionFieldId      + 1,
        SelectionBoxColorFieldId  = FontFieldId               + 1,
        SelectionTextColorFieldId = SelectionBoxColorFieldId  + 1,
        ActiveTextColorFieldId    = SelectionTextColorFieldId + 1,
        FocusedTextColorFieldId   = ActiveTextColorFieldId    + 1,
        RolloverTextColorFieldId  = FocusedTextColorFieldId   + 1,
        DisabledTextColorFieldId  = RolloverTextColorFieldId  + 1,
        TextColorFieldId          = DisabledTextColorFieldId  + 1,
        NextFieldId               = TextColorFieldId          + 1
    };

    static const OSG::BitVector TextFieldMask;
    static const OSG::BitVector CaretPositionFieldMask;
    static const OSG::BitVector FontFieldMask;
    static const OSG::BitVector SelectionBoxColorFieldMask;
    static const OSG::BitVector SelectionTextColorFieldMask;
    static const OSG::BitVector ActiveTextColorFieldMask;
    static const OSG::BitVector FocusedTextColorFieldMask;
    static const OSG::BitVector RolloverTextColorFieldMask;
    static const OSG::BitVector DisabledTextColorFieldMask;
    static const OSG::BitVector TextColorFieldMask;


    enum
    {
        TextValueChangedMethodId = ProducerInherited::NextMethodId,
        CaretChangedMethodId     = TextValueChangedMethodId + 1,
        NextMethodId             = CaretChangedMethodId     + 1
    };



    static const OSG::BitVector MTInfluenceMask;

    /*---------------------------------------------------------------------*/
    /*! \name                    Class Get                                 */
    /*! \{                                                                 */

    static        FieldContainerType &getClassType    (void); 
    static        UInt32              getClassTypeId  (void); 
    static const  EventProducerType  &getProducerClassType  (void); 
    static        UInt32              getProducerClassTypeId(void); 

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                FieldContainer Get                            */
    /*! \{                                                                 */

    virtual       FieldContainerType &getType  (void); 
    virtual const FieldContainerType &getType  (void) const; 

    virtual       UInt32              getContainerSize(void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Get                                 */
    /*! \{                                                                 */


           SFString            *editSFText           (void);
     const SFString            *getSFText           (void) const;

           SFUInt32            *editSFCaretPosition  (void);
     const SFUInt32            *getSFCaretPosition  (void) const;

           SFUIFontPtr         *editSFFont           (void);
     const SFUIFontPtr         *getSFFont           (void) const;

           SFColor4f           *editSFSelectionBoxColor(void);
     const SFColor4f           *getSFSelectionBoxColor(void) const;

           SFColor4f           *editSFSelectionTextColor(void);
     const SFColor4f           *getSFSelectionTextColor(void) const;

           SFColor4f           *editSFActiveTextColor(void);
     const SFColor4f           *getSFActiveTextColor(void) const;

           SFColor4f           *editSFFocusedTextColor(void);
     const SFColor4f           *getSFFocusedTextColor(void) const;

           SFColor4f           *editSFRolloverTextColor(void);
     const SFColor4f           *getSFRolloverTextColor(void) const;

           SFColor4f           *editSFDisabledTextColor(void);
     const SFColor4f           *getSFDisabledTextColor(void) const;

           SFColor4f           *editSFTextColor      (void);
     const SFColor4f           *getSFTextColor      (void) const;


           std::string         &editText           (void);
     const std::string         &getText           (void) const;

           UInt32              &editCaretPosition  (void);
     const UInt32              &getCaretPosition  (void) const;

           UIFontPtr           &editFont           (void);
     const UIFontPtr           &getFont           (void) const;

           Color4f             &editSelectionBoxColor(void);
     const Color4f             &getSelectionBoxColor(void) const;

           Color4f             &editSelectionTextColor(void);
     const Color4f             &getSelectionTextColor(void) const;

           Color4f             &editActiveTextColor(void);
     const Color4f             &getActiveTextColor(void) const;

           Color4f             &editFocusedTextColor(void);
     const Color4f             &getFocusedTextColor(void) const;

           Color4f             &editRolloverTextColor(void);
     const Color4f             &getRolloverTextColor(void) const;

           Color4f             &editDisabledTextColor(void);
     const Color4f             &getDisabledTextColor(void) const;

           Color4f             &editTextColor      (void);
     const Color4f             &getTextColor      (void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Set                                 */
    /*! \{                                                                 */

     void setText           ( const std::string &value );
     void setCaretPosition  ( const UInt32 &value );
     void setFont           ( const UIFontPtr &value );
     void setSelectionBoxColor( const Color4f &value );
     void setSelectionTextColor( const Color4f &value );
     void setActiveTextColor( const Color4f &value );
     void setFocusedTextColor( const Color4f &value );
     void setRolloverTextColor( const Color4f &value );
     void setDisabledTextColor( const Color4f &value );
     void setTextColor      ( const Color4f &value );

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                Method Produced Get                           */
    /*! \{                                                                 */

    virtual const EventProducerType &getProducerType(void) const; 

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Binary Access                              */
    /*! \{                                                                 */

    virtual UInt32 getBinSize (const BitVector         &whichField);
    virtual void   copyToBin  (      BinaryDataHandler &pMem,
                               const BitVector         &whichField);
    virtual void   copyFromBin(      BinaryDataHandler &pMem,
                               const BitVector         &whichField);


    /*! \}                                                                 */
    /*=========================  PROTECTED  ===============================*/
  protected:

    /*---------------------------------------------------------------------*/
    /*! \name                      Fields                                  */
    /*! \{                                                                 */

    SFString            _sfText;
    SFUInt32            _sfCaretPosition;
    SFUIFontPtr         _sfFont;
    SFColor4f           _sfSelectionBoxColor;
    SFColor4f           _sfSelectionTextColor;
    SFColor4f           _sfActiveTextColor;
    SFColor4f           _sfFocusedTextColor;
    SFColor4f           _sfRolloverTextColor;
    SFColor4f           _sfDisabledTextColor;
    SFColor4f           _sfTextColor;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Constructors                               */
    /*! \{                                                                 */

    TextComponentBase(void);
    TextComponentBase(const TextComponentBase &source);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Destructors                                */
    /*! \{                                                                 */

    virtual ~TextComponentBase(void); 

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

#if !defined(OSG_FIXED_MFIELDSYNC)
    void executeSyncImpl(      TextComponentBase *pOther,
                         const BitVector         &whichField);

    virtual void   executeSync(      FieldContainer    &other,
                               const BitVector         &whichField);
#else
    void executeSyncImpl(      TextComponentBase *pOther,
                         const BitVector         &whichField,
                         const SyncInfo          &sInfo     );

    virtual void   executeSync(      FieldContainer    &other,
                               const BitVector         &whichField,
                               const SyncInfo          &sInfo);

    virtual void execBeginEdit     (const BitVector &whichField,
                                          UInt32     uiAspect,
                                          UInt32     uiContainerSize);

            void execBeginEditImpl (const BitVector &whichField,
                                          UInt32     uiAspect,
                                          UInt32     uiContainerSize);

    virtual void onDestroyAspect(UInt32 uiId, UInt32 uiAspect);
#endif

    /*! \}                                                                 */
    /*==========================  PRIVATE  ================================*/
  private:

    friend class FieldContainer;

    static MethodDescription   *_methodDesc[];
    static EventProducerType _producerType;

    static FieldDescription   *_desc[];
    static FieldContainerType  _type;


    // prohibit default functions (move to 'public' if you need one)
    void operator =(const TextComponentBase &source);
};

//---------------------------------------------------------------------------
//   Exported Types
//---------------------------------------------------------------------------


typedef TextComponentBase *TextComponentBaseP;

typedef osgIF<TextComponentBase::isNodeCore,
              CoredNodePtr<TextComponent>,
              FieldContainer::attempt_to_create_CoredNodePtr_on_non_NodeCore_FC
              >::_IRet TextComponentNodePtr;

typedef RefPtr<TextComponentPtr> TextComponentRefPtr;

OSG_END_NAMESPACE

#endif /* _OSGTEXTCOMPONENTBASE_H_ */
