/*---------------------------------------------------------------------------*\
 *                     OpenSG ToolBox UserInterface                          *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                         www.vrac.iastate.edu                              *
 *                                                                           *
 *                          Authors: David Kabala                            *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class Tree
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#ifndef _OSGTREEBASE_H_
#define _OSGTREEBASE_H_
#ifdef __sgi
#pragma once
#endif


#include <OpenSG/OSGConfig.h>
#include "OSGUserInterfaceDef.h"

#include <OpenSG/OSGBaseTypes.h>
#include <OpenSG/OSGRefPtr.h>
#include <OpenSG/OSGCoredNodePtr.h>

#include "Component/Container/OSGContainer.h" // Parent

#include "Component/Tree/Model/OSGTreeModelFields.h" // Model type
#include <OpenSG/OSGBoolFields.h> // Editable type
#include <OpenSG/OSGBoolFields.h> // ExpandsSelectedPaths type
#include <OpenSG/OSGBoolFields.h> // InvokesStopCellEditing type
#include <OpenSG/OSGUInt32Fields.h> // RowHeight type
#include <OpenSG/OSGBoolFields.h> // ScrollsOnExpand type
#include <OpenSG/OSGBoolFields.h> // ShowsRootHandles type
#include <OpenSG/OSGUInt32Fields.h> // ToggleClickCount type
#include <OpenSG/OSGUInt32Fields.h> // VisibleRowCount type
#include "Editors/OSGCellEditorFields.h" // CellEditor type
#include "ComponentGenerators/OSGComponentGeneratorFields.h" // CellGenerator type
#include "ModelLayout/OSGTreeModelLayoutFields.h" // ModelLayout type

#include "OSGTreeFields.h"

OSG_BEGIN_NAMESPACE

class Tree;
class BinaryDataHandler;

//! \brief Tree Base Class.

class OSG_USERINTERFACELIB_DLLMAPPING TreeBase : public Container
{
  private:

    typedef Container    Inherited;

    /*==========================  PUBLIC  =================================*/
  public:

    typedef TreePtr  Ptr;

    enum
    {
        ModelFieldId                  = Inherited::NextFieldId,
        EditableFieldId               = ModelFieldId                  + 1,
        ExpandsSelectedPathsFieldId   = EditableFieldId               + 1,
        InvokesStopCellEditingFieldId = ExpandsSelectedPathsFieldId   + 1,
        RowHeightFieldId              = InvokesStopCellEditingFieldId + 1,
        ScrollsOnExpandFieldId        = RowHeightFieldId              + 1,
        ShowsRootHandlesFieldId       = ScrollsOnExpandFieldId        + 1,
        ToggleClickCountFieldId       = ShowsRootHandlesFieldId       + 1,
        VisibleRowCountFieldId        = ToggleClickCountFieldId       + 1,
        CellEditorFieldId             = VisibleRowCountFieldId        + 1,
        CellGeneratorFieldId          = CellEditorFieldId             + 1,
        ModelLayoutFieldId            = CellGeneratorFieldId          + 1,
        NextFieldId                   = ModelLayoutFieldId            + 1
    };

    static const OSG::BitVector ModelFieldMask;
    static const OSG::BitVector EditableFieldMask;
    static const OSG::BitVector ExpandsSelectedPathsFieldMask;
    static const OSG::BitVector InvokesStopCellEditingFieldMask;
    static const OSG::BitVector RowHeightFieldMask;
    static const OSG::BitVector ScrollsOnExpandFieldMask;
    static const OSG::BitVector ShowsRootHandlesFieldMask;
    static const OSG::BitVector ToggleClickCountFieldMask;
    static const OSG::BitVector VisibleRowCountFieldMask;
    static const OSG::BitVector CellEditorFieldMask;
    static const OSG::BitVector CellGeneratorFieldMask;
    static const OSG::BitVector ModelLayoutFieldMask;


    static const OSG::BitVector MTInfluenceMask;

    /*---------------------------------------------------------------------*/
    /*! \name                    Class Get                                 */
    /*! \{                                                                 */

    static        FieldContainerType &getClassType    (void); 
    static        UInt32              getClassTypeId  (void); 

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                FieldContainer Get                            */
    /*! \{                                                                 */

    virtual       FieldContainerType &getType  (void); 
    virtual const FieldContainerType &getType  (void) const; 

    virtual       UInt32              getContainerSize(void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Get                                 */
    /*! \{                                                                 */


           SFTreeModelPtr      *editSFModel          (void);
     const SFTreeModelPtr      *getSFModel          (void) const;
#ifndef OSG_2_PREP
           SFTreeModelPtr      *getSFModel          (void);
#endif

           SFBool              *editSFEditable       (void);
     const SFBool              *getSFEditable       (void) const;
#ifndef OSG_2_PREP
           SFBool              *getSFEditable       (void);
#endif

           SFBool              *editSFExpandsSelectedPaths(void);
     const SFBool              *getSFExpandsSelectedPaths(void) const;
#ifndef OSG_2_PREP
           SFBool              *getSFExpandsSelectedPaths(void);
#endif

           SFBool              *editSFInvokesStopCellEditing(void);
     const SFBool              *getSFInvokesStopCellEditing(void) const;
#ifndef OSG_2_PREP
           SFBool              *getSFInvokesStopCellEditing(void);
#endif

           SFUInt32            *editSFRowHeight      (void);
     const SFUInt32            *getSFRowHeight      (void) const;
#ifndef OSG_2_PREP
           SFUInt32            *getSFRowHeight      (void);
#endif

           SFBool              *editSFScrollsOnExpand(void);
     const SFBool              *getSFScrollsOnExpand(void) const;
#ifndef OSG_2_PREP
           SFBool              *getSFScrollsOnExpand(void);
#endif

           SFBool              *editSFShowsRootHandles(void);
     const SFBool              *getSFShowsRootHandles(void) const;
#ifndef OSG_2_PREP
           SFBool              *getSFShowsRootHandles(void);
#endif

           SFUInt32            *editSFToggleClickCount(void);
     const SFUInt32            *getSFToggleClickCount(void) const;
#ifndef OSG_2_PREP
           SFUInt32            *getSFToggleClickCount(void);
#endif

           SFUInt32            *editSFVisibleRowCount(void);
     const SFUInt32            *getSFVisibleRowCount(void) const;
#ifndef OSG_2_PREP
           SFUInt32            *getSFVisibleRowCount(void);
#endif

           SFCellEditorPtr     *editSFCellEditor     (void);
     const SFCellEditorPtr     *getSFCellEditor     (void) const;
#ifndef OSG_2_PREP
           SFCellEditorPtr     *getSFCellEditor     (void);
#endif

           SFComponentGeneratorPtr *editSFCellGenerator  (void);
     const SFComponentGeneratorPtr *getSFCellGenerator  (void) const;
#ifndef OSG_2_PREP
           SFComponentGeneratorPtr *getSFCellGenerator  (void);
#endif

           SFTreeModelLayoutPtr *editSFModelLayout    (void);
     const SFTreeModelLayoutPtr *getSFModelLayout    (void) const;
#ifndef OSG_2_PREP
           SFTreeModelLayoutPtr *getSFModelLayout    (void);
#endif


           TreeModelPtr        &editModel          (void);
     const TreeModelPtr        &getModel          (void) const;
#ifndef OSG_2_PREP
           TreeModelPtr        &getModel          (void);
#endif

           bool                &editEditable       (void);
     const bool                &getEditable       (void) const;
#ifndef OSG_2_PREP
           bool                &getEditable       (void);
#endif

           bool                &editExpandsSelectedPaths(void);
     const bool                &getExpandsSelectedPaths(void) const;
#ifndef OSG_2_PREP
           bool                &getExpandsSelectedPaths(void);
#endif

           bool                &editInvokesStopCellEditing(void);
     const bool                &getInvokesStopCellEditing(void) const;
#ifndef OSG_2_PREP
           bool                &getInvokesStopCellEditing(void);
#endif

           UInt32              &editRowHeight      (void);
     const UInt32              &getRowHeight      (void) const;
#ifndef OSG_2_PREP
           UInt32              &getRowHeight      (void);
#endif

           bool                &editScrollsOnExpand(void);
     const bool                &getScrollsOnExpand(void) const;
#ifndef OSG_2_PREP
           bool                &getScrollsOnExpand(void);
#endif

           bool                &editShowsRootHandles(void);
     const bool                &getShowsRootHandles(void) const;
#ifndef OSG_2_PREP
           bool                &getShowsRootHandles(void);
#endif

           UInt32              &editToggleClickCount(void);
     const UInt32              &getToggleClickCount(void) const;
#ifndef OSG_2_PREP
           UInt32              &getToggleClickCount(void);
#endif

           UInt32              &editVisibleRowCount(void);
     const UInt32              &getVisibleRowCount(void) const;
#ifndef OSG_2_PREP
           UInt32              &getVisibleRowCount(void);
#endif

           CellEditorPtr       &editCellEditor     (void);
     const CellEditorPtr       &getCellEditor     (void) const;
#ifndef OSG_2_PREP
           CellEditorPtr       &getCellEditor     (void);
#endif

           ComponentGeneratorPtr &editCellGenerator  (void);
     const ComponentGeneratorPtr &getCellGenerator  (void) const;
#ifndef OSG_2_PREP
           ComponentGeneratorPtr &getCellGenerator  (void);
#endif

           TreeModelLayoutPtr  &editModelLayout    (void);
     const TreeModelLayoutPtr  &getModelLayout    (void) const;
#ifndef OSG_2_PREP
           TreeModelLayoutPtr  &getModelLayout    (void);
#endif

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Set                                 */
    /*! \{                                                                 */

     void setModel          ( const TreeModelPtr &value );
     void setEditable       ( const bool &value );
     void setExpandsSelectedPaths( const bool &value );
     void setInvokesStopCellEditing( const bool &value );
     void setRowHeight      ( const UInt32 &value );
     void setScrollsOnExpand( const bool &value );
     void setShowsRootHandles( const bool &value );
     void setToggleClickCount( const UInt32 &value );
     void setVisibleRowCount( const UInt32 &value );
     void setCellEditor     ( const CellEditorPtr &value );
     void setCellGenerator  ( const ComponentGeneratorPtr &value );
     void setModelLayout    ( const TreeModelLayoutPtr &value );

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Binary Access                              */
    /*! \{                                                                 */

    virtual UInt32 getBinSize (const BitVector         &whichField);
    virtual void   copyToBin  (      BinaryDataHandler &pMem,
                               const BitVector         &whichField);
    virtual void   copyFromBin(      BinaryDataHandler &pMem,
                               const BitVector         &whichField);


    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Construction                               */
    /*! \{                                                                 */

    static  TreePtr      create          (void); 
    static  TreePtr      createEmpty     (void); 

    /*! \}                                                                 */

    /*---------------------------------------------------------------------*/
    /*! \name                       Copy                                   */
    /*! \{                                                                 */

    virtual FieldContainerPtr     shallowCopy     (void) const; 

    /*! \}                                                                 */
    /*=========================  PROTECTED  ===============================*/
  protected:

    /*---------------------------------------------------------------------*/
    /*! \name                      Fields                                  */
    /*! \{                                                                 */

    SFTreeModelPtr      _sfModel;
    SFBool              _sfEditable;
    SFBool              _sfExpandsSelectedPaths;
    SFBool              _sfInvokesStopCellEditing;
    SFUInt32            _sfRowHeight;
    SFBool              _sfScrollsOnExpand;
    SFBool              _sfShowsRootHandles;
    SFUInt32            _sfToggleClickCount;
    SFUInt32            _sfVisibleRowCount;
    SFCellEditorPtr     _sfCellEditor;
    SFComponentGeneratorPtr   _sfCellGenerator;
    SFTreeModelLayoutPtr   _sfModelLayout;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Constructors                               */
    /*! \{                                                                 */

    TreeBase(void);
    TreeBase(const TreeBase &source);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Destructors                                */
    /*! \{                                                                 */

    virtual ~TreeBase(void); 

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

#if !defined(OSG_FIXED_MFIELDSYNC)
    void executeSyncImpl(      TreeBase *pOther,
                         const BitVector         &whichField);

    virtual void   executeSync(      FieldContainer    &other,
                               const BitVector         &whichField);
#else
    void executeSyncImpl(      TreeBase *pOther,
                         const BitVector         &whichField,
                         const SyncInfo          &sInfo     );

    virtual void   executeSync(      FieldContainer    &other,
                               const BitVector         &whichField,
                               const SyncInfo          &sInfo);

    virtual void execBeginEdit     (const BitVector &whichField,
                                          UInt32     uiAspect,
                                          UInt32     uiContainerSize);

            void execBeginEditImpl (const BitVector &whichField,
                                          UInt32     uiAspect,
                                          UInt32     uiContainerSize);

    virtual void onDestroyAspect(UInt32 uiId, UInt32 uiAspect);
#endif

    /*! \}                                                                 */
    /*==========================  PRIVATE  ================================*/
  private:

    friend class FieldContainer;

    static FieldDescription   *_desc[];
    static FieldContainerType  _type;


    // prohibit default functions (move to 'public' if you need one)
    void operator =(const TreeBase &source);
};

//---------------------------------------------------------------------------
//   Exported Types
//---------------------------------------------------------------------------


typedef TreeBase *TreeBaseP;

typedef osgIF<TreeBase::isNodeCore,
              CoredNodePtr<Tree>,
              FieldContainer::attempt_to_create_CoredNodePtr_on_non_NodeCore_FC
              >::_IRet TreeNodePtr;

typedef RefPtr<TreePtr> TreeRefPtr;

OSG_END_NAMESPACE

#endif /* _OSGTREEBASE_H_ */
