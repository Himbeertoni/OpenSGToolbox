/*---------------------------------------------------------------------------*\
 *                     OpenSG ToolBox UserInterface                          *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                          Authors: David Kabala                            *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class TextureLayer!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <OpenSG/OSGConfig.h>

OSG_BEGIN_NAMESPACE


//! access the type of the class
inline
OSG::FieldContainerType &TextureLayerBase::getClassType(void)
{
    return _type; 
} 

//! access the numerical type of the class
inline
OSG::UInt32 TextureLayerBase::getClassTypeId(void) 
{
    return _type.getId(); 
} 

//! create a new instance of the class
inline
TextureLayerPtr TextureLayerBase::create(void) 
{
    TextureLayerPtr fc; 

    if(getClassType().getPrototype() != OSG::NullFC) 
    {
        fc = TextureLayerPtr::dcast(
            getClassType().getPrototype()-> shallowCopy()); 
    }
    
    return fc; 
}

//! create an empty new instance of the class, do not copy the prototype
inline
TextureLayerPtr TextureLayerBase::createEmpty(void) 
{ 
    TextureLayerPtr returnValue; 
    
    newPtr(returnValue); 

    return returnValue; 
}


/*------------------------------ get -----------------------------------*/

//! Get the TextureLayer::_sfTexture field.
inline
const SFTextureChunkPtr *TextureLayerBase::getSFTexture(void) const
{
    return &_sfTexture;
}

//! Get the TextureLayer::_sfTexture field.
inline
SFTextureChunkPtr *TextureLayerBase::editSFTexture(void)
{
    return &_sfTexture;
}

#ifndef OSG_2_PREP
//! Get the TextureLayer::_sfTexture field.
inline
SFTextureChunkPtr *TextureLayerBase::getSFTexture(void)
{
    return &_sfTexture;
}
#endif

//! Get the TextureLayer::_sfTransformation field.
inline
const SFTextureTransformChunkPtr *TextureLayerBase::getSFTransformation(void) const
{
    return &_sfTransformation;
}

//! Get the TextureLayer::_sfTransformation field.
inline
SFTextureTransformChunkPtr *TextureLayerBase::editSFTransformation(void)
{
    return &_sfTransformation;
}

#ifndef OSG_2_PREP
//! Get the TextureLayer::_sfTransformation field.
inline
SFTextureTransformChunkPtr *TextureLayerBase::getSFTransformation(void)
{
    return &_sfTransformation;
}
#endif

//! Get the TextureLayer::_sfColor field.
inline
const SFColor4f *TextureLayerBase::getSFColor(void) const
{
    return &_sfColor;
}

//! Get the TextureLayer::_sfColor field.
inline
SFColor4f *TextureLayerBase::editSFColor(void)
{
    return &_sfColor;
}

#ifndef OSG_2_PREP
//! Get the TextureLayer::_sfColor field.
inline
SFColor4f *TextureLayerBase::getSFColor(void)
{
    return &_sfColor;
}
#endif

//! Get the TextureLayer::_sfScale field.
inline
const SFUInt32 *TextureLayerBase::getSFScale(void) const
{
    return &_sfScale;
}

//! Get the TextureLayer::_sfScale field.
inline
SFUInt32 *TextureLayerBase::editSFScale(void)
{
    return &_sfScale;
}

#ifndef OSG_2_PREP
//! Get the TextureLayer::_sfScale field.
inline
SFUInt32 *TextureLayerBase::getSFScale(void)
{
    return &_sfScale;
}
#endif

//! Get the TextureLayer::_sfScaleAbsoluteSize field.
inline
const SFVec2s *TextureLayerBase::getSFScaleAbsoluteSize(void) const
{
    return &_sfScaleAbsoluteSize;
}

//! Get the TextureLayer::_sfScaleAbsoluteSize field.
inline
SFVec2s *TextureLayerBase::editSFScaleAbsoluteSize(void)
{
    return &_sfScaleAbsoluteSize;
}

#ifndef OSG_2_PREP
//! Get the TextureLayer::_sfScaleAbsoluteSize field.
inline
SFVec2s *TextureLayerBase::getSFScaleAbsoluteSize(void)
{
    return &_sfScaleAbsoluteSize;
}
#endif

//! Get the TextureLayer::_sfVerticalAlignment field.
inline
const SFReal32 *TextureLayerBase::getSFVerticalAlignment(void) const
{
    return &_sfVerticalAlignment;
}

//! Get the TextureLayer::_sfVerticalAlignment field.
inline
SFReal32 *TextureLayerBase::editSFVerticalAlignment(void)
{
    return &_sfVerticalAlignment;
}

#ifndef OSG_2_PREP
//! Get the TextureLayer::_sfVerticalAlignment field.
inline
SFReal32 *TextureLayerBase::getSFVerticalAlignment(void)
{
    return &_sfVerticalAlignment;
}
#endif

//! Get the TextureLayer::_sfHorizontalAlignment field.
inline
const SFReal32 *TextureLayerBase::getSFHorizontalAlignment(void) const
{
    return &_sfHorizontalAlignment;
}

//! Get the TextureLayer::_sfHorizontalAlignment field.
inline
SFReal32 *TextureLayerBase::editSFHorizontalAlignment(void)
{
    return &_sfHorizontalAlignment;
}

#ifndef OSG_2_PREP
//! Get the TextureLayer::_sfHorizontalAlignment field.
inline
SFReal32 *TextureLayerBase::getSFHorizontalAlignment(void)
{
    return &_sfHorizontalAlignment;
}
#endif


//! Get the value of the TextureLayer::_sfTexture field.
inline
TextureChunkPtr &TextureLayerBase::editTexture(void)
{
    return _sfTexture.getValue();
}

//! Get the value of the TextureLayer::_sfTexture field.
inline
const TextureChunkPtr &TextureLayerBase::getTexture(void) const
{
    return _sfTexture.getValue();
}

#ifndef OSG_2_PREP
//! Get the value of the TextureLayer::_sfTexture field.
inline
TextureChunkPtr &TextureLayerBase::getTexture(void)
{
    return _sfTexture.getValue();
}
#endif

//! Set the value of the TextureLayer::_sfTexture field.
inline
void TextureLayerBase::setTexture(const TextureChunkPtr &value)
{
    _sfTexture.setValue(value);
}

//! Get the value of the TextureLayer::_sfTransformation field.
inline
TextureTransformChunkPtr &TextureLayerBase::editTransformation(void)
{
    return _sfTransformation.getValue();
}

//! Get the value of the TextureLayer::_sfTransformation field.
inline
const TextureTransformChunkPtr &TextureLayerBase::getTransformation(void) const
{
    return _sfTransformation.getValue();
}

#ifndef OSG_2_PREP
//! Get the value of the TextureLayer::_sfTransformation field.
inline
TextureTransformChunkPtr &TextureLayerBase::getTransformation(void)
{
    return _sfTransformation.getValue();
}
#endif

//! Set the value of the TextureLayer::_sfTransformation field.
inline
void TextureLayerBase::setTransformation(const TextureTransformChunkPtr &value)
{
    _sfTransformation.setValue(value);
}

//! Get the value of the TextureLayer::_sfColor field.
inline
Color4f &TextureLayerBase::editColor(void)
{
    return _sfColor.getValue();
}

//! Get the value of the TextureLayer::_sfColor field.
inline
const Color4f &TextureLayerBase::getColor(void) const
{
    return _sfColor.getValue();
}

#ifndef OSG_2_PREP
//! Get the value of the TextureLayer::_sfColor field.
inline
Color4f &TextureLayerBase::getColor(void)
{
    return _sfColor.getValue();
}
#endif

//! Set the value of the TextureLayer::_sfColor field.
inline
void TextureLayerBase::setColor(const Color4f &value)
{
    _sfColor.setValue(value);
}

//! Get the value of the TextureLayer::_sfScale field.
inline
UInt32 &TextureLayerBase::editScale(void)
{
    return _sfScale.getValue();
}

//! Get the value of the TextureLayer::_sfScale field.
inline
const UInt32 &TextureLayerBase::getScale(void) const
{
    return _sfScale.getValue();
}

#ifndef OSG_2_PREP
//! Get the value of the TextureLayer::_sfScale field.
inline
UInt32 &TextureLayerBase::getScale(void)
{
    return _sfScale.getValue();
}
#endif

//! Set the value of the TextureLayer::_sfScale field.
inline
void TextureLayerBase::setScale(const UInt32 &value)
{
    _sfScale.setValue(value);
}

//! Get the value of the TextureLayer::_sfScaleAbsoluteSize field.
inline
Vec2s &TextureLayerBase::editScaleAbsoluteSize(void)
{
    return _sfScaleAbsoluteSize.getValue();
}

//! Get the value of the TextureLayer::_sfScaleAbsoluteSize field.
inline
const Vec2s &TextureLayerBase::getScaleAbsoluteSize(void) const
{
    return _sfScaleAbsoluteSize.getValue();
}

#ifndef OSG_2_PREP
//! Get the value of the TextureLayer::_sfScaleAbsoluteSize field.
inline
Vec2s &TextureLayerBase::getScaleAbsoluteSize(void)
{
    return _sfScaleAbsoluteSize.getValue();
}
#endif

//! Set the value of the TextureLayer::_sfScaleAbsoluteSize field.
inline
void TextureLayerBase::setScaleAbsoluteSize(const Vec2s &value)
{
    _sfScaleAbsoluteSize.setValue(value);
}

//! Get the value of the TextureLayer::_sfVerticalAlignment field.
inline
Real32 &TextureLayerBase::editVerticalAlignment(void)
{
    return _sfVerticalAlignment.getValue();
}

//! Get the value of the TextureLayer::_sfVerticalAlignment field.
inline
const Real32 &TextureLayerBase::getVerticalAlignment(void) const
{
    return _sfVerticalAlignment.getValue();
}

#ifndef OSG_2_PREP
//! Get the value of the TextureLayer::_sfVerticalAlignment field.
inline
Real32 &TextureLayerBase::getVerticalAlignment(void)
{
    return _sfVerticalAlignment.getValue();
}
#endif

//! Set the value of the TextureLayer::_sfVerticalAlignment field.
inline
void TextureLayerBase::setVerticalAlignment(const Real32 &value)
{
    _sfVerticalAlignment.setValue(value);
}

//! Get the value of the TextureLayer::_sfHorizontalAlignment field.
inline
Real32 &TextureLayerBase::editHorizontalAlignment(void)
{
    return _sfHorizontalAlignment.getValue();
}

//! Get the value of the TextureLayer::_sfHorizontalAlignment field.
inline
const Real32 &TextureLayerBase::getHorizontalAlignment(void) const
{
    return _sfHorizontalAlignment.getValue();
}

#ifndef OSG_2_PREP
//! Get the value of the TextureLayer::_sfHorizontalAlignment field.
inline
Real32 &TextureLayerBase::getHorizontalAlignment(void)
{
    return _sfHorizontalAlignment.getValue();
}
#endif

//! Set the value of the TextureLayer::_sfHorizontalAlignment field.
inline
void TextureLayerBase::setHorizontalAlignment(const Real32 &value)
{
    _sfHorizontalAlignment.setValue(value);
}


OSG_END_NAMESPACE

